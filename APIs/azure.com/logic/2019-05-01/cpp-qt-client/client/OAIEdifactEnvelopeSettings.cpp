/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactEnvelopeSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactEnvelopeSettings::OAIEdifactEnvelopeSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactEnvelopeSettings::OAIEdifactEnvelopeSettings() {
    this->initializeModel();
}

OAIEdifactEnvelopeSettings::~OAIEdifactEnvelopeSettings() {}

void OAIEdifactEnvelopeSettings::initializeModel() {

    m_application_reference_id_isSet = false;
    m_application_reference_id_isValid = false;

    m_apply_delimiter_string_advice_isSet = false;
    m_apply_delimiter_string_advice_isValid = false;

    m_communication_agreement_id_isSet = false;
    m_communication_agreement_id_isValid = false;

    m_create_grouping_segments_isSet = false;
    m_create_grouping_segments_isValid = false;

    m_enable_default_group_headers_isSet = false;
    m_enable_default_group_headers_isValid = false;

    m_functional_group_id_isSet = false;
    m_functional_group_id_isValid = false;

    m_group_application_password_isSet = false;
    m_group_application_password_isValid = false;

    m_group_application_receiver_id_isSet = false;
    m_group_application_receiver_id_isValid = false;

    m_group_application_receiver_qualifier_isSet = false;
    m_group_application_receiver_qualifier_isValid = false;

    m_group_application_sender_id_isSet = false;
    m_group_application_sender_id_isValid = false;

    m_group_application_sender_qualifier_isSet = false;
    m_group_application_sender_qualifier_isValid = false;

    m_group_association_assigned_code_isSet = false;
    m_group_association_assigned_code_isValid = false;

    m_group_control_number_lower_bound_isSet = false;
    m_group_control_number_lower_bound_isValid = false;

    m_group_control_number_prefix_isSet = false;
    m_group_control_number_prefix_isValid = false;

    m_group_control_number_suffix_isSet = false;
    m_group_control_number_suffix_isValid = false;

    m_group_control_number_upper_bound_isSet = false;
    m_group_control_number_upper_bound_isValid = false;

    m_group_controlling_agency_code_isSet = false;
    m_group_controlling_agency_code_isValid = false;

    m_group_message_release_isSet = false;
    m_group_message_release_isValid = false;

    m_group_message_version_isSet = false;
    m_group_message_version_isValid = false;

    m_interchange_control_number_lower_bound_isSet = false;
    m_interchange_control_number_lower_bound_isValid = false;

    m_interchange_control_number_prefix_isSet = false;
    m_interchange_control_number_prefix_isValid = false;

    m_interchange_control_number_suffix_isSet = false;
    m_interchange_control_number_suffix_isValid = false;

    m_interchange_control_number_upper_bound_isSet = false;
    m_interchange_control_number_upper_bound_isValid = false;

    m_is_test_interchange_isSet = false;
    m_is_test_interchange_isValid = false;

    m_overwrite_existing_transaction_set_control_number_isSet = false;
    m_overwrite_existing_transaction_set_control_number_isValid = false;

    m_processing_priority_code_isSet = false;
    m_processing_priority_code_isValid = false;

    m_receiver_internal_identification_isSet = false;
    m_receiver_internal_identification_isValid = false;

    m_receiver_internal_sub_identification_isSet = false;
    m_receiver_internal_sub_identification_isValid = false;

    m_receiver_reverse_routing_address_isSet = false;
    m_receiver_reverse_routing_address_isValid = false;

    m_recipient_reference_password_qualifier_isSet = false;
    m_recipient_reference_password_qualifier_isValid = false;

    m_recipient_reference_password_value_isSet = false;
    m_recipient_reference_password_value_isValid = false;

    m_rollover_group_control_number_isSet = false;
    m_rollover_group_control_number_isValid = false;

    m_rollover_interchange_control_number_isSet = false;
    m_rollover_interchange_control_number_isValid = false;

    m_rollover_transaction_set_control_number_isSet = false;
    m_rollover_transaction_set_control_number_isValid = false;

    m_sender_internal_identification_isSet = false;
    m_sender_internal_identification_isValid = false;

    m_sender_internal_sub_identification_isSet = false;
    m_sender_internal_sub_identification_isValid = false;

    m_sender_reverse_routing_address_isSet = false;
    m_sender_reverse_routing_address_isValid = false;

    m_transaction_set_control_number_lower_bound_isSet = false;
    m_transaction_set_control_number_lower_bound_isValid = false;

    m_transaction_set_control_number_prefix_isSet = false;
    m_transaction_set_control_number_prefix_isValid = false;

    m_transaction_set_control_number_suffix_isSet = false;
    m_transaction_set_control_number_suffix_isValid = false;

    m_transaction_set_control_number_upper_bound_isSet = false;
    m_transaction_set_control_number_upper_bound_isValid = false;
}

void OAIEdifactEnvelopeSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactEnvelopeSettings::fromJsonObject(QJsonObject json) {

    m_application_reference_id_isValid = ::OpenAPI::fromJsonValue(m_application_reference_id, json[QString("applicationReferenceId")]);
    m_application_reference_id_isSet = !json[QString("applicationReferenceId")].isNull() && m_application_reference_id_isValid;

    m_apply_delimiter_string_advice_isValid = ::OpenAPI::fromJsonValue(m_apply_delimiter_string_advice, json[QString("applyDelimiterStringAdvice")]);
    m_apply_delimiter_string_advice_isSet = !json[QString("applyDelimiterStringAdvice")].isNull() && m_apply_delimiter_string_advice_isValid;

    m_communication_agreement_id_isValid = ::OpenAPI::fromJsonValue(m_communication_agreement_id, json[QString("communicationAgreementId")]);
    m_communication_agreement_id_isSet = !json[QString("communicationAgreementId")].isNull() && m_communication_agreement_id_isValid;

    m_create_grouping_segments_isValid = ::OpenAPI::fromJsonValue(m_create_grouping_segments, json[QString("createGroupingSegments")]);
    m_create_grouping_segments_isSet = !json[QString("createGroupingSegments")].isNull() && m_create_grouping_segments_isValid;

    m_enable_default_group_headers_isValid = ::OpenAPI::fromJsonValue(m_enable_default_group_headers, json[QString("enableDefaultGroupHeaders")]);
    m_enable_default_group_headers_isSet = !json[QString("enableDefaultGroupHeaders")].isNull() && m_enable_default_group_headers_isValid;

    m_functional_group_id_isValid = ::OpenAPI::fromJsonValue(m_functional_group_id, json[QString("functionalGroupId")]);
    m_functional_group_id_isSet = !json[QString("functionalGroupId")].isNull() && m_functional_group_id_isValid;

    m_group_application_password_isValid = ::OpenAPI::fromJsonValue(m_group_application_password, json[QString("groupApplicationPassword")]);
    m_group_application_password_isSet = !json[QString("groupApplicationPassword")].isNull() && m_group_application_password_isValid;

    m_group_application_receiver_id_isValid = ::OpenAPI::fromJsonValue(m_group_application_receiver_id, json[QString("groupApplicationReceiverId")]);
    m_group_application_receiver_id_isSet = !json[QString("groupApplicationReceiverId")].isNull() && m_group_application_receiver_id_isValid;

    m_group_application_receiver_qualifier_isValid = ::OpenAPI::fromJsonValue(m_group_application_receiver_qualifier, json[QString("groupApplicationReceiverQualifier")]);
    m_group_application_receiver_qualifier_isSet = !json[QString("groupApplicationReceiverQualifier")].isNull() && m_group_application_receiver_qualifier_isValid;

    m_group_application_sender_id_isValid = ::OpenAPI::fromJsonValue(m_group_application_sender_id, json[QString("groupApplicationSenderId")]);
    m_group_application_sender_id_isSet = !json[QString("groupApplicationSenderId")].isNull() && m_group_application_sender_id_isValid;

    m_group_application_sender_qualifier_isValid = ::OpenAPI::fromJsonValue(m_group_application_sender_qualifier, json[QString("groupApplicationSenderQualifier")]);
    m_group_application_sender_qualifier_isSet = !json[QString("groupApplicationSenderQualifier")].isNull() && m_group_application_sender_qualifier_isValid;

    m_group_association_assigned_code_isValid = ::OpenAPI::fromJsonValue(m_group_association_assigned_code, json[QString("groupAssociationAssignedCode")]);
    m_group_association_assigned_code_isSet = !json[QString("groupAssociationAssignedCode")].isNull() && m_group_association_assigned_code_isValid;

    m_group_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_group_control_number_lower_bound, json[QString("groupControlNumberLowerBound")]);
    m_group_control_number_lower_bound_isSet = !json[QString("groupControlNumberLowerBound")].isNull() && m_group_control_number_lower_bound_isValid;

    m_group_control_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_group_control_number_prefix, json[QString("groupControlNumberPrefix")]);
    m_group_control_number_prefix_isSet = !json[QString("groupControlNumberPrefix")].isNull() && m_group_control_number_prefix_isValid;

    m_group_control_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_group_control_number_suffix, json[QString("groupControlNumberSuffix")]);
    m_group_control_number_suffix_isSet = !json[QString("groupControlNumberSuffix")].isNull() && m_group_control_number_suffix_isValid;

    m_group_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_group_control_number_upper_bound, json[QString("groupControlNumberUpperBound")]);
    m_group_control_number_upper_bound_isSet = !json[QString("groupControlNumberUpperBound")].isNull() && m_group_control_number_upper_bound_isValid;

    m_group_controlling_agency_code_isValid = ::OpenAPI::fromJsonValue(m_group_controlling_agency_code, json[QString("groupControllingAgencyCode")]);
    m_group_controlling_agency_code_isSet = !json[QString("groupControllingAgencyCode")].isNull() && m_group_controlling_agency_code_isValid;

    m_group_message_release_isValid = ::OpenAPI::fromJsonValue(m_group_message_release, json[QString("groupMessageRelease")]);
    m_group_message_release_isSet = !json[QString("groupMessageRelease")].isNull() && m_group_message_release_isValid;

    m_group_message_version_isValid = ::OpenAPI::fromJsonValue(m_group_message_version, json[QString("groupMessageVersion")]);
    m_group_message_version_isSet = !json[QString("groupMessageVersion")].isNull() && m_group_message_version_isValid;

    m_interchange_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_lower_bound, json[QString("interchangeControlNumberLowerBound")]);
    m_interchange_control_number_lower_bound_isSet = !json[QString("interchangeControlNumberLowerBound")].isNull() && m_interchange_control_number_lower_bound_isValid;

    m_interchange_control_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_prefix, json[QString("interchangeControlNumberPrefix")]);
    m_interchange_control_number_prefix_isSet = !json[QString("interchangeControlNumberPrefix")].isNull() && m_interchange_control_number_prefix_isValid;

    m_interchange_control_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_suffix, json[QString("interchangeControlNumberSuffix")]);
    m_interchange_control_number_suffix_isSet = !json[QString("interchangeControlNumberSuffix")].isNull() && m_interchange_control_number_suffix_isValid;

    m_interchange_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_upper_bound, json[QString("interchangeControlNumberUpperBound")]);
    m_interchange_control_number_upper_bound_isSet = !json[QString("interchangeControlNumberUpperBound")].isNull() && m_interchange_control_number_upper_bound_isValid;

    m_is_test_interchange_isValid = ::OpenAPI::fromJsonValue(m_is_test_interchange, json[QString("isTestInterchange")]);
    m_is_test_interchange_isSet = !json[QString("isTestInterchange")].isNull() && m_is_test_interchange_isValid;

    m_overwrite_existing_transaction_set_control_number_isValid = ::OpenAPI::fromJsonValue(m_overwrite_existing_transaction_set_control_number, json[QString("overwriteExistingTransactionSetControlNumber")]);
    m_overwrite_existing_transaction_set_control_number_isSet = !json[QString("overwriteExistingTransactionSetControlNumber")].isNull() && m_overwrite_existing_transaction_set_control_number_isValid;

    m_processing_priority_code_isValid = ::OpenAPI::fromJsonValue(m_processing_priority_code, json[QString("processingPriorityCode")]);
    m_processing_priority_code_isSet = !json[QString("processingPriorityCode")].isNull() && m_processing_priority_code_isValid;

    m_receiver_internal_identification_isValid = ::OpenAPI::fromJsonValue(m_receiver_internal_identification, json[QString("receiverInternalIdentification")]);
    m_receiver_internal_identification_isSet = !json[QString("receiverInternalIdentification")].isNull() && m_receiver_internal_identification_isValid;

    m_receiver_internal_sub_identification_isValid = ::OpenAPI::fromJsonValue(m_receiver_internal_sub_identification, json[QString("receiverInternalSubIdentification")]);
    m_receiver_internal_sub_identification_isSet = !json[QString("receiverInternalSubIdentification")].isNull() && m_receiver_internal_sub_identification_isValid;

    m_receiver_reverse_routing_address_isValid = ::OpenAPI::fromJsonValue(m_receiver_reverse_routing_address, json[QString("receiverReverseRoutingAddress")]);
    m_receiver_reverse_routing_address_isSet = !json[QString("receiverReverseRoutingAddress")].isNull() && m_receiver_reverse_routing_address_isValid;

    m_recipient_reference_password_qualifier_isValid = ::OpenAPI::fromJsonValue(m_recipient_reference_password_qualifier, json[QString("recipientReferencePasswordQualifier")]);
    m_recipient_reference_password_qualifier_isSet = !json[QString("recipientReferencePasswordQualifier")].isNull() && m_recipient_reference_password_qualifier_isValid;

    m_recipient_reference_password_value_isValid = ::OpenAPI::fromJsonValue(m_recipient_reference_password_value, json[QString("recipientReferencePasswordValue")]);
    m_recipient_reference_password_value_isSet = !json[QString("recipientReferencePasswordValue")].isNull() && m_recipient_reference_password_value_isValid;

    m_rollover_group_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_group_control_number, json[QString("rolloverGroupControlNumber")]);
    m_rollover_group_control_number_isSet = !json[QString("rolloverGroupControlNumber")].isNull() && m_rollover_group_control_number_isValid;

    m_rollover_interchange_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_interchange_control_number, json[QString("rolloverInterchangeControlNumber")]);
    m_rollover_interchange_control_number_isSet = !json[QString("rolloverInterchangeControlNumber")].isNull() && m_rollover_interchange_control_number_isValid;

    m_rollover_transaction_set_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_transaction_set_control_number, json[QString("rolloverTransactionSetControlNumber")]);
    m_rollover_transaction_set_control_number_isSet = !json[QString("rolloverTransactionSetControlNumber")].isNull() && m_rollover_transaction_set_control_number_isValid;

    m_sender_internal_identification_isValid = ::OpenAPI::fromJsonValue(m_sender_internal_identification, json[QString("senderInternalIdentification")]);
    m_sender_internal_identification_isSet = !json[QString("senderInternalIdentification")].isNull() && m_sender_internal_identification_isValid;

    m_sender_internal_sub_identification_isValid = ::OpenAPI::fromJsonValue(m_sender_internal_sub_identification, json[QString("senderInternalSubIdentification")]);
    m_sender_internal_sub_identification_isSet = !json[QString("senderInternalSubIdentification")].isNull() && m_sender_internal_sub_identification_isValid;

    m_sender_reverse_routing_address_isValid = ::OpenAPI::fromJsonValue(m_sender_reverse_routing_address, json[QString("senderReverseRoutingAddress")]);
    m_sender_reverse_routing_address_isSet = !json[QString("senderReverseRoutingAddress")].isNull() && m_sender_reverse_routing_address_isValid;

    m_transaction_set_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_lower_bound, json[QString("transactionSetControlNumberLowerBound")]);
    m_transaction_set_control_number_lower_bound_isSet = !json[QString("transactionSetControlNumberLowerBound")].isNull() && m_transaction_set_control_number_lower_bound_isValid;

    m_transaction_set_control_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_prefix, json[QString("transactionSetControlNumberPrefix")]);
    m_transaction_set_control_number_prefix_isSet = !json[QString("transactionSetControlNumberPrefix")].isNull() && m_transaction_set_control_number_prefix_isValid;

    m_transaction_set_control_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_suffix, json[QString("transactionSetControlNumberSuffix")]);
    m_transaction_set_control_number_suffix_isSet = !json[QString("transactionSetControlNumberSuffix")].isNull() && m_transaction_set_control_number_suffix_isValid;

    m_transaction_set_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_upper_bound, json[QString("transactionSetControlNumberUpperBound")]);
    m_transaction_set_control_number_upper_bound_isSet = !json[QString("transactionSetControlNumberUpperBound")].isNull() && m_transaction_set_control_number_upper_bound_isValid;
}

QString OAIEdifactEnvelopeSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactEnvelopeSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_application_reference_id_isSet) {
        obj.insert(QString("applicationReferenceId"), ::OpenAPI::toJsonValue(m_application_reference_id));
    }
    if (m_apply_delimiter_string_advice_isSet) {
        obj.insert(QString("applyDelimiterStringAdvice"), ::OpenAPI::toJsonValue(m_apply_delimiter_string_advice));
    }
    if (m_communication_agreement_id_isSet) {
        obj.insert(QString("communicationAgreementId"), ::OpenAPI::toJsonValue(m_communication_agreement_id));
    }
    if (m_create_grouping_segments_isSet) {
        obj.insert(QString("createGroupingSegments"), ::OpenAPI::toJsonValue(m_create_grouping_segments));
    }
    if (m_enable_default_group_headers_isSet) {
        obj.insert(QString("enableDefaultGroupHeaders"), ::OpenAPI::toJsonValue(m_enable_default_group_headers));
    }
    if (m_functional_group_id_isSet) {
        obj.insert(QString("functionalGroupId"), ::OpenAPI::toJsonValue(m_functional_group_id));
    }
    if (m_group_application_password_isSet) {
        obj.insert(QString("groupApplicationPassword"), ::OpenAPI::toJsonValue(m_group_application_password));
    }
    if (m_group_application_receiver_id_isSet) {
        obj.insert(QString("groupApplicationReceiverId"), ::OpenAPI::toJsonValue(m_group_application_receiver_id));
    }
    if (m_group_application_receiver_qualifier_isSet) {
        obj.insert(QString("groupApplicationReceiverQualifier"), ::OpenAPI::toJsonValue(m_group_application_receiver_qualifier));
    }
    if (m_group_application_sender_id_isSet) {
        obj.insert(QString("groupApplicationSenderId"), ::OpenAPI::toJsonValue(m_group_application_sender_id));
    }
    if (m_group_application_sender_qualifier_isSet) {
        obj.insert(QString("groupApplicationSenderQualifier"), ::OpenAPI::toJsonValue(m_group_application_sender_qualifier));
    }
    if (m_group_association_assigned_code_isSet) {
        obj.insert(QString("groupAssociationAssignedCode"), ::OpenAPI::toJsonValue(m_group_association_assigned_code));
    }
    if (m_group_control_number_lower_bound_isSet) {
        obj.insert(QString("groupControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_group_control_number_lower_bound));
    }
    if (m_group_control_number_prefix_isSet) {
        obj.insert(QString("groupControlNumberPrefix"), ::OpenAPI::toJsonValue(m_group_control_number_prefix));
    }
    if (m_group_control_number_suffix_isSet) {
        obj.insert(QString("groupControlNumberSuffix"), ::OpenAPI::toJsonValue(m_group_control_number_suffix));
    }
    if (m_group_control_number_upper_bound_isSet) {
        obj.insert(QString("groupControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_group_control_number_upper_bound));
    }
    if (m_group_controlling_agency_code_isSet) {
        obj.insert(QString("groupControllingAgencyCode"), ::OpenAPI::toJsonValue(m_group_controlling_agency_code));
    }
    if (m_group_message_release_isSet) {
        obj.insert(QString("groupMessageRelease"), ::OpenAPI::toJsonValue(m_group_message_release));
    }
    if (m_group_message_version_isSet) {
        obj.insert(QString("groupMessageVersion"), ::OpenAPI::toJsonValue(m_group_message_version));
    }
    if (m_interchange_control_number_lower_bound_isSet) {
        obj.insert(QString("interchangeControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_interchange_control_number_lower_bound));
    }
    if (m_interchange_control_number_prefix_isSet) {
        obj.insert(QString("interchangeControlNumberPrefix"), ::OpenAPI::toJsonValue(m_interchange_control_number_prefix));
    }
    if (m_interchange_control_number_suffix_isSet) {
        obj.insert(QString("interchangeControlNumberSuffix"), ::OpenAPI::toJsonValue(m_interchange_control_number_suffix));
    }
    if (m_interchange_control_number_upper_bound_isSet) {
        obj.insert(QString("interchangeControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_interchange_control_number_upper_bound));
    }
    if (m_is_test_interchange_isSet) {
        obj.insert(QString("isTestInterchange"), ::OpenAPI::toJsonValue(m_is_test_interchange));
    }
    if (m_overwrite_existing_transaction_set_control_number_isSet) {
        obj.insert(QString("overwriteExistingTransactionSetControlNumber"), ::OpenAPI::toJsonValue(m_overwrite_existing_transaction_set_control_number));
    }
    if (m_processing_priority_code_isSet) {
        obj.insert(QString("processingPriorityCode"), ::OpenAPI::toJsonValue(m_processing_priority_code));
    }
    if (m_receiver_internal_identification_isSet) {
        obj.insert(QString("receiverInternalIdentification"), ::OpenAPI::toJsonValue(m_receiver_internal_identification));
    }
    if (m_receiver_internal_sub_identification_isSet) {
        obj.insert(QString("receiverInternalSubIdentification"), ::OpenAPI::toJsonValue(m_receiver_internal_sub_identification));
    }
    if (m_receiver_reverse_routing_address_isSet) {
        obj.insert(QString("receiverReverseRoutingAddress"), ::OpenAPI::toJsonValue(m_receiver_reverse_routing_address));
    }
    if (m_recipient_reference_password_qualifier_isSet) {
        obj.insert(QString("recipientReferencePasswordQualifier"), ::OpenAPI::toJsonValue(m_recipient_reference_password_qualifier));
    }
    if (m_recipient_reference_password_value_isSet) {
        obj.insert(QString("recipientReferencePasswordValue"), ::OpenAPI::toJsonValue(m_recipient_reference_password_value));
    }
    if (m_rollover_group_control_number_isSet) {
        obj.insert(QString("rolloverGroupControlNumber"), ::OpenAPI::toJsonValue(m_rollover_group_control_number));
    }
    if (m_rollover_interchange_control_number_isSet) {
        obj.insert(QString("rolloverInterchangeControlNumber"), ::OpenAPI::toJsonValue(m_rollover_interchange_control_number));
    }
    if (m_rollover_transaction_set_control_number_isSet) {
        obj.insert(QString("rolloverTransactionSetControlNumber"), ::OpenAPI::toJsonValue(m_rollover_transaction_set_control_number));
    }
    if (m_sender_internal_identification_isSet) {
        obj.insert(QString("senderInternalIdentification"), ::OpenAPI::toJsonValue(m_sender_internal_identification));
    }
    if (m_sender_internal_sub_identification_isSet) {
        obj.insert(QString("senderInternalSubIdentification"), ::OpenAPI::toJsonValue(m_sender_internal_sub_identification));
    }
    if (m_sender_reverse_routing_address_isSet) {
        obj.insert(QString("senderReverseRoutingAddress"), ::OpenAPI::toJsonValue(m_sender_reverse_routing_address));
    }
    if (m_transaction_set_control_number_lower_bound_isSet) {
        obj.insert(QString("transactionSetControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_lower_bound));
    }
    if (m_transaction_set_control_number_prefix_isSet) {
        obj.insert(QString("transactionSetControlNumberPrefix"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_prefix));
    }
    if (m_transaction_set_control_number_suffix_isSet) {
        obj.insert(QString("transactionSetControlNumberSuffix"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_suffix));
    }
    if (m_transaction_set_control_number_upper_bound_isSet) {
        obj.insert(QString("transactionSetControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_upper_bound));
    }
    return obj;
}

QString OAIEdifactEnvelopeSettings::getApplicationReferenceId() const {
    return m_application_reference_id;
}
void OAIEdifactEnvelopeSettings::setApplicationReferenceId(const QString &application_reference_id) {
    m_application_reference_id = application_reference_id;
    m_application_reference_id_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_application_reference_id_Set() const{
    return m_application_reference_id_isSet;
}

bool OAIEdifactEnvelopeSettings::is_application_reference_id_Valid() const{
    return m_application_reference_id_isValid;
}

bool OAIEdifactEnvelopeSettings::isApplyDelimiterStringAdvice() const {
    return m_apply_delimiter_string_advice;
}
void OAIEdifactEnvelopeSettings::setApplyDelimiterStringAdvice(const bool &apply_delimiter_string_advice) {
    m_apply_delimiter_string_advice = apply_delimiter_string_advice;
    m_apply_delimiter_string_advice_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_apply_delimiter_string_advice_Set() const{
    return m_apply_delimiter_string_advice_isSet;
}

bool OAIEdifactEnvelopeSettings::is_apply_delimiter_string_advice_Valid() const{
    return m_apply_delimiter_string_advice_isValid;
}

QString OAIEdifactEnvelopeSettings::getCommunicationAgreementId() const {
    return m_communication_agreement_id;
}
void OAIEdifactEnvelopeSettings::setCommunicationAgreementId(const QString &communication_agreement_id) {
    m_communication_agreement_id = communication_agreement_id;
    m_communication_agreement_id_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_communication_agreement_id_Set() const{
    return m_communication_agreement_id_isSet;
}

bool OAIEdifactEnvelopeSettings::is_communication_agreement_id_Valid() const{
    return m_communication_agreement_id_isValid;
}

bool OAIEdifactEnvelopeSettings::isCreateGroupingSegments() const {
    return m_create_grouping_segments;
}
void OAIEdifactEnvelopeSettings::setCreateGroupingSegments(const bool &create_grouping_segments) {
    m_create_grouping_segments = create_grouping_segments;
    m_create_grouping_segments_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_create_grouping_segments_Set() const{
    return m_create_grouping_segments_isSet;
}

bool OAIEdifactEnvelopeSettings::is_create_grouping_segments_Valid() const{
    return m_create_grouping_segments_isValid;
}

bool OAIEdifactEnvelopeSettings::isEnableDefaultGroupHeaders() const {
    return m_enable_default_group_headers;
}
void OAIEdifactEnvelopeSettings::setEnableDefaultGroupHeaders(const bool &enable_default_group_headers) {
    m_enable_default_group_headers = enable_default_group_headers;
    m_enable_default_group_headers_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_enable_default_group_headers_Set() const{
    return m_enable_default_group_headers_isSet;
}

bool OAIEdifactEnvelopeSettings::is_enable_default_group_headers_Valid() const{
    return m_enable_default_group_headers_isValid;
}

QString OAIEdifactEnvelopeSettings::getFunctionalGroupId() const {
    return m_functional_group_id;
}
void OAIEdifactEnvelopeSettings::setFunctionalGroupId(const QString &functional_group_id) {
    m_functional_group_id = functional_group_id;
    m_functional_group_id_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_functional_group_id_Set() const{
    return m_functional_group_id_isSet;
}

bool OAIEdifactEnvelopeSettings::is_functional_group_id_Valid() const{
    return m_functional_group_id_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupApplicationPassword() const {
    return m_group_application_password;
}
void OAIEdifactEnvelopeSettings::setGroupApplicationPassword(const QString &group_application_password) {
    m_group_application_password = group_application_password;
    m_group_application_password_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_application_password_Set() const{
    return m_group_application_password_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_application_password_Valid() const{
    return m_group_application_password_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupApplicationReceiverId() const {
    return m_group_application_receiver_id;
}
void OAIEdifactEnvelopeSettings::setGroupApplicationReceiverId(const QString &group_application_receiver_id) {
    m_group_application_receiver_id = group_application_receiver_id;
    m_group_application_receiver_id_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_application_receiver_id_Set() const{
    return m_group_application_receiver_id_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_application_receiver_id_Valid() const{
    return m_group_application_receiver_id_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupApplicationReceiverQualifier() const {
    return m_group_application_receiver_qualifier;
}
void OAIEdifactEnvelopeSettings::setGroupApplicationReceiverQualifier(const QString &group_application_receiver_qualifier) {
    m_group_application_receiver_qualifier = group_application_receiver_qualifier;
    m_group_application_receiver_qualifier_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_application_receiver_qualifier_Set() const{
    return m_group_application_receiver_qualifier_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_application_receiver_qualifier_Valid() const{
    return m_group_application_receiver_qualifier_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupApplicationSenderId() const {
    return m_group_application_sender_id;
}
void OAIEdifactEnvelopeSettings::setGroupApplicationSenderId(const QString &group_application_sender_id) {
    m_group_application_sender_id = group_application_sender_id;
    m_group_application_sender_id_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_application_sender_id_Set() const{
    return m_group_application_sender_id_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_application_sender_id_Valid() const{
    return m_group_application_sender_id_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupApplicationSenderQualifier() const {
    return m_group_application_sender_qualifier;
}
void OAIEdifactEnvelopeSettings::setGroupApplicationSenderQualifier(const QString &group_application_sender_qualifier) {
    m_group_application_sender_qualifier = group_application_sender_qualifier;
    m_group_application_sender_qualifier_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_application_sender_qualifier_Set() const{
    return m_group_application_sender_qualifier_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_application_sender_qualifier_Valid() const{
    return m_group_application_sender_qualifier_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupAssociationAssignedCode() const {
    return m_group_association_assigned_code;
}
void OAIEdifactEnvelopeSettings::setGroupAssociationAssignedCode(const QString &group_association_assigned_code) {
    m_group_association_assigned_code = group_association_assigned_code;
    m_group_association_assigned_code_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_association_assigned_code_Set() const{
    return m_group_association_assigned_code_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_association_assigned_code_Valid() const{
    return m_group_association_assigned_code_isValid;
}

qint64 OAIEdifactEnvelopeSettings::getGroupControlNumberLowerBound() const {
    return m_group_control_number_lower_bound;
}
void OAIEdifactEnvelopeSettings::setGroupControlNumberLowerBound(const qint64 &group_control_number_lower_bound) {
    m_group_control_number_lower_bound = group_control_number_lower_bound;
    m_group_control_number_lower_bound_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_lower_bound_Set() const{
    return m_group_control_number_lower_bound_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_lower_bound_Valid() const{
    return m_group_control_number_lower_bound_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupControlNumberPrefix() const {
    return m_group_control_number_prefix;
}
void OAIEdifactEnvelopeSettings::setGroupControlNumberPrefix(const QString &group_control_number_prefix) {
    m_group_control_number_prefix = group_control_number_prefix;
    m_group_control_number_prefix_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_prefix_Set() const{
    return m_group_control_number_prefix_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_prefix_Valid() const{
    return m_group_control_number_prefix_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupControlNumberSuffix() const {
    return m_group_control_number_suffix;
}
void OAIEdifactEnvelopeSettings::setGroupControlNumberSuffix(const QString &group_control_number_suffix) {
    m_group_control_number_suffix = group_control_number_suffix;
    m_group_control_number_suffix_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_suffix_Set() const{
    return m_group_control_number_suffix_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_suffix_Valid() const{
    return m_group_control_number_suffix_isValid;
}

qint64 OAIEdifactEnvelopeSettings::getGroupControlNumberUpperBound() const {
    return m_group_control_number_upper_bound;
}
void OAIEdifactEnvelopeSettings::setGroupControlNumberUpperBound(const qint64 &group_control_number_upper_bound) {
    m_group_control_number_upper_bound = group_control_number_upper_bound;
    m_group_control_number_upper_bound_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_upper_bound_Set() const{
    return m_group_control_number_upper_bound_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_control_number_upper_bound_Valid() const{
    return m_group_control_number_upper_bound_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupControllingAgencyCode() const {
    return m_group_controlling_agency_code;
}
void OAIEdifactEnvelopeSettings::setGroupControllingAgencyCode(const QString &group_controlling_agency_code) {
    m_group_controlling_agency_code = group_controlling_agency_code;
    m_group_controlling_agency_code_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_controlling_agency_code_Set() const{
    return m_group_controlling_agency_code_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_controlling_agency_code_Valid() const{
    return m_group_controlling_agency_code_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupMessageRelease() const {
    return m_group_message_release;
}
void OAIEdifactEnvelopeSettings::setGroupMessageRelease(const QString &group_message_release) {
    m_group_message_release = group_message_release;
    m_group_message_release_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_message_release_Set() const{
    return m_group_message_release_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_message_release_Valid() const{
    return m_group_message_release_isValid;
}

QString OAIEdifactEnvelopeSettings::getGroupMessageVersion() const {
    return m_group_message_version;
}
void OAIEdifactEnvelopeSettings::setGroupMessageVersion(const QString &group_message_version) {
    m_group_message_version = group_message_version;
    m_group_message_version_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_group_message_version_Set() const{
    return m_group_message_version_isSet;
}

bool OAIEdifactEnvelopeSettings::is_group_message_version_Valid() const{
    return m_group_message_version_isValid;
}

qint64 OAIEdifactEnvelopeSettings::getInterchangeControlNumberLowerBound() const {
    return m_interchange_control_number_lower_bound;
}
void OAIEdifactEnvelopeSettings::setInterchangeControlNumberLowerBound(const qint64 &interchange_control_number_lower_bound) {
    m_interchange_control_number_lower_bound = interchange_control_number_lower_bound;
    m_interchange_control_number_lower_bound_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_lower_bound_Set() const{
    return m_interchange_control_number_lower_bound_isSet;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_lower_bound_Valid() const{
    return m_interchange_control_number_lower_bound_isValid;
}

QString OAIEdifactEnvelopeSettings::getInterchangeControlNumberPrefix() const {
    return m_interchange_control_number_prefix;
}
void OAIEdifactEnvelopeSettings::setInterchangeControlNumberPrefix(const QString &interchange_control_number_prefix) {
    m_interchange_control_number_prefix = interchange_control_number_prefix;
    m_interchange_control_number_prefix_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_prefix_Set() const{
    return m_interchange_control_number_prefix_isSet;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_prefix_Valid() const{
    return m_interchange_control_number_prefix_isValid;
}

QString OAIEdifactEnvelopeSettings::getInterchangeControlNumberSuffix() const {
    return m_interchange_control_number_suffix;
}
void OAIEdifactEnvelopeSettings::setInterchangeControlNumberSuffix(const QString &interchange_control_number_suffix) {
    m_interchange_control_number_suffix = interchange_control_number_suffix;
    m_interchange_control_number_suffix_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_suffix_Set() const{
    return m_interchange_control_number_suffix_isSet;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_suffix_Valid() const{
    return m_interchange_control_number_suffix_isValid;
}

qint64 OAIEdifactEnvelopeSettings::getInterchangeControlNumberUpperBound() const {
    return m_interchange_control_number_upper_bound;
}
void OAIEdifactEnvelopeSettings::setInterchangeControlNumberUpperBound(const qint64 &interchange_control_number_upper_bound) {
    m_interchange_control_number_upper_bound = interchange_control_number_upper_bound;
    m_interchange_control_number_upper_bound_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_upper_bound_Set() const{
    return m_interchange_control_number_upper_bound_isSet;
}

bool OAIEdifactEnvelopeSettings::is_interchange_control_number_upper_bound_Valid() const{
    return m_interchange_control_number_upper_bound_isValid;
}

bool OAIEdifactEnvelopeSettings::isIsTestInterchange() const {
    return m_is_test_interchange;
}
void OAIEdifactEnvelopeSettings::setIsTestInterchange(const bool &is_test_interchange) {
    m_is_test_interchange = is_test_interchange;
    m_is_test_interchange_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_is_test_interchange_Set() const{
    return m_is_test_interchange_isSet;
}

bool OAIEdifactEnvelopeSettings::is_is_test_interchange_Valid() const{
    return m_is_test_interchange_isValid;
}

bool OAIEdifactEnvelopeSettings::isOverwriteExistingTransactionSetControlNumber() const {
    return m_overwrite_existing_transaction_set_control_number;
}
void OAIEdifactEnvelopeSettings::setOverwriteExistingTransactionSetControlNumber(const bool &overwrite_existing_transaction_set_control_number) {
    m_overwrite_existing_transaction_set_control_number = overwrite_existing_transaction_set_control_number;
    m_overwrite_existing_transaction_set_control_number_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_overwrite_existing_transaction_set_control_number_Set() const{
    return m_overwrite_existing_transaction_set_control_number_isSet;
}

bool OAIEdifactEnvelopeSettings::is_overwrite_existing_transaction_set_control_number_Valid() const{
    return m_overwrite_existing_transaction_set_control_number_isValid;
}

QString OAIEdifactEnvelopeSettings::getProcessingPriorityCode() const {
    return m_processing_priority_code;
}
void OAIEdifactEnvelopeSettings::setProcessingPriorityCode(const QString &processing_priority_code) {
    m_processing_priority_code = processing_priority_code;
    m_processing_priority_code_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_processing_priority_code_Set() const{
    return m_processing_priority_code_isSet;
}

bool OAIEdifactEnvelopeSettings::is_processing_priority_code_Valid() const{
    return m_processing_priority_code_isValid;
}

QString OAIEdifactEnvelopeSettings::getReceiverInternalIdentification() const {
    return m_receiver_internal_identification;
}
void OAIEdifactEnvelopeSettings::setReceiverInternalIdentification(const QString &receiver_internal_identification) {
    m_receiver_internal_identification = receiver_internal_identification;
    m_receiver_internal_identification_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_receiver_internal_identification_Set() const{
    return m_receiver_internal_identification_isSet;
}

bool OAIEdifactEnvelopeSettings::is_receiver_internal_identification_Valid() const{
    return m_receiver_internal_identification_isValid;
}

QString OAIEdifactEnvelopeSettings::getReceiverInternalSubIdentification() const {
    return m_receiver_internal_sub_identification;
}
void OAIEdifactEnvelopeSettings::setReceiverInternalSubIdentification(const QString &receiver_internal_sub_identification) {
    m_receiver_internal_sub_identification = receiver_internal_sub_identification;
    m_receiver_internal_sub_identification_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_receiver_internal_sub_identification_Set() const{
    return m_receiver_internal_sub_identification_isSet;
}

bool OAIEdifactEnvelopeSettings::is_receiver_internal_sub_identification_Valid() const{
    return m_receiver_internal_sub_identification_isValid;
}

QString OAIEdifactEnvelopeSettings::getReceiverReverseRoutingAddress() const {
    return m_receiver_reverse_routing_address;
}
void OAIEdifactEnvelopeSettings::setReceiverReverseRoutingAddress(const QString &receiver_reverse_routing_address) {
    m_receiver_reverse_routing_address = receiver_reverse_routing_address;
    m_receiver_reverse_routing_address_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_receiver_reverse_routing_address_Set() const{
    return m_receiver_reverse_routing_address_isSet;
}

bool OAIEdifactEnvelopeSettings::is_receiver_reverse_routing_address_Valid() const{
    return m_receiver_reverse_routing_address_isValid;
}

QString OAIEdifactEnvelopeSettings::getRecipientReferencePasswordQualifier() const {
    return m_recipient_reference_password_qualifier;
}
void OAIEdifactEnvelopeSettings::setRecipientReferencePasswordQualifier(const QString &recipient_reference_password_qualifier) {
    m_recipient_reference_password_qualifier = recipient_reference_password_qualifier;
    m_recipient_reference_password_qualifier_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_recipient_reference_password_qualifier_Set() const{
    return m_recipient_reference_password_qualifier_isSet;
}

bool OAIEdifactEnvelopeSettings::is_recipient_reference_password_qualifier_Valid() const{
    return m_recipient_reference_password_qualifier_isValid;
}

QString OAIEdifactEnvelopeSettings::getRecipientReferencePasswordValue() const {
    return m_recipient_reference_password_value;
}
void OAIEdifactEnvelopeSettings::setRecipientReferencePasswordValue(const QString &recipient_reference_password_value) {
    m_recipient_reference_password_value = recipient_reference_password_value;
    m_recipient_reference_password_value_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_recipient_reference_password_value_Set() const{
    return m_recipient_reference_password_value_isSet;
}

bool OAIEdifactEnvelopeSettings::is_recipient_reference_password_value_Valid() const{
    return m_recipient_reference_password_value_isValid;
}

bool OAIEdifactEnvelopeSettings::isRolloverGroupControlNumber() const {
    return m_rollover_group_control_number;
}
void OAIEdifactEnvelopeSettings::setRolloverGroupControlNumber(const bool &rollover_group_control_number) {
    m_rollover_group_control_number = rollover_group_control_number;
    m_rollover_group_control_number_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_rollover_group_control_number_Set() const{
    return m_rollover_group_control_number_isSet;
}

bool OAIEdifactEnvelopeSettings::is_rollover_group_control_number_Valid() const{
    return m_rollover_group_control_number_isValid;
}

bool OAIEdifactEnvelopeSettings::isRolloverInterchangeControlNumber() const {
    return m_rollover_interchange_control_number;
}
void OAIEdifactEnvelopeSettings::setRolloverInterchangeControlNumber(const bool &rollover_interchange_control_number) {
    m_rollover_interchange_control_number = rollover_interchange_control_number;
    m_rollover_interchange_control_number_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_rollover_interchange_control_number_Set() const{
    return m_rollover_interchange_control_number_isSet;
}

bool OAIEdifactEnvelopeSettings::is_rollover_interchange_control_number_Valid() const{
    return m_rollover_interchange_control_number_isValid;
}

bool OAIEdifactEnvelopeSettings::isRolloverTransactionSetControlNumber() const {
    return m_rollover_transaction_set_control_number;
}
void OAIEdifactEnvelopeSettings::setRolloverTransactionSetControlNumber(const bool &rollover_transaction_set_control_number) {
    m_rollover_transaction_set_control_number = rollover_transaction_set_control_number;
    m_rollover_transaction_set_control_number_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_rollover_transaction_set_control_number_Set() const{
    return m_rollover_transaction_set_control_number_isSet;
}

bool OAIEdifactEnvelopeSettings::is_rollover_transaction_set_control_number_Valid() const{
    return m_rollover_transaction_set_control_number_isValid;
}

QString OAIEdifactEnvelopeSettings::getSenderInternalIdentification() const {
    return m_sender_internal_identification;
}
void OAIEdifactEnvelopeSettings::setSenderInternalIdentification(const QString &sender_internal_identification) {
    m_sender_internal_identification = sender_internal_identification;
    m_sender_internal_identification_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_sender_internal_identification_Set() const{
    return m_sender_internal_identification_isSet;
}

bool OAIEdifactEnvelopeSettings::is_sender_internal_identification_Valid() const{
    return m_sender_internal_identification_isValid;
}

QString OAIEdifactEnvelopeSettings::getSenderInternalSubIdentification() const {
    return m_sender_internal_sub_identification;
}
void OAIEdifactEnvelopeSettings::setSenderInternalSubIdentification(const QString &sender_internal_sub_identification) {
    m_sender_internal_sub_identification = sender_internal_sub_identification;
    m_sender_internal_sub_identification_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_sender_internal_sub_identification_Set() const{
    return m_sender_internal_sub_identification_isSet;
}

bool OAIEdifactEnvelopeSettings::is_sender_internal_sub_identification_Valid() const{
    return m_sender_internal_sub_identification_isValid;
}

QString OAIEdifactEnvelopeSettings::getSenderReverseRoutingAddress() const {
    return m_sender_reverse_routing_address;
}
void OAIEdifactEnvelopeSettings::setSenderReverseRoutingAddress(const QString &sender_reverse_routing_address) {
    m_sender_reverse_routing_address = sender_reverse_routing_address;
    m_sender_reverse_routing_address_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_sender_reverse_routing_address_Set() const{
    return m_sender_reverse_routing_address_isSet;
}

bool OAIEdifactEnvelopeSettings::is_sender_reverse_routing_address_Valid() const{
    return m_sender_reverse_routing_address_isValid;
}

qint64 OAIEdifactEnvelopeSettings::getTransactionSetControlNumberLowerBound() const {
    return m_transaction_set_control_number_lower_bound;
}
void OAIEdifactEnvelopeSettings::setTransactionSetControlNumberLowerBound(const qint64 &transaction_set_control_number_lower_bound) {
    m_transaction_set_control_number_lower_bound = transaction_set_control_number_lower_bound;
    m_transaction_set_control_number_lower_bound_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_lower_bound_Set() const{
    return m_transaction_set_control_number_lower_bound_isSet;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_lower_bound_Valid() const{
    return m_transaction_set_control_number_lower_bound_isValid;
}

QString OAIEdifactEnvelopeSettings::getTransactionSetControlNumberPrefix() const {
    return m_transaction_set_control_number_prefix;
}
void OAIEdifactEnvelopeSettings::setTransactionSetControlNumberPrefix(const QString &transaction_set_control_number_prefix) {
    m_transaction_set_control_number_prefix = transaction_set_control_number_prefix;
    m_transaction_set_control_number_prefix_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_prefix_Set() const{
    return m_transaction_set_control_number_prefix_isSet;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_prefix_Valid() const{
    return m_transaction_set_control_number_prefix_isValid;
}

QString OAIEdifactEnvelopeSettings::getTransactionSetControlNumberSuffix() const {
    return m_transaction_set_control_number_suffix;
}
void OAIEdifactEnvelopeSettings::setTransactionSetControlNumberSuffix(const QString &transaction_set_control_number_suffix) {
    m_transaction_set_control_number_suffix = transaction_set_control_number_suffix;
    m_transaction_set_control_number_suffix_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_suffix_Set() const{
    return m_transaction_set_control_number_suffix_isSet;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_suffix_Valid() const{
    return m_transaction_set_control_number_suffix_isValid;
}

qint64 OAIEdifactEnvelopeSettings::getTransactionSetControlNumberUpperBound() const {
    return m_transaction_set_control_number_upper_bound;
}
void OAIEdifactEnvelopeSettings::setTransactionSetControlNumberUpperBound(const qint64 &transaction_set_control_number_upper_bound) {
    m_transaction_set_control_number_upper_bound = transaction_set_control_number_upper_bound;
    m_transaction_set_control_number_upper_bound_isSet = true;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_upper_bound_Set() const{
    return m_transaction_set_control_number_upper_bound_isSet;
}

bool OAIEdifactEnvelopeSettings::is_transaction_set_control_number_upper_bound_Valid() const{
    return m_transaction_set_control_number_upper_bound_isValid;
}

bool OAIEdifactEnvelopeSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_reference_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_apply_delimiter_string_advice_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_communication_agreement_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_grouping_segments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_group_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functional_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_application_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_application_receiver_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_application_receiver_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_application_sender_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_application_sender_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_association_assigned_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_control_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_control_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_controlling_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_message_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_test_interchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_existing_transaction_set_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_processing_priority_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_internal_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_internal_sub_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_reverse_routing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_reference_password_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recipient_reference_password_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_group_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_interchange_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_transaction_set_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_internal_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_internal_sub_identification_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_reverse_routing_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactEnvelopeSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_apply_delimiter_string_advice_isValid && m_create_grouping_segments_isValid && m_enable_default_group_headers_isValid && m_group_control_number_lower_bound_isValid && m_group_control_number_upper_bound_isValid && m_interchange_control_number_lower_bound_isValid && m_interchange_control_number_upper_bound_isValid && m_is_test_interchange_isValid && m_overwrite_existing_transaction_set_control_number_isValid && m_rollover_group_control_number_isValid && m_rollover_interchange_control_number_isValid && m_rollover_transaction_set_control_number_isValid && m_transaction_set_control_number_lower_bound_isValid && m_transaction_set_control_number_upper_bound_isValid && true;
}

} // namespace OpenAPI
