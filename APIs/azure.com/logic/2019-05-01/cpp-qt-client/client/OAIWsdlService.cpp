/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWsdlService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWsdlService::OAIWsdlService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWsdlService::OAIWsdlService() {
    this->initializeModel();
}

OAIWsdlService::~OAIWsdlService() {}

void OAIWsdlService::initializeModel() {

    m_endpoint_qualified_names_isSet = false;
    m_endpoint_qualified_names_isValid = false;

    m_qualified_name_isSet = false;
    m_qualified_name_isValid = false;
}

void OAIWsdlService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWsdlService::fromJsonObject(QJsonObject json) {

    m_endpoint_qualified_names_isValid = ::OpenAPI::fromJsonValue(m_endpoint_qualified_names, json[QString("EndpointQualifiedNames")]);
    m_endpoint_qualified_names_isSet = !json[QString("EndpointQualifiedNames")].isNull() && m_endpoint_qualified_names_isValid;

    m_qualified_name_isValid = ::OpenAPI::fromJsonValue(m_qualified_name, json[QString("qualifiedName")]);
    m_qualified_name_isSet = !json[QString("qualifiedName")].isNull() && m_qualified_name_isValid;
}

QString OAIWsdlService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWsdlService::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoint_qualified_names.size() > 0) {
        obj.insert(QString("EndpointQualifiedNames"), ::OpenAPI::toJsonValue(m_endpoint_qualified_names));
    }
    if (m_qualified_name_isSet) {
        obj.insert(QString("qualifiedName"), ::OpenAPI::toJsonValue(m_qualified_name));
    }
    return obj;
}

QList<QString> OAIWsdlService::getEndpointQualifiedNames() const {
    return m_endpoint_qualified_names;
}
void OAIWsdlService::setEndpointQualifiedNames(const QList<QString> &endpoint_qualified_names) {
    m_endpoint_qualified_names = endpoint_qualified_names;
    m_endpoint_qualified_names_isSet = true;
}

bool OAIWsdlService::is_endpoint_qualified_names_Set() const{
    return m_endpoint_qualified_names_isSet;
}

bool OAIWsdlService::is_endpoint_qualified_names_Valid() const{
    return m_endpoint_qualified_names_isValid;
}

QString OAIWsdlService::getQualifiedName() const {
    return m_qualified_name;
}
void OAIWsdlService::setQualifiedName(const QString &qualified_name) {
    m_qualified_name = qualified_name;
    m_qualified_name_isSet = true;
}

bool OAIWsdlService::is_qualified_name_Set() const{
    return m_qualified_name_isSet;
}

bool OAIWsdlService::is_qualified_name_Valid() const{
    return m_qualified_name_isValid;
}

bool OAIWsdlService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoint_qualified_names.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_qualified_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWsdlService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
