/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerXml.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerXml::OAISwaggerXml(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerXml::OAISwaggerXml() {
    this->initializeModel();
}

OAISwaggerXml::~OAISwaggerXml() {}

void OAISwaggerXml::initializeModel() {

    m_attribute_isSet = false;
    m_attribute_isValid = false;

    m_extensions_isSet = false;
    m_extensions_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_prefix_isSet = false;
    m_prefix_isValid = false;

    m_wrapped_isSet = false;
    m_wrapped_isValid = false;
}

void OAISwaggerXml::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerXml::fromJsonObject(QJsonObject json) {

    m_attribute_isValid = ::OpenAPI::fromJsonValue(m_attribute, json[QString("attribute")]);
    m_attribute_isSet = !json[QString("attribute")].isNull() && m_attribute_isValid;

    m_extensions_isValid = ::OpenAPI::fromJsonValue(m_extensions, json[QString("extensions")]);
    m_extensions_isSet = !json[QString("extensions")].isNull() && m_extensions_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_prefix_isValid = ::OpenAPI::fromJsonValue(m_prefix, json[QString("prefix")]);
    m_prefix_isSet = !json[QString("prefix")].isNull() && m_prefix_isValid;

    m_wrapped_isValid = ::OpenAPI::fromJsonValue(m_wrapped, json[QString("wrapped")]);
    m_wrapped_isSet = !json[QString("wrapped")].isNull() && m_wrapped_isValid;
}

QString OAISwaggerXml::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerXml::asJsonObject() const {
    QJsonObject obj;
    if (m_attribute_isSet) {
        obj.insert(QString("attribute"), ::OpenAPI::toJsonValue(m_attribute));
    }
    if (m_extensions.size() > 0) {
        obj.insert(QString("extensions"), ::OpenAPI::toJsonValue(m_extensions));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_prefix_isSet) {
        obj.insert(QString("prefix"), ::OpenAPI::toJsonValue(m_prefix));
    }
    if (m_wrapped_isSet) {
        obj.insert(QString("wrapped"), ::OpenAPI::toJsonValue(m_wrapped));
    }
    return obj;
}

bool OAISwaggerXml::isAttribute() const {
    return m_attribute;
}
void OAISwaggerXml::setAttribute(const bool &attribute) {
    m_attribute = attribute;
    m_attribute_isSet = true;
}

bool OAISwaggerXml::is_attribute_Set() const{
    return m_attribute_isSet;
}

bool OAISwaggerXml::is_attribute_Valid() const{
    return m_attribute_isValid;
}

QMap<QString, OAIObject> OAISwaggerXml::getExtensions() const {
    return m_extensions;
}
void OAISwaggerXml::setExtensions(const QMap<QString, OAIObject> &extensions) {
    m_extensions = extensions;
    m_extensions_isSet = true;
}

bool OAISwaggerXml::is_extensions_Set() const{
    return m_extensions_isSet;
}

bool OAISwaggerXml::is_extensions_Valid() const{
    return m_extensions_isValid;
}

QString OAISwaggerXml::getName() const {
    return m_name;
}
void OAISwaggerXml::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISwaggerXml::is_name_Set() const{
    return m_name_isSet;
}

bool OAISwaggerXml::is_name_Valid() const{
    return m_name_isValid;
}

QString OAISwaggerXml::getRNamespace() const {
    return m_r_namespace;
}
void OAISwaggerXml::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAISwaggerXml::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAISwaggerXml::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAISwaggerXml::getPrefix() const {
    return m_prefix;
}
void OAISwaggerXml::setPrefix(const QString &prefix) {
    m_prefix = prefix;
    m_prefix_isSet = true;
}

bool OAISwaggerXml::is_prefix_Set() const{
    return m_prefix_isSet;
}

bool OAISwaggerXml::is_prefix_Valid() const{
    return m_prefix_isValid;
}

bool OAISwaggerXml::isWrapped() const {
    return m_wrapped;
}
void OAISwaggerXml::setWrapped(const bool &wrapped) {
    m_wrapped = wrapped;
    m_wrapped_isSet = true;
}

bool OAISwaggerXml::is_wrapped_Set() const{
    return m_wrapped_isSet;
}

bool OAISwaggerXml::is_wrapped_Valid() const{
    return m_wrapped_isValid;
}

bool OAISwaggerXml::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribute_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wrapped_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerXml::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
