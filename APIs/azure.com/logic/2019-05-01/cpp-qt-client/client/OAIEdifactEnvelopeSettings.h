/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEdifactEnvelopeSettings.h
 *
 * The Edifact agreement envelope settings.
 */

#ifndef OAIEdifactEnvelopeSettings_H
#define OAIEdifactEnvelopeSettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEdifactEnvelopeSettings : public OAIObject {
public:
    OAIEdifactEnvelopeSettings();
    OAIEdifactEnvelopeSettings(QString json);
    ~OAIEdifactEnvelopeSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationReferenceId() const;
    void setApplicationReferenceId(const QString &application_reference_id);
    bool is_application_reference_id_Set() const;
    bool is_application_reference_id_Valid() const;

    bool isApplyDelimiterStringAdvice() const;
    void setApplyDelimiterStringAdvice(const bool &apply_delimiter_string_advice);
    bool is_apply_delimiter_string_advice_Set() const;
    bool is_apply_delimiter_string_advice_Valid() const;

    QString getCommunicationAgreementId() const;
    void setCommunicationAgreementId(const QString &communication_agreement_id);
    bool is_communication_agreement_id_Set() const;
    bool is_communication_agreement_id_Valid() const;

    bool isCreateGroupingSegments() const;
    void setCreateGroupingSegments(const bool &create_grouping_segments);
    bool is_create_grouping_segments_Set() const;
    bool is_create_grouping_segments_Valid() const;

    bool isEnableDefaultGroupHeaders() const;
    void setEnableDefaultGroupHeaders(const bool &enable_default_group_headers);
    bool is_enable_default_group_headers_Set() const;
    bool is_enable_default_group_headers_Valid() const;

    QString getFunctionalGroupId() const;
    void setFunctionalGroupId(const QString &functional_group_id);
    bool is_functional_group_id_Set() const;
    bool is_functional_group_id_Valid() const;

    QString getGroupApplicationPassword() const;
    void setGroupApplicationPassword(const QString &group_application_password);
    bool is_group_application_password_Set() const;
    bool is_group_application_password_Valid() const;

    QString getGroupApplicationReceiverId() const;
    void setGroupApplicationReceiverId(const QString &group_application_receiver_id);
    bool is_group_application_receiver_id_Set() const;
    bool is_group_application_receiver_id_Valid() const;

    QString getGroupApplicationReceiverQualifier() const;
    void setGroupApplicationReceiverQualifier(const QString &group_application_receiver_qualifier);
    bool is_group_application_receiver_qualifier_Set() const;
    bool is_group_application_receiver_qualifier_Valid() const;

    QString getGroupApplicationSenderId() const;
    void setGroupApplicationSenderId(const QString &group_application_sender_id);
    bool is_group_application_sender_id_Set() const;
    bool is_group_application_sender_id_Valid() const;

    QString getGroupApplicationSenderQualifier() const;
    void setGroupApplicationSenderQualifier(const QString &group_application_sender_qualifier);
    bool is_group_application_sender_qualifier_Set() const;
    bool is_group_application_sender_qualifier_Valid() const;

    QString getGroupAssociationAssignedCode() const;
    void setGroupAssociationAssignedCode(const QString &group_association_assigned_code);
    bool is_group_association_assigned_code_Set() const;
    bool is_group_association_assigned_code_Valid() const;

    qint64 getGroupControlNumberLowerBound() const;
    void setGroupControlNumberLowerBound(const qint64 &group_control_number_lower_bound);
    bool is_group_control_number_lower_bound_Set() const;
    bool is_group_control_number_lower_bound_Valid() const;

    QString getGroupControlNumberPrefix() const;
    void setGroupControlNumberPrefix(const QString &group_control_number_prefix);
    bool is_group_control_number_prefix_Set() const;
    bool is_group_control_number_prefix_Valid() const;

    QString getGroupControlNumberSuffix() const;
    void setGroupControlNumberSuffix(const QString &group_control_number_suffix);
    bool is_group_control_number_suffix_Set() const;
    bool is_group_control_number_suffix_Valid() const;

    qint64 getGroupControlNumberUpperBound() const;
    void setGroupControlNumberUpperBound(const qint64 &group_control_number_upper_bound);
    bool is_group_control_number_upper_bound_Set() const;
    bool is_group_control_number_upper_bound_Valid() const;

    QString getGroupControllingAgencyCode() const;
    void setGroupControllingAgencyCode(const QString &group_controlling_agency_code);
    bool is_group_controlling_agency_code_Set() const;
    bool is_group_controlling_agency_code_Valid() const;

    QString getGroupMessageRelease() const;
    void setGroupMessageRelease(const QString &group_message_release);
    bool is_group_message_release_Set() const;
    bool is_group_message_release_Valid() const;

    QString getGroupMessageVersion() const;
    void setGroupMessageVersion(const QString &group_message_version);
    bool is_group_message_version_Set() const;
    bool is_group_message_version_Valid() const;

    qint64 getInterchangeControlNumberLowerBound() const;
    void setInterchangeControlNumberLowerBound(const qint64 &interchange_control_number_lower_bound);
    bool is_interchange_control_number_lower_bound_Set() const;
    bool is_interchange_control_number_lower_bound_Valid() const;

    QString getInterchangeControlNumberPrefix() const;
    void setInterchangeControlNumberPrefix(const QString &interchange_control_number_prefix);
    bool is_interchange_control_number_prefix_Set() const;
    bool is_interchange_control_number_prefix_Valid() const;

    QString getInterchangeControlNumberSuffix() const;
    void setInterchangeControlNumberSuffix(const QString &interchange_control_number_suffix);
    bool is_interchange_control_number_suffix_Set() const;
    bool is_interchange_control_number_suffix_Valid() const;

    qint64 getInterchangeControlNumberUpperBound() const;
    void setInterchangeControlNumberUpperBound(const qint64 &interchange_control_number_upper_bound);
    bool is_interchange_control_number_upper_bound_Set() const;
    bool is_interchange_control_number_upper_bound_Valid() const;

    bool isIsTestInterchange() const;
    void setIsTestInterchange(const bool &is_test_interchange);
    bool is_is_test_interchange_Set() const;
    bool is_is_test_interchange_Valid() const;

    bool isOverwriteExistingTransactionSetControlNumber() const;
    void setOverwriteExistingTransactionSetControlNumber(const bool &overwrite_existing_transaction_set_control_number);
    bool is_overwrite_existing_transaction_set_control_number_Set() const;
    bool is_overwrite_existing_transaction_set_control_number_Valid() const;

    QString getProcessingPriorityCode() const;
    void setProcessingPriorityCode(const QString &processing_priority_code);
    bool is_processing_priority_code_Set() const;
    bool is_processing_priority_code_Valid() const;

    QString getReceiverInternalIdentification() const;
    void setReceiverInternalIdentification(const QString &receiver_internal_identification);
    bool is_receiver_internal_identification_Set() const;
    bool is_receiver_internal_identification_Valid() const;

    QString getReceiverInternalSubIdentification() const;
    void setReceiverInternalSubIdentification(const QString &receiver_internal_sub_identification);
    bool is_receiver_internal_sub_identification_Set() const;
    bool is_receiver_internal_sub_identification_Valid() const;

    QString getReceiverReverseRoutingAddress() const;
    void setReceiverReverseRoutingAddress(const QString &receiver_reverse_routing_address);
    bool is_receiver_reverse_routing_address_Set() const;
    bool is_receiver_reverse_routing_address_Valid() const;

    QString getRecipientReferencePasswordQualifier() const;
    void setRecipientReferencePasswordQualifier(const QString &recipient_reference_password_qualifier);
    bool is_recipient_reference_password_qualifier_Set() const;
    bool is_recipient_reference_password_qualifier_Valid() const;

    QString getRecipientReferencePasswordValue() const;
    void setRecipientReferencePasswordValue(const QString &recipient_reference_password_value);
    bool is_recipient_reference_password_value_Set() const;
    bool is_recipient_reference_password_value_Valid() const;

    bool isRolloverGroupControlNumber() const;
    void setRolloverGroupControlNumber(const bool &rollover_group_control_number);
    bool is_rollover_group_control_number_Set() const;
    bool is_rollover_group_control_number_Valid() const;

    bool isRolloverInterchangeControlNumber() const;
    void setRolloverInterchangeControlNumber(const bool &rollover_interchange_control_number);
    bool is_rollover_interchange_control_number_Set() const;
    bool is_rollover_interchange_control_number_Valid() const;

    bool isRolloverTransactionSetControlNumber() const;
    void setRolloverTransactionSetControlNumber(const bool &rollover_transaction_set_control_number);
    bool is_rollover_transaction_set_control_number_Set() const;
    bool is_rollover_transaction_set_control_number_Valid() const;

    QString getSenderInternalIdentification() const;
    void setSenderInternalIdentification(const QString &sender_internal_identification);
    bool is_sender_internal_identification_Set() const;
    bool is_sender_internal_identification_Valid() const;

    QString getSenderInternalSubIdentification() const;
    void setSenderInternalSubIdentification(const QString &sender_internal_sub_identification);
    bool is_sender_internal_sub_identification_Set() const;
    bool is_sender_internal_sub_identification_Valid() const;

    QString getSenderReverseRoutingAddress() const;
    void setSenderReverseRoutingAddress(const QString &sender_reverse_routing_address);
    bool is_sender_reverse_routing_address_Set() const;
    bool is_sender_reverse_routing_address_Valid() const;

    qint64 getTransactionSetControlNumberLowerBound() const;
    void setTransactionSetControlNumberLowerBound(const qint64 &transaction_set_control_number_lower_bound);
    bool is_transaction_set_control_number_lower_bound_Set() const;
    bool is_transaction_set_control_number_lower_bound_Valid() const;

    QString getTransactionSetControlNumberPrefix() const;
    void setTransactionSetControlNumberPrefix(const QString &transaction_set_control_number_prefix);
    bool is_transaction_set_control_number_prefix_Set() const;
    bool is_transaction_set_control_number_prefix_Valid() const;

    QString getTransactionSetControlNumberSuffix() const;
    void setTransactionSetControlNumberSuffix(const QString &transaction_set_control_number_suffix);
    bool is_transaction_set_control_number_suffix_Set() const;
    bool is_transaction_set_control_number_suffix_Valid() const;

    qint64 getTransactionSetControlNumberUpperBound() const;
    void setTransactionSetControlNumberUpperBound(const qint64 &transaction_set_control_number_upper_bound);
    bool is_transaction_set_control_number_upper_bound_Set() const;
    bool is_transaction_set_control_number_upper_bound_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_reference_id;
    bool m_application_reference_id_isSet;
    bool m_application_reference_id_isValid;

    bool m_apply_delimiter_string_advice;
    bool m_apply_delimiter_string_advice_isSet;
    bool m_apply_delimiter_string_advice_isValid;

    QString m_communication_agreement_id;
    bool m_communication_agreement_id_isSet;
    bool m_communication_agreement_id_isValid;

    bool m_create_grouping_segments;
    bool m_create_grouping_segments_isSet;
    bool m_create_grouping_segments_isValid;

    bool m_enable_default_group_headers;
    bool m_enable_default_group_headers_isSet;
    bool m_enable_default_group_headers_isValid;

    QString m_functional_group_id;
    bool m_functional_group_id_isSet;
    bool m_functional_group_id_isValid;

    QString m_group_application_password;
    bool m_group_application_password_isSet;
    bool m_group_application_password_isValid;

    QString m_group_application_receiver_id;
    bool m_group_application_receiver_id_isSet;
    bool m_group_application_receiver_id_isValid;

    QString m_group_application_receiver_qualifier;
    bool m_group_application_receiver_qualifier_isSet;
    bool m_group_application_receiver_qualifier_isValid;

    QString m_group_application_sender_id;
    bool m_group_application_sender_id_isSet;
    bool m_group_application_sender_id_isValid;

    QString m_group_application_sender_qualifier;
    bool m_group_application_sender_qualifier_isSet;
    bool m_group_application_sender_qualifier_isValid;

    QString m_group_association_assigned_code;
    bool m_group_association_assigned_code_isSet;
    bool m_group_association_assigned_code_isValid;

    qint64 m_group_control_number_lower_bound;
    bool m_group_control_number_lower_bound_isSet;
    bool m_group_control_number_lower_bound_isValid;

    QString m_group_control_number_prefix;
    bool m_group_control_number_prefix_isSet;
    bool m_group_control_number_prefix_isValid;

    QString m_group_control_number_suffix;
    bool m_group_control_number_suffix_isSet;
    bool m_group_control_number_suffix_isValid;

    qint64 m_group_control_number_upper_bound;
    bool m_group_control_number_upper_bound_isSet;
    bool m_group_control_number_upper_bound_isValid;

    QString m_group_controlling_agency_code;
    bool m_group_controlling_agency_code_isSet;
    bool m_group_controlling_agency_code_isValid;

    QString m_group_message_release;
    bool m_group_message_release_isSet;
    bool m_group_message_release_isValid;

    QString m_group_message_version;
    bool m_group_message_version_isSet;
    bool m_group_message_version_isValid;

    qint64 m_interchange_control_number_lower_bound;
    bool m_interchange_control_number_lower_bound_isSet;
    bool m_interchange_control_number_lower_bound_isValid;

    QString m_interchange_control_number_prefix;
    bool m_interchange_control_number_prefix_isSet;
    bool m_interchange_control_number_prefix_isValid;

    QString m_interchange_control_number_suffix;
    bool m_interchange_control_number_suffix_isSet;
    bool m_interchange_control_number_suffix_isValid;

    qint64 m_interchange_control_number_upper_bound;
    bool m_interchange_control_number_upper_bound_isSet;
    bool m_interchange_control_number_upper_bound_isValid;

    bool m_is_test_interchange;
    bool m_is_test_interchange_isSet;
    bool m_is_test_interchange_isValid;

    bool m_overwrite_existing_transaction_set_control_number;
    bool m_overwrite_existing_transaction_set_control_number_isSet;
    bool m_overwrite_existing_transaction_set_control_number_isValid;

    QString m_processing_priority_code;
    bool m_processing_priority_code_isSet;
    bool m_processing_priority_code_isValid;

    QString m_receiver_internal_identification;
    bool m_receiver_internal_identification_isSet;
    bool m_receiver_internal_identification_isValid;

    QString m_receiver_internal_sub_identification;
    bool m_receiver_internal_sub_identification_isSet;
    bool m_receiver_internal_sub_identification_isValid;

    QString m_receiver_reverse_routing_address;
    bool m_receiver_reverse_routing_address_isSet;
    bool m_receiver_reverse_routing_address_isValid;

    QString m_recipient_reference_password_qualifier;
    bool m_recipient_reference_password_qualifier_isSet;
    bool m_recipient_reference_password_qualifier_isValid;

    QString m_recipient_reference_password_value;
    bool m_recipient_reference_password_value_isSet;
    bool m_recipient_reference_password_value_isValid;

    bool m_rollover_group_control_number;
    bool m_rollover_group_control_number_isSet;
    bool m_rollover_group_control_number_isValid;

    bool m_rollover_interchange_control_number;
    bool m_rollover_interchange_control_number_isSet;
    bool m_rollover_interchange_control_number_isValid;

    bool m_rollover_transaction_set_control_number;
    bool m_rollover_transaction_set_control_number_isSet;
    bool m_rollover_transaction_set_control_number_isValid;

    QString m_sender_internal_identification;
    bool m_sender_internal_identification_isSet;
    bool m_sender_internal_identification_isValid;

    QString m_sender_internal_sub_identification;
    bool m_sender_internal_sub_identification_isSet;
    bool m_sender_internal_sub_identification_isValid;

    QString m_sender_reverse_routing_address;
    bool m_sender_reverse_routing_address_isSet;
    bool m_sender_reverse_routing_address_isValid;

    qint64 m_transaction_set_control_number_lower_bound;
    bool m_transaction_set_control_number_lower_bound_isSet;
    bool m_transaction_set_control_number_lower_bound_isValid;

    QString m_transaction_set_control_number_prefix;
    bool m_transaction_set_control_number_prefix_isSet;
    bool m_transaction_set_control_number_prefix_isValid;

    QString m_transaction_set_control_number_suffix;
    bool m_transaction_set_control_number_suffix_isSet;
    bool m_transaction_set_control_number_suffix_isValid;

    qint64 m_transaction_set_control_number_upper_bound;
    bool m_transaction_set_control_number_upper_bound_isSet;
    bool m_transaction_set_control_number_upper_bound_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEdifactEnvelopeSettings)

#endif // OAIEdifactEnvelopeSettings_H
