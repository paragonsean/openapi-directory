/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEdifactEnvelopeOverride.h
 *
 * The Edifact envelope override settings.
 */

#ifndef OAIEdifactEnvelopeOverride_H
#define OAIEdifactEnvelopeOverride_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEdifactEnvelopeOverride : public OAIObject {
public:
    OAIEdifactEnvelopeOverride();
    OAIEdifactEnvelopeOverride(QString json);
    ~OAIEdifactEnvelopeOverride() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getApplicationPassword() const;
    void setApplicationPassword(const QString &application_password);
    bool is_application_password_Set() const;
    bool is_application_password_Valid() const;

    QString getAssociationAssignedCode() const;
    void setAssociationAssignedCode(const QString &association_assigned_code);
    bool is_association_assigned_code_Set() const;
    bool is_association_assigned_code_Valid() const;

    QString getControllingAgencyCode() const;
    void setControllingAgencyCode(const QString &controlling_agency_code);
    bool is_controlling_agency_code_Set() const;
    bool is_controlling_agency_code_Valid() const;

    QString getFunctionalGroupId() const;
    void setFunctionalGroupId(const QString &functional_group_id);
    bool is_functional_group_id_Set() const;
    bool is_functional_group_id_Valid() const;

    QString getGroupHeaderMessageRelease() const;
    void setGroupHeaderMessageRelease(const QString &group_header_message_release);
    bool is_group_header_message_release_Set() const;
    bool is_group_header_message_release_Valid() const;

    QString getGroupHeaderMessageVersion() const;
    void setGroupHeaderMessageVersion(const QString &group_header_message_version);
    bool is_group_header_message_version_Set() const;
    bool is_group_header_message_version_Valid() const;

    QString getMessageAssociationAssignedCode() const;
    void setMessageAssociationAssignedCode(const QString &message_association_assigned_code);
    bool is_message_association_assigned_code_Set() const;
    bool is_message_association_assigned_code_Valid() const;

    QString getMessageId() const;
    void setMessageId(const QString &message_id);
    bool is_message_id_Set() const;
    bool is_message_id_Valid() const;

    QString getMessageRelease() const;
    void setMessageRelease(const QString &message_release);
    bool is_message_release_Set() const;
    bool is_message_release_Valid() const;

    QString getMessageVersion() const;
    void setMessageVersion(const QString &message_version);
    bool is_message_version_Set() const;
    bool is_message_version_Valid() const;

    QString getReceiverApplicationId() const;
    void setReceiverApplicationId(const QString &receiver_application_id);
    bool is_receiver_application_id_Set() const;
    bool is_receiver_application_id_Valid() const;

    QString getReceiverApplicationQualifier() const;
    void setReceiverApplicationQualifier(const QString &receiver_application_qualifier);
    bool is_receiver_application_qualifier_Set() const;
    bool is_receiver_application_qualifier_Valid() const;

    QString getSenderApplicationId() const;
    void setSenderApplicationId(const QString &sender_application_id);
    bool is_sender_application_id_Set() const;
    bool is_sender_application_id_Valid() const;

    QString getSenderApplicationQualifier() const;
    void setSenderApplicationQualifier(const QString &sender_application_qualifier);
    bool is_sender_application_qualifier_Set() const;
    bool is_sender_application_qualifier_Valid() const;

    QString getTargetNamespace() const;
    void setTargetNamespace(const QString &target_namespace);
    bool is_target_namespace_Set() const;
    bool is_target_namespace_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_application_password;
    bool m_application_password_isSet;
    bool m_application_password_isValid;

    QString m_association_assigned_code;
    bool m_association_assigned_code_isSet;
    bool m_association_assigned_code_isValid;

    QString m_controlling_agency_code;
    bool m_controlling_agency_code_isSet;
    bool m_controlling_agency_code_isValid;

    QString m_functional_group_id;
    bool m_functional_group_id_isSet;
    bool m_functional_group_id_isValid;

    QString m_group_header_message_release;
    bool m_group_header_message_release_isSet;
    bool m_group_header_message_release_isValid;

    QString m_group_header_message_version;
    bool m_group_header_message_version_isSet;
    bool m_group_header_message_version_isValid;

    QString m_message_association_assigned_code;
    bool m_message_association_assigned_code_isSet;
    bool m_message_association_assigned_code_isValid;

    QString m_message_id;
    bool m_message_id_isSet;
    bool m_message_id_isValid;

    QString m_message_release;
    bool m_message_release_isSet;
    bool m_message_release_isValid;

    QString m_message_version;
    bool m_message_version_isSet;
    bool m_message_version_isValid;

    QString m_receiver_application_id;
    bool m_receiver_application_id_isSet;
    bool m_receiver_application_id_isValid;

    QString m_receiver_application_qualifier;
    bool m_receiver_application_qualifier_isSet;
    bool m_receiver_application_qualifier_isValid;

    QString m_sender_application_id;
    bool m_sender_application_id_isSet;
    bool m_sender_application_id_isValid;

    QString m_sender_application_qualifier;
    bool m_sender_application_qualifier_isSet;
    bool m_sender_application_qualifier_isValid;

    QString m_target_namespace;
    bool m_target_namespace_isSet;
    bool m_target_namespace_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEdifactEnvelopeOverride)

#endif // OAIEdifactEnvelopeOverride_H
