/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackingEventsDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackingEventsDefinition::OAITrackingEventsDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackingEventsDefinition::OAITrackingEventsDefinition() {
    this->initializeModel();
}

OAITrackingEventsDefinition::~OAITrackingEventsDefinition() {}

void OAITrackingEventsDefinition::initializeModel() {

    m_events_isSet = false;
    m_events_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;

    m_track_events_options_isSet = false;
    m_track_events_options_isValid = false;
}

void OAITrackingEventsDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackingEventsDefinition::fromJsonObject(QJsonObject json) {

    m_events_isValid = ::OpenAPI::fromJsonValue(m_events, json[QString("events")]);
    m_events_isSet = !json[QString("events")].isNull() && m_events_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;

    m_track_events_options_isValid = ::OpenAPI::fromJsonValue(m_track_events_options, json[QString("trackEventsOptions")]);
    m_track_events_options_isSet = !json[QString("trackEventsOptions")].isNull() && m_track_events_options_isValid;
}

QString OAITrackingEventsDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackingEventsDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_events.size() > 0) {
        obj.insert(QString("events"), ::OpenAPI::toJsonValue(m_events));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    if (m_track_events_options.isSet()) {
        obj.insert(QString("trackEventsOptions"), ::OpenAPI::toJsonValue(m_track_events_options));
    }
    return obj;
}

QList<OAITrackingEvent> OAITrackingEventsDefinition::getEvents() const {
    return m_events;
}
void OAITrackingEventsDefinition::setEvents(const QList<OAITrackingEvent> &events) {
    m_events = events;
    m_events_isSet = true;
}

bool OAITrackingEventsDefinition::is_events_Set() const{
    return m_events_isSet;
}

bool OAITrackingEventsDefinition::is_events_Valid() const{
    return m_events_isValid;
}

QString OAITrackingEventsDefinition::getSourceType() const {
    return m_source_type;
}
void OAITrackingEventsDefinition::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAITrackingEventsDefinition::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAITrackingEventsDefinition::is_source_type_Valid() const{
    return m_source_type_isValid;
}

OAITrackEventsOperationOptions OAITrackingEventsDefinition::getTrackEventsOptions() const {
    return m_track_events_options;
}
void OAITrackingEventsDefinition::setTrackEventsOptions(const OAITrackEventsOperationOptions &track_events_options) {
    m_track_events_options = track_events_options;
    m_track_events_options_isSet = true;
}

bool OAITrackingEventsDefinition::is_track_events_options_Set() const{
    return m_track_events_options_isSet;
}

bool OAITrackingEventsDefinition::is_track_events_options_Valid() const{
    return m_track_events_options_isValid;
}

bool OAITrackingEventsDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_events.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_track_events_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackingEventsDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_events_isValid && m_source_type_isValid && true;
}

} // namespace OpenAPI
