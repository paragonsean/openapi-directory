/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12SecuritySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12SecuritySettings::OAIX12SecuritySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12SecuritySettings::OAIX12SecuritySettings() {
    this->initializeModel();
}

OAIX12SecuritySettings::~OAIX12SecuritySettings() {}

void OAIX12SecuritySettings::initializeModel() {

    m_authorization_qualifier_isSet = false;
    m_authorization_qualifier_isValid = false;

    m_authorization_value_isSet = false;
    m_authorization_value_isValid = false;

    m_password_value_isSet = false;
    m_password_value_isValid = false;

    m_security_qualifier_isSet = false;
    m_security_qualifier_isValid = false;
}

void OAIX12SecuritySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12SecuritySettings::fromJsonObject(QJsonObject json) {

    m_authorization_qualifier_isValid = ::OpenAPI::fromJsonValue(m_authorization_qualifier, json[QString("authorizationQualifier")]);
    m_authorization_qualifier_isSet = !json[QString("authorizationQualifier")].isNull() && m_authorization_qualifier_isValid;

    m_authorization_value_isValid = ::OpenAPI::fromJsonValue(m_authorization_value, json[QString("authorizationValue")]);
    m_authorization_value_isSet = !json[QString("authorizationValue")].isNull() && m_authorization_value_isValid;

    m_password_value_isValid = ::OpenAPI::fromJsonValue(m_password_value, json[QString("passwordValue")]);
    m_password_value_isSet = !json[QString("passwordValue")].isNull() && m_password_value_isValid;

    m_security_qualifier_isValid = ::OpenAPI::fromJsonValue(m_security_qualifier, json[QString("securityQualifier")]);
    m_security_qualifier_isSet = !json[QString("securityQualifier")].isNull() && m_security_qualifier_isValid;
}

QString OAIX12SecuritySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12SecuritySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization_qualifier_isSet) {
        obj.insert(QString("authorizationQualifier"), ::OpenAPI::toJsonValue(m_authorization_qualifier));
    }
    if (m_authorization_value_isSet) {
        obj.insert(QString("authorizationValue"), ::OpenAPI::toJsonValue(m_authorization_value));
    }
    if (m_password_value_isSet) {
        obj.insert(QString("passwordValue"), ::OpenAPI::toJsonValue(m_password_value));
    }
    if (m_security_qualifier_isSet) {
        obj.insert(QString("securityQualifier"), ::OpenAPI::toJsonValue(m_security_qualifier));
    }
    return obj;
}

QString OAIX12SecuritySettings::getAuthorizationQualifier() const {
    return m_authorization_qualifier;
}
void OAIX12SecuritySettings::setAuthorizationQualifier(const QString &authorization_qualifier) {
    m_authorization_qualifier = authorization_qualifier;
    m_authorization_qualifier_isSet = true;
}

bool OAIX12SecuritySettings::is_authorization_qualifier_Set() const{
    return m_authorization_qualifier_isSet;
}

bool OAIX12SecuritySettings::is_authorization_qualifier_Valid() const{
    return m_authorization_qualifier_isValid;
}

QString OAIX12SecuritySettings::getAuthorizationValue() const {
    return m_authorization_value;
}
void OAIX12SecuritySettings::setAuthorizationValue(const QString &authorization_value) {
    m_authorization_value = authorization_value;
    m_authorization_value_isSet = true;
}

bool OAIX12SecuritySettings::is_authorization_value_Set() const{
    return m_authorization_value_isSet;
}

bool OAIX12SecuritySettings::is_authorization_value_Valid() const{
    return m_authorization_value_isValid;
}

QString OAIX12SecuritySettings::getPasswordValue() const {
    return m_password_value;
}
void OAIX12SecuritySettings::setPasswordValue(const QString &password_value) {
    m_password_value = password_value;
    m_password_value_isSet = true;
}

bool OAIX12SecuritySettings::is_password_value_Set() const{
    return m_password_value_isSet;
}

bool OAIX12SecuritySettings::is_password_value_Valid() const{
    return m_password_value_isValid;
}

QString OAIX12SecuritySettings::getSecurityQualifier() const {
    return m_security_qualifier;
}
void OAIX12SecuritySettings::setSecurityQualifier(const QString &security_qualifier) {
    m_security_qualifier = security_qualifier;
    m_security_qualifier_isSet = true;
}

bool OAIX12SecuritySettings::is_security_qualifier_Set() const{
    return m_security_qualifier_isSet;
}

bool OAIX12SecuritySettings::is_security_qualifier_Valid() const{
    return m_security_qualifier_isValid;
}

bool OAIX12SecuritySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12SecuritySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_authorization_qualifier_isValid && m_security_qualifier_isValid && true;
}

} // namespace OpenAPI
