/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTriggerCallbackUrl.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTriggerCallbackUrl::OAIWorkflowTriggerCallbackUrl(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTriggerCallbackUrl::OAIWorkflowTriggerCallbackUrl() {
    this->initializeModel();
}

OAIWorkflowTriggerCallbackUrl::~OAIWorkflowTriggerCallbackUrl() {}

void OAIWorkflowTriggerCallbackUrl::initializeModel() {

    m_base_path_isSet = false;
    m_base_path_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_queries_isSet = false;
    m_queries_isValid = false;

    m_relative_path_isSet = false;
    m_relative_path_isValid = false;

    m_relative_path_parameters_isSet = false;
    m_relative_path_parameters_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIWorkflowTriggerCallbackUrl::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTriggerCallbackUrl::fromJsonObject(QJsonObject json) {

    m_base_path_isValid = ::OpenAPI::fromJsonValue(m_base_path, json[QString("basePath")]);
    m_base_path_isSet = !json[QString("basePath")].isNull() && m_base_path_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_queries_isValid = ::OpenAPI::fromJsonValue(m_queries, json[QString("queries")]);
    m_queries_isSet = !json[QString("queries")].isNull() && m_queries_isValid;

    m_relative_path_isValid = ::OpenAPI::fromJsonValue(m_relative_path, json[QString("relativePath")]);
    m_relative_path_isSet = !json[QString("relativePath")].isNull() && m_relative_path_isValid;

    m_relative_path_parameters_isValid = ::OpenAPI::fromJsonValue(m_relative_path_parameters, json[QString("relativePathParameters")]);
    m_relative_path_parameters_isSet = !json[QString("relativePathParameters")].isNull() && m_relative_path_parameters_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIWorkflowTriggerCallbackUrl::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTriggerCallbackUrl::asJsonObject() const {
    QJsonObject obj;
    if (m_base_path_isSet) {
        obj.insert(QString("basePath"), ::OpenAPI::toJsonValue(m_base_path));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_queries.isSet()) {
        obj.insert(QString("queries"), ::OpenAPI::toJsonValue(m_queries));
    }
    if (m_relative_path_isSet) {
        obj.insert(QString("relativePath"), ::OpenAPI::toJsonValue(m_relative_path));
    }
    if (m_relative_path_parameters.size() > 0) {
        obj.insert(QString("relativePathParameters"), ::OpenAPI::toJsonValue(m_relative_path_parameters));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIWorkflowTriggerCallbackUrl::getBasePath() const {
    return m_base_path;
}
void OAIWorkflowTriggerCallbackUrl::setBasePath(const QString &base_path) {
    m_base_path = base_path;
    m_base_path_isSet = true;
}

bool OAIWorkflowTriggerCallbackUrl::is_base_path_Set() const{
    return m_base_path_isSet;
}

bool OAIWorkflowTriggerCallbackUrl::is_base_path_Valid() const{
    return m_base_path_isValid;
}

QString OAIWorkflowTriggerCallbackUrl::getMethod() const {
    return m_method;
}
void OAIWorkflowTriggerCallbackUrl::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIWorkflowTriggerCallbackUrl::is_method_Set() const{
    return m_method_isSet;
}

bool OAIWorkflowTriggerCallbackUrl::is_method_Valid() const{
    return m_method_isValid;
}

OAIWorkflowTriggerListCallbackUrlQueries OAIWorkflowTriggerCallbackUrl::getQueries() const {
    return m_queries;
}
void OAIWorkflowTriggerCallbackUrl::setQueries(const OAIWorkflowTriggerListCallbackUrlQueries &queries) {
    m_queries = queries;
    m_queries_isSet = true;
}

bool OAIWorkflowTriggerCallbackUrl::is_queries_Set() const{
    return m_queries_isSet;
}

bool OAIWorkflowTriggerCallbackUrl::is_queries_Valid() const{
    return m_queries_isValid;
}

QString OAIWorkflowTriggerCallbackUrl::getRelativePath() const {
    return m_relative_path;
}
void OAIWorkflowTriggerCallbackUrl::setRelativePath(const QString &relative_path) {
    m_relative_path = relative_path;
    m_relative_path_isSet = true;
}

bool OAIWorkflowTriggerCallbackUrl::is_relative_path_Set() const{
    return m_relative_path_isSet;
}

bool OAIWorkflowTriggerCallbackUrl::is_relative_path_Valid() const{
    return m_relative_path_isValid;
}

QList<QString> OAIWorkflowTriggerCallbackUrl::getRelativePathParameters() const {
    return m_relative_path_parameters;
}
void OAIWorkflowTriggerCallbackUrl::setRelativePathParameters(const QList<QString> &relative_path_parameters) {
    m_relative_path_parameters = relative_path_parameters;
    m_relative_path_parameters_isSet = true;
}

bool OAIWorkflowTriggerCallbackUrl::is_relative_path_parameters_Set() const{
    return m_relative_path_parameters_isSet;
}

bool OAIWorkflowTriggerCallbackUrl::is_relative_path_parameters_Valid() const{
    return m_relative_path_parameters_isValid;
}

QString OAIWorkflowTriggerCallbackUrl::getValue() const {
    return m_value;
}
void OAIWorkflowTriggerCallbackUrl::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIWorkflowTriggerCallbackUrl::is_value_Set() const{
    return m_value_isSet;
}

bool OAIWorkflowTriggerCallbackUrl::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIWorkflowTriggerCallbackUrl::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_base_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_queries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_relative_path_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTriggerCallbackUrl::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
