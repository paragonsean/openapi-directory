/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerCustomDynamicTree.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerCustomDynamicTree::OAISwaggerCustomDynamicTree(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerCustomDynamicTree::OAISwaggerCustomDynamicTree() {
    this->initializeModel();
}

OAISwaggerCustomDynamicTree::~OAISwaggerCustomDynamicTree() {}

void OAISwaggerCustomDynamicTree::initializeModel() {

    m_browse_isSet = false;
    m_browse_isValid = false;

    m_open_isSet = false;
    m_open_isValid = false;

    m_settings_isSet = false;
    m_settings_isValid = false;
}

void OAISwaggerCustomDynamicTree::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerCustomDynamicTree::fromJsonObject(QJsonObject json) {

    m_browse_isValid = ::OpenAPI::fromJsonValue(m_browse, json[QString("browse")]);
    m_browse_isSet = !json[QString("browse")].isNull() && m_browse_isValid;

    m_open_isValid = ::OpenAPI::fromJsonValue(m_open, json[QString("open")]);
    m_open_isSet = !json[QString("open")].isNull() && m_open_isValid;

    m_settings_isValid = ::OpenAPI::fromJsonValue(m_settings, json[QString("settings")]);
    m_settings_isSet = !json[QString("settings")].isNull() && m_settings_isValid;
}

QString OAISwaggerCustomDynamicTree::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerCustomDynamicTree::asJsonObject() const {
    QJsonObject obj;
    if (m_browse.isSet()) {
        obj.insert(QString("browse"), ::OpenAPI::toJsonValue(m_browse));
    }
    if (m_open.isSet()) {
        obj.insert(QString("open"), ::OpenAPI::toJsonValue(m_open));
    }
    if (m_settings.isSet()) {
        obj.insert(QString("settings"), ::OpenAPI::toJsonValue(m_settings));
    }
    return obj;
}

OAISwaggerCustomDynamicTreeCommand OAISwaggerCustomDynamicTree::getBrowse() const {
    return m_browse;
}
void OAISwaggerCustomDynamicTree::setBrowse(const OAISwaggerCustomDynamicTreeCommand &browse) {
    m_browse = browse;
    m_browse_isSet = true;
}

bool OAISwaggerCustomDynamicTree::is_browse_Set() const{
    return m_browse_isSet;
}

bool OAISwaggerCustomDynamicTree::is_browse_Valid() const{
    return m_browse_isValid;
}

OAISwaggerCustomDynamicTreeCommand OAISwaggerCustomDynamicTree::getOpen() const {
    return m_open;
}
void OAISwaggerCustomDynamicTree::setOpen(const OAISwaggerCustomDynamicTreeCommand &open) {
    m_open = open;
    m_open_isSet = true;
}

bool OAISwaggerCustomDynamicTree::is_open_Set() const{
    return m_open_isSet;
}

bool OAISwaggerCustomDynamicTree::is_open_Valid() const{
    return m_open_isValid;
}

OAISwaggerCustomDynamicTreeSettings OAISwaggerCustomDynamicTree::getSettings() const {
    return m_settings;
}
void OAISwaggerCustomDynamicTree::setSettings(const OAISwaggerCustomDynamicTreeSettings &settings) {
    m_settings = settings;
    m_settings_isSet = true;
}

bool OAISwaggerCustomDynamicTree::is_settings_Set() const{
    return m_settings_isSet;
}

bool OAISwaggerCustomDynamicTree::is_settings_Valid() const{
    return m_settings_isValid;
}

bool OAISwaggerCustomDynamicTree::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_browse.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_open.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerCustomDynamicTree::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
