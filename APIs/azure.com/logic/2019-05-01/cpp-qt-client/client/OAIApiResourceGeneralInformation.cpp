/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiResourceGeneralInformation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiResourceGeneralInformation::OAIApiResourceGeneralInformation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiResourceGeneralInformation::OAIApiResourceGeneralInformation() {
    this->initializeModel();
}

OAIApiResourceGeneralInformation::~OAIApiResourceGeneralInformation() {}

void OAIApiResourceGeneralInformation::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_icon_url_isSet = false;
    m_icon_url_isValid = false;

    m_release_tag_isSet = false;
    m_release_tag_isValid = false;

    m_terms_of_use_url_isSet = false;
    m_terms_of_use_url_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIApiResourceGeneralInformation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiResourceGeneralInformation::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_icon_url_isValid = ::OpenAPI::fromJsonValue(m_icon_url, json[QString("iconUrl")]);
    m_icon_url_isSet = !json[QString("iconUrl")].isNull() && m_icon_url_isValid;

    m_release_tag_isValid = ::OpenAPI::fromJsonValue(m_release_tag, json[QString("releaseTag")]);
    m_release_tag_isSet = !json[QString("releaseTag")].isNull() && m_release_tag_isValid;

    m_terms_of_use_url_isValid = ::OpenAPI::fromJsonValue(m_terms_of_use_url, json[QString("termsOfUseUrl")]);
    m_terms_of_use_url_isSet = !json[QString("termsOfUseUrl")].isNull() && m_terms_of_use_url_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIApiResourceGeneralInformation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiResourceGeneralInformation::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_icon_url_isSet) {
        obj.insert(QString("iconUrl"), ::OpenAPI::toJsonValue(m_icon_url));
    }
    if (m_release_tag_isSet) {
        obj.insert(QString("releaseTag"), ::OpenAPI::toJsonValue(m_release_tag));
    }
    if (m_terms_of_use_url_isSet) {
        obj.insert(QString("termsOfUseUrl"), ::OpenAPI::toJsonValue(m_terms_of_use_url));
    }
    if (m_tier.isSet()) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QString OAIApiResourceGeneralInformation::getDescription() const {
    return m_description;
}
void OAIApiResourceGeneralInformation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIApiResourceGeneralInformation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIApiResourceGeneralInformation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIApiResourceGeneralInformation::getDisplayName() const {
    return m_display_name;
}
void OAIApiResourceGeneralInformation::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIApiResourceGeneralInformation::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIApiResourceGeneralInformation::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIApiResourceGeneralInformation::getIconUrl() const {
    return m_icon_url;
}
void OAIApiResourceGeneralInformation::setIconUrl(const QString &icon_url) {
    m_icon_url = icon_url;
    m_icon_url_isSet = true;
}

bool OAIApiResourceGeneralInformation::is_icon_url_Set() const{
    return m_icon_url_isSet;
}

bool OAIApiResourceGeneralInformation::is_icon_url_Valid() const{
    return m_icon_url_isValid;
}

QString OAIApiResourceGeneralInformation::getReleaseTag() const {
    return m_release_tag;
}
void OAIApiResourceGeneralInformation::setReleaseTag(const QString &release_tag) {
    m_release_tag = release_tag;
    m_release_tag_isSet = true;
}

bool OAIApiResourceGeneralInformation::is_release_tag_Set() const{
    return m_release_tag_isSet;
}

bool OAIApiResourceGeneralInformation::is_release_tag_Valid() const{
    return m_release_tag_isValid;
}

QString OAIApiResourceGeneralInformation::getTermsOfUseUrl() const {
    return m_terms_of_use_url;
}
void OAIApiResourceGeneralInformation::setTermsOfUseUrl(const QString &terms_of_use_url) {
    m_terms_of_use_url = terms_of_use_url;
    m_terms_of_use_url_isSet = true;
}

bool OAIApiResourceGeneralInformation::is_terms_of_use_url_Set() const{
    return m_terms_of_use_url_isSet;
}

bool OAIApiResourceGeneralInformation::is_terms_of_use_url_Valid() const{
    return m_terms_of_use_url_isValid;
}

OAIApiTier OAIApiResourceGeneralInformation::getTier() const {
    return m_tier;
}
void OAIApiResourceGeneralInformation::setTier(const OAIApiTier &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIApiResourceGeneralInformation::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIApiResourceGeneralInformation::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIApiResourceGeneralInformation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_icon_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_release_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_use_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiResourceGeneralInformation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
