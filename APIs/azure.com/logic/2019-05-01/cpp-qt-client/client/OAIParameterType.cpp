/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParameterType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParameterType::OAIParameterType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParameterType::OAIParameterType() {
    this->initializeModel();
}

OAIParameterType::~OAIParameterType() {}

void OAIParameterType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIParameterType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIParameterType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("String", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecureString", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::SECURESTRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Int", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::INT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Float", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::FLOAT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Bool", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::BOOL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Array", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::ARRAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Object", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SecureObject", Qt::CaseInsensitive) == 0) {
        m_value = eOAIParameterType::SECUREOBJECT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIParameterType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIParameterType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIParameterType::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIParameterType::STRING:
            val = "String";
            break;
        case eOAIParameterType::SECURESTRING:
            val = "SecureString";
            break;
        case eOAIParameterType::INT:
            val = "Int";
            break;
        case eOAIParameterType::FLOAT:
            val = "Float";
            break;
        case eOAIParameterType::BOOL:
            val = "Bool";
            break;
        case eOAIParameterType::ARRAY:
            val = "Array";
            break;
        case eOAIParameterType::OBJECT:
            val = "Object";
            break;
        case eOAIParameterType::SECUREOBJECT:
            val = "SecureObject";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIParameterType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIParameterType::eOAIParameterType OAIParameterType::getValue() const {
    return m_value;
}

void OAIParameterType::setValue(const OAIParameterType::eOAIParameterType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIParameterType::isSet() const {
    
    return m_value_isSet;
}

bool OAIParameterType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
