/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlowEndpointsConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlowEndpointsConfiguration::OAIFlowEndpointsConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlowEndpointsConfiguration::OAIFlowEndpointsConfiguration() {
    this->initializeModel();
}

OAIFlowEndpointsConfiguration::~OAIFlowEndpointsConfiguration() {}

void OAIFlowEndpointsConfiguration::initializeModel() {

    m_connector_isSet = false;
    m_connector_isValid = false;

    m_workflow_isSet = false;
    m_workflow_isValid = false;
}

void OAIFlowEndpointsConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlowEndpointsConfiguration::fromJsonObject(QJsonObject json) {

    m_connector_isValid = ::OpenAPI::fromJsonValue(m_connector, json[QString("connector")]);
    m_connector_isSet = !json[QString("connector")].isNull() && m_connector_isValid;

    m_workflow_isValid = ::OpenAPI::fromJsonValue(m_workflow, json[QString("workflow")]);
    m_workflow_isSet = !json[QString("workflow")].isNull() && m_workflow_isValid;
}

QString OAIFlowEndpointsConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlowEndpointsConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_connector.isSet()) {
        obj.insert(QString("connector"), ::OpenAPI::toJsonValue(m_connector));
    }
    if (m_workflow.isSet()) {
        obj.insert(QString("workflow"), ::OpenAPI::toJsonValue(m_workflow));
    }
    return obj;
}

OAIFlowEndpoints OAIFlowEndpointsConfiguration::getConnector() const {
    return m_connector;
}
void OAIFlowEndpointsConfiguration::setConnector(const OAIFlowEndpoints &connector) {
    m_connector = connector;
    m_connector_isSet = true;
}

bool OAIFlowEndpointsConfiguration::is_connector_Set() const{
    return m_connector_isSet;
}

bool OAIFlowEndpointsConfiguration::is_connector_Valid() const{
    return m_connector_isValid;
}

OAIFlowEndpoints OAIFlowEndpointsConfiguration::getWorkflow() const {
    return m_workflow;
}
void OAIFlowEndpointsConfiguration::setWorkflow(const OAIFlowEndpoints &workflow) {
    m_workflow = workflow;
    m_workflow_isSet = true;
}

bool OAIFlowEndpointsConfiguration::is_workflow_Set() const{
    return m_workflow_isSet;
}

bool OAIFlowEndpointsConfiguration::is_workflow_Valid() const{
    return m_workflow_isValid;
}

bool OAIFlowEndpointsConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_connector.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlowEndpointsConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
