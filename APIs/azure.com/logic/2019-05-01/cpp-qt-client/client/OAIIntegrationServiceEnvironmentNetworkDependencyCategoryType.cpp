/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType() {
    this->initializeModel();
}

OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::~OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType() {}

void OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AzureStorage", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::AZURESTORAGE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AzureManagement", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::AZUREMANAGEMENT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AzureActiveDirectory", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::AZUREACTIVEDIRECTORY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SSLCertificateVerification", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::SSLCERTIFICATEVERIFICATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("DiagnosticLogsAndMetrics", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::DIAGNOSTICLOGSANDMETRICS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("IntegrationServiceEnvironmentConnectors", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::INTEGRATIONSERVICEENVIRONMENTCONNECTORS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RedisCache", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::REDISCACHE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("AccessEndpoints", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::ACCESSENDPOINTS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RecoveryService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::RECOVERYSERVICE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("SQL", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::SQL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("RegionalService", Qt::CaseInsensitive) == 0) {
        m_value = eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::REGIONALSERVICE;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::AZURESTORAGE:
            val = "AzureStorage";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::AZUREMANAGEMENT:
            val = "AzureManagement";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::AZUREACTIVEDIRECTORY:
            val = "AzureActiveDirectory";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::SSLCERTIFICATEVERIFICATION:
            val = "SSLCertificateVerification";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::DIAGNOSTICLOGSANDMETRICS:
            val = "DiagnosticLogsAndMetrics";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::INTEGRATIONSERVICEENVIRONMENTCONNECTORS:
            val = "IntegrationServiceEnvironmentConnectors";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::REDISCACHE:
            val = "RedisCache";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::ACCESSENDPOINTS:
            val = "AccessEndpoints";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::RECOVERYSERVICE:
            val = "RecoveryService";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::SQL:
            val = "SQL";
            break;
        case eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::REGIONALSERVICE:
            val = "RegionalService";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::getValue() const {
    return m_value;
}

void OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::setValue(const OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::eOAIIntegrationServiceEnvironmentNetworkDependencyCategoryType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::isSet() const {
    
    return m_value_isSet;
}

bool OAIIntegrationServiceEnvironmentNetworkDependencyCategoryType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
