/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowOutputParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowOutputParameter::OAIWorkflowOutputParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowOutputParameter::OAIWorkflowOutputParameter() {
    this->initializeModel();
}

OAIWorkflowOutputParameter::~OAIWorkflowOutputParameter() {}

void OAIWorkflowOutputParameter::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIWorkflowOutputParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowOutputParameter::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIWorkflowOutputParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowOutputParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIObject OAIWorkflowOutputParameter::getError() const {
    return m_error;
}
void OAIWorkflowOutputParameter::setError(const OAIObject &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWorkflowOutputParameter::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWorkflowOutputParameter::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIWorkflowOutputParameter::getDescription() const {
    return m_description;
}
void OAIWorkflowOutputParameter::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIWorkflowOutputParameter::is_description_Set() const{
    return m_description_isSet;
}

bool OAIWorkflowOutputParameter::is_description_Valid() const{
    return m_description_isValid;
}

OAIObject OAIWorkflowOutputParameter::getMetadata() const {
    return m_metadata;
}
void OAIWorkflowOutputParameter::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIWorkflowOutputParameter::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIWorkflowOutputParameter::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIParameterType OAIWorkflowOutputParameter::getType() const {
    return m_type;
}
void OAIWorkflowOutputParameter::setType(const OAIParameterType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIWorkflowOutputParameter::is_type_Set() const{
    return m_type_isSet;
}

bool OAIWorkflowOutputParameter::is_type_Valid() const{
    return m_type_isValid;
}

OAIObject OAIWorkflowOutputParameter::getValue() const {
    return m_value;
}
void OAIWorkflowOutputParameter::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIWorkflowOutputParameter::is_value_Set() const{
    return m_value_isSet;
}

bool OAIWorkflowOutputParameter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIWorkflowOutputParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowOutputParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
