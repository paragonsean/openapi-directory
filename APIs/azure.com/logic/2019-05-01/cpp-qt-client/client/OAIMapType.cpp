/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMapType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMapType::OAIMapType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMapType::OAIMapType() {
    this->initializeModel();
}

OAIMapType::~OAIMapType() {}

void OAIMapType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIMapType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIMapType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMapType::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Xslt", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMapType::XSLT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Xslt20", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMapType::XSLT20;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Xslt30", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMapType::XSLT30;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Liquid", Qt::CaseInsensitive) == 0) {
        m_value = eOAIMapType::LIQUID;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIMapType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIMapType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIMapType::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIMapType::XSLT:
            val = "Xslt";
            break;
        case eOAIMapType::XSLT20:
            val = "Xslt20";
            break;
        case eOAIMapType::XSLT30:
            val = "Xslt30";
            break;
        case eOAIMapType::LIQUID:
            val = "Liquid";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIMapType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIMapType::eOAIMapType OAIMapType::getValue() const {
    return m_value;
}

void OAIMapType::setValue(const OAIMapType::eOAIMapType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIMapType::isSet() const {
    
    return m_value_isSet;
}

bool OAIMapType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
