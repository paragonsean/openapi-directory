/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowRunTrigger.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowRunTrigger::OAIWorkflowRunTrigger(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowRunTrigger::OAIWorkflowRunTrigger() {
    this->initializeModel();
}

OAIWorkflowRunTrigger::~OAIWorkflowRunTrigger() {}

void OAIWorkflowRunTrigger::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_correlation_isSet = false;
    m_correlation_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_inputs_isSet = false;
    m_inputs_isValid = false;

    m_inputs_link_isSet = false;
    m_inputs_link_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_outputs_link_isSet = false;
    m_outputs_link_isValid = false;

    m_scheduled_time_isSet = false;
    m_scheduled_time_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracked_properties_isSet = false;
    m_tracked_properties_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIWorkflowRunTrigger::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowRunTrigger::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_correlation_isValid = ::OpenAPI::fromJsonValue(m_correlation, json[QString("correlation")]);
    m_correlation_isSet = !json[QString("correlation")].isNull() && m_correlation_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_inputs_isValid = ::OpenAPI::fromJsonValue(m_inputs, json[QString("inputs")]);
    m_inputs_isSet = !json[QString("inputs")].isNull() && m_inputs_isValid;

    m_inputs_link_isValid = ::OpenAPI::fromJsonValue(m_inputs_link, json[QString("inputsLink")]);
    m_inputs_link_isSet = !json[QString("inputsLink")].isNull() && m_inputs_link_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_outputs_link_isValid = ::OpenAPI::fromJsonValue(m_outputs_link, json[QString("outputsLink")]);
    m_outputs_link_isSet = !json[QString("outputsLink")].isNull() && m_outputs_link_isValid;

    m_scheduled_time_isValid = ::OpenAPI::fromJsonValue(m_scheduled_time, json[QString("scheduledTime")]);
    m_scheduled_time_isSet = !json[QString("scheduledTime")].isNull() && m_scheduled_time_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tracked_properties_isValid = ::OpenAPI::fromJsonValue(m_tracked_properties, json[QString("trackedProperties")]);
    m_tracked_properties_isSet = !json[QString("trackedProperties")].isNull() && m_tracked_properties_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("trackingId")]);
    m_tracking_id_isSet = !json[QString("trackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIWorkflowRunTrigger::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowRunTrigger::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_correlation.isSet()) {
        obj.insert(QString("correlation"), ::OpenAPI::toJsonValue(m_correlation));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_inputs_isSet) {
        obj.insert(QString("inputs"), ::OpenAPI::toJsonValue(m_inputs));
    }
    if (m_inputs_link.isSet()) {
        obj.insert(QString("inputsLink"), ::OpenAPI::toJsonValue(m_inputs_link));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_outputs_isSet) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_outputs_link.isSet()) {
        obj.insert(QString("outputsLink"), ::OpenAPI::toJsonValue(m_outputs_link));
    }
    if (m_scheduled_time_isSet) {
        obj.insert(QString("scheduledTime"), ::OpenAPI::toJsonValue(m_scheduled_time));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracked_properties_isSet) {
        obj.insert(QString("trackedProperties"), ::OpenAPI::toJsonValue(m_tracked_properties));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("trackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIWorkflowRunTrigger::getCode() const {
    return m_code;
}
void OAIWorkflowRunTrigger::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWorkflowRunTrigger::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWorkflowRunTrigger::is_code_Valid() const{
    return m_code_isValid;
}

OAICorrelation OAIWorkflowRunTrigger::getCorrelation() const {
    return m_correlation;
}
void OAIWorkflowRunTrigger::setCorrelation(const OAICorrelation &correlation) {
    m_correlation = correlation;
    m_correlation_isSet = true;
}

bool OAIWorkflowRunTrigger::is_correlation_Set() const{
    return m_correlation_isSet;
}

bool OAIWorkflowRunTrigger::is_correlation_Valid() const{
    return m_correlation_isValid;
}

QDateTime OAIWorkflowRunTrigger::getEndTime() const {
    return m_end_time;
}
void OAIWorkflowRunTrigger::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWorkflowRunTrigger::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWorkflowRunTrigger::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIObject OAIWorkflowRunTrigger::getError() const {
    return m_error;
}
void OAIWorkflowRunTrigger::setError(const OAIObject &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWorkflowRunTrigger::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWorkflowRunTrigger::is_error_Valid() const{
    return m_error_isValid;
}

OAIObject OAIWorkflowRunTrigger::getInputs() const {
    return m_inputs;
}
void OAIWorkflowRunTrigger::setInputs(const OAIObject &inputs) {
    m_inputs = inputs;
    m_inputs_isSet = true;
}

bool OAIWorkflowRunTrigger::is_inputs_Set() const{
    return m_inputs_isSet;
}

bool OAIWorkflowRunTrigger::is_inputs_Valid() const{
    return m_inputs_isValid;
}

OAIContentLink OAIWorkflowRunTrigger::getInputsLink() const {
    return m_inputs_link;
}
void OAIWorkflowRunTrigger::setInputsLink(const OAIContentLink &inputs_link) {
    m_inputs_link = inputs_link;
    m_inputs_link_isSet = true;
}

bool OAIWorkflowRunTrigger::is_inputs_link_Set() const{
    return m_inputs_link_isSet;
}

bool OAIWorkflowRunTrigger::is_inputs_link_Valid() const{
    return m_inputs_link_isValid;
}

QString OAIWorkflowRunTrigger::getName() const {
    return m_name;
}
void OAIWorkflowRunTrigger::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIWorkflowRunTrigger::is_name_Set() const{
    return m_name_isSet;
}

bool OAIWorkflowRunTrigger::is_name_Valid() const{
    return m_name_isValid;
}

OAIObject OAIWorkflowRunTrigger::getOutputs() const {
    return m_outputs;
}
void OAIWorkflowRunTrigger::setOutputs(const OAIObject &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIWorkflowRunTrigger::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIWorkflowRunTrigger::is_outputs_Valid() const{
    return m_outputs_isValid;
}

OAIContentLink OAIWorkflowRunTrigger::getOutputsLink() const {
    return m_outputs_link;
}
void OAIWorkflowRunTrigger::setOutputsLink(const OAIContentLink &outputs_link) {
    m_outputs_link = outputs_link;
    m_outputs_link_isSet = true;
}

bool OAIWorkflowRunTrigger::is_outputs_link_Set() const{
    return m_outputs_link_isSet;
}

bool OAIWorkflowRunTrigger::is_outputs_link_Valid() const{
    return m_outputs_link_isValid;
}

QDateTime OAIWorkflowRunTrigger::getScheduledTime() const {
    return m_scheduled_time;
}
void OAIWorkflowRunTrigger::setScheduledTime(const QDateTime &scheduled_time) {
    m_scheduled_time = scheduled_time;
    m_scheduled_time_isSet = true;
}

bool OAIWorkflowRunTrigger::is_scheduled_time_Set() const{
    return m_scheduled_time_isSet;
}

bool OAIWorkflowRunTrigger::is_scheduled_time_Valid() const{
    return m_scheduled_time_isValid;
}

QDateTime OAIWorkflowRunTrigger::getStartTime() const {
    return m_start_time;
}
void OAIWorkflowRunTrigger::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkflowRunTrigger::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkflowRunTrigger::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIWorkflowStatus OAIWorkflowRunTrigger::getStatus() const {
    return m_status;
}
void OAIWorkflowRunTrigger::setStatus(const OAIWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflowRunTrigger::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflowRunTrigger::is_status_Valid() const{
    return m_status_isValid;
}

OAIObject OAIWorkflowRunTrigger::getTrackedProperties() const {
    return m_tracked_properties;
}
void OAIWorkflowRunTrigger::setTrackedProperties(const OAIObject &tracked_properties) {
    m_tracked_properties = tracked_properties;
    m_tracked_properties_isSet = true;
}

bool OAIWorkflowRunTrigger::is_tracked_properties_Set() const{
    return m_tracked_properties_isSet;
}

bool OAIWorkflowRunTrigger::is_tracked_properties_Valid() const{
    return m_tracked_properties_isValid;
}

QString OAIWorkflowRunTrigger::getTrackingId() const {
    return m_tracking_id;
}
void OAIWorkflowRunTrigger::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIWorkflowRunTrigger::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIWorkflowRunTrigger::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIWorkflowRunTrigger::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheduled_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracked_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowRunTrigger::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
