/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2MdnSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2MdnSettings::OAIAS2MdnSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2MdnSettings::OAIAS2MdnSettings() {
    this->initializeModel();
}

OAIAS2MdnSettings::~OAIAS2MdnSettings() {}

void OAIAS2MdnSettings::initializeModel() {

    m_disposition_notification_to_isSet = false;
    m_disposition_notification_to_isValid = false;

    m_mdn_text_isSet = false;
    m_mdn_text_isValid = false;

    m_mic_hashing_algorithm_isSet = false;
    m_mic_hashing_algorithm_isValid = false;

    m_need_mdn_isSet = false;
    m_need_mdn_isValid = false;

    m_receipt_delivery_url_isSet = false;
    m_receipt_delivery_url_isValid = false;

    m_send_inbound_mdnto_message_box_isSet = false;
    m_send_inbound_mdnto_message_box_isValid = false;

    m_send_mdn_asynchronously_isSet = false;
    m_send_mdn_asynchronously_isValid = false;

    m_sign_mdn_isSet = false;
    m_sign_mdn_isValid = false;

    m_sign_outbound_mdnif_optional_isSet = false;
    m_sign_outbound_mdnif_optional_isValid = false;
}

void OAIAS2MdnSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2MdnSettings::fromJsonObject(QJsonObject json) {

    m_disposition_notification_to_isValid = ::OpenAPI::fromJsonValue(m_disposition_notification_to, json[QString("dispositionNotificationTo")]);
    m_disposition_notification_to_isSet = !json[QString("dispositionNotificationTo")].isNull() && m_disposition_notification_to_isValid;

    m_mdn_text_isValid = ::OpenAPI::fromJsonValue(m_mdn_text, json[QString("mdnText")]);
    m_mdn_text_isSet = !json[QString("mdnText")].isNull() && m_mdn_text_isValid;

    m_mic_hashing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_mic_hashing_algorithm, json[QString("micHashingAlgorithm")]);
    m_mic_hashing_algorithm_isSet = !json[QString("micHashingAlgorithm")].isNull() && m_mic_hashing_algorithm_isValid;

    m_need_mdn_isValid = ::OpenAPI::fromJsonValue(m_need_mdn, json[QString("needMDN")]);
    m_need_mdn_isSet = !json[QString("needMDN")].isNull() && m_need_mdn_isValid;

    m_receipt_delivery_url_isValid = ::OpenAPI::fromJsonValue(m_receipt_delivery_url, json[QString("receiptDeliveryUrl")]);
    m_receipt_delivery_url_isSet = !json[QString("receiptDeliveryUrl")].isNull() && m_receipt_delivery_url_isValid;

    m_send_inbound_mdnto_message_box_isValid = ::OpenAPI::fromJsonValue(m_send_inbound_mdnto_message_box, json[QString("sendInboundMDNToMessageBox")]);
    m_send_inbound_mdnto_message_box_isSet = !json[QString("sendInboundMDNToMessageBox")].isNull() && m_send_inbound_mdnto_message_box_isValid;

    m_send_mdn_asynchronously_isValid = ::OpenAPI::fromJsonValue(m_send_mdn_asynchronously, json[QString("sendMDNAsynchronously")]);
    m_send_mdn_asynchronously_isSet = !json[QString("sendMDNAsynchronously")].isNull() && m_send_mdn_asynchronously_isValid;

    m_sign_mdn_isValid = ::OpenAPI::fromJsonValue(m_sign_mdn, json[QString("signMDN")]);
    m_sign_mdn_isSet = !json[QString("signMDN")].isNull() && m_sign_mdn_isValid;

    m_sign_outbound_mdnif_optional_isValid = ::OpenAPI::fromJsonValue(m_sign_outbound_mdnif_optional, json[QString("signOutboundMDNIfOptional")]);
    m_sign_outbound_mdnif_optional_isSet = !json[QString("signOutboundMDNIfOptional")].isNull() && m_sign_outbound_mdnif_optional_isValid;
}

QString OAIAS2MdnSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2MdnSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_disposition_notification_to_isSet) {
        obj.insert(QString("dispositionNotificationTo"), ::OpenAPI::toJsonValue(m_disposition_notification_to));
    }
    if (m_mdn_text_isSet) {
        obj.insert(QString("mdnText"), ::OpenAPI::toJsonValue(m_mdn_text));
    }
    if (m_mic_hashing_algorithm.isSet()) {
        obj.insert(QString("micHashingAlgorithm"), ::OpenAPI::toJsonValue(m_mic_hashing_algorithm));
    }
    if (m_need_mdn_isSet) {
        obj.insert(QString("needMDN"), ::OpenAPI::toJsonValue(m_need_mdn));
    }
    if (m_receipt_delivery_url_isSet) {
        obj.insert(QString("receiptDeliveryUrl"), ::OpenAPI::toJsonValue(m_receipt_delivery_url));
    }
    if (m_send_inbound_mdnto_message_box_isSet) {
        obj.insert(QString("sendInboundMDNToMessageBox"), ::OpenAPI::toJsonValue(m_send_inbound_mdnto_message_box));
    }
    if (m_send_mdn_asynchronously_isSet) {
        obj.insert(QString("sendMDNAsynchronously"), ::OpenAPI::toJsonValue(m_send_mdn_asynchronously));
    }
    if (m_sign_mdn_isSet) {
        obj.insert(QString("signMDN"), ::OpenAPI::toJsonValue(m_sign_mdn));
    }
    if (m_sign_outbound_mdnif_optional_isSet) {
        obj.insert(QString("signOutboundMDNIfOptional"), ::OpenAPI::toJsonValue(m_sign_outbound_mdnif_optional));
    }
    return obj;
}

QString OAIAS2MdnSettings::getDispositionNotificationTo() const {
    return m_disposition_notification_to;
}
void OAIAS2MdnSettings::setDispositionNotificationTo(const QString &disposition_notification_to) {
    m_disposition_notification_to = disposition_notification_to;
    m_disposition_notification_to_isSet = true;
}

bool OAIAS2MdnSettings::is_disposition_notification_to_Set() const{
    return m_disposition_notification_to_isSet;
}

bool OAIAS2MdnSettings::is_disposition_notification_to_Valid() const{
    return m_disposition_notification_to_isValid;
}

QString OAIAS2MdnSettings::getMdnText() const {
    return m_mdn_text;
}
void OAIAS2MdnSettings::setMdnText(const QString &mdn_text) {
    m_mdn_text = mdn_text;
    m_mdn_text_isSet = true;
}

bool OAIAS2MdnSettings::is_mdn_text_Set() const{
    return m_mdn_text_isSet;
}

bool OAIAS2MdnSettings::is_mdn_text_Valid() const{
    return m_mdn_text_isValid;
}

OAIHashingAlgorithm OAIAS2MdnSettings::getMicHashingAlgorithm() const {
    return m_mic_hashing_algorithm;
}
void OAIAS2MdnSettings::setMicHashingAlgorithm(const OAIHashingAlgorithm &mic_hashing_algorithm) {
    m_mic_hashing_algorithm = mic_hashing_algorithm;
    m_mic_hashing_algorithm_isSet = true;
}

bool OAIAS2MdnSettings::is_mic_hashing_algorithm_Set() const{
    return m_mic_hashing_algorithm_isSet;
}

bool OAIAS2MdnSettings::is_mic_hashing_algorithm_Valid() const{
    return m_mic_hashing_algorithm_isValid;
}

bool OAIAS2MdnSettings::isNeedMdn() const {
    return m_need_mdn;
}
void OAIAS2MdnSettings::setNeedMdn(const bool &need_mdn) {
    m_need_mdn = need_mdn;
    m_need_mdn_isSet = true;
}

bool OAIAS2MdnSettings::is_need_mdn_Set() const{
    return m_need_mdn_isSet;
}

bool OAIAS2MdnSettings::is_need_mdn_Valid() const{
    return m_need_mdn_isValid;
}

QString OAIAS2MdnSettings::getReceiptDeliveryUrl() const {
    return m_receipt_delivery_url;
}
void OAIAS2MdnSettings::setReceiptDeliveryUrl(const QString &receipt_delivery_url) {
    m_receipt_delivery_url = receipt_delivery_url;
    m_receipt_delivery_url_isSet = true;
}

bool OAIAS2MdnSettings::is_receipt_delivery_url_Set() const{
    return m_receipt_delivery_url_isSet;
}

bool OAIAS2MdnSettings::is_receipt_delivery_url_Valid() const{
    return m_receipt_delivery_url_isValid;
}

bool OAIAS2MdnSettings::isSendInboundMdntoMessageBox() const {
    return m_send_inbound_mdnto_message_box;
}
void OAIAS2MdnSettings::setSendInboundMdntoMessageBox(const bool &send_inbound_mdnto_message_box) {
    m_send_inbound_mdnto_message_box = send_inbound_mdnto_message_box;
    m_send_inbound_mdnto_message_box_isSet = true;
}

bool OAIAS2MdnSettings::is_send_inbound_mdnto_message_box_Set() const{
    return m_send_inbound_mdnto_message_box_isSet;
}

bool OAIAS2MdnSettings::is_send_inbound_mdnto_message_box_Valid() const{
    return m_send_inbound_mdnto_message_box_isValid;
}

bool OAIAS2MdnSettings::isSendMdnAsynchronously() const {
    return m_send_mdn_asynchronously;
}
void OAIAS2MdnSettings::setSendMdnAsynchronously(const bool &send_mdn_asynchronously) {
    m_send_mdn_asynchronously = send_mdn_asynchronously;
    m_send_mdn_asynchronously_isSet = true;
}

bool OAIAS2MdnSettings::is_send_mdn_asynchronously_Set() const{
    return m_send_mdn_asynchronously_isSet;
}

bool OAIAS2MdnSettings::is_send_mdn_asynchronously_Valid() const{
    return m_send_mdn_asynchronously_isValid;
}

bool OAIAS2MdnSettings::isSignMdn() const {
    return m_sign_mdn;
}
void OAIAS2MdnSettings::setSignMdn(const bool &sign_mdn) {
    m_sign_mdn = sign_mdn;
    m_sign_mdn_isSet = true;
}

bool OAIAS2MdnSettings::is_sign_mdn_Set() const{
    return m_sign_mdn_isSet;
}

bool OAIAS2MdnSettings::is_sign_mdn_Valid() const{
    return m_sign_mdn_isValid;
}

bool OAIAS2MdnSettings::isSignOutboundMdnifOptional() const {
    return m_sign_outbound_mdnif_optional;
}
void OAIAS2MdnSettings::setSignOutboundMdnifOptional(const bool &sign_outbound_mdnif_optional) {
    m_sign_outbound_mdnif_optional = sign_outbound_mdnif_optional;
    m_sign_outbound_mdnif_optional_isSet = true;
}

bool OAIAS2MdnSettings::is_sign_outbound_mdnif_optional_Set() const{
    return m_sign_outbound_mdnif_optional_isSet;
}

bool OAIAS2MdnSettings::is_sign_outbound_mdnif_optional_Valid() const{
    return m_sign_outbound_mdnif_optional_isValid;
}

bool OAIAS2MdnSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disposition_notification_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mic_hashing_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_need_mdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receipt_delivery_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_inbound_mdnto_message_box_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_mdn_asynchronously_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_mdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_outbound_mdnif_optional_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2MdnSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_mic_hashing_algorithm_isValid && m_need_mdn_isValid && m_send_inbound_mdnto_message_box_isValid && m_send_mdn_asynchronously_isValid && m_sign_mdn_isValid && m_sign_outbound_mdnif_optional_isValid && true;
}

} // namespace OpenAPI
