/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationServiceEnvironmentProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationServiceEnvironmentProperties::OAIIntegrationServiceEnvironmentProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationServiceEnvironmentProperties::OAIIntegrationServiceEnvironmentProperties() {
    this->initializeModel();
}

OAIIntegrationServiceEnvironmentProperties::~OAIIntegrationServiceEnvironmentProperties() {}

void OAIIntegrationServiceEnvironmentProperties::initializeModel() {

    m_endpoints_configuration_isSet = false;
    m_endpoints_configuration_isValid = false;

    m_integration_service_environment_id_isSet = false;
    m_integration_service_environment_id_isValid = false;

    m_network_configuration_isSet = false;
    m_network_configuration_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIIntegrationServiceEnvironmentProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationServiceEnvironmentProperties::fromJsonObject(QJsonObject json) {

    m_endpoints_configuration_isValid = ::OpenAPI::fromJsonValue(m_endpoints_configuration, json[QString("endpointsConfiguration")]);
    m_endpoints_configuration_isSet = !json[QString("endpointsConfiguration")].isNull() && m_endpoints_configuration_isValid;

    m_integration_service_environment_id_isValid = ::OpenAPI::fromJsonValue(m_integration_service_environment_id, json[QString("integrationServiceEnvironmentId")]);
    m_integration_service_environment_id_isSet = !json[QString("integrationServiceEnvironmentId")].isNull() && m_integration_service_environment_id_isValid;

    m_network_configuration_isValid = ::OpenAPI::fromJsonValue(m_network_configuration, json[QString("networkConfiguration")]);
    m_network_configuration_isSet = !json[QString("networkConfiguration")].isNull() && m_network_configuration_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIIntegrationServiceEnvironmentProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationServiceEnvironmentProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_endpoints_configuration.isSet()) {
        obj.insert(QString("endpointsConfiguration"), ::OpenAPI::toJsonValue(m_endpoints_configuration));
    }
    if (m_integration_service_environment_id_isSet) {
        obj.insert(QString("integrationServiceEnvironmentId"), ::OpenAPI::toJsonValue(m_integration_service_environment_id));
    }
    if (m_network_configuration.isSet()) {
        obj.insert(QString("networkConfiguration"), ::OpenAPI::toJsonValue(m_network_configuration));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

OAIFlowEndpointsConfiguration OAIIntegrationServiceEnvironmentProperties::getEndpointsConfiguration() const {
    return m_endpoints_configuration;
}
void OAIIntegrationServiceEnvironmentProperties::setEndpointsConfiguration(const OAIFlowEndpointsConfiguration &endpoints_configuration) {
    m_endpoints_configuration = endpoints_configuration;
    m_endpoints_configuration_isSet = true;
}

bool OAIIntegrationServiceEnvironmentProperties::is_endpoints_configuration_Set() const{
    return m_endpoints_configuration_isSet;
}

bool OAIIntegrationServiceEnvironmentProperties::is_endpoints_configuration_Valid() const{
    return m_endpoints_configuration_isValid;
}

QString OAIIntegrationServiceEnvironmentProperties::getIntegrationServiceEnvironmentId() const {
    return m_integration_service_environment_id;
}
void OAIIntegrationServiceEnvironmentProperties::setIntegrationServiceEnvironmentId(const QString &integration_service_environment_id) {
    m_integration_service_environment_id = integration_service_environment_id;
    m_integration_service_environment_id_isSet = true;
}

bool OAIIntegrationServiceEnvironmentProperties::is_integration_service_environment_id_Set() const{
    return m_integration_service_environment_id_isSet;
}

bool OAIIntegrationServiceEnvironmentProperties::is_integration_service_environment_id_Valid() const{
    return m_integration_service_environment_id_isValid;
}

OAINetworkConfiguration OAIIntegrationServiceEnvironmentProperties::getNetworkConfiguration() const {
    return m_network_configuration;
}
void OAIIntegrationServiceEnvironmentProperties::setNetworkConfiguration(const OAINetworkConfiguration &network_configuration) {
    m_network_configuration = network_configuration;
    m_network_configuration_isSet = true;
}

bool OAIIntegrationServiceEnvironmentProperties::is_network_configuration_Set() const{
    return m_network_configuration_isSet;
}

bool OAIIntegrationServiceEnvironmentProperties::is_network_configuration_Valid() const{
    return m_network_configuration_isValid;
}

OAIWorkflowProvisioningState OAIIntegrationServiceEnvironmentProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIIntegrationServiceEnvironmentProperties::setProvisioningState(const OAIWorkflowProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIIntegrationServiceEnvironmentProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIIntegrationServiceEnvironmentProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIWorkflowState OAIIntegrationServiceEnvironmentProperties::getState() const {
    return m_state;
}
void OAIIntegrationServiceEnvironmentProperties::setState(const OAIWorkflowState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIIntegrationServiceEnvironmentProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIIntegrationServiceEnvironmentProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIIntegrationServiceEnvironmentProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_endpoints_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_integration_service_environment_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationServiceEnvironmentProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
