/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactDecimalIndicator.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactDecimalIndicator::OAIEdifactDecimalIndicator(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactDecimalIndicator::OAIEdifactDecimalIndicator() {
    this->initializeModel();
}

OAIEdifactDecimalIndicator::~OAIEdifactDecimalIndicator() {}

void OAIEdifactDecimalIndicator::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIEdifactDecimalIndicator::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIEdifactDecimalIndicator::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactDecimalIndicator::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Comma", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactDecimalIndicator::COMMA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Decimal", Qt::CaseInsensitive) == 0) {
        m_value = eOAIEdifactDecimalIndicator::DECIMAL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIEdifactDecimalIndicator::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIEdifactDecimalIndicator::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIEdifactDecimalIndicator::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIEdifactDecimalIndicator::COMMA:
            val = "Comma";
            break;
        case eOAIEdifactDecimalIndicator::DECIMAL:
            val = "Decimal";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIEdifactDecimalIndicator::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIEdifactDecimalIndicator::eOAIEdifactDecimalIndicator OAIEdifactDecimalIndicator::getValue() const {
    return m_value;
}

void OAIEdifactDecimalIndicator::setValue(const OAIEdifactDecimalIndicator::eOAIEdifactDecimalIndicator& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIEdifactDecimalIndicator::isSet() const {
    
    return m_value_isSet;
}

bool OAIEdifactDecimalIndicator::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
