/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINetworkConfiguration.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINetworkConfiguration::OAINetworkConfiguration(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINetworkConfiguration::OAINetworkConfiguration() {
    this->initializeModel();
}

OAINetworkConfiguration::~OAINetworkConfiguration() {}

void OAINetworkConfiguration::initializeModel() {

    m_access_endpoint_isSet = false;
    m_access_endpoint_isValid = false;

    m_subnets_isSet = false;
    m_subnets_isValid = false;

    m_virtual_network_address_space_isSet = false;
    m_virtual_network_address_space_isValid = false;
}

void OAINetworkConfiguration::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINetworkConfiguration::fromJsonObject(QJsonObject json) {

    m_access_endpoint_isValid = ::OpenAPI::fromJsonValue(m_access_endpoint, json[QString("accessEndpoint")]);
    m_access_endpoint_isSet = !json[QString("accessEndpoint")].isNull() && m_access_endpoint_isValid;

    m_subnets_isValid = ::OpenAPI::fromJsonValue(m_subnets, json[QString("subnets")]);
    m_subnets_isSet = !json[QString("subnets")].isNull() && m_subnets_isValid;

    m_virtual_network_address_space_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_address_space, json[QString("virtualNetworkAddressSpace")]);
    m_virtual_network_address_space_isSet = !json[QString("virtualNetworkAddressSpace")].isNull() && m_virtual_network_address_space_isValid;
}

QString OAINetworkConfiguration::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINetworkConfiguration::asJsonObject() const {
    QJsonObject obj;
    if (m_access_endpoint.isSet()) {
        obj.insert(QString("accessEndpoint"), ::OpenAPI::toJsonValue(m_access_endpoint));
    }
    if (m_subnets.size() > 0) {
        obj.insert(QString("subnets"), ::OpenAPI::toJsonValue(m_subnets));
    }
    if (m_virtual_network_address_space_isSet) {
        obj.insert(QString("virtualNetworkAddressSpace"), ::OpenAPI::toJsonValue(m_virtual_network_address_space));
    }
    return obj;
}

OAIIntegrationServiceEnvironmentAccessEndpoint OAINetworkConfiguration::getAccessEndpoint() const {
    return m_access_endpoint;
}
void OAINetworkConfiguration::setAccessEndpoint(const OAIIntegrationServiceEnvironmentAccessEndpoint &access_endpoint) {
    m_access_endpoint = access_endpoint;
    m_access_endpoint_isSet = true;
}

bool OAINetworkConfiguration::is_access_endpoint_Set() const{
    return m_access_endpoint_isSet;
}

bool OAINetworkConfiguration::is_access_endpoint_Valid() const{
    return m_access_endpoint_isValid;
}

QList<OAIResourceReference> OAINetworkConfiguration::getSubnets() const {
    return m_subnets;
}
void OAINetworkConfiguration::setSubnets(const QList<OAIResourceReference> &subnets) {
    m_subnets = subnets;
    m_subnets_isSet = true;
}

bool OAINetworkConfiguration::is_subnets_Set() const{
    return m_subnets_isSet;
}

bool OAINetworkConfiguration::is_subnets_Valid() const{
    return m_subnets_isValid;
}

QString OAINetworkConfiguration::getVirtualNetworkAddressSpace() const {
    return m_virtual_network_address_space;
}
void OAINetworkConfiguration::setVirtualNetworkAddressSpace(const QString &virtual_network_address_space) {
    m_virtual_network_address_space = virtual_network_address_space;
    m_virtual_network_address_space_isSet = true;
}

bool OAINetworkConfiguration::is_virtual_network_address_space_Set() const{
    return m_virtual_network_address_space_isSet;
}

bool OAINetworkConfiguration::is_virtual_network_address_space_Valid() const{
    return m_virtual_network_address_space_isValid;
}

bool OAINetworkConfiguration::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_endpoint.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_address_space_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINetworkConfiguration::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
