/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAS2SecuritySettings.h
 *
 * The AS2 agreement security settings.
 */

#ifndef OAIAS2SecuritySettings_H
#define OAIAS2SecuritySettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAS2SecuritySettings : public OAIObject {
public:
    OAIAS2SecuritySettings();
    OAIAS2SecuritySettings(QString json);
    ~OAIAS2SecuritySettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isEnableNrrForInboundDecodedMessages() const;
    void setEnableNrrForInboundDecodedMessages(const bool &enable_nrr_for_inbound_decoded_messages);
    bool is_enable_nrr_for_inbound_decoded_messages_Set() const;
    bool is_enable_nrr_for_inbound_decoded_messages_Valid() const;

    bool isEnableNrrForInboundEncodedMessages() const;
    void setEnableNrrForInboundEncodedMessages(const bool &enable_nrr_for_inbound_encoded_messages);
    bool is_enable_nrr_for_inbound_encoded_messages_Set() const;
    bool is_enable_nrr_for_inbound_encoded_messages_Valid() const;

    bool isEnableNrrForInboundMdn() const;
    void setEnableNrrForInboundMdn(const bool &enable_nrr_for_inbound_mdn);
    bool is_enable_nrr_for_inbound_mdn_Set() const;
    bool is_enable_nrr_for_inbound_mdn_Valid() const;

    bool isEnableNrrForOutboundDecodedMessages() const;
    void setEnableNrrForOutboundDecodedMessages(const bool &enable_nrr_for_outbound_decoded_messages);
    bool is_enable_nrr_for_outbound_decoded_messages_Set() const;
    bool is_enable_nrr_for_outbound_decoded_messages_Valid() const;

    bool isEnableNrrForOutboundEncodedMessages() const;
    void setEnableNrrForOutboundEncodedMessages(const bool &enable_nrr_for_outbound_encoded_messages);
    bool is_enable_nrr_for_outbound_encoded_messages_Set() const;
    bool is_enable_nrr_for_outbound_encoded_messages_Valid() const;

    bool isEnableNrrForOutboundMdn() const;
    void setEnableNrrForOutboundMdn(const bool &enable_nrr_for_outbound_mdn);
    bool is_enable_nrr_for_outbound_mdn_Set() const;
    bool is_enable_nrr_for_outbound_mdn_Valid() const;

    QString getEncryptionCertificateName() const;
    void setEncryptionCertificateName(const QString &encryption_certificate_name);
    bool is_encryption_certificate_name_Set() const;
    bool is_encryption_certificate_name_Valid() const;

    bool isOverrideGroupSigningCertificate() const;
    void setOverrideGroupSigningCertificate(const bool &override_group_signing_certificate);
    bool is_override_group_signing_certificate_Set() const;
    bool is_override_group_signing_certificate_Valid() const;

    QString getSha2AlgorithmFormat() const;
    void setSha2AlgorithmFormat(const QString &sha2_algorithm_format);
    bool is_sha2_algorithm_format_Set() const;
    bool is_sha2_algorithm_format_Valid() const;

    QString getSigningCertificateName() const;
    void setSigningCertificateName(const QString &signing_certificate_name);
    bool is_signing_certificate_name_Set() const;
    bool is_signing_certificate_name_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_enable_nrr_for_inbound_decoded_messages;
    bool m_enable_nrr_for_inbound_decoded_messages_isSet;
    bool m_enable_nrr_for_inbound_decoded_messages_isValid;

    bool m_enable_nrr_for_inbound_encoded_messages;
    bool m_enable_nrr_for_inbound_encoded_messages_isSet;
    bool m_enable_nrr_for_inbound_encoded_messages_isValid;

    bool m_enable_nrr_for_inbound_mdn;
    bool m_enable_nrr_for_inbound_mdn_isSet;
    bool m_enable_nrr_for_inbound_mdn_isValid;

    bool m_enable_nrr_for_outbound_decoded_messages;
    bool m_enable_nrr_for_outbound_decoded_messages_isSet;
    bool m_enable_nrr_for_outbound_decoded_messages_isValid;

    bool m_enable_nrr_for_outbound_encoded_messages;
    bool m_enable_nrr_for_outbound_encoded_messages_isSet;
    bool m_enable_nrr_for_outbound_encoded_messages_isValid;

    bool m_enable_nrr_for_outbound_mdn;
    bool m_enable_nrr_for_outbound_mdn_isSet;
    bool m_enable_nrr_for_outbound_mdn_isValid;

    QString m_encryption_certificate_name;
    bool m_encryption_certificate_name_isSet;
    bool m_encryption_certificate_name_isValid;

    bool m_override_group_signing_certificate;
    bool m_override_group_signing_certificate_isSet;
    bool m_override_group_signing_certificate_isValid;

    QString m_sha2_algorithm_format;
    bool m_sha2_algorithm_format_isSet;
    bool m_sha2_algorithm_format_isValid;

    QString m_signing_certificate_name;
    bool m_signing_certificate_name_isSet;
    bool m_signing_certificate_name_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAS2SecuritySettings)

#endif // OAIAS2SecuritySettings_H
