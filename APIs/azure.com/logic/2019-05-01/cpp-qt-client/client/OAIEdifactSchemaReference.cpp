/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactSchemaReference.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactSchemaReference::OAIEdifactSchemaReference(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactSchemaReference::OAIEdifactSchemaReference() {
    this->initializeModel();
}

OAIEdifactSchemaReference::~OAIEdifactSchemaReference() {}

void OAIEdifactSchemaReference::initializeModel() {

    m_association_assigned_code_isSet = false;
    m_association_assigned_code_isValid = false;

    m_message_id_isSet = false;
    m_message_id_isValid = false;

    m_message_release_isSet = false;
    m_message_release_isValid = false;

    m_message_version_isSet = false;
    m_message_version_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_sender_application_id_isSet = false;
    m_sender_application_id_isValid = false;

    m_sender_application_qualifier_isSet = false;
    m_sender_application_qualifier_isValid = false;
}

void OAIEdifactSchemaReference::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactSchemaReference::fromJsonObject(QJsonObject json) {

    m_association_assigned_code_isValid = ::OpenAPI::fromJsonValue(m_association_assigned_code, json[QString("associationAssignedCode")]);
    m_association_assigned_code_isSet = !json[QString("associationAssignedCode")].isNull() && m_association_assigned_code_isValid;

    m_message_id_isValid = ::OpenAPI::fromJsonValue(m_message_id, json[QString("messageId")]);
    m_message_id_isSet = !json[QString("messageId")].isNull() && m_message_id_isValid;

    m_message_release_isValid = ::OpenAPI::fromJsonValue(m_message_release, json[QString("messageRelease")]);
    m_message_release_isSet = !json[QString("messageRelease")].isNull() && m_message_release_isValid;

    m_message_version_isValid = ::OpenAPI::fromJsonValue(m_message_version, json[QString("messageVersion")]);
    m_message_version_isSet = !json[QString("messageVersion")].isNull() && m_message_version_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_sender_application_id_isValid = ::OpenAPI::fromJsonValue(m_sender_application_id, json[QString("senderApplicationId")]);
    m_sender_application_id_isSet = !json[QString("senderApplicationId")].isNull() && m_sender_application_id_isValid;

    m_sender_application_qualifier_isValid = ::OpenAPI::fromJsonValue(m_sender_application_qualifier, json[QString("senderApplicationQualifier")]);
    m_sender_application_qualifier_isSet = !json[QString("senderApplicationQualifier")].isNull() && m_sender_application_qualifier_isValid;
}

QString OAIEdifactSchemaReference::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactSchemaReference::asJsonObject() const {
    QJsonObject obj;
    if (m_association_assigned_code_isSet) {
        obj.insert(QString("associationAssignedCode"), ::OpenAPI::toJsonValue(m_association_assigned_code));
    }
    if (m_message_id_isSet) {
        obj.insert(QString("messageId"), ::OpenAPI::toJsonValue(m_message_id));
    }
    if (m_message_release_isSet) {
        obj.insert(QString("messageRelease"), ::OpenAPI::toJsonValue(m_message_release));
    }
    if (m_message_version_isSet) {
        obj.insert(QString("messageVersion"), ::OpenAPI::toJsonValue(m_message_version));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_sender_application_id_isSet) {
        obj.insert(QString("senderApplicationId"), ::OpenAPI::toJsonValue(m_sender_application_id));
    }
    if (m_sender_application_qualifier_isSet) {
        obj.insert(QString("senderApplicationQualifier"), ::OpenAPI::toJsonValue(m_sender_application_qualifier));
    }
    return obj;
}

QString OAIEdifactSchemaReference::getAssociationAssignedCode() const {
    return m_association_assigned_code;
}
void OAIEdifactSchemaReference::setAssociationAssignedCode(const QString &association_assigned_code) {
    m_association_assigned_code = association_assigned_code;
    m_association_assigned_code_isSet = true;
}

bool OAIEdifactSchemaReference::is_association_assigned_code_Set() const{
    return m_association_assigned_code_isSet;
}

bool OAIEdifactSchemaReference::is_association_assigned_code_Valid() const{
    return m_association_assigned_code_isValid;
}

QString OAIEdifactSchemaReference::getMessageId() const {
    return m_message_id;
}
void OAIEdifactSchemaReference::setMessageId(const QString &message_id) {
    m_message_id = message_id;
    m_message_id_isSet = true;
}

bool OAIEdifactSchemaReference::is_message_id_Set() const{
    return m_message_id_isSet;
}

bool OAIEdifactSchemaReference::is_message_id_Valid() const{
    return m_message_id_isValid;
}

QString OAIEdifactSchemaReference::getMessageRelease() const {
    return m_message_release;
}
void OAIEdifactSchemaReference::setMessageRelease(const QString &message_release) {
    m_message_release = message_release;
    m_message_release_isSet = true;
}

bool OAIEdifactSchemaReference::is_message_release_Set() const{
    return m_message_release_isSet;
}

bool OAIEdifactSchemaReference::is_message_release_Valid() const{
    return m_message_release_isValid;
}

QString OAIEdifactSchemaReference::getMessageVersion() const {
    return m_message_version;
}
void OAIEdifactSchemaReference::setMessageVersion(const QString &message_version) {
    m_message_version = message_version;
    m_message_version_isSet = true;
}

bool OAIEdifactSchemaReference::is_message_version_Set() const{
    return m_message_version_isSet;
}

bool OAIEdifactSchemaReference::is_message_version_Valid() const{
    return m_message_version_isValid;
}

QString OAIEdifactSchemaReference::getSchemaName() const {
    return m_schema_name;
}
void OAIEdifactSchemaReference::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAIEdifactSchemaReference::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAIEdifactSchemaReference::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAIEdifactSchemaReference::getSenderApplicationId() const {
    return m_sender_application_id;
}
void OAIEdifactSchemaReference::setSenderApplicationId(const QString &sender_application_id) {
    m_sender_application_id = sender_application_id;
    m_sender_application_id_isSet = true;
}

bool OAIEdifactSchemaReference::is_sender_application_id_Set() const{
    return m_sender_application_id_isSet;
}

bool OAIEdifactSchemaReference::is_sender_application_id_Valid() const{
    return m_sender_application_id_isValid;
}

QString OAIEdifactSchemaReference::getSenderApplicationQualifier() const {
    return m_sender_application_qualifier;
}
void OAIEdifactSchemaReference::setSenderApplicationQualifier(const QString &sender_application_qualifier) {
    m_sender_application_qualifier = sender_application_qualifier;
    m_sender_application_qualifier_isSet = true;
}

bool OAIEdifactSchemaReference::is_sender_application_qualifier_Set() const{
    return m_sender_application_qualifier_isSet;
}

bool OAIEdifactSchemaReference::is_sender_application_qualifier_Valid() const{
    return m_sender_application_qualifier_isValid;
}

bool OAIEdifactSchemaReference::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_association_assigned_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_application_qualifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactSchemaReference::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_message_id_isValid && m_message_release_isValid && m_message_version_isValid && m_schema_name_isValid && true;
}

} // namespace OpenAPI
