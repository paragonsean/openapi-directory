/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerCustomDynamicTreeParameter.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerCustomDynamicTreeParameter::OAISwaggerCustomDynamicTreeParameter(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerCustomDynamicTreeParameter::OAISwaggerCustomDynamicTreeParameter() {
    this->initializeModel();
}

OAISwaggerCustomDynamicTreeParameter::~OAISwaggerCustomDynamicTreeParameter() {}

void OAISwaggerCustomDynamicTreeParameter::initializeModel() {

    m_parameter_reference_isSet = false;
    m_parameter_reference_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_selected_item_value_path_isSet = false;
    m_selected_item_value_path_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISwaggerCustomDynamicTreeParameter::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerCustomDynamicTreeParameter::fromJsonObject(QJsonObject json) {

    m_parameter_reference_isValid = ::OpenAPI::fromJsonValue(m_parameter_reference, json[QString("parameterReference")]);
    m_parameter_reference_isSet = !json[QString("parameterReference")].isNull() && m_parameter_reference_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_selected_item_value_path_isValid = ::OpenAPI::fromJsonValue(m_selected_item_value_path, json[QString("selectedItemValuePath")]);
    m_selected_item_value_path_isSet = !json[QString("selectedItemValuePath")].isNull() && m_selected_item_value_path_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISwaggerCustomDynamicTreeParameter::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerCustomDynamicTreeParameter::asJsonObject() const {
    QJsonObject obj;
    if (m_parameter_reference_isSet) {
        obj.insert(QString("parameterReference"), ::OpenAPI::toJsonValue(m_parameter_reference));
    }
    if (m_required_isSet) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_selected_item_value_path_isSet) {
        obj.insert(QString("selectedItemValuePath"), ::OpenAPI::toJsonValue(m_selected_item_value_path));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAISwaggerCustomDynamicTreeParameter::getParameterReference() const {
    return m_parameter_reference;
}
void OAISwaggerCustomDynamicTreeParameter::setParameterReference(const QString &parameter_reference) {
    m_parameter_reference = parameter_reference;
    m_parameter_reference_isSet = true;
}

bool OAISwaggerCustomDynamicTreeParameter::is_parameter_reference_Set() const{
    return m_parameter_reference_isSet;
}

bool OAISwaggerCustomDynamicTreeParameter::is_parameter_reference_Valid() const{
    return m_parameter_reference_isValid;
}

bool OAISwaggerCustomDynamicTreeParameter::isRequired() const {
    return m_required;
}
void OAISwaggerCustomDynamicTreeParameter::setRequired(const bool &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISwaggerCustomDynamicTreeParameter::is_required_Set() const{
    return m_required_isSet;
}

bool OAISwaggerCustomDynamicTreeParameter::is_required_Valid() const{
    return m_required_isValid;
}

QString OAISwaggerCustomDynamicTreeParameter::getSelectedItemValuePath() const {
    return m_selected_item_value_path;
}
void OAISwaggerCustomDynamicTreeParameter::setSelectedItemValuePath(const QString &selected_item_value_path) {
    m_selected_item_value_path = selected_item_value_path;
    m_selected_item_value_path_isSet = true;
}

bool OAISwaggerCustomDynamicTreeParameter::is_selected_item_value_path_Set() const{
    return m_selected_item_value_path_isSet;
}

bool OAISwaggerCustomDynamicTreeParameter::is_selected_item_value_path_Valid() const{
    return m_selected_item_value_path_isValid;
}

OAIObject OAISwaggerCustomDynamicTreeParameter::getValue() const {
    return m_value;
}
void OAISwaggerCustomDynamicTreeParameter::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISwaggerCustomDynamicTreeParameter::is_value_Set() const{
    return m_value_isSet;
}

bool OAISwaggerCustomDynamicTreeParameter::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISwaggerCustomDynamicTreeParameter::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_parameter_reference_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_selected_item_value_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerCustomDynamicTreeParameter::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
