/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowRunActionsApi_H
#define OAI_OAIWorkflowRunActionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIExpressionTraces.h"
#include "OAIRequestHistory.h"
#include "OAIRequestHistoryListResult.h"
#include "OAIWorkflowRunAction.h"
#include "OAIWorkflowRunActionListResult.h"
#include "OAIWorkflowRunActionRepetitionDefinition.h"
#include "OAIWorkflowRunActionRepetitionDefinitionCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowRunActionsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowRunActionsApi(const int timeOut = 0);
    ~OAIWorkflowRunActionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  repetition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRepetitionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &repetition_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRepetitionsList(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  repetition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRepetitionsListExpressionTraces(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &repetition_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  repetition_name QString [required]
    * @param[in]  request_history_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRepetitionsRequestHistoriesGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &repetition_name, const QString &request_history_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  repetition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRepetitionsRequestHistoriesList(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &repetition_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  request_history_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRequestHistoriesGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &request_history_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionRequestHistoriesList(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  repetition_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionScopeRepetitionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &repetition_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionScopeRepetitionsList(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void workflowRunActionsList(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  run_name QString [required]
    * @param[in]  action_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowRunActionsListExpressionTraces(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &run_name, const QString &action_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workflowRunActionRepetitionsGetCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionRepetitionsListCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionRepetitionsListExpressionTracesCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionRepetitionsRequestHistoriesGetCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionRepetitionsRequestHistoriesListCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionRequestHistoriesGetCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionRequestHistoriesListCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionScopeRepetitionsGetCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionScopeRepetitionsListCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionsGetCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionsListCallback(OAIHttpRequestWorker *worker);
    void workflowRunActionsListExpressionTracesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workflowRunActionRepetitionsGetSignal(OAIWorkflowRunActionRepetitionDefinition summary);
    void workflowRunActionRepetitionsListSignal(OAIWorkflowRunActionRepetitionDefinitionCollection summary);
    void workflowRunActionRepetitionsListExpressionTracesSignal(OAIExpressionTraces summary);
    void workflowRunActionRepetitionsRequestHistoriesGetSignal(OAIRequestHistory summary);
    void workflowRunActionRepetitionsRequestHistoriesListSignal(OAIRequestHistoryListResult summary);
    void workflowRunActionRequestHistoriesGetSignal(OAIRequestHistory summary);
    void workflowRunActionRequestHistoriesListSignal(OAIRequestHistoryListResult summary);
    void workflowRunActionScopeRepetitionsGetSignal(OAIWorkflowRunActionRepetitionDefinition summary);
    void workflowRunActionScopeRepetitionsListSignal(OAIWorkflowRunActionRepetitionDefinitionCollection summary);
    void workflowRunActionsGetSignal(OAIWorkflowRunAction summary);
    void workflowRunActionsListSignal(OAIWorkflowRunActionListResult summary);
    void workflowRunActionsListExpressionTracesSignal(OAIExpressionTraces summary);


    void workflowRunActionRepetitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRunActionRepetitionDefinition summary);
    void workflowRunActionRepetitionsListSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRunActionRepetitionDefinitionCollection summary);
    void workflowRunActionRepetitionsListExpressionTracesSignalFull(OAIHttpRequestWorker *worker, OAIExpressionTraces summary);
    void workflowRunActionRepetitionsRequestHistoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIRequestHistory summary);
    void workflowRunActionRepetitionsRequestHistoriesListSignalFull(OAIHttpRequestWorker *worker, OAIRequestHistoryListResult summary);
    void workflowRunActionRequestHistoriesGetSignalFull(OAIHttpRequestWorker *worker, OAIRequestHistory summary);
    void workflowRunActionRequestHistoriesListSignalFull(OAIHttpRequestWorker *worker, OAIRequestHistoryListResult summary);
    void workflowRunActionScopeRepetitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRunActionRepetitionDefinition summary);
    void workflowRunActionScopeRepetitionsListSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRunActionRepetitionDefinitionCollection summary);
    void workflowRunActionsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRunAction summary);
    void workflowRunActionsListSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRunActionListResult summary);
    void workflowRunActionsListExpressionTracesSignalFull(OAIHttpRequestWorker *worker, OAIExpressionTraces summary);

    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsGetSignalError() instead")
    void workflowRunActionRepetitionsGetSignalE(OAIWorkflowRunActionRepetitionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsGetSignalError(OAIWorkflowRunActionRepetitionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsListSignalError() instead")
    void workflowRunActionRepetitionsListSignalE(OAIWorkflowRunActionRepetitionDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsListSignalError(OAIWorkflowRunActionRepetitionDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsListExpressionTracesSignalError() instead")
    void workflowRunActionRepetitionsListExpressionTracesSignalE(OAIExpressionTraces summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsListExpressionTracesSignalError(OAIExpressionTraces summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsRequestHistoriesGetSignalError() instead")
    void workflowRunActionRepetitionsRequestHistoriesGetSignalE(OAIRequestHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsRequestHistoriesGetSignalError(OAIRequestHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsRequestHistoriesListSignalError() instead")
    void workflowRunActionRepetitionsRequestHistoriesListSignalE(OAIRequestHistoryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsRequestHistoriesListSignalError(OAIRequestHistoryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRequestHistoriesGetSignalError() instead")
    void workflowRunActionRequestHistoriesGetSignalE(OAIRequestHistory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRequestHistoriesGetSignalError(OAIRequestHistory summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRequestHistoriesListSignalError() instead")
    void workflowRunActionRequestHistoriesListSignalE(OAIRequestHistoryListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRequestHistoriesListSignalError(OAIRequestHistoryListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionScopeRepetitionsGetSignalError() instead")
    void workflowRunActionScopeRepetitionsGetSignalE(OAIWorkflowRunActionRepetitionDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionScopeRepetitionsGetSignalError(OAIWorkflowRunActionRepetitionDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionScopeRepetitionsListSignalError() instead")
    void workflowRunActionScopeRepetitionsListSignalE(OAIWorkflowRunActionRepetitionDefinitionCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionScopeRepetitionsListSignalError(OAIWorkflowRunActionRepetitionDefinitionCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionsGetSignalError() instead")
    void workflowRunActionsGetSignalE(OAIWorkflowRunAction summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionsGetSignalError(OAIWorkflowRunAction summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionsListSignalError() instead")
    void workflowRunActionsListSignalE(OAIWorkflowRunActionListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionsListSignalError(OAIWorkflowRunActionListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionsListExpressionTracesSignalError() instead")
    void workflowRunActionsListExpressionTracesSignalE(OAIExpressionTraces summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionsListExpressionTracesSignalError(OAIExpressionTraces summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsGetSignalErrorFull() instead")
    void workflowRunActionRepetitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsListSignalErrorFull() instead")
    void workflowRunActionRepetitionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsListExpressionTracesSignalErrorFull() instead")
    void workflowRunActionRepetitionsListExpressionTracesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsListExpressionTracesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsRequestHistoriesGetSignalErrorFull() instead")
    void workflowRunActionRepetitionsRequestHistoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsRequestHistoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRepetitionsRequestHistoriesListSignalErrorFull() instead")
    void workflowRunActionRepetitionsRequestHistoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRepetitionsRequestHistoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRequestHistoriesGetSignalErrorFull() instead")
    void workflowRunActionRequestHistoriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRequestHistoriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionRequestHistoriesListSignalErrorFull() instead")
    void workflowRunActionRequestHistoriesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionRequestHistoriesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionScopeRepetitionsGetSignalErrorFull() instead")
    void workflowRunActionScopeRepetitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionScopeRepetitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionScopeRepetitionsListSignalErrorFull() instead")
    void workflowRunActionScopeRepetitionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionScopeRepetitionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionsGetSignalErrorFull() instead")
    void workflowRunActionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionsListSignalErrorFull() instead")
    void workflowRunActionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowRunActionsListExpressionTracesSignalErrorFull() instead")
    void workflowRunActionsListExpressionTracesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowRunActionsListExpressionTracesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
