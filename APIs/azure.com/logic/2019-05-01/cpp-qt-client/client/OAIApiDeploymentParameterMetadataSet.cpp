/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApiDeploymentParameterMetadataSet.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApiDeploymentParameterMetadataSet::OAIApiDeploymentParameterMetadataSet(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApiDeploymentParameterMetadataSet::OAIApiDeploymentParameterMetadataSet() {
    this->initializeModel();
}

OAIApiDeploymentParameterMetadataSet::~OAIApiDeploymentParameterMetadataSet() {}

void OAIApiDeploymentParameterMetadataSet::initializeModel() {

    m_package_content_link_isSet = false;
    m_package_content_link_isValid = false;

    m_redis_cache_connection_string_isSet = false;
    m_redis_cache_connection_string_isValid = false;
}

void OAIApiDeploymentParameterMetadataSet::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApiDeploymentParameterMetadataSet::fromJsonObject(QJsonObject json) {

    m_package_content_link_isValid = ::OpenAPI::fromJsonValue(m_package_content_link, json[QString("packageContentLink")]);
    m_package_content_link_isSet = !json[QString("packageContentLink")].isNull() && m_package_content_link_isValid;

    m_redis_cache_connection_string_isValid = ::OpenAPI::fromJsonValue(m_redis_cache_connection_string, json[QString("redisCacheConnectionString")]);
    m_redis_cache_connection_string_isSet = !json[QString("redisCacheConnectionString")].isNull() && m_redis_cache_connection_string_isValid;
}

QString OAIApiDeploymentParameterMetadataSet::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApiDeploymentParameterMetadataSet::asJsonObject() const {
    QJsonObject obj;
    if (m_package_content_link.isSet()) {
        obj.insert(QString("packageContentLink"), ::OpenAPI::toJsonValue(m_package_content_link));
    }
    if (m_redis_cache_connection_string.isSet()) {
        obj.insert(QString("redisCacheConnectionString"), ::OpenAPI::toJsonValue(m_redis_cache_connection_string));
    }
    return obj;
}

OAIApiDeploymentParameterMetadata OAIApiDeploymentParameterMetadataSet::getPackageContentLink() const {
    return m_package_content_link;
}
void OAIApiDeploymentParameterMetadataSet::setPackageContentLink(const OAIApiDeploymentParameterMetadata &package_content_link) {
    m_package_content_link = package_content_link;
    m_package_content_link_isSet = true;
}

bool OAIApiDeploymentParameterMetadataSet::is_package_content_link_Set() const{
    return m_package_content_link_isSet;
}

bool OAIApiDeploymentParameterMetadataSet::is_package_content_link_Valid() const{
    return m_package_content_link_isValid;
}

OAIApiDeploymentParameterMetadata OAIApiDeploymentParameterMetadataSet::getRedisCacheConnectionString() const {
    return m_redis_cache_connection_string;
}
void OAIApiDeploymentParameterMetadataSet::setRedisCacheConnectionString(const OAIApiDeploymentParameterMetadata &redis_cache_connection_string) {
    m_redis_cache_connection_string = redis_cache_connection_string;
    m_redis_cache_connection_string_isSet = true;
}

bool OAIApiDeploymentParameterMetadataSet::is_redis_cache_connection_string_Set() const{
    return m_redis_cache_connection_string_isSet;
}

bool OAIApiDeploymentParameterMetadataSet::is_redis_cache_connection_string_Valid() const{
    return m_redis_cache_connection_string_isValid;
}

bool OAIApiDeploymentParameterMetadataSet::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_content_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_redis_cache_connection_string.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApiDeploymentParameterMetadataSet::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
