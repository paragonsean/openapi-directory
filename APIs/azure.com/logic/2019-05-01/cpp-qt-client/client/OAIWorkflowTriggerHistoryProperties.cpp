/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTriggerHistoryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTriggerHistoryProperties::OAIWorkflowTriggerHistoryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTriggerHistoryProperties::OAIWorkflowTriggerHistoryProperties() {
    this->initializeModel();
}

OAIWorkflowTriggerHistoryProperties::~OAIWorkflowTriggerHistoryProperties() {}

void OAIWorkflowTriggerHistoryProperties::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_correlation_isSet = false;
    m_correlation_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_fired_isSet = false;
    m_fired_isValid = false;

    m_inputs_link_isSet = false;
    m_inputs_link_isValid = false;

    m_outputs_link_isSet = false;
    m_outputs_link_isValid = false;

    m_run_isSet = false;
    m_run_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIWorkflowTriggerHistoryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTriggerHistoryProperties::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_correlation_isValid = ::OpenAPI::fromJsonValue(m_correlation, json[QString("correlation")]);
    m_correlation_isSet = !json[QString("correlation")].isNull() && m_correlation_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_fired_isValid = ::OpenAPI::fromJsonValue(m_fired, json[QString("fired")]);
    m_fired_isSet = !json[QString("fired")].isNull() && m_fired_isValid;

    m_inputs_link_isValid = ::OpenAPI::fromJsonValue(m_inputs_link, json[QString("inputsLink")]);
    m_inputs_link_isSet = !json[QString("inputsLink")].isNull() && m_inputs_link_isValid;

    m_outputs_link_isValid = ::OpenAPI::fromJsonValue(m_outputs_link, json[QString("outputsLink")]);
    m_outputs_link_isSet = !json[QString("outputsLink")].isNull() && m_outputs_link_isValid;

    m_run_isValid = ::OpenAPI::fromJsonValue(m_run, json[QString("run")]);
    m_run_isSet = !json[QString("run")].isNull() && m_run_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("trackingId")]);
    m_tracking_id_isSet = !json[QString("trackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIWorkflowTriggerHistoryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTriggerHistoryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_correlation.isSet()) {
        obj.insert(QString("correlation"), ::OpenAPI::toJsonValue(m_correlation));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_fired_isSet) {
        obj.insert(QString("fired"), ::OpenAPI::toJsonValue(m_fired));
    }
    if (m_inputs_link.isSet()) {
        obj.insert(QString("inputsLink"), ::OpenAPI::toJsonValue(m_inputs_link));
    }
    if (m_outputs_link.isSet()) {
        obj.insert(QString("outputsLink"), ::OpenAPI::toJsonValue(m_outputs_link));
    }
    if (m_run.isSet()) {
        obj.insert(QString("run"), ::OpenAPI::toJsonValue(m_run));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("trackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIWorkflowTriggerHistoryProperties::getCode() const {
    return m_code;
}
void OAIWorkflowTriggerHistoryProperties::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_code_Valid() const{
    return m_code_isValid;
}

OAICorrelation OAIWorkflowTriggerHistoryProperties::getCorrelation() const {
    return m_correlation;
}
void OAIWorkflowTriggerHistoryProperties::setCorrelation(const OAICorrelation &correlation) {
    m_correlation = correlation;
    m_correlation_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_correlation_Set() const{
    return m_correlation_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_correlation_Valid() const{
    return m_correlation_isValid;
}

QDateTime OAIWorkflowTriggerHistoryProperties::getEndTime() const {
    return m_end_time;
}
void OAIWorkflowTriggerHistoryProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIObject OAIWorkflowTriggerHistoryProperties::getError() const {
    return m_error;
}
void OAIWorkflowTriggerHistoryProperties::setError(const OAIObject &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_error_Valid() const{
    return m_error_isValid;
}

bool OAIWorkflowTriggerHistoryProperties::isFired() const {
    return m_fired;
}
void OAIWorkflowTriggerHistoryProperties::setFired(const bool &fired) {
    m_fired = fired;
    m_fired_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_fired_Set() const{
    return m_fired_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_fired_Valid() const{
    return m_fired_isValid;
}

OAIContentLink OAIWorkflowTriggerHistoryProperties::getInputsLink() const {
    return m_inputs_link;
}
void OAIWorkflowTriggerHistoryProperties::setInputsLink(const OAIContentLink &inputs_link) {
    m_inputs_link = inputs_link;
    m_inputs_link_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_inputs_link_Set() const{
    return m_inputs_link_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_inputs_link_Valid() const{
    return m_inputs_link_isValid;
}

OAIContentLink OAIWorkflowTriggerHistoryProperties::getOutputsLink() const {
    return m_outputs_link;
}
void OAIWorkflowTriggerHistoryProperties::setOutputsLink(const OAIContentLink &outputs_link) {
    m_outputs_link = outputs_link;
    m_outputs_link_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_outputs_link_Set() const{
    return m_outputs_link_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_outputs_link_Valid() const{
    return m_outputs_link_isValid;
}

OAIResourceReference OAIWorkflowTriggerHistoryProperties::getRun() const {
    return m_run;
}
void OAIWorkflowTriggerHistoryProperties::setRun(const OAIResourceReference &run) {
    m_run = run;
    m_run_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_run_Set() const{
    return m_run_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_run_Valid() const{
    return m_run_isValid;
}

QDateTime OAIWorkflowTriggerHistoryProperties::getStartTime() const {
    return m_start_time;
}
void OAIWorkflowTriggerHistoryProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIWorkflowStatus OAIWorkflowTriggerHistoryProperties::getStatus() const {
    return m_status;
}
void OAIWorkflowTriggerHistoryProperties::setStatus(const OAIWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIWorkflowTriggerHistoryProperties::getTrackingId() const {
    return m_tracking_id;
}
void OAIWorkflowTriggerHistoryProperties::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIWorkflowTriggerHistoryProperties::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIWorkflowTriggerHistoryProperties::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIWorkflowTriggerHistoryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_inputs_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_run.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTriggerHistoryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
