/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIX12AcknowledgementSettings.h
 *
 * The X12 agreement acknowledgement settings.
 */

#ifndef OAIX12AcknowledgementSettings_H
#define OAIX12AcknowledgementSettings_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIX12AcknowledgementSettings : public OAIObject {
public:
    OAIX12AcknowledgementSettings();
    OAIX12AcknowledgementSettings(QString json);
    ~OAIX12AcknowledgementSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getAcknowledgementControlNumberLowerBound() const;
    void setAcknowledgementControlNumberLowerBound(const qint32 &acknowledgement_control_number_lower_bound);
    bool is_acknowledgement_control_number_lower_bound_Set() const;
    bool is_acknowledgement_control_number_lower_bound_Valid() const;

    QString getAcknowledgementControlNumberPrefix() const;
    void setAcknowledgementControlNumberPrefix(const QString &acknowledgement_control_number_prefix);
    bool is_acknowledgement_control_number_prefix_Set() const;
    bool is_acknowledgement_control_number_prefix_Valid() const;

    QString getAcknowledgementControlNumberSuffix() const;
    void setAcknowledgementControlNumberSuffix(const QString &acknowledgement_control_number_suffix);
    bool is_acknowledgement_control_number_suffix_Set() const;
    bool is_acknowledgement_control_number_suffix_Valid() const;

    qint32 getAcknowledgementControlNumberUpperBound() const;
    void setAcknowledgementControlNumberUpperBound(const qint32 &acknowledgement_control_number_upper_bound);
    bool is_acknowledgement_control_number_upper_bound_Set() const;
    bool is_acknowledgement_control_number_upper_bound_Valid() const;

    bool isBatchFunctionalAcknowledgements() const;
    void setBatchFunctionalAcknowledgements(const bool &batch_functional_acknowledgements);
    bool is_batch_functional_acknowledgements_Set() const;
    bool is_batch_functional_acknowledgements_Valid() const;

    bool isBatchImplementationAcknowledgements() const;
    void setBatchImplementationAcknowledgements(const bool &batch_implementation_acknowledgements);
    bool is_batch_implementation_acknowledgements_Set() const;
    bool is_batch_implementation_acknowledgements_Valid() const;

    bool isBatchTechnicalAcknowledgements() const;
    void setBatchTechnicalAcknowledgements(const bool &batch_technical_acknowledgements);
    bool is_batch_technical_acknowledgements_Set() const;
    bool is_batch_technical_acknowledgements_Valid() const;

    QString getFunctionalAcknowledgementVersion() const;
    void setFunctionalAcknowledgementVersion(const QString &functional_acknowledgement_version);
    bool is_functional_acknowledgement_version_Set() const;
    bool is_functional_acknowledgement_version_Valid() const;

    QString getImplementationAcknowledgementVersion() const;
    void setImplementationAcknowledgementVersion(const QString &implementation_acknowledgement_version);
    bool is_implementation_acknowledgement_version_Set() const;
    bool is_implementation_acknowledgement_version_Valid() const;

    bool isNeedFunctionalAcknowledgement() const;
    void setNeedFunctionalAcknowledgement(const bool &need_functional_acknowledgement);
    bool is_need_functional_acknowledgement_Set() const;
    bool is_need_functional_acknowledgement_Valid() const;

    bool isNeedImplementationAcknowledgement() const;
    void setNeedImplementationAcknowledgement(const bool &need_implementation_acknowledgement);
    bool is_need_implementation_acknowledgement_Set() const;
    bool is_need_implementation_acknowledgement_Valid() const;

    bool isNeedLoopForValidMessages() const;
    void setNeedLoopForValidMessages(const bool &need_loop_for_valid_messages);
    bool is_need_loop_for_valid_messages_Set() const;
    bool is_need_loop_for_valid_messages_Valid() const;

    bool isNeedTechnicalAcknowledgement() const;
    void setNeedTechnicalAcknowledgement(const bool &need_technical_acknowledgement);
    bool is_need_technical_acknowledgement_Set() const;
    bool is_need_technical_acknowledgement_Valid() const;

    bool isRolloverAcknowledgementControlNumber() const;
    void setRolloverAcknowledgementControlNumber(const bool &rollover_acknowledgement_control_number);
    bool is_rollover_acknowledgement_control_number_Set() const;
    bool is_rollover_acknowledgement_control_number_Valid() const;

    bool isSendSynchronousAcknowledgement() const;
    void setSendSynchronousAcknowledgement(const bool &send_synchronous_acknowledgement);
    bool is_send_synchronous_acknowledgement_Set() const;
    bool is_send_synchronous_acknowledgement_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_acknowledgement_control_number_lower_bound;
    bool m_acknowledgement_control_number_lower_bound_isSet;
    bool m_acknowledgement_control_number_lower_bound_isValid;

    QString m_acknowledgement_control_number_prefix;
    bool m_acknowledgement_control_number_prefix_isSet;
    bool m_acknowledgement_control_number_prefix_isValid;

    QString m_acknowledgement_control_number_suffix;
    bool m_acknowledgement_control_number_suffix_isSet;
    bool m_acknowledgement_control_number_suffix_isValid;

    qint32 m_acknowledgement_control_number_upper_bound;
    bool m_acknowledgement_control_number_upper_bound_isSet;
    bool m_acknowledgement_control_number_upper_bound_isValid;

    bool m_batch_functional_acknowledgements;
    bool m_batch_functional_acknowledgements_isSet;
    bool m_batch_functional_acknowledgements_isValid;

    bool m_batch_implementation_acknowledgements;
    bool m_batch_implementation_acknowledgements_isSet;
    bool m_batch_implementation_acknowledgements_isValid;

    bool m_batch_technical_acknowledgements;
    bool m_batch_technical_acknowledgements_isSet;
    bool m_batch_technical_acknowledgements_isValid;

    QString m_functional_acknowledgement_version;
    bool m_functional_acknowledgement_version_isSet;
    bool m_functional_acknowledgement_version_isValid;

    QString m_implementation_acknowledgement_version;
    bool m_implementation_acknowledgement_version_isSet;
    bool m_implementation_acknowledgement_version_isValid;

    bool m_need_functional_acknowledgement;
    bool m_need_functional_acknowledgement_isSet;
    bool m_need_functional_acknowledgement_isValid;

    bool m_need_implementation_acknowledgement;
    bool m_need_implementation_acknowledgement_isSet;
    bool m_need_implementation_acknowledgement_isValid;

    bool m_need_loop_for_valid_messages;
    bool m_need_loop_for_valid_messages_isSet;
    bool m_need_loop_for_valid_messages_isValid;

    bool m_need_technical_acknowledgement;
    bool m_need_technical_acknowledgement_isSet;
    bool m_need_technical_acknowledgement_isValid;

    bool m_rollover_acknowledgement_control_number;
    bool m_rollover_acknowledgement_control_number_isSet;
    bool m_rollover_acknowledgement_control_number_isValid;

    bool m_send_synchronous_acknowledgement;
    bool m_send_synchronous_acknowledgement_isSet;
    bool m_send_synchronous_acknowledgement_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIX12AcknowledgementSettings)

#endif // OAIX12AcknowledgementSettings_H
