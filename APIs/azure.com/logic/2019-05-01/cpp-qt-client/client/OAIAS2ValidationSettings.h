/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIAS2ValidationSettings.h
 *
 * The AS2 agreement validation settings.
 */

#ifndef OAIAS2ValidationSettings_H
#define OAIAS2ValidationSettings_H

#include <QJsonObject>

#include "OAIEncryptionAlgorithm.h"
#include "OAISigningAlgorithm.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIAS2ValidationSettings : public OAIObject {
public:
    OAIAS2ValidationSettings();
    OAIAS2ValidationSettings(QString json);
    ~OAIAS2ValidationSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    bool isCheckCertificateRevocationListOnReceive() const;
    void setCheckCertificateRevocationListOnReceive(const bool &check_certificate_revocation_list_on_receive);
    bool is_check_certificate_revocation_list_on_receive_Set() const;
    bool is_check_certificate_revocation_list_on_receive_Valid() const;

    bool isCheckCertificateRevocationListOnSend() const;
    void setCheckCertificateRevocationListOnSend(const bool &check_certificate_revocation_list_on_send);
    bool is_check_certificate_revocation_list_on_send_Set() const;
    bool is_check_certificate_revocation_list_on_send_Valid() const;

    bool isCheckDuplicateMessage() const;
    void setCheckDuplicateMessage(const bool &check_duplicate_message);
    bool is_check_duplicate_message_Set() const;
    bool is_check_duplicate_message_Valid() const;

    bool isCompressMessage() const;
    void setCompressMessage(const bool &compress_message);
    bool is_compress_message_Set() const;
    bool is_compress_message_Valid() const;

    bool isEncryptMessage() const;
    void setEncryptMessage(const bool &encrypt_message);
    bool is_encrypt_message_Set() const;
    bool is_encrypt_message_Valid() const;

    OAIEncryptionAlgorithm getEncryptionAlgorithm() const;
    void setEncryptionAlgorithm(const OAIEncryptionAlgorithm &encryption_algorithm);
    bool is_encryption_algorithm_Set() const;
    bool is_encryption_algorithm_Valid() const;

    qint32 getInterchangeDuplicatesValidityDays() const;
    void setInterchangeDuplicatesValidityDays(const qint32 &interchange_duplicates_validity_days);
    bool is_interchange_duplicates_validity_days_Set() const;
    bool is_interchange_duplicates_validity_days_Valid() const;

    bool isOverrideMessageProperties() const;
    void setOverrideMessageProperties(const bool &override_message_properties);
    bool is_override_message_properties_Set() const;
    bool is_override_message_properties_Valid() const;

    bool isSignMessage() const;
    void setSignMessage(const bool &sign_message);
    bool is_sign_message_Set() const;
    bool is_sign_message_Valid() const;

    OAISigningAlgorithm getSigningAlgorithm() const;
    void setSigningAlgorithm(const OAISigningAlgorithm &signing_algorithm);
    bool is_signing_algorithm_Set() const;
    bool is_signing_algorithm_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    bool m_check_certificate_revocation_list_on_receive;
    bool m_check_certificate_revocation_list_on_receive_isSet;
    bool m_check_certificate_revocation_list_on_receive_isValid;

    bool m_check_certificate_revocation_list_on_send;
    bool m_check_certificate_revocation_list_on_send_isSet;
    bool m_check_certificate_revocation_list_on_send_isValid;

    bool m_check_duplicate_message;
    bool m_check_duplicate_message_isSet;
    bool m_check_duplicate_message_isValid;

    bool m_compress_message;
    bool m_compress_message_isSet;
    bool m_compress_message_isValid;

    bool m_encrypt_message;
    bool m_encrypt_message_isSet;
    bool m_encrypt_message_isValid;

    OAIEncryptionAlgorithm m_encryption_algorithm;
    bool m_encryption_algorithm_isSet;
    bool m_encryption_algorithm_isValid;

    qint32 m_interchange_duplicates_validity_days;
    bool m_interchange_duplicates_validity_days_isSet;
    bool m_interchange_duplicates_validity_days_isValid;

    bool m_override_message_properties;
    bool m_override_message_properties_isSet;
    bool m_override_message_properties_isValid;

    bool m_sign_message;
    bool m_sign_message_isSet;
    bool m_sign_message_isValid;

    OAISigningAlgorithm m_signing_algorithm;
    bool m_signing_algorithm_isSet;
    bool m_signing_algorithm_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIAS2ValidationSettings)

#endif // OAIAS2ValidationSettings_H
