/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12AgreementContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12AgreementContent::OAIX12AgreementContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12AgreementContent::OAIX12AgreementContent() {
    this->initializeModel();
}

OAIX12AgreementContent::~OAIX12AgreementContent() {}

void OAIX12AgreementContent::initializeModel() {

    m_receive_agreement_isSet = false;
    m_receive_agreement_isValid = false;

    m_send_agreement_isSet = false;
    m_send_agreement_isValid = false;
}

void OAIX12AgreementContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12AgreementContent::fromJsonObject(QJsonObject json) {

    m_receive_agreement_isValid = ::OpenAPI::fromJsonValue(m_receive_agreement, json[QString("receiveAgreement")]);
    m_receive_agreement_isSet = !json[QString("receiveAgreement")].isNull() && m_receive_agreement_isValid;

    m_send_agreement_isValid = ::OpenAPI::fromJsonValue(m_send_agreement, json[QString("sendAgreement")]);
    m_send_agreement_isSet = !json[QString("sendAgreement")].isNull() && m_send_agreement_isValid;
}

QString OAIX12AgreementContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12AgreementContent::asJsonObject() const {
    QJsonObject obj;
    if (m_receive_agreement.isSet()) {
        obj.insert(QString("receiveAgreement"), ::OpenAPI::toJsonValue(m_receive_agreement));
    }
    if (m_send_agreement.isSet()) {
        obj.insert(QString("sendAgreement"), ::OpenAPI::toJsonValue(m_send_agreement));
    }
    return obj;
}

OAIX12OneWayAgreement OAIX12AgreementContent::getReceiveAgreement() const {
    return m_receive_agreement;
}
void OAIX12AgreementContent::setReceiveAgreement(const OAIX12OneWayAgreement &receive_agreement) {
    m_receive_agreement = receive_agreement;
    m_receive_agreement_isSet = true;
}

bool OAIX12AgreementContent::is_receive_agreement_Set() const{
    return m_receive_agreement_isSet;
}

bool OAIX12AgreementContent::is_receive_agreement_Valid() const{
    return m_receive_agreement_isValid;
}

OAIX12OneWayAgreement OAIX12AgreementContent::getSendAgreement() const {
    return m_send_agreement;
}
void OAIX12AgreementContent::setSendAgreement(const OAIX12OneWayAgreement &send_agreement) {
    m_send_agreement = send_agreement;
    m_send_agreement_isSet = true;
}

bool OAIX12AgreementContent::is_send_agreement_Set() const{
    return m_send_agreement_isSet;
}

bool OAIX12AgreementContent::is_send_agreement_Valid() const{
    return m_send_agreement_isValid;
}

bool OAIX12AgreementContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_receive_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_send_agreement.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12AgreementContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_receive_agreement_isValid && m_send_agreement_isValid && true;
}

} // namespace OpenAPI
