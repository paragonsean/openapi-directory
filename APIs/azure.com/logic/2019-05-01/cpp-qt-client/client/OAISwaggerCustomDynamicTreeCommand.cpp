/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerCustomDynamicTreeCommand.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerCustomDynamicTreeCommand::OAISwaggerCustomDynamicTreeCommand(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerCustomDynamicTreeCommand::OAISwaggerCustomDynamicTreeCommand() {
    this->initializeModel();
}

OAISwaggerCustomDynamicTreeCommand::~OAISwaggerCustomDynamicTreeCommand() {}

void OAISwaggerCustomDynamicTreeCommand::initializeModel() {

    m_item_full_title_path_isSet = false;
    m_item_full_title_path_isValid = false;

    m_item_is_parent_isSet = false;
    m_item_is_parent_isValid = false;

    m_item_title_path_isSet = false;
    m_item_title_path_isValid = false;

    m_item_value_path_isSet = false;
    m_item_value_path_isValid = false;

    m_items_path_isSet = false;
    m_items_path_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_selectable_filter_isSet = false;
    m_selectable_filter_isValid = false;
}

void OAISwaggerCustomDynamicTreeCommand::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerCustomDynamicTreeCommand::fromJsonObject(QJsonObject json) {

    m_item_full_title_path_isValid = ::OpenAPI::fromJsonValue(m_item_full_title_path, json[QString("itemFullTitlePath")]);
    m_item_full_title_path_isSet = !json[QString("itemFullTitlePath")].isNull() && m_item_full_title_path_isValid;

    m_item_is_parent_isValid = ::OpenAPI::fromJsonValue(m_item_is_parent, json[QString("itemIsParent")]);
    m_item_is_parent_isSet = !json[QString("itemIsParent")].isNull() && m_item_is_parent_isValid;

    m_item_title_path_isValid = ::OpenAPI::fromJsonValue(m_item_title_path, json[QString("itemTitlePath")]);
    m_item_title_path_isSet = !json[QString("itemTitlePath")].isNull() && m_item_title_path_isValid;

    m_item_value_path_isValid = ::OpenAPI::fromJsonValue(m_item_value_path, json[QString("itemValuePath")]);
    m_item_value_path_isSet = !json[QString("itemValuePath")].isNull() && m_item_value_path_isValid;

    m_items_path_isValid = ::OpenAPI::fromJsonValue(m_items_path, json[QString("itemsPath")]);
    m_items_path_isSet = !json[QString("itemsPath")].isNull() && m_items_path_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_selectable_filter_isValid = ::OpenAPI::fromJsonValue(m_selectable_filter, json[QString("selectableFilter")]);
    m_selectable_filter_isSet = !json[QString("selectableFilter")].isNull() && m_selectable_filter_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerCustomDynamicTreeCommand::asJsonObject() const {
    QJsonObject obj;
    if (m_item_full_title_path_isSet) {
        obj.insert(QString("itemFullTitlePath"), ::OpenAPI::toJsonValue(m_item_full_title_path));
    }
    if (m_item_is_parent_isSet) {
        obj.insert(QString("itemIsParent"), ::OpenAPI::toJsonValue(m_item_is_parent));
    }
    if (m_item_title_path_isSet) {
        obj.insert(QString("itemTitlePath"), ::OpenAPI::toJsonValue(m_item_title_path));
    }
    if (m_item_value_path_isSet) {
        obj.insert(QString("itemValuePath"), ::OpenAPI::toJsonValue(m_item_value_path));
    }
    if (m_items_path_isSet) {
        obj.insert(QString("itemsPath"), ::OpenAPI::toJsonValue(m_items_path));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_selectable_filter_isSet) {
        obj.insert(QString("selectableFilter"), ::OpenAPI::toJsonValue(m_selectable_filter));
    }
    return obj;
}

QString OAISwaggerCustomDynamicTreeCommand::getItemFullTitlePath() const {
    return m_item_full_title_path;
}
void OAISwaggerCustomDynamicTreeCommand::setItemFullTitlePath(const QString &item_full_title_path) {
    m_item_full_title_path = item_full_title_path;
    m_item_full_title_path_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_full_title_path_Set() const{
    return m_item_full_title_path_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_full_title_path_Valid() const{
    return m_item_full_title_path_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::getItemIsParent() const {
    return m_item_is_parent;
}
void OAISwaggerCustomDynamicTreeCommand::setItemIsParent(const QString &item_is_parent) {
    m_item_is_parent = item_is_parent;
    m_item_is_parent_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_is_parent_Set() const{
    return m_item_is_parent_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_is_parent_Valid() const{
    return m_item_is_parent_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::getItemTitlePath() const {
    return m_item_title_path;
}
void OAISwaggerCustomDynamicTreeCommand::setItemTitlePath(const QString &item_title_path) {
    m_item_title_path = item_title_path;
    m_item_title_path_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_title_path_Set() const{
    return m_item_title_path_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_title_path_Valid() const{
    return m_item_title_path_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::getItemValuePath() const {
    return m_item_value_path;
}
void OAISwaggerCustomDynamicTreeCommand::setItemValuePath(const QString &item_value_path) {
    m_item_value_path = item_value_path;
    m_item_value_path_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_value_path_Set() const{
    return m_item_value_path_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_item_value_path_Valid() const{
    return m_item_value_path_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::getItemsPath() const {
    return m_items_path;
}
void OAISwaggerCustomDynamicTreeCommand::setItemsPath(const QString &items_path) {
    m_items_path = items_path;
    m_items_path_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_items_path_Set() const{
    return m_items_path_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_items_path_Valid() const{
    return m_items_path_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::getOperationId() const {
    return m_operation_id;
}
void OAISwaggerCustomDynamicTreeCommand::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

QMap<QString, OAISwaggerCustomDynamicTreeParameter> OAISwaggerCustomDynamicTreeCommand::getParameters() const {
    return m_parameters;
}
void OAISwaggerCustomDynamicTreeCommand::setParameters(const QMap<QString, OAISwaggerCustomDynamicTreeParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAISwaggerCustomDynamicTreeCommand::getSelectableFilter() const {
    return m_selectable_filter;
}
void OAISwaggerCustomDynamicTreeCommand::setSelectableFilter(const QString &selectable_filter) {
    m_selectable_filter = selectable_filter;
    m_selectable_filter_isSet = true;
}

bool OAISwaggerCustomDynamicTreeCommand::is_selectable_filter_Set() const{
    return m_selectable_filter_isSet;
}

bool OAISwaggerCustomDynamicTreeCommand::is_selectable_filter_Valid() const{
    return m_selectable_filter_isValid;
}

bool OAISwaggerCustomDynamicTreeCommand::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_full_title_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_is_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_title_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_item_value_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_selectable_filter_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerCustomDynamicTreeCommand::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
