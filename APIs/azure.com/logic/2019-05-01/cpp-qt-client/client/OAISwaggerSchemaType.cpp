/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerSchemaType.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerSchemaType::OAISwaggerSchemaType(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerSchemaType::OAISwaggerSchemaType() {
    this->initializeModel();
}

OAISwaggerSchemaType::~OAISwaggerSchemaType() {}

void OAISwaggerSchemaType::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISwaggerSchemaType::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISwaggerSchemaType::fromJson(QString jsonString) {
    
    if ( jsonString.compare("String", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::STRING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Number", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::NUMBER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Integer", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::INTEGER;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Boolean", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::BOOLEAN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Array", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::ARRAY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("File", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::FILE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Object", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::OBJECT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Null", Qt::CaseInsensitive) == 0) {
        m_value = eOAISwaggerSchemaType::r_NULL;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISwaggerSchemaType::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISwaggerSchemaType::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISwaggerSchemaType::STRING:
            val = "String";
            break;
        case eOAISwaggerSchemaType::NUMBER:
            val = "Number";
            break;
        case eOAISwaggerSchemaType::INTEGER:
            val = "Integer";
            break;
        case eOAISwaggerSchemaType::BOOLEAN:
            val = "Boolean";
            break;
        case eOAISwaggerSchemaType::ARRAY:
            val = "Array";
            break;
        case eOAISwaggerSchemaType::FILE:
            val = "File";
            break;
        case eOAISwaggerSchemaType::OBJECT:
            val = "Object";
            break;
        case eOAISwaggerSchemaType::r_NULL:
            val = "Null";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISwaggerSchemaType::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISwaggerSchemaType::eOAISwaggerSchemaType OAISwaggerSchemaType::getValue() const {
    return m_value;
}

void OAISwaggerSchemaType::setValue(const OAISwaggerSchemaType::eOAISwaggerSchemaType& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISwaggerSchemaType::isSet() const {
    
    return m_value_isSet;
}

bool OAISwaggerSchemaType::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
