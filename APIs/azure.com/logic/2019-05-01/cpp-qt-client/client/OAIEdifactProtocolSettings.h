/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEdifactProtocolSettings.h
 *
 * The Edifact agreement protocol settings.
 */

#ifndef OAIEdifactProtocolSettings_H
#define OAIEdifactProtocolSettings_H

#include <QJsonObject>

#include "OAIEdifactAcknowledgementSettings.h"
#include "OAIEdifactDelimiterOverride.h"
#include "OAIEdifactEnvelopeOverride.h"
#include "OAIEdifactEnvelopeSettings.h"
#include "OAIEdifactFramingSettings.h"
#include "OAIEdifactMessageFilter.h"
#include "OAIEdifactMessageIdentifier.h"
#include "OAIEdifactProcessingSettings.h"
#include "OAIEdifactSchemaReference.h"
#include "OAIEdifactValidationOverride.h"
#include "OAIEdifactValidationSettings.h"
#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIEdifactAcknowledgementSettings;
class OAIEdifactDelimiterOverride;
class OAIEdifactEnvelopeOverride;
class OAIEdifactEnvelopeSettings;
class OAIEdifactFramingSettings;
class OAIEdifactMessageFilter;
class OAIEdifactMessageIdentifier;
class OAIEdifactProcessingSettings;
class OAIEdifactSchemaReference;
class OAIEdifactValidationOverride;
class OAIEdifactValidationSettings;

class OAIEdifactProtocolSettings : public OAIObject {
public:
    OAIEdifactProtocolSettings();
    OAIEdifactProtocolSettings(QString json);
    ~OAIEdifactProtocolSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIEdifactAcknowledgementSettings getAcknowledgementSettings() const;
    void setAcknowledgementSettings(const OAIEdifactAcknowledgementSettings &acknowledgement_settings);
    bool is_acknowledgement_settings_Set() const;
    bool is_acknowledgement_settings_Valid() const;

    QList<OAIEdifactDelimiterOverride> getEdifactDelimiterOverrides() const;
    void setEdifactDelimiterOverrides(const QList<OAIEdifactDelimiterOverride> &edifact_delimiter_overrides);
    bool is_edifact_delimiter_overrides_Set() const;
    bool is_edifact_delimiter_overrides_Valid() const;

    QList<OAIEdifactEnvelopeOverride> getEnvelopeOverrides() const;
    void setEnvelopeOverrides(const QList<OAIEdifactEnvelopeOverride> &envelope_overrides);
    bool is_envelope_overrides_Set() const;
    bool is_envelope_overrides_Valid() const;

    OAIEdifactEnvelopeSettings getEnvelopeSettings() const;
    void setEnvelopeSettings(const OAIEdifactEnvelopeSettings &envelope_settings);
    bool is_envelope_settings_Set() const;
    bool is_envelope_settings_Valid() const;

    OAIEdifactFramingSettings getFramingSettings() const;
    void setFramingSettings(const OAIEdifactFramingSettings &framing_settings);
    bool is_framing_settings_Set() const;
    bool is_framing_settings_Valid() const;

    OAIEdifactMessageFilter getMessageFilter() const;
    void setMessageFilter(const OAIEdifactMessageFilter &message_filter);
    bool is_message_filter_Set() const;
    bool is_message_filter_Valid() const;

    QList<OAIEdifactMessageIdentifier> getMessageFilterList() const;
    void setMessageFilterList(const QList<OAIEdifactMessageIdentifier> &message_filter_list);
    bool is_message_filter_list_Set() const;
    bool is_message_filter_list_Valid() const;

    OAIEdifactProcessingSettings getProcessingSettings() const;
    void setProcessingSettings(const OAIEdifactProcessingSettings &processing_settings);
    bool is_processing_settings_Set() const;
    bool is_processing_settings_Valid() const;

    QList<OAIEdifactSchemaReference> getSchemaReferences() const;
    void setSchemaReferences(const QList<OAIEdifactSchemaReference> &schema_references);
    bool is_schema_references_Set() const;
    bool is_schema_references_Valid() const;

    QList<OAIEdifactValidationOverride> getValidationOverrides() const;
    void setValidationOverrides(const QList<OAIEdifactValidationOverride> &validation_overrides);
    bool is_validation_overrides_Set() const;
    bool is_validation_overrides_Valid() const;

    OAIEdifactValidationSettings getValidationSettings() const;
    void setValidationSettings(const OAIEdifactValidationSettings &validation_settings);
    bool is_validation_settings_Set() const;
    bool is_validation_settings_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIEdifactAcknowledgementSettings m_acknowledgement_settings;
    bool m_acknowledgement_settings_isSet;
    bool m_acknowledgement_settings_isValid;

    QList<OAIEdifactDelimiterOverride> m_edifact_delimiter_overrides;
    bool m_edifact_delimiter_overrides_isSet;
    bool m_edifact_delimiter_overrides_isValid;

    QList<OAIEdifactEnvelopeOverride> m_envelope_overrides;
    bool m_envelope_overrides_isSet;
    bool m_envelope_overrides_isValid;

    OAIEdifactEnvelopeSettings m_envelope_settings;
    bool m_envelope_settings_isSet;
    bool m_envelope_settings_isValid;

    OAIEdifactFramingSettings m_framing_settings;
    bool m_framing_settings_isSet;
    bool m_framing_settings_isValid;

    OAIEdifactMessageFilter m_message_filter;
    bool m_message_filter_isSet;
    bool m_message_filter_isValid;

    QList<OAIEdifactMessageIdentifier> m_message_filter_list;
    bool m_message_filter_list_isSet;
    bool m_message_filter_list_isValid;

    OAIEdifactProcessingSettings m_processing_settings;
    bool m_processing_settings_isSet;
    bool m_processing_settings_isValid;

    QList<OAIEdifactSchemaReference> m_schema_references;
    bool m_schema_references_isSet;
    bool m_schema_references_isValid;

    QList<OAIEdifactValidationOverride> m_validation_overrides;
    bool m_validation_overrides_isSet;
    bool m_validation_overrides_isValid;

    OAIEdifactValidationSettings m_validation_settings;
    bool m_validation_settings_isSet;
    bool m_validation_settings_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEdifactProtocolSettings)

#endif // OAIEdifactProtocolSettings_H
