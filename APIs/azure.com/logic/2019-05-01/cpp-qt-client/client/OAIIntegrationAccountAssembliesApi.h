/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationAccountAssembliesApi_H
#define OAI_OAIIntegrationAccountAssembliesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAssemblyCollection.h"
#include "OAIAssemblyDefinition.h"
#include "OAIErrorResponse.h"
#include "OAIWorkflowTriggerCallbackUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationAccountAssembliesApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationAccountAssembliesApi(const int timeOut = 0);
    ~OAIIntegrationAccountAssembliesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  assembly_artifact_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  assembly_artifact OAIAssemblyDefinition [required]
    */
    virtual void integrationAccountAssembliesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &assembly_artifact_name, const QString &api_version, const OAIAssemblyDefinition &assembly_artifact);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  assembly_artifact_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountAssembliesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &assembly_artifact_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  assembly_artifact_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountAssembliesGet(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &assembly_artifact_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountAssembliesList(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  assembly_artifact_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void integrationAccountAssembliesListContentCallbackUrl(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &assembly_artifact_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void integrationAccountAssembliesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void integrationAccountAssembliesDeleteCallback(OAIHttpRequestWorker *worker);
    void integrationAccountAssembliesGetCallback(OAIHttpRequestWorker *worker);
    void integrationAccountAssembliesListCallback(OAIHttpRequestWorker *worker);
    void integrationAccountAssembliesListContentCallbackUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void integrationAccountAssembliesCreateOrUpdateSignal(OAIAssemblyDefinition summary);
    void integrationAccountAssembliesDeleteSignal();
    void integrationAccountAssembliesGetSignal(OAIAssemblyDefinition summary);
    void integrationAccountAssembliesListSignal(OAIAssemblyCollection summary);
    void integrationAccountAssembliesListContentCallbackUrlSignal(OAIWorkflowTriggerCallbackUrl summary);


    void integrationAccountAssembliesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAssemblyDefinition summary);
    void integrationAccountAssembliesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void integrationAccountAssembliesGetSignalFull(OAIHttpRequestWorker *worker, OAIAssemblyDefinition summary);
    void integrationAccountAssembliesListSignalFull(OAIHttpRequestWorker *worker, OAIAssemblyCollection summary);
    void integrationAccountAssembliesListContentCallbackUrlSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowTriggerCallbackUrl summary);

    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesCreateOrUpdateSignalError() instead")
    void integrationAccountAssembliesCreateOrUpdateSignalE(OAIAssemblyDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesCreateOrUpdateSignalError(OAIAssemblyDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesDeleteSignalError() instead")
    void integrationAccountAssembliesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesGetSignalError() instead")
    void integrationAccountAssembliesGetSignalE(OAIAssemblyDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesGetSignalError(OAIAssemblyDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesListSignalError() instead")
    void integrationAccountAssembliesListSignalE(OAIAssemblyCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesListSignalError(OAIAssemblyCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesListContentCallbackUrlSignalError() instead")
    void integrationAccountAssembliesListContentCallbackUrlSignalE(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesListContentCallbackUrlSignalError(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesCreateOrUpdateSignalErrorFull() instead")
    void integrationAccountAssembliesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesDeleteSignalErrorFull() instead")
    void integrationAccountAssembliesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesGetSignalErrorFull() instead")
    void integrationAccountAssembliesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesListSignalErrorFull() instead")
    void integrationAccountAssembliesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use integrationAccountAssembliesListContentCallbackUrlSignalErrorFull() instead")
    void integrationAccountAssembliesListContentCallbackUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void integrationAccountAssembliesListContentCallbackUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
