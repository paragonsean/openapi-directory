/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISwaggerSchema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISwaggerSchema::OAISwaggerSchema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISwaggerSchema::OAISwaggerSchema() {
    this->initializeModel();
}

OAISwaggerSchema::~OAISwaggerSchema() {}

void OAISwaggerSchema::initializeModel() {

    m_additional_properties_isSet = false;
    m_additional_properties_isValid = false;

    m_all_of_isSet = false;
    m_all_of_isValid = false;

    m_discriminator_isSet = false;
    m_discriminator_isValid = false;

    m_dynamic_list_new_isSet = false;
    m_dynamic_list_new_isValid = false;

    m_dynamic_schema_new_isSet = false;
    m_dynamic_schema_new_isValid = false;

    m_dynamic_schema_old_isSet = false;
    m_dynamic_schema_old_isValid = false;

    m_dynamic_tree_isSet = false;
    m_dynamic_tree_isValid = false;

    m_example_isSet = false;
    m_example_isValid = false;

    m_external_docs_isSet = false;
    m_external_docs_isValid = false;

    m_items_isSet = false;
    m_items_isValid = false;

    m_max_properties_isSet = false;
    m_max_properties_isValid = false;

    m_min_properties_isSet = false;
    m_min_properties_isValid = false;

    m_notification_url_extension_isSet = false;
    m_notification_url_extension_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_read_only_isSet = false;
    m_read_only_isValid = false;

    m_ref_isSet = false;
    m_ref_isValid = false;

    m_required_isSet = false;
    m_required_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_xml_isSet = false;
    m_xml_isValid = false;
}

void OAISwaggerSchema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISwaggerSchema::fromJsonObject(QJsonObject json) {

    m_additional_properties_isValid = ::OpenAPI::fromJsonValue(m_additional_properties, json[QString("additionalProperties")]);
    m_additional_properties_isSet = !json[QString("additionalProperties")].isNull() && m_additional_properties_isValid;

    m_all_of_isValid = ::OpenAPI::fromJsonValue(m_all_of, json[QString("allOf")]);
    m_all_of_isSet = !json[QString("allOf")].isNull() && m_all_of_isValid;

    m_discriminator_isValid = ::OpenAPI::fromJsonValue(m_discriminator, json[QString("discriminator")]);
    m_discriminator_isSet = !json[QString("discriminator")].isNull() && m_discriminator_isValid;

    m_dynamic_list_new_isValid = ::OpenAPI::fromJsonValue(m_dynamic_list_new, json[QString("dynamicListNew")]);
    m_dynamic_list_new_isSet = !json[QString("dynamicListNew")].isNull() && m_dynamic_list_new_isValid;

    m_dynamic_schema_new_isValid = ::OpenAPI::fromJsonValue(m_dynamic_schema_new, json[QString("dynamicSchemaNew")]);
    m_dynamic_schema_new_isSet = !json[QString("dynamicSchemaNew")].isNull() && m_dynamic_schema_new_isValid;

    m_dynamic_schema_old_isValid = ::OpenAPI::fromJsonValue(m_dynamic_schema_old, json[QString("dynamicSchemaOld")]);
    m_dynamic_schema_old_isSet = !json[QString("dynamicSchemaOld")].isNull() && m_dynamic_schema_old_isValid;

    m_dynamic_tree_isValid = ::OpenAPI::fromJsonValue(m_dynamic_tree, json[QString("dynamicTree")]);
    m_dynamic_tree_isSet = !json[QString("dynamicTree")].isNull() && m_dynamic_tree_isValid;

    m_example_isValid = ::OpenAPI::fromJsonValue(m_example, json[QString("example")]);
    m_example_isSet = !json[QString("example")].isNull() && m_example_isValid;

    m_external_docs_isValid = ::OpenAPI::fromJsonValue(m_external_docs, json[QString("externalDocs")]);
    m_external_docs_isSet = !json[QString("externalDocs")].isNull() && m_external_docs_isValid;

    m_items_isValid = ::OpenAPI::fromJsonValue(m_items, json[QString("items")]);
    m_items_isSet = !json[QString("items")].isNull() && m_items_isValid;

    m_max_properties_isValid = ::OpenAPI::fromJsonValue(m_max_properties, json[QString("maxProperties")]);
    m_max_properties_isSet = !json[QString("maxProperties")].isNull() && m_max_properties_isValid;

    m_min_properties_isValid = ::OpenAPI::fromJsonValue(m_min_properties, json[QString("minProperties")]);
    m_min_properties_isSet = !json[QString("minProperties")].isNull() && m_min_properties_isValid;

    m_notification_url_extension_isValid = ::OpenAPI::fromJsonValue(m_notification_url_extension, json[QString("notificationUrlExtension")]);
    m_notification_url_extension_isSet = !json[QString("notificationUrlExtension")].isNull() && m_notification_url_extension_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_read_only_isValid = ::OpenAPI::fromJsonValue(m_read_only, json[QString("readOnly")]);
    m_read_only_isSet = !json[QString("readOnly")].isNull() && m_read_only_isValid;

    m_ref_isValid = ::OpenAPI::fromJsonValue(m_ref, json[QString("ref")]);
    m_ref_isSet = !json[QString("ref")].isNull() && m_ref_isValid;

    m_required_isValid = ::OpenAPI::fromJsonValue(m_required, json[QString("required")]);
    m_required_isSet = !json[QString("required")].isNull() && m_required_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_xml_isValid = ::OpenAPI::fromJsonValue(m_xml, json[QString("xml")]);
    m_xml_isSet = !json[QString("xml")].isNull() && m_xml_isValid;
}

QString OAISwaggerSchema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISwaggerSchema::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_properties_isSet) {
        obj.insert(QString("additionalProperties"), ::OpenAPI::toJsonValue(m_additional_properties));
    }
    if (m_all_of.size() > 0) {
        obj.insert(QString("allOf"), ::OpenAPI::toJsonValue(m_all_of));
    }
    if (m_discriminator_isSet) {
        obj.insert(QString("discriminator"), ::OpenAPI::toJsonValue(m_discriminator));
    }
    if (m_dynamic_list_new.isSet()) {
        obj.insert(QString("dynamicListNew"), ::OpenAPI::toJsonValue(m_dynamic_list_new));
    }
    if (m_dynamic_schema_new.isSet()) {
        obj.insert(QString("dynamicSchemaNew"), ::OpenAPI::toJsonValue(m_dynamic_schema_new));
    }
    if (m_dynamic_schema_old.isSet()) {
        obj.insert(QString("dynamicSchemaOld"), ::OpenAPI::toJsonValue(m_dynamic_schema_old));
    }
    if (m_dynamic_tree.isSet()) {
        obj.insert(QString("dynamicTree"), ::OpenAPI::toJsonValue(m_dynamic_tree));
    }
    if (m_example_isSet) {
        obj.insert(QString("example"), ::OpenAPI::toJsonValue(m_example));
    }
    if (m_external_docs.isSet()) {
        obj.insert(QString("externalDocs"), ::OpenAPI::toJsonValue(m_external_docs));
    }
    if (m_items.isSet()) {
        obj.insert(QString("items"), ::OpenAPI::toJsonValue(m_items));
    }
    if (m_max_properties_isSet) {
        obj.insert(QString("maxProperties"), ::OpenAPI::toJsonValue(m_max_properties));
    }
    if (m_min_properties_isSet) {
        obj.insert(QString("minProperties"), ::OpenAPI::toJsonValue(m_min_properties));
    }
    if (m_notification_url_extension_isSet) {
        obj.insert(QString("notificationUrlExtension"), ::OpenAPI::toJsonValue(m_notification_url_extension));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_read_only_isSet) {
        obj.insert(QString("readOnly"), ::OpenAPI::toJsonValue(m_read_only));
    }
    if (m_ref_isSet) {
        obj.insert(QString("ref"), ::OpenAPI::toJsonValue(m_ref));
    }
    if (m_required.size() > 0) {
        obj.insert(QString("required"), ::OpenAPI::toJsonValue(m_required));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_type.isSet()) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_xml.isSet()) {
        obj.insert(QString("xml"), ::OpenAPI::toJsonValue(m_xml));
    }
    return obj;
}

OAIObject OAISwaggerSchema::getAdditionalProperties() const {
    return m_additional_properties;
}
void OAISwaggerSchema::setAdditionalProperties(const OAIObject &additional_properties) {
    m_additional_properties = additional_properties;
    m_additional_properties_isSet = true;
}

bool OAISwaggerSchema::is_additional_properties_Set() const{
    return m_additional_properties_isSet;
}

bool OAISwaggerSchema::is_additional_properties_Valid() const{
    return m_additional_properties_isValid;
}

QList<OAISwaggerSchema> OAISwaggerSchema::getAllOf() const {
    return m_all_of;
}
void OAISwaggerSchema::setAllOf(const QList<OAISwaggerSchema> &all_of) {
    m_all_of = all_of;
    m_all_of_isSet = true;
}

bool OAISwaggerSchema::is_all_of_Set() const{
    return m_all_of_isSet;
}

bool OAISwaggerSchema::is_all_of_Valid() const{
    return m_all_of_isValid;
}

QString OAISwaggerSchema::getDiscriminator() const {
    return m_discriminator;
}
void OAISwaggerSchema::setDiscriminator(const QString &discriminator) {
    m_discriminator = discriminator;
    m_discriminator_isSet = true;
}

bool OAISwaggerSchema::is_discriminator_Set() const{
    return m_discriminator_isSet;
}

bool OAISwaggerSchema::is_discriminator_Valid() const{
    return m_discriminator_isValid;
}

OAISwaggerCustomDynamicList OAISwaggerSchema::getDynamicListNew() const {
    return m_dynamic_list_new;
}
void OAISwaggerSchema::setDynamicListNew(const OAISwaggerCustomDynamicList &dynamic_list_new) {
    m_dynamic_list_new = dynamic_list_new;
    m_dynamic_list_new_isSet = true;
}

bool OAISwaggerSchema::is_dynamic_list_new_Set() const{
    return m_dynamic_list_new_isSet;
}

bool OAISwaggerSchema::is_dynamic_list_new_Valid() const{
    return m_dynamic_list_new_isValid;
}

OAISwaggerCustomDynamicProperties OAISwaggerSchema::getDynamicSchemaNew() const {
    return m_dynamic_schema_new;
}
void OAISwaggerSchema::setDynamicSchemaNew(const OAISwaggerCustomDynamicProperties &dynamic_schema_new) {
    m_dynamic_schema_new = dynamic_schema_new;
    m_dynamic_schema_new_isSet = true;
}

bool OAISwaggerSchema::is_dynamic_schema_new_Set() const{
    return m_dynamic_schema_new_isSet;
}

bool OAISwaggerSchema::is_dynamic_schema_new_Valid() const{
    return m_dynamic_schema_new_isValid;
}

OAISwaggerCustomDynamicSchema OAISwaggerSchema::getDynamicSchemaOld() const {
    return m_dynamic_schema_old;
}
void OAISwaggerSchema::setDynamicSchemaOld(const OAISwaggerCustomDynamicSchema &dynamic_schema_old) {
    m_dynamic_schema_old = dynamic_schema_old;
    m_dynamic_schema_old_isSet = true;
}

bool OAISwaggerSchema::is_dynamic_schema_old_Set() const{
    return m_dynamic_schema_old_isSet;
}

bool OAISwaggerSchema::is_dynamic_schema_old_Valid() const{
    return m_dynamic_schema_old_isValid;
}

OAISwaggerCustomDynamicTree OAISwaggerSchema::getDynamicTree() const {
    return m_dynamic_tree;
}
void OAISwaggerSchema::setDynamicTree(const OAISwaggerCustomDynamicTree &dynamic_tree) {
    m_dynamic_tree = dynamic_tree;
    m_dynamic_tree_isSet = true;
}

bool OAISwaggerSchema::is_dynamic_tree_Set() const{
    return m_dynamic_tree_isSet;
}

bool OAISwaggerSchema::is_dynamic_tree_Valid() const{
    return m_dynamic_tree_isValid;
}

OAIObject OAISwaggerSchema::getExample() const {
    return m_example;
}
void OAISwaggerSchema::setExample(const OAIObject &example) {
    m_example = example;
    m_example_isSet = true;
}

bool OAISwaggerSchema::is_example_Set() const{
    return m_example_isSet;
}

bool OAISwaggerSchema::is_example_Valid() const{
    return m_example_isValid;
}

OAISwaggerExternalDocumentation OAISwaggerSchema::getExternalDocs() const {
    return m_external_docs;
}
void OAISwaggerSchema::setExternalDocs(const OAISwaggerExternalDocumentation &external_docs) {
    m_external_docs = external_docs;
    m_external_docs_isSet = true;
}

bool OAISwaggerSchema::is_external_docs_Set() const{
    return m_external_docs_isSet;
}

bool OAISwaggerSchema::is_external_docs_Valid() const{
    return m_external_docs_isValid;
}

OAISwaggerSchema OAISwaggerSchema::getItems() const {
    return m_items;
}
void OAISwaggerSchema::setItems(const OAISwaggerSchema &items) {
    m_items = items;
    m_items_isSet = true;
}

bool OAISwaggerSchema::is_items_Set() const{
    return m_items_isSet;
}

bool OAISwaggerSchema::is_items_Valid() const{
    return m_items_isValid;
}

qint32 OAISwaggerSchema::getMaxProperties() const {
    return m_max_properties;
}
void OAISwaggerSchema::setMaxProperties(const qint32 &max_properties) {
    m_max_properties = max_properties;
    m_max_properties_isSet = true;
}

bool OAISwaggerSchema::is_max_properties_Set() const{
    return m_max_properties_isSet;
}

bool OAISwaggerSchema::is_max_properties_Valid() const{
    return m_max_properties_isValid;
}

qint32 OAISwaggerSchema::getMinProperties() const {
    return m_min_properties;
}
void OAISwaggerSchema::setMinProperties(const qint32 &min_properties) {
    m_min_properties = min_properties;
    m_min_properties_isSet = true;
}

bool OAISwaggerSchema::is_min_properties_Set() const{
    return m_min_properties_isSet;
}

bool OAISwaggerSchema::is_min_properties_Valid() const{
    return m_min_properties_isValid;
}

bool OAISwaggerSchema::isNotificationUrlExtension() const {
    return m_notification_url_extension;
}
void OAISwaggerSchema::setNotificationUrlExtension(const bool &notification_url_extension) {
    m_notification_url_extension = notification_url_extension;
    m_notification_url_extension_isSet = true;
}

bool OAISwaggerSchema::is_notification_url_extension_Set() const{
    return m_notification_url_extension_isSet;
}

bool OAISwaggerSchema::is_notification_url_extension_Valid() const{
    return m_notification_url_extension_isValid;
}

QMap<QString, OAISwaggerSchema> OAISwaggerSchema::getProperties() const {
    return m_properties;
}
void OAISwaggerSchema::setProperties(const QMap<QString, OAISwaggerSchema> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAISwaggerSchema::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAISwaggerSchema::is_properties_Valid() const{
    return m_properties_isValid;
}

bool OAISwaggerSchema::isReadOnly() const {
    return m_read_only;
}
void OAISwaggerSchema::setReadOnly(const bool &read_only) {
    m_read_only = read_only;
    m_read_only_isSet = true;
}

bool OAISwaggerSchema::is_read_only_Set() const{
    return m_read_only_isSet;
}

bool OAISwaggerSchema::is_read_only_Valid() const{
    return m_read_only_isValid;
}

QString OAISwaggerSchema::getRef() const {
    return m_ref;
}
void OAISwaggerSchema::setRef(const QString &ref) {
    m_ref = ref;
    m_ref_isSet = true;
}

bool OAISwaggerSchema::is_ref_Set() const{
    return m_ref_isSet;
}

bool OAISwaggerSchema::is_ref_Valid() const{
    return m_ref_isValid;
}

QList<QString> OAISwaggerSchema::getRequired() const {
    return m_required;
}
void OAISwaggerSchema::setRequired(const QList<QString> &required) {
    m_required = required;
    m_required_isSet = true;
}

bool OAISwaggerSchema::is_required_Set() const{
    return m_required_isSet;
}

bool OAISwaggerSchema::is_required_Valid() const{
    return m_required_isValid;
}

QString OAISwaggerSchema::getTitle() const {
    return m_title;
}
void OAISwaggerSchema::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISwaggerSchema::is_title_Set() const{
    return m_title_isSet;
}

bool OAISwaggerSchema::is_title_Valid() const{
    return m_title_isValid;
}

OAISwaggerSchemaType OAISwaggerSchema::getType() const {
    return m_type;
}
void OAISwaggerSchema::setType(const OAISwaggerSchemaType &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAISwaggerSchema::is_type_Set() const{
    return m_type_isSet;
}

bool OAISwaggerSchema::is_type_Valid() const{
    return m_type_isValid;
}

OAISwaggerXml OAISwaggerSchema::getXml() const {
    return m_xml;
}
void OAISwaggerSchema::setXml(const OAISwaggerXml &xml) {
    m_xml = xml;
    m_xml_isSet = true;
}

bool OAISwaggerSchema::is_xml_Set() const{
    return m_xml_isSet;
}

bool OAISwaggerSchema::is_xml_Valid() const{
    return m_xml_isValid;
}

bool OAISwaggerSchema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_all_of.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_discriminator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_list_new.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_schema_new.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_schema_old.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_dynamic_tree.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_example_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_docs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_items.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notification_url_extension_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_read_only_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ref_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_required.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_xml.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISwaggerSchema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
