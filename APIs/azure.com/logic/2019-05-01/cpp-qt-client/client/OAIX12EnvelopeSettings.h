/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIX12EnvelopeSettings.h
 *
 * The X12 agreement envelope settings.
 */

#ifndef OAIX12EnvelopeSettings_H
#define OAIX12EnvelopeSettings_H

#include <QJsonObject>

#include "OAIUsageIndicator.h"
#include "OAIX12DateFormat.h"
#include "OAIX12TimeFormat.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIX12EnvelopeSettings : public OAIObject {
public:
    OAIX12EnvelopeSettings();
    OAIX12EnvelopeSettings(QString json);
    ~OAIX12EnvelopeSettings() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getControlStandardsId() const;
    void setControlStandardsId(const qint32 &control_standards_id);
    bool is_control_standards_id_Set() const;
    bool is_control_standards_id_Valid() const;

    QString getControlVersionNumber() const;
    void setControlVersionNumber(const QString &control_version_number);
    bool is_control_version_number_Set() const;
    bool is_control_version_number_Valid() const;

    bool isEnableDefaultGroupHeaders() const;
    void setEnableDefaultGroupHeaders(const bool &enable_default_group_headers);
    bool is_enable_default_group_headers_Set() const;
    bool is_enable_default_group_headers_Valid() const;

    QString getFunctionalGroupId() const;
    void setFunctionalGroupId(const QString &functional_group_id);
    bool is_functional_group_id_Set() const;
    bool is_functional_group_id_Valid() const;

    qint32 getGroupControlNumberLowerBound() const;
    void setGroupControlNumberLowerBound(const qint32 &group_control_number_lower_bound);
    bool is_group_control_number_lower_bound_Set() const;
    bool is_group_control_number_lower_bound_Valid() const;

    qint32 getGroupControlNumberUpperBound() const;
    void setGroupControlNumberUpperBound(const qint32 &group_control_number_upper_bound);
    bool is_group_control_number_upper_bound_Set() const;
    bool is_group_control_number_upper_bound_Valid() const;

    QString getGroupHeaderAgencyCode() const;
    void setGroupHeaderAgencyCode(const QString &group_header_agency_code);
    bool is_group_header_agency_code_Set() const;
    bool is_group_header_agency_code_Valid() const;

    OAIX12DateFormat getGroupHeaderDateFormat() const;
    void setGroupHeaderDateFormat(const OAIX12DateFormat &group_header_date_format);
    bool is_group_header_date_format_Set() const;
    bool is_group_header_date_format_Valid() const;

    OAIX12TimeFormat getGroupHeaderTimeFormat() const;
    void setGroupHeaderTimeFormat(const OAIX12TimeFormat &group_header_time_format);
    bool is_group_header_time_format_Set() const;
    bool is_group_header_time_format_Valid() const;

    QString getGroupHeaderVersion() const;
    void setGroupHeaderVersion(const QString &group_header_version);
    bool is_group_header_version_Set() const;
    bool is_group_header_version_Valid() const;

    qint32 getInterchangeControlNumberLowerBound() const;
    void setInterchangeControlNumberLowerBound(const qint32 &interchange_control_number_lower_bound);
    bool is_interchange_control_number_lower_bound_Set() const;
    bool is_interchange_control_number_lower_bound_Valid() const;

    qint32 getInterchangeControlNumberUpperBound() const;
    void setInterchangeControlNumberUpperBound(const qint32 &interchange_control_number_upper_bound);
    bool is_interchange_control_number_upper_bound_Set() const;
    bool is_interchange_control_number_upper_bound_Valid() const;

    bool isOverwriteExistingTransactionSetControlNumber() const;
    void setOverwriteExistingTransactionSetControlNumber(const bool &overwrite_existing_transaction_set_control_number);
    bool is_overwrite_existing_transaction_set_control_number_Set() const;
    bool is_overwrite_existing_transaction_set_control_number_Valid() const;

    QString getReceiverApplicationId() const;
    void setReceiverApplicationId(const QString &receiver_application_id);
    bool is_receiver_application_id_Set() const;
    bool is_receiver_application_id_Valid() const;

    bool isRolloverGroupControlNumber() const;
    void setRolloverGroupControlNumber(const bool &rollover_group_control_number);
    bool is_rollover_group_control_number_Set() const;
    bool is_rollover_group_control_number_Valid() const;

    bool isRolloverInterchangeControlNumber() const;
    void setRolloverInterchangeControlNumber(const bool &rollover_interchange_control_number);
    bool is_rollover_interchange_control_number_Set() const;
    bool is_rollover_interchange_control_number_Valid() const;

    bool isRolloverTransactionSetControlNumber() const;
    void setRolloverTransactionSetControlNumber(const bool &rollover_transaction_set_control_number);
    bool is_rollover_transaction_set_control_number_Set() const;
    bool is_rollover_transaction_set_control_number_Valid() const;

    QString getSenderApplicationId() const;
    void setSenderApplicationId(const QString &sender_application_id);
    bool is_sender_application_id_Set() const;
    bool is_sender_application_id_Valid() const;

    qint32 getTransactionSetControlNumberLowerBound() const;
    void setTransactionSetControlNumberLowerBound(const qint32 &transaction_set_control_number_lower_bound);
    bool is_transaction_set_control_number_lower_bound_Set() const;
    bool is_transaction_set_control_number_lower_bound_Valid() const;

    QString getTransactionSetControlNumberPrefix() const;
    void setTransactionSetControlNumberPrefix(const QString &transaction_set_control_number_prefix);
    bool is_transaction_set_control_number_prefix_Set() const;
    bool is_transaction_set_control_number_prefix_Valid() const;

    QString getTransactionSetControlNumberSuffix() const;
    void setTransactionSetControlNumberSuffix(const QString &transaction_set_control_number_suffix);
    bool is_transaction_set_control_number_suffix_Set() const;
    bool is_transaction_set_control_number_suffix_Valid() const;

    qint32 getTransactionSetControlNumberUpperBound() const;
    void setTransactionSetControlNumberUpperBound(const qint32 &transaction_set_control_number_upper_bound);
    bool is_transaction_set_control_number_upper_bound_Set() const;
    bool is_transaction_set_control_number_upper_bound_Valid() const;

    OAIUsageIndicator getUsageIndicator() const;
    void setUsageIndicator(const OAIUsageIndicator &usage_indicator);
    bool is_usage_indicator_Set() const;
    bool is_usage_indicator_Valid() const;

    bool isUseControlStandardsIdAsRepetitionCharacter() const;
    void setUseControlStandardsIdAsRepetitionCharacter(const bool &use_control_standards_id_as_repetition_character);
    bool is_use_control_standards_id_as_repetition_character_Set() const;
    bool is_use_control_standards_id_as_repetition_character_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_control_standards_id;
    bool m_control_standards_id_isSet;
    bool m_control_standards_id_isValid;

    QString m_control_version_number;
    bool m_control_version_number_isSet;
    bool m_control_version_number_isValid;

    bool m_enable_default_group_headers;
    bool m_enable_default_group_headers_isSet;
    bool m_enable_default_group_headers_isValid;

    QString m_functional_group_id;
    bool m_functional_group_id_isSet;
    bool m_functional_group_id_isValid;

    qint32 m_group_control_number_lower_bound;
    bool m_group_control_number_lower_bound_isSet;
    bool m_group_control_number_lower_bound_isValid;

    qint32 m_group_control_number_upper_bound;
    bool m_group_control_number_upper_bound_isSet;
    bool m_group_control_number_upper_bound_isValid;

    QString m_group_header_agency_code;
    bool m_group_header_agency_code_isSet;
    bool m_group_header_agency_code_isValid;

    OAIX12DateFormat m_group_header_date_format;
    bool m_group_header_date_format_isSet;
    bool m_group_header_date_format_isValid;

    OAIX12TimeFormat m_group_header_time_format;
    bool m_group_header_time_format_isSet;
    bool m_group_header_time_format_isValid;

    QString m_group_header_version;
    bool m_group_header_version_isSet;
    bool m_group_header_version_isValid;

    qint32 m_interchange_control_number_lower_bound;
    bool m_interchange_control_number_lower_bound_isSet;
    bool m_interchange_control_number_lower_bound_isValid;

    qint32 m_interchange_control_number_upper_bound;
    bool m_interchange_control_number_upper_bound_isSet;
    bool m_interchange_control_number_upper_bound_isValid;

    bool m_overwrite_existing_transaction_set_control_number;
    bool m_overwrite_existing_transaction_set_control_number_isSet;
    bool m_overwrite_existing_transaction_set_control_number_isValid;

    QString m_receiver_application_id;
    bool m_receiver_application_id_isSet;
    bool m_receiver_application_id_isValid;

    bool m_rollover_group_control_number;
    bool m_rollover_group_control_number_isSet;
    bool m_rollover_group_control_number_isValid;

    bool m_rollover_interchange_control_number;
    bool m_rollover_interchange_control_number_isSet;
    bool m_rollover_interchange_control_number_isValid;

    bool m_rollover_transaction_set_control_number;
    bool m_rollover_transaction_set_control_number_isSet;
    bool m_rollover_transaction_set_control_number_isValid;

    QString m_sender_application_id;
    bool m_sender_application_id_isSet;
    bool m_sender_application_id_isValid;

    qint32 m_transaction_set_control_number_lower_bound;
    bool m_transaction_set_control_number_lower_bound_isSet;
    bool m_transaction_set_control_number_lower_bound_isValid;

    QString m_transaction_set_control_number_prefix;
    bool m_transaction_set_control_number_prefix_isSet;
    bool m_transaction_set_control_number_prefix_isValid;

    QString m_transaction_set_control_number_suffix;
    bool m_transaction_set_control_number_suffix_isSet;
    bool m_transaction_set_control_number_suffix_isValid;

    qint32 m_transaction_set_control_number_upper_bound;
    bool m_transaction_set_control_number_upper_bound_isSet;
    bool m_transaction_set_control_number_upper_bound_isValid;

    OAIUsageIndicator m_usage_indicator;
    bool m_usage_indicator_isSet;
    bool m_usage_indicator_isValid;

    bool m_use_control_standards_id_as_repetition_character;
    bool m_use_control_standards_id_as_repetition_character_isSet;
    bool m_use_control_standards_id_as_repetition_character_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIX12EnvelopeSettings)

#endif // OAIX12EnvelopeSettings_H
