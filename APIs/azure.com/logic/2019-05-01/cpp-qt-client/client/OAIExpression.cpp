/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpression.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpression::OAIExpression(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpression::OAIExpression() {
    this->initializeModel();
}

OAIExpression::~OAIExpression() {}

void OAIExpression::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_subexpressions_isSet = false;
    m_subexpressions_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIExpression::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpression::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_subexpressions_isValid = ::OpenAPI::fromJsonValue(m_subexpressions, json[QString("subexpressions")]);
    m_subexpressions_isSet = !json[QString("subexpressions")].isNull() && m_subexpressions_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIExpression::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpression::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_subexpressions.size() > 0) {
        obj.insert(QString("subexpressions"), ::OpenAPI::toJsonValue(m_subexpressions));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

OAIAzureResourceErrorInfo OAIExpression::getError() const {
    return m_error;
}
void OAIExpression::setError(const OAIAzureResourceErrorInfo &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIExpression::is_error_Set() const{
    return m_error_isSet;
}

bool OAIExpression::is_error_Valid() const{
    return m_error_isValid;
}

QList<OAIExpression> OAIExpression::getSubexpressions() const {
    return m_subexpressions;
}
void OAIExpression::setSubexpressions(const QList<OAIExpression> &subexpressions) {
    m_subexpressions = subexpressions;
    m_subexpressions_isSet = true;
}

bool OAIExpression::is_subexpressions_Set() const{
    return m_subexpressions_isSet;
}

bool OAIExpression::is_subexpressions_Valid() const{
    return m_subexpressions_isValid;
}

QString OAIExpression::getText() const {
    return m_text;
}
void OAIExpression::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIExpression::is_text_Set() const{
    return m_text_isSet;
}

bool OAIExpression::is_text_Valid() const{
    return m_text_isValid;
}

OAIObject OAIExpression::getValue() const {
    return m_value;
}
void OAIExpression::setValue(const OAIObject &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIExpression::is_value_Set() const{
    return m_value_isSet;
}

bool OAIExpression::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIExpression::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subexpressions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpression::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
