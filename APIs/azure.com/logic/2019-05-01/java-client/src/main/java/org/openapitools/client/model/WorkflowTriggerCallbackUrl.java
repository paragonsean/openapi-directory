/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.WorkflowTriggerListCallbackUrlQueries;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The workflow trigger callback URL.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowTriggerCallbackUrl {
  public static final String SERIALIZED_NAME_BASE_PATH = "basePath";
  @SerializedName(SERIALIZED_NAME_BASE_PATH)
  private String basePath;

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private String method;

  public static final String SERIALIZED_NAME_QUERIES = "queries";
  @SerializedName(SERIALIZED_NAME_QUERIES)
  private WorkflowTriggerListCallbackUrlQueries queries;

  public static final String SERIALIZED_NAME_RELATIVE_PATH = "relativePath";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PATH)
  private String relativePath;

  public static final String SERIALIZED_NAME_RELATIVE_PATH_PARAMETERS = "relativePathParameters";
  @SerializedName(SERIALIZED_NAME_RELATIVE_PATH_PARAMETERS)
  private List<String> relativePathParameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public WorkflowTriggerCallbackUrl() {
  }

  public WorkflowTriggerCallbackUrl(
     String basePath, 
     String method, 
     String relativePath, 
     String value
  ) {
    this();
    this.basePath = basePath;
    this.method = method;
    this.relativePath = relativePath;
    this.value = value;
  }

  /**
   * Gets the workflow trigger callback URL base path.
   * @return basePath
   */
  @javax.annotation.Nullable
  public String getBasePath() {
    return basePath;
  }



  /**
   * Gets the workflow trigger callback URL HTTP method.
   * @return method
   */
  @javax.annotation.Nullable
  public String getMethod() {
    return method;
  }



  public WorkflowTriggerCallbackUrl queries(WorkflowTriggerListCallbackUrlQueries queries) {
    this.queries = queries;
    return this;
  }

  /**
   * Get queries
   * @return queries
   */
  @javax.annotation.Nullable
  public WorkflowTriggerListCallbackUrlQueries getQueries() {
    return queries;
  }

  public void setQueries(WorkflowTriggerListCallbackUrlQueries queries) {
    this.queries = queries;
  }


  /**
   * Gets the workflow trigger callback URL relative path.
   * @return relativePath
   */
  @javax.annotation.Nullable
  public String getRelativePath() {
    return relativePath;
  }



  public WorkflowTriggerCallbackUrl relativePathParameters(List<String> relativePathParameters) {
    this.relativePathParameters = relativePathParameters;
    return this;
  }

  public WorkflowTriggerCallbackUrl addRelativePathParametersItem(String relativePathParametersItem) {
    if (this.relativePathParameters == null) {
      this.relativePathParameters = new ArrayList<>();
    }
    this.relativePathParameters.add(relativePathParametersItem);
    return this;
  }

  /**
   * Gets the workflow trigger callback URL relative path parameters.
   * @return relativePathParameters
   */
  @javax.annotation.Nullable
  public List<String> getRelativePathParameters() {
    return relativePathParameters;
  }

  public void setRelativePathParameters(List<String> relativePathParameters) {
    this.relativePathParameters = relativePathParameters;
  }


  /**
   * Gets the workflow trigger callback URL.
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowTriggerCallbackUrl workflowTriggerCallbackUrl = (WorkflowTriggerCallbackUrl) o;
    return Objects.equals(this.basePath, workflowTriggerCallbackUrl.basePath) &&
        Objects.equals(this.method, workflowTriggerCallbackUrl.method) &&
        Objects.equals(this.queries, workflowTriggerCallbackUrl.queries) &&
        Objects.equals(this.relativePath, workflowTriggerCallbackUrl.relativePath) &&
        Objects.equals(this.relativePathParameters, workflowTriggerCallbackUrl.relativePathParameters) &&
        Objects.equals(this.value, workflowTriggerCallbackUrl.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(basePath, method, queries, relativePath, relativePathParameters, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowTriggerCallbackUrl {\n");
    sb.append("    basePath: ").append(toIndentedString(basePath)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    queries: ").append(toIndentedString(queries)).append("\n");
    sb.append("    relativePath: ").append(toIndentedString(relativePath)).append("\n");
    sb.append("    relativePathParameters: ").append(toIndentedString(relativePathParameters)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("basePath");
    openapiFields.add("method");
    openapiFields.add("queries");
    openapiFields.add("relativePath");
    openapiFields.add("relativePathParameters");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowTriggerCallbackUrl
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowTriggerCallbackUrl.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowTriggerCallbackUrl is not found in the empty JSON string", WorkflowTriggerCallbackUrl.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowTriggerCallbackUrl.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowTriggerCallbackUrl` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("basePath") != null && !jsonObj.get("basePath").isJsonNull()) && !jsonObj.get("basePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `basePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("basePath").toString()));
      }
      if ((jsonObj.get("method") != null && !jsonObj.get("method").isJsonNull()) && !jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the optional field `queries`
      if (jsonObj.get("queries") != null && !jsonObj.get("queries").isJsonNull()) {
        WorkflowTriggerListCallbackUrlQueries.validateJsonElement(jsonObj.get("queries"));
      }
      if ((jsonObj.get("relativePath") != null && !jsonObj.get("relativePath").isJsonNull()) && !jsonObj.get("relativePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("relativePath").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("relativePathParameters") != null && !jsonObj.get("relativePathParameters").isJsonNull() && !jsonObj.get("relativePathParameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `relativePathParameters` to be an array in the JSON string but got `%s`", jsonObj.get("relativePathParameters").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowTriggerCallbackUrl.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowTriggerCallbackUrl' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowTriggerCallbackUrl> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowTriggerCallbackUrl.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowTriggerCallbackUrl>() {
           @Override
           public void write(JsonWriter out, WorkflowTriggerCallbackUrl value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowTriggerCallbackUrl read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowTriggerCallbackUrl given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowTriggerCallbackUrl
   * @throws IOException if the JSON string is invalid with respect to WorkflowTriggerCallbackUrl
   */
  public static WorkflowTriggerCallbackUrl fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowTriggerCallbackUrl.class);
  }

  /**
   * Convert an instance of WorkflowTriggerCallbackUrl to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

