/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.SwaggerCustomDynamicList;
import org.openapitools.client.model.SwaggerCustomDynamicProperties;
import org.openapitools.client.model.SwaggerCustomDynamicSchema;
import org.openapitools.client.model.SwaggerCustomDynamicTree;
import org.openapitools.client.model.SwaggerExternalDocumentation;
import org.openapitools.client.model.SwaggerSchemaType;
import org.openapitools.client.model.SwaggerXml;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The swagger schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SwaggerSchema {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private Object additionalProperties;

  public static final String SERIALIZED_NAME_ALL_OF = "allOf";
  @SerializedName(SERIALIZED_NAME_ALL_OF)
  private List<SwaggerSchema> allOf = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISCRIMINATOR = "discriminator";
  @SerializedName(SERIALIZED_NAME_DISCRIMINATOR)
  private String discriminator;

  public static final String SERIALIZED_NAME_DYNAMIC_LIST_NEW = "dynamicListNew";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_LIST_NEW)
  private SwaggerCustomDynamicList dynamicListNew;

  public static final String SERIALIZED_NAME_DYNAMIC_SCHEMA_NEW = "dynamicSchemaNew";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SCHEMA_NEW)
  private SwaggerCustomDynamicProperties dynamicSchemaNew;

  public static final String SERIALIZED_NAME_DYNAMIC_SCHEMA_OLD = "dynamicSchemaOld";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_SCHEMA_OLD)
  private SwaggerCustomDynamicSchema dynamicSchemaOld;

  public static final String SERIALIZED_NAME_DYNAMIC_TREE = "dynamicTree";
  @SerializedName(SERIALIZED_NAME_DYNAMIC_TREE)
  private SwaggerCustomDynamicTree dynamicTree;

  public static final String SERIALIZED_NAME_EXAMPLE = "example";
  @SerializedName(SERIALIZED_NAME_EXAMPLE)
  private Object example;

  public static final String SERIALIZED_NAME_EXTERNAL_DOCS = "externalDocs";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_DOCS)
  private SwaggerExternalDocumentation externalDocs;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  private SwaggerSchema items;

  public static final String SERIALIZED_NAME_MAX_PROPERTIES = "maxProperties";
  @SerializedName(SERIALIZED_NAME_MAX_PROPERTIES)
  private Integer maxProperties;

  public static final String SERIALIZED_NAME_MIN_PROPERTIES = "minProperties";
  @SerializedName(SERIALIZED_NAME_MIN_PROPERTIES)
  private Integer minProperties;

  public static final String SERIALIZED_NAME_NOTIFICATION_URL_EXTENSION = "notificationUrlExtension";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_URL_EXTENSION)
  private Boolean notificationUrlExtension;

  public static final String SERIALIZED_NAME_PROPERTIES = "properties";
  @SerializedName(SERIALIZED_NAME_PROPERTIES)
  private Map<String, SwaggerSchema> properties = new HashMap<>();

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_REF = "ref";
  @SerializedName(SERIALIZED_NAME_REF)
  private String ref;

  public static final String SERIALIZED_NAME_REQUIRED = "required";
  @SerializedName(SERIALIZED_NAME_REQUIRED)
  private List<String> required = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private SwaggerSchemaType type;

  public static final String SERIALIZED_NAME_XML = "xml";
  @SerializedName(SERIALIZED_NAME_XML)
  private SwaggerXml xml;

  public SwaggerSchema() {
  }

  public SwaggerSchema additionalProperties(Object additionalProperties) {
    this.additionalProperties = additionalProperties;
    return this;
  }

  /**
   * Get additionalProperties
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public Object getAdditionalProperties() {
    return additionalProperties;
  }

  public void setAdditionalProperties(Object additionalProperties) {
    this.additionalProperties = additionalProperties;
  }


  public SwaggerSchema allOf(List<SwaggerSchema> allOf) {
    this.allOf = allOf;
    return this;
  }

  public SwaggerSchema addAllOfItem(SwaggerSchema allOfItem) {
    if (this.allOf == null) {
      this.allOf = new ArrayList<>();
    }
    this.allOf.add(allOfItem);
    return this;
  }

  /**
   * The schemas which must pass validation when this schema is used.
   * @return allOf
   */
  @javax.annotation.Nullable
  public List<SwaggerSchema> getAllOf() {
    return allOf;
  }

  public void setAllOf(List<SwaggerSchema> allOf) {
    this.allOf = allOf;
  }


  public SwaggerSchema discriminator(String discriminator) {
    this.discriminator = discriminator;
    return this;
  }

  /**
   * The discriminator.
   * @return discriminator
   */
  @javax.annotation.Nullable
  public String getDiscriminator() {
    return discriminator;
  }

  public void setDiscriminator(String discriminator) {
    this.discriminator = discriminator;
  }


  public SwaggerSchema dynamicListNew(SwaggerCustomDynamicList dynamicListNew) {
    this.dynamicListNew = dynamicListNew;
    return this;
  }

  /**
   * Get dynamicListNew
   * @return dynamicListNew
   */
  @javax.annotation.Nullable
  public SwaggerCustomDynamicList getDynamicListNew() {
    return dynamicListNew;
  }

  public void setDynamicListNew(SwaggerCustomDynamicList dynamicListNew) {
    this.dynamicListNew = dynamicListNew;
  }


  public SwaggerSchema dynamicSchemaNew(SwaggerCustomDynamicProperties dynamicSchemaNew) {
    this.dynamicSchemaNew = dynamicSchemaNew;
    return this;
  }

  /**
   * Get dynamicSchemaNew
   * @return dynamicSchemaNew
   */
  @javax.annotation.Nullable
  public SwaggerCustomDynamicProperties getDynamicSchemaNew() {
    return dynamicSchemaNew;
  }

  public void setDynamicSchemaNew(SwaggerCustomDynamicProperties dynamicSchemaNew) {
    this.dynamicSchemaNew = dynamicSchemaNew;
  }


  public SwaggerSchema dynamicSchemaOld(SwaggerCustomDynamicSchema dynamicSchemaOld) {
    this.dynamicSchemaOld = dynamicSchemaOld;
    return this;
  }

  /**
   * Get dynamicSchemaOld
   * @return dynamicSchemaOld
   */
  @javax.annotation.Nullable
  public SwaggerCustomDynamicSchema getDynamicSchemaOld() {
    return dynamicSchemaOld;
  }

  public void setDynamicSchemaOld(SwaggerCustomDynamicSchema dynamicSchemaOld) {
    this.dynamicSchemaOld = dynamicSchemaOld;
  }


  public SwaggerSchema dynamicTree(SwaggerCustomDynamicTree dynamicTree) {
    this.dynamicTree = dynamicTree;
    return this;
  }

  /**
   * Get dynamicTree
   * @return dynamicTree
   */
  @javax.annotation.Nullable
  public SwaggerCustomDynamicTree getDynamicTree() {
    return dynamicTree;
  }

  public void setDynamicTree(SwaggerCustomDynamicTree dynamicTree) {
    this.dynamicTree = dynamicTree;
  }


  public SwaggerSchema example(Object example) {
    this.example = example;
    return this;
  }

  /**
   * Get example
   * @return example
   */
  @javax.annotation.Nullable
  public Object getExample() {
    return example;
  }

  public void setExample(Object example) {
    this.example = example;
  }


  public SwaggerSchema externalDocs(SwaggerExternalDocumentation externalDocs) {
    this.externalDocs = externalDocs;
    return this;
  }

  /**
   * Get externalDocs
   * @return externalDocs
   */
  @javax.annotation.Nullable
  public SwaggerExternalDocumentation getExternalDocs() {
    return externalDocs;
  }

  public void setExternalDocs(SwaggerExternalDocumentation externalDocs) {
    this.externalDocs = externalDocs;
  }


  public SwaggerSchema items(SwaggerSchema items) {
    this.items = items;
    return this;
  }

  /**
   * Get items
   * @return items
   */
  @javax.annotation.Nullable
  public SwaggerSchema getItems() {
    return items;
  }

  public void setItems(SwaggerSchema items) {
    this.items = items;
  }


  public SwaggerSchema maxProperties(Integer maxProperties) {
    this.maxProperties = maxProperties;
    return this;
  }

  /**
   * The maximum number of allowed properties.
   * @return maxProperties
   */
  @javax.annotation.Nullable
  public Integer getMaxProperties() {
    return maxProperties;
  }

  public void setMaxProperties(Integer maxProperties) {
    this.maxProperties = maxProperties;
  }


  public SwaggerSchema minProperties(Integer minProperties) {
    this.minProperties = minProperties;
    return this;
  }

  /**
   * The minimum number of allowed properties.
   * @return minProperties
   */
  @javax.annotation.Nullable
  public Integer getMinProperties() {
    return minProperties;
  }

  public void setMinProperties(Integer minProperties) {
    this.minProperties = minProperties;
  }


  public SwaggerSchema notificationUrlExtension(Boolean notificationUrlExtension) {
    this.notificationUrlExtension = notificationUrlExtension;
    return this;
  }

  /**
   * Indicates the notification url extension. If this is set, the property&#39;s value should be a callback url for a webhook.
   * @return notificationUrlExtension
   */
  @javax.annotation.Nullable
  public Boolean getNotificationUrlExtension() {
    return notificationUrlExtension;
  }

  public void setNotificationUrlExtension(Boolean notificationUrlExtension) {
    this.notificationUrlExtension = notificationUrlExtension;
  }


  public SwaggerSchema properties(Map<String, SwaggerSchema> properties) {
    this.properties = properties;
    return this;
  }

  public SwaggerSchema putPropertiesItem(String key, SwaggerSchema propertiesItem) {
    if (this.properties == null) {
      this.properties = new HashMap<>();
    }
    this.properties.put(key, propertiesItem);
    return this;
  }

  /**
   * The object properties
   * @return properties
   */
  @javax.annotation.Nullable
  public Map<String, SwaggerSchema> getProperties() {
    return properties;
  }

  public void setProperties(Map<String, SwaggerSchema> properties) {
    this.properties = properties;
  }


  public SwaggerSchema readOnly(Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Indicates whether this property must be present in the a request.
   * @return readOnly
   */
  @javax.annotation.Nullable
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public SwaggerSchema ref(String ref) {
    this.ref = ref;
    return this;
  }

  /**
   * The reference.
   * @return ref
   */
  @javax.annotation.Nullable
  public String getRef() {
    return ref;
  }

  public void setRef(String ref) {
    this.ref = ref;
  }


  public SwaggerSchema required(List<String> required) {
    this.required = required;
    return this;
  }

  public SwaggerSchema addRequiredItem(String requiredItem) {
    if (this.required == null) {
      this.required = new ArrayList<>();
    }
    this.required.add(requiredItem);
    return this;
  }

  /**
   * The object required properties.
   * @return required
   */
  @javax.annotation.Nullable
  public List<String> getRequired() {
    return required;
  }

  public void setRequired(List<String> required) {
    this.required = required;
  }


  public SwaggerSchema title(String title) {
    this.title = title;
    return this;
  }

  /**
   * The title.
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SwaggerSchema type(SwaggerSchemaType type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public SwaggerSchemaType getType() {
    return type;
  }

  public void setType(SwaggerSchemaType type) {
    this.type = type;
  }


  public SwaggerSchema xml(SwaggerXml xml) {
    this.xml = xml;
    return this;
  }

  /**
   * Get xml
   * @return xml
   */
  @javax.annotation.Nullable
  public SwaggerXml getXml() {
    return xml;
  }

  public void setXml(SwaggerXml xml) {
    this.xml = xml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SwaggerSchema swaggerSchema = (SwaggerSchema) o;
    return Objects.equals(this.additionalProperties, swaggerSchema.additionalProperties) &&
        Objects.equals(this.allOf, swaggerSchema.allOf) &&
        Objects.equals(this.discriminator, swaggerSchema.discriminator) &&
        Objects.equals(this.dynamicListNew, swaggerSchema.dynamicListNew) &&
        Objects.equals(this.dynamicSchemaNew, swaggerSchema.dynamicSchemaNew) &&
        Objects.equals(this.dynamicSchemaOld, swaggerSchema.dynamicSchemaOld) &&
        Objects.equals(this.dynamicTree, swaggerSchema.dynamicTree) &&
        Objects.equals(this.example, swaggerSchema.example) &&
        Objects.equals(this.externalDocs, swaggerSchema.externalDocs) &&
        Objects.equals(this.items, swaggerSchema.items) &&
        Objects.equals(this.maxProperties, swaggerSchema.maxProperties) &&
        Objects.equals(this.minProperties, swaggerSchema.minProperties) &&
        Objects.equals(this.notificationUrlExtension, swaggerSchema.notificationUrlExtension) &&
        Objects.equals(this.properties, swaggerSchema.properties) &&
        Objects.equals(this.readOnly, swaggerSchema.readOnly) &&
        Objects.equals(this.ref, swaggerSchema.ref) &&
        Objects.equals(this.required, swaggerSchema.required) &&
        Objects.equals(this.title, swaggerSchema.title) &&
        Objects.equals(this.type, swaggerSchema.type) &&
        Objects.equals(this.xml, swaggerSchema.xml);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProperties, allOf, discriminator, dynamicListNew, dynamicSchemaNew, dynamicSchemaOld, dynamicTree, example, externalDocs, items, maxProperties, minProperties, notificationUrlExtension, properties, readOnly, ref, required, title, type, xml);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SwaggerSchema {\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    allOf: ").append(toIndentedString(allOf)).append("\n");
    sb.append("    discriminator: ").append(toIndentedString(discriminator)).append("\n");
    sb.append("    dynamicListNew: ").append(toIndentedString(dynamicListNew)).append("\n");
    sb.append("    dynamicSchemaNew: ").append(toIndentedString(dynamicSchemaNew)).append("\n");
    sb.append("    dynamicSchemaOld: ").append(toIndentedString(dynamicSchemaOld)).append("\n");
    sb.append("    dynamicTree: ").append(toIndentedString(dynamicTree)).append("\n");
    sb.append("    example: ").append(toIndentedString(example)).append("\n");
    sb.append("    externalDocs: ").append(toIndentedString(externalDocs)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    maxProperties: ").append(toIndentedString(maxProperties)).append("\n");
    sb.append("    minProperties: ").append(toIndentedString(minProperties)).append("\n");
    sb.append("    notificationUrlExtension: ").append(toIndentedString(notificationUrlExtension)).append("\n");
    sb.append("    properties: ").append(toIndentedString(properties)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    ref: ").append(toIndentedString(ref)).append("\n");
    sb.append("    required: ").append(toIndentedString(required)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    xml: ").append(toIndentedString(xml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProperties");
    openapiFields.add("allOf");
    openapiFields.add("discriminator");
    openapiFields.add("dynamicListNew");
    openapiFields.add("dynamicSchemaNew");
    openapiFields.add("dynamicSchemaOld");
    openapiFields.add("dynamicTree");
    openapiFields.add("example");
    openapiFields.add("externalDocs");
    openapiFields.add("items");
    openapiFields.add("maxProperties");
    openapiFields.add("minProperties");
    openapiFields.add("notificationUrlExtension");
    openapiFields.add("properties");
    openapiFields.add("readOnly");
    openapiFields.add("ref");
    openapiFields.add("required");
    openapiFields.add("title");
    openapiFields.add("type");
    openapiFields.add("xml");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SwaggerSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SwaggerSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SwaggerSchema is not found in the empty JSON string", SwaggerSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SwaggerSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SwaggerSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("allOf") != null && !jsonObj.get("allOf").isJsonNull()) {
        JsonArray jsonArrayallOf = jsonObj.getAsJsonArray("allOf");
        if (jsonArrayallOf != null) {
          // ensure the json data is an array
          if (!jsonObj.get("allOf").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `allOf` to be an array in the JSON string but got `%s`", jsonObj.get("allOf").toString()));
          }

          // validate the optional field `allOf` (array)
          for (int i = 0; i < jsonArrayallOf.size(); i++) {
            SwaggerSchema.validateJsonElement(jsonArrayallOf.get(i));
          };
        }
      }
      if ((jsonObj.get("discriminator") != null && !jsonObj.get("discriminator").isJsonNull()) && !jsonObj.get("discriminator").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `discriminator` to be a primitive type in the JSON string but got `%s`", jsonObj.get("discriminator").toString()));
      }
      // validate the optional field `dynamicListNew`
      if (jsonObj.get("dynamicListNew") != null && !jsonObj.get("dynamicListNew").isJsonNull()) {
        SwaggerCustomDynamicList.validateJsonElement(jsonObj.get("dynamicListNew"));
      }
      // validate the optional field `dynamicSchemaNew`
      if (jsonObj.get("dynamicSchemaNew") != null && !jsonObj.get("dynamicSchemaNew").isJsonNull()) {
        SwaggerCustomDynamicProperties.validateJsonElement(jsonObj.get("dynamicSchemaNew"));
      }
      // validate the optional field `dynamicSchemaOld`
      if (jsonObj.get("dynamicSchemaOld") != null && !jsonObj.get("dynamicSchemaOld").isJsonNull()) {
        SwaggerCustomDynamicSchema.validateJsonElement(jsonObj.get("dynamicSchemaOld"));
      }
      // validate the optional field `dynamicTree`
      if (jsonObj.get("dynamicTree") != null && !jsonObj.get("dynamicTree").isJsonNull()) {
        SwaggerCustomDynamicTree.validateJsonElement(jsonObj.get("dynamicTree"));
      }
      // validate the optional field `externalDocs`
      if (jsonObj.get("externalDocs") != null && !jsonObj.get("externalDocs").isJsonNull()) {
        SwaggerExternalDocumentation.validateJsonElement(jsonObj.get("externalDocs"));
      }
      // validate the optional field `items`
      if (jsonObj.get("items") != null && !jsonObj.get("items").isJsonNull()) {
        SwaggerSchema.validateJsonElement(jsonObj.get("items"));
      }
      if ((jsonObj.get("ref") != null && !jsonObj.get("ref").isJsonNull()) && !jsonObj.get("ref").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ref` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ref").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("required") != null && !jsonObj.get("required").isJsonNull() && !jsonObj.get("required").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `required` to be an array in the JSON string but got `%s`", jsonObj.get("required").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        SwaggerSchemaType.validateJsonElement(jsonObj.get("type"));
      }
      // validate the optional field `xml`
      if (jsonObj.get("xml") != null && !jsonObj.get("xml").isJsonNull()) {
        SwaggerXml.validateJsonElement(jsonObj.get("xml"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SwaggerSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SwaggerSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SwaggerSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SwaggerSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<SwaggerSchema>() {
           @Override
           public void write(JsonWriter out, SwaggerSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SwaggerSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SwaggerSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SwaggerSchema
   * @throws IOException if the JSON string is invalid with respect to SwaggerSchema
   */
  public static SwaggerSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SwaggerSchema.class);
  }

  /**
   * Convert an instance of SwaggerSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

