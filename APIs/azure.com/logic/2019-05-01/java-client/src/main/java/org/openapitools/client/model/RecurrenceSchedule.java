/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.RecurrenceScheduleOccurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The recurrence schedule.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RecurrenceSchedule {
  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private List<Integer> hours = new ArrayList<>();

  public static final String SERIALIZED_NAME_MINUTES = "minutes";
  @SerializedName(SERIALIZED_NAME_MINUTES)
  private List<Integer> minutes = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTH_DAYS = "monthDays";
  @SerializedName(SERIALIZED_NAME_MONTH_DAYS)
  private List<Integer> monthDays = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONTHLY_OCCURRENCES = "monthlyOccurrences";
  @SerializedName(SERIALIZED_NAME_MONTHLY_OCCURRENCES)
  private List<RecurrenceScheduleOccurrence> monthlyOccurrences = new ArrayList<>();

  /**
   * Gets or Sets weekDays
   */
  @JsonAdapter(WeekDaysEnum.Adapter.class)
  public enum WeekDaysEnum {
    SUNDAY("Sunday"),
    
    MONDAY("Monday"),
    
    TUESDAY("Tuesday"),
    
    WEDNESDAY("Wednesday"),
    
    THURSDAY("Thursday"),
    
    FRIDAY("Friday"),
    
    SATURDAY("Saturday");

    private String value;

    WeekDaysEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WeekDaysEnum fromValue(String value) {
      for (WeekDaysEnum b : WeekDaysEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WeekDaysEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WeekDaysEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WeekDaysEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WeekDaysEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      WeekDaysEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEEK_DAYS = "weekDays";
  @SerializedName(SERIALIZED_NAME_WEEK_DAYS)
  private List<WeekDaysEnum> weekDays = new ArrayList<>();

  public RecurrenceSchedule() {
  }

  public RecurrenceSchedule hours(List<Integer> hours) {
    this.hours = hours;
    return this;
  }

  public RecurrenceSchedule addHoursItem(Integer hoursItem) {
    if (this.hours == null) {
      this.hours = new ArrayList<>();
    }
    this.hours.add(hoursItem);
    return this;
  }

  /**
   * The hours.
   * @return hours
   */
  @javax.annotation.Nullable
  public List<Integer> getHours() {
    return hours;
  }

  public void setHours(List<Integer> hours) {
    this.hours = hours;
  }


  public RecurrenceSchedule minutes(List<Integer> minutes) {
    this.minutes = minutes;
    return this;
  }

  public RecurrenceSchedule addMinutesItem(Integer minutesItem) {
    if (this.minutes == null) {
      this.minutes = new ArrayList<>();
    }
    this.minutes.add(minutesItem);
    return this;
  }

  /**
   * The minutes.
   * @return minutes
   */
  @javax.annotation.Nullable
  public List<Integer> getMinutes() {
    return minutes;
  }

  public void setMinutes(List<Integer> minutes) {
    this.minutes = minutes;
  }


  public RecurrenceSchedule monthDays(List<Integer> monthDays) {
    this.monthDays = monthDays;
    return this;
  }

  public RecurrenceSchedule addMonthDaysItem(Integer monthDaysItem) {
    if (this.monthDays == null) {
      this.monthDays = new ArrayList<>();
    }
    this.monthDays.add(monthDaysItem);
    return this;
  }

  /**
   * The month days.
   * @return monthDays
   */
  @javax.annotation.Nullable
  public List<Integer> getMonthDays() {
    return monthDays;
  }

  public void setMonthDays(List<Integer> monthDays) {
    this.monthDays = monthDays;
  }


  public RecurrenceSchedule monthlyOccurrences(List<RecurrenceScheduleOccurrence> monthlyOccurrences) {
    this.monthlyOccurrences = monthlyOccurrences;
    return this;
  }

  public RecurrenceSchedule addMonthlyOccurrencesItem(RecurrenceScheduleOccurrence monthlyOccurrencesItem) {
    if (this.monthlyOccurrences == null) {
      this.monthlyOccurrences = new ArrayList<>();
    }
    this.monthlyOccurrences.add(monthlyOccurrencesItem);
    return this;
  }

  /**
   * The monthly occurrences.
   * @return monthlyOccurrences
   */
  @javax.annotation.Nullable
  public List<RecurrenceScheduleOccurrence> getMonthlyOccurrences() {
    return monthlyOccurrences;
  }

  public void setMonthlyOccurrences(List<RecurrenceScheduleOccurrence> monthlyOccurrences) {
    this.monthlyOccurrences = monthlyOccurrences;
  }


  public RecurrenceSchedule weekDays(List<WeekDaysEnum> weekDays) {
    this.weekDays = weekDays;
    return this;
  }

  public RecurrenceSchedule addWeekDaysItem(WeekDaysEnum weekDaysItem) {
    if (this.weekDays == null) {
      this.weekDays = new ArrayList<>();
    }
    this.weekDays.add(weekDaysItem);
    return this;
  }

  /**
   * The days of the week.
   * @return weekDays
   */
  @javax.annotation.Nullable
  public List<WeekDaysEnum> getWeekDays() {
    return weekDays;
  }

  public void setWeekDays(List<WeekDaysEnum> weekDays) {
    this.weekDays = weekDays;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecurrenceSchedule recurrenceSchedule = (RecurrenceSchedule) o;
    return Objects.equals(this.hours, recurrenceSchedule.hours) &&
        Objects.equals(this.minutes, recurrenceSchedule.minutes) &&
        Objects.equals(this.monthDays, recurrenceSchedule.monthDays) &&
        Objects.equals(this.monthlyOccurrences, recurrenceSchedule.monthlyOccurrences) &&
        Objects.equals(this.weekDays, recurrenceSchedule.weekDays);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hours, minutes, monthDays, monthlyOccurrences, weekDays);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecurrenceSchedule {\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    minutes: ").append(toIndentedString(minutes)).append("\n");
    sb.append("    monthDays: ").append(toIndentedString(monthDays)).append("\n");
    sb.append("    monthlyOccurrences: ").append(toIndentedString(monthlyOccurrences)).append("\n");
    sb.append("    weekDays: ").append(toIndentedString(weekDays)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hours");
    openapiFields.add("minutes");
    openapiFields.add("monthDays");
    openapiFields.add("monthlyOccurrences");
    openapiFields.add("weekDays");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RecurrenceSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RecurrenceSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RecurrenceSchedule is not found in the empty JSON string", RecurrenceSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RecurrenceSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RecurrenceSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("hours") != null && !jsonObj.get("hours").isJsonNull() && !jsonObj.get("hours").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `hours` to be an array in the JSON string but got `%s`", jsonObj.get("hours").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("minutes") != null && !jsonObj.get("minutes").isJsonNull() && !jsonObj.get("minutes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `minutes` to be an array in the JSON string but got `%s`", jsonObj.get("minutes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("monthDays") != null && !jsonObj.get("monthDays").isJsonNull() && !jsonObj.get("monthDays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `monthDays` to be an array in the JSON string but got `%s`", jsonObj.get("monthDays").toString()));
      }
      if (jsonObj.get("monthlyOccurrences") != null && !jsonObj.get("monthlyOccurrences").isJsonNull()) {
        JsonArray jsonArraymonthlyOccurrences = jsonObj.getAsJsonArray("monthlyOccurrences");
        if (jsonArraymonthlyOccurrences != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monthlyOccurrences").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monthlyOccurrences` to be an array in the JSON string but got `%s`", jsonObj.get("monthlyOccurrences").toString()));
          }

          // validate the optional field `monthlyOccurrences` (array)
          for (int i = 0; i < jsonArraymonthlyOccurrences.size(); i++) {
            RecurrenceScheduleOccurrence.validateJsonElement(jsonArraymonthlyOccurrences.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("weekDays") != null && !jsonObj.get("weekDays").isJsonNull() && !jsonObj.get("weekDays").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `weekDays` to be an array in the JSON string but got `%s`", jsonObj.get("weekDays").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RecurrenceSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RecurrenceSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RecurrenceSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RecurrenceSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<RecurrenceSchedule>() {
           @Override
           public void write(JsonWriter out, RecurrenceSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RecurrenceSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RecurrenceSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RecurrenceSchedule
   * @throws IOException if the JSON string is invalid with respect to RecurrenceSchedule
   */
  public static RecurrenceSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RecurrenceSchedule.class);
  }

  /**
   * Convert an instance of RecurrenceSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

