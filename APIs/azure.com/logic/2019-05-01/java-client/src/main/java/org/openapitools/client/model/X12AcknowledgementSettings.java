/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The X12 agreement acknowledgement settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X12AcknowledgementSettings {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_LOWER_BOUND = "acknowledgementControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_LOWER_BOUND)
  private Integer acknowledgementControlNumberLowerBound;

  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_PREFIX = "acknowledgementControlNumberPrefix";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_PREFIX)
  private String acknowledgementControlNumberPrefix;

  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_SUFFIX = "acknowledgementControlNumberSuffix";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_SUFFIX)
  private String acknowledgementControlNumberSuffix;

  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_UPPER_BOUND = "acknowledgementControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_CONTROL_NUMBER_UPPER_BOUND)
  private Integer acknowledgementControlNumberUpperBound;

  public static final String SERIALIZED_NAME_BATCH_FUNCTIONAL_ACKNOWLEDGEMENTS = "batchFunctionalAcknowledgements";
  @SerializedName(SERIALIZED_NAME_BATCH_FUNCTIONAL_ACKNOWLEDGEMENTS)
  private Boolean batchFunctionalAcknowledgements;

  public static final String SERIALIZED_NAME_BATCH_IMPLEMENTATION_ACKNOWLEDGEMENTS = "batchImplementationAcknowledgements";
  @SerializedName(SERIALIZED_NAME_BATCH_IMPLEMENTATION_ACKNOWLEDGEMENTS)
  private Boolean batchImplementationAcknowledgements;

  public static final String SERIALIZED_NAME_BATCH_TECHNICAL_ACKNOWLEDGEMENTS = "batchTechnicalAcknowledgements";
  @SerializedName(SERIALIZED_NAME_BATCH_TECHNICAL_ACKNOWLEDGEMENTS)
  private Boolean batchTechnicalAcknowledgements;

  public static final String SERIALIZED_NAME_FUNCTIONAL_ACKNOWLEDGEMENT_VERSION = "functionalAcknowledgementVersion";
  @SerializedName(SERIALIZED_NAME_FUNCTIONAL_ACKNOWLEDGEMENT_VERSION)
  private String functionalAcknowledgementVersion;

  public static final String SERIALIZED_NAME_IMPLEMENTATION_ACKNOWLEDGEMENT_VERSION = "implementationAcknowledgementVersion";
  @SerializedName(SERIALIZED_NAME_IMPLEMENTATION_ACKNOWLEDGEMENT_VERSION)
  private String implementationAcknowledgementVersion;

  public static final String SERIALIZED_NAME_NEED_FUNCTIONAL_ACKNOWLEDGEMENT = "needFunctionalAcknowledgement";
  @SerializedName(SERIALIZED_NAME_NEED_FUNCTIONAL_ACKNOWLEDGEMENT)
  private Boolean needFunctionalAcknowledgement;

  public static final String SERIALIZED_NAME_NEED_IMPLEMENTATION_ACKNOWLEDGEMENT = "needImplementationAcknowledgement";
  @SerializedName(SERIALIZED_NAME_NEED_IMPLEMENTATION_ACKNOWLEDGEMENT)
  private Boolean needImplementationAcknowledgement;

  public static final String SERIALIZED_NAME_NEED_LOOP_FOR_VALID_MESSAGES = "needLoopForValidMessages";
  @SerializedName(SERIALIZED_NAME_NEED_LOOP_FOR_VALID_MESSAGES)
  private Boolean needLoopForValidMessages;

  public static final String SERIALIZED_NAME_NEED_TECHNICAL_ACKNOWLEDGEMENT = "needTechnicalAcknowledgement";
  @SerializedName(SERIALIZED_NAME_NEED_TECHNICAL_ACKNOWLEDGEMENT)
  private Boolean needTechnicalAcknowledgement;

  public static final String SERIALIZED_NAME_ROLLOVER_ACKNOWLEDGEMENT_CONTROL_NUMBER = "rolloverAcknowledgementControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_ACKNOWLEDGEMENT_CONTROL_NUMBER)
  private Boolean rolloverAcknowledgementControlNumber;

  public static final String SERIALIZED_NAME_SEND_SYNCHRONOUS_ACKNOWLEDGEMENT = "sendSynchronousAcknowledgement";
  @SerializedName(SERIALIZED_NAME_SEND_SYNCHRONOUS_ACKNOWLEDGEMENT)
  private Boolean sendSynchronousAcknowledgement;

  public X12AcknowledgementSettings() {
  }

  public X12AcknowledgementSettings acknowledgementControlNumberLowerBound(Integer acknowledgementControlNumberLowerBound) {
    this.acknowledgementControlNumberLowerBound = acknowledgementControlNumberLowerBound;
    return this;
  }

  /**
   * The acknowledgement control number lower bound.
   * @return acknowledgementControlNumberLowerBound
   */
  @javax.annotation.Nonnull
  public Integer getAcknowledgementControlNumberLowerBound() {
    return acknowledgementControlNumberLowerBound;
  }

  public void setAcknowledgementControlNumberLowerBound(Integer acknowledgementControlNumberLowerBound) {
    this.acknowledgementControlNumberLowerBound = acknowledgementControlNumberLowerBound;
  }


  public X12AcknowledgementSettings acknowledgementControlNumberPrefix(String acknowledgementControlNumberPrefix) {
    this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
    return this;
  }

  /**
   * The acknowledgement control number prefix.
   * @return acknowledgementControlNumberPrefix
   */
  @javax.annotation.Nullable
  public String getAcknowledgementControlNumberPrefix() {
    return acknowledgementControlNumberPrefix;
  }

  public void setAcknowledgementControlNumberPrefix(String acknowledgementControlNumberPrefix) {
    this.acknowledgementControlNumberPrefix = acknowledgementControlNumberPrefix;
  }


  public X12AcknowledgementSettings acknowledgementControlNumberSuffix(String acknowledgementControlNumberSuffix) {
    this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
    return this;
  }

  /**
   * The acknowledgement control number suffix.
   * @return acknowledgementControlNumberSuffix
   */
  @javax.annotation.Nullable
  public String getAcknowledgementControlNumberSuffix() {
    return acknowledgementControlNumberSuffix;
  }

  public void setAcknowledgementControlNumberSuffix(String acknowledgementControlNumberSuffix) {
    this.acknowledgementControlNumberSuffix = acknowledgementControlNumberSuffix;
  }


  public X12AcknowledgementSettings acknowledgementControlNumberUpperBound(Integer acknowledgementControlNumberUpperBound) {
    this.acknowledgementControlNumberUpperBound = acknowledgementControlNumberUpperBound;
    return this;
  }

  /**
   * The acknowledgement control number upper bound.
   * @return acknowledgementControlNumberUpperBound
   */
  @javax.annotation.Nonnull
  public Integer getAcknowledgementControlNumberUpperBound() {
    return acknowledgementControlNumberUpperBound;
  }

  public void setAcknowledgementControlNumberUpperBound(Integer acknowledgementControlNumberUpperBound) {
    this.acknowledgementControlNumberUpperBound = acknowledgementControlNumberUpperBound;
  }


  public X12AcknowledgementSettings batchFunctionalAcknowledgements(Boolean batchFunctionalAcknowledgements) {
    this.batchFunctionalAcknowledgements = batchFunctionalAcknowledgements;
    return this;
  }

  /**
   * The value indicating whether to batch functional acknowledgements.
   * @return batchFunctionalAcknowledgements
   */
  @javax.annotation.Nonnull
  public Boolean getBatchFunctionalAcknowledgements() {
    return batchFunctionalAcknowledgements;
  }

  public void setBatchFunctionalAcknowledgements(Boolean batchFunctionalAcknowledgements) {
    this.batchFunctionalAcknowledgements = batchFunctionalAcknowledgements;
  }


  public X12AcknowledgementSettings batchImplementationAcknowledgements(Boolean batchImplementationAcknowledgements) {
    this.batchImplementationAcknowledgements = batchImplementationAcknowledgements;
    return this;
  }

  /**
   * The value indicating whether to batch implementation acknowledgements.
   * @return batchImplementationAcknowledgements
   */
  @javax.annotation.Nonnull
  public Boolean getBatchImplementationAcknowledgements() {
    return batchImplementationAcknowledgements;
  }

  public void setBatchImplementationAcknowledgements(Boolean batchImplementationAcknowledgements) {
    this.batchImplementationAcknowledgements = batchImplementationAcknowledgements;
  }


  public X12AcknowledgementSettings batchTechnicalAcknowledgements(Boolean batchTechnicalAcknowledgements) {
    this.batchTechnicalAcknowledgements = batchTechnicalAcknowledgements;
    return this;
  }

  /**
   * The value indicating whether to batch the technical acknowledgements.
   * @return batchTechnicalAcknowledgements
   */
  @javax.annotation.Nonnull
  public Boolean getBatchTechnicalAcknowledgements() {
    return batchTechnicalAcknowledgements;
  }

  public void setBatchTechnicalAcknowledgements(Boolean batchTechnicalAcknowledgements) {
    this.batchTechnicalAcknowledgements = batchTechnicalAcknowledgements;
  }


  public X12AcknowledgementSettings functionalAcknowledgementVersion(String functionalAcknowledgementVersion) {
    this.functionalAcknowledgementVersion = functionalAcknowledgementVersion;
    return this;
  }

  /**
   * The functional acknowledgement version.
   * @return functionalAcknowledgementVersion
   */
  @javax.annotation.Nullable
  public String getFunctionalAcknowledgementVersion() {
    return functionalAcknowledgementVersion;
  }

  public void setFunctionalAcknowledgementVersion(String functionalAcknowledgementVersion) {
    this.functionalAcknowledgementVersion = functionalAcknowledgementVersion;
  }


  public X12AcknowledgementSettings implementationAcknowledgementVersion(String implementationAcknowledgementVersion) {
    this.implementationAcknowledgementVersion = implementationAcknowledgementVersion;
    return this;
  }

  /**
   * The implementation acknowledgement version.
   * @return implementationAcknowledgementVersion
   */
  @javax.annotation.Nullable
  public String getImplementationAcknowledgementVersion() {
    return implementationAcknowledgementVersion;
  }

  public void setImplementationAcknowledgementVersion(String implementationAcknowledgementVersion) {
    this.implementationAcknowledgementVersion = implementationAcknowledgementVersion;
  }


  public X12AcknowledgementSettings needFunctionalAcknowledgement(Boolean needFunctionalAcknowledgement) {
    this.needFunctionalAcknowledgement = needFunctionalAcknowledgement;
    return this;
  }

  /**
   * The value indicating whether functional acknowledgement is needed.
   * @return needFunctionalAcknowledgement
   */
  @javax.annotation.Nonnull
  public Boolean getNeedFunctionalAcknowledgement() {
    return needFunctionalAcknowledgement;
  }

  public void setNeedFunctionalAcknowledgement(Boolean needFunctionalAcknowledgement) {
    this.needFunctionalAcknowledgement = needFunctionalAcknowledgement;
  }


  public X12AcknowledgementSettings needImplementationAcknowledgement(Boolean needImplementationAcknowledgement) {
    this.needImplementationAcknowledgement = needImplementationAcknowledgement;
    return this;
  }

  /**
   * The value indicating whether implementation acknowledgement is needed.
   * @return needImplementationAcknowledgement
   */
  @javax.annotation.Nonnull
  public Boolean getNeedImplementationAcknowledgement() {
    return needImplementationAcknowledgement;
  }

  public void setNeedImplementationAcknowledgement(Boolean needImplementationAcknowledgement) {
    this.needImplementationAcknowledgement = needImplementationAcknowledgement;
  }


  public X12AcknowledgementSettings needLoopForValidMessages(Boolean needLoopForValidMessages) {
    this.needLoopForValidMessages = needLoopForValidMessages;
    return this;
  }

  /**
   * The value indicating whether a loop is needed for valid messages.
   * @return needLoopForValidMessages
   */
  @javax.annotation.Nonnull
  public Boolean getNeedLoopForValidMessages() {
    return needLoopForValidMessages;
  }

  public void setNeedLoopForValidMessages(Boolean needLoopForValidMessages) {
    this.needLoopForValidMessages = needLoopForValidMessages;
  }


  public X12AcknowledgementSettings needTechnicalAcknowledgement(Boolean needTechnicalAcknowledgement) {
    this.needTechnicalAcknowledgement = needTechnicalAcknowledgement;
    return this;
  }

  /**
   * The value indicating whether technical acknowledgement is needed.
   * @return needTechnicalAcknowledgement
   */
  @javax.annotation.Nonnull
  public Boolean getNeedTechnicalAcknowledgement() {
    return needTechnicalAcknowledgement;
  }

  public void setNeedTechnicalAcknowledgement(Boolean needTechnicalAcknowledgement) {
    this.needTechnicalAcknowledgement = needTechnicalAcknowledgement;
  }


  public X12AcknowledgementSettings rolloverAcknowledgementControlNumber(Boolean rolloverAcknowledgementControlNumber) {
    this.rolloverAcknowledgementControlNumber = rolloverAcknowledgementControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover acknowledgement control number.
   * @return rolloverAcknowledgementControlNumber
   */
  @javax.annotation.Nonnull
  public Boolean getRolloverAcknowledgementControlNumber() {
    return rolloverAcknowledgementControlNumber;
  }

  public void setRolloverAcknowledgementControlNumber(Boolean rolloverAcknowledgementControlNumber) {
    this.rolloverAcknowledgementControlNumber = rolloverAcknowledgementControlNumber;
  }


  public X12AcknowledgementSettings sendSynchronousAcknowledgement(Boolean sendSynchronousAcknowledgement) {
    this.sendSynchronousAcknowledgement = sendSynchronousAcknowledgement;
    return this;
  }

  /**
   * The value indicating whether to send synchronous acknowledgement.
   * @return sendSynchronousAcknowledgement
   */
  @javax.annotation.Nonnull
  public Boolean getSendSynchronousAcknowledgement() {
    return sendSynchronousAcknowledgement;
  }

  public void setSendSynchronousAcknowledgement(Boolean sendSynchronousAcknowledgement) {
    this.sendSynchronousAcknowledgement = sendSynchronousAcknowledgement;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X12AcknowledgementSettings x12AcknowledgementSettings = (X12AcknowledgementSettings) o;
    return Objects.equals(this.acknowledgementControlNumberLowerBound, x12AcknowledgementSettings.acknowledgementControlNumberLowerBound) &&
        Objects.equals(this.acknowledgementControlNumberPrefix, x12AcknowledgementSettings.acknowledgementControlNumberPrefix) &&
        Objects.equals(this.acknowledgementControlNumberSuffix, x12AcknowledgementSettings.acknowledgementControlNumberSuffix) &&
        Objects.equals(this.acknowledgementControlNumberUpperBound, x12AcknowledgementSettings.acknowledgementControlNumberUpperBound) &&
        Objects.equals(this.batchFunctionalAcknowledgements, x12AcknowledgementSettings.batchFunctionalAcknowledgements) &&
        Objects.equals(this.batchImplementationAcknowledgements, x12AcknowledgementSettings.batchImplementationAcknowledgements) &&
        Objects.equals(this.batchTechnicalAcknowledgements, x12AcknowledgementSettings.batchTechnicalAcknowledgements) &&
        Objects.equals(this.functionalAcknowledgementVersion, x12AcknowledgementSettings.functionalAcknowledgementVersion) &&
        Objects.equals(this.implementationAcknowledgementVersion, x12AcknowledgementSettings.implementationAcknowledgementVersion) &&
        Objects.equals(this.needFunctionalAcknowledgement, x12AcknowledgementSettings.needFunctionalAcknowledgement) &&
        Objects.equals(this.needImplementationAcknowledgement, x12AcknowledgementSettings.needImplementationAcknowledgement) &&
        Objects.equals(this.needLoopForValidMessages, x12AcknowledgementSettings.needLoopForValidMessages) &&
        Objects.equals(this.needTechnicalAcknowledgement, x12AcknowledgementSettings.needTechnicalAcknowledgement) &&
        Objects.equals(this.rolloverAcknowledgementControlNumber, x12AcknowledgementSettings.rolloverAcknowledgementControlNumber) &&
        Objects.equals(this.sendSynchronousAcknowledgement, x12AcknowledgementSettings.sendSynchronousAcknowledgement);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgementControlNumberLowerBound, acknowledgementControlNumberPrefix, acknowledgementControlNumberSuffix, acknowledgementControlNumberUpperBound, batchFunctionalAcknowledgements, batchImplementationAcknowledgements, batchTechnicalAcknowledgements, functionalAcknowledgementVersion, implementationAcknowledgementVersion, needFunctionalAcknowledgement, needImplementationAcknowledgement, needLoopForValidMessages, needTechnicalAcknowledgement, rolloverAcknowledgementControlNumber, sendSynchronousAcknowledgement);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X12AcknowledgementSettings {\n");
    sb.append("    acknowledgementControlNumberLowerBound: ").append(toIndentedString(acknowledgementControlNumberLowerBound)).append("\n");
    sb.append("    acknowledgementControlNumberPrefix: ").append(toIndentedString(acknowledgementControlNumberPrefix)).append("\n");
    sb.append("    acknowledgementControlNumberSuffix: ").append(toIndentedString(acknowledgementControlNumberSuffix)).append("\n");
    sb.append("    acknowledgementControlNumberUpperBound: ").append(toIndentedString(acknowledgementControlNumberUpperBound)).append("\n");
    sb.append("    batchFunctionalAcknowledgements: ").append(toIndentedString(batchFunctionalAcknowledgements)).append("\n");
    sb.append("    batchImplementationAcknowledgements: ").append(toIndentedString(batchImplementationAcknowledgements)).append("\n");
    sb.append("    batchTechnicalAcknowledgements: ").append(toIndentedString(batchTechnicalAcknowledgements)).append("\n");
    sb.append("    functionalAcknowledgementVersion: ").append(toIndentedString(functionalAcknowledgementVersion)).append("\n");
    sb.append("    implementationAcknowledgementVersion: ").append(toIndentedString(implementationAcknowledgementVersion)).append("\n");
    sb.append("    needFunctionalAcknowledgement: ").append(toIndentedString(needFunctionalAcknowledgement)).append("\n");
    sb.append("    needImplementationAcknowledgement: ").append(toIndentedString(needImplementationAcknowledgement)).append("\n");
    sb.append("    needLoopForValidMessages: ").append(toIndentedString(needLoopForValidMessages)).append("\n");
    sb.append("    needTechnicalAcknowledgement: ").append(toIndentedString(needTechnicalAcknowledgement)).append("\n");
    sb.append("    rolloverAcknowledgementControlNumber: ").append(toIndentedString(rolloverAcknowledgementControlNumber)).append("\n");
    sb.append("    sendSynchronousAcknowledgement: ").append(toIndentedString(sendSynchronousAcknowledgement)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgementControlNumberLowerBound");
    openapiFields.add("acknowledgementControlNumberPrefix");
    openapiFields.add("acknowledgementControlNumberSuffix");
    openapiFields.add("acknowledgementControlNumberUpperBound");
    openapiFields.add("batchFunctionalAcknowledgements");
    openapiFields.add("batchImplementationAcknowledgements");
    openapiFields.add("batchTechnicalAcknowledgements");
    openapiFields.add("functionalAcknowledgementVersion");
    openapiFields.add("implementationAcknowledgementVersion");
    openapiFields.add("needFunctionalAcknowledgement");
    openapiFields.add("needImplementationAcknowledgement");
    openapiFields.add("needLoopForValidMessages");
    openapiFields.add("needTechnicalAcknowledgement");
    openapiFields.add("rolloverAcknowledgementControlNumber");
    openapiFields.add("sendSynchronousAcknowledgement");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acknowledgementControlNumberLowerBound");
    openapiRequiredFields.add("acknowledgementControlNumberUpperBound");
    openapiRequiredFields.add("batchFunctionalAcknowledgements");
    openapiRequiredFields.add("batchImplementationAcknowledgements");
    openapiRequiredFields.add("batchTechnicalAcknowledgements");
    openapiRequiredFields.add("needFunctionalAcknowledgement");
    openapiRequiredFields.add("needImplementationAcknowledgement");
    openapiRequiredFields.add("needLoopForValidMessages");
    openapiRequiredFields.add("needTechnicalAcknowledgement");
    openapiRequiredFields.add("rolloverAcknowledgementControlNumber");
    openapiRequiredFields.add("sendSynchronousAcknowledgement");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X12AcknowledgementSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X12AcknowledgementSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X12AcknowledgementSettings is not found in the empty JSON string", X12AcknowledgementSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X12AcknowledgementSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X12AcknowledgementSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : X12AcknowledgementSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("acknowledgementControlNumberPrefix") != null && !jsonObj.get("acknowledgementControlNumberPrefix").isJsonNull()) && !jsonObj.get("acknowledgementControlNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgementControlNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acknowledgementControlNumberPrefix").toString()));
      }
      if ((jsonObj.get("acknowledgementControlNumberSuffix") != null && !jsonObj.get("acknowledgementControlNumberSuffix").isJsonNull()) && !jsonObj.get("acknowledgementControlNumberSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `acknowledgementControlNumberSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("acknowledgementControlNumberSuffix").toString()));
      }
      if ((jsonObj.get("functionalAcknowledgementVersion") != null && !jsonObj.get("functionalAcknowledgementVersion").isJsonNull()) && !jsonObj.get("functionalAcknowledgementVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionalAcknowledgementVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionalAcknowledgementVersion").toString()));
      }
      if ((jsonObj.get("implementationAcknowledgementVersion") != null && !jsonObj.get("implementationAcknowledgementVersion").isJsonNull()) && !jsonObj.get("implementationAcknowledgementVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `implementationAcknowledgementVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("implementationAcknowledgementVersion").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X12AcknowledgementSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X12AcknowledgementSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X12AcknowledgementSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X12AcknowledgementSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<X12AcknowledgementSettings>() {
           @Override
           public void write(JsonWriter out, X12AcknowledgementSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X12AcknowledgementSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X12AcknowledgementSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X12AcknowledgementSettings
   * @throws IOException if the JSON string is invalid with respect to X12AcknowledgementSettings
   */
  public static X12AcknowledgementSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X12AcknowledgementSettings.class);
  }

  /**
   * Convert an instance of X12AcknowledgementSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

