/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The AS2 agreement security settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2SecuritySettings {
  public static final String SERIALIZED_NAME_ENABLE_N_R_R_FOR_INBOUND_DECODED_MESSAGES = "enableNRRForInboundDecodedMessages";
  @SerializedName(SERIALIZED_NAME_ENABLE_N_R_R_FOR_INBOUND_DECODED_MESSAGES)
  private Boolean enableNRRForInboundDecodedMessages;

  public static final String SERIALIZED_NAME_ENABLE_N_R_R_FOR_INBOUND_ENCODED_MESSAGES = "enableNRRForInboundEncodedMessages";
  @SerializedName(SERIALIZED_NAME_ENABLE_N_R_R_FOR_INBOUND_ENCODED_MESSAGES)
  private Boolean enableNRRForInboundEncodedMessages;

  public static final String SERIALIZED_NAME_ENABLE_N_R_R_FOR_INBOUND_M_D_N = "enableNRRForInboundMDN";
  @SerializedName(SERIALIZED_NAME_ENABLE_N_R_R_FOR_INBOUND_M_D_N)
  private Boolean enableNRRForInboundMDN;

  public static final String SERIALIZED_NAME_ENABLE_N_R_R_FOR_OUTBOUND_DECODED_MESSAGES = "enableNRRForOutboundDecodedMessages";
  @SerializedName(SERIALIZED_NAME_ENABLE_N_R_R_FOR_OUTBOUND_DECODED_MESSAGES)
  private Boolean enableNRRForOutboundDecodedMessages;

  public static final String SERIALIZED_NAME_ENABLE_N_R_R_FOR_OUTBOUND_ENCODED_MESSAGES = "enableNRRForOutboundEncodedMessages";
  @SerializedName(SERIALIZED_NAME_ENABLE_N_R_R_FOR_OUTBOUND_ENCODED_MESSAGES)
  private Boolean enableNRRForOutboundEncodedMessages;

  public static final String SERIALIZED_NAME_ENABLE_N_R_R_FOR_OUTBOUND_M_D_N = "enableNRRForOutboundMDN";
  @SerializedName(SERIALIZED_NAME_ENABLE_N_R_R_FOR_OUTBOUND_M_D_N)
  private Boolean enableNRRForOutboundMDN;

  public static final String SERIALIZED_NAME_ENCRYPTION_CERTIFICATE_NAME = "encryptionCertificateName";
  @SerializedName(SERIALIZED_NAME_ENCRYPTION_CERTIFICATE_NAME)
  private String encryptionCertificateName;

  public static final String SERIALIZED_NAME_OVERRIDE_GROUP_SIGNING_CERTIFICATE = "overrideGroupSigningCertificate";
  @SerializedName(SERIALIZED_NAME_OVERRIDE_GROUP_SIGNING_CERTIFICATE)
  private Boolean overrideGroupSigningCertificate;

  public static final String SERIALIZED_NAME_SHA2_ALGORITHM_FORMAT = "sha2AlgorithmFormat";
  @SerializedName(SERIALIZED_NAME_SHA2_ALGORITHM_FORMAT)
  private String sha2AlgorithmFormat;

  public static final String SERIALIZED_NAME_SIGNING_CERTIFICATE_NAME = "signingCertificateName";
  @SerializedName(SERIALIZED_NAME_SIGNING_CERTIFICATE_NAME)
  private String signingCertificateName;

  public AS2SecuritySettings() {
  }

  public AS2SecuritySettings enableNRRForInboundDecodedMessages(Boolean enableNRRForInboundDecodedMessages) {
    this.enableNRRForInboundDecodedMessages = enableNRRForInboundDecodedMessages;
    return this;
  }

  /**
   * The value indicating whether to enable NRR for inbound decoded messages.
   * @return enableNRRForInboundDecodedMessages
   */
  @javax.annotation.Nonnull
  public Boolean getEnableNRRForInboundDecodedMessages() {
    return enableNRRForInboundDecodedMessages;
  }

  public void setEnableNRRForInboundDecodedMessages(Boolean enableNRRForInboundDecodedMessages) {
    this.enableNRRForInboundDecodedMessages = enableNRRForInboundDecodedMessages;
  }


  public AS2SecuritySettings enableNRRForInboundEncodedMessages(Boolean enableNRRForInboundEncodedMessages) {
    this.enableNRRForInboundEncodedMessages = enableNRRForInboundEncodedMessages;
    return this;
  }

  /**
   * The value indicating whether to enable NRR for inbound encoded messages.
   * @return enableNRRForInboundEncodedMessages
   */
  @javax.annotation.Nonnull
  public Boolean getEnableNRRForInboundEncodedMessages() {
    return enableNRRForInboundEncodedMessages;
  }

  public void setEnableNRRForInboundEncodedMessages(Boolean enableNRRForInboundEncodedMessages) {
    this.enableNRRForInboundEncodedMessages = enableNRRForInboundEncodedMessages;
  }


  public AS2SecuritySettings enableNRRForInboundMDN(Boolean enableNRRForInboundMDN) {
    this.enableNRRForInboundMDN = enableNRRForInboundMDN;
    return this;
  }

  /**
   * The value indicating whether to enable NRR for inbound MDN.
   * @return enableNRRForInboundMDN
   */
  @javax.annotation.Nonnull
  public Boolean getEnableNRRForInboundMDN() {
    return enableNRRForInboundMDN;
  }

  public void setEnableNRRForInboundMDN(Boolean enableNRRForInboundMDN) {
    this.enableNRRForInboundMDN = enableNRRForInboundMDN;
  }


  public AS2SecuritySettings enableNRRForOutboundDecodedMessages(Boolean enableNRRForOutboundDecodedMessages) {
    this.enableNRRForOutboundDecodedMessages = enableNRRForOutboundDecodedMessages;
    return this;
  }

  /**
   * The value indicating whether to enable NRR for outbound decoded messages.
   * @return enableNRRForOutboundDecodedMessages
   */
  @javax.annotation.Nonnull
  public Boolean getEnableNRRForOutboundDecodedMessages() {
    return enableNRRForOutboundDecodedMessages;
  }

  public void setEnableNRRForOutboundDecodedMessages(Boolean enableNRRForOutboundDecodedMessages) {
    this.enableNRRForOutboundDecodedMessages = enableNRRForOutboundDecodedMessages;
  }


  public AS2SecuritySettings enableNRRForOutboundEncodedMessages(Boolean enableNRRForOutboundEncodedMessages) {
    this.enableNRRForOutboundEncodedMessages = enableNRRForOutboundEncodedMessages;
    return this;
  }

  /**
   * The value indicating whether to enable NRR for outbound encoded messages.
   * @return enableNRRForOutboundEncodedMessages
   */
  @javax.annotation.Nonnull
  public Boolean getEnableNRRForOutboundEncodedMessages() {
    return enableNRRForOutboundEncodedMessages;
  }

  public void setEnableNRRForOutboundEncodedMessages(Boolean enableNRRForOutboundEncodedMessages) {
    this.enableNRRForOutboundEncodedMessages = enableNRRForOutboundEncodedMessages;
  }


  public AS2SecuritySettings enableNRRForOutboundMDN(Boolean enableNRRForOutboundMDN) {
    this.enableNRRForOutboundMDN = enableNRRForOutboundMDN;
    return this;
  }

  /**
   * The value indicating whether to enable NRR for outbound MDN.
   * @return enableNRRForOutboundMDN
   */
  @javax.annotation.Nonnull
  public Boolean getEnableNRRForOutboundMDN() {
    return enableNRRForOutboundMDN;
  }

  public void setEnableNRRForOutboundMDN(Boolean enableNRRForOutboundMDN) {
    this.enableNRRForOutboundMDN = enableNRRForOutboundMDN;
  }


  public AS2SecuritySettings encryptionCertificateName(String encryptionCertificateName) {
    this.encryptionCertificateName = encryptionCertificateName;
    return this;
  }

  /**
   * The name of the encryption certificate.
   * @return encryptionCertificateName
   */
  @javax.annotation.Nullable
  public String getEncryptionCertificateName() {
    return encryptionCertificateName;
  }

  public void setEncryptionCertificateName(String encryptionCertificateName) {
    this.encryptionCertificateName = encryptionCertificateName;
  }


  public AS2SecuritySettings overrideGroupSigningCertificate(Boolean overrideGroupSigningCertificate) {
    this.overrideGroupSigningCertificate = overrideGroupSigningCertificate;
    return this;
  }

  /**
   * The value indicating whether to send or request a MDN.
   * @return overrideGroupSigningCertificate
   */
  @javax.annotation.Nonnull
  public Boolean getOverrideGroupSigningCertificate() {
    return overrideGroupSigningCertificate;
  }

  public void setOverrideGroupSigningCertificate(Boolean overrideGroupSigningCertificate) {
    this.overrideGroupSigningCertificate = overrideGroupSigningCertificate;
  }


  public AS2SecuritySettings sha2AlgorithmFormat(String sha2AlgorithmFormat) {
    this.sha2AlgorithmFormat = sha2AlgorithmFormat;
    return this;
  }

  /**
   * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
   * @return sha2AlgorithmFormat
   */
  @javax.annotation.Nullable
  public String getSha2AlgorithmFormat() {
    return sha2AlgorithmFormat;
  }

  public void setSha2AlgorithmFormat(String sha2AlgorithmFormat) {
    this.sha2AlgorithmFormat = sha2AlgorithmFormat;
  }


  public AS2SecuritySettings signingCertificateName(String signingCertificateName) {
    this.signingCertificateName = signingCertificateName;
    return this;
  }

  /**
   * The name of the signing certificate.
   * @return signingCertificateName
   */
  @javax.annotation.Nullable
  public String getSigningCertificateName() {
    return signingCertificateName;
  }

  public void setSigningCertificateName(String signingCertificateName) {
    this.signingCertificateName = signingCertificateName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2SecuritySettings as2SecuritySettings = (AS2SecuritySettings) o;
    return Objects.equals(this.enableNRRForInboundDecodedMessages, as2SecuritySettings.enableNRRForInboundDecodedMessages) &&
        Objects.equals(this.enableNRRForInboundEncodedMessages, as2SecuritySettings.enableNRRForInboundEncodedMessages) &&
        Objects.equals(this.enableNRRForInboundMDN, as2SecuritySettings.enableNRRForInboundMDN) &&
        Objects.equals(this.enableNRRForOutboundDecodedMessages, as2SecuritySettings.enableNRRForOutboundDecodedMessages) &&
        Objects.equals(this.enableNRRForOutboundEncodedMessages, as2SecuritySettings.enableNRRForOutboundEncodedMessages) &&
        Objects.equals(this.enableNRRForOutboundMDN, as2SecuritySettings.enableNRRForOutboundMDN) &&
        Objects.equals(this.encryptionCertificateName, as2SecuritySettings.encryptionCertificateName) &&
        Objects.equals(this.overrideGroupSigningCertificate, as2SecuritySettings.overrideGroupSigningCertificate) &&
        Objects.equals(this.sha2AlgorithmFormat, as2SecuritySettings.sha2AlgorithmFormat) &&
        Objects.equals(this.signingCertificateName, as2SecuritySettings.signingCertificateName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableNRRForInboundDecodedMessages, enableNRRForInboundEncodedMessages, enableNRRForInboundMDN, enableNRRForOutboundDecodedMessages, enableNRRForOutboundEncodedMessages, enableNRRForOutboundMDN, encryptionCertificateName, overrideGroupSigningCertificate, sha2AlgorithmFormat, signingCertificateName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2SecuritySettings {\n");
    sb.append("    enableNRRForInboundDecodedMessages: ").append(toIndentedString(enableNRRForInboundDecodedMessages)).append("\n");
    sb.append("    enableNRRForInboundEncodedMessages: ").append(toIndentedString(enableNRRForInboundEncodedMessages)).append("\n");
    sb.append("    enableNRRForInboundMDN: ").append(toIndentedString(enableNRRForInboundMDN)).append("\n");
    sb.append("    enableNRRForOutboundDecodedMessages: ").append(toIndentedString(enableNRRForOutboundDecodedMessages)).append("\n");
    sb.append("    enableNRRForOutboundEncodedMessages: ").append(toIndentedString(enableNRRForOutboundEncodedMessages)).append("\n");
    sb.append("    enableNRRForOutboundMDN: ").append(toIndentedString(enableNRRForOutboundMDN)).append("\n");
    sb.append("    encryptionCertificateName: ").append(toIndentedString(encryptionCertificateName)).append("\n");
    sb.append("    overrideGroupSigningCertificate: ").append(toIndentedString(overrideGroupSigningCertificate)).append("\n");
    sb.append("    sha2AlgorithmFormat: ").append(toIndentedString(sha2AlgorithmFormat)).append("\n");
    sb.append("    signingCertificateName: ").append(toIndentedString(signingCertificateName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableNRRForInboundDecodedMessages");
    openapiFields.add("enableNRRForInboundEncodedMessages");
    openapiFields.add("enableNRRForInboundMDN");
    openapiFields.add("enableNRRForOutboundDecodedMessages");
    openapiFields.add("enableNRRForOutboundEncodedMessages");
    openapiFields.add("enableNRRForOutboundMDN");
    openapiFields.add("encryptionCertificateName");
    openapiFields.add("overrideGroupSigningCertificate");
    openapiFields.add("sha2AlgorithmFormat");
    openapiFields.add("signingCertificateName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("enableNRRForInboundDecodedMessages");
    openapiRequiredFields.add("enableNRRForInboundEncodedMessages");
    openapiRequiredFields.add("enableNRRForInboundMDN");
    openapiRequiredFields.add("enableNRRForOutboundDecodedMessages");
    openapiRequiredFields.add("enableNRRForOutboundEncodedMessages");
    openapiRequiredFields.add("enableNRRForOutboundMDN");
    openapiRequiredFields.add("overrideGroupSigningCertificate");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2SecuritySettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2SecuritySettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2SecuritySettings is not found in the empty JSON string", AS2SecuritySettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2SecuritySettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2SecuritySettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AS2SecuritySettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("encryptionCertificateName") != null && !jsonObj.get("encryptionCertificateName").isJsonNull()) && !jsonObj.get("encryptionCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `encryptionCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("encryptionCertificateName").toString()));
      }
      if ((jsonObj.get("sha2AlgorithmFormat") != null && !jsonObj.get("sha2AlgorithmFormat").isJsonNull()) && !jsonObj.get("sha2AlgorithmFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sha2AlgorithmFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sha2AlgorithmFormat").toString()));
      }
      if ((jsonObj.get("signingCertificateName") != null && !jsonObj.get("signingCertificateName").isJsonNull()) && !jsonObj.get("signingCertificateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signingCertificateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signingCertificateName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2SecuritySettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2SecuritySettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2SecuritySettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2SecuritySettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2SecuritySettings>() {
           @Override
           public void write(JsonWriter out, AS2SecuritySettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2SecuritySettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2SecuritySettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2SecuritySettings
   * @throws IOException if the JSON string is invalid with respect to AS2SecuritySettings
   */
  public static AS2SecuritySettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2SecuritySettings.class);
  }

  /**
   * Convert an instance of AS2SecuritySettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

