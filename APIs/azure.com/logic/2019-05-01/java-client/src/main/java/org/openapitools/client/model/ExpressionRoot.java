/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AzureResourceErrorInfo;
import org.openapitools.client.model.Expression;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The expression root.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressionRoot {
  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private AzureResourceErrorInfo error;

  public static final String SERIALIZED_NAME_SUBEXPRESSIONS = "subexpressions";
  @SerializedName(SERIALIZED_NAME_SUBEXPRESSIONS)
  private List<Expression> subexpressions = new ArrayList<>();

  public static final String SERIALIZED_NAME_TEXT = "text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value;

  public ExpressionRoot() {
  }

  public ExpressionRoot path(String path) {
    this.path = path;
    return this;
  }

  /**
   * The path.
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public ExpressionRoot error(AzureResourceErrorInfo error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public AzureResourceErrorInfo getError() {
    return error;
  }

  public void setError(AzureResourceErrorInfo error) {
    this.error = error;
  }


  public ExpressionRoot subexpressions(List<Expression> subexpressions) {
    this.subexpressions = subexpressions;
    return this;
  }

  public ExpressionRoot addSubexpressionsItem(Expression subexpressionsItem) {
    if (this.subexpressions == null) {
      this.subexpressions = new ArrayList<>();
    }
    this.subexpressions.add(subexpressionsItem);
    return this;
  }

  /**
   * The sub expressions.
   * @return subexpressions
   */
  @javax.annotation.Nullable
  public List<Expression> getSubexpressions() {
    return subexpressions;
  }

  public void setSubexpressions(List<Expression> subexpressions) {
    this.subexpressions = subexpressions;
  }


  public ExpressionRoot text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public ExpressionRoot value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * Get value
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressionRoot expressionRoot = (ExpressionRoot) o;
    return Objects.equals(this.path, expressionRoot.path) &&
        Objects.equals(this.error, expressionRoot.error) &&
        Objects.equals(this.subexpressions, expressionRoot.subexpressions) &&
        Objects.equals(this.text, expressionRoot.text) &&
        Objects.equals(this.value, expressionRoot.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(path, error, subexpressions, text, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressionRoot {\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    subexpressions: ").append(toIndentedString(subexpressions)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("error");
    openapiFields.add("subexpressions");
    openapiFields.add("text");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressionRoot
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressionRoot.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressionRoot is not found in the empty JSON string", ExpressionRoot.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressionRoot.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressionRoot` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        AzureResourceErrorInfo.validateJsonElement(jsonObj.get("error"));
      }
      if (jsonObj.get("subexpressions") != null && !jsonObj.get("subexpressions").isJsonNull()) {
        JsonArray jsonArraysubexpressions = jsonObj.getAsJsonArray("subexpressions");
        if (jsonArraysubexpressions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subexpressions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subexpressions` to be an array in the JSON string but got `%s`", jsonObj.get("subexpressions").toString()));
          }

          // validate the optional field `subexpressions` (array)
          for (int i = 0; i < jsonArraysubexpressions.size(); i++) {
            Expression.validateJsonElement(jsonArraysubexpressions.get(i));
          };
        }
      }
      if ((jsonObj.get("text") != null && !jsonObj.get("text").isJsonNull()) && !jsonObj.get("text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("text").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressionRoot.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressionRoot' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressionRoot> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressionRoot.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressionRoot>() {
           @Override
           public void write(JsonWriter out, ExpressionRoot value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressionRoot read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressionRoot given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressionRoot
   * @throws IOException if the JSON string is invalid with respect to ExpressionRoot
   */
  public static ExpressionRoot fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressionRoot.class);
  }

  /**
   * Convert an instance of ExpressionRoot to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

