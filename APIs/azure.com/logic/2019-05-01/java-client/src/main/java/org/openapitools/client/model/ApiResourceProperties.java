/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.ApiResourceBackendService;
import org.openapitools.client.model.ApiResourceDefinitions;
import org.openapitools.client.model.ApiResourceGeneralInformation;
import org.openapitools.client.model.ApiResourceMetadata;
import org.openapitools.client.model.ApiResourcePolicies;
import org.openapitools.client.model.ApiTier;
import org.openapitools.client.model.ResourceReference;
import org.openapitools.client.model.WorkflowProvisioningState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The API resource properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiResourceProperties {
  public static final String SERIALIZED_NAME_API_DEFINITION_URL = "apiDefinitionUrl";
  @SerializedName(SERIALIZED_NAME_API_DEFINITION_URL)
  private String apiDefinitionUrl;

  public static final String SERIALIZED_NAME_API_DEFINITIONS = "apiDefinitions";
  @SerializedName(SERIALIZED_NAME_API_DEFINITIONS)
  private ApiResourceDefinitions apiDefinitions;

  public static final String SERIALIZED_NAME_BACKEND_SERVICE = "backendService";
  @SerializedName(SERIALIZED_NAME_BACKEND_SERVICE)
  private ApiResourceBackendService backendService;

  public static final String SERIALIZED_NAME_CAPABILITIES = "capabilities";
  @SerializedName(SERIALIZED_NAME_CAPABILITIES)
  private List<String> capabilities = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private ApiTier category;

  public static final String SERIALIZED_NAME_CONNECTION_PARAMETERS = "connectionParameters";
  @SerializedName(SERIALIZED_NAME_CONNECTION_PARAMETERS)
  private Map<String, Object> connectionParameters = new HashMap<>();

  public static final String SERIALIZED_NAME_GENERAL_INFORMATION = "generalInformation";
  @SerializedName(SERIALIZED_NAME_GENERAL_INFORMATION)
  private ApiResourceGeneralInformation generalInformation;

  public static final String SERIALIZED_NAME_INTEGRATION_SERVICE_ENVIRONMENT = "integrationServiceEnvironment";
  @SerializedName(SERIALIZED_NAME_INTEGRATION_SERVICE_ENVIRONMENT)
  private ResourceReference integrationServiceEnvironment;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private ApiResourceMetadata metadata;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_POLICIES = "policies";
  @SerializedName(SERIALIZED_NAME_POLICIES)
  private ApiResourcePolicies policies;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private WorkflowProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_RUNTIME_URLS = "runtimeUrls";
  @SerializedName(SERIALIZED_NAME_RUNTIME_URLS)
  private List<String> runtimeUrls = new ArrayList<>();

  public ApiResourceProperties() {
  }

  public ApiResourceProperties apiDefinitionUrl(String apiDefinitionUrl) {
    this.apiDefinitionUrl = apiDefinitionUrl;
    return this;
  }

  /**
   * The API definition.
   * @return apiDefinitionUrl
   */
  @javax.annotation.Nullable
  public String getApiDefinitionUrl() {
    return apiDefinitionUrl;
  }

  public void setApiDefinitionUrl(String apiDefinitionUrl) {
    this.apiDefinitionUrl = apiDefinitionUrl;
  }


  public ApiResourceProperties apiDefinitions(ApiResourceDefinitions apiDefinitions) {
    this.apiDefinitions = apiDefinitions;
    return this;
  }

  /**
   * Get apiDefinitions
   * @return apiDefinitions
   */
  @javax.annotation.Nullable
  public ApiResourceDefinitions getApiDefinitions() {
    return apiDefinitions;
  }

  public void setApiDefinitions(ApiResourceDefinitions apiDefinitions) {
    this.apiDefinitions = apiDefinitions;
  }


  public ApiResourceProperties backendService(ApiResourceBackendService backendService) {
    this.backendService = backendService;
    return this;
  }

  /**
   * Get backendService
   * @return backendService
   */
  @javax.annotation.Nullable
  public ApiResourceBackendService getBackendService() {
    return backendService;
  }

  public void setBackendService(ApiResourceBackendService backendService) {
    this.backendService = backendService;
  }


  public ApiResourceProperties capabilities(List<String> capabilities) {
    this.capabilities = capabilities;
    return this;
  }

  public ApiResourceProperties addCapabilitiesItem(String capabilitiesItem) {
    if (this.capabilities == null) {
      this.capabilities = new ArrayList<>();
    }
    this.capabilities.add(capabilitiesItem);
    return this;
  }

  /**
   * The capabilities.
   * @return capabilities
   */
  @javax.annotation.Nullable
  public List<String> getCapabilities() {
    return capabilities;
  }

  public void setCapabilities(List<String> capabilities) {
    this.capabilities = capabilities;
  }


  public ApiResourceProperties category(ApiTier category) {
    this.category = category;
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public ApiTier getCategory() {
    return category;
  }

  public void setCategory(ApiTier category) {
    this.category = category;
  }


  public ApiResourceProperties connectionParameters(Map<String, Object> connectionParameters) {
    this.connectionParameters = connectionParameters;
    return this;
  }

  public ApiResourceProperties putConnectionParametersItem(String key, Object connectionParametersItem) {
    if (this.connectionParameters == null) {
      this.connectionParameters = new HashMap<>();
    }
    this.connectionParameters.put(key, connectionParametersItem);
    return this;
  }

  /**
   * The connection parameters.
   * @return connectionParameters
   */
  @javax.annotation.Nullable
  public Map<String, Object> getConnectionParameters() {
    return connectionParameters;
  }

  public void setConnectionParameters(Map<String, Object> connectionParameters) {
    this.connectionParameters = connectionParameters;
  }


  public ApiResourceProperties generalInformation(ApiResourceGeneralInformation generalInformation) {
    this.generalInformation = generalInformation;
    return this;
  }

  /**
   * Get generalInformation
   * @return generalInformation
   */
  @javax.annotation.Nullable
  public ApiResourceGeneralInformation getGeneralInformation() {
    return generalInformation;
  }

  public void setGeneralInformation(ApiResourceGeneralInformation generalInformation) {
    this.generalInformation = generalInformation;
  }


  public ApiResourceProperties integrationServiceEnvironment(ResourceReference integrationServiceEnvironment) {
    this.integrationServiceEnvironment = integrationServiceEnvironment;
    return this;
  }

  /**
   * Get integrationServiceEnvironment
   * @return integrationServiceEnvironment
   */
  @javax.annotation.Nullable
  public ResourceReference getIntegrationServiceEnvironment() {
    return integrationServiceEnvironment;
  }

  public void setIntegrationServiceEnvironment(ResourceReference integrationServiceEnvironment) {
    this.integrationServiceEnvironment = integrationServiceEnvironment;
  }


  public ApiResourceProperties metadata(ApiResourceMetadata metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Get metadata
   * @return metadata
   */
  @javax.annotation.Nullable
  public ApiResourceMetadata getMetadata() {
    return metadata;
  }

  public void setMetadata(ApiResourceMetadata metadata) {
    this.metadata = metadata;
  }


  public ApiResourceProperties name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApiResourceProperties policies(ApiResourcePolicies policies) {
    this.policies = policies;
    return this;
  }

  /**
   * Get policies
   * @return policies
   */
  @javax.annotation.Nullable
  public ApiResourcePolicies getPolicies() {
    return policies;
  }

  public void setPolicies(ApiResourcePolicies policies) {
    this.policies = policies;
  }


  public ApiResourceProperties provisioningState(WorkflowProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public WorkflowProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(WorkflowProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApiResourceProperties runtimeUrls(List<String> runtimeUrls) {
    this.runtimeUrls = runtimeUrls;
    return this;
  }

  public ApiResourceProperties addRuntimeUrlsItem(String runtimeUrlsItem) {
    if (this.runtimeUrls == null) {
      this.runtimeUrls = new ArrayList<>();
    }
    this.runtimeUrls.add(runtimeUrlsItem);
    return this;
  }

  /**
   * The runtime urls.
   * @return runtimeUrls
   */
  @javax.annotation.Nullable
  public List<String> getRuntimeUrls() {
    return runtimeUrls;
  }

  public void setRuntimeUrls(List<String> runtimeUrls) {
    this.runtimeUrls = runtimeUrls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiResourceProperties apiResourceProperties = (ApiResourceProperties) o;
    return Objects.equals(this.apiDefinitionUrl, apiResourceProperties.apiDefinitionUrl) &&
        Objects.equals(this.apiDefinitions, apiResourceProperties.apiDefinitions) &&
        Objects.equals(this.backendService, apiResourceProperties.backendService) &&
        Objects.equals(this.capabilities, apiResourceProperties.capabilities) &&
        Objects.equals(this.category, apiResourceProperties.category) &&
        Objects.equals(this.connectionParameters, apiResourceProperties.connectionParameters) &&
        Objects.equals(this.generalInformation, apiResourceProperties.generalInformation) &&
        Objects.equals(this.integrationServiceEnvironment, apiResourceProperties.integrationServiceEnvironment) &&
        Objects.equals(this.metadata, apiResourceProperties.metadata) &&
        Objects.equals(this.name, apiResourceProperties.name) &&
        Objects.equals(this.policies, apiResourceProperties.policies) &&
        Objects.equals(this.provisioningState, apiResourceProperties.provisioningState) &&
        Objects.equals(this.runtimeUrls, apiResourceProperties.runtimeUrls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiDefinitionUrl, apiDefinitions, backendService, capabilities, category, connectionParameters, generalInformation, integrationServiceEnvironment, metadata, name, policies, provisioningState, runtimeUrls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiResourceProperties {\n");
    sb.append("    apiDefinitionUrl: ").append(toIndentedString(apiDefinitionUrl)).append("\n");
    sb.append("    apiDefinitions: ").append(toIndentedString(apiDefinitions)).append("\n");
    sb.append("    backendService: ").append(toIndentedString(backendService)).append("\n");
    sb.append("    capabilities: ").append(toIndentedString(capabilities)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    connectionParameters: ").append(toIndentedString(connectionParameters)).append("\n");
    sb.append("    generalInformation: ").append(toIndentedString(generalInformation)).append("\n");
    sb.append("    integrationServiceEnvironment: ").append(toIndentedString(integrationServiceEnvironment)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    policies: ").append(toIndentedString(policies)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    runtimeUrls: ").append(toIndentedString(runtimeUrls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apiDefinitionUrl");
    openapiFields.add("apiDefinitions");
    openapiFields.add("backendService");
    openapiFields.add("capabilities");
    openapiFields.add("category");
    openapiFields.add("connectionParameters");
    openapiFields.add("generalInformation");
    openapiFields.add("integrationServiceEnvironment");
    openapiFields.add("metadata");
    openapiFields.add("name");
    openapiFields.add("policies");
    openapiFields.add("provisioningState");
    openapiFields.add("runtimeUrls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiResourceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiResourceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiResourceProperties is not found in the empty JSON string", ApiResourceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiResourceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiResourceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apiDefinitionUrl") != null && !jsonObj.get("apiDefinitionUrl").isJsonNull()) && !jsonObj.get("apiDefinitionUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apiDefinitionUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apiDefinitionUrl").toString()));
      }
      // validate the optional field `apiDefinitions`
      if (jsonObj.get("apiDefinitions") != null && !jsonObj.get("apiDefinitions").isJsonNull()) {
        ApiResourceDefinitions.validateJsonElement(jsonObj.get("apiDefinitions"));
      }
      // validate the optional field `backendService`
      if (jsonObj.get("backendService") != null && !jsonObj.get("backendService").isJsonNull()) {
        ApiResourceBackendService.validateJsonElement(jsonObj.get("backendService"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("capabilities") != null && !jsonObj.get("capabilities").isJsonNull() && !jsonObj.get("capabilities").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `capabilities` to be an array in the JSON string but got `%s`", jsonObj.get("capabilities").toString()));
      }
      // validate the optional field `category`
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull()) {
        ApiTier.validateJsonElement(jsonObj.get("category"));
      }
      // validate the optional field `generalInformation`
      if (jsonObj.get("generalInformation") != null && !jsonObj.get("generalInformation").isJsonNull()) {
        ApiResourceGeneralInformation.validateJsonElement(jsonObj.get("generalInformation"));
      }
      // validate the optional field `integrationServiceEnvironment`
      if (jsonObj.get("integrationServiceEnvironment") != null && !jsonObj.get("integrationServiceEnvironment").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("integrationServiceEnvironment"));
      }
      // validate the optional field `metadata`
      if (jsonObj.get("metadata") != null && !jsonObj.get("metadata").isJsonNull()) {
        ApiResourceMetadata.validateJsonElement(jsonObj.get("metadata"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `policies`
      if (jsonObj.get("policies") != null && !jsonObj.get("policies").isJsonNull()) {
        ApiResourcePolicies.validateJsonElement(jsonObj.get("policies"));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        WorkflowProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("runtimeUrls") != null && !jsonObj.get("runtimeUrls").isJsonNull() && !jsonObj.get("runtimeUrls").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `runtimeUrls` to be an array in the JSON string but got `%s`", jsonObj.get("runtimeUrls").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiResourceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiResourceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiResourceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiResourceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiResourceProperties>() {
           @Override
           public void write(JsonWriter out, ApiResourceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiResourceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiResourceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiResourceProperties
   * @throws IOException if the JSON string is invalid with respect to ApiResourceProperties
   */
  public static ApiResourceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiResourceProperties.class);
  }

  /**
   * Convert an instance of ApiResourceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

