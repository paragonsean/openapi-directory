/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Gets the workflow trigger callback URL query parameters.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowTriggerListCallbackUrlQueries {
  public static final String SERIALIZED_NAME_API_VERSION = "api-version";
  @SerializedName(SERIALIZED_NAME_API_VERSION)
  private String apiVersion;

  public static final String SERIALIZED_NAME_SE = "se";
  @SerializedName(SERIALIZED_NAME_SE)
  private String se;

  public static final String SERIALIZED_NAME_SIG = "sig";
  @SerializedName(SERIALIZED_NAME_SIG)
  private String sig;

  public static final String SERIALIZED_NAME_SP = "sp";
  @SerializedName(SERIALIZED_NAME_SP)
  private String sp;

  public static final String SERIALIZED_NAME_SV = "sv";
  @SerializedName(SERIALIZED_NAME_SV)
  private String sv;

  public WorkflowTriggerListCallbackUrlQueries() {
  }

  public WorkflowTriggerListCallbackUrlQueries apiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
    return this;
  }

  /**
   * The api version.
   * @return apiVersion
   */
  @javax.annotation.Nullable
  public String getApiVersion() {
    return apiVersion;
  }

  public void setApiVersion(String apiVersion) {
    this.apiVersion = apiVersion;
  }


  public WorkflowTriggerListCallbackUrlQueries se(String se) {
    this.se = se;
    return this;
  }

  /**
   * The SAS timestamp.
   * @return se
   */
  @javax.annotation.Nullable
  public String getSe() {
    return se;
  }

  public void setSe(String se) {
    this.se = se;
  }


  public WorkflowTriggerListCallbackUrlQueries sig(String sig) {
    this.sig = sig;
    return this;
  }

  /**
   * The SAS signature.
   * @return sig
   */
  @javax.annotation.Nullable
  public String getSig() {
    return sig;
  }

  public void setSig(String sig) {
    this.sig = sig;
  }


  public WorkflowTriggerListCallbackUrlQueries sp(String sp) {
    this.sp = sp;
    return this;
  }

  /**
   * The SAS permissions.
   * @return sp
   */
  @javax.annotation.Nullable
  public String getSp() {
    return sp;
  }

  public void setSp(String sp) {
    this.sp = sp;
  }


  public WorkflowTriggerListCallbackUrlQueries sv(String sv) {
    this.sv = sv;
    return this;
  }

  /**
   * The SAS version.
   * @return sv
   */
  @javax.annotation.Nullable
  public String getSv() {
    return sv;
  }

  public void setSv(String sv) {
    this.sv = sv;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowTriggerListCallbackUrlQueries workflowTriggerListCallbackUrlQueries = (WorkflowTriggerListCallbackUrlQueries) o;
    return Objects.equals(this.apiVersion, workflowTriggerListCallbackUrlQueries.apiVersion) &&
        Objects.equals(this.se, workflowTriggerListCallbackUrlQueries.se) &&
        Objects.equals(this.sig, workflowTriggerListCallbackUrlQueries.sig) &&
        Objects.equals(this.sp, workflowTriggerListCallbackUrlQueries.sp) &&
        Objects.equals(this.sv, workflowTriggerListCallbackUrlQueries.sv);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiVersion, se, sig, sp, sv);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowTriggerListCallbackUrlQueries {\n");
    sb.append("    apiVersion: ").append(toIndentedString(apiVersion)).append("\n");
    sb.append("    se: ").append(toIndentedString(se)).append("\n");
    sb.append("    sig: ").append(toIndentedString(sig)).append("\n");
    sb.append("    sp: ").append(toIndentedString(sp)).append("\n");
    sb.append("    sv: ").append(toIndentedString(sv)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("api-version");
    openapiFields.add("se");
    openapiFields.add("sig");
    openapiFields.add("sp");
    openapiFields.add("sv");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowTriggerListCallbackUrlQueries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowTriggerListCallbackUrlQueries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowTriggerListCallbackUrlQueries is not found in the empty JSON string", WorkflowTriggerListCallbackUrlQueries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowTriggerListCallbackUrlQueries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowTriggerListCallbackUrlQueries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("api-version") != null && !jsonObj.get("api-version").isJsonNull()) && !jsonObj.get("api-version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `api-version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("api-version").toString()));
      }
      if ((jsonObj.get("se") != null && !jsonObj.get("se").isJsonNull()) && !jsonObj.get("se").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `se` to be a primitive type in the JSON string but got `%s`", jsonObj.get("se").toString()));
      }
      if ((jsonObj.get("sig") != null && !jsonObj.get("sig").isJsonNull()) && !jsonObj.get("sig").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sig` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sig").toString()));
      }
      if ((jsonObj.get("sp") != null && !jsonObj.get("sp").isJsonNull()) && !jsonObj.get("sp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sp").toString()));
      }
      if ((jsonObj.get("sv") != null && !jsonObj.get("sv").isJsonNull()) && !jsonObj.get("sv").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sv` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sv").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowTriggerListCallbackUrlQueries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowTriggerListCallbackUrlQueries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowTriggerListCallbackUrlQueries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowTriggerListCallbackUrlQueries.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowTriggerListCallbackUrlQueries>() {
           @Override
           public void write(JsonWriter out, WorkflowTriggerListCallbackUrlQueries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowTriggerListCallbackUrlQueries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowTriggerListCallbackUrlQueries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowTriggerListCallbackUrlQueries
   * @throws IOException if the JSON string is invalid with respect to WorkflowTriggerListCallbackUrlQueries
   */
  public static WorkflowTriggerListCallbackUrlQueries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowTriggerListCallbackUrlQueries.class);
  }

  /**
   * Convert an instance of WorkflowTriggerListCallbackUrlQueries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

