/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ApiDeploymentParameterMetadataSet;
import org.openapitools.client.model.ApiType;
import org.openapitools.client.model.WorkflowProvisioningState;
import org.openapitools.client.model.WsdlImportMethod;
import org.openapitools.client.model.WsdlService;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The api resource metadata.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiResourceMetadata {
  public static final String SERIALIZED_NAME_API_TYPE = "ApiType";
  @SerializedName(SERIALIZED_NAME_API_TYPE)
  private ApiType apiType;

  public static final String SERIALIZED_NAME_BRAND_COLOR = "brandColor";
  @SerializedName(SERIALIZED_NAME_BRAND_COLOR)
  private String brandColor;

  public static final String SERIALIZED_NAME_CONNECTION_TYPE = "connectionType";
  @SerializedName(SERIALIZED_NAME_CONNECTION_TYPE)
  private String connectionType;

  public static final String SERIALIZED_NAME_DEPLOYMENT_PARAMETERS = "deploymentParameters";
  @SerializedName(SERIALIZED_NAME_DEPLOYMENT_PARAMETERS)
  private ApiDeploymentParameterMetadataSet deploymentParameters;

  public static final String SERIALIZED_NAME_HIDE_KEY = "hideKey";
  @SerializedName(SERIALIZED_NAME_HIDE_KEY)
  private String hideKey;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private WorkflowProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private Map<String, String> tags = new HashMap<>();

  public static final String SERIALIZED_NAME_WSDL_IMPORT_METHOD = "wsdlImportMethod";
  @SerializedName(SERIALIZED_NAME_WSDL_IMPORT_METHOD)
  private WsdlImportMethod wsdlImportMethod;

  public static final String SERIALIZED_NAME_WSDL_SERVICE = "wsdlService";
  @SerializedName(SERIALIZED_NAME_WSDL_SERVICE)
  private WsdlService wsdlService;

  public ApiResourceMetadata() {
  }

  public ApiResourceMetadata apiType(ApiType apiType) {
    this.apiType = apiType;
    return this;
  }

  /**
   * Get apiType
   * @return apiType
   */
  @javax.annotation.Nullable
  public ApiType getApiType() {
    return apiType;
  }

  public void setApiType(ApiType apiType) {
    this.apiType = apiType;
  }


  public ApiResourceMetadata brandColor(String brandColor) {
    this.brandColor = brandColor;
    return this;
  }

  /**
   * The brand color.
   * @return brandColor
   */
  @javax.annotation.Nullable
  public String getBrandColor() {
    return brandColor;
  }

  public void setBrandColor(String brandColor) {
    this.brandColor = brandColor;
  }


  public ApiResourceMetadata connectionType(String connectionType) {
    this.connectionType = connectionType;
    return this;
  }

  /**
   * The connection type.
   * @return connectionType
   */
  @javax.annotation.Nullable
  public String getConnectionType() {
    return connectionType;
  }

  public void setConnectionType(String connectionType) {
    this.connectionType = connectionType;
  }


  public ApiResourceMetadata deploymentParameters(ApiDeploymentParameterMetadataSet deploymentParameters) {
    this.deploymentParameters = deploymentParameters;
    return this;
  }

  /**
   * Get deploymentParameters
   * @return deploymentParameters
   */
  @javax.annotation.Nullable
  public ApiDeploymentParameterMetadataSet getDeploymentParameters() {
    return deploymentParameters;
  }

  public void setDeploymentParameters(ApiDeploymentParameterMetadataSet deploymentParameters) {
    this.deploymentParameters = deploymentParameters;
  }


  public ApiResourceMetadata hideKey(String hideKey) {
    this.hideKey = hideKey;
    return this;
  }

  /**
   * The hide key.
   * @return hideKey
   */
  @javax.annotation.Nullable
  public String getHideKey() {
    return hideKey;
  }

  public void setHideKey(String hideKey) {
    this.hideKey = hideKey;
  }


  public ApiResourceMetadata provisioningState(WorkflowProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public WorkflowProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(WorkflowProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ApiResourceMetadata source(String source) {
    this.source = source;
    return this;
  }

  /**
   * The source.
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public ApiResourceMetadata tags(Map<String, String> tags) {
    this.tags = tags;
    return this;
  }

  public ApiResourceMetadata putTagsItem(String key, String tagsItem) {
    if (this.tags == null) {
      this.tags = new HashMap<>();
    }
    this.tags.put(key, tagsItem);
    return this;
  }

  /**
   * The tags.
   * @return tags
   */
  @javax.annotation.Nullable
  public Map<String, String> getTags() {
    return tags;
  }

  public void setTags(Map<String, String> tags) {
    this.tags = tags;
  }


  public ApiResourceMetadata wsdlImportMethod(WsdlImportMethod wsdlImportMethod) {
    this.wsdlImportMethod = wsdlImportMethod;
    return this;
  }

  /**
   * Get wsdlImportMethod
   * @return wsdlImportMethod
   */
  @javax.annotation.Nullable
  public WsdlImportMethod getWsdlImportMethod() {
    return wsdlImportMethod;
  }

  public void setWsdlImportMethod(WsdlImportMethod wsdlImportMethod) {
    this.wsdlImportMethod = wsdlImportMethod;
  }


  public ApiResourceMetadata wsdlService(WsdlService wsdlService) {
    this.wsdlService = wsdlService;
    return this;
  }

  /**
   * Get wsdlService
   * @return wsdlService
   */
  @javax.annotation.Nullable
  public WsdlService getWsdlService() {
    return wsdlService;
  }

  public void setWsdlService(WsdlService wsdlService) {
    this.wsdlService = wsdlService;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiResourceMetadata apiResourceMetadata = (ApiResourceMetadata) o;
    return Objects.equals(this.apiType, apiResourceMetadata.apiType) &&
        Objects.equals(this.brandColor, apiResourceMetadata.brandColor) &&
        Objects.equals(this.connectionType, apiResourceMetadata.connectionType) &&
        Objects.equals(this.deploymentParameters, apiResourceMetadata.deploymentParameters) &&
        Objects.equals(this.hideKey, apiResourceMetadata.hideKey) &&
        Objects.equals(this.provisioningState, apiResourceMetadata.provisioningState) &&
        Objects.equals(this.source, apiResourceMetadata.source) &&
        Objects.equals(this.tags, apiResourceMetadata.tags) &&
        Objects.equals(this.wsdlImportMethod, apiResourceMetadata.wsdlImportMethod) &&
        Objects.equals(this.wsdlService, apiResourceMetadata.wsdlService);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apiType, brandColor, connectionType, deploymentParameters, hideKey, provisioningState, source, tags, wsdlImportMethod, wsdlService);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiResourceMetadata {\n");
    sb.append("    apiType: ").append(toIndentedString(apiType)).append("\n");
    sb.append("    brandColor: ").append(toIndentedString(brandColor)).append("\n");
    sb.append("    connectionType: ").append(toIndentedString(connectionType)).append("\n");
    sb.append("    deploymentParameters: ").append(toIndentedString(deploymentParameters)).append("\n");
    sb.append("    hideKey: ").append(toIndentedString(hideKey)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    wsdlImportMethod: ").append(toIndentedString(wsdlImportMethod)).append("\n");
    sb.append("    wsdlService: ").append(toIndentedString(wsdlService)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ApiType");
    openapiFields.add("brandColor");
    openapiFields.add("connectionType");
    openapiFields.add("deploymentParameters");
    openapiFields.add("hideKey");
    openapiFields.add("provisioningState");
    openapiFields.add("source");
    openapiFields.add("tags");
    openapiFields.add("wsdlImportMethod");
    openapiFields.add("wsdlService");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiResourceMetadata
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiResourceMetadata.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiResourceMetadata is not found in the empty JSON string", ApiResourceMetadata.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiResourceMetadata.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiResourceMetadata` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `ApiType`
      if (jsonObj.get("ApiType") != null && !jsonObj.get("ApiType").isJsonNull()) {
        ApiType.validateJsonElement(jsonObj.get("ApiType"));
      }
      if ((jsonObj.get("brandColor") != null && !jsonObj.get("brandColor").isJsonNull()) && !jsonObj.get("brandColor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `brandColor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("brandColor").toString()));
      }
      if ((jsonObj.get("connectionType") != null && !jsonObj.get("connectionType").isJsonNull()) && !jsonObj.get("connectionType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectionType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectionType").toString()));
      }
      // validate the optional field `deploymentParameters`
      if (jsonObj.get("deploymentParameters") != null && !jsonObj.get("deploymentParameters").isJsonNull()) {
        ApiDeploymentParameterMetadataSet.validateJsonElement(jsonObj.get("deploymentParameters"));
      }
      if ((jsonObj.get("hideKey") != null && !jsonObj.get("hideKey").isJsonNull()) && !jsonObj.get("hideKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hideKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hideKey").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        WorkflowProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      // validate the optional field `wsdlImportMethod`
      if (jsonObj.get("wsdlImportMethod") != null && !jsonObj.get("wsdlImportMethod").isJsonNull()) {
        WsdlImportMethod.validateJsonElement(jsonObj.get("wsdlImportMethod"));
      }
      // validate the optional field `wsdlService`
      if (jsonObj.get("wsdlService") != null && !jsonObj.get("wsdlService").isJsonNull()) {
        WsdlService.validateJsonElement(jsonObj.get("wsdlService"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiResourceMetadata.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiResourceMetadata' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiResourceMetadata> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiResourceMetadata.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiResourceMetadata>() {
           @Override
           public void write(JsonWriter out, ApiResourceMetadata value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiResourceMetadata read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiResourceMetadata given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiResourceMetadata
   * @throws IOException if the JSON string is invalid with respect to ApiResourceMetadata
   */
  public static ApiResourceMetadata fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiResourceMetadata.class);
  }

  /**
   * Convert an instance of ApiResourceMetadata to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

