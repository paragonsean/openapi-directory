/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.BatchConfiguration;
import org.openapitools.client.model.BatchConfigurationCollection;
import org.openapitools.client.model.ErrorResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationAccountBatchConfigurationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationAccountBatchConfigurationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationAccountBatchConfigurationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for integrationAccountBatchConfigurationsCreateOrUpdate
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param batchConfiguration The batch configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, BatchConfiguration batchConfiguration, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = batchConfiguration;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()))
            .replace("{" + "batchConfigurationName" + "}", localVarApiClient.escapeString(batchConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationAccountBatchConfigurationsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, BatchConfiguration batchConfiguration, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'batchConfigurationName' is set
        if (batchConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'batchConfigurationName' when calling integrationAccountBatchConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'batchConfiguration' is set
        if (batchConfiguration == null) {
            throw new ApiException("Missing the required parameter 'batchConfiguration' when calling integrationAccountBatchConfigurationsCreateOrUpdate(Async)");
        }

        return integrationAccountBatchConfigurationsCreateOrUpdateCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, batchConfiguration, _callback);

    }

    /**
     * 
     * Create or update a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param batchConfiguration The batch configuration. (required)
     * @return BatchConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BatchConfiguration integrationAccountBatchConfigurationsCreateOrUpdate(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, BatchConfiguration batchConfiguration) throws ApiException {
        ApiResponse<BatchConfiguration> localVarResp = integrationAccountBatchConfigurationsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, batchConfiguration);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param batchConfiguration The batch configuration. (required)
     * @return ApiResponse&lt;BatchConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchConfiguration> integrationAccountBatchConfigurationsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, BatchConfiguration batchConfiguration) throws ApiException {
        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, batchConfiguration, null);
        Type localVarReturnType = new TypeToken<BatchConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param batchConfiguration The batch configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, BatchConfiguration batchConfiguration, final ApiCallback<BatchConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, batchConfiguration, _callback);
        Type localVarReturnType = new TypeToken<BatchConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationAccountBatchConfigurationsDelete
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsDeleteCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()))
            .replace("{" + "batchConfigurationName" + "}", localVarApiClient.escapeString(batchConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationAccountBatchConfigurationsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsDelete(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsDelete(Async)");
        }

        // verify the required parameter 'batchConfigurationName' is set
        if (batchConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'batchConfigurationName' when calling integrationAccountBatchConfigurationsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsDelete(Async)");
        }

        return integrationAccountBatchConfigurationsDeleteCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, _callback);

    }

    /**
     * 
     * Delete a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void integrationAccountBatchConfigurationsDelete(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion) throws ApiException {
        integrationAccountBatchConfigurationsDeleteWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion);
    }

    /**
     * 
     * Delete a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> integrationAccountBatchConfigurationsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsDeleteAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationAccountBatchConfigurationsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsGetCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()))
            .replace("{" + "batchConfigurationName" + "}", localVarApiClient.escapeString(batchConfigurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationAccountBatchConfigurationsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsGet(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsGet(Async)");
        }

        // verify the required parameter 'batchConfigurationName' is set
        if (batchConfigurationName == null) {
            throw new ApiException("Missing the required parameter 'batchConfigurationName' when calling integrationAccountBatchConfigurationsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsGet(Async)");
        }

        return integrationAccountBatchConfigurationsGetCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, _callback);

    }

    /**
     * 
     * Get a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @return BatchConfiguration
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BatchConfiguration integrationAccountBatchConfigurationsGet(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion) throws ApiException {
        ApiResponse<BatchConfiguration> localVarResp = integrationAccountBatchConfigurationsGetWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;BatchConfiguration&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchConfiguration> integrationAccountBatchConfigurationsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsGetValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BatchConfiguration>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a batch configuration for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param batchConfigurationName The batch configuration name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsGetAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String batchConfigurationName, String apiVersion, final ApiCallback<BatchConfiguration> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsGetValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BatchConfiguration>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for integrationAccountBatchConfigurationsList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsListCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call integrationAccountBatchConfigurationsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsList(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsList(Async)");
        }

        return integrationAccountBatchConfigurationsListCall(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, _callback);

    }

    /**
     * 
     * List the batch configurations for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @return BatchConfigurationCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public BatchConfigurationCollection integrationAccountBatchConfigurationsList(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion) throws ApiException {
        ApiResponse<BatchConfigurationCollection> localVarResp = integrationAccountBatchConfigurationsListWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List the batch configurations for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;BatchConfigurationCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchConfigurationCollection> integrationAccountBatchConfigurationsListWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsListValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, null);
        Type localVarReturnType = new TypeToken<BatchConfigurationCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the batch configurations for an integration account.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call integrationAccountBatchConfigurationsListAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, final ApiCallback<BatchConfigurationCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = integrationAccountBatchConfigurationsListValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<BatchConfigurationCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
