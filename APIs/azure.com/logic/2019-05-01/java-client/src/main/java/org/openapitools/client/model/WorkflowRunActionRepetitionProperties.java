/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContentLink;
import org.openapitools.client.model.RepetitionIndex;
import org.openapitools.client.model.RetryHistory;
import org.openapitools.client.model.RunActionCorrelation;
import org.openapitools.client.model.WorkflowStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The workflow run action repetition properties definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowRunActionRepetitionProperties {
  public static final String SERIALIZED_NAME_REPETITION_INDEXES = "repetitionIndexes";
  @SerializedName(SERIALIZED_NAME_REPETITION_INDEXES)
  private List<RepetitionIndex> repetitionIndexes = new ArrayList<>();

  public static final String SERIALIZED_NAME_INPUTS = "inputs";
  @SerializedName(SERIALIZED_NAME_INPUTS)
  private Object inputs;

  public static final String SERIALIZED_NAME_INPUTS_LINK = "inputsLink";
  @SerializedName(SERIALIZED_NAME_INPUTS_LINK)
  private ContentLink inputsLink;

  public static final String SERIALIZED_NAME_ITERATION_COUNT = "iterationCount";
  @SerializedName(SERIALIZED_NAME_ITERATION_COUNT)
  private Integer iterationCount;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Object outputs;

  public static final String SERIALIZED_NAME_OUTPUTS_LINK = "outputsLink";
  @SerializedName(SERIALIZED_NAME_OUTPUTS_LINK)
  private ContentLink outputsLink;

  public static final String SERIALIZED_NAME_RETRY_HISTORY = "retryHistory";
  @SerializedName(SERIALIZED_NAME_RETRY_HISTORY)
  private List<RetryHistory> retryHistory = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKED_PROPERTIES = "trackedProperties";
  @SerializedName(SERIALIZED_NAME_TRACKED_PROPERTIES)
  private Object trackedProperties;

  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CORRELATION = "correlation";
  @SerializedName(SERIALIZED_NAME_CORRELATION)
  private RunActionCorrelation correlation;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Object error;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkflowStatus status;

  public WorkflowRunActionRepetitionProperties() {
  }

  public WorkflowRunActionRepetitionProperties(
     String trackingId
  ) {
    this();
    this.trackingId = trackingId;
  }

  public WorkflowRunActionRepetitionProperties repetitionIndexes(List<RepetitionIndex> repetitionIndexes) {
    this.repetitionIndexes = repetitionIndexes;
    return this;
  }

  public WorkflowRunActionRepetitionProperties addRepetitionIndexesItem(RepetitionIndex repetitionIndexesItem) {
    if (this.repetitionIndexes == null) {
      this.repetitionIndexes = new ArrayList<>();
    }
    this.repetitionIndexes.add(repetitionIndexesItem);
    return this;
  }

  /**
   * The repetition indexes.
   * @return repetitionIndexes
   */
  @javax.annotation.Nullable
  public List<RepetitionIndex> getRepetitionIndexes() {
    return repetitionIndexes;
  }

  public void setRepetitionIndexes(List<RepetitionIndex> repetitionIndexes) {
    this.repetitionIndexes = repetitionIndexes;
  }


  public WorkflowRunActionRepetitionProperties inputs(Object inputs) {
    this.inputs = inputs;
    return this;
  }

  /**
   * Get inputs
   * @return inputs
   */
  @javax.annotation.Nullable
  public Object getInputs() {
    return inputs;
  }

  public void setInputs(Object inputs) {
    this.inputs = inputs;
  }


  public WorkflowRunActionRepetitionProperties inputsLink(ContentLink inputsLink) {
    this.inputsLink = inputsLink;
    return this;
  }

  /**
   * Get inputsLink
   * @return inputsLink
   */
  @javax.annotation.Nullable
  public ContentLink getInputsLink() {
    return inputsLink;
  }

  public void setInputsLink(ContentLink inputsLink) {
    this.inputsLink = inputsLink;
  }


  public WorkflowRunActionRepetitionProperties iterationCount(Integer iterationCount) {
    this.iterationCount = iterationCount;
    return this;
  }

  /**
   * Get iterationCount
   * @return iterationCount
   */
  @javax.annotation.Nullable
  public Integer getIterationCount() {
    return iterationCount;
  }

  public void setIterationCount(Integer iterationCount) {
    this.iterationCount = iterationCount;
  }


  public WorkflowRunActionRepetitionProperties outputs(Object outputs) {
    this.outputs = outputs;
    return this;
  }

  /**
   * Get outputs
   * @return outputs
   */
  @javax.annotation.Nullable
  public Object getOutputs() {
    return outputs;
  }

  public void setOutputs(Object outputs) {
    this.outputs = outputs;
  }


  public WorkflowRunActionRepetitionProperties outputsLink(ContentLink outputsLink) {
    this.outputsLink = outputsLink;
    return this;
  }

  /**
   * Get outputsLink
   * @return outputsLink
   */
  @javax.annotation.Nullable
  public ContentLink getOutputsLink() {
    return outputsLink;
  }

  public void setOutputsLink(ContentLink outputsLink) {
    this.outputsLink = outputsLink;
  }


  public WorkflowRunActionRepetitionProperties retryHistory(List<RetryHistory> retryHistory) {
    this.retryHistory = retryHistory;
    return this;
  }

  public WorkflowRunActionRepetitionProperties addRetryHistoryItem(RetryHistory retryHistoryItem) {
    if (this.retryHistory == null) {
      this.retryHistory = new ArrayList<>();
    }
    this.retryHistory.add(retryHistoryItem);
    return this;
  }

  /**
   * Gets the retry histories.
   * @return retryHistory
   */
  @javax.annotation.Nullable
  public List<RetryHistory> getRetryHistory() {
    return retryHistory;
  }

  public void setRetryHistory(List<RetryHistory> retryHistory) {
    this.retryHistory = retryHistory;
  }


  public WorkflowRunActionRepetitionProperties trackedProperties(Object trackedProperties) {
    this.trackedProperties = trackedProperties;
    return this;
  }

  /**
   * Get trackedProperties
   * @return trackedProperties
   */
  @javax.annotation.Nullable
  public Object getTrackedProperties() {
    return trackedProperties;
  }

  public void setTrackedProperties(Object trackedProperties) {
    this.trackedProperties = trackedProperties;
  }


  /**
   * Gets the tracking id.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }



  public WorkflowRunActionRepetitionProperties code(String code) {
    this.code = code;
    return this;
  }

  /**
   * The workflow scope repetition code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public WorkflowRunActionRepetitionProperties correlation(RunActionCorrelation correlation) {
    this.correlation = correlation;
    return this;
  }

  /**
   * Get correlation
   * @return correlation
   */
  @javax.annotation.Nullable
  public RunActionCorrelation getCorrelation() {
    return correlation;
  }

  public void setCorrelation(RunActionCorrelation correlation) {
    this.correlation = correlation;
  }


  public WorkflowRunActionRepetitionProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The end time of the workflow scope repetition.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public WorkflowRunActionRepetitionProperties error(Object error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Object getError() {
    return error;
  }

  public void setError(Object error) {
    this.error = error;
  }


  public WorkflowRunActionRepetitionProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The start time of the workflow scope repetition.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public WorkflowRunActionRepetitionProperties status(WorkflowStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WorkflowStatus getStatus() {
    return status;
  }

  public void setStatus(WorkflowStatus status) {
    this.status = status;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowRunActionRepetitionProperties workflowRunActionRepetitionProperties = (WorkflowRunActionRepetitionProperties) o;
    return Objects.equals(this.repetitionIndexes, workflowRunActionRepetitionProperties.repetitionIndexes) &&
        Objects.equals(this.inputs, workflowRunActionRepetitionProperties.inputs) &&
        Objects.equals(this.inputsLink, workflowRunActionRepetitionProperties.inputsLink) &&
        Objects.equals(this.iterationCount, workflowRunActionRepetitionProperties.iterationCount) &&
        Objects.equals(this.outputs, workflowRunActionRepetitionProperties.outputs) &&
        Objects.equals(this.outputsLink, workflowRunActionRepetitionProperties.outputsLink) &&
        Objects.equals(this.retryHistory, workflowRunActionRepetitionProperties.retryHistory) &&
        Objects.equals(this.trackedProperties, workflowRunActionRepetitionProperties.trackedProperties) &&
        Objects.equals(this.trackingId, workflowRunActionRepetitionProperties.trackingId) &&
        Objects.equals(this.code, workflowRunActionRepetitionProperties.code) &&
        Objects.equals(this.correlation, workflowRunActionRepetitionProperties.correlation) &&
        Objects.equals(this.endTime, workflowRunActionRepetitionProperties.endTime) &&
        Objects.equals(this.error, workflowRunActionRepetitionProperties.error) &&
        Objects.equals(this.startTime, workflowRunActionRepetitionProperties.startTime) &&
        Objects.equals(this.status, workflowRunActionRepetitionProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(repetitionIndexes, inputs, inputsLink, iterationCount, outputs, outputsLink, retryHistory, trackedProperties, trackingId, code, correlation, endTime, error, startTime, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowRunActionRepetitionProperties {\n");
    sb.append("    repetitionIndexes: ").append(toIndentedString(repetitionIndexes)).append("\n");
    sb.append("    inputs: ").append(toIndentedString(inputs)).append("\n");
    sb.append("    inputsLink: ").append(toIndentedString(inputsLink)).append("\n");
    sb.append("    iterationCount: ").append(toIndentedString(iterationCount)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    outputsLink: ").append(toIndentedString(outputsLink)).append("\n");
    sb.append("    retryHistory: ").append(toIndentedString(retryHistory)).append("\n");
    sb.append("    trackedProperties: ").append(toIndentedString(trackedProperties)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    correlation: ").append(toIndentedString(correlation)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inputs");
    openapiFields.add("inputsLink");
    openapiFields.add("iterationCount");
    openapiFields.add("outputs");
    openapiFields.add("outputsLink");
    openapiFields.add("retryHistory");
    openapiFields.add("trackedProperties");
    openapiFields.add("trackingId");
    openapiFields.add("code");
    openapiFields.add("correlation");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("startTime");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowRunActionRepetitionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowRunActionRepetitionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowRunActionRepetitionProperties is not found in the empty JSON string", WorkflowRunActionRepetitionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowRunActionRepetitionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowRunActionRepetitionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("repetitionIndexes") != null && !jsonObj.get("repetitionIndexes").isJsonNull()) {
        JsonArray jsonArrayrepetitionIndexes = jsonObj.getAsJsonArray("repetitionIndexes");
        if (jsonArrayrepetitionIndexes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("repetitionIndexes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `repetitionIndexes` to be an array in the JSON string but got `%s`", jsonObj.get("repetitionIndexes").toString()));
          }

          // validate the optional field `repetitionIndexes` (array)
          for (int i = 0; i < jsonArrayrepetitionIndexes.size(); i++) {
            RepetitionIndex.validateJsonElement(jsonArrayrepetitionIndexes.get(i));
          };
        }
      }
      // validate the optional field `inputsLink`
      if (jsonObj.get("inputsLink") != null && !jsonObj.get("inputsLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("inputsLink"));
      }
      // validate the optional field `outputsLink`
      if (jsonObj.get("outputsLink") != null && !jsonObj.get("outputsLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("outputsLink"));
      }
      if (jsonObj.get("retryHistory") != null && !jsonObj.get("retryHistory").isJsonNull()) {
        JsonArray jsonArrayretryHistory = jsonObj.getAsJsonArray("retryHistory");
        if (jsonArrayretryHistory != null) {
          // ensure the json data is an array
          if (!jsonObj.get("retryHistory").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `retryHistory` to be an array in the JSON string but got `%s`", jsonObj.get("retryHistory").toString()));
          }

          // validate the optional field `retryHistory` (array)
          for (int i = 0; i < jsonArrayretryHistory.size(); i++) {
            RetryHistory.validateJsonElement(jsonArrayretryHistory.get(i));
          };
        }
      }
      if ((jsonObj.get("trackingId") != null && !jsonObj.get("trackingId").isJsonNull()) && !jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `correlation`
      if (jsonObj.get("correlation") != null && !jsonObj.get("correlation").isJsonNull()) {
        RunActionCorrelation.validateJsonElement(jsonObj.get("correlation"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        WorkflowStatus.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowRunActionRepetitionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowRunActionRepetitionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowRunActionRepetitionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowRunActionRepetitionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowRunActionRepetitionProperties>() {
           @Override
           public void write(JsonWriter out, WorkflowRunActionRepetitionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowRunActionRepetitionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowRunActionRepetitionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowRunActionRepetitionProperties
   * @throws IOException if the JSON string is invalid with respect to WorkflowRunActionRepetitionProperties
   */
  public static WorkflowRunActionRepetitionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowRunActionRepetitionProperties.class);
  }

  /**
   * Convert an instance of WorkflowRunActionRepetitionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

