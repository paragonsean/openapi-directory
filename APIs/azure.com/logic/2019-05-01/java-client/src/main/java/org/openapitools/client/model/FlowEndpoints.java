/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IpAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The flow endpoints configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FlowEndpoints {
  public static final String SERIALIZED_NAME_ACCESS_ENDPOINT_IP_ADDRESSES = "accessEndpointIpAddresses";
  @SerializedName(SERIALIZED_NAME_ACCESS_ENDPOINT_IP_ADDRESSES)
  private List<IpAddress> accessEndpointIpAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTGOING_IP_ADDRESSES = "outgoingIpAddresses";
  @SerializedName(SERIALIZED_NAME_OUTGOING_IP_ADDRESSES)
  private List<IpAddress> outgoingIpAddresses = new ArrayList<>();

  public FlowEndpoints() {
  }

  public FlowEndpoints accessEndpointIpAddresses(List<IpAddress> accessEndpointIpAddresses) {
    this.accessEndpointIpAddresses = accessEndpointIpAddresses;
    return this;
  }

  public FlowEndpoints addAccessEndpointIpAddressesItem(IpAddress accessEndpointIpAddressesItem) {
    if (this.accessEndpointIpAddresses == null) {
      this.accessEndpointIpAddresses = new ArrayList<>();
    }
    this.accessEndpointIpAddresses.add(accessEndpointIpAddressesItem);
    return this;
  }

  /**
   * The access endpoint ip address.
   * @return accessEndpointIpAddresses
   */
  @javax.annotation.Nullable
  public List<IpAddress> getAccessEndpointIpAddresses() {
    return accessEndpointIpAddresses;
  }

  public void setAccessEndpointIpAddresses(List<IpAddress> accessEndpointIpAddresses) {
    this.accessEndpointIpAddresses = accessEndpointIpAddresses;
  }


  public FlowEndpoints outgoingIpAddresses(List<IpAddress> outgoingIpAddresses) {
    this.outgoingIpAddresses = outgoingIpAddresses;
    return this;
  }

  public FlowEndpoints addOutgoingIpAddressesItem(IpAddress outgoingIpAddressesItem) {
    if (this.outgoingIpAddresses == null) {
      this.outgoingIpAddresses = new ArrayList<>();
    }
    this.outgoingIpAddresses.add(outgoingIpAddressesItem);
    return this;
  }

  /**
   * The outgoing ip address.
   * @return outgoingIpAddresses
   */
  @javax.annotation.Nullable
  public List<IpAddress> getOutgoingIpAddresses() {
    return outgoingIpAddresses;
  }

  public void setOutgoingIpAddresses(List<IpAddress> outgoingIpAddresses) {
    this.outgoingIpAddresses = outgoingIpAddresses;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlowEndpoints flowEndpoints = (FlowEndpoints) o;
    return Objects.equals(this.accessEndpointIpAddresses, flowEndpoints.accessEndpointIpAddresses) &&
        Objects.equals(this.outgoingIpAddresses, flowEndpoints.outgoingIpAddresses);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessEndpointIpAddresses, outgoingIpAddresses);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlowEndpoints {\n");
    sb.append("    accessEndpointIpAddresses: ").append(toIndentedString(accessEndpointIpAddresses)).append("\n");
    sb.append("    outgoingIpAddresses: ").append(toIndentedString(outgoingIpAddresses)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessEndpointIpAddresses");
    openapiFields.add("outgoingIpAddresses");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlowEndpoints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FlowEndpoints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlowEndpoints is not found in the empty JSON string", FlowEndpoints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlowEndpoints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlowEndpoints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("accessEndpointIpAddresses") != null && !jsonObj.get("accessEndpointIpAddresses").isJsonNull()) {
        JsonArray jsonArrayaccessEndpointIpAddresses = jsonObj.getAsJsonArray("accessEndpointIpAddresses");
        if (jsonArrayaccessEndpointIpAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("accessEndpointIpAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `accessEndpointIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("accessEndpointIpAddresses").toString()));
          }

          // validate the optional field `accessEndpointIpAddresses` (array)
          for (int i = 0; i < jsonArrayaccessEndpointIpAddresses.size(); i++) {
            IpAddress.validateJsonElement(jsonArrayaccessEndpointIpAddresses.get(i));
          };
        }
      }
      if (jsonObj.get("outgoingIpAddresses") != null && !jsonObj.get("outgoingIpAddresses").isJsonNull()) {
        JsonArray jsonArrayoutgoingIpAddresses = jsonObj.getAsJsonArray("outgoingIpAddresses");
        if (jsonArrayoutgoingIpAddresses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outgoingIpAddresses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outgoingIpAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("outgoingIpAddresses").toString()));
          }

          // validate the optional field `outgoingIpAddresses` (array)
          for (int i = 0; i < jsonArrayoutgoingIpAddresses.size(); i++) {
            IpAddress.validateJsonElement(jsonArrayoutgoingIpAddresses.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlowEndpoints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlowEndpoints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlowEndpoints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlowEndpoints.class));

       return (TypeAdapter<T>) new TypeAdapter<FlowEndpoints>() {
           @Override
           public void write(JsonWriter out, FlowEndpoints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlowEndpoints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlowEndpoints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlowEndpoints
   * @throws IOException if the JSON string is invalid with respect to FlowEndpoints
   */
  public static FlowEndpoints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlowEndpoints.class);
  }

  /**
   * Convert an instance of FlowEndpoints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

