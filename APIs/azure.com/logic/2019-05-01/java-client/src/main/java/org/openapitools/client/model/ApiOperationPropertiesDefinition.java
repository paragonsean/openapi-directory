/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ApiOperationAnnotation;
import org.openapitools.client.model.ApiReference;
import org.openapitools.client.model.SwaggerSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The api operations properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApiOperationPropertiesDefinition {
  public static final String SERIALIZED_NAME_ANNOTATION = "annotation";
  @SerializedName(SERIALIZED_NAME_ANNOTATION)
  private ApiOperationAnnotation annotation;

  public static final String SERIALIZED_NAME_API = "api";
  @SerializedName(SERIALIZED_NAME_API)
  private ApiReference api;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INPUTS_DEFINITION = "inputsDefinition";
  @SerializedName(SERIALIZED_NAME_INPUTS_DEFINITION)
  private SwaggerSchema inputsDefinition;

  public static final String SERIALIZED_NAME_IS_NOTIFICATION = "isNotification";
  @SerializedName(SERIALIZED_NAME_IS_NOTIFICATION)
  private Boolean isNotification;

  public static final String SERIALIZED_NAME_IS_WEBHOOK = "isWebhook";
  @SerializedName(SERIALIZED_NAME_IS_WEBHOOK)
  private Boolean isWebhook;

  public static final String SERIALIZED_NAME_PAGEABLE = "pageable";
  @SerializedName(SERIALIZED_NAME_PAGEABLE)
  private Boolean pageable;

  public static final String SERIALIZED_NAME_RESPONSES_DEFINITION = "responsesDefinition";
  @SerializedName(SERIALIZED_NAME_RESPONSES_DEFINITION)
  private Map<String, SwaggerSchema> responsesDefinition = new HashMap<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private String trigger;

  public static final String SERIALIZED_NAME_TRIGGER_HINT = "triggerHint";
  @SerializedName(SERIALIZED_NAME_TRIGGER_HINT)
  private String triggerHint;

  public static final String SERIALIZED_NAME_VISIBILITY = "visibility";
  @SerializedName(SERIALIZED_NAME_VISIBILITY)
  private String visibility;

  public ApiOperationPropertiesDefinition() {
  }

  public ApiOperationPropertiesDefinition annotation(ApiOperationAnnotation annotation) {
    this.annotation = annotation;
    return this;
  }

  /**
   * Get annotation
   * @return annotation
   */
  @javax.annotation.Nullable
  public ApiOperationAnnotation getAnnotation() {
    return annotation;
  }

  public void setAnnotation(ApiOperationAnnotation annotation) {
    this.annotation = annotation;
  }


  public ApiOperationPropertiesDefinition api(ApiReference api) {
    this.api = api;
    return this;
  }

  /**
   * Get api
   * @return api
   */
  @javax.annotation.Nullable
  public ApiReference getApi() {
    return api;
  }

  public void setApi(ApiReference api) {
    this.api = api;
  }


  public ApiOperationPropertiesDefinition description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of the api operation.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ApiOperationPropertiesDefinition inputsDefinition(SwaggerSchema inputsDefinition) {
    this.inputsDefinition = inputsDefinition;
    return this;
  }

  /**
   * Get inputsDefinition
   * @return inputsDefinition
   */
  @javax.annotation.Nullable
  public SwaggerSchema getInputsDefinition() {
    return inputsDefinition;
  }

  public void setInputsDefinition(SwaggerSchema inputsDefinition) {
    this.inputsDefinition = inputsDefinition;
  }


  public ApiOperationPropertiesDefinition isNotification(Boolean isNotification) {
    this.isNotification = isNotification;
    return this;
  }

  /**
   * Indicates whether the API operation is notification or not.
   * @return isNotification
   */
  @javax.annotation.Nullable
  public Boolean getIsNotification() {
    return isNotification;
  }

  public void setIsNotification(Boolean isNotification) {
    this.isNotification = isNotification;
  }


  public ApiOperationPropertiesDefinition isWebhook(Boolean isWebhook) {
    this.isWebhook = isWebhook;
    return this;
  }

  /**
   * Indicates whether the API operation is webhook or not.
   * @return isWebhook
   */
  @javax.annotation.Nullable
  public Boolean getIsWebhook() {
    return isWebhook;
  }

  public void setIsWebhook(Boolean isWebhook) {
    this.isWebhook = isWebhook;
  }


  public ApiOperationPropertiesDefinition pageable(Boolean pageable) {
    this.pageable = pageable;
    return this;
  }

  /**
   * Indicates whether the api operation is pageable.
   * @return pageable
   */
  @javax.annotation.Nullable
  public Boolean getPageable() {
    return pageable;
  }

  public void setPageable(Boolean pageable) {
    this.pageable = pageable;
  }


  public ApiOperationPropertiesDefinition responsesDefinition(Map<String, SwaggerSchema> responsesDefinition) {
    this.responsesDefinition = responsesDefinition;
    return this;
  }

  public ApiOperationPropertiesDefinition putResponsesDefinitionItem(String key, SwaggerSchema responsesDefinitionItem) {
    if (this.responsesDefinition == null) {
      this.responsesDefinition = new HashMap<>();
    }
    this.responsesDefinition.put(key, responsesDefinitionItem);
    return this;
  }

  /**
   * The operation responses definition schemas.
   * @return responsesDefinition
   */
  @javax.annotation.Nullable
  public Map<String, SwaggerSchema> getResponsesDefinition() {
    return responsesDefinition;
  }

  public void setResponsesDefinition(Map<String, SwaggerSchema> responsesDefinition) {
    this.responsesDefinition = responsesDefinition;
  }


  public ApiOperationPropertiesDefinition summary(String summary) {
    this.summary = summary;
    return this;
  }

  /**
   * The summary of the api operation.
   * @return summary
   */
  @javax.annotation.Nullable
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public ApiOperationPropertiesDefinition trigger(String trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * The trigger type of api operation.
   * @return trigger
   */
  @javax.annotation.Nullable
  public String getTrigger() {
    return trigger;
  }

  public void setTrigger(String trigger) {
    this.trigger = trigger;
  }


  public ApiOperationPropertiesDefinition triggerHint(String triggerHint) {
    this.triggerHint = triggerHint;
    return this;
  }

  /**
   * The trigger hint for the api operation.
   * @return triggerHint
   */
  @javax.annotation.Nullable
  public String getTriggerHint() {
    return triggerHint;
  }

  public void setTriggerHint(String triggerHint) {
    this.triggerHint = triggerHint;
  }


  public ApiOperationPropertiesDefinition visibility(String visibility) {
    this.visibility = visibility;
    return this;
  }

  /**
   * The visibility of the api operation.
   * @return visibility
   */
  @javax.annotation.Nullable
  public String getVisibility() {
    return visibility;
  }

  public void setVisibility(String visibility) {
    this.visibility = visibility;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApiOperationPropertiesDefinition apiOperationPropertiesDefinition = (ApiOperationPropertiesDefinition) o;
    return Objects.equals(this.annotation, apiOperationPropertiesDefinition.annotation) &&
        Objects.equals(this.api, apiOperationPropertiesDefinition.api) &&
        Objects.equals(this.description, apiOperationPropertiesDefinition.description) &&
        Objects.equals(this.inputsDefinition, apiOperationPropertiesDefinition.inputsDefinition) &&
        Objects.equals(this.isNotification, apiOperationPropertiesDefinition.isNotification) &&
        Objects.equals(this.isWebhook, apiOperationPropertiesDefinition.isWebhook) &&
        Objects.equals(this.pageable, apiOperationPropertiesDefinition.pageable) &&
        Objects.equals(this.responsesDefinition, apiOperationPropertiesDefinition.responsesDefinition) &&
        Objects.equals(this.summary, apiOperationPropertiesDefinition.summary) &&
        Objects.equals(this.trigger, apiOperationPropertiesDefinition.trigger) &&
        Objects.equals(this.triggerHint, apiOperationPropertiesDefinition.triggerHint) &&
        Objects.equals(this.visibility, apiOperationPropertiesDefinition.visibility);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annotation, api, description, inputsDefinition, isNotification, isWebhook, pageable, responsesDefinition, summary, trigger, triggerHint, visibility);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApiOperationPropertiesDefinition {\n");
    sb.append("    annotation: ").append(toIndentedString(annotation)).append("\n");
    sb.append("    api: ").append(toIndentedString(api)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    inputsDefinition: ").append(toIndentedString(inputsDefinition)).append("\n");
    sb.append("    isNotification: ").append(toIndentedString(isNotification)).append("\n");
    sb.append("    isWebhook: ").append(toIndentedString(isWebhook)).append("\n");
    sb.append("    pageable: ").append(toIndentedString(pageable)).append("\n");
    sb.append("    responsesDefinition: ").append(toIndentedString(responsesDefinition)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    triggerHint: ").append(toIndentedString(triggerHint)).append("\n");
    sb.append("    visibility: ").append(toIndentedString(visibility)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annotation");
    openapiFields.add("api");
    openapiFields.add("description");
    openapiFields.add("inputsDefinition");
    openapiFields.add("isNotification");
    openapiFields.add("isWebhook");
    openapiFields.add("pageable");
    openapiFields.add("responsesDefinition");
    openapiFields.add("summary");
    openapiFields.add("trigger");
    openapiFields.add("triggerHint");
    openapiFields.add("visibility");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApiOperationPropertiesDefinition
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApiOperationPropertiesDefinition.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApiOperationPropertiesDefinition is not found in the empty JSON string", ApiOperationPropertiesDefinition.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApiOperationPropertiesDefinition.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApiOperationPropertiesDefinition` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `annotation`
      if (jsonObj.get("annotation") != null && !jsonObj.get("annotation").isJsonNull()) {
        ApiOperationAnnotation.validateJsonElement(jsonObj.get("annotation"));
      }
      // validate the optional field `api`
      if (jsonObj.get("api") != null && !jsonObj.get("api").isJsonNull()) {
        ApiReference.validateJsonElement(jsonObj.get("api"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `inputsDefinition`
      if (jsonObj.get("inputsDefinition") != null && !jsonObj.get("inputsDefinition").isJsonNull()) {
        SwaggerSchema.validateJsonElement(jsonObj.get("inputsDefinition"));
      }
      if ((jsonObj.get("summary") != null && !jsonObj.get("summary").isJsonNull()) && !jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      if ((jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) && !jsonObj.get("trigger").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trigger` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trigger").toString()));
      }
      if ((jsonObj.get("triggerHint") != null && !jsonObj.get("triggerHint").isJsonNull()) && !jsonObj.get("triggerHint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerHint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerHint").toString()));
      }
      if ((jsonObj.get("visibility") != null && !jsonObj.get("visibility").isJsonNull()) && !jsonObj.get("visibility").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `visibility` to be a primitive type in the JSON string but got `%s`", jsonObj.get("visibility").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApiOperationPropertiesDefinition.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApiOperationPropertiesDefinition' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApiOperationPropertiesDefinition> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApiOperationPropertiesDefinition.class));

       return (TypeAdapter<T>) new TypeAdapter<ApiOperationPropertiesDefinition>() {
           @Override
           public void write(JsonWriter out, ApiOperationPropertiesDefinition value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApiOperationPropertiesDefinition read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApiOperationPropertiesDefinition given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApiOperationPropertiesDefinition
   * @throws IOException if the JSON string is invalid with respect to ApiOperationPropertiesDefinition
   */
  public static ApiOperationPropertiesDefinition fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApiOperationPropertiesDefinition.class);
  }

  /**
   * Convert an instance of ApiOperationPropertiesDefinition to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

