/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HashingAlgorithm;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The AS2 agreement mdn settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2MdnSettings {
  public static final String SERIALIZED_NAME_DISPOSITION_NOTIFICATION_TO = "dispositionNotificationTo";
  @SerializedName(SERIALIZED_NAME_DISPOSITION_NOTIFICATION_TO)
  private String dispositionNotificationTo;

  public static final String SERIALIZED_NAME_MDN_TEXT = "mdnText";
  @SerializedName(SERIALIZED_NAME_MDN_TEXT)
  private String mdnText;

  public static final String SERIALIZED_NAME_MIC_HASHING_ALGORITHM = "micHashingAlgorithm";
  @SerializedName(SERIALIZED_NAME_MIC_HASHING_ALGORITHM)
  private HashingAlgorithm micHashingAlgorithm;

  public static final String SERIALIZED_NAME_NEED_M_D_N = "needMDN";
  @SerializedName(SERIALIZED_NAME_NEED_M_D_N)
  private Boolean needMDN;

  public static final String SERIALIZED_NAME_RECEIPT_DELIVERY_URL = "receiptDeliveryUrl";
  @SerializedName(SERIALIZED_NAME_RECEIPT_DELIVERY_URL)
  private String receiptDeliveryUrl;

  public static final String SERIALIZED_NAME_SEND_INBOUND_M_D_N_TO_MESSAGE_BOX = "sendInboundMDNToMessageBox";
  @SerializedName(SERIALIZED_NAME_SEND_INBOUND_M_D_N_TO_MESSAGE_BOX)
  private Boolean sendInboundMDNToMessageBox;

  public static final String SERIALIZED_NAME_SEND_M_D_N_ASYNCHRONOUSLY = "sendMDNAsynchronously";
  @SerializedName(SERIALIZED_NAME_SEND_M_D_N_ASYNCHRONOUSLY)
  private Boolean sendMDNAsynchronously;

  public static final String SERIALIZED_NAME_SIGN_M_D_N = "signMDN";
  @SerializedName(SERIALIZED_NAME_SIGN_M_D_N)
  private Boolean signMDN;

  public static final String SERIALIZED_NAME_SIGN_OUTBOUND_M_D_N_IF_OPTIONAL = "signOutboundMDNIfOptional";
  @SerializedName(SERIALIZED_NAME_SIGN_OUTBOUND_M_D_N_IF_OPTIONAL)
  private Boolean signOutboundMDNIfOptional;

  public AS2MdnSettings() {
  }

  public AS2MdnSettings dispositionNotificationTo(String dispositionNotificationTo) {
    this.dispositionNotificationTo = dispositionNotificationTo;
    return this;
  }

  /**
   * The disposition notification to header value.
   * @return dispositionNotificationTo
   */
  @javax.annotation.Nullable
  public String getDispositionNotificationTo() {
    return dispositionNotificationTo;
  }

  public void setDispositionNotificationTo(String dispositionNotificationTo) {
    this.dispositionNotificationTo = dispositionNotificationTo;
  }


  public AS2MdnSettings mdnText(String mdnText) {
    this.mdnText = mdnText;
    return this;
  }

  /**
   * The MDN text.
   * @return mdnText
   */
  @javax.annotation.Nullable
  public String getMdnText() {
    return mdnText;
  }

  public void setMdnText(String mdnText) {
    this.mdnText = mdnText;
  }


  public AS2MdnSettings micHashingAlgorithm(HashingAlgorithm micHashingAlgorithm) {
    this.micHashingAlgorithm = micHashingAlgorithm;
    return this;
  }

  /**
   * Get micHashingAlgorithm
   * @return micHashingAlgorithm
   */
  @javax.annotation.Nonnull
  public HashingAlgorithm getMicHashingAlgorithm() {
    return micHashingAlgorithm;
  }

  public void setMicHashingAlgorithm(HashingAlgorithm micHashingAlgorithm) {
    this.micHashingAlgorithm = micHashingAlgorithm;
  }


  public AS2MdnSettings needMDN(Boolean needMDN) {
    this.needMDN = needMDN;
    return this;
  }

  /**
   * The value indicating whether to send or request a MDN.
   * @return needMDN
   */
  @javax.annotation.Nonnull
  public Boolean getNeedMDN() {
    return needMDN;
  }

  public void setNeedMDN(Boolean needMDN) {
    this.needMDN = needMDN;
  }


  public AS2MdnSettings receiptDeliveryUrl(String receiptDeliveryUrl) {
    this.receiptDeliveryUrl = receiptDeliveryUrl;
    return this;
  }

  /**
   * The receipt delivery URL.
   * @return receiptDeliveryUrl
   */
  @javax.annotation.Nullable
  public String getReceiptDeliveryUrl() {
    return receiptDeliveryUrl;
  }

  public void setReceiptDeliveryUrl(String receiptDeliveryUrl) {
    this.receiptDeliveryUrl = receiptDeliveryUrl;
  }


  public AS2MdnSettings sendInboundMDNToMessageBox(Boolean sendInboundMDNToMessageBox) {
    this.sendInboundMDNToMessageBox = sendInboundMDNToMessageBox;
    return this;
  }

  /**
   * The value indicating whether to send inbound MDN to message box.
   * @return sendInboundMDNToMessageBox
   */
  @javax.annotation.Nonnull
  public Boolean getSendInboundMDNToMessageBox() {
    return sendInboundMDNToMessageBox;
  }

  public void setSendInboundMDNToMessageBox(Boolean sendInboundMDNToMessageBox) {
    this.sendInboundMDNToMessageBox = sendInboundMDNToMessageBox;
  }


  public AS2MdnSettings sendMDNAsynchronously(Boolean sendMDNAsynchronously) {
    this.sendMDNAsynchronously = sendMDNAsynchronously;
    return this;
  }

  /**
   * The value indicating whether to send the asynchronous MDN.
   * @return sendMDNAsynchronously
   */
  @javax.annotation.Nonnull
  public Boolean getSendMDNAsynchronously() {
    return sendMDNAsynchronously;
  }

  public void setSendMDNAsynchronously(Boolean sendMDNAsynchronously) {
    this.sendMDNAsynchronously = sendMDNAsynchronously;
  }


  public AS2MdnSettings signMDN(Boolean signMDN) {
    this.signMDN = signMDN;
    return this;
  }

  /**
   * The value indicating whether the MDN needs to be signed or not.
   * @return signMDN
   */
  @javax.annotation.Nonnull
  public Boolean getSignMDN() {
    return signMDN;
  }

  public void setSignMDN(Boolean signMDN) {
    this.signMDN = signMDN;
  }


  public AS2MdnSettings signOutboundMDNIfOptional(Boolean signOutboundMDNIfOptional) {
    this.signOutboundMDNIfOptional = signOutboundMDNIfOptional;
    return this;
  }

  /**
   * The value indicating whether to sign the outbound MDN if optional.
   * @return signOutboundMDNIfOptional
   */
  @javax.annotation.Nonnull
  public Boolean getSignOutboundMDNIfOptional() {
    return signOutboundMDNIfOptional;
  }

  public void setSignOutboundMDNIfOptional(Boolean signOutboundMDNIfOptional) {
    this.signOutboundMDNIfOptional = signOutboundMDNIfOptional;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2MdnSettings as2MdnSettings = (AS2MdnSettings) o;
    return Objects.equals(this.dispositionNotificationTo, as2MdnSettings.dispositionNotificationTo) &&
        Objects.equals(this.mdnText, as2MdnSettings.mdnText) &&
        Objects.equals(this.micHashingAlgorithm, as2MdnSettings.micHashingAlgorithm) &&
        Objects.equals(this.needMDN, as2MdnSettings.needMDN) &&
        Objects.equals(this.receiptDeliveryUrl, as2MdnSettings.receiptDeliveryUrl) &&
        Objects.equals(this.sendInboundMDNToMessageBox, as2MdnSettings.sendInboundMDNToMessageBox) &&
        Objects.equals(this.sendMDNAsynchronously, as2MdnSettings.sendMDNAsynchronously) &&
        Objects.equals(this.signMDN, as2MdnSettings.signMDN) &&
        Objects.equals(this.signOutboundMDNIfOptional, as2MdnSettings.signOutboundMDNIfOptional);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dispositionNotificationTo, mdnText, micHashingAlgorithm, needMDN, receiptDeliveryUrl, sendInboundMDNToMessageBox, sendMDNAsynchronously, signMDN, signOutboundMDNIfOptional);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2MdnSettings {\n");
    sb.append("    dispositionNotificationTo: ").append(toIndentedString(dispositionNotificationTo)).append("\n");
    sb.append("    mdnText: ").append(toIndentedString(mdnText)).append("\n");
    sb.append("    micHashingAlgorithm: ").append(toIndentedString(micHashingAlgorithm)).append("\n");
    sb.append("    needMDN: ").append(toIndentedString(needMDN)).append("\n");
    sb.append("    receiptDeliveryUrl: ").append(toIndentedString(receiptDeliveryUrl)).append("\n");
    sb.append("    sendInboundMDNToMessageBox: ").append(toIndentedString(sendInboundMDNToMessageBox)).append("\n");
    sb.append("    sendMDNAsynchronously: ").append(toIndentedString(sendMDNAsynchronously)).append("\n");
    sb.append("    signMDN: ").append(toIndentedString(signMDN)).append("\n");
    sb.append("    signOutboundMDNIfOptional: ").append(toIndentedString(signOutboundMDNIfOptional)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dispositionNotificationTo");
    openapiFields.add("mdnText");
    openapiFields.add("micHashingAlgorithm");
    openapiFields.add("needMDN");
    openapiFields.add("receiptDeliveryUrl");
    openapiFields.add("sendInboundMDNToMessageBox");
    openapiFields.add("sendMDNAsynchronously");
    openapiFields.add("signMDN");
    openapiFields.add("signOutboundMDNIfOptional");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("micHashingAlgorithm");
    openapiRequiredFields.add("needMDN");
    openapiRequiredFields.add("sendInboundMDNToMessageBox");
    openapiRequiredFields.add("sendMDNAsynchronously");
    openapiRequiredFields.add("signMDN");
    openapiRequiredFields.add("signOutboundMDNIfOptional");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2MdnSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2MdnSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2MdnSettings is not found in the empty JSON string", AS2MdnSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2MdnSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2MdnSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AS2MdnSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dispositionNotificationTo") != null && !jsonObj.get("dispositionNotificationTo").isJsonNull()) && !jsonObj.get("dispositionNotificationTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dispositionNotificationTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dispositionNotificationTo").toString()));
      }
      if ((jsonObj.get("mdnText") != null && !jsonObj.get("mdnText").isJsonNull()) && !jsonObj.get("mdnText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mdnText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mdnText").toString()));
      }
      // validate the required field `micHashingAlgorithm`
      HashingAlgorithm.validateJsonElement(jsonObj.get("micHashingAlgorithm"));
      if ((jsonObj.get("receiptDeliveryUrl") != null && !jsonObj.get("receiptDeliveryUrl").isJsonNull()) && !jsonObj.get("receiptDeliveryUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiptDeliveryUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiptDeliveryUrl").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2MdnSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2MdnSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2MdnSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2MdnSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2MdnSettings>() {
           @Override
           public void write(JsonWriter out, AS2MdnSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2MdnSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2MdnSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2MdnSettings
   * @throws IOException if the JSON string is invalid with respect to AS2MdnSettings
   */
  public static AS2MdnSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2MdnSettings.class);
  }

  /**
   * Convert an instance of AS2MdnSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

