/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.GenerateUpgradedDefinitionParameters;
import org.openapitools.client.model.GetCallbackUrlParameters;
import org.openapitools.client.model.RegenerateActionParameter;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowListResult;
import org.openapitools.client.model.WorkflowTriggerCallbackUrl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkflowsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workflowsCreateOrUpdate
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflow;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'workflow' is set
        if (workflow == null) {
            throw new ApiException("Missing the required parameter 'workflow' when calling workflowsCreateOrUpdate(Async)");
        }

        return workflowsCreateOrUpdateCall(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow, _callback);

    }

    /**
     * 
     * Creates or updates a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Workflow workflowsCreateOrUpdate(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow) throws ApiException {
        okhttp3.Call localVarCall = workflowsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsDelete
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsDeleteCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsDelete(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsDelete(Async)");
        }

        return workflowsDeleteCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsDelete(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        workflowsDeleteWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion);
    }

    /**
     * 
     * Deletes a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsDeleteAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsDisable
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsDisableCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/disable"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsDisableValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsDisable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsDisable(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsDisable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsDisable(Async)");
        }

        return workflowsDisableCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);

    }

    /**
     * 
     * Disables a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsDisable(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        workflowsDisableWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion);
    }

    /**
     * 
     * Disables a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsDisableWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowsDisableValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Disables a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsDisableAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsDisableValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsEnable
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsEnableCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/enable"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsEnableValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsEnable(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsEnable(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsEnable(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsEnable(Async)");
        }

        return workflowsEnableCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);

    }

    /**
     * 
     * Enables a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsEnable(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        workflowsEnableWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion);
    }

    /**
     * 
     * Enables a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsEnableWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowsEnableValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Enables a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsEnableAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsEnableValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsGenerateUpgradedDefinition
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param parameters Parameters for generating an upgraded definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsGenerateUpgradedDefinitionCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GenerateUpgradedDefinitionParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/generateUpgradedDefinition"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsGenerateUpgradedDefinitionValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GenerateUpgradedDefinitionParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsGenerateUpgradedDefinition(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsGenerateUpgradedDefinition(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsGenerateUpgradedDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsGenerateUpgradedDefinition(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling workflowsGenerateUpgradedDefinition(Async)");
        }

        return workflowsGenerateUpgradedDefinitionCall(subscriptionId, resourceGroupName, workflowName, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Generates the upgraded definition for a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param parameters Parameters for generating an upgraded definition. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Object workflowsGenerateUpgradedDefinition(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GenerateUpgradedDefinitionParameters parameters) throws ApiException {
        ApiResponse<Object> localVarResp = workflowsGenerateUpgradedDefinitionWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Generates the upgraded definition for a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param parameters Parameters for generating an upgraded definition. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> workflowsGenerateUpgradedDefinitionWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GenerateUpgradedDefinitionParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = workflowsGenerateUpgradedDefinitionValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Generates the upgraded definition for a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param parameters Parameters for generating an upgraded definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsGenerateUpgradedDefinitionAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GenerateUpgradedDefinitionParameters parameters, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsGenerateUpgradedDefinitionValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsGetCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsGet(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsGet(Async)");
        }

        return workflowsGetCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Workflow workflowsGet(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsGetWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsGetAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsListByResourceGroup
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsListByResourceGroup(Async)");
        }

        return workflowsListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets a list of workflows by resource group.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @return WorkflowListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowListResult workflowsListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<WorkflowListResult> localVarResp = workflowsListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of workflows by resource group.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @return ApiResponse&lt;WorkflowListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowListResult> workflowsListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = workflowsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<WorkflowListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of workflows by resource group.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, Integer $top, String $filter, final ApiCallback<WorkflowListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<WorkflowListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsListBySubscription
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListBySubscriptionCall(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Logic/workflows"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsListBySubscription(Async)");
        }

        return workflowsListBySubscriptionCall(subscriptionId, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets a list of workflows by subscription.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @return WorkflowListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowListResult workflowsListBySubscription(String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<WorkflowListResult> localVarResp = workflowsListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of workflows by subscription.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @return ApiResponse&lt;WorkflowListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowListResult> workflowsListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = workflowsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<WorkflowListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of workflows by subscription.
     * @param subscriptionId The subscription id. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: State, Trigger, and ReferencedResourceId. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListBySubscriptionAsync(String subscriptionId, String apiVersion, Integer $top, String $filter, final ApiCallback<WorkflowListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<WorkflowListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsListCallbackUrl
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param listCallbackUrl Which callback url to list. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListCallbackUrlCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GetCallbackUrlParameters listCallbackUrl, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = listCallbackUrl;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listCallbackUrl"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsListCallbackUrlValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GetCallbackUrlParameters listCallbackUrl, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsListCallbackUrl(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsListCallbackUrl(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsListCallbackUrl(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsListCallbackUrl(Async)");
        }

        // verify the required parameter 'listCallbackUrl' is set
        if (listCallbackUrl == null) {
            throw new ApiException("Missing the required parameter 'listCallbackUrl' when calling workflowsListCallbackUrl(Async)");
        }

        return workflowsListCallbackUrlCall(subscriptionId, resourceGroupName, workflowName, apiVersion, listCallbackUrl, _callback);

    }

    /**
     * 
     * Get the workflow callback Url.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param listCallbackUrl Which callback url to list. (required)
     * @return WorkflowTriggerCallbackUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowTriggerCallbackUrl workflowsListCallbackUrl(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GetCallbackUrlParameters listCallbackUrl) throws ApiException {
        ApiResponse<WorkflowTriggerCallbackUrl> localVarResp = workflowsListCallbackUrlWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, listCallbackUrl);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the workflow callback Url.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param listCallbackUrl Which callback url to list. (required)
     * @return ApiResponse&lt;WorkflowTriggerCallbackUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowTriggerCallbackUrl> workflowsListCallbackUrlWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GetCallbackUrlParameters listCallbackUrl) throws ApiException {
        okhttp3.Call localVarCall = workflowsListCallbackUrlValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, listCallbackUrl, null);
        Type localVarReturnType = new TypeToken<WorkflowTriggerCallbackUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the workflow callback Url.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param listCallbackUrl Which callback url to list. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListCallbackUrlAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, GetCallbackUrlParameters listCallbackUrl, final ApiCallback<WorkflowTriggerCallbackUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsListCallbackUrlValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, listCallbackUrl, _callback);
        Type localVarReturnType = new TypeToken<WorkflowTriggerCallbackUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsListSwagger
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListSwaggerCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/listSwagger"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsListSwaggerValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsListSwagger(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsListSwagger(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsListSwagger(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsListSwagger(Async)");
        }

        return workflowsListSwaggerCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);

    }

    /**
     * 
     * Gets an OpenAPI definition for the workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Object workflowsListSwagger(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        ApiResponse<Object> localVarResp = workflowsListSwaggerWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an OpenAPI definition for the workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> workflowsListSwaggerWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowsListSwaggerValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an OpenAPI definition for the workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsListSwaggerAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsListSwaggerValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsMove
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param move The workflow to move. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsMoveCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow move, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = move;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/move"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsMoveValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow move, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsMove(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsMove(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsMove(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsMove(Async)");
        }

        // verify the required parameter 'move' is set
        if (move == null) {
            throw new ApiException("Missing the required parameter 'move' when calling workflowsMove(Async)");
        }

        return workflowsMoveCall(subscriptionId, resourceGroupName, workflowName, apiVersion, move, _callback);

    }

    /**
     * 
     * Moves an existing workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param move The workflow to move. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsMove(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow move) throws ApiException {
        workflowsMoveWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, move);
    }

    /**
     * 
     * Moves an existing workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param move The workflow to move. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsMoveWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow move) throws ApiException {
        okhttp3.Call localVarCall = workflowsMoveValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, move, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Moves an existing workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param move The workflow to move. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsMoveAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow move, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsMoveValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, move, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsRegenerateAccessKey
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param keyType The access key type. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsRegenerateAccessKeyCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, RegenerateActionParameter keyType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keyType;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/regenerateAccessKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsRegenerateAccessKeyValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, RegenerateActionParameter keyType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsRegenerateAccessKey(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsRegenerateAccessKey(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsRegenerateAccessKey(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsRegenerateAccessKey(Async)");
        }

        // verify the required parameter 'keyType' is set
        if (keyType == null) {
            throw new ApiException("Missing the required parameter 'keyType' when calling workflowsRegenerateAccessKey(Async)");
        }

        return workflowsRegenerateAccessKeyCall(subscriptionId, resourceGroupName, workflowName, apiVersion, keyType, _callback);

    }

    /**
     * 
     * Regenerates the callback URL access key for request triggers.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param keyType The access key type. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsRegenerateAccessKey(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, RegenerateActionParameter keyType) throws ApiException {
        workflowsRegenerateAccessKeyWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, keyType);
    }

    /**
     * 
     * Regenerates the callback URL access key for request triggers.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param keyType The access key type. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsRegenerateAccessKeyWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, RegenerateActionParameter keyType) throws ApiException {
        okhttp3.Call localVarCall = workflowsRegenerateAccessKeyValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, keyType, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerates the callback URL access key for request triggers.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param keyType The access key type. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsRegenerateAccessKeyAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, RegenerateActionParameter keyType, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsRegenerateAccessKeyValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, keyType, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsUpdate
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsUpdateCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = workflow;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsUpdate(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsUpdate(Async)");
        }

        // verify the required parameter 'workflow' is set
        if (workflow == null) {
            throw new ApiException("Missing the required parameter 'workflow' when calling workflowsUpdate(Async)");
        }

        return workflowsUpdateCall(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow, _callback);

    }

    /**
     * 
     * Updates a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @return Workflow
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Workflow workflowsUpdate(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow) throws ApiException {
        ApiResponse<Workflow> localVarResp = workflowsUpdateWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @return ApiResponse&lt;Workflow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Workflow> workflowsUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow) throws ApiException {
        okhttp3.Call localVarCall = workflowsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow, null);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param workflow The workflow. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsUpdateAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow workflow, final ApiCallback<Workflow> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsUpdateValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow, _callback);
        Type localVarReturnType = new TypeToken<Workflow>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsValidateByLocation
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param location The workflow location. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsValidateByLocationCall(String subscriptionId, String resourceGroupName, String location, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/locations/{location}/workflows/{workflowName}/validate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsValidateByLocationValidateBeforeCall(String subscriptionId, String resourceGroupName, String location, String workflowName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsValidateByLocation(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsValidateByLocation(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling workflowsValidateByLocation(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsValidateByLocation(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsValidateByLocation(Async)");
        }

        return workflowsValidateByLocationCall(subscriptionId, resourceGroupName, location, workflowName, apiVersion, _callback);

    }

    /**
     * 
     * Validates the workflow definition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param location The workflow location. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsValidateByLocation(String subscriptionId, String resourceGroupName, String location, String workflowName, String apiVersion) throws ApiException {
        workflowsValidateByLocationWithHttpInfo(subscriptionId, resourceGroupName, location, workflowName, apiVersion);
    }

    /**
     * 
     * Validates the workflow definition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param location The workflow location. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsValidateByLocationWithHttpInfo(String subscriptionId, String resourceGroupName, String location, String workflowName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowsValidateByLocationValidateBeforeCall(subscriptionId, resourceGroupName, location, workflowName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Validates the workflow definition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param location The workflow location. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsValidateByLocationAsync(String subscriptionId, String resourceGroupName, String location, String workflowName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsValidateByLocationValidateBeforeCall(subscriptionId, resourceGroupName, location, workflowName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowsValidateByResourceGroup
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param validate The workflow. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsValidateByResourceGroupCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow validate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/validate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowsValidateByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow validate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowsValidateByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowsValidateByResourceGroup(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowsValidateByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowsValidateByResourceGroup(Async)");
        }

        // verify the required parameter 'validate' is set
        if (validate == null) {
            throw new ApiException("Missing the required parameter 'validate' when calling workflowsValidateByResourceGroup(Async)");
        }

        return workflowsValidateByResourceGroupCall(subscriptionId, resourceGroupName, workflowName, apiVersion, validate, _callback);

    }

    /**
     * 
     * Validates the workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param validate The workflow. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void workflowsValidateByResourceGroup(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow validate) throws ApiException {
        workflowsValidateByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, workflowName, apiVersion, validate);
    }

    /**
     * 
     * Validates the workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param validate The workflow. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> workflowsValidateByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow validate) throws ApiException {
        okhttp3.Call localVarCall = workflowsValidateByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, validate, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Validates the workflow.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param apiVersion The API version. (required)
     * @param validate The workflow. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowsValidateByResourceGroupAsync(String subscriptionId, String resourceGroupName, String workflowName, String apiVersion, Workflow validate, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowsValidateByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, apiVersion, validate, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
