/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IntegrationServiceEnvironmentNetworkDependency;
import org.openapitools.client.model.IntegrationServiceEnvironmentNetworkDependencyHealth;
import org.openapitools.client.model.IntegrationServiceEnvironmentNetworkEndPointAccessibilityState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The integration service environment subnet network health.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationServiceEnvironmentSubnetNetworkHealth {
  public static final String SERIALIZED_NAME_NETWORK_DEPENDENCY_HEALTH_STATE = "networkDependencyHealthState";
  @SerializedName(SERIALIZED_NAME_NETWORK_DEPENDENCY_HEALTH_STATE)
  private IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState;

  public static final String SERIALIZED_NAME_OUTBOUND_NETWORK_DEPENDENCIES = "outboundNetworkDependencies";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_NETWORK_DEPENDENCIES)
  private List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies = new ArrayList<>();

  public static final String SERIALIZED_NAME_OUTBOUND_NETWORK_HEALTH = "outboundNetworkHealth";
  @SerializedName(SERIALIZED_NAME_OUTBOUND_NETWORK_HEALTH)
  private IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth;

  public IntegrationServiceEnvironmentSubnetNetworkHealth() {
  }

  public IntegrationServiceEnvironmentSubnetNetworkHealth networkDependencyHealthState(IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState) {
    this.networkDependencyHealthState = networkDependencyHealthState;
    return this;
  }

  /**
   * Get networkDependencyHealthState
   * @return networkDependencyHealthState
   */
  @javax.annotation.Nonnull
  public IntegrationServiceEnvironmentNetworkEndPointAccessibilityState getNetworkDependencyHealthState() {
    return networkDependencyHealthState;
  }

  public void setNetworkDependencyHealthState(IntegrationServiceEnvironmentNetworkEndPointAccessibilityState networkDependencyHealthState) {
    this.networkDependencyHealthState = networkDependencyHealthState;
  }


  public IntegrationServiceEnvironmentSubnetNetworkHealth outboundNetworkDependencies(List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies) {
    this.outboundNetworkDependencies = outboundNetworkDependencies;
    return this;
  }

  public IntegrationServiceEnvironmentSubnetNetworkHealth addOutboundNetworkDependenciesItem(IntegrationServiceEnvironmentNetworkDependency outboundNetworkDependenciesItem) {
    if (this.outboundNetworkDependencies == null) {
      this.outboundNetworkDependencies = new ArrayList<>();
    }
    this.outboundNetworkDependencies.add(outboundNetworkDependenciesItem);
    return this;
  }

  /**
   * The outbound network dependencies.
   * @return outboundNetworkDependencies
   */
  @javax.annotation.Nullable
  public List<IntegrationServiceEnvironmentNetworkDependency> getOutboundNetworkDependencies() {
    return outboundNetworkDependencies;
  }

  public void setOutboundNetworkDependencies(List<IntegrationServiceEnvironmentNetworkDependency> outboundNetworkDependencies) {
    this.outboundNetworkDependencies = outboundNetworkDependencies;
  }


  public IntegrationServiceEnvironmentSubnetNetworkHealth outboundNetworkHealth(IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth) {
    this.outboundNetworkHealth = outboundNetworkHealth;
    return this;
  }

  /**
   * Get outboundNetworkHealth
   * @return outboundNetworkHealth
   */
  @javax.annotation.Nullable
  public IntegrationServiceEnvironmentNetworkDependencyHealth getOutboundNetworkHealth() {
    return outboundNetworkHealth;
  }

  public void setOutboundNetworkHealth(IntegrationServiceEnvironmentNetworkDependencyHealth outboundNetworkHealth) {
    this.outboundNetworkHealth = outboundNetworkHealth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationServiceEnvironmentSubnetNetworkHealth integrationServiceEnvironmentSubnetNetworkHealth = (IntegrationServiceEnvironmentSubnetNetworkHealth) o;
    return Objects.equals(this.networkDependencyHealthState, integrationServiceEnvironmentSubnetNetworkHealth.networkDependencyHealthState) &&
        Objects.equals(this.outboundNetworkDependencies, integrationServiceEnvironmentSubnetNetworkHealth.outboundNetworkDependencies) &&
        Objects.equals(this.outboundNetworkHealth, integrationServiceEnvironmentSubnetNetworkHealth.outboundNetworkHealth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(networkDependencyHealthState, outboundNetworkDependencies, outboundNetworkHealth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationServiceEnvironmentSubnetNetworkHealth {\n");
    sb.append("    networkDependencyHealthState: ").append(toIndentedString(networkDependencyHealthState)).append("\n");
    sb.append("    outboundNetworkDependencies: ").append(toIndentedString(outboundNetworkDependencies)).append("\n");
    sb.append("    outboundNetworkHealth: ").append(toIndentedString(outboundNetworkHealth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("networkDependencyHealthState");
    openapiFields.add("outboundNetworkDependencies");
    openapiFields.add("outboundNetworkHealth");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("networkDependencyHealthState");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationServiceEnvironmentSubnetNetworkHealth
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationServiceEnvironmentSubnetNetworkHealth.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationServiceEnvironmentSubnetNetworkHealth is not found in the empty JSON string", IntegrationServiceEnvironmentSubnetNetworkHealth.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegrationServiceEnvironmentSubnetNetworkHealth.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationServiceEnvironmentSubnetNetworkHealth` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegrationServiceEnvironmentSubnetNetworkHealth.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `networkDependencyHealthState`
      IntegrationServiceEnvironmentNetworkEndPointAccessibilityState.validateJsonElement(jsonObj.get("networkDependencyHealthState"));
      if (jsonObj.get("outboundNetworkDependencies") != null && !jsonObj.get("outboundNetworkDependencies").isJsonNull()) {
        JsonArray jsonArrayoutboundNetworkDependencies = jsonObj.getAsJsonArray("outboundNetworkDependencies");
        if (jsonArrayoutboundNetworkDependencies != null) {
          // ensure the json data is an array
          if (!jsonObj.get("outboundNetworkDependencies").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `outboundNetworkDependencies` to be an array in the JSON string but got `%s`", jsonObj.get("outboundNetworkDependencies").toString()));
          }

          // validate the optional field `outboundNetworkDependencies` (array)
          for (int i = 0; i < jsonArrayoutboundNetworkDependencies.size(); i++) {
            IntegrationServiceEnvironmentNetworkDependency.validateJsonElement(jsonArrayoutboundNetworkDependencies.get(i));
          };
        }
      }
      // validate the optional field `outboundNetworkHealth`
      if (jsonObj.get("outboundNetworkHealth") != null && !jsonObj.get("outboundNetworkHealth").isJsonNull()) {
        IntegrationServiceEnvironmentNetworkDependencyHealth.validateJsonElement(jsonObj.get("outboundNetworkHealth"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationServiceEnvironmentSubnetNetworkHealth.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationServiceEnvironmentSubnetNetworkHealth' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationServiceEnvironmentSubnetNetworkHealth> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationServiceEnvironmentSubnetNetworkHealth.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationServiceEnvironmentSubnetNetworkHealth>() {
           @Override
           public void write(JsonWriter out, IntegrationServiceEnvironmentSubnetNetworkHealth value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationServiceEnvironmentSubnetNetworkHealth read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationServiceEnvironmentSubnetNetworkHealth given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationServiceEnvironmentSubnetNetworkHealth
   * @throws IOException if the JSON string is invalid with respect to IntegrationServiceEnvironmentSubnetNetworkHealth
   */
  public static IntegrationServiceEnvironmentSubnetNetworkHealth fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationServiceEnvironmentSubnetNetworkHealth.class);
  }

  /**
   * Convert an instance of IntegrationServiceEnvironmentSubnetNetworkHealth to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

