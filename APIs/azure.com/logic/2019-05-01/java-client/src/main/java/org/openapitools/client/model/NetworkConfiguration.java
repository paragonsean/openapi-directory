/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.IntegrationServiceEnvironmentAccessEndpoint;
import org.openapitools.client.model.ResourceReference;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The network configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:11.880144-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class NetworkConfiguration {
  public static final String SERIALIZED_NAME_ACCESS_ENDPOINT = "accessEndpoint";
  @SerializedName(SERIALIZED_NAME_ACCESS_ENDPOINT)
  private IntegrationServiceEnvironmentAccessEndpoint accessEndpoint;

  public static final String SERIALIZED_NAME_SUBNETS = "subnets";
  @SerializedName(SERIALIZED_NAME_SUBNETS)
  private List<ResourceReference> subnets = new ArrayList<>();

  public static final String SERIALIZED_NAME_VIRTUAL_NETWORK_ADDRESS_SPACE = "virtualNetworkAddressSpace";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NETWORK_ADDRESS_SPACE)
  private String virtualNetworkAddressSpace;

  public NetworkConfiguration() {
  }

  public NetworkConfiguration accessEndpoint(IntegrationServiceEnvironmentAccessEndpoint accessEndpoint) {
    this.accessEndpoint = accessEndpoint;
    return this;
  }

  /**
   * Get accessEndpoint
   * @return accessEndpoint
   */
  @javax.annotation.Nullable
  public IntegrationServiceEnvironmentAccessEndpoint getAccessEndpoint() {
    return accessEndpoint;
  }

  public void setAccessEndpoint(IntegrationServiceEnvironmentAccessEndpoint accessEndpoint) {
    this.accessEndpoint = accessEndpoint;
  }


  public NetworkConfiguration subnets(List<ResourceReference> subnets) {
    this.subnets = subnets;
    return this;
  }

  public NetworkConfiguration addSubnetsItem(ResourceReference subnetsItem) {
    if (this.subnets == null) {
      this.subnets = new ArrayList<>();
    }
    this.subnets.add(subnetsItem);
    return this;
  }

  /**
   * The subnets.
   * @return subnets
   */
  @javax.annotation.Nullable
  public List<ResourceReference> getSubnets() {
    return subnets;
  }

  public void setSubnets(List<ResourceReference> subnets) {
    this.subnets = subnets;
  }


  public NetworkConfiguration virtualNetworkAddressSpace(String virtualNetworkAddressSpace) {
    this.virtualNetworkAddressSpace = virtualNetworkAddressSpace;
    return this;
  }

  /**
   * Gets the virtual network address space.
   * @return virtualNetworkAddressSpace
   */
  @javax.annotation.Nullable
  public String getVirtualNetworkAddressSpace() {
    return virtualNetworkAddressSpace;
  }

  public void setVirtualNetworkAddressSpace(String virtualNetworkAddressSpace) {
    this.virtualNetworkAddressSpace = virtualNetworkAddressSpace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NetworkConfiguration networkConfiguration = (NetworkConfiguration) o;
    return Objects.equals(this.accessEndpoint, networkConfiguration.accessEndpoint) &&
        Objects.equals(this.subnets, networkConfiguration.subnets) &&
        Objects.equals(this.virtualNetworkAddressSpace, networkConfiguration.virtualNetworkAddressSpace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessEndpoint, subnets, virtualNetworkAddressSpace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NetworkConfiguration {\n");
    sb.append("    accessEndpoint: ").append(toIndentedString(accessEndpoint)).append("\n");
    sb.append("    subnets: ").append(toIndentedString(subnets)).append("\n");
    sb.append("    virtualNetworkAddressSpace: ").append(toIndentedString(virtualNetworkAddressSpace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessEndpoint");
    openapiFields.add("subnets");
    openapiFields.add("virtualNetworkAddressSpace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to NetworkConfiguration
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NetworkConfiguration.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NetworkConfiguration is not found in the empty JSON string", NetworkConfiguration.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NetworkConfiguration.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NetworkConfiguration` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `accessEndpoint`
      if (jsonObj.get("accessEndpoint") != null && !jsonObj.get("accessEndpoint").isJsonNull()) {
        IntegrationServiceEnvironmentAccessEndpoint.validateJsonElement(jsonObj.get("accessEndpoint"));
      }
      if (jsonObj.get("subnets") != null && !jsonObj.get("subnets").isJsonNull()) {
        JsonArray jsonArraysubnets = jsonObj.getAsJsonArray("subnets");
        if (jsonArraysubnets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("subnets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `subnets` to be an array in the JSON string but got `%s`", jsonObj.get("subnets").toString()));
          }

          // validate the optional field `subnets` (array)
          for (int i = 0; i < jsonArraysubnets.size(); i++) {
            ResourceReference.validateJsonElement(jsonArraysubnets.get(i));
          };
        }
      }
      if ((jsonObj.get("virtualNetworkAddressSpace") != null && !jsonObj.get("virtualNetworkAddressSpace").isJsonNull()) && !jsonObj.get("virtualNetworkAddressSpace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNetworkAddressSpace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNetworkAddressSpace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NetworkConfiguration.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NetworkConfiguration' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NetworkConfiguration> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NetworkConfiguration.class));

       return (TypeAdapter<T>) new TypeAdapter<NetworkConfiguration>() {
           @Override
           public void write(JsonWriter out, NetworkConfiguration value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NetworkConfiguration read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of NetworkConfiguration given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of NetworkConfiguration
   * @throws IOException if the JSON string is invalid with respect to NetworkConfiguration
   */
  public static NetworkConfiguration fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NetworkConfiguration.class);
  }

  /**
   * Convert an instance of NetworkConfiguration to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

