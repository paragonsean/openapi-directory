/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ManagedApi from '../model/ManagedApi';

/**
* IntegrationServiceEnvironmentManagedApi service.
* @module api/IntegrationServiceEnvironmentManagedApiApi
* @version 2019-05-01
*/
export default class IntegrationServiceEnvironmentManagedApiApi {

    /**
    * Constructs a new IntegrationServiceEnvironmentManagedApiApi. 
    * @alias module:api/IntegrationServiceEnvironmentManagedApiApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationServiceEnvironmentManagedApisDelete operation.
     * @callback module:api/IntegrationServiceEnvironmentManagedApiApi~integrationServiceEnvironmentManagedApisDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the integration service environment managed Api.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiName The api name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationServiceEnvironmentManagedApiApi~integrationServiceEnvironmentManagedApisDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationServiceEnvironmentManagedApisDelete(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentManagedApisDelete");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentManagedApisDelete");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentManagedApisDelete");
      }
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling integrationServiceEnvironmentManagedApisDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentManagedApisDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName,
        'apiName': apiName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentManagedApisGet operation.
     * @callback module:api/IntegrationServiceEnvironmentManagedApiApi~integrationServiceEnvironmentManagedApisGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the integration service environment managed Api.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group name.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiName The api name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationServiceEnvironmentManagedApiApi~integrationServiceEnvironmentManagedApisGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedApi}
     */
    integrationServiceEnvironmentManagedApisGet(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentManagedApisGet");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentManagedApisGet");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentManagedApisGet");
      }
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling integrationServiceEnvironmentManagedApisGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentManagedApisGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName,
        'apiName': apiName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedApi;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentManagedApisPut operation.
     * @callback module:api/IntegrationServiceEnvironmentManagedApiApi~integrationServiceEnvironmentManagedApisPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagedApi} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Puts the integration service environment managed Api.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group name.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiName The api name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationServiceEnvironmentManagedApiApi~integrationServiceEnvironmentManagedApisPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagedApi}
     */
    integrationServiceEnvironmentManagedApisPut(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentManagedApisPut");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentManagedApisPut");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentManagedApisPut");
      }
      // verify the required parameter 'apiName' is set
      if (apiName === undefined || apiName === null) {
        throw new Error("Missing the required parameter 'apiName' when calling integrationServiceEnvironmentManagedApisPut");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentManagedApisPut");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName,
        'apiName': apiName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagedApi;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}/managedApis/{apiName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
