/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import IntegrationServiceEnvironment from '../model/IntegrationServiceEnvironment';
import IntegrationServiceEnvironmentListResult from '../model/IntegrationServiceEnvironmentListResult';

/**
* IntegrationServiceEnvironments service.
* @module api/IntegrationServiceEnvironmentsApi
* @version 2019-05-01
*/
export default class IntegrationServiceEnvironmentsApi {

    /**
    * Constructs a new IntegrationServiceEnvironmentsApi. 
    * @alias module:api/IntegrationServiceEnvironmentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationServiceEnvironmentsCreateOrUpdate operation.
     * @callback module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationServiceEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an integration service environment.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationServiceEnvironment} integrationServiceEnvironment The integration service environment.
     * @param {module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationServiceEnvironment}
     */
    integrationServiceEnvironmentsCreateOrUpdate(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiVersion, integrationServiceEnvironment, callback) {
      let postBody = integrationServiceEnvironment;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentsCreateOrUpdate");
      }
      // verify the required parameter 'integrationServiceEnvironment' is set
      if (integrationServiceEnvironment === undefined || integrationServiceEnvironment === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironment' when calling integrationServiceEnvironmentsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationServiceEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentsDelete operation.
     * @callback module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an integration service environment.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationServiceEnvironmentsDelete(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentsDelete");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentsDelete");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentsGet operation.
     * @callback module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationServiceEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an integration service environment.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationServiceEnvironment}
     */
    integrationServiceEnvironmentsGet(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentsGet");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentsGet");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationServiceEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentsListByResourceGroup operation.
     * @callback module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationServiceEnvironmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of integration service environments by resource group.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationServiceEnvironmentListResult}
     */
    integrationServiceEnvironmentsListByResourceGroup(subscriptionId, resourceGroup, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationServiceEnvironmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentsListBySubscription operation.
     * @callback module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationServiceEnvironmentListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of integration service environments by subscription.
     * @param {String} subscriptionId The subscription id.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationServiceEnvironmentListResult}
     */
    integrationServiceEnvironmentsListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentsListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentsListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationServiceEnvironmentListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Logic/integrationServiceEnvironments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationServiceEnvironmentsUpdate operation.
     * @callback module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationServiceEnvironment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an integration service environment.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroup The resource group.
     * @param {String} integrationServiceEnvironmentName The integration service environment name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationServiceEnvironment} integrationServiceEnvironment The integration service environment.
     * @param {module:api/IntegrationServiceEnvironmentsApi~integrationServiceEnvironmentsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationServiceEnvironment}
     */
    integrationServiceEnvironmentsUpdate(subscriptionId, resourceGroup, integrationServiceEnvironmentName, apiVersion, integrationServiceEnvironment, callback) {
      let postBody = integrationServiceEnvironment;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'resourceGroup' is set
      if (resourceGroup === undefined || resourceGroup === null) {
        throw new Error("Missing the required parameter 'resourceGroup' when calling integrationServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'integrationServiceEnvironmentName' is set
      if (integrationServiceEnvironmentName === undefined || integrationServiceEnvironmentName === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironmentName' when calling integrationServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationServiceEnvironmentsUpdate");
      }
      // verify the required parameter 'integrationServiceEnvironment' is set
      if (integrationServiceEnvironment === undefined || integrationServiceEnvironment === null) {
        throw new Error("Missing the required parameter 'integrationServiceEnvironment' when calling integrationServiceEnvironmentsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroup': resourceGroup,
        'integrationServiceEnvironmentName': integrationServiceEnvironmentName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationServiceEnvironment;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Logic/integrationServiceEnvironments/{integrationServiceEnvironmentName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
