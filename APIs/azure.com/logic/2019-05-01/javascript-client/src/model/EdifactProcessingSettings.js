/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EdifactProcessingSettings model module.
 * @module model/EdifactProcessingSettings
 * @version 2019-05-01
 */
class EdifactProcessingSettings {
    /**
     * Constructs a new <code>EdifactProcessingSettings</code>.
     * The Edifact agreement protocol settings.
     * @alias module:model/EdifactProcessingSettings
     * @param createEmptyXmlTagsForTrailingSeparators {Boolean} The value indicating whether to create empty xml tags for trailing separators.
     * @param maskSecurityInfo {Boolean} The value indicating whether to mask security information.
     * @param preserveInterchange {Boolean} The value indicating whether to preserve interchange.
     * @param suspendInterchangeOnError {Boolean} The value indicating whether to suspend interchange on error.
     * @param useDotAsDecimalSeparator {Boolean} The value indicating whether to use dot as decimal separator.
     */
    constructor(createEmptyXmlTagsForTrailingSeparators, maskSecurityInfo, preserveInterchange, suspendInterchangeOnError, useDotAsDecimalSeparator) { 
        
        EdifactProcessingSettings.initialize(this, createEmptyXmlTagsForTrailingSeparators, maskSecurityInfo, preserveInterchange, suspendInterchangeOnError, useDotAsDecimalSeparator);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, createEmptyXmlTagsForTrailingSeparators, maskSecurityInfo, preserveInterchange, suspendInterchangeOnError, useDotAsDecimalSeparator) { 
        obj['createEmptyXmlTagsForTrailingSeparators'] = createEmptyXmlTagsForTrailingSeparators;
        obj['maskSecurityInfo'] = maskSecurityInfo;
        obj['preserveInterchange'] = preserveInterchange;
        obj['suspendInterchangeOnError'] = suspendInterchangeOnError;
        obj['useDotAsDecimalSeparator'] = useDotAsDecimalSeparator;
    }

    /**
     * Constructs a <code>EdifactProcessingSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EdifactProcessingSettings} obj Optional instance to populate.
     * @return {module:model/EdifactProcessingSettings} The populated <code>EdifactProcessingSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EdifactProcessingSettings();

            if (data.hasOwnProperty('createEmptyXmlTagsForTrailingSeparators')) {
                obj['createEmptyXmlTagsForTrailingSeparators'] = ApiClient.convertToType(data['createEmptyXmlTagsForTrailingSeparators'], 'Boolean');
            }
            if (data.hasOwnProperty('maskSecurityInfo')) {
                obj['maskSecurityInfo'] = ApiClient.convertToType(data['maskSecurityInfo'], 'Boolean');
            }
            if (data.hasOwnProperty('preserveInterchange')) {
                obj['preserveInterchange'] = ApiClient.convertToType(data['preserveInterchange'], 'Boolean');
            }
            if (data.hasOwnProperty('suspendInterchangeOnError')) {
                obj['suspendInterchangeOnError'] = ApiClient.convertToType(data['suspendInterchangeOnError'], 'Boolean');
            }
            if (data.hasOwnProperty('useDotAsDecimalSeparator')) {
                obj['useDotAsDecimalSeparator'] = ApiClient.convertToType(data['useDotAsDecimalSeparator'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EdifactProcessingSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EdifactProcessingSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EdifactProcessingSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

EdifactProcessingSettings.RequiredProperties = ["createEmptyXmlTagsForTrailingSeparators", "maskSecurityInfo", "preserveInterchange", "suspendInterchangeOnError", "useDotAsDecimalSeparator"];

/**
 * The value indicating whether to create empty xml tags for trailing separators.
 * @member {Boolean} createEmptyXmlTagsForTrailingSeparators
 */
EdifactProcessingSettings.prototype['createEmptyXmlTagsForTrailingSeparators'] = undefined;

/**
 * The value indicating whether to mask security information.
 * @member {Boolean} maskSecurityInfo
 */
EdifactProcessingSettings.prototype['maskSecurityInfo'] = undefined;

/**
 * The value indicating whether to preserve interchange.
 * @member {Boolean} preserveInterchange
 */
EdifactProcessingSettings.prototype['preserveInterchange'] = undefined;

/**
 * The value indicating whether to suspend interchange on error.
 * @member {Boolean} suspendInterchangeOnError
 */
EdifactProcessingSettings.prototype['suspendInterchangeOnError'] = undefined;

/**
 * The value indicating whether to use dot as decimal separator.
 * @member {Boolean} useDotAsDecimalSeparator
 */
EdifactProcessingSettings.prototype['useDotAsDecimalSeparator'] = undefined;






export default EdifactProcessingSettings;

