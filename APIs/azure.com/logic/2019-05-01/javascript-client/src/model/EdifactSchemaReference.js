/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EdifactSchemaReference model module.
 * @module model/EdifactSchemaReference
 * @version 2019-05-01
 */
class EdifactSchemaReference {
    /**
     * Constructs a new <code>EdifactSchemaReference</code>.
     * The Edifact schema reference.
     * @alias module:model/EdifactSchemaReference
     * @param messageId {String} The message id.
     * @param messageRelease {String} The message release version.
     * @param messageVersion {String} The message version.
     * @param schemaName {String} The schema name.
     */
    constructor(messageId, messageRelease, messageVersion, schemaName) { 
        
        EdifactSchemaReference.initialize(this, messageId, messageRelease, messageVersion, schemaName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageId, messageRelease, messageVersion, schemaName) { 
        obj['messageId'] = messageId;
        obj['messageRelease'] = messageRelease;
        obj['messageVersion'] = messageVersion;
        obj['schemaName'] = schemaName;
    }

    /**
     * Constructs a <code>EdifactSchemaReference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EdifactSchemaReference} obj Optional instance to populate.
     * @return {module:model/EdifactSchemaReference} The populated <code>EdifactSchemaReference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EdifactSchemaReference();

            if (data.hasOwnProperty('associationAssignedCode')) {
                obj['associationAssignedCode'] = ApiClient.convertToType(data['associationAssignedCode'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('messageRelease')) {
                obj['messageRelease'] = ApiClient.convertToType(data['messageRelease'], 'String');
            }
            if (data.hasOwnProperty('messageVersion')) {
                obj['messageVersion'] = ApiClient.convertToType(data['messageVersion'], 'String');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('senderApplicationId')) {
                obj['senderApplicationId'] = ApiClient.convertToType(data['senderApplicationId'], 'String');
            }
            if (data.hasOwnProperty('senderApplicationQualifier')) {
                obj['senderApplicationQualifier'] = ApiClient.convertToType(data['senderApplicationQualifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EdifactSchemaReference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EdifactSchemaReference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EdifactSchemaReference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['associationAssignedCode'] && !(typeof data['associationAssignedCode'] === 'string' || data['associationAssignedCode'] instanceof String)) {
            throw new Error("Expected the field `associationAssignedCode` to be a primitive type in the JSON string but got " + data['associationAssignedCode']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['messageRelease'] && !(typeof data['messageRelease'] === 'string' || data['messageRelease'] instanceof String)) {
            throw new Error("Expected the field `messageRelease` to be a primitive type in the JSON string but got " + data['messageRelease']);
        }
        // ensure the json data is a string
        if (data['messageVersion'] && !(typeof data['messageVersion'] === 'string' || data['messageVersion'] instanceof String)) {
            throw new Error("Expected the field `messageVersion` to be a primitive type in the JSON string but got " + data['messageVersion']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['senderApplicationId'] && !(typeof data['senderApplicationId'] === 'string' || data['senderApplicationId'] instanceof String)) {
            throw new Error("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got " + data['senderApplicationId']);
        }
        // ensure the json data is a string
        if (data['senderApplicationQualifier'] && !(typeof data['senderApplicationQualifier'] === 'string' || data['senderApplicationQualifier'] instanceof String)) {
            throw new Error("Expected the field `senderApplicationQualifier` to be a primitive type in the JSON string but got " + data['senderApplicationQualifier']);
        }

        return true;
    }


}

EdifactSchemaReference.RequiredProperties = ["messageId", "messageRelease", "messageVersion", "schemaName"];

/**
 * The association assigned code.
 * @member {String} associationAssignedCode
 */
EdifactSchemaReference.prototype['associationAssignedCode'] = undefined;

/**
 * The message id.
 * @member {String} messageId
 */
EdifactSchemaReference.prototype['messageId'] = undefined;

/**
 * The message release version.
 * @member {String} messageRelease
 */
EdifactSchemaReference.prototype['messageRelease'] = undefined;

/**
 * The message version.
 * @member {String} messageVersion
 */
EdifactSchemaReference.prototype['messageVersion'] = undefined;

/**
 * The schema name.
 * @member {String} schemaName
 */
EdifactSchemaReference.prototype['schemaName'] = undefined;

/**
 * The sender application id.
 * @member {String} senderApplicationId
 */
EdifactSchemaReference.prototype['senderApplicationId'] = undefined;

/**
 * The sender application qualifier.
 * @member {String} senderApplicationQualifier
 */
EdifactSchemaReference.prototype['senderApplicationQualifier'] = undefined;






export default EdifactSchemaReference;

