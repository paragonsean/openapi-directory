/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrackEventsOperationOptions from './TrackEventsOperationOptions';
import TrackingEvent from './TrackingEvent';

/**
 * The TrackingEventsDefinition model module.
 * @module model/TrackingEventsDefinition
 * @version 2019-05-01
 */
class TrackingEventsDefinition {
    /**
     * Constructs a new <code>TrackingEventsDefinition</code>.
     * The tracking events definition.
     * @alias module:model/TrackingEventsDefinition
     * @param events {Array.<module:model/TrackingEvent>} The events.
     * @param sourceType {String} The source type.
     */
    constructor(events, sourceType) { 
        
        TrackingEventsDefinition.initialize(this, events, sourceType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, events, sourceType) { 
        obj['events'] = events;
        obj['sourceType'] = sourceType;
    }

    /**
     * Constructs a <code>TrackingEventsDefinition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackingEventsDefinition} obj Optional instance to populate.
     * @return {module:model/TrackingEventsDefinition} The populated <code>TrackingEventsDefinition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackingEventsDefinition();

            if (data.hasOwnProperty('events')) {
                obj['events'] = ApiClient.convertToType(data['events'], [TrackingEvent]);
            }
            if (data.hasOwnProperty('sourceType')) {
                obj['sourceType'] = ApiClient.convertToType(data['sourceType'], 'String');
            }
            if (data.hasOwnProperty('trackEventsOptions')) {
                obj['trackEventsOptions'] = TrackEventsOperationOptions.constructFromObject(data['trackEventsOptions']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackingEventsDefinition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackingEventsDefinition</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrackingEventsDefinition.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['events']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['events'])) {
                throw new Error("Expected the field `events` to be an array in the JSON data but got " + data['events']);
            }
            // validate the optional field `events` (array)
            for (const item of data['events']) {
                TrackingEvent.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sourceType'] && !(typeof data['sourceType'] === 'string' || data['sourceType'] instanceof String)) {
            throw new Error("Expected the field `sourceType` to be a primitive type in the JSON string but got " + data['sourceType']);
        }

        return true;
    }


}

TrackingEventsDefinition.RequiredProperties = ["events", "sourceType"];

/**
 * The events.
 * @member {Array.<module:model/TrackingEvent>} events
 */
TrackingEventsDefinition.prototype['events'] = undefined;

/**
 * The source type.
 * @member {String} sourceType
 */
TrackingEventsDefinition.prototype['sourceType'] = undefined;

/**
 * @member {module:model/TrackEventsOperationOptions} trackEventsOptions
 */
TrackingEventsDefinition.prototype['trackEventsOptions'] = undefined;






export default TrackingEventsDefinition;

