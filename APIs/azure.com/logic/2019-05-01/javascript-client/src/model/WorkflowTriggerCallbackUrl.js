/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import WorkflowTriggerListCallbackUrlQueries from './WorkflowTriggerListCallbackUrlQueries';

/**
 * The WorkflowTriggerCallbackUrl model module.
 * @module model/WorkflowTriggerCallbackUrl
 * @version 2019-05-01
 */
class WorkflowTriggerCallbackUrl {
    /**
     * Constructs a new <code>WorkflowTriggerCallbackUrl</code>.
     * The workflow trigger callback URL.
     * @alias module:model/WorkflowTriggerCallbackUrl
     */
    constructor() { 
        
        WorkflowTriggerCallbackUrl.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowTriggerCallbackUrl</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowTriggerCallbackUrl} obj Optional instance to populate.
     * @return {module:model/WorkflowTriggerCallbackUrl} The populated <code>WorkflowTriggerCallbackUrl</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowTriggerCallbackUrl();

            if (data.hasOwnProperty('basePath')) {
                obj['basePath'] = ApiClient.convertToType(data['basePath'], 'String');
            }
            if (data.hasOwnProperty('method')) {
                obj['method'] = ApiClient.convertToType(data['method'], 'String');
            }
            if (data.hasOwnProperty('queries')) {
                obj['queries'] = WorkflowTriggerListCallbackUrlQueries.constructFromObject(data['queries']);
            }
            if (data.hasOwnProperty('relativePath')) {
                obj['relativePath'] = ApiClient.convertToType(data['relativePath'], 'String');
            }
            if (data.hasOwnProperty('relativePathParameters')) {
                obj['relativePathParameters'] = ApiClient.convertToType(data['relativePathParameters'], ['String']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowTriggerCallbackUrl</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowTriggerCallbackUrl</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['basePath'] && !(typeof data['basePath'] === 'string' || data['basePath'] instanceof String)) {
            throw new Error("Expected the field `basePath` to be a primitive type in the JSON string but got " + data['basePath']);
        }
        // ensure the json data is a string
        if (data['method'] && !(typeof data['method'] === 'string' || data['method'] instanceof String)) {
            throw new Error("Expected the field `method` to be a primitive type in the JSON string but got " + data['method']);
        }
        // validate the optional field `queries`
        if (data['queries']) { // data not null
          WorkflowTriggerListCallbackUrlQueries.validateJSON(data['queries']);
        }
        // ensure the json data is a string
        if (data['relativePath'] && !(typeof data['relativePath'] === 'string' || data['relativePath'] instanceof String)) {
            throw new Error("Expected the field `relativePath` to be a primitive type in the JSON string but got " + data['relativePath']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['relativePathParameters'])) {
            throw new Error("Expected the field `relativePathParameters` to be an array in the JSON data but got " + data['relativePathParameters']);
        }
        // ensure the json data is a string
        if (data['value'] && !(typeof data['value'] === 'string' || data['value'] instanceof String)) {
            throw new Error("Expected the field `value` to be a primitive type in the JSON string but got " + data['value']);
        }

        return true;
    }


}



/**
 * Gets the workflow trigger callback URL base path.
 * @member {String} basePath
 */
WorkflowTriggerCallbackUrl.prototype['basePath'] = undefined;

/**
 * Gets the workflow trigger callback URL HTTP method.
 * @member {String} method
 */
WorkflowTriggerCallbackUrl.prototype['method'] = undefined;

/**
 * @member {module:model/WorkflowTriggerListCallbackUrlQueries} queries
 */
WorkflowTriggerCallbackUrl.prototype['queries'] = undefined;

/**
 * Gets the workflow trigger callback URL relative path.
 * @member {String} relativePath
 */
WorkflowTriggerCallbackUrl.prototype['relativePath'] = undefined;

/**
 * Gets the workflow trigger callback URL relative path parameters.
 * @member {Array.<String>} relativePathParameters
 */
WorkflowTriggerCallbackUrl.prototype['relativePathParameters'] = undefined;

/**
 * Gets the workflow trigger callback URL.
 * @member {String} value
 */
WorkflowTriggerCallbackUrl.prototype['value'] = undefined;






export default WorkflowTriggerCallbackUrl;

