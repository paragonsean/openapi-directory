/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContentLink from './ContentLink';
import SchemaType from './SchemaType';

/**
 * The IntegrationAccountSchemaProperties model module.
 * @module model/IntegrationAccountSchemaProperties
 * @version 2019-05-01
 */
class IntegrationAccountSchemaProperties {
    /**
     * Constructs a new <code>IntegrationAccountSchemaProperties</code>.
     * The integration account schema properties.
     * @alias module:model/IntegrationAccountSchemaProperties
     * @param schemaType {module:model/SchemaType} 
     */
    constructor(schemaType) { 
        
        IntegrationAccountSchemaProperties.initialize(this, schemaType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, schemaType) { 
        obj['schemaType'] = schemaType;
    }

    /**
     * Constructs a <code>IntegrationAccountSchemaProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationAccountSchemaProperties} obj Optional instance to populate.
     * @return {module:model/IntegrationAccountSchemaProperties} The populated <code>IntegrationAccountSchemaProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationAccountSchemaProperties();

            if (data.hasOwnProperty('changedTime')) {
                obj['changedTime'] = ApiClient.convertToType(data['changedTime'], 'Date');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], Object);
            }
            if (data.hasOwnProperty('contentLink')) {
                obj['contentLink'] = ContentLink.constructFromObject(data['contentLink']);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('documentName')) {
                obj['documentName'] = ApiClient.convertToType(data['documentName'], 'String');
            }
            if (data.hasOwnProperty('fileName')) {
                obj['fileName'] = ApiClient.convertToType(data['fileName'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('schemaType')) {
                obj['schemaType'] = SchemaType.constructFromObject(data['schemaType']);
            }
            if (data.hasOwnProperty('targetNamespace')) {
                obj['targetNamespace'] = ApiClient.convertToType(data['targetNamespace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationAccountSchemaProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationAccountSchemaProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of IntegrationAccountSchemaProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `contentLink`
        if (data['contentLink']) { // data not null
          ContentLink.validateJSON(data['contentLink']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }
        // ensure the json data is a string
        if (data['documentName'] && !(typeof data['documentName'] === 'string' || data['documentName'] instanceof String)) {
            throw new Error("Expected the field `documentName` to be a primitive type in the JSON string but got " + data['documentName']);
        }
        // ensure the json data is a string
        if (data['fileName'] && !(typeof data['fileName'] === 'string' || data['fileName'] instanceof String)) {
            throw new Error("Expected the field `fileName` to be a primitive type in the JSON string but got " + data['fileName']);
        }
        // ensure the json data is a string
        if (data['targetNamespace'] && !(typeof data['targetNamespace'] === 'string' || data['targetNamespace'] instanceof String)) {
            throw new Error("Expected the field `targetNamespace` to be a primitive type in the JSON string but got " + data['targetNamespace']);
        }

        return true;
    }


}

IntegrationAccountSchemaProperties.RequiredProperties = ["schemaType"];

/**
 * The changed time.
 * @member {Date} changedTime
 */
IntegrationAccountSchemaProperties.prototype['changedTime'] = undefined;

/**
 * The content.
 * @member {Object} content
 */
IntegrationAccountSchemaProperties.prototype['content'] = undefined;

/**
 * @member {module:model/ContentLink} contentLink
 */
IntegrationAccountSchemaProperties.prototype['contentLink'] = undefined;

/**
 * The content type.
 * @member {String} contentType
 */
IntegrationAccountSchemaProperties.prototype['contentType'] = undefined;

/**
 * The created time.
 * @member {Date} createdTime
 */
IntegrationAccountSchemaProperties.prototype['createdTime'] = undefined;

/**
 * The document name.
 * @member {String} documentName
 */
IntegrationAccountSchemaProperties.prototype['documentName'] = undefined;

/**
 * The file name.
 * @member {String} fileName
 */
IntegrationAccountSchemaProperties.prototype['fileName'] = undefined;

/**
 * The metadata.
 * @member {Object} metadata
 */
IntegrationAccountSchemaProperties.prototype['metadata'] = undefined;

/**
 * @member {module:model/SchemaType} schemaType
 */
IntegrationAccountSchemaProperties.prototype['schemaType'] = undefined;

/**
 * The target namespace of the schema.
 * @member {String} targetNamespace
 */
IntegrationAccountSchemaProperties.prototype['targetNamespace'] = undefined;






export default IntegrationAccountSchemaProperties;

