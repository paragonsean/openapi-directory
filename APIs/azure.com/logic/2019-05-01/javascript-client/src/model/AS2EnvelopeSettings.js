/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AS2EnvelopeSettings model module.
 * @module model/AS2EnvelopeSettings
 * @version 2019-05-01
 */
class AS2EnvelopeSettings {
    /**
     * Constructs a new <code>AS2EnvelopeSettings</code>.
     * The AS2 agreement envelope settings.
     * @alias module:model/AS2EnvelopeSettings
     * @param autogenerateFileName {Boolean} The value indicating whether to auto generate file name.
     * @param fileNameTemplate {String} The template for file name.
     * @param messageContentType {String} The message content type.
     * @param suspendMessageOnFileNameGenerationError {Boolean} The value indicating whether to suspend message on file name generation error.
     * @param transmitFileNameInMimeHeader {Boolean} The value indicating whether to transmit file name in mime header.
     */
    constructor(autogenerateFileName, fileNameTemplate, messageContentType, suspendMessageOnFileNameGenerationError, transmitFileNameInMimeHeader) { 
        
        AS2EnvelopeSettings.initialize(this, autogenerateFileName, fileNameTemplate, messageContentType, suspendMessageOnFileNameGenerationError, transmitFileNameInMimeHeader);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autogenerateFileName, fileNameTemplate, messageContentType, suspendMessageOnFileNameGenerationError, transmitFileNameInMimeHeader) { 
        obj['autogenerateFileName'] = autogenerateFileName;
        obj['fileNameTemplate'] = fileNameTemplate;
        obj['messageContentType'] = messageContentType;
        obj['suspendMessageOnFileNameGenerationError'] = suspendMessageOnFileNameGenerationError;
        obj['transmitFileNameInMimeHeader'] = transmitFileNameInMimeHeader;
    }

    /**
     * Constructs a <code>AS2EnvelopeSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AS2EnvelopeSettings} obj Optional instance to populate.
     * @return {module:model/AS2EnvelopeSettings} The populated <code>AS2EnvelopeSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AS2EnvelopeSettings();

            if (data.hasOwnProperty('autogenerateFileName')) {
                obj['autogenerateFileName'] = ApiClient.convertToType(data['autogenerateFileName'], 'Boolean');
            }
            if (data.hasOwnProperty('fileNameTemplate')) {
                obj['fileNameTemplate'] = ApiClient.convertToType(data['fileNameTemplate'], 'String');
            }
            if (data.hasOwnProperty('messageContentType')) {
                obj['messageContentType'] = ApiClient.convertToType(data['messageContentType'], 'String');
            }
            if (data.hasOwnProperty('suspendMessageOnFileNameGenerationError')) {
                obj['suspendMessageOnFileNameGenerationError'] = ApiClient.convertToType(data['suspendMessageOnFileNameGenerationError'], 'Boolean');
            }
            if (data.hasOwnProperty('transmitFileNameInMimeHeader')) {
                obj['transmitFileNameInMimeHeader'] = ApiClient.convertToType(data['transmitFileNameInMimeHeader'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AS2EnvelopeSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AS2EnvelopeSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AS2EnvelopeSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['fileNameTemplate'] && !(typeof data['fileNameTemplate'] === 'string' || data['fileNameTemplate'] instanceof String)) {
            throw new Error("Expected the field `fileNameTemplate` to be a primitive type in the JSON string but got " + data['fileNameTemplate']);
        }
        // ensure the json data is a string
        if (data['messageContentType'] && !(typeof data['messageContentType'] === 'string' || data['messageContentType'] instanceof String)) {
            throw new Error("Expected the field `messageContentType` to be a primitive type in the JSON string but got " + data['messageContentType']);
        }

        return true;
    }


}

AS2EnvelopeSettings.RequiredProperties = ["autogenerateFileName", "fileNameTemplate", "messageContentType", "suspendMessageOnFileNameGenerationError", "transmitFileNameInMimeHeader"];

/**
 * The value indicating whether to auto generate file name.
 * @member {Boolean} autogenerateFileName
 */
AS2EnvelopeSettings.prototype['autogenerateFileName'] = undefined;

/**
 * The template for file name.
 * @member {String} fileNameTemplate
 */
AS2EnvelopeSettings.prototype['fileNameTemplate'] = undefined;

/**
 * The message content type.
 * @member {String} messageContentType
 */
AS2EnvelopeSettings.prototype['messageContentType'] = undefined;

/**
 * The value indicating whether to suspend message on file name generation error.
 * @member {Boolean} suspendMessageOnFileNameGenerationError
 */
AS2EnvelopeSettings.prototype['suspendMessageOnFileNameGenerationError'] = undefined;

/**
 * The value indicating whether to transmit file name in mime header.
 * @member {Boolean} transmitFileNameInMimeHeader
 */
AS2EnvelopeSettings.prototype['transmitFileNameInMimeHeader'] = undefined;






export default AS2EnvelopeSettings;

