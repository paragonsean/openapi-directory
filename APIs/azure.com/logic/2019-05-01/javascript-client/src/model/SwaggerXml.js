/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SwaggerXml model module.
 * @module model/SwaggerXml
 * @version 2019-05-01
 */
class SwaggerXml {
    /**
     * Constructs a new <code>SwaggerXml</code>.
     * The Swagger XML.
     * @alias module:model/SwaggerXml
     */
    constructor() { 
        
        SwaggerXml.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SwaggerXml</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SwaggerXml} obj Optional instance to populate.
     * @return {module:model/SwaggerXml} The populated <code>SwaggerXml</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SwaggerXml();

            if (data.hasOwnProperty('attribute')) {
                obj['attribute'] = ApiClient.convertToType(data['attribute'], 'Boolean');
            }
            if (data.hasOwnProperty('extensions')) {
                obj['extensions'] = ApiClient.convertToType(data['extensions'], {'String': Object});
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespace')) {
                obj['namespace'] = ApiClient.convertToType(data['namespace'], 'String');
            }
            if (data.hasOwnProperty('prefix')) {
                obj['prefix'] = ApiClient.convertToType(data['prefix'], 'String');
            }
            if (data.hasOwnProperty('wrapped')) {
                obj['wrapped'] = ApiClient.convertToType(data['wrapped'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SwaggerXml</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SwaggerXml</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespace'] && !(typeof data['namespace'] === 'string' || data['namespace'] instanceof String)) {
            throw new Error("Expected the field `namespace` to be a primitive type in the JSON string but got " + data['namespace']);
        }
        // ensure the json data is a string
        if (data['prefix'] && !(typeof data['prefix'] === 'string' || data['prefix'] instanceof String)) {
            throw new Error("Expected the field `prefix` to be a primitive type in the JSON string but got " + data['prefix']);
        }

        return true;
    }


}



/**
 * Indicates whether the property should be an attribute instead of an element.
 * @member {Boolean} attribute
 */
SwaggerXml.prototype['attribute'] = undefined;

/**
 * The vendor extensions.
 * @member {Object.<String, Object>} extensions
 */
SwaggerXml.prototype['extensions'] = undefined;

/**
 * The xml element or attribute name.
 * @member {String} name
 */
SwaggerXml.prototype['name'] = undefined;

/**
 * The xml namespace.
 * @member {String} namespace
 */
SwaggerXml.prototype['namespace'] = undefined;

/**
 * The name prefix.
 * @member {String} prefix
 */
SwaggerXml.prototype['prefix'] = undefined;

/**
 * Indicates whether the array elements are wrapped in a container element.
 * @member {Boolean} wrapped
 */
SwaggerXml.prototype['wrapped'] = undefined;






export default SwaggerXml;

