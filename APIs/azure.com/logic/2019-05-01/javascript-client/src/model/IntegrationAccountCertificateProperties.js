/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import KeyVaultKeyReference from './KeyVaultKeyReference';

/**
 * The IntegrationAccountCertificateProperties model module.
 * @module model/IntegrationAccountCertificateProperties
 * @version 2019-05-01
 */
class IntegrationAccountCertificateProperties {
    /**
     * Constructs a new <code>IntegrationAccountCertificateProperties</code>.
     * The integration account certificate properties.
     * @alias module:model/IntegrationAccountCertificateProperties
     */
    constructor() { 
        
        IntegrationAccountCertificateProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>IntegrationAccountCertificateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/IntegrationAccountCertificateProperties} obj Optional instance to populate.
     * @return {module:model/IntegrationAccountCertificateProperties} The populated <code>IntegrationAccountCertificateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new IntegrationAccountCertificateProperties();

            if (data.hasOwnProperty('changedTime')) {
                obj['changedTime'] = ApiClient.convertToType(data['changedTime'], 'Date');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = KeyVaultKeyReference.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('publicCertificate')) {
                obj['publicCertificate'] = ApiClient.convertToType(data['publicCertificate'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>IntegrationAccountCertificateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>IntegrationAccountCertificateProperties</code>.
     */
    static validateJSON(data) {
        // validate the optional field `key`
        if (data['key']) { // data not null
          KeyVaultKeyReference.validateJSON(data['key']);
        }
        // ensure the json data is a string
        if (data['publicCertificate'] && !(typeof data['publicCertificate'] === 'string' || data['publicCertificate'] instanceof String)) {
            throw new Error("Expected the field `publicCertificate` to be a primitive type in the JSON string but got " + data['publicCertificate']);
        }

        return true;
    }


}



/**
 * The changed time.
 * @member {Date} changedTime
 */
IntegrationAccountCertificateProperties.prototype['changedTime'] = undefined;

/**
 * The created time.
 * @member {Date} createdTime
 */
IntegrationAccountCertificateProperties.prototype['createdTime'] = undefined;

/**
 * @member {module:model/KeyVaultKeyReference} key
 */
IntegrationAccountCertificateProperties.prototype['key'] = undefined;

/**
 * The metadata.
 * @member {Object} metadata
 */
IntegrationAccountCertificateProperties.prototype['metadata'] = undefined;

/**
 * The public certificate.
 * @member {String} publicCertificate
 */
IntegrationAccountCertificateProperties.prototype['publicCertificate'] = undefined;






export default IntegrationAccountCertificateProperties;

