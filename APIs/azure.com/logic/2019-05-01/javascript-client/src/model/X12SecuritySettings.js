/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The X12SecuritySettings model module.
 * @module model/X12SecuritySettings
 * @version 2019-05-01
 */
class X12SecuritySettings {
    /**
     * Constructs a new <code>X12SecuritySettings</code>.
     * The X12 agreement security settings.
     * @alias module:model/X12SecuritySettings
     * @param authorizationQualifier {String} The authorization qualifier.
     * @param securityQualifier {String} The security qualifier.
     */
    constructor(authorizationQualifier, securityQualifier) { 
        
        X12SecuritySettings.initialize(this, authorizationQualifier, securityQualifier);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, authorizationQualifier, securityQualifier) { 
        obj['authorizationQualifier'] = authorizationQualifier;
        obj['securityQualifier'] = securityQualifier;
    }

    /**
     * Constructs a <code>X12SecuritySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12SecuritySettings} obj Optional instance to populate.
     * @return {module:model/X12SecuritySettings} The populated <code>X12SecuritySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12SecuritySettings();

            if (data.hasOwnProperty('authorizationQualifier')) {
                obj['authorizationQualifier'] = ApiClient.convertToType(data['authorizationQualifier'], 'String');
            }
            if (data.hasOwnProperty('authorizationValue')) {
                obj['authorizationValue'] = ApiClient.convertToType(data['authorizationValue'], 'String');
            }
            if (data.hasOwnProperty('passwordValue')) {
                obj['passwordValue'] = ApiClient.convertToType(data['passwordValue'], 'String');
            }
            if (data.hasOwnProperty('securityQualifier')) {
                obj['securityQualifier'] = ApiClient.convertToType(data['securityQualifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12SecuritySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12SecuritySettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of X12SecuritySettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['authorizationQualifier'] && !(typeof data['authorizationQualifier'] === 'string' || data['authorizationQualifier'] instanceof String)) {
            throw new Error("Expected the field `authorizationQualifier` to be a primitive type in the JSON string but got " + data['authorizationQualifier']);
        }
        // ensure the json data is a string
        if (data['authorizationValue'] && !(typeof data['authorizationValue'] === 'string' || data['authorizationValue'] instanceof String)) {
            throw new Error("Expected the field `authorizationValue` to be a primitive type in the JSON string but got " + data['authorizationValue']);
        }
        // ensure the json data is a string
        if (data['passwordValue'] && !(typeof data['passwordValue'] === 'string' || data['passwordValue'] instanceof String)) {
            throw new Error("Expected the field `passwordValue` to be a primitive type in the JSON string but got " + data['passwordValue']);
        }
        // ensure the json data is a string
        if (data['securityQualifier'] && !(typeof data['securityQualifier'] === 'string' || data['securityQualifier'] instanceof String)) {
            throw new Error("Expected the field `securityQualifier` to be a primitive type in the JSON string but got " + data['securityQualifier']);
        }

        return true;
    }


}

X12SecuritySettings.RequiredProperties = ["authorizationQualifier", "securityQualifier"];

/**
 * The authorization qualifier.
 * @member {String} authorizationQualifier
 */
X12SecuritySettings.prototype['authorizationQualifier'] = undefined;

/**
 * The authorization value.
 * @member {String} authorizationValue
 */
X12SecuritySettings.prototype['authorizationValue'] = undefined;

/**
 * The password value.
 * @member {String} passwordValue
 */
X12SecuritySettings.prototype['passwordValue'] = undefined;

/**
 * The security qualifier.
 * @member {String} securityQualifier
 */
X12SecuritySettings.prototype['securityQualifier'] = undefined;






export default X12SecuritySettings;

