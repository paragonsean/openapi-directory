/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import IntegrationServiceEnvironmentAccessEndpoint from './IntegrationServiceEnvironmentAccessEndpoint';
import ResourceReference from './ResourceReference';

/**
 * The NetworkConfiguration model module.
 * @module model/NetworkConfiguration
 * @version 2019-05-01
 */
class NetworkConfiguration {
    /**
     * Constructs a new <code>NetworkConfiguration</code>.
     * The network configuration.
     * @alias module:model/NetworkConfiguration
     */
    constructor() { 
        
        NetworkConfiguration.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NetworkConfiguration</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NetworkConfiguration} obj Optional instance to populate.
     * @return {module:model/NetworkConfiguration} The populated <code>NetworkConfiguration</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NetworkConfiguration();

            if (data.hasOwnProperty('accessEndpoint')) {
                obj['accessEndpoint'] = IntegrationServiceEnvironmentAccessEndpoint.constructFromObject(data['accessEndpoint']);
            }
            if (data.hasOwnProperty('subnets')) {
                obj['subnets'] = ApiClient.convertToType(data['subnets'], [ResourceReference]);
            }
            if (data.hasOwnProperty('virtualNetworkAddressSpace')) {
                obj['virtualNetworkAddressSpace'] = ApiClient.convertToType(data['virtualNetworkAddressSpace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NetworkConfiguration</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NetworkConfiguration</code>.
     */
    static validateJSON(data) {
        // validate the optional field `accessEndpoint`
        if (data['accessEndpoint']) { // data not null
          IntegrationServiceEnvironmentAccessEndpoint.validateJSON(data['accessEndpoint']);
        }
        if (data['subnets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subnets'])) {
                throw new Error("Expected the field `subnets` to be an array in the JSON data but got " + data['subnets']);
            }
            // validate the optional field `subnets` (array)
            for (const item of data['subnets']) {
                ResourceReference.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['virtualNetworkAddressSpace'] && !(typeof data['virtualNetworkAddressSpace'] === 'string' || data['virtualNetworkAddressSpace'] instanceof String)) {
            throw new Error("Expected the field `virtualNetworkAddressSpace` to be a primitive type in the JSON string but got " + data['virtualNetworkAddressSpace']);
        }

        return true;
    }


}



/**
 * @member {module:model/IntegrationServiceEnvironmentAccessEndpoint} accessEndpoint
 */
NetworkConfiguration.prototype['accessEndpoint'] = undefined;

/**
 * The subnets.
 * @member {Array.<module:model/ResourceReference>} subnets
 */
NetworkConfiguration.prototype['subnets'] = undefined;

/**
 * Gets the virtual network address space.
 * @member {String} virtualNetworkAddressSpace
 */
NetworkConfiguration.prototype['virtualNetworkAddressSpace'] = undefined;






export default NetworkConfiguration;

