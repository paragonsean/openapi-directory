/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogicManagementClient);
  }
}(this, function(expect, LogicManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogicManagementClient.EdifactEnvelopeSettings();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('EdifactEnvelopeSettings', function() {
    it('should create an instance of EdifactEnvelopeSettings', function() {
      // uncomment below and update the code to test EdifactEnvelopeSettings
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be.a(LogicManagementClient.EdifactEnvelopeSettings);
    });

    it('should have the property applicationReferenceId (base name: "applicationReferenceId")', function() {
      // uncomment below and update the code to test the property applicationReferenceId
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property applyDelimiterStringAdvice (base name: "applyDelimiterStringAdvice")', function() {
      // uncomment below and update the code to test the property applyDelimiterStringAdvice
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property communicationAgreementId (base name: "communicationAgreementId")', function() {
      // uncomment below and update the code to test the property communicationAgreementId
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property createGroupingSegments (base name: "createGroupingSegments")', function() {
      // uncomment below and update the code to test the property createGroupingSegments
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property enableDefaultGroupHeaders (base name: "enableDefaultGroupHeaders")', function() {
      // uncomment below and update the code to test the property enableDefaultGroupHeaders
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property functionalGroupId (base name: "functionalGroupId")', function() {
      // uncomment below and update the code to test the property functionalGroupId
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupApplicationPassword (base name: "groupApplicationPassword")', function() {
      // uncomment below and update the code to test the property groupApplicationPassword
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupApplicationReceiverId (base name: "groupApplicationReceiverId")', function() {
      // uncomment below and update the code to test the property groupApplicationReceiverId
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupApplicationReceiverQualifier (base name: "groupApplicationReceiverQualifier")', function() {
      // uncomment below and update the code to test the property groupApplicationReceiverQualifier
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupApplicationSenderId (base name: "groupApplicationSenderId")', function() {
      // uncomment below and update the code to test the property groupApplicationSenderId
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupApplicationSenderQualifier (base name: "groupApplicationSenderQualifier")', function() {
      // uncomment below and update the code to test the property groupApplicationSenderQualifier
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupAssociationAssignedCode (base name: "groupAssociationAssignedCode")', function() {
      // uncomment below and update the code to test the property groupAssociationAssignedCode
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControlNumberLowerBound (base name: "groupControlNumberLowerBound")', function() {
      // uncomment below and update the code to test the property groupControlNumberLowerBound
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControlNumberPrefix (base name: "groupControlNumberPrefix")', function() {
      // uncomment below and update the code to test the property groupControlNumberPrefix
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControlNumberSuffix (base name: "groupControlNumberSuffix")', function() {
      // uncomment below and update the code to test the property groupControlNumberSuffix
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControlNumberUpperBound (base name: "groupControlNumberUpperBound")', function() {
      // uncomment below and update the code to test the property groupControlNumberUpperBound
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupControllingAgencyCode (base name: "groupControllingAgencyCode")', function() {
      // uncomment below and update the code to test the property groupControllingAgencyCode
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupMessageRelease (base name: "groupMessageRelease")', function() {
      // uncomment below and update the code to test the property groupMessageRelease
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property groupMessageVersion (base name: "groupMessageVersion")', function() {
      // uncomment below and update the code to test the property groupMessageVersion
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeControlNumberLowerBound (base name: "interchangeControlNumberLowerBound")', function() {
      // uncomment below and update the code to test the property interchangeControlNumberLowerBound
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeControlNumberPrefix (base name: "interchangeControlNumberPrefix")', function() {
      // uncomment below and update the code to test the property interchangeControlNumberPrefix
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeControlNumberSuffix (base name: "interchangeControlNumberSuffix")', function() {
      // uncomment below and update the code to test the property interchangeControlNumberSuffix
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property interchangeControlNumberUpperBound (base name: "interchangeControlNumberUpperBound")', function() {
      // uncomment below and update the code to test the property interchangeControlNumberUpperBound
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property isTestInterchange (base name: "isTestInterchange")', function() {
      // uncomment below and update the code to test the property isTestInterchange
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property overwriteExistingTransactionSetControlNumber (base name: "overwriteExistingTransactionSetControlNumber")', function() {
      // uncomment below and update the code to test the property overwriteExistingTransactionSetControlNumber
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property processingPriorityCode (base name: "processingPriorityCode")', function() {
      // uncomment below and update the code to test the property processingPriorityCode
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property receiverInternalIdentification (base name: "receiverInternalIdentification")', function() {
      // uncomment below and update the code to test the property receiverInternalIdentification
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property receiverInternalSubIdentification (base name: "receiverInternalSubIdentification")', function() {
      // uncomment below and update the code to test the property receiverInternalSubIdentification
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property receiverReverseRoutingAddress (base name: "receiverReverseRoutingAddress")', function() {
      // uncomment below and update the code to test the property receiverReverseRoutingAddress
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property recipientReferencePasswordQualifier (base name: "recipientReferencePasswordQualifier")', function() {
      // uncomment below and update the code to test the property recipientReferencePasswordQualifier
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property recipientReferencePasswordValue (base name: "recipientReferencePasswordValue")', function() {
      // uncomment below and update the code to test the property recipientReferencePasswordValue
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property rolloverGroupControlNumber (base name: "rolloverGroupControlNumber")', function() {
      // uncomment below and update the code to test the property rolloverGroupControlNumber
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property rolloverInterchangeControlNumber (base name: "rolloverInterchangeControlNumber")', function() {
      // uncomment below and update the code to test the property rolloverInterchangeControlNumber
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property rolloverTransactionSetControlNumber (base name: "rolloverTransactionSetControlNumber")', function() {
      // uncomment below and update the code to test the property rolloverTransactionSetControlNumber
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property senderInternalIdentification (base name: "senderInternalIdentification")', function() {
      // uncomment below and update the code to test the property senderInternalIdentification
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property senderInternalSubIdentification (base name: "senderInternalSubIdentification")', function() {
      // uncomment below and update the code to test the property senderInternalSubIdentification
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property senderReverseRoutingAddress (base name: "senderReverseRoutingAddress")', function() {
      // uncomment below and update the code to test the property senderReverseRoutingAddress
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberLowerBound (base name: "transactionSetControlNumberLowerBound")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberLowerBound
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberPrefix (base name: "transactionSetControlNumberPrefix")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberPrefix
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberSuffix (base name: "transactionSetControlNumberSuffix")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberSuffix
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

    it('should have the property transactionSetControlNumberUpperBound (base name: "transactionSetControlNumberUpperBound")', function() {
      // uncomment below and update the code to test the property transactionSetControlNumberUpperBound
      //var instance = new LogicManagementClient.EdifactEnvelopeSettings();
      //expect(instance).to.be();
    });

  });

}));
