/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2019-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogicManagementClient);
  }
}(this, function(expect, LogicManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogicManagementClient.SwaggerSchema();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SwaggerSchema', function() {
    it('should create an instance of SwaggerSchema', function() {
      // uncomment below and update the code to test SwaggerSchema
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be.a(LogicManagementClient.SwaggerSchema);
    });

    it('should have the property additionalProperties (base name: "additionalProperties")', function() {
      // uncomment below and update the code to test the property additionalProperties
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property allOf (base name: "allOf")', function() {
      // uncomment below and update the code to test the property allOf
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property discriminator (base name: "discriminator")', function() {
      // uncomment below and update the code to test the property discriminator
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property dynamicListNew (base name: "dynamicListNew")', function() {
      // uncomment below and update the code to test the property dynamicListNew
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSchemaNew (base name: "dynamicSchemaNew")', function() {
      // uncomment below and update the code to test the property dynamicSchemaNew
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property dynamicSchemaOld (base name: "dynamicSchemaOld")', function() {
      // uncomment below and update the code to test the property dynamicSchemaOld
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property dynamicTree (base name: "dynamicTree")', function() {
      // uncomment below and update the code to test the property dynamicTree
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property example (base name: "example")', function() {
      // uncomment below and update the code to test the property example
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property externalDocs (base name: "externalDocs")', function() {
      // uncomment below and update the code to test the property externalDocs
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property items (base name: "items")', function() {
      // uncomment below and update the code to test the property items
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property maxProperties (base name: "maxProperties")', function() {
      // uncomment below and update the code to test the property maxProperties
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property minProperties (base name: "minProperties")', function() {
      // uncomment below and update the code to test the property minProperties
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property notificationUrlExtension (base name: "notificationUrlExtension")', function() {
      // uncomment below and update the code to test the property notificationUrlExtension
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property properties (base name: "properties")', function() {
      // uncomment below and update the code to test the property properties
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property readOnly (base name: "readOnly")', function() {
      // uncomment below and update the code to test the property readOnly
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property ref (base name: "ref")', function() {
      // uncomment below and update the code to test the property ref
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property required (base name: "required")', function() {
      // uncomment below and update the code to test the property required
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property title (base name: "title")', function() {
      // uncomment below and update the code to test the property title
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

    it('should have the property xml (base name: "xml")', function() {
      // uncomment below and update the code to test the property xml
      //var instance = new LogicManagementClient.SwaggerSchema();
      //expect(instance).to.be();
    });

  });

}));
