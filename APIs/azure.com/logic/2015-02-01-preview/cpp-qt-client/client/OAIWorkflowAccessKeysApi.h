/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowAccessKeysApi_H
#define OAI_OAIWorkflowAccessKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRegenerateSecretKeyParameters.h"
#include "OAIWorkflowAccessKey.h"
#include "OAIWorkflowAccessKeyListResult.h"
#include "OAIWorkflowSecretKeys.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowAccessKeysApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowAccessKeysApi(const int timeOut = 0);
    ~OAIWorkflowAccessKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  access_key_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workflow_accesskey OAIWorkflowAccessKey [required]
    */
    virtual void workflowAccessKeysCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &access_key_name, const QString &api_version, const OAIWorkflowAccessKey &workflow_accesskey);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  access_key_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowAccessKeysDelete(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &access_key_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  access_key_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowAccessKeysGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &access_key_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    */
    virtual void workflowAccessKeysList(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  access_key_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowAccessKeysListSecretKeys(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &access_key_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  access_key_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRegenerateSecretKeyParameters [required]
    */
    virtual void workflowAccessKeysRegenerateSecretKey(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &access_key_name, const QString &api_version, const OAIRegenerateSecretKeyParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workflowAccessKeysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workflowAccessKeysDeleteCallback(OAIHttpRequestWorker *worker);
    void workflowAccessKeysGetCallback(OAIHttpRequestWorker *worker);
    void workflowAccessKeysListCallback(OAIHttpRequestWorker *worker);
    void workflowAccessKeysListSecretKeysCallback(OAIHttpRequestWorker *worker);
    void workflowAccessKeysRegenerateSecretKeyCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workflowAccessKeysCreateOrUpdateSignal(OAIWorkflowAccessKey summary);
    void workflowAccessKeysDeleteSignal();
    void workflowAccessKeysGetSignal(OAIWorkflowAccessKey summary);
    void workflowAccessKeysListSignal(OAIWorkflowAccessKeyListResult summary);
    void workflowAccessKeysListSecretKeysSignal(OAIWorkflowSecretKeys summary);
    void workflowAccessKeysRegenerateSecretKeySignal(OAIWorkflowSecretKeys summary);


    void workflowAccessKeysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowAccessKey summary);
    void workflowAccessKeysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workflowAccessKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowAccessKey summary);
    void workflowAccessKeysListSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowAccessKeyListResult summary);
    void workflowAccessKeysListSecretKeysSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowSecretKeys summary);
    void workflowAccessKeysRegenerateSecretKeySignalFull(OAIHttpRequestWorker *worker, OAIWorkflowSecretKeys summary);

    Q_DECL_DEPRECATED_X("Use workflowAccessKeysCreateOrUpdateSignalError() instead")
    void workflowAccessKeysCreateOrUpdateSignalE(OAIWorkflowAccessKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysCreateOrUpdateSignalError(OAIWorkflowAccessKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysDeleteSignalError() instead")
    void workflowAccessKeysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysGetSignalError() instead")
    void workflowAccessKeysGetSignalE(OAIWorkflowAccessKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysGetSignalError(OAIWorkflowAccessKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysListSignalError() instead")
    void workflowAccessKeysListSignalE(OAIWorkflowAccessKeyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysListSignalError(OAIWorkflowAccessKeyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysListSecretKeysSignalError() instead")
    void workflowAccessKeysListSecretKeysSignalE(OAIWorkflowSecretKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysListSecretKeysSignalError(OAIWorkflowSecretKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysRegenerateSecretKeySignalError() instead")
    void workflowAccessKeysRegenerateSecretKeySignalE(OAIWorkflowSecretKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysRegenerateSecretKeySignalError(OAIWorkflowSecretKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workflowAccessKeysCreateOrUpdateSignalErrorFull() instead")
    void workflowAccessKeysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysDeleteSignalErrorFull() instead")
    void workflowAccessKeysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysGetSignalErrorFull() instead")
    void workflowAccessKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysListSignalErrorFull() instead")
    void workflowAccessKeysListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysListSecretKeysSignalErrorFull() instead")
    void workflowAccessKeysListSecretKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysListSecretKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowAccessKeysRegenerateSecretKeySignalErrorFull() instead")
    void workflowAccessKeysRegenerateSecretKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowAccessKeysRegenerateSecretKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
