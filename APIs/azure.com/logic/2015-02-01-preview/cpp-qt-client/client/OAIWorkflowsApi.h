/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWorkflowsApi_H
#define OAI_OAIWorkflowsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIRunWorkflowParameters.h"
#include "OAIWorkflow.h"
#include "OAIWorkflowListResult.h"
#include "OAIWorkflowRun.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWorkflowsApi : public QObject {
    Q_OBJECT

public:
    OAIWorkflowsApi(const int timeOut = 0);
    ~OAIWorkflowsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workflow OAIWorkflow [required]
    */
    virtual void workflowsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version, const OAIWorkflow &workflow);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowsDisable(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowsEnable(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void workflowsGet(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void workflowsListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void workflowsListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIRunWorkflowParameters [required]
    */
    virtual void workflowsRun(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version, const OAIRunWorkflowParameters &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workflow OAIWorkflow [required]
    */
    virtual void workflowsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version, const OAIWorkflow &workflow);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  workflow OAIWorkflow [required]
    */
    virtual void workflowsValidate(const QString &subscription_id, const QString &resource_group_name, const QString &workflow_name, const QString &api_version, const OAIWorkflow &workflow);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void workflowsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void workflowsDeleteCallback(OAIHttpRequestWorker *worker);
    void workflowsDisableCallback(OAIHttpRequestWorker *worker);
    void workflowsEnableCallback(OAIHttpRequestWorker *worker);
    void workflowsGetCallback(OAIHttpRequestWorker *worker);
    void workflowsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void workflowsListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void workflowsRunCallback(OAIHttpRequestWorker *worker);
    void workflowsUpdateCallback(OAIHttpRequestWorker *worker);
    void workflowsValidateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void workflowsCreateOrUpdateSignal(OAIWorkflow summary);
    void workflowsDeleteSignal();
    void workflowsDisableSignal();
    void workflowsEnableSignal();
    void workflowsGetSignal(OAIWorkflow summary);
    void workflowsListByResourceGroupSignal(OAIWorkflowListResult summary);
    void workflowsListBySubscriptionSignal(OAIWorkflowListResult summary);
    void workflowsRunSignal(OAIWorkflowRun summary);
    void workflowsUpdateSignal(OAIWorkflow summary);
    void workflowsValidateSignal();


    void workflowsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void workflowsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void workflowsDisableSignalFull(OAIHttpRequestWorker *worker);
    void workflowsEnableSignalFull(OAIHttpRequestWorker *worker);
    void workflowsGetSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void workflowsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowListResult summary);
    void workflowsListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowListResult summary);
    void workflowsRunSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowRun summary);
    void workflowsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIWorkflow summary);
    void workflowsValidateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use workflowsCreateOrUpdateSignalError() instead")
    void workflowsCreateOrUpdateSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsCreateOrUpdateSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsDeleteSignalError() instead")
    void workflowsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsDisableSignalError() instead")
    void workflowsDisableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsDisableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsEnableSignalError() instead")
    void workflowsEnableSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsEnableSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsGetSignalError() instead")
    void workflowsGetSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsGetSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsListByResourceGroupSignalError() instead")
    void workflowsListByResourceGroupSignalE(OAIWorkflowListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsListByResourceGroupSignalError(OAIWorkflowListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsListBySubscriptionSignalError() instead")
    void workflowsListBySubscriptionSignalE(OAIWorkflowListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsListBySubscriptionSignalError(OAIWorkflowListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsRunSignalError() instead")
    void workflowsRunSignalE(OAIWorkflowRun summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsRunSignalError(OAIWorkflowRun summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsUpdateSignalError() instead")
    void workflowsUpdateSignalE(OAIWorkflow summary, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsUpdateSignalError(OAIWorkflow summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsValidateSignalError() instead")
    void workflowsValidateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsValidateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use workflowsCreateOrUpdateSignalErrorFull() instead")
    void workflowsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsDeleteSignalErrorFull() instead")
    void workflowsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsDisableSignalErrorFull() instead")
    void workflowsDisableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsDisableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsEnableSignalErrorFull() instead")
    void workflowsEnableSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsEnableSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsGetSignalErrorFull() instead")
    void workflowsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsListByResourceGroupSignalErrorFull() instead")
    void workflowsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsListBySubscriptionSignalErrorFull() instead")
    void workflowsListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsRunSignalErrorFull() instead")
    void workflowsRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsUpdateSignalErrorFull() instead")
    void workflowsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use workflowsValidateSignalErrorFull() instead")
    void workflowsValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void workflowsValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
