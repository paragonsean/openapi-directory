/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowProperties::OAIWorkflowProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowProperties::OAIWorkflowProperties() {
    this->initializeModel();
}

OAIWorkflowProperties::~OAIWorkflowProperties() {}

void OAIWorkflowProperties::initializeModel() {

    m_access_endpoint_isSet = false;
    m_access_endpoint_isValid = false;

    m_changed_time_isSet = false;
    m_changed_time_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_definition_isSet = false;
    m_definition_isValid = false;

    m_definition_link_isSet = false;
    m_definition_link_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_parameters_link_isSet = false;
    m_parameters_link_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIWorkflowProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowProperties::fromJsonObject(QJsonObject json) {

    m_access_endpoint_isValid = ::OpenAPI::fromJsonValue(m_access_endpoint, json[QString("accessEndpoint")]);
    m_access_endpoint_isSet = !json[QString("accessEndpoint")].isNull() && m_access_endpoint_isValid;

    m_changed_time_isValid = ::OpenAPI::fromJsonValue(m_changed_time, json[QString("changedTime")]);
    m_changed_time_isSet = !json[QString("changedTime")].isNull() && m_changed_time_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_definition_isValid = ::OpenAPI::fromJsonValue(m_definition, json[QString("definition")]);
    m_definition_isSet = !json[QString("definition")].isNull() && m_definition_isValid;

    m_definition_link_isValid = ::OpenAPI::fromJsonValue(m_definition_link, json[QString("definitionLink")]);
    m_definition_link_isSet = !json[QString("definitionLink")].isNull() && m_definition_link_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_parameters_link_isValid = ::OpenAPI::fromJsonValue(m_parameters_link, json[QString("parametersLink")]);
    m_parameters_link_isSet = !json[QString("parametersLink")].isNull() && m_parameters_link_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIWorkflowProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_endpoint_isSet) {
        obj.insert(QString("accessEndpoint"), ::OpenAPI::toJsonValue(m_access_endpoint));
    }
    if (m_changed_time_isSet) {
        obj.insert(QString("changedTime"), ::OpenAPI::toJsonValue(m_changed_time));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_definition_isSet) {
        obj.insert(QString("definition"), ::OpenAPI::toJsonValue(m_definition));
    }
    if (m_definition_link.isSet()) {
        obj.insert(QString("definitionLink"), ::OpenAPI::toJsonValue(m_definition_link));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_parameters_link.isSet()) {
        obj.insert(QString("parametersLink"), ::OpenAPI::toJsonValue(m_parameters_link));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIWorkflowProperties::getAccessEndpoint() const {
    return m_access_endpoint;
}
void OAIWorkflowProperties::setAccessEndpoint(const QString &access_endpoint) {
    m_access_endpoint = access_endpoint;
    m_access_endpoint_isSet = true;
}

bool OAIWorkflowProperties::is_access_endpoint_Set() const{
    return m_access_endpoint_isSet;
}

bool OAIWorkflowProperties::is_access_endpoint_Valid() const{
    return m_access_endpoint_isValid;
}

QDateTime OAIWorkflowProperties::getChangedTime() const {
    return m_changed_time;
}
void OAIWorkflowProperties::setChangedTime(const QDateTime &changed_time) {
    m_changed_time = changed_time;
    m_changed_time_isSet = true;
}

bool OAIWorkflowProperties::is_changed_time_Set() const{
    return m_changed_time_isSet;
}

bool OAIWorkflowProperties::is_changed_time_Valid() const{
    return m_changed_time_isValid;
}

QDateTime OAIWorkflowProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIWorkflowProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIWorkflowProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIWorkflowProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIObject OAIWorkflowProperties::getDefinition() const {
    return m_definition;
}
void OAIWorkflowProperties::setDefinition(const OAIObject &definition) {
    m_definition = definition;
    m_definition_isSet = true;
}

bool OAIWorkflowProperties::is_definition_Set() const{
    return m_definition_isSet;
}

bool OAIWorkflowProperties::is_definition_Valid() const{
    return m_definition_isValid;
}

OAIContentLink OAIWorkflowProperties::getDefinitionLink() const {
    return m_definition_link;
}
void OAIWorkflowProperties::setDefinitionLink(const OAIContentLink &definition_link) {
    m_definition_link = definition_link;
    m_definition_link_isSet = true;
}

bool OAIWorkflowProperties::is_definition_link_Set() const{
    return m_definition_link_isSet;
}

bool OAIWorkflowProperties::is_definition_link_Valid() const{
    return m_definition_link_isValid;
}

QMap<QString, OAIWorkflowParameter> OAIWorkflowProperties::getParameters() const {
    return m_parameters;
}
void OAIWorkflowProperties::setParameters(const QMap<QString, OAIWorkflowParameter> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIWorkflowProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIWorkflowProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIContentLink OAIWorkflowProperties::getParametersLink() const {
    return m_parameters_link;
}
void OAIWorkflowProperties::setParametersLink(const OAIContentLink &parameters_link) {
    m_parameters_link = parameters_link;
    m_parameters_link_isSet = true;
}

bool OAIWorkflowProperties::is_parameters_link_Set() const{
    return m_parameters_link_isSet;
}

bool OAIWorkflowProperties::is_parameters_link_Valid() const{
    return m_parameters_link_isValid;
}

OAIWorkflowProvisioningState OAIWorkflowProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWorkflowProperties::setProvisioningState(const OAIWorkflowProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWorkflowProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWorkflowProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAISku OAIWorkflowProperties::getSku() const {
    return m_sku;
}
void OAIWorkflowProperties::setSku(const OAISku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIWorkflowProperties::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIWorkflowProperties::is_sku_Valid() const{
    return m_sku_isValid;
}

OAIWorkflowState OAIWorkflowProperties::getState() const {
    return m_state;
}
void OAIWorkflowProperties::setState(const OAIWorkflowState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflowProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflowProperties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIWorkflowProperties::getVersion() const {
    return m_version;
}
void OAIWorkflowProperties::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIWorkflowProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIWorkflowProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIWorkflowProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_definition_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
