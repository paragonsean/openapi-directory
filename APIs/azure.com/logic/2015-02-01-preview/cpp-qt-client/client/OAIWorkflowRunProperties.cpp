/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowRunProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowRunProperties::OAIWorkflowRunProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowRunProperties::OAIWorkflowRunProperties() {
    this->initializeModel();
}

OAIWorkflowRunProperties::~OAIWorkflowRunProperties() {}

void OAIWorkflowRunProperties::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_outputs_isSet = false;
    m_outputs_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_trigger_isSet = false;
    m_trigger_isValid = false;

    m_workflow_isSet = false;
    m_workflow_isValid = false;
}

void OAIWorkflowRunProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowRunProperties::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_outputs_isValid = ::OpenAPI::fromJsonValue(m_outputs, json[QString("outputs")]);
    m_outputs_isSet = !json[QString("outputs")].isNull() && m_outputs_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_trigger_isValid = ::OpenAPI::fromJsonValue(m_trigger, json[QString("trigger")]);
    m_trigger_isSet = !json[QString("trigger")].isNull() && m_trigger_isValid;

    m_workflow_isValid = ::OpenAPI::fromJsonValue(m_workflow, json[QString("workflow")]);
    m_workflow_isSet = !json[QString("workflow")].isNull() && m_workflow_isValid;
}

QString OAIWorkflowRunProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowRunProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_outputs.size() > 0) {
        obj.insert(QString("outputs"), ::OpenAPI::toJsonValue(m_outputs));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_trigger.isSet()) {
        obj.insert(QString("trigger"), ::OpenAPI::toJsonValue(m_trigger));
    }
    if (m_workflow.isSet()) {
        obj.insert(QString("workflow"), ::OpenAPI::toJsonValue(m_workflow));
    }
    return obj;
}

QString OAIWorkflowRunProperties::getCode() const {
    return m_code;
}
void OAIWorkflowRunProperties::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIWorkflowRunProperties::is_code_Set() const{
    return m_code_isSet;
}

bool OAIWorkflowRunProperties::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIWorkflowRunProperties::getCorrelationId() const {
    return m_correlation_id;
}
void OAIWorkflowRunProperties::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIWorkflowRunProperties::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIWorkflowRunProperties::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QDateTime OAIWorkflowRunProperties::getEndTime() const {
    return m_end_time;
}
void OAIWorkflowRunProperties::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIWorkflowRunProperties::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIWorkflowRunProperties::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIObject OAIWorkflowRunProperties::getError() const {
    return m_error;
}
void OAIWorkflowRunProperties::setError(const OAIObject &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIWorkflowRunProperties::is_error_Set() const{
    return m_error_isSet;
}

bool OAIWorkflowRunProperties::is_error_Valid() const{
    return m_error_isValid;
}

QMap<QString, OAIWorkflowOutputParameter> OAIWorkflowRunProperties::getOutputs() const {
    return m_outputs;
}
void OAIWorkflowRunProperties::setOutputs(const QMap<QString, OAIWorkflowOutputParameter> &outputs) {
    m_outputs = outputs;
    m_outputs_isSet = true;
}

bool OAIWorkflowRunProperties::is_outputs_Set() const{
    return m_outputs_isSet;
}

bool OAIWorkflowRunProperties::is_outputs_Valid() const{
    return m_outputs_isValid;
}

QDateTime OAIWorkflowRunProperties::getStartTime() const {
    return m_start_time;
}
void OAIWorkflowRunProperties::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIWorkflowRunProperties::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIWorkflowRunProperties::is_start_time_Valid() const{
    return m_start_time_isValid;
}

OAIWorkflowStatus OAIWorkflowRunProperties::getStatus() const {
    return m_status;
}
void OAIWorkflowRunProperties::setStatus(const OAIWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflowRunProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflowRunProperties::is_status_Valid() const{
    return m_status_isValid;
}

OAIWorkflowRunTrigger OAIWorkflowRunProperties::getTrigger() const {
    return m_trigger;
}
void OAIWorkflowRunProperties::setTrigger(const OAIWorkflowRunTrigger &trigger) {
    m_trigger = trigger;
    m_trigger_isSet = true;
}

bool OAIWorkflowRunProperties::is_trigger_Set() const{
    return m_trigger_isSet;
}

bool OAIWorkflowRunProperties::is_trigger_Valid() const{
    return m_trigger_isValid;
}

OAIResourceReference OAIWorkflowRunProperties::getWorkflow() const {
    return m_workflow;
}
void OAIWorkflowRunProperties::setWorkflow(const OAIResourceReference &workflow) {
    m_workflow = workflow;
    m_workflow_isSet = true;
}

bool OAIWorkflowRunProperties::is_workflow_Set() const{
    return m_workflow_isSet;
}

bool OAIWorkflowRunProperties::is_workflow_Valid() const{
    return m_workflow_isValid;
}

bool OAIWorkflowRunProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outputs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_trigger.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowRunProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
