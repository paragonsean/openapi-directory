/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTriggerProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTriggerProperties::OAIWorkflowTriggerProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTriggerProperties::OAIWorkflowTriggerProperties() {
    this->initializeModel();
}

OAIWorkflowTriggerProperties::~OAIWorkflowTriggerProperties() {}

void OAIWorkflowTriggerProperties::initializeModel() {

    m_changed_time_isSet = false;
    m_changed_time_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_last_execution_time_isSet = false;
    m_last_execution_time_isValid = false;

    m_next_execution_time_isSet = false;
    m_next_execution_time_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_recurrence_isSet = false;
    m_recurrence_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_workflow_isSet = false;
    m_workflow_isValid = false;
}

void OAIWorkflowTriggerProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTriggerProperties::fromJsonObject(QJsonObject json) {

    m_changed_time_isValid = ::OpenAPI::fromJsonValue(m_changed_time, json[QString("changedTime")]);
    m_changed_time_isSet = !json[QString("changedTime")].isNull() && m_changed_time_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_last_execution_time_isValid = ::OpenAPI::fromJsonValue(m_last_execution_time, json[QString("lastExecutionTime")]);
    m_last_execution_time_isSet = !json[QString("lastExecutionTime")].isNull() && m_last_execution_time_isValid;

    m_next_execution_time_isValid = ::OpenAPI::fromJsonValue(m_next_execution_time, json[QString("nextExecutionTime")]);
    m_next_execution_time_isSet = !json[QString("nextExecutionTime")].isNull() && m_next_execution_time_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_recurrence_isValid = ::OpenAPI::fromJsonValue(m_recurrence, json[QString("recurrence")]);
    m_recurrence_isSet = !json[QString("recurrence")].isNull() && m_recurrence_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_workflow_isValid = ::OpenAPI::fromJsonValue(m_workflow, json[QString("workflow")]);
    m_workflow_isSet = !json[QString("workflow")].isNull() && m_workflow_isValid;
}

QString OAIWorkflowTriggerProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTriggerProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_time_isSet) {
        obj.insert(QString("changedTime"), ::OpenAPI::toJsonValue(m_changed_time));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_last_execution_time_isSet) {
        obj.insert(QString("lastExecutionTime"), ::OpenAPI::toJsonValue(m_last_execution_time));
    }
    if (m_next_execution_time_isSet) {
        obj.insert(QString("nextExecutionTime"), ::OpenAPI::toJsonValue(m_next_execution_time));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_recurrence.isSet()) {
        obj.insert(QString("recurrence"), ::OpenAPI::toJsonValue(m_recurrence));
    }
    if (m_state.isSet()) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_workflow.isSet()) {
        obj.insert(QString("workflow"), ::OpenAPI::toJsonValue(m_workflow));
    }
    return obj;
}

QDateTime OAIWorkflowTriggerProperties::getChangedTime() const {
    return m_changed_time;
}
void OAIWorkflowTriggerProperties::setChangedTime(const QDateTime &changed_time) {
    m_changed_time = changed_time;
    m_changed_time_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_changed_time_Set() const{
    return m_changed_time_isSet;
}

bool OAIWorkflowTriggerProperties::is_changed_time_Valid() const{
    return m_changed_time_isValid;
}

QDateTime OAIWorkflowTriggerProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIWorkflowTriggerProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIWorkflowTriggerProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDateTime OAIWorkflowTriggerProperties::getLastExecutionTime() const {
    return m_last_execution_time;
}
void OAIWorkflowTriggerProperties::setLastExecutionTime(const QDateTime &last_execution_time) {
    m_last_execution_time = last_execution_time;
    m_last_execution_time_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_last_execution_time_Set() const{
    return m_last_execution_time_isSet;
}

bool OAIWorkflowTriggerProperties::is_last_execution_time_Valid() const{
    return m_last_execution_time_isValid;
}

QDateTime OAIWorkflowTriggerProperties::getNextExecutionTime() const {
    return m_next_execution_time;
}
void OAIWorkflowTriggerProperties::setNextExecutionTime(const QDateTime &next_execution_time) {
    m_next_execution_time = next_execution_time;
    m_next_execution_time_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_next_execution_time_Set() const{
    return m_next_execution_time_isSet;
}

bool OAIWorkflowTriggerProperties::is_next_execution_time_Valid() const{
    return m_next_execution_time_isValid;
}

OAIWorkflowTriggerProvisioningState OAIWorkflowTriggerProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWorkflowTriggerProperties::setProvisioningState(const OAIWorkflowTriggerProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWorkflowTriggerProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIWorkflowTriggerRecurrence OAIWorkflowTriggerProperties::getRecurrence() const {
    return m_recurrence;
}
void OAIWorkflowTriggerProperties::setRecurrence(const OAIWorkflowTriggerRecurrence &recurrence) {
    m_recurrence = recurrence;
    m_recurrence_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_recurrence_Set() const{
    return m_recurrence_isSet;
}

bool OAIWorkflowTriggerProperties::is_recurrence_Valid() const{
    return m_recurrence_isValid;
}

OAIWorkflowState OAIWorkflowTriggerProperties::getState() const {
    return m_state;
}
void OAIWorkflowTriggerProperties::setState(const OAIWorkflowState &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIWorkflowTriggerProperties::is_state_Valid() const{
    return m_state_isValid;
}

OAIWorkflowStatus OAIWorkflowTriggerProperties::getStatus() const {
    return m_status;
}
void OAIWorkflowTriggerProperties::setStatus(const OAIWorkflowStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIWorkflowTriggerProperties::is_status_Valid() const{
    return m_status_isValid;
}

OAIResourceReference OAIWorkflowTriggerProperties::getWorkflow() const {
    return m_workflow;
}
void OAIWorkflowTriggerProperties::setWorkflow(const OAIResourceReference &workflow) {
    m_workflow = workflow;
    m_workflow_isSet = true;
}

bool OAIWorkflowTriggerProperties::is_workflow_Set() const{
    return m_workflow_isSet;
}

bool OAIWorkflowTriggerProperties::is_workflow_Valid() const{
    return m_workflow_isValid;
}

bool OAIWorkflowTriggerProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_next_execution_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTriggerProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
