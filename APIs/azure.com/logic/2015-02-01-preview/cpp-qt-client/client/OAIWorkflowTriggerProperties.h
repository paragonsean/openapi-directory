/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIWorkflowTriggerProperties.h
 *
 * 
 */

#ifndef OAIWorkflowTriggerProperties_H
#define OAIWorkflowTriggerProperties_H

#include <QJsonObject>

#include "OAIResourceReference.h"
#include "OAIWorkflowState.h"
#include "OAIWorkflowStatus.h"
#include "OAIWorkflowTriggerProvisioningState.h"
#include "OAIWorkflowTriggerRecurrence.h"
#include <QDateTime>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIWorkflowTriggerRecurrence;
class OAIResourceReference;

class OAIWorkflowTriggerProperties : public OAIObject {
public:
    OAIWorkflowTriggerProperties();
    OAIWorkflowTriggerProperties(QString json);
    ~OAIWorkflowTriggerProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QDateTime getChangedTime() const;
    void setChangedTime(const QDateTime &changed_time);
    bool is_changed_time_Set() const;
    bool is_changed_time_Valid() const;

    QDateTime getCreatedTime() const;
    void setCreatedTime(const QDateTime &created_time);
    bool is_created_time_Set() const;
    bool is_created_time_Valid() const;

    QDateTime getLastExecutionTime() const;
    void setLastExecutionTime(const QDateTime &last_execution_time);
    bool is_last_execution_time_Set() const;
    bool is_last_execution_time_Valid() const;

    QDateTime getNextExecutionTime() const;
    void setNextExecutionTime(const QDateTime &next_execution_time);
    bool is_next_execution_time_Set() const;
    bool is_next_execution_time_Valid() const;

    OAIWorkflowTriggerProvisioningState getProvisioningState() const;
    void setProvisioningState(const OAIWorkflowTriggerProvisioningState &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    OAIWorkflowTriggerRecurrence getRecurrence() const;
    void setRecurrence(const OAIWorkflowTriggerRecurrence &recurrence);
    bool is_recurrence_Set() const;
    bool is_recurrence_Valid() const;

    OAIWorkflowState getState() const;
    void setState(const OAIWorkflowState &state);
    bool is_state_Set() const;
    bool is_state_Valid() const;

    OAIWorkflowStatus getStatus() const;
    void setStatus(const OAIWorkflowStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    OAIResourceReference getWorkflow() const;
    void setWorkflow(const OAIResourceReference &workflow);
    bool is_workflow_Set() const;
    bool is_workflow_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QDateTime m_changed_time;
    bool m_changed_time_isSet;
    bool m_changed_time_isValid;

    QDateTime m_created_time;
    bool m_created_time_isSet;
    bool m_created_time_isValid;

    QDateTime m_last_execution_time;
    bool m_last_execution_time_isSet;
    bool m_last_execution_time_isValid;

    QDateTime m_next_execution_time;
    bool m_next_execution_time_isSet;
    bool m_next_execution_time_isValid;

    OAIWorkflowTriggerProvisioningState m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    OAIWorkflowTriggerRecurrence m_recurrence;
    bool m_recurrence_isSet;
    bool m_recurrence_isValid;

    OAIWorkflowState m_state;
    bool m_state_isSet;
    bool m_state_isValid;

    OAIWorkflowStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    OAIResourceReference m_workflow;
    bool m_workflow_isSet;
    bool m_workflow_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIWorkflowTriggerProperties)

#endif // OAIWorkflowTriggerProperties_H
