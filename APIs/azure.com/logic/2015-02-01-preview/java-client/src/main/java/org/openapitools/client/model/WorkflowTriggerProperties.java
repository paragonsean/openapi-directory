/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ResourceReference;
import org.openapitools.client.model.WorkflowState;
import org.openapitools.client.model.WorkflowStatus;
import org.openapitools.client.model.WorkflowTriggerProvisioningState;
import org.openapitools.client.model.WorkflowTriggerRecurrence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowTriggerProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:15.287308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowTriggerProperties {
  public static final String SERIALIZED_NAME_CHANGED_TIME = "changedTime";
  @SerializedName(SERIALIZED_NAME_CHANGED_TIME)
  private OffsetDateTime changedTime;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_LAST_EXECUTION_TIME = "lastExecutionTime";
  @SerializedName(SERIALIZED_NAME_LAST_EXECUTION_TIME)
  private OffsetDateTime lastExecutionTime;

  public static final String SERIALIZED_NAME_NEXT_EXECUTION_TIME = "nextExecutionTime";
  @SerializedName(SERIALIZED_NAME_NEXT_EXECUTION_TIME)
  private OffsetDateTime nextExecutionTime;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private WorkflowTriggerProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_RECURRENCE = "recurrence";
  @SerializedName(SERIALIZED_NAME_RECURRENCE)
  private WorkflowTriggerRecurrence recurrence;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private WorkflowState state;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkflowStatus status;

  public static final String SERIALIZED_NAME_WORKFLOW = "workflow";
  @SerializedName(SERIALIZED_NAME_WORKFLOW)
  private ResourceReference workflow;

  public WorkflowTriggerProperties() {
  }

  public WorkflowTriggerProperties(
     OffsetDateTime changedTime, 
     OffsetDateTime createdTime, 
     OffsetDateTime lastExecutionTime, 
     OffsetDateTime nextExecutionTime
  ) {
    this();
    this.changedTime = changedTime;
    this.createdTime = createdTime;
    this.lastExecutionTime = lastExecutionTime;
    this.nextExecutionTime = nextExecutionTime;
  }

  /**
   * Gets the changed time.
   * @return changedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedTime() {
    return changedTime;
  }



  /**
   * Gets the created time.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }



  /**
   * Gets the last execution time.
   * @return lastExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastExecutionTime() {
    return lastExecutionTime;
  }



  /**
   * Gets the next execution time.
   * @return nextExecutionTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNextExecutionTime() {
    return nextExecutionTime;
  }



  public WorkflowTriggerProperties provisioningState(WorkflowTriggerProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public WorkflowTriggerProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(WorkflowTriggerProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public WorkflowTriggerProperties recurrence(WorkflowTriggerRecurrence recurrence) {
    this.recurrence = recurrence;
    return this;
  }

  /**
   * Get recurrence
   * @return recurrence
   */
  @javax.annotation.Nullable
  public WorkflowTriggerRecurrence getRecurrence() {
    return recurrence;
  }

  public void setRecurrence(WorkflowTriggerRecurrence recurrence) {
    this.recurrence = recurrence;
  }


  public WorkflowTriggerProperties state(WorkflowState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public WorkflowState getState() {
    return state;
  }

  public void setState(WorkflowState state) {
    this.state = state;
  }


  public WorkflowTriggerProperties status(WorkflowStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WorkflowStatus getStatus() {
    return status;
  }

  public void setStatus(WorkflowStatus status) {
    this.status = status;
  }


  public WorkflowTriggerProperties workflow(ResourceReference workflow) {
    this.workflow = workflow;
    return this;
  }

  /**
   * Get workflow
   * @return workflow
   */
  @javax.annotation.Nullable
  public ResourceReference getWorkflow() {
    return workflow;
  }

  public void setWorkflow(ResourceReference workflow) {
    this.workflow = workflow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowTriggerProperties workflowTriggerProperties = (WorkflowTriggerProperties) o;
    return Objects.equals(this.changedTime, workflowTriggerProperties.changedTime) &&
        Objects.equals(this.createdTime, workflowTriggerProperties.createdTime) &&
        Objects.equals(this.lastExecutionTime, workflowTriggerProperties.lastExecutionTime) &&
        Objects.equals(this.nextExecutionTime, workflowTriggerProperties.nextExecutionTime) &&
        Objects.equals(this.provisioningState, workflowTriggerProperties.provisioningState) &&
        Objects.equals(this.recurrence, workflowTriggerProperties.recurrence) &&
        Objects.equals(this.state, workflowTriggerProperties.state) &&
        Objects.equals(this.status, workflowTriggerProperties.status) &&
        Objects.equals(this.workflow, workflowTriggerProperties.workflow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(changedTime, createdTime, lastExecutionTime, nextExecutionTime, provisioningState, recurrence, state, status, workflow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowTriggerProperties {\n");
    sb.append("    changedTime: ").append(toIndentedString(changedTime)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    lastExecutionTime: ").append(toIndentedString(lastExecutionTime)).append("\n");
    sb.append("    nextExecutionTime: ").append(toIndentedString(nextExecutionTime)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    recurrence: ").append(toIndentedString(recurrence)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    workflow: ").append(toIndentedString(workflow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("changedTime");
    openapiFields.add("createdTime");
    openapiFields.add("lastExecutionTime");
    openapiFields.add("nextExecutionTime");
    openapiFields.add("provisioningState");
    openapiFields.add("recurrence");
    openapiFields.add("state");
    openapiFields.add("status");
    openapiFields.add("workflow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowTriggerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowTriggerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowTriggerProperties is not found in the empty JSON string", WorkflowTriggerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowTriggerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowTriggerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        WorkflowTriggerProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `recurrence`
      if (jsonObj.get("recurrence") != null && !jsonObj.get("recurrence").isJsonNull()) {
        WorkflowTriggerRecurrence.validateJsonElement(jsonObj.get("recurrence"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        WorkflowState.validateJsonElement(jsonObj.get("state"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        WorkflowStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `workflow`
      if (jsonObj.get("workflow") != null && !jsonObj.get("workflow").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("workflow"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowTriggerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowTriggerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowTriggerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowTriggerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowTriggerProperties>() {
           @Override
           public void write(JsonWriter out, WorkflowTriggerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowTriggerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowTriggerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowTriggerProperties
   * @throws IOException if the JSON string is invalid with respect to WorkflowTriggerProperties
   */
  public static WorkflowTriggerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowTriggerProperties.class);
  }

  /**
   * Convert an instance of WorkflowTriggerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

