/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ContentLink;
import org.openapitools.client.model.WorkflowStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowRunActionProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:15.287308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowRunActionProperties {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Object error;

  public static final String SERIALIZED_NAME_INPUTS_LINK = "inputsLink";
  @SerializedName(SERIALIZED_NAME_INPUTS_LINK)
  private ContentLink inputsLink;

  public static final String SERIALIZED_NAME_OUTPUTS_LINK = "outputsLink";
  @SerializedName(SERIALIZED_NAME_OUTPUTS_LINK)
  private ContentLink outputsLink;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkflowStatus status;

  public static final String SERIALIZED_NAME_TRACKING_ID = "trackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public WorkflowRunActionProperties() {
  }

  public WorkflowRunActionProperties(
     String code, 
     OffsetDateTime endTime, 
     OffsetDateTime startTime, 
     String trackingId
  ) {
    this();
    this.code = code;
    this.endTime = endTime;
    this.startTime = startTime;
    this.trackingId = trackingId;
  }

  /**
   * Gets the code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }



  /**
   * Gets the end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  public WorkflowRunActionProperties error(Object error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Object getError() {
    return error;
  }

  public void setError(Object error) {
    this.error = error;
  }


  public WorkflowRunActionProperties inputsLink(ContentLink inputsLink) {
    this.inputsLink = inputsLink;
    return this;
  }

  /**
   * Get inputsLink
   * @return inputsLink
   */
  @javax.annotation.Nullable
  public ContentLink getInputsLink() {
    return inputsLink;
  }

  public void setInputsLink(ContentLink inputsLink) {
    this.inputsLink = inputsLink;
  }


  public WorkflowRunActionProperties outputsLink(ContentLink outputsLink) {
    this.outputsLink = outputsLink;
    return this;
  }

  /**
   * Get outputsLink
   * @return outputsLink
   */
  @javax.annotation.Nullable
  public ContentLink getOutputsLink() {
    return outputsLink;
  }

  public void setOutputsLink(ContentLink outputsLink) {
    this.outputsLink = outputsLink;
  }


  /**
   * Gets the start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  public WorkflowRunActionProperties status(WorkflowStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WorkflowStatus getStatus() {
    return status;
  }

  public void setStatus(WorkflowStatus status) {
    this.status = status;
  }


  /**
   * Gets the trackingId.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowRunActionProperties workflowRunActionProperties = (WorkflowRunActionProperties) o;
    return Objects.equals(this.code, workflowRunActionProperties.code) &&
        Objects.equals(this.endTime, workflowRunActionProperties.endTime) &&
        Objects.equals(this.error, workflowRunActionProperties.error) &&
        Objects.equals(this.inputsLink, workflowRunActionProperties.inputsLink) &&
        Objects.equals(this.outputsLink, workflowRunActionProperties.outputsLink) &&
        Objects.equals(this.startTime, workflowRunActionProperties.startTime) &&
        Objects.equals(this.status, workflowRunActionProperties.status) &&
        Objects.equals(this.trackingId, workflowRunActionProperties.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, endTime, error, inputsLink, outputsLink, startTime, status, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowRunActionProperties {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    inputsLink: ").append(toIndentedString(inputsLink)).append("\n");
    sb.append("    outputsLink: ").append(toIndentedString(outputsLink)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("inputsLink");
    openapiFields.add("outputsLink");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("trackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowRunActionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowRunActionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowRunActionProperties is not found in the empty JSON string", WorkflowRunActionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowRunActionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowRunActionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      // validate the optional field `inputsLink`
      if (jsonObj.get("inputsLink") != null && !jsonObj.get("inputsLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("inputsLink"));
      }
      // validate the optional field `outputsLink`
      if (jsonObj.get("outputsLink") != null && !jsonObj.get("outputsLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("outputsLink"));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        WorkflowStatus.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("trackingId") != null && !jsonObj.get("trackingId").isJsonNull()) && !jsonObj.get("trackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `trackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("trackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowRunActionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowRunActionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowRunActionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowRunActionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowRunActionProperties>() {
           @Override
           public void write(JsonWriter out, WorkflowRunActionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowRunActionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowRunActionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowRunActionProperties
   * @throws IOException if the JSON string is invalid with respect to WorkflowRunActionProperties
   */
  public static WorkflowRunActionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowRunActionProperties.class);
  }

  /**
   * Convert an instance of WorkflowRunActionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

