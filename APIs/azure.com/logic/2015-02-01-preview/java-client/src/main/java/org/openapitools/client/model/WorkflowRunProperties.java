/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ResourceReference;
import org.openapitools.client.model.WorkflowOutputParameter;
import org.openapitools.client.model.WorkflowRunTrigger;
import org.openapitools.client.model.WorkflowStatus;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowRunProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:15.287308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowRunProperties {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CORRELATION_ID = "correlationId";
  @SerializedName(SERIALIZED_NAME_CORRELATION_ID)
  private String correlationId;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private Object error;

  public static final String SERIALIZED_NAME_OUTPUTS = "outputs";
  @SerializedName(SERIALIZED_NAME_OUTPUTS)
  private Map<String, WorkflowOutputParameter> outputs = new HashMap<>();

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private WorkflowStatus status;

  public static final String SERIALIZED_NAME_TRIGGER = "trigger";
  @SerializedName(SERIALIZED_NAME_TRIGGER)
  private WorkflowRunTrigger trigger;

  public static final String SERIALIZED_NAME_WORKFLOW = "workflow";
  @SerializedName(SERIALIZED_NAME_WORKFLOW)
  private ResourceReference workflow;

  public WorkflowRunProperties() {
  }

  public WorkflowRunProperties(
     String code, 
     String correlationId, 
     OffsetDateTime endTime, 
     Map<String, WorkflowOutputParameter> outputs, 
     OffsetDateTime startTime
  ) {
    this();
    this.code = code;
    this.correlationId = correlationId;
    this.endTime = endTime;
    this.outputs = outputs;
    this.startTime = startTime;
  }

  /**
   * Gets the code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }



  /**
   * Gets the correlation id.
   * @return correlationId
   */
  @javax.annotation.Nullable
  public String getCorrelationId() {
    return correlationId;
  }



  /**
   * Gets the end time.
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  public WorkflowRunProperties error(Object error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public Object getError() {
    return error;
  }

  public void setError(Object error) {
    this.error = error;
  }


  /**
   * Gets the outputs.
   * @return outputs
   */
  @javax.annotation.Nullable
  public Map<String, WorkflowOutputParameter> getOutputs() {
    return outputs;
  }



  /**
   * Gets the start time.
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  public WorkflowRunProperties status(WorkflowStatus status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public WorkflowStatus getStatus() {
    return status;
  }

  public void setStatus(WorkflowStatus status) {
    this.status = status;
  }


  public WorkflowRunProperties trigger(WorkflowRunTrigger trigger) {
    this.trigger = trigger;
    return this;
  }

  /**
   * Get trigger
   * @return trigger
   */
  @javax.annotation.Nullable
  public WorkflowRunTrigger getTrigger() {
    return trigger;
  }

  public void setTrigger(WorkflowRunTrigger trigger) {
    this.trigger = trigger;
  }


  public WorkflowRunProperties workflow(ResourceReference workflow) {
    this.workflow = workflow;
    return this;
  }

  /**
   * Get workflow
   * @return workflow
   */
  @javax.annotation.Nullable
  public ResourceReference getWorkflow() {
    return workflow;
  }

  public void setWorkflow(ResourceReference workflow) {
    this.workflow = workflow;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowRunProperties workflowRunProperties = (WorkflowRunProperties) o;
    return Objects.equals(this.code, workflowRunProperties.code) &&
        Objects.equals(this.correlationId, workflowRunProperties.correlationId) &&
        Objects.equals(this.endTime, workflowRunProperties.endTime) &&
        Objects.equals(this.error, workflowRunProperties.error) &&
        Objects.equals(this.outputs, workflowRunProperties.outputs) &&
        Objects.equals(this.startTime, workflowRunProperties.startTime) &&
        Objects.equals(this.status, workflowRunProperties.status) &&
        Objects.equals(this.trigger, workflowRunProperties.trigger) &&
        Objects.equals(this.workflow, workflowRunProperties.workflow);
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, correlationId, endTime, error, outputs, startTime, status, trigger, workflow);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowRunProperties {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    correlationId: ").append(toIndentedString(correlationId)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    outputs: ").append(toIndentedString(outputs)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trigger: ").append(toIndentedString(trigger)).append("\n");
    sb.append("    workflow: ").append(toIndentedString(workflow)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("correlationId");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("outputs");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("trigger");
    openapiFields.add("workflow");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowRunProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowRunProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowRunProperties is not found in the empty JSON string", WorkflowRunProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowRunProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowRunProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("correlationId") != null && !jsonObj.get("correlationId").isJsonNull()) && !jsonObj.get("correlationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `correlationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("correlationId").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        WorkflowStatus.validateJsonElement(jsonObj.get("status"));
      }
      // validate the optional field `trigger`
      if (jsonObj.get("trigger") != null && !jsonObj.get("trigger").isJsonNull()) {
        WorkflowRunTrigger.validateJsonElement(jsonObj.get("trigger"));
      }
      // validate the optional field `workflow`
      if (jsonObj.get("workflow") != null && !jsonObj.get("workflow").isJsonNull()) {
        ResourceReference.validateJsonElement(jsonObj.get("workflow"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowRunProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowRunProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowRunProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowRunProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowRunProperties>() {
           @Override
           public void write(JsonWriter out, WorkflowRunProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowRunProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowRunProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowRunProperties
   * @throws IOException if the JSON string is invalid with respect to WorkflowRunProperties
   */
  public static WorkflowRunProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowRunProperties.class);
  }

  /**
   * Convert an instance of WorkflowRunProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

