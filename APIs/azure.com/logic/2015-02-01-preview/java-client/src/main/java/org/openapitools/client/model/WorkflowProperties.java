/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.ContentLink;
import org.openapitools.client.model.Sku;
import org.openapitools.client.model.WorkflowParameter;
import org.openapitools.client.model.WorkflowProvisioningState;
import org.openapitools.client.model.WorkflowState;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * WorkflowProperties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:15.287308-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkflowProperties {
  public static final String SERIALIZED_NAME_ACCESS_ENDPOINT = "accessEndpoint";
  @SerializedName(SERIALIZED_NAME_ACCESS_ENDPOINT)
  private String accessEndpoint;

  public static final String SERIALIZED_NAME_CHANGED_TIME = "changedTime";
  @SerializedName(SERIALIZED_NAME_CHANGED_TIME)
  private OffsetDateTime changedTime;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DEFINITION = "definition";
  @SerializedName(SERIALIZED_NAME_DEFINITION)
  private Object definition;

  public static final String SERIALIZED_NAME_DEFINITION_LINK = "definitionLink";
  @SerializedName(SERIALIZED_NAME_DEFINITION_LINK)
  private ContentLink definitionLink;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private Map<String, WorkflowParameter> parameters = new HashMap<>();

  public static final String SERIALIZED_NAME_PARAMETERS_LINK = "parametersLink";
  @SerializedName(SERIALIZED_NAME_PARAMETERS_LINK)
  private ContentLink parametersLink;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private WorkflowProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_SKU = "sku";
  @SerializedName(SERIALIZED_NAME_SKU)
  private Sku sku;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private WorkflowState state;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public WorkflowProperties() {
  }

  public WorkflowProperties(
     String accessEndpoint, 
     OffsetDateTime changedTime, 
     OffsetDateTime createdTime, 
     String version
  ) {
    this();
    this.accessEndpoint = accessEndpoint;
    this.changedTime = changedTime;
    this.createdTime = createdTime;
    this.version = version;
  }

  /**
   * Gets the access endpoint.
   * @return accessEndpoint
   */
  @javax.annotation.Nullable
  public String getAccessEndpoint() {
    return accessEndpoint;
  }



  /**
   * Gets the changed time.
   * @return changedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedTime() {
    return changedTime;
  }



  /**
   * Gets the created time.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }



  public WorkflowProperties definition(Object definition) {
    this.definition = definition;
    return this;
  }

  /**
   * Get definition
   * @return definition
   */
  @javax.annotation.Nullable
  public Object getDefinition() {
    return definition;
  }

  public void setDefinition(Object definition) {
    this.definition = definition;
  }


  public WorkflowProperties definitionLink(ContentLink definitionLink) {
    this.definitionLink = definitionLink;
    return this;
  }

  /**
   * Get definitionLink
   * @return definitionLink
   */
  @javax.annotation.Nullable
  public ContentLink getDefinitionLink() {
    return definitionLink;
  }

  public void setDefinitionLink(ContentLink definitionLink) {
    this.definitionLink = definitionLink;
  }


  public WorkflowProperties parameters(Map<String, WorkflowParameter> parameters) {
    this.parameters = parameters;
    return this;
  }

  public WorkflowProperties putParametersItem(String key, WorkflowParameter parametersItem) {
    if (this.parameters == null) {
      this.parameters = new HashMap<>();
    }
    this.parameters.put(key, parametersItem);
    return this;
  }

  /**
   * Gets or sets the parameters.
   * @return parameters
   */
  @javax.annotation.Nullable
  public Map<String, WorkflowParameter> getParameters() {
    return parameters;
  }

  public void setParameters(Map<String, WorkflowParameter> parameters) {
    this.parameters = parameters;
  }


  public WorkflowProperties parametersLink(ContentLink parametersLink) {
    this.parametersLink = parametersLink;
    return this;
  }

  /**
   * Get parametersLink
   * @return parametersLink
   */
  @javax.annotation.Nullable
  public ContentLink getParametersLink() {
    return parametersLink;
  }

  public void setParametersLink(ContentLink parametersLink) {
    this.parametersLink = parametersLink;
  }


  public WorkflowProperties provisioningState(WorkflowProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public WorkflowProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(WorkflowProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public WorkflowProperties sku(Sku sku) {
    this.sku = sku;
    return this;
  }

  /**
   * Get sku
   * @return sku
   */
  @javax.annotation.Nullable
  public Sku getSku() {
    return sku;
  }

  public void setSku(Sku sku) {
    this.sku = sku;
  }


  public WorkflowProperties state(WorkflowState state) {
    this.state = state;
    return this;
  }

  /**
   * Get state
   * @return state
   */
  @javax.annotation.Nullable
  public WorkflowState getState() {
    return state;
  }

  public void setState(WorkflowState state) {
    this.state = state;
  }


  /**
   * Gets the version.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkflowProperties workflowProperties = (WorkflowProperties) o;
    return Objects.equals(this.accessEndpoint, workflowProperties.accessEndpoint) &&
        Objects.equals(this.changedTime, workflowProperties.changedTime) &&
        Objects.equals(this.createdTime, workflowProperties.createdTime) &&
        Objects.equals(this.definition, workflowProperties.definition) &&
        Objects.equals(this.definitionLink, workflowProperties.definitionLink) &&
        Objects.equals(this.parameters, workflowProperties.parameters) &&
        Objects.equals(this.parametersLink, workflowProperties.parametersLink) &&
        Objects.equals(this.provisioningState, workflowProperties.provisioningState) &&
        Objects.equals(this.sku, workflowProperties.sku) &&
        Objects.equals(this.state, workflowProperties.state) &&
        Objects.equals(this.version, workflowProperties.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessEndpoint, changedTime, createdTime, definition, definitionLink, parameters, parametersLink, provisioningState, sku, state, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkflowProperties {\n");
    sb.append("    accessEndpoint: ").append(toIndentedString(accessEndpoint)).append("\n");
    sb.append("    changedTime: ").append(toIndentedString(changedTime)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    definition: ").append(toIndentedString(definition)).append("\n");
    sb.append("    definitionLink: ").append(toIndentedString(definitionLink)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    parametersLink: ").append(toIndentedString(parametersLink)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sku: ").append(toIndentedString(sku)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessEndpoint");
    openapiFields.add("changedTime");
    openapiFields.add("createdTime");
    openapiFields.add("definition");
    openapiFields.add("definitionLink");
    openapiFields.add("parameters");
    openapiFields.add("parametersLink");
    openapiFields.add("provisioningState");
    openapiFields.add("sku");
    openapiFields.add("state");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkflowProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkflowProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkflowProperties is not found in the empty JSON string", WorkflowProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkflowProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkflowProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("accessEndpoint") != null && !jsonObj.get("accessEndpoint").isJsonNull()) && !jsonObj.get("accessEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accessEndpoint").toString()));
      }
      // validate the optional field `definitionLink`
      if (jsonObj.get("definitionLink") != null && !jsonObj.get("definitionLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("definitionLink"));
      }
      // validate the optional field `parametersLink`
      if (jsonObj.get("parametersLink") != null && !jsonObj.get("parametersLink").isJsonNull()) {
        ContentLink.validateJsonElement(jsonObj.get("parametersLink"));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        WorkflowProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `sku`
      if (jsonObj.get("sku") != null && !jsonObj.get("sku").isJsonNull()) {
        Sku.validateJsonElement(jsonObj.get("sku"));
      }
      // validate the optional field `state`
      if (jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) {
        WorkflowState.validateJsonElement(jsonObj.get("state"));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkflowProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkflowProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkflowProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkflowProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkflowProperties>() {
           @Override
           public void write(JsonWriter out, WorkflowProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkflowProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkflowProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkflowProperties
   * @throws IOException if the JSON string is invalid with respect to WorkflowProperties
   */
  public static WorkflowProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkflowProperties.class);
  }

  /**
   * Convert an instance of WorkflowProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

