/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import RegenerateSecretKeyParameters from '../model/RegenerateSecretKeyParameters';
import WorkflowAccessKey from '../model/WorkflowAccessKey';
import WorkflowAccessKeyListResult from '../model/WorkflowAccessKeyListResult';
import WorkflowSecretKeys from '../model/WorkflowSecretKeys';

/**
* WorkflowAccessKeys service.
* @module api/WorkflowAccessKeysApi
* @version 2015-02-01-preview
*/
export default class WorkflowAccessKeysApi {

    /**
    * Constructs a new WorkflowAccessKeysApi. 
    * @alias module:api/WorkflowAccessKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workflowAccessKeysCreateOrUpdate operation.
     * @callback module:api/WorkflowAccessKeysApi~workflowAccessKeysCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowAccessKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a workflow access key.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} accessKeyName The workflow access key name.
     * @param {String} apiVersion The API version.
     * @param {module:model/WorkflowAccessKey} workflowAccesskey The workflow access key.
     * @param {module:api/WorkflowAccessKeysApi~workflowAccessKeysCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowAccessKey}
     */
    workflowAccessKeysCreateOrUpdate(subscriptionId, resourceGroupName, workflowName, accessKeyName, apiVersion, workflowAccesskey, callback) {
      let postBody = workflowAccesskey;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowAccessKeysCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowAccessKeysCreateOrUpdate");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowAccessKeysCreateOrUpdate");
      }
      // verify the required parameter 'accessKeyName' is set
      if (accessKeyName === undefined || accessKeyName === null) {
        throw new Error("Missing the required parameter 'accessKeyName' when calling workflowAccessKeysCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowAccessKeysCreateOrUpdate");
      }
      // verify the required parameter 'workflowAccesskey' is set
      if (workflowAccesskey === undefined || workflowAccesskey === null) {
        throw new Error("Missing the required parameter 'workflowAccesskey' when calling workflowAccessKeysCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'accessKeyName': accessKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowAccessKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowAccessKeysDelete operation.
     * @callback module:api/WorkflowAccessKeysApi~workflowAccessKeysDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a workflow access key.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} accessKeyName The workflow access key name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowAccessKeysApi~workflowAccessKeysDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workflowAccessKeysDelete(subscriptionId, resourceGroupName, workflowName, accessKeyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowAccessKeysDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowAccessKeysDelete");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowAccessKeysDelete");
      }
      // verify the required parameter 'accessKeyName' is set
      if (accessKeyName === undefined || accessKeyName === null) {
        throw new Error("Missing the required parameter 'accessKeyName' when calling workflowAccessKeysDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowAccessKeysDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'accessKeyName': accessKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowAccessKeysGet operation.
     * @callback module:api/WorkflowAccessKeysApi~workflowAccessKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowAccessKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workflow access key.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} accessKeyName The workflow access key name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowAccessKeysApi~workflowAccessKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowAccessKey}
     */
    workflowAccessKeysGet(subscriptionId, resourceGroupName, workflowName, accessKeyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowAccessKeysGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowAccessKeysGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowAccessKeysGet");
      }
      // verify the required parameter 'accessKeyName' is set
      if (accessKeyName === undefined || accessKeyName === null) {
        throw new Error("Missing the required parameter 'accessKeyName' when calling workflowAccessKeysGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowAccessKeysGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'accessKeyName': accessKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowAccessKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowAccessKeysList operation.
     * @callback module:api/WorkflowAccessKeysApi~workflowAccessKeysListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowAccessKeyListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of workflow access keys.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {module:api/WorkflowAccessKeysApi~workflowAccessKeysListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowAccessKeyListResult}
     */
    workflowAccessKeysList(subscriptionId, resourceGroupName, workflowName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowAccessKeysList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowAccessKeysList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowAccessKeysList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowAccessKeysList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowAccessKeyListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowAccessKeysListSecretKeys operation.
     * @callback module:api/WorkflowAccessKeysApi~workflowAccessKeysListSecretKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowSecretKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists secret keys.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} accessKeyName The workflow access key name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowAccessKeysApi~workflowAccessKeysListSecretKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowSecretKeys}
     */
    workflowAccessKeysListSecretKeys(subscriptionId, resourceGroupName, workflowName, accessKeyName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowAccessKeysListSecretKeys");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowAccessKeysListSecretKeys");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowAccessKeysListSecretKeys");
      }
      // verify the required parameter 'accessKeyName' is set
      if (accessKeyName === undefined || accessKeyName === null) {
        throw new Error("Missing the required parameter 'accessKeyName' when calling workflowAccessKeysListSecretKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowAccessKeysListSecretKeys");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'accessKeyName': accessKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowSecretKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}/list', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowAccessKeysRegenerateSecretKey operation.
     * @callback module:api/WorkflowAccessKeysApi~workflowAccessKeysRegenerateSecretKeyCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowSecretKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates secret key.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} accessKeyName The workflow access key name.
     * @param {String} apiVersion The API version.
     * @param {module:model/RegenerateSecretKeyParameters} parameters The parameters.
     * @param {module:api/WorkflowAccessKeysApi~workflowAccessKeysRegenerateSecretKeyCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowSecretKeys}
     */
    workflowAccessKeysRegenerateSecretKey(subscriptionId, resourceGroupName, workflowName, accessKeyName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowAccessKeysRegenerateSecretKey");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowAccessKeysRegenerateSecretKey");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowAccessKeysRegenerateSecretKey");
      }
      // verify the required parameter 'accessKeyName' is set
      if (accessKeyName === undefined || accessKeyName === null) {
        throw new Error("Missing the required parameter 'accessKeyName' when calling workflowAccessKeysRegenerateSecretKey");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowAccessKeysRegenerateSecretKey");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling workflowAccessKeysRegenerateSecretKey");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'accessKeyName': accessKeyName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json', 'text/json'];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowSecretKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/accessKeys/{accessKeyName}/regenerate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
