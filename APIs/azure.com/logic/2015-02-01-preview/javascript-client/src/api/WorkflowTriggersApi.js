/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2015-02-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import WorkflowTrigger from '../model/WorkflowTrigger';
import WorkflowTriggerListResult from '../model/WorkflowTriggerListResult';

/**
* WorkflowTriggers service.
* @module api/WorkflowTriggersApi
* @version 2015-02-01-preview
*/
export default class WorkflowTriggersApi {

    /**
    * Constructs a new WorkflowTriggersApi. 
    * @alias module:api/WorkflowTriggersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workflowTriggersGet operation.
     * @callback module:api/WorkflowTriggersApi~workflowTriggersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTrigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workflow trigger.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} triggerName The workflow trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowTriggersApi~workflowTriggersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTrigger}
     */
    workflowTriggersGet(subscriptionId, resourceGroupName, workflowName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowTriggersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowTriggersGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowTriggersGet");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling workflowTriggersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowTriggersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowTrigger;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowTriggersList operation.
     * @callback module:api/WorkflowTriggersApi~workflowTriggersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTriggerListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of workflow triggers.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {String} [filter] The filter to apply on the operation.
     * @param {module:api/WorkflowTriggersApi~workflowTriggersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTriggerListResult}
     */
    workflowTriggersList(subscriptionId, resourceGroupName, workflowName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowTriggersList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowTriggersList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowTriggersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowTriggersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json', 'text/json'];
      let returnType = WorkflowTriggerListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowTriggersRun operation.
     * @callback module:api/WorkflowTriggersApi~workflowTriggersRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Runs a workflow trigger.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} triggerName The workflow trigger name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowTriggersApi~workflowTriggersRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    workflowTriggersRun(subscriptionId, resourceGroupName, workflowName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowTriggersRun");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowTriggersRun");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowTriggersRun");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling workflowTriggersRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowTriggersRun");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/triggers/{triggerName}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
