/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BatchConfiguration from '../model/BatchConfiguration';
import BatchConfigurationCollection from '../model/BatchConfigurationCollection';

/**
* IntegrationAccountBatchConfigurations service.
* @module api/IntegrationAccountBatchConfigurationsApi
* @version 2016-06-01
*/
export default class IntegrationAccountBatchConfigurationsApi {

    /**
    * Constructs a new IntegrationAccountBatchConfigurationsApi. 
    * @alias module:api/IntegrationAccountBatchConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationAccountBatchConfigurationsCreateOrUpdate operation.
     * @callback module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a batch configuration for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} batchConfigurationName The batch configuration name.
     * @param {String} apiVersion The API version.
     * @param {module:model/BatchConfiguration} batchConfiguration The batch configuration.
     * @param {module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchConfiguration}
     */
    integrationAccountBatchConfigurationsCreateOrUpdate(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, batchConfiguration, callback) {
      let postBody = batchConfiguration;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'batchConfigurationName' is set
      if (batchConfigurationName === undefined || batchConfigurationName === null) {
        throw new Error("Missing the required parameter 'batchConfigurationName' when calling integrationAccountBatchConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'batchConfiguration' is set
      if (batchConfiguration === undefined || batchConfiguration === null) {
        throw new Error("Missing the required parameter 'batchConfiguration' when calling integrationAccountBatchConfigurationsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'batchConfigurationName': batchConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BatchConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountBatchConfigurationsDelete operation.
     * @callback module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a batch configuration for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} batchConfigurationName The batch configuration name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationAccountBatchConfigurationsDelete(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsDelete");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsDelete");
      }
      // verify the required parameter 'batchConfigurationName' is set
      if (batchConfigurationName === undefined || batchConfigurationName === null) {
        throw new Error("Missing the required parameter 'batchConfigurationName' when calling integrationAccountBatchConfigurationsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'batchConfigurationName': batchConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountBatchConfigurationsGet operation.
     * @callback module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a batch configuration for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} batchConfigurationName The batch configuration name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchConfiguration}
     */
    integrationAccountBatchConfigurationsGet(subscriptionId, resourceGroupName, integrationAccountName, batchConfigurationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsGet");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsGet");
      }
      // verify the required parameter 'batchConfigurationName' is set
      if (batchConfigurationName === undefined || batchConfigurationName === null) {
        throw new Error("Missing the required parameter 'batchConfigurationName' when calling integrationAccountBatchConfigurationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'batchConfigurationName': batchConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations/{batchConfigurationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountBatchConfigurationsList operation.
     * @callback module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BatchConfigurationCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the batch configurations for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountBatchConfigurationsApi~integrationAccountBatchConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BatchConfigurationCollection}
     */
    integrationAccountBatchConfigurationsList(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountBatchConfigurationsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountBatchConfigurationsList");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountBatchConfigurationsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountBatchConfigurationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = BatchConfigurationCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/batchConfigurations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
