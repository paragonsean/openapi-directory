/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetCallbackUrlParameters from '../model/GetCallbackUrlParameters';
import IntegrationAccountMap from '../model/IntegrationAccountMap';
import IntegrationAccountMapListResult from '../model/IntegrationAccountMapListResult';
import WorkflowTriggerCallbackUrl from '../model/WorkflowTriggerCallbackUrl';

/**
* IntegrationAccountMaps service.
* @module api/IntegrationAccountMapsApi
* @version 2016-06-01
*/
export default class IntegrationAccountMapsApi {

    /**
    * Constructs a new IntegrationAccountMapsApi. 
    * @alias module:api/IntegrationAccountMapsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapsCreateOrUpdate operation.
     * @callback module:api/IntegrationAccountMapsApi~mapsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an integration account map.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} mapName The integration account map name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationAccountMap} map The integration account map.
     * @param {module:api/IntegrationAccountMapsApi~mapsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountMap}
     */
    mapsCreateOrUpdate(subscriptionId, resourceGroupName, integrationAccountName, mapName, apiVersion, map, callback) {
      let postBody = map;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mapsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mapsCreateOrUpdate");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling mapsCreateOrUpdate");
      }
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling mapsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mapsCreateOrUpdate");
      }
      // verify the required parameter 'map' is set
      if (map === undefined || map === null) {
        throw new Error("Missing the required parameter 'map' when calling mapsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'mapName': mapName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationAccountMap;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsDelete operation.
     * @callback module:api/IntegrationAccountMapsApi~mapsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an integration account map.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} mapName The integration account map name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountMapsApi~mapsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapsDelete(subscriptionId, resourceGroupName, integrationAccountName, mapName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mapsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mapsDelete");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling mapsDelete");
      }
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling mapsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mapsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'mapName': mapName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsGet operation.
     * @callback module:api/IntegrationAccountMapsApi~mapsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountMap} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an integration account map.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} mapName The integration account map name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountMapsApi~mapsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountMap}
     */
    mapsGet(subscriptionId, resourceGroupName, integrationAccountName, mapName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mapsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mapsGet");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling mapsGet");
      }
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling mapsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mapsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'mapName': mapName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationAccountMap;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsListByIntegrationAccounts operation.
     * @callback module:api/IntegrationAccountMapsApi~mapsListByIntegrationAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountMapListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of integration account maps.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {String} [filter] The filter to apply on the operation. Options for filters include: MapType.
     * @param {module:api/IntegrationAccountMapsApi~mapsListByIntegrationAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountMapListResult}
     */
    mapsListByIntegrationAccounts(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mapsListByIntegrationAccounts");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mapsListByIntegrationAccounts");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling mapsListByIntegrationAccounts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mapsListByIntegrationAccounts");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationAccountMapListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapsListContentCallbackUrl operation.
     * @callback module:api/IntegrationAccountMapsApi~mapsListContentCallbackUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTriggerCallbackUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content callback url.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} mapName The integration account map name.
     * @param {String} apiVersion The API version.
     * @param {module:model/GetCallbackUrlParameters} listContentCallbackUrl 
     * @param {module:api/IntegrationAccountMapsApi~mapsListContentCallbackUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTriggerCallbackUrl}
     */
    mapsListContentCallbackUrl(subscriptionId, resourceGroupName, integrationAccountName, mapName, apiVersion, listContentCallbackUrl, callback) {
      let postBody = listContentCallbackUrl;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling mapsListContentCallbackUrl");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling mapsListContentCallbackUrl");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling mapsListContentCallbackUrl");
      }
      // verify the required parameter 'mapName' is set
      if (mapName === undefined || mapName === null) {
        throw new Error("Missing the required parameter 'mapName' when calling mapsListContentCallbackUrl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling mapsListContentCallbackUrl");
      }
      // verify the required parameter 'listContentCallbackUrl' is set
      if (listContentCallbackUrl === undefined || listContentCallbackUrl === null) {
        throw new Error("Missing the required parameter 'listContentCallbackUrl' when calling mapsListContentCallbackUrl");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'mapName': mapName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowTriggerCallbackUrl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/maps/{mapName}/listContentCallbackUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
