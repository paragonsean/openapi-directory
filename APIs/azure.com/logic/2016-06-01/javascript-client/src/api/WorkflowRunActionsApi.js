/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import ExpressionTraces from '../model/ExpressionTraces';
import RequestHistory from '../model/RequestHistory';
import RequestHistoryListResult from '../model/RequestHistoryListResult';
import WorkflowRunAction from '../model/WorkflowRunAction';
import WorkflowRunActionListResult from '../model/WorkflowRunActionListResult';
import WorkflowRunActionRepetitionDefinition from '../model/WorkflowRunActionRepetitionDefinition';
import WorkflowRunActionRepetitionDefinitionCollection from '../model/WorkflowRunActionRepetitionDefinitionCollection';

/**
* WorkflowRunActions service.
* @module api/WorkflowRunActionsApi
* @version 2016-06-01
*/
export default class WorkflowRunActionsApi {

    /**
    * Constructs a new WorkflowRunActionsApi. 
    * @alias module:api/WorkflowRunActionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the workflowRunActionRepetitionsGet operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunActionRepetitionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow run action repetition.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} repetitionName The workflow repetition.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunActionRepetitionDefinition}
     */
    workflowRunActionRepetitionsGet(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsGet");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsGet");
      }
      // verify the required parameter 'repetitionName' is set
      if (repetitionName === undefined || repetitionName === null) {
        throw new Error("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName,
        'repetitionName': repetitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunActionRepetitionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionRepetitionsList operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunActionRepetitionDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all of a workflow run action repetitions.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunActionRepetitionDefinitionCollection}
     */
    workflowRunActionRepetitionsList(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsList");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsList");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunActionRepetitionDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionRepetitionsListExpressionTraces operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsListExpressionTracesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressionTraces} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a workflow run expression trace.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} repetitionName The workflow repetition.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsListExpressionTracesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressionTraces}
     */
    workflowRunActionRepetitionsListExpressionTraces(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsListExpressionTraces");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsListExpressionTraces");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsListExpressionTraces");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsListExpressionTraces");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsListExpressionTraces");
      }
      // verify the required parameter 'repetitionName' is set
      if (repetitionName === undefined || repetitionName === null) {
        throw new Error("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsListExpressionTraces");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsListExpressionTraces");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName,
        'repetitionName': repetitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressionTraces;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionRepetitionsRequestHistoriesGet operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsRequestHistoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workflow run repetition request history.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} repetitionName The workflow repetition.
     * @param {String} requestHistoryName The request history name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsRequestHistoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestHistory}
     */
    workflowRunActionRepetitionsRequestHistoriesGet(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, requestHistoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'repetitionName' is set
      if (repetitionName === undefined || repetitionName === null) {
        throw new Error("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'requestHistoryName' is set
      if (requestHistoryName === undefined || requestHistoryName === null) {
        throw new Error("Missing the required parameter 'requestHistoryName' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsRequestHistoriesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName,
        'repetitionName': repetitionName,
        'requestHistoryName': requestHistoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestHistory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories/{requestHistoryName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionRepetitionsRequestHistoriesList operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsRequestHistoriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestHistoryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a workflow run repetition request history.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} repetitionName The workflow repetition.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRepetitionsRequestHistoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestHistoryListResult}
     */
    workflowRunActionRepetitionsRequestHistoriesList(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }
      // verify the required parameter 'repetitionName' is set
      if (repetitionName === undefined || repetitionName === null) {
        throw new Error("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsRequestHistoriesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName,
        'repetitionName': repetitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestHistoryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionRequestHistoriesGet operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRequestHistoriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestHistory} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workflow run request history.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} requestHistoryName The request history name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRequestHistoriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestHistory}
     */
    workflowRunActionRequestHistoriesGet(subscriptionId, resourceGroupName, workflowName, runName, actionName, requestHistoryName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRequestHistoriesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRequestHistoriesGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRequestHistoriesGet");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRequestHistoriesGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRequestHistoriesGet");
      }
      // verify the required parameter 'requestHistoryName' is set
      if (requestHistoryName === undefined || requestHistoryName === null) {
        throw new Error("Missing the required parameter 'requestHistoryName' when calling workflowRunActionRequestHistoriesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRequestHistoriesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName,
        'requestHistoryName': requestHistoryName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestHistory;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories/{requestHistoryName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionRequestHistoriesList operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionRequestHistoriesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RequestHistoryListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List a workflow run request history.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionRequestHistoriesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RequestHistoryListResult}
     */
    workflowRunActionRequestHistoriesList(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionRequestHistoriesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRequestHistoriesList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionRequestHistoriesList");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionRequestHistoriesList");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionRequestHistoriesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionRequestHistoriesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RequestHistoryListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionScopedRepetitionsGet operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionScopedRepetitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunActionRepetitionDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a workflow run action scoped repetition.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} repetitionName The workflow repetition.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionScopedRepetitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunActionRepetitionDefinition}
     */
    workflowRunActionScopedRepetitionsGet(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionScopedRepetitionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionScopedRepetitionsGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionScopedRepetitionsGet");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionScopedRepetitionsGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionScopedRepetitionsGet");
      }
      // verify the required parameter 'repetitionName' is set
      if (repetitionName === undefined || repetitionName === null) {
        throw new Error("Missing the required parameter 'repetitionName' when calling workflowRunActionScopedRepetitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionScopedRepetitionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName,
        'repetitionName': repetitionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunActionRepetitionDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionScopedRepetitionsList operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionScopedRepetitionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunActionRepetitionDefinitionCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the workflow run action scoped repetitions.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionScopedRepetitionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunActionRepetitionDefinitionCollection}
     */
    workflowRunActionScopedRepetitionsList(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionScopedRepetitionsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionScopedRepetitionsList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionScopedRepetitionsList");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionScopedRepetitionsList");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionScopedRepetitionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionScopedRepetitionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunActionRepetitionDefinitionCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionsGet operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunAction} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a workflow run action.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunAction}
     */
    workflowRunActionsGet(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionsGet");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionsGet");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionsGet");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunAction;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionsList operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowRunActionListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of workflow run actions.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {String} [filter] The filter to apply on the operation. Options for filters include: Status.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowRunActionListResult}
     */
    workflowRunActionsList(subscriptionId, resourceGroupName, workflowName, runName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionsList");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionsList");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowRunActionListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the workflowRunActionsListExpressionTraces operation.
     * @callback module:api/WorkflowRunActionsApi~workflowRunActionsListExpressionTracesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressionTraces} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a workflow run expression trace.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} workflowName The workflow name.
     * @param {String} runName The workflow run name.
     * @param {String} actionName The workflow action name.
     * @param {String} apiVersion The API version.
     * @param {module:api/WorkflowRunActionsApi~workflowRunActionsListExpressionTracesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressionTraces}
     */
    workflowRunActionsListExpressionTraces(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling workflowRunActionsListExpressionTraces");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling workflowRunActionsListExpressionTraces");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling workflowRunActionsListExpressionTraces");
      }
      // verify the required parameter 'runName' is set
      if (runName === undefined || runName === null) {
        throw new Error("Missing the required parameter 'runName' when calling workflowRunActionsListExpressionTraces");
      }
      // verify the required parameter 'actionName' is set
      if (actionName === undefined || actionName === null) {
        throw new Error("Missing the required parameter 'actionName' when calling workflowRunActionsListExpressionTraces");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling workflowRunActionsListExpressionTraces");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'workflowName': workflowName,
        'runName': runName,
        'actionName': actionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressionTraces;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
