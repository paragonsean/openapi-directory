/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetCallbackUrlParameters from '../model/GetCallbackUrlParameters';
import IntegrationAccountSchema from '../model/IntegrationAccountSchema';
import IntegrationAccountSchemaListResult from '../model/IntegrationAccountSchemaListResult';
import WorkflowTriggerCallbackUrl from '../model/WorkflowTriggerCallbackUrl';

/**
* IntegrationAccountSchemas service.
* @module api/IntegrationAccountSchemasApi
* @version 2016-06-01
*/
export default class IntegrationAccountSchemasApi {

    /**
    * Constructs a new IntegrationAccountSchemasApi. 
    * @alias module:api/IntegrationAccountSchemasApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the schemasCreateOrUpdate operation.
     * @callback module:api/IntegrationAccountSchemasApi~schemasCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates an integration account schema.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} schemaName The integration account schema name.
     * @param {String} apiVersion The API version.
     * @param {module:model/IntegrationAccountSchema} schema The integration account schema.
     * @param {module:api/IntegrationAccountSchemasApi~schemasCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountSchema}
     */
    schemasCreateOrUpdate(subscriptionId, resourceGroupName, integrationAccountName, schemaName, apiVersion, schema, callback) {
      let postBody = schema;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling schemasCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling schemasCreateOrUpdate");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling schemasCreateOrUpdate");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling schemasCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling schemasCreateOrUpdate");
      }
      // verify the required parameter 'schema' is set
      if (schema === undefined || schema === null) {
        throw new Error("Missing the required parameter 'schema' when calling schemasCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'schemaName': schemaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = IntegrationAccountSchema;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemasDelete operation.
     * @callback module:api/IntegrationAccountSchemasApi~schemasDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an integration account schema.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} schemaName The integration account schema name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountSchemasApi~schemasDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    schemasDelete(subscriptionId, resourceGroupName, integrationAccountName, schemaName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling schemasDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling schemasDelete");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling schemasDelete");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling schemasDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling schemasDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'schemaName': schemaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemasGet operation.
     * @callback module:api/IntegrationAccountSchemasApi~schemasGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountSchema} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an integration account schema.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} schemaName The integration account schema name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountSchemasApi~schemasGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountSchema}
     */
    schemasGet(subscriptionId, resourceGroupName, integrationAccountName, schemaName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling schemasGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling schemasGet");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling schemasGet");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling schemasGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling schemasGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'schemaName': schemaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationAccountSchema;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemasListByIntegrationAccounts operation.
     * @callback module:api/IntegrationAccountSchemasApi~schemasListByIntegrationAccountsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IntegrationAccountSchemaListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of integration account schemas.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} apiVersion The API version.
     * @param {Object} opts Optional parameters
     * @param {Number} [top] The number of items to be included in the result.
     * @param {String} [filter] The filter to apply on the operation. Options for filters include: SchemaType.
     * @param {module:api/IntegrationAccountSchemasApi~schemasListByIntegrationAccountsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IntegrationAccountSchemaListResult}
     */
    schemasListByIntegrationAccounts(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling schemasListByIntegrationAccounts");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling schemasListByIntegrationAccounts");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling schemasListByIntegrationAccounts");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling schemasListByIntegrationAccounts");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$top': opts['top'],
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IntegrationAccountSchemaListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the schemasListContentCallbackUrl operation.
     * @callback module:api/IntegrationAccountSchemasApi~schemasListContentCallbackUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTriggerCallbackUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content callback url.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} schemaName The integration account schema name.
     * @param {String} apiVersion The API version.
     * @param {module:model/GetCallbackUrlParameters} listContentCallbackUrl 
     * @param {module:api/IntegrationAccountSchemasApi~schemasListContentCallbackUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTriggerCallbackUrl}
     */
    schemasListContentCallbackUrl(subscriptionId, resourceGroupName, integrationAccountName, schemaName, apiVersion, listContentCallbackUrl, callback) {
      let postBody = listContentCallbackUrl;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling schemasListContentCallbackUrl");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling schemasListContentCallbackUrl");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling schemasListContentCallbackUrl");
      }
      // verify the required parameter 'schemaName' is set
      if (schemaName === undefined || schemaName === null) {
        throw new Error("Missing the required parameter 'schemaName' when calling schemasListContentCallbackUrl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling schemasListContentCallbackUrl");
      }
      // verify the required parameter 'listContentCallbackUrl' is set
      if (listContentCallbackUrl === undefined || listContentCallbackUrl === null) {
        throw new Error("Missing the required parameter 'listContentCallbackUrl' when calling schemasListContentCallbackUrl");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'schemaName': schemaName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = WorkflowTriggerCallbackUrl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/schemas/{schemaName}/listContentCallbackUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
