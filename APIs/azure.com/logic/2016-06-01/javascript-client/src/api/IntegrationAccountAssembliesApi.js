/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AssemblyCollection from '../model/AssemblyCollection';
import AssemblyDefinition from '../model/AssemblyDefinition';
import WorkflowTriggerCallbackUrl from '../model/WorkflowTriggerCallbackUrl';

/**
* IntegrationAccountAssemblies service.
* @module api/IntegrationAccountAssembliesApi
* @version 2016-06-01
*/
export default class IntegrationAccountAssembliesApi {

    /**
    * Constructs a new IntegrationAccountAssembliesApi. 
    * @alias module:api/IntegrationAccountAssembliesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the integrationAccountAssembliesCreateOrUpdate operation.
     * @callback module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssemblyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update an assembly for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} assemblyArtifactName The assembly artifact name.
     * @param {String} apiVersion The API version.
     * @param {module:model/AssemblyDefinition} assemblyArtifact The assembly artifact.
     * @param {module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssemblyDefinition}
     */
    integrationAccountAssembliesCreateOrUpdate(subscriptionId, resourceGroupName, integrationAccountName, assemblyArtifactName, apiVersion, assemblyArtifact, callback) {
      let postBody = assemblyArtifact;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAssembliesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAssembliesCreateOrUpdate");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAssembliesCreateOrUpdate");
      }
      // verify the required parameter 'assemblyArtifactName' is set
      if (assemblyArtifactName === undefined || assemblyArtifactName === null) {
        throw new Error("Missing the required parameter 'assemblyArtifactName' when calling integrationAccountAssembliesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAssembliesCreateOrUpdate");
      }
      // verify the required parameter 'assemblyArtifact' is set
      if (assemblyArtifact === undefined || assemblyArtifact === null) {
        throw new Error("Missing the required parameter 'assemblyArtifact' when calling integrationAccountAssembliesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'assemblyArtifactName': assemblyArtifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AssemblyDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAssembliesDelete operation.
     * @callback module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete an assembly for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} assemblyArtifactName The assembly artifact name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    integrationAccountAssembliesDelete(subscriptionId, resourceGroupName, integrationAccountName, assemblyArtifactName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAssembliesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAssembliesDelete");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAssembliesDelete");
      }
      // verify the required parameter 'assemblyArtifactName' is set
      if (assemblyArtifactName === undefined || assemblyArtifactName === null) {
        throw new Error("Missing the required parameter 'assemblyArtifactName' when calling integrationAccountAssembliesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAssembliesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'assemblyArtifactName': assemblyArtifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAssembliesGet operation.
     * @callback module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssemblyDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an assembly for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} assemblyArtifactName The assembly artifact name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssemblyDefinition}
     */
    integrationAccountAssembliesGet(subscriptionId, resourceGroupName, integrationAccountName, assemblyArtifactName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAssembliesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAssembliesGet");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAssembliesGet");
      }
      // verify the required parameter 'assemblyArtifactName' is set
      if (assemblyArtifactName === undefined || assemblyArtifactName === null) {
        throw new Error("Missing the required parameter 'assemblyArtifactName' when calling integrationAccountAssembliesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAssembliesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'assemblyArtifactName': assemblyArtifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssemblyDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAssembliesList operation.
     * @callback module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AssemblyCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List the assemblies for an integration account.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AssemblyCollection}
     */
    integrationAccountAssembliesList(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAssembliesList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAssembliesList");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAssembliesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAssembliesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AssemblyCollection;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the integrationAccountAssembliesListContentCallbackUrl operation.
     * @callback module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesListContentCallbackUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WorkflowTriggerCallbackUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the content callback url for an integration account assembly.
     * @param {String} subscriptionId The subscription id.
     * @param {String} resourceGroupName The resource group name.
     * @param {String} integrationAccountName The integration account name.
     * @param {String} assemblyArtifactName The assembly artifact name.
     * @param {String} apiVersion The API version.
     * @param {module:api/IntegrationAccountAssembliesApi~integrationAccountAssembliesListContentCallbackUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WorkflowTriggerCallbackUrl}
     */
    integrationAccountAssembliesListContentCallbackUrl(subscriptionId, resourceGroupName, integrationAccountName, assemblyArtifactName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling integrationAccountAssembliesListContentCallbackUrl");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling integrationAccountAssembliesListContentCallbackUrl");
      }
      // verify the required parameter 'integrationAccountName' is set
      if (integrationAccountName === undefined || integrationAccountName === null) {
        throw new Error("Missing the required parameter 'integrationAccountName' when calling integrationAccountAssembliesListContentCallbackUrl");
      }
      // verify the required parameter 'assemblyArtifactName' is set
      if (assemblyArtifactName === undefined || assemblyArtifactName === null) {
        throw new Error("Missing the required parameter 'assemblyArtifactName' when calling integrationAccountAssembliesListContentCallbackUrl");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling integrationAccountAssembliesListContentCallbackUrl");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'integrationAccountName': integrationAccountName,
        'assemblyArtifactName': assemblyArtifactName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = WorkflowTriggerCallbackUrl;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/assemblies/{assemblyArtifactName}/listContentCallbackUrl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
