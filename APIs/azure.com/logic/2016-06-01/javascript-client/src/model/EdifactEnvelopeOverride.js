/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EdifactEnvelopeOverride model module.
 * @module model/EdifactEnvelopeOverride
 * @version 2016-06-01
 */
class EdifactEnvelopeOverride {
    /**
     * Constructs a new <code>EdifactEnvelopeOverride</code>.
     * The Edifact envelope override settings.
     * @alias module:model/EdifactEnvelopeOverride
     */
    constructor() { 
        
        EdifactEnvelopeOverride.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EdifactEnvelopeOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EdifactEnvelopeOverride} obj Optional instance to populate.
     * @return {module:model/EdifactEnvelopeOverride} The populated <code>EdifactEnvelopeOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EdifactEnvelopeOverride();

            if (data.hasOwnProperty('applicationPassword')) {
                obj['applicationPassword'] = ApiClient.convertToType(data['applicationPassword'], 'String');
            }
            if (data.hasOwnProperty('associationAssignedCode')) {
                obj['associationAssignedCode'] = ApiClient.convertToType(data['associationAssignedCode'], 'String');
            }
            if (data.hasOwnProperty('controllingAgencyCode')) {
                obj['controllingAgencyCode'] = ApiClient.convertToType(data['controllingAgencyCode'], 'String');
            }
            if (data.hasOwnProperty('functionalGroupId')) {
                obj['functionalGroupId'] = ApiClient.convertToType(data['functionalGroupId'], 'String');
            }
            if (data.hasOwnProperty('groupHeaderMessageRelease')) {
                obj['groupHeaderMessageRelease'] = ApiClient.convertToType(data['groupHeaderMessageRelease'], 'String');
            }
            if (data.hasOwnProperty('groupHeaderMessageVersion')) {
                obj['groupHeaderMessageVersion'] = ApiClient.convertToType(data['groupHeaderMessageVersion'], 'String');
            }
            if (data.hasOwnProperty('messageAssociationAssignedCode')) {
                obj['messageAssociationAssignedCode'] = ApiClient.convertToType(data['messageAssociationAssignedCode'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('messageRelease')) {
                obj['messageRelease'] = ApiClient.convertToType(data['messageRelease'], 'String');
            }
            if (data.hasOwnProperty('messageVersion')) {
                obj['messageVersion'] = ApiClient.convertToType(data['messageVersion'], 'String');
            }
            if (data.hasOwnProperty('receiverApplicationId')) {
                obj['receiverApplicationId'] = ApiClient.convertToType(data['receiverApplicationId'], 'String');
            }
            if (data.hasOwnProperty('receiverApplicationQualifier')) {
                obj['receiverApplicationQualifier'] = ApiClient.convertToType(data['receiverApplicationQualifier'], 'String');
            }
            if (data.hasOwnProperty('senderApplicationId')) {
                obj['senderApplicationId'] = ApiClient.convertToType(data['senderApplicationId'], 'String');
            }
            if (data.hasOwnProperty('senderApplicationQualifier')) {
                obj['senderApplicationQualifier'] = ApiClient.convertToType(data['senderApplicationQualifier'], 'String');
            }
            if (data.hasOwnProperty('targetNamespace')) {
                obj['targetNamespace'] = ApiClient.convertToType(data['targetNamespace'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EdifactEnvelopeOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EdifactEnvelopeOverride</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['applicationPassword'] && !(typeof data['applicationPassword'] === 'string' || data['applicationPassword'] instanceof String)) {
            throw new Error("Expected the field `applicationPassword` to be a primitive type in the JSON string but got " + data['applicationPassword']);
        }
        // ensure the json data is a string
        if (data['associationAssignedCode'] && !(typeof data['associationAssignedCode'] === 'string' || data['associationAssignedCode'] instanceof String)) {
            throw new Error("Expected the field `associationAssignedCode` to be a primitive type in the JSON string but got " + data['associationAssignedCode']);
        }
        // ensure the json data is a string
        if (data['controllingAgencyCode'] && !(typeof data['controllingAgencyCode'] === 'string' || data['controllingAgencyCode'] instanceof String)) {
            throw new Error("Expected the field `controllingAgencyCode` to be a primitive type in the JSON string but got " + data['controllingAgencyCode']);
        }
        // ensure the json data is a string
        if (data['functionalGroupId'] && !(typeof data['functionalGroupId'] === 'string' || data['functionalGroupId'] instanceof String)) {
            throw new Error("Expected the field `functionalGroupId` to be a primitive type in the JSON string but got " + data['functionalGroupId']);
        }
        // ensure the json data is a string
        if (data['groupHeaderMessageRelease'] && !(typeof data['groupHeaderMessageRelease'] === 'string' || data['groupHeaderMessageRelease'] instanceof String)) {
            throw new Error("Expected the field `groupHeaderMessageRelease` to be a primitive type in the JSON string but got " + data['groupHeaderMessageRelease']);
        }
        // ensure the json data is a string
        if (data['groupHeaderMessageVersion'] && !(typeof data['groupHeaderMessageVersion'] === 'string' || data['groupHeaderMessageVersion'] instanceof String)) {
            throw new Error("Expected the field `groupHeaderMessageVersion` to be a primitive type in the JSON string but got " + data['groupHeaderMessageVersion']);
        }
        // ensure the json data is a string
        if (data['messageAssociationAssignedCode'] && !(typeof data['messageAssociationAssignedCode'] === 'string' || data['messageAssociationAssignedCode'] instanceof String)) {
            throw new Error("Expected the field `messageAssociationAssignedCode` to be a primitive type in the JSON string but got " + data['messageAssociationAssignedCode']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['messageRelease'] && !(typeof data['messageRelease'] === 'string' || data['messageRelease'] instanceof String)) {
            throw new Error("Expected the field `messageRelease` to be a primitive type in the JSON string but got " + data['messageRelease']);
        }
        // ensure the json data is a string
        if (data['messageVersion'] && !(typeof data['messageVersion'] === 'string' || data['messageVersion'] instanceof String)) {
            throw new Error("Expected the field `messageVersion` to be a primitive type in the JSON string but got " + data['messageVersion']);
        }
        // ensure the json data is a string
        if (data['receiverApplicationId'] && !(typeof data['receiverApplicationId'] === 'string' || data['receiverApplicationId'] instanceof String)) {
            throw new Error("Expected the field `receiverApplicationId` to be a primitive type in the JSON string but got " + data['receiverApplicationId']);
        }
        // ensure the json data is a string
        if (data['receiverApplicationQualifier'] && !(typeof data['receiverApplicationQualifier'] === 'string' || data['receiverApplicationQualifier'] instanceof String)) {
            throw new Error("Expected the field `receiverApplicationQualifier` to be a primitive type in the JSON string but got " + data['receiverApplicationQualifier']);
        }
        // ensure the json data is a string
        if (data['senderApplicationId'] && !(typeof data['senderApplicationId'] === 'string' || data['senderApplicationId'] instanceof String)) {
            throw new Error("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got " + data['senderApplicationId']);
        }
        // ensure the json data is a string
        if (data['senderApplicationQualifier'] && !(typeof data['senderApplicationQualifier'] === 'string' || data['senderApplicationQualifier'] instanceof String)) {
            throw new Error("Expected the field `senderApplicationQualifier` to be a primitive type in the JSON string but got " + data['senderApplicationQualifier']);
        }
        // ensure the json data is a string
        if (data['targetNamespace'] && !(typeof data['targetNamespace'] === 'string' || data['targetNamespace'] instanceof String)) {
            throw new Error("Expected the field `targetNamespace` to be a primitive type in the JSON string but got " + data['targetNamespace']);
        }

        return true;
    }


}



/**
 * The application password.
 * @member {String} applicationPassword
 */
EdifactEnvelopeOverride.prototype['applicationPassword'] = undefined;

/**
 * The association assigned code.
 * @member {String} associationAssignedCode
 */
EdifactEnvelopeOverride.prototype['associationAssignedCode'] = undefined;

/**
 * The controlling agency code.
 * @member {String} controllingAgencyCode
 */
EdifactEnvelopeOverride.prototype['controllingAgencyCode'] = undefined;

/**
 * The functional group id.
 * @member {String} functionalGroupId
 */
EdifactEnvelopeOverride.prototype['functionalGroupId'] = undefined;

/**
 * The group header message release.
 * @member {String} groupHeaderMessageRelease
 */
EdifactEnvelopeOverride.prototype['groupHeaderMessageRelease'] = undefined;

/**
 * The group header message version.
 * @member {String} groupHeaderMessageVersion
 */
EdifactEnvelopeOverride.prototype['groupHeaderMessageVersion'] = undefined;

/**
 * The message association assigned code.
 * @member {String} messageAssociationAssignedCode
 */
EdifactEnvelopeOverride.prototype['messageAssociationAssignedCode'] = undefined;

/**
 * The message id on which this envelope settings has to be applied.
 * @member {String} messageId
 */
EdifactEnvelopeOverride.prototype['messageId'] = undefined;

/**
 * The message release version on which this envelope settings has to be applied.
 * @member {String} messageRelease
 */
EdifactEnvelopeOverride.prototype['messageRelease'] = undefined;

/**
 * The message version on which this envelope settings has to be applied.
 * @member {String} messageVersion
 */
EdifactEnvelopeOverride.prototype['messageVersion'] = undefined;

/**
 * The receiver application id.
 * @member {String} receiverApplicationId
 */
EdifactEnvelopeOverride.prototype['receiverApplicationId'] = undefined;

/**
 * The receiver application qualifier.
 * @member {String} receiverApplicationQualifier
 */
EdifactEnvelopeOverride.prototype['receiverApplicationQualifier'] = undefined;

/**
 * The sender application id.
 * @member {String} senderApplicationId
 */
EdifactEnvelopeOverride.prototype['senderApplicationId'] = undefined;

/**
 * The sender application qualifier.
 * @member {String} senderApplicationQualifier
 */
EdifactEnvelopeOverride.prototype['senderApplicationQualifier'] = undefined;

/**
 * The target namespace on which this envelope settings has to be applied.
 * @member {String} targetNamespace
 */
EdifactEnvelopeOverride.prototype['targetNamespace'] = undefined;






export default EdifactEnvelopeOverride;

