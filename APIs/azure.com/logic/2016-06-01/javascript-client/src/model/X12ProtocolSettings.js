/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import X12AcknowledgementSettings from './X12AcknowledgementSettings';
import X12DelimiterOverrides from './X12DelimiterOverrides';
import X12EnvelopeOverride from './X12EnvelopeOverride';
import X12EnvelopeSettings from './X12EnvelopeSettings';
import X12FramingSettings from './X12FramingSettings';
import X12MessageFilter from './X12MessageFilter';
import X12MessageIdentifier from './X12MessageIdentifier';
import X12ProcessingSettings from './X12ProcessingSettings';
import X12SchemaReference from './X12SchemaReference';
import X12SecuritySettings from './X12SecuritySettings';
import X12ValidationOverride from './X12ValidationOverride';
import X12ValidationSettings from './X12ValidationSettings';

/**
 * The X12ProtocolSettings model module.
 * @module model/X12ProtocolSettings
 * @version 2016-06-01
 */
class X12ProtocolSettings {
    /**
     * Constructs a new <code>X12ProtocolSettings</code>.
     * The X12 agreement protocol settings.
     * @alias module:model/X12ProtocolSettings
     * @param acknowledgementSettings {module:model/X12AcknowledgementSettings} 
     * @param envelopeSettings {module:model/X12EnvelopeSettings} 
     * @param framingSettings {module:model/X12FramingSettings} 
     * @param messageFilter {module:model/X12MessageFilter} 
     * @param processingSettings {module:model/X12ProcessingSettings} 
     * @param schemaReferences {Array.<module:model/X12SchemaReference>} The X12 schema references.
     * @param securitySettings {module:model/X12SecuritySettings} 
     * @param validationSettings {module:model/X12ValidationSettings} 
     */
    constructor(acknowledgementSettings, envelopeSettings, framingSettings, messageFilter, processingSettings, schemaReferences, securitySettings, validationSettings) { 
        
        X12ProtocolSettings.initialize(this, acknowledgementSettings, envelopeSettings, framingSettings, messageFilter, processingSettings, schemaReferences, securitySettings, validationSettings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acknowledgementSettings, envelopeSettings, framingSettings, messageFilter, processingSettings, schemaReferences, securitySettings, validationSettings) { 
        obj['acknowledgementSettings'] = acknowledgementSettings;
        obj['envelopeSettings'] = envelopeSettings;
        obj['framingSettings'] = framingSettings;
        obj['messageFilter'] = messageFilter;
        obj['processingSettings'] = processingSettings;
        obj['schemaReferences'] = schemaReferences;
        obj['securitySettings'] = securitySettings;
        obj['validationSettings'] = validationSettings;
    }

    /**
     * Constructs a <code>X12ProtocolSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12ProtocolSettings} obj Optional instance to populate.
     * @return {module:model/X12ProtocolSettings} The populated <code>X12ProtocolSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12ProtocolSettings();

            if (data.hasOwnProperty('acknowledgementSettings')) {
                obj['acknowledgementSettings'] = X12AcknowledgementSettings.constructFromObject(data['acknowledgementSettings']);
            }
            if (data.hasOwnProperty('envelopeOverrides')) {
                obj['envelopeOverrides'] = ApiClient.convertToType(data['envelopeOverrides'], [X12EnvelopeOverride]);
            }
            if (data.hasOwnProperty('envelopeSettings')) {
                obj['envelopeSettings'] = X12EnvelopeSettings.constructFromObject(data['envelopeSettings']);
            }
            if (data.hasOwnProperty('framingSettings')) {
                obj['framingSettings'] = X12FramingSettings.constructFromObject(data['framingSettings']);
            }
            if (data.hasOwnProperty('messageFilter')) {
                obj['messageFilter'] = X12MessageFilter.constructFromObject(data['messageFilter']);
            }
            if (data.hasOwnProperty('messageFilterList')) {
                obj['messageFilterList'] = ApiClient.convertToType(data['messageFilterList'], [X12MessageIdentifier]);
            }
            if (data.hasOwnProperty('processingSettings')) {
                obj['processingSettings'] = X12ProcessingSettings.constructFromObject(data['processingSettings']);
            }
            if (data.hasOwnProperty('schemaReferences')) {
                obj['schemaReferences'] = ApiClient.convertToType(data['schemaReferences'], [X12SchemaReference]);
            }
            if (data.hasOwnProperty('securitySettings')) {
                obj['securitySettings'] = X12SecuritySettings.constructFromObject(data['securitySettings']);
            }
            if (data.hasOwnProperty('validationOverrides')) {
                obj['validationOverrides'] = ApiClient.convertToType(data['validationOverrides'], [X12ValidationOverride]);
            }
            if (data.hasOwnProperty('validationSettings')) {
                obj['validationSettings'] = X12ValidationSettings.constructFromObject(data['validationSettings']);
            }
            if (data.hasOwnProperty('x12DelimiterOverrides')) {
                obj['x12DelimiterOverrides'] = ApiClient.convertToType(data['x12DelimiterOverrides'], [X12DelimiterOverrides]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12ProtocolSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12ProtocolSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of X12ProtocolSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `acknowledgementSettings`
        if (data['acknowledgementSettings']) { // data not null
          X12AcknowledgementSettings.validateJSON(data['acknowledgementSettings']);
        }
        if (data['envelopeOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['envelopeOverrides'])) {
                throw new Error("Expected the field `envelopeOverrides` to be an array in the JSON data but got " + data['envelopeOverrides']);
            }
            // validate the optional field `envelopeOverrides` (array)
            for (const item of data['envelopeOverrides']) {
                X12EnvelopeOverride.validateJSON(item);
            };
        }
        // validate the optional field `envelopeSettings`
        if (data['envelopeSettings']) { // data not null
          X12EnvelopeSettings.validateJSON(data['envelopeSettings']);
        }
        // validate the optional field `framingSettings`
        if (data['framingSettings']) { // data not null
          X12FramingSettings.validateJSON(data['framingSettings']);
        }
        // validate the optional field `messageFilter`
        if (data['messageFilter']) { // data not null
          X12MessageFilter.validateJSON(data['messageFilter']);
        }
        if (data['messageFilterList']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['messageFilterList'])) {
                throw new Error("Expected the field `messageFilterList` to be an array in the JSON data but got " + data['messageFilterList']);
            }
            // validate the optional field `messageFilterList` (array)
            for (const item of data['messageFilterList']) {
                X12MessageIdentifier.validateJSON(item);
            };
        }
        // validate the optional field `processingSettings`
        if (data['processingSettings']) { // data not null
          X12ProcessingSettings.validateJSON(data['processingSettings']);
        }
        if (data['schemaReferences']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schemaReferences'])) {
                throw new Error("Expected the field `schemaReferences` to be an array in the JSON data but got " + data['schemaReferences']);
            }
            // validate the optional field `schemaReferences` (array)
            for (const item of data['schemaReferences']) {
                X12SchemaReference.validateJSON(item);
            };
        }
        // validate the optional field `securitySettings`
        if (data['securitySettings']) { // data not null
          X12SecuritySettings.validateJSON(data['securitySettings']);
        }
        if (data['validationOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['validationOverrides'])) {
                throw new Error("Expected the field `validationOverrides` to be an array in the JSON data but got " + data['validationOverrides']);
            }
            // validate the optional field `validationOverrides` (array)
            for (const item of data['validationOverrides']) {
                X12ValidationOverride.validateJSON(item);
            };
        }
        // validate the optional field `validationSettings`
        if (data['validationSettings']) { // data not null
          X12ValidationSettings.validateJSON(data['validationSettings']);
        }
        if (data['x12DelimiterOverrides']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['x12DelimiterOverrides'])) {
                throw new Error("Expected the field `x12DelimiterOverrides` to be an array in the JSON data but got " + data['x12DelimiterOverrides']);
            }
            // validate the optional field `x12DelimiterOverrides` (array)
            for (const item of data['x12DelimiterOverrides']) {
                X12DelimiterOverrides.validateJSON(item);
            };
        }

        return true;
    }


}

X12ProtocolSettings.RequiredProperties = ["acknowledgementSettings", "envelopeSettings", "framingSettings", "messageFilter", "processingSettings", "schemaReferences", "securitySettings", "validationSettings"];

/**
 * @member {module:model/X12AcknowledgementSettings} acknowledgementSettings
 */
X12ProtocolSettings.prototype['acknowledgementSettings'] = undefined;

/**
 * The X12 envelope override settings.
 * @member {Array.<module:model/X12EnvelopeOverride>} envelopeOverrides
 */
X12ProtocolSettings.prototype['envelopeOverrides'] = undefined;

/**
 * @member {module:model/X12EnvelopeSettings} envelopeSettings
 */
X12ProtocolSettings.prototype['envelopeSettings'] = undefined;

/**
 * @member {module:model/X12FramingSettings} framingSettings
 */
X12ProtocolSettings.prototype['framingSettings'] = undefined;

/**
 * @member {module:model/X12MessageFilter} messageFilter
 */
X12ProtocolSettings.prototype['messageFilter'] = undefined;

/**
 * The X12 message filter list.
 * @member {Array.<module:model/X12MessageIdentifier>} messageFilterList
 */
X12ProtocolSettings.prototype['messageFilterList'] = undefined;

/**
 * @member {module:model/X12ProcessingSettings} processingSettings
 */
X12ProtocolSettings.prototype['processingSettings'] = undefined;

/**
 * The X12 schema references.
 * @member {Array.<module:model/X12SchemaReference>} schemaReferences
 */
X12ProtocolSettings.prototype['schemaReferences'] = undefined;

/**
 * @member {module:model/X12SecuritySettings} securitySettings
 */
X12ProtocolSettings.prototype['securitySettings'] = undefined;

/**
 * The X12 validation override settings.
 * @member {Array.<module:model/X12ValidationOverride>} validationOverrides
 */
X12ProtocolSettings.prototype['validationOverrides'] = undefined;

/**
 * @member {module:model/X12ValidationSettings} validationSettings
 */
X12ProtocolSettings.prototype['validationSettings'] = undefined;

/**
 * The X12 delimiter override settings.
 * @member {Array.<module:model/X12DelimiterOverrides>} x12DelimiterOverrides
 */
X12ProtocolSettings.prototype['x12DelimiterOverrides'] = undefined;






export default X12ProtocolSettings;

