/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ArtifactContentPropertiesDefinition from './ArtifactContentPropertiesDefinition';
import ContentLink from './ContentLink';

/**
 * The AssemblyProperties model module.
 * @module model/AssemblyProperties
 * @version 2016-06-01
 */
class AssemblyProperties {
    /**
     * Constructs a new <code>AssemblyProperties</code>.
     * The assembly properties definition.
     * @alias module:model/AssemblyProperties
     * @implements module:model/ArtifactContentPropertiesDefinition
     */
    constructor() { 
        ArtifactContentPropertiesDefinition.initialize(this);
        AssemblyProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['assemblyName'] = assemblyName;
    }

    /**
     * Constructs a <code>AssemblyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssemblyProperties} obj Optional instance to populate.
     * @return {module:model/AssemblyProperties} The populated <code>AssemblyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssemblyProperties();
            ArtifactContentPropertiesDefinition.constructFromObject(data, obj);

            if (data.hasOwnProperty('assemblyCulture')) {
                obj['assemblyCulture'] = ApiClient.convertToType(data['assemblyCulture'], 'String');
            }
            if (data.hasOwnProperty('assemblyName')) {
                obj['assemblyName'] = ApiClient.convertToType(data['assemblyName'], 'String');
            }
            if (data.hasOwnProperty('assemblyPublicKeyToken')) {
                obj['assemblyPublicKeyToken'] = ApiClient.convertToType(data['assemblyPublicKeyToken'], 'String');
            }
            if (data.hasOwnProperty('assemblyVersion')) {
                obj['assemblyVersion'] = ApiClient.convertToType(data['assemblyVersion'], 'String');
            }
            if (data.hasOwnProperty('content')) {
                obj['content'] = ApiClient.convertToType(data['content'], Object);
            }
            if (data.hasOwnProperty('contentLink')) {
                obj['contentLink'] = ContentLink.constructFromObject(data['contentLink']);
            }
            if (data.hasOwnProperty('contentType')) {
                obj['contentType'] = ApiClient.convertToType(data['contentType'], 'String');
            }
            if (data.hasOwnProperty('changedTime')) {
                obj['changedTime'] = ApiClient.convertToType(data['changedTime'], 'Date');
            }
            if (data.hasOwnProperty('createdTime')) {
                obj['createdTime'] = ApiClient.convertToType(data['createdTime'], 'Date');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssemblyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssemblyProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AssemblyProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['assemblyCulture'] && !(typeof data['assemblyCulture'] === 'string' || data['assemblyCulture'] instanceof String)) {
            throw new Error("Expected the field `assemblyCulture` to be a primitive type in the JSON string but got " + data['assemblyCulture']);
        }
        // ensure the json data is a string
        if (data['assemblyName'] && !(typeof data['assemblyName'] === 'string' || data['assemblyName'] instanceof String)) {
            throw new Error("Expected the field `assemblyName` to be a primitive type in the JSON string but got " + data['assemblyName']);
        }
        // ensure the json data is a string
        if (data['assemblyPublicKeyToken'] && !(typeof data['assemblyPublicKeyToken'] === 'string' || data['assemblyPublicKeyToken'] instanceof String)) {
            throw new Error("Expected the field `assemblyPublicKeyToken` to be a primitive type in the JSON string but got " + data['assemblyPublicKeyToken']);
        }
        // ensure the json data is a string
        if (data['assemblyVersion'] && !(typeof data['assemblyVersion'] === 'string' || data['assemblyVersion'] instanceof String)) {
            throw new Error("Expected the field `assemblyVersion` to be a primitive type in the JSON string but got " + data['assemblyVersion']);
        }
        // validate the optional field `contentLink`
        if (data['contentLink']) { // data not null
          ContentLink.validateJSON(data['contentLink']);
        }
        // ensure the json data is a string
        if (data['contentType'] && !(typeof data['contentType'] === 'string' || data['contentType'] instanceof String)) {
            throw new Error("Expected the field `contentType` to be a primitive type in the JSON string but got " + data['contentType']);
        }

        return true;
    }


}

AssemblyProperties.RequiredProperties = ["assemblyName"];

/**
 * The assembly culture.
 * @member {String} assemblyCulture
 */
AssemblyProperties.prototype['assemblyCulture'] = undefined;

/**
 * The assembly name.
 * @member {String} assemblyName
 */
AssemblyProperties.prototype['assemblyName'] = undefined;

/**
 * The assembly public key token.
 * @member {String} assemblyPublicKeyToken
 */
AssemblyProperties.prototype['assemblyPublicKeyToken'] = undefined;

/**
 * The assembly version.
 * @member {String} assemblyVersion
 */
AssemblyProperties.prototype['assemblyVersion'] = undefined;

/**
 * @member {Object} content
 */
AssemblyProperties.prototype['content'] = undefined;

/**
 * @member {module:model/ContentLink} contentLink
 */
AssemblyProperties.prototype['contentLink'] = undefined;

/**
 * The content type.
 * @member {String} contentType
 */
AssemblyProperties.prototype['contentType'] = undefined;

/**
 * The artifact changed time.
 * @member {Date} changedTime
 */
AssemblyProperties.prototype['changedTime'] = undefined;

/**
 * The artifact creation time.
 * @member {Date} createdTime
 */
AssemblyProperties.prototype['createdTime'] = undefined;

/**
 * @member {Object} metadata
 */
AssemblyProperties.prototype['metadata'] = undefined;


// Implement ArtifactContentPropertiesDefinition interface:
/**
 * The artifact changed time.
 * @member {Date} changedTime
 */
ArtifactContentPropertiesDefinition.prototype['changedTime'] = undefined;
/**
 * The artifact creation time.
 * @member {Date} createdTime
 */
ArtifactContentPropertiesDefinition.prototype['createdTime'] = undefined;
/**
 * @member {Object} metadata
 */
ArtifactContentPropertiesDefinition.prototype['metadata'] = undefined;




export default AssemblyProperties;

