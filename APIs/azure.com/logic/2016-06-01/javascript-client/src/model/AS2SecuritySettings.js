/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AS2SecuritySettings model module.
 * @module model/AS2SecuritySettings
 * @version 2016-06-01
 */
class AS2SecuritySettings {
    /**
     * Constructs a new <code>AS2SecuritySettings</code>.
     * The AS2 agreement security settings.
     * @alias module:model/AS2SecuritySettings
     * @param enableNrrForInboundDecodedMessages {Boolean} The value indicating whether to enable NRR for inbound decoded messages.
     * @param enableNrrForInboundEncodedMessages {Boolean} The value indicating whether to enable NRR for inbound encoded messages.
     * @param enableNrrForInboundMdn {Boolean} The value indicating whether to enable NRR for inbound MDN.
     * @param enableNrrForOutboundDecodedMessages {Boolean} The value indicating whether to enable NRR for outbound decoded messages.
     * @param enableNrrForOutboundEncodedMessages {Boolean} The value indicating whether to enable NRR for outbound encoded messages.
     * @param enableNrrForOutboundMdn {Boolean} The value indicating whether to enable NRR for outbound MDN.
     * @param overrideGroupSigningCertificate {Boolean} The value indicating whether to send or request a MDN.
     */
    constructor(enableNrrForInboundDecodedMessages, enableNrrForInboundEncodedMessages, enableNrrForInboundMdn, enableNrrForOutboundDecodedMessages, enableNrrForOutboundEncodedMessages, enableNrrForOutboundMdn, overrideGroupSigningCertificate) { 
        
        AS2SecuritySettings.initialize(this, enableNrrForInboundDecodedMessages, enableNrrForInboundEncodedMessages, enableNrrForInboundMdn, enableNrrForOutboundDecodedMessages, enableNrrForOutboundEncodedMessages, enableNrrForOutboundMdn, overrideGroupSigningCertificate);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, enableNrrForInboundDecodedMessages, enableNrrForInboundEncodedMessages, enableNrrForInboundMdn, enableNrrForOutboundDecodedMessages, enableNrrForOutboundEncodedMessages, enableNrrForOutboundMdn, overrideGroupSigningCertificate) { 
        obj['enableNrrForInboundDecodedMessages'] = enableNrrForInboundDecodedMessages;
        obj['enableNrrForInboundEncodedMessages'] = enableNrrForInboundEncodedMessages;
        obj['enableNrrForInboundMdn'] = enableNrrForInboundMdn;
        obj['enableNrrForOutboundDecodedMessages'] = enableNrrForOutboundDecodedMessages;
        obj['enableNrrForOutboundEncodedMessages'] = enableNrrForOutboundEncodedMessages;
        obj['enableNrrForOutboundMdn'] = enableNrrForOutboundMdn;
        obj['overrideGroupSigningCertificate'] = overrideGroupSigningCertificate;
    }

    /**
     * Constructs a <code>AS2SecuritySettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AS2SecuritySettings} obj Optional instance to populate.
     * @return {module:model/AS2SecuritySettings} The populated <code>AS2SecuritySettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AS2SecuritySettings();

            if (data.hasOwnProperty('enableNrrForInboundDecodedMessages')) {
                obj['enableNrrForInboundDecodedMessages'] = ApiClient.convertToType(data['enableNrrForInboundDecodedMessages'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNrrForInboundEncodedMessages')) {
                obj['enableNrrForInboundEncodedMessages'] = ApiClient.convertToType(data['enableNrrForInboundEncodedMessages'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNrrForInboundMdn')) {
                obj['enableNrrForInboundMdn'] = ApiClient.convertToType(data['enableNrrForInboundMdn'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNrrForOutboundDecodedMessages')) {
                obj['enableNrrForOutboundDecodedMessages'] = ApiClient.convertToType(data['enableNrrForOutboundDecodedMessages'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNrrForOutboundEncodedMessages')) {
                obj['enableNrrForOutboundEncodedMessages'] = ApiClient.convertToType(data['enableNrrForOutboundEncodedMessages'], 'Boolean');
            }
            if (data.hasOwnProperty('enableNrrForOutboundMdn')) {
                obj['enableNrrForOutboundMdn'] = ApiClient.convertToType(data['enableNrrForOutboundMdn'], 'Boolean');
            }
            if (data.hasOwnProperty('encryptionCertificateName')) {
                obj['encryptionCertificateName'] = ApiClient.convertToType(data['encryptionCertificateName'], 'String');
            }
            if (data.hasOwnProperty('overrideGroupSigningCertificate')) {
                obj['overrideGroupSigningCertificate'] = ApiClient.convertToType(data['overrideGroupSigningCertificate'], 'Boolean');
            }
            if (data.hasOwnProperty('sha2AlgorithmFormat')) {
                obj['sha2AlgorithmFormat'] = ApiClient.convertToType(data['sha2AlgorithmFormat'], 'String');
            }
            if (data.hasOwnProperty('signingCertificateName')) {
                obj['signingCertificateName'] = ApiClient.convertToType(data['signingCertificateName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AS2SecuritySettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AS2SecuritySettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AS2SecuritySettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['encryptionCertificateName'] && !(typeof data['encryptionCertificateName'] === 'string' || data['encryptionCertificateName'] instanceof String)) {
            throw new Error("Expected the field `encryptionCertificateName` to be a primitive type in the JSON string but got " + data['encryptionCertificateName']);
        }
        // ensure the json data is a string
        if (data['sha2AlgorithmFormat'] && !(typeof data['sha2AlgorithmFormat'] === 'string' || data['sha2AlgorithmFormat'] instanceof String)) {
            throw new Error("Expected the field `sha2AlgorithmFormat` to be a primitive type in the JSON string but got " + data['sha2AlgorithmFormat']);
        }
        // ensure the json data is a string
        if (data['signingCertificateName'] && !(typeof data['signingCertificateName'] === 'string' || data['signingCertificateName'] instanceof String)) {
            throw new Error("Expected the field `signingCertificateName` to be a primitive type in the JSON string but got " + data['signingCertificateName']);
        }

        return true;
    }


}

AS2SecuritySettings.RequiredProperties = ["enableNrrForInboundDecodedMessages", "enableNrrForInboundEncodedMessages", "enableNrrForInboundMdn", "enableNrrForOutboundDecodedMessages", "enableNrrForOutboundEncodedMessages", "enableNrrForOutboundMdn", "overrideGroupSigningCertificate"];

/**
 * The value indicating whether to enable NRR for inbound decoded messages.
 * @member {Boolean} enableNrrForInboundDecodedMessages
 */
AS2SecuritySettings.prototype['enableNrrForInboundDecodedMessages'] = undefined;

/**
 * The value indicating whether to enable NRR for inbound encoded messages.
 * @member {Boolean} enableNrrForInboundEncodedMessages
 */
AS2SecuritySettings.prototype['enableNrrForInboundEncodedMessages'] = undefined;

/**
 * The value indicating whether to enable NRR for inbound MDN.
 * @member {Boolean} enableNrrForInboundMdn
 */
AS2SecuritySettings.prototype['enableNrrForInboundMdn'] = undefined;

/**
 * The value indicating whether to enable NRR for outbound decoded messages.
 * @member {Boolean} enableNrrForOutboundDecodedMessages
 */
AS2SecuritySettings.prototype['enableNrrForOutboundDecodedMessages'] = undefined;

/**
 * The value indicating whether to enable NRR for outbound encoded messages.
 * @member {Boolean} enableNrrForOutboundEncodedMessages
 */
AS2SecuritySettings.prototype['enableNrrForOutboundEncodedMessages'] = undefined;

/**
 * The value indicating whether to enable NRR for outbound MDN.
 * @member {Boolean} enableNrrForOutboundMdn
 */
AS2SecuritySettings.prototype['enableNrrForOutboundMdn'] = undefined;

/**
 * The name of the encryption certificate.
 * @member {String} encryptionCertificateName
 */
AS2SecuritySettings.prototype['encryptionCertificateName'] = undefined;

/**
 * The value indicating whether to send or request a MDN.
 * @member {Boolean} overrideGroupSigningCertificate
 */
AS2SecuritySettings.prototype['overrideGroupSigningCertificate'] = undefined;

/**
 * The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.
 * @member {String} sha2AlgorithmFormat
 */
AS2SecuritySettings.prototype['sha2AlgorithmFormat'] = undefined;

/**
 * The name of the signing certificate.
 * @member {String} signingCertificateName
 */
AS2SecuritySettings.prototype['signingCertificateName'] = undefined;






export default AS2SecuritySettings;

