/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import X12DateFormat from './X12DateFormat';
import X12TimeFormat from './X12TimeFormat';

/**
 * The X12EnvelopeOverride model module.
 * @module model/X12EnvelopeOverride
 * @version 2016-06-01
 */
class X12EnvelopeOverride {
    /**
     * Constructs a new <code>X12EnvelopeOverride</code>.
     * The X12 envelope override settings.
     * @alias module:model/X12EnvelopeOverride
     * @param dateFormat {module:model/X12DateFormat} 
     * @param headerVersion {String} The header version.
     * @param messageId {String} The message id on which this envelope settings has to be applied.
     * @param protocolVersion {String} The protocol version on which this envelope settings has to be applied.
     * @param receiverApplicationId {String} The receiver application id.
     * @param responsibleAgencyCode {String} The responsible agency code.
     * @param senderApplicationId {String} The sender application id.
     * @param targetNamespace {String} The target namespace on which this envelope settings has to be applied.
     * @param timeFormat {module:model/X12TimeFormat} 
     */
    constructor(dateFormat, headerVersion, messageId, protocolVersion, receiverApplicationId, responsibleAgencyCode, senderApplicationId, targetNamespace, timeFormat) { 
        
        X12EnvelopeOverride.initialize(this, dateFormat, headerVersion, messageId, protocolVersion, receiverApplicationId, responsibleAgencyCode, senderApplicationId, targetNamespace, timeFormat);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dateFormat, headerVersion, messageId, protocolVersion, receiverApplicationId, responsibleAgencyCode, senderApplicationId, targetNamespace, timeFormat) { 
        obj['dateFormat'] = dateFormat;
        obj['headerVersion'] = headerVersion;
        obj['messageId'] = messageId;
        obj['protocolVersion'] = protocolVersion;
        obj['receiverApplicationId'] = receiverApplicationId;
        obj['responsibleAgencyCode'] = responsibleAgencyCode;
        obj['senderApplicationId'] = senderApplicationId;
        obj['targetNamespace'] = targetNamespace;
        obj['timeFormat'] = timeFormat;
    }

    /**
     * Constructs a <code>X12EnvelopeOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12EnvelopeOverride} obj Optional instance to populate.
     * @return {module:model/X12EnvelopeOverride} The populated <code>X12EnvelopeOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12EnvelopeOverride();

            if (data.hasOwnProperty('dateFormat')) {
                obj['dateFormat'] = X12DateFormat.constructFromObject(data['dateFormat']);
            }
            if (data.hasOwnProperty('functionalIdentifierCode')) {
                obj['functionalIdentifierCode'] = ApiClient.convertToType(data['functionalIdentifierCode'], 'String');
            }
            if (data.hasOwnProperty('headerVersion')) {
                obj['headerVersion'] = ApiClient.convertToType(data['headerVersion'], 'String');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('protocolVersion')) {
                obj['protocolVersion'] = ApiClient.convertToType(data['protocolVersion'], 'String');
            }
            if (data.hasOwnProperty('receiverApplicationId')) {
                obj['receiverApplicationId'] = ApiClient.convertToType(data['receiverApplicationId'], 'String');
            }
            if (data.hasOwnProperty('responsibleAgencyCode')) {
                obj['responsibleAgencyCode'] = ApiClient.convertToType(data['responsibleAgencyCode'], 'String');
            }
            if (data.hasOwnProperty('senderApplicationId')) {
                obj['senderApplicationId'] = ApiClient.convertToType(data['senderApplicationId'], 'String');
            }
            if (data.hasOwnProperty('targetNamespace')) {
                obj['targetNamespace'] = ApiClient.convertToType(data['targetNamespace'], 'String');
            }
            if (data.hasOwnProperty('timeFormat')) {
                obj['timeFormat'] = X12TimeFormat.constructFromObject(data['timeFormat']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12EnvelopeOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12EnvelopeOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of X12EnvelopeOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['functionalIdentifierCode'] && !(typeof data['functionalIdentifierCode'] === 'string' || data['functionalIdentifierCode'] instanceof String)) {
            throw new Error("Expected the field `functionalIdentifierCode` to be a primitive type in the JSON string but got " + data['functionalIdentifierCode']);
        }
        // ensure the json data is a string
        if (data['headerVersion'] && !(typeof data['headerVersion'] === 'string' || data['headerVersion'] instanceof String)) {
            throw new Error("Expected the field `headerVersion` to be a primitive type in the JSON string but got " + data['headerVersion']);
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }
        // ensure the json data is a string
        if (data['protocolVersion'] && !(typeof data['protocolVersion'] === 'string' || data['protocolVersion'] instanceof String)) {
            throw new Error("Expected the field `protocolVersion` to be a primitive type in the JSON string but got " + data['protocolVersion']);
        }
        // ensure the json data is a string
        if (data['receiverApplicationId'] && !(typeof data['receiverApplicationId'] === 'string' || data['receiverApplicationId'] instanceof String)) {
            throw new Error("Expected the field `receiverApplicationId` to be a primitive type in the JSON string but got " + data['receiverApplicationId']);
        }
        // ensure the json data is a string
        if (data['responsibleAgencyCode'] && !(typeof data['responsibleAgencyCode'] === 'string' || data['responsibleAgencyCode'] instanceof String)) {
            throw new Error("Expected the field `responsibleAgencyCode` to be a primitive type in the JSON string but got " + data['responsibleAgencyCode']);
        }
        // ensure the json data is a string
        if (data['senderApplicationId'] && !(typeof data['senderApplicationId'] === 'string' || data['senderApplicationId'] instanceof String)) {
            throw new Error("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got " + data['senderApplicationId']);
        }
        // ensure the json data is a string
        if (data['targetNamespace'] && !(typeof data['targetNamespace'] === 'string' || data['targetNamespace'] instanceof String)) {
            throw new Error("Expected the field `targetNamespace` to be a primitive type in the JSON string but got " + data['targetNamespace']);
        }

        return true;
    }


}

X12EnvelopeOverride.RequiredProperties = ["dateFormat", "headerVersion", "messageId", "protocolVersion", "receiverApplicationId", "responsibleAgencyCode", "senderApplicationId", "targetNamespace", "timeFormat"];

/**
 * @member {module:model/X12DateFormat} dateFormat
 */
X12EnvelopeOverride.prototype['dateFormat'] = undefined;

/**
 * The functional identifier code.
 * @member {String} functionalIdentifierCode
 */
X12EnvelopeOverride.prototype['functionalIdentifierCode'] = undefined;

/**
 * The header version.
 * @member {String} headerVersion
 */
X12EnvelopeOverride.prototype['headerVersion'] = undefined;

/**
 * The message id on which this envelope settings has to be applied.
 * @member {String} messageId
 */
X12EnvelopeOverride.prototype['messageId'] = undefined;

/**
 * The protocol version on which this envelope settings has to be applied.
 * @member {String} protocolVersion
 */
X12EnvelopeOverride.prototype['protocolVersion'] = undefined;

/**
 * The receiver application id.
 * @member {String} receiverApplicationId
 */
X12EnvelopeOverride.prototype['receiverApplicationId'] = undefined;

/**
 * The responsible agency code.
 * @member {String} responsibleAgencyCode
 */
X12EnvelopeOverride.prototype['responsibleAgencyCode'] = undefined;

/**
 * The sender application id.
 * @member {String} senderApplicationId
 */
X12EnvelopeOverride.prototype['senderApplicationId'] = undefined;

/**
 * The target namespace on which this envelope settings has to be applied.
 * @member {String} targetNamespace
 */
X12EnvelopeOverride.prototype['targetNamespace'] = undefined;

/**
 * @member {module:model/X12TimeFormat} timeFormat
 */
X12EnvelopeOverride.prototype['timeFormat'] = undefined;






export default X12EnvelopeOverride;

