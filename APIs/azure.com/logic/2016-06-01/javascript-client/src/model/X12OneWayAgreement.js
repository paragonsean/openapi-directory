/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BusinessIdentity from './BusinessIdentity';
import X12ProtocolSettings from './X12ProtocolSettings';

/**
 * The X12OneWayAgreement model module.
 * @module model/X12OneWayAgreement
 * @version 2016-06-01
 */
class X12OneWayAgreement {
    /**
     * Constructs a new <code>X12OneWayAgreement</code>.
     * The X12 one-way agreement.
     * @alias module:model/X12OneWayAgreement
     * @param protocolSettings {module:model/X12ProtocolSettings} 
     * @param receiverBusinessIdentity {module:model/BusinessIdentity} 
     * @param senderBusinessIdentity {module:model/BusinessIdentity} 
     */
    constructor(protocolSettings, receiverBusinessIdentity, senderBusinessIdentity) { 
        
        X12OneWayAgreement.initialize(this, protocolSettings, receiverBusinessIdentity, senderBusinessIdentity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, protocolSettings, receiverBusinessIdentity, senderBusinessIdentity) { 
        obj['protocolSettings'] = protocolSettings;
        obj['receiverBusinessIdentity'] = receiverBusinessIdentity;
        obj['senderBusinessIdentity'] = senderBusinessIdentity;
    }

    /**
     * Constructs a <code>X12OneWayAgreement</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12OneWayAgreement} obj Optional instance to populate.
     * @return {module:model/X12OneWayAgreement} The populated <code>X12OneWayAgreement</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12OneWayAgreement();

            if (data.hasOwnProperty('protocolSettings')) {
                obj['protocolSettings'] = X12ProtocolSettings.constructFromObject(data['protocolSettings']);
            }
            if (data.hasOwnProperty('receiverBusinessIdentity')) {
                obj['receiverBusinessIdentity'] = BusinessIdentity.constructFromObject(data['receiverBusinessIdentity']);
            }
            if (data.hasOwnProperty('senderBusinessIdentity')) {
                obj['senderBusinessIdentity'] = BusinessIdentity.constructFromObject(data['senderBusinessIdentity']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12OneWayAgreement</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12OneWayAgreement</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of X12OneWayAgreement.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `protocolSettings`
        if (data['protocolSettings']) { // data not null
          X12ProtocolSettings.validateJSON(data['protocolSettings']);
        }
        // validate the optional field `receiverBusinessIdentity`
        if (data['receiverBusinessIdentity']) { // data not null
          BusinessIdentity.validateJSON(data['receiverBusinessIdentity']);
        }
        // validate the optional field `senderBusinessIdentity`
        if (data['senderBusinessIdentity']) { // data not null
          BusinessIdentity.validateJSON(data['senderBusinessIdentity']);
        }

        return true;
    }


}

X12OneWayAgreement.RequiredProperties = ["protocolSettings", "receiverBusinessIdentity", "senderBusinessIdentity"];

/**
 * @member {module:model/X12ProtocolSettings} protocolSettings
 */
X12OneWayAgreement.prototype['protocolSettings'] = undefined;

/**
 * @member {module:model/BusinessIdentity} receiverBusinessIdentity
 */
X12OneWayAgreement.prototype['receiverBusinessIdentity'] = undefined;

/**
 * @member {module:model/BusinessIdentity} senderBusinessIdentity
 */
X12OneWayAgreement.prototype['senderBusinessIdentity'] = undefined;






export default X12OneWayAgreement;

