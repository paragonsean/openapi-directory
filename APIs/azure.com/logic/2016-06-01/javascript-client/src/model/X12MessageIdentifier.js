/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The X12MessageIdentifier model module.
 * @module model/X12MessageIdentifier
 * @version 2016-06-01
 */
class X12MessageIdentifier {
    /**
     * Constructs a new <code>X12MessageIdentifier</code>.
     * The X12 message identifier.
     * @alias module:model/X12MessageIdentifier
     * @param messageId {String} The message id.
     */
    constructor(messageId) { 
        
        X12MessageIdentifier.initialize(this, messageId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, messageId) { 
        obj['messageId'] = messageId;
    }

    /**
     * Constructs a <code>X12MessageIdentifier</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12MessageIdentifier} obj Optional instance to populate.
     * @return {module:model/X12MessageIdentifier} The populated <code>X12MessageIdentifier</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12MessageIdentifier();

            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12MessageIdentifier</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12MessageIdentifier</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of X12MessageIdentifier.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }

        return true;
    }


}

X12MessageIdentifier.RequiredProperties = ["messageId"];

/**
 * The message id.
 * @member {String} messageId
 */
X12MessageIdentifier.prototype['messageId'] = undefined;






export default X12MessageIdentifier;

