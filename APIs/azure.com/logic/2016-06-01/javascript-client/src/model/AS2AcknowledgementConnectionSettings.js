/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AS2AcknowledgementConnectionSettings model module.
 * @module model/AS2AcknowledgementConnectionSettings
 * @version 2016-06-01
 */
class AS2AcknowledgementConnectionSettings {
    /**
     * Constructs a new <code>AS2AcknowledgementConnectionSettings</code>.
     * The AS2 agreement acknowledgement connection settings.
     * @alias module:model/AS2AcknowledgementConnectionSettings
     * @param ignoreCertificateNameMismatch {Boolean} The value indicating whether to ignore mismatch in certificate name.
     * @param keepHttpConnectionAlive {Boolean} The value indicating whether to keep the connection alive.
     * @param supportHttpStatusCodeContinue {Boolean} The value indicating whether to support HTTP status code 'CONTINUE'.
     * @param unfoldHttpHeaders {Boolean} The value indicating whether to unfold the HTTP headers.
     */
    constructor(ignoreCertificateNameMismatch, keepHttpConnectionAlive, supportHttpStatusCodeContinue, unfoldHttpHeaders) { 
        
        AS2AcknowledgementConnectionSettings.initialize(this, ignoreCertificateNameMismatch, keepHttpConnectionAlive, supportHttpStatusCodeContinue, unfoldHttpHeaders);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, ignoreCertificateNameMismatch, keepHttpConnectionAlive, supportHttpStatusCodeContinue, unfoldHttpHeaders) { 
        obj['ignoreCertificateNameMismatch'] = ignoreCertificateNameMismatch;
        obj['keepHttpConnectionAlive'] = keepHttpConnectionAlive;
        obj['supportHttpStatusCodeContinue'] = supportHttpStatusCodeContinue;
        obj['unfoldHttpHeaders'] = unfoldHttpHeaders;
    }

    /**
     * Constructs a <code>AS2AcknowledgementConnectionSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AS2AcknowledgementConnectionSettings} obj Optional instance to populate.
     * @return {module:model/AS2AcknowledgementConnectionSettings} The populated <code>AS2AcknowledgementConnectionSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AS2AcknowledgementConnectionSettings();

            if (data.hasOwnProperty('ignoreCertificateNameMismatch')) {
                obj['ignoreCertificateNameMismatch'] = ApiClient.convertToType(data['ignoreCertificateNameMismatch'], 'Boolean');
            }
            if (data.hasOwnProperty('keepHttpConnectionAlive')) {
                obj['keepHttpConnectionAlive'] = ApiClient.convertToType(data['keepHttpConnectionAlive'], 'Boolean');
            }
            if (data.hasOwnProperty('supportHttpStatusCodeContinue')) {
                obj['supportHttpStatusCodeContinue'] = ApiClient.convertToType(data['supportHttpStatusCodeContinue'], 'Boolean');
            }
            if (data.hasOwnProperty('unfoldHttpHeaders')) {
                obj['unfoldHttpHeaders'] = ApiClient.convertToType(data['unfoldHttpHeaders'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AS2AcknowledgementConnectionSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AS2AcknowledgementConnectionSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AS2AcknowledgementConnectionSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

AS2AcknowledgementConnectionSettings.RequiredProperties = ["ignoreCertificateNameMismatch", "keepHttpConnectionAlive", "supportHttpStatusCodeContinue", "unfoldHttpHeaders"];

/**
 * The value indicating whether to ignore mismatch in certificate name.
 * @member {Boolean} ignoreCertificateNameMismatch
 */
AS2AcknowledgementConnectionSettings.prototype['ignoreCertificateNameMismatch'] = undefined;

/**
 * The value indicating whether to keep the connection alive.
 * @member {Boolean} keepHttpConnectionAlive
 */
AS2AcknowledgementConnectionSettings.prototype['keepHttpConnectionAlive'] = undefined;

/**
 * The value indicating whether to support HTTP status code 'CONTINUE'.
 * @member {Boolean} supportHttpStatusCodeContinue
 */
AS2AcknowledgementConnectionSettings.prototype['supportHttpStatusCodeContinue'] = undefined;

/**
 * The value indicating whether to unfold the HTTP headers.
 * @member {Boolean} unfoldHttpHeaders
 */
AS2AcknowledgementConnectionSettings.prototype['unfoldHttpHeaders'] = undefined;






export default AS2AcknowledgementConnectionSettings;

