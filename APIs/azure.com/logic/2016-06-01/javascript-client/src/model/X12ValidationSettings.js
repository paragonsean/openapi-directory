/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrailingSeparatorPolicy from './TrailingSeparatorPolicy';

/**
 * The X12ValidationSettings model module.
 * @module model/X12ValidationSettings
 * @version 2016-06-01
 */
class X12ValidationSettings {
    /**
     * Constructs a new <code>X12ValidationSettings</code>.
     * The X12 agreement validation settings.
     * @alias module:model/X12ValidationSettings
     * @param allowLeadingAndTrailingSpacesAndZeroes {Boolean} The value indicating whether to allow leading and trailing spaces and zeroes.
     * @param checkDuplicateGroupControlNumber {Boolean} The value indicating whether to check for duplicate group control number.
     * @param checkDuplicateInterchangeControlNumber {Boolean} The value indicating whether to check for duplicate interchange control number.
     * @param checkDuplicateTransactionSetControlNumber {Boolean} The value indicating whether to check for duplicate transaction set control number.
     * @param interchangeControlNumberValidityDays {Number} The validity period of interchange control number.
     * @param trailingSeparatorPolicy {module:model/TrailingSeparatorPolicy} 
     * @param trimLeadingAndTrailingSpacesAndZeroes {Boolean} The value indicating whether to trim leading and trailing spaces and zeroes.
     * @param validateCharacterSet {Boolean} The value indicating whether to validate character set in the message.
     * @param validateEdiTypes {Boolean} The value indicating whether to Whether to validate EDI types.
     * @param validateXsdTypes {Boolean} The value indicating whether to Whether to validate XSD types.
     */
    constructor(allowLeadingAndTrailingSpacesAndZeroes, checkDuplicateGroupControlNumber, checkDuplicateInterchangeControlNumber, checkDuplicateTransactionSetControlNumber, interchangeControlNumberValidityDays, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateCharacterSet, validateEdiTypes, validateXsdTypes) { 
        
        X12ValidationSettings.initialize(this, allowLeadingAndTrailingSpacesAndZeroes, checkDuplicateGroupControlNumber, checkDuplicateInterchangeControlNumber, checkDuplicateTransactionSetControlNumber, interchangeControlNumberValidityDays, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateCharacterSet, validateEdiTypes, validateXsdTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowLeadingAndTrailingSpacesAndZeroes, checkDuplicateGroupControlNumber, checkDuplicateInterchangeControlNumber, checkDuplicateTransactionSetControlNumber, interchangeControlNumberValidityDays, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateCharacterSet, validateEdiTypes, validateXsdTypes) { 
        obj['allowLeadingAndTrailingSpacesAndZeroes'] = allowLeadingAndTrailingSpacesAndZeroes;
        obj['checkDuplicateGroupControlNumber'] = checkDuplicateGroupControlNumber;
        obj['checkDuplicateInterchangeControlNumber'] = checkDuplicateInterchangeControlNumber;
        obj['checkDuplicateTransactionSetControlNumber'] = checkDuplicateTransactionSetControlNumber;
        obj['interchangeControlNumberValidityDays'] = interchangeControlNumberValidityDays;
        obj['trailingSeparatorPolicy'] = trailingSeparatorPolicy;
        obj['trimLeadingAndTrailingSpacesAndZeroes'] = trimLeadingAndTrailingSpacesAndZeroes;
        obj['validateCharacterSet'] = validateCharacterSet;
        obj['validateEdiTypes'] = validateEdiTypes;
        obj['validateXsdTypes'] = validateXsdTypes;
    }

    /**
     * Constructs a <code>X12ValidationSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/X12ValidationSettings} obj Optional instance to populate.
     * @return {module:model/X12ValidationSettings} The populated <code>X12ValidationSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new X12ValidationSettings();

            if (data.hasOwnProperty('allowLeadingAndTrailingSpacesAndZeroes')) {
                obj['allowLeadingAndTrailingSpacesAndZeroes'] = ApiClient.convertToType(data['allowLeadingAndTrailingSpacesAndZeroes'], 'Boolean');
            }
            if (data.hasOwnProperty('checkDuplicateGroupControlNumber')) {
                obj['checkDuplicateGroupControlNumber'] = ApiClient.convertToType(data['checkDuplicateGroupControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('checkDuplicateInterchangeControlNumber')) {
                obj['checkDuplicateInterchangeControlNumber'] = ApiClient.convertToType(data['checkDuplicateInterchangeControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('checkDuplicateTransactionSetControlNumber')) {
                obj['checkDuplicateTransactionSetControlNumber'] = ApiClient.convertToType(data['checkDuplicateTransactionSetControlNumber'], 'Boolean');
            }
            if (data.hasOwnProperty('interchangeControlNumberValidityDays')) {
                obj['interchangeControlNumberValidityDays'] = ApiClient.convertToType(data['interchangeControlNumberValidityDays'], 'Number');
            }
            if (data.hasOwnProperty('trailingSeparatorPolicy')) {
                obj['trailingSeparatorPolicy'] = TrailingSeparatorPolicy.constructFromObject(data['trailingSeparatorPolicy']);
            }
            if (data.hasOwnProperty('trimLeadingAndTrailingSpacesAndZeroes')) {
                obj['trimLeadingAndTrailingSpacesAndZeroes'] = ApiClient.convertToType(data['trimLeadingAndTrailingSpacesAndZeroes'], 'Boolean');
            }
            if (data.hasOwnProperty('validateCharacterSet')) {
                obj['validateCharacterSet'] = ApiClient.convertToType(data['validateCharacterSet'], 'Boolean');
            }
            if (data.hasOwnProperty('validateEdiTypes')) {
                obj['validateEdiTypes'] = ApiClient.convertToType(data['validateEdiTypes'], 'Boolean');
            }
            if (data.hasOwnProperty('validateXsdTypes')) {
                obj['validateXsdTypes'] = ApiClient.convertToType(data['validateXsdTypes'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>X12ValidationSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>X12ValidationSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of X12ValidationSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

X12ValidationSettings.RequiredProperties = ["allowLeadingAndTrailingSpacesAndZeroes", "checkDuplicateGroupControlNumber", "checkDuplicateInterchangeControlNumber", "checkDuplicateTransactionSetControlNumber", "interchangeControlNumberValidityDays", "trailingSeparatorPolicy", "trimLeadingAndTrailingSpacesAndZeroes", "validateCharacterSet", "validateEdiTypes", "validateXsdTypes"];

/**
 * The value indicating whether to allow leading and trailing spaces and zeroes.
 * @member {Boolean} allowLeadingAndTrailingSpacesAndZeroes
 */
X12ValidationSettings.prototype['allowLeadingAndTrailingSpacesAndZeroes'] = undefined;

/**
 * The value indicating whether to check for duplicate group control number.
 * @member {Boolean} checkDuplicateGroupControlNumber
 */
X12ValidationSettings.prototype['checkDuplicateGroupControlNumber'] = undefined;

/**
 * The value indicating whether to check for duplicate interchange control number.
 * @member {Boolean} checkDuplicateInterchangeControlNumber
 */
X12ValidationSettings.prototype['checkDuplicateInterchangeControlNumber'] = undefined;

/**
 * The value indicating whether to check for duplicate transaction set control number.
 * @member {Boolean} checkDuplicateTransactionSetControlNumber
 */
X12ValidationSettings.prototype['checkDuplicateTransactionSetControlNumber'] = undefined;

/**
 * The validity period of interchange control number.
 * @member {Number} interchangeControlNumberValidityDays
 */
X12ValidationSettings.prototype['interchangeControlNumberValidityDays'] = undefined;

/**
 * @member {module:model/TrailingSeparatorPolicy} trailingSeparatorPolicy
 */
X12ValidationSettings.prototype['trailingSeparatorPolicy'] = undefined;

/**
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {Boolean} trimLeadingAndTrailingSpacesAndZeroes
 */
X12ValidationSettings.prototype['trimLeadingAndTrailingSpacesAndZeroes'] = undefined;

/**
 * The value indicating whether to validate character set in the message.
 * @member {Boolean} validateCharacterSet
 */
X12ValidationSettings.prototype['validateCharacterSet'] = undefined;

/**
 * The value indicating whether to Whether to validate EDI types.
 * @member {Boolean} validateEdiTypes
 */
X12ValidationSettings.prototype['validateEdiTypes'] = undefined;

/**
 * The value indicating whether to Whether to validate XSD types.
 * @member {Boolean} validateXsdTypes
 */
X12ValidationSettings.prototype['validateXsdTypes'] = undefined;






export default X12ValidationSettings;

