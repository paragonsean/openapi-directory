/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import HashingAlgorithm from './HashingAlgorithm';

/**
 * The AS2MdnSettings model module.
 * @module model/AS2MdnSettings
 * @version 2016-06-01
 */
class AS2MdnSettings {
    /**
     * Constructs a new <code>AS2MdnSettings</code>.
     * The AS2 agreement mdn settings.
     * @alias module:model/AS2MdnSettings
     * @param micHashingAlgorithm {module:model/HashingAlgorithm} 
     * @param needMdn {Boolean} The value indicating whether to send or request a MDN.
     * @param sendInboundMdnToMessageBox {Boolean} The value indicating whether to send inbound MDN to message box.
     * @param sendMdnAsynchronously {Boolean} The value indicating whether to send the asynchronous MDN.
     * @param signMdn {Boolean} The value indicating whether the MDN needs to be signed or not.
     * @param signOutboundMdnIfOptional {Boolean} The value indicating whether to sign the outbound MDN if optional.
     */
    constructor(micHashingAlgorithm, needMdn, sendInboundMdnToMessageBox, sendMdnAsynchronously, signMdn, signOutboundMdnIfOptional) { 
        
        AS2MdnSettings.initialize(this, micHashingAlgorithm, needMdn, sendInboundMdnToMessageBox, sendMdnAsynchronously, signMdn, signOutboundMdnIfOptional);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, micHashingAlgorithm, needMdn, sendInboundMdnToMessageBox, sendMdnAsynchronously, signMdn, signOutboundMdnIfOptional) { 
        obj['micHashingAlgorithm'] = micHashingAlgorithm;
        obj['needMdn'] = needMdn;
        obj['sendInboundMdnToMessageBox'] = sendInboundMdnToMessageBox;
        obj['sendMdnAsynchronously'] = sendMdnAsynchronously;
        obj['signMdn'] = signMdn;
        obj['signOutboundMdnIfOptional'] = signOutboundMdnIfOptional;
    }

    /**
     * Constructs a <code>AS2MdnSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AS2MdnSettings} obj Optional instance to populate.
     * @return {module:model/AS2MdnSettings} The populated <code>AS2MdnSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AS2MdnSettings();

            if (data.hasOwnProperty('dispositionNotificationTo')) {
                obj['dispositionNotificationTo'] = ApiClient.convertToType(data['dispositionNotificationTo'], 'String');
            }
            if (data.hasOwnProperty('mdnText')) {
                obj['mdnText'] = ApiClient.convertToType(data['mdnText'], 'String');
            }
            if (data.hasOwnProperty('micHashingAlgorithm')) {
                obj['micHashingAlgorithm'] = HashingAlgorithm.constructFromObject(data['micHashingAlgorithm']);
            }
            if (data.hasOwnProperty('needMdn')) {
                obj['needMdn'] = ApiClient.convertToType(data['needMdn'], 'Boolean');
            }
            if (data.hasOwnProperty('receiptDeliveryUrl')) {
                obj['receiptDeliveryUrl'] = ApiClient.convertToType(data['receiptDeliveryUrl'], 'String');
            }
            if (data.hasOwnProperty('sendInboundMdnToMessageBox')) {
                obj['sendInboundMdnToMessageBox'] = ApiClient.convertToType(data['sendInboundMdnToMessageBox'], 'Boolean');
            }
            if (data.hasOwnProperty('sendMdnAsynchronously')) {
                obj['sendMdnAsynchronously'] = ApiClient.convertToType(data['sendMdnAsynchronously'], 'Boolean');
            }
            if (data.hasOwnProperty('signMdn')) {
                obj['signMdn'] = ApiClient.convertToType(data['signMdn'], 'Boolean');
            }
            if (data.hasOwnProperty('signOutboundMdnIfOptional')) {
                obj['signOutboundMdnIfOptional'] = ApiClient.convertToType(data['signOutboundMdnIfOptional'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AS2MdnSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AS2MdnSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AS2MdnSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dispositionNotificationTo'] && !(typeof data['dispositionNotificationTo'] === 'string' || data['dispositionNotificationTo'] instanceof String)) {
            throw new Error("Expected the field `dispositionNotificationTo` to be a primitive type in the JSON string but got " + data['dispositionNotificationTo']);
        }
        // ensure the json data is a string
        if (data['mdnText'] && !(typeof data['mdnText'] === 'string' || data['mdnText'] instanceof String)) {
            throw new Error("Expected the field `mdnText` to be a primitive type in the JSON string but got " + data['mdnText']);
        }
        // ensure the json data is a string
        if (data['receiptDeliveryUrl'] && !(typeof data['receiptDeliveryUrl'] === 'string' || data['receiptDeliveryUrl'] instanceof String)) {
            throw new Error("Expected the field `receiptDeliveryUrl` to be a primitive type in the JSON string but got " + data['receiptDeliveryUrl']);
        }

        return true;
    }


}

AS2MdnSettings.RequiredProperties = ["micHashingAlgorithm", "needMdn", "sendInboundMdnToMessageBox", "sendMdnAsynchronously", "signMdn", "signOutboundMdnIfOptional"];

/**
 * The disposition notification to header value.
 * @member {String} dispositionNotificationTo
 */
AS2MdnSettings.prototype['dispositionNotificationTo'] = undefined;

/**
 * The MDN text.
 * @member {String} mdnText
 */
AS2MdnSettings.prototype['mdnText'] = undefined;

/**
 * @member {module:model/HashingAlgorithm} micHashingAlgorithm
 */
AS2MdnSettings.prototype['micHashingAlgorithm'] = undefined;

/**
 * The value indicating whether to send or request a MDN.
 * @member {Boolean} needMdn
 */
AS2MdnSettings.prototype['needMdn'] = undefined;

/**
 * The receipt delivery URL.
 * @member {String} receiptDeliveryUrl
 */
AS2MdnSettings.prototype['receiptDeliveryUrl'] = undefined;

/**
 * The value indicating whether to send inbound MDN to message box.
 * @member {Boolean} sendInboundMdnToMessageBox
 */
AS2MdnSettings.prototype['sendInboundMdnToMessageBox'] = undefined;

/**
 * The value indicating whether to send the asynchronous MDN.
 * @member {Boolean} sendMdnAsynchronously
 */
AS2MdnSettings.prototype['sendMdnAsynchronously'] = undefined;

/**
 * The value indicating whether the MDN needs to be signed or not.
 * @member {Boolean} signMdn
 */
AS2MdnSettings.prototype['signMdn'] = undefined;

/**
 * The value indicating whether to sign the outbound MDN if optional.
 * @member {Boolean} signOutboundMdnIfOptional
 */
AS2MdnSettings.prototype['signOutboundMdnIfOptional'] = undefined;






export default AS2MdnSettings;

