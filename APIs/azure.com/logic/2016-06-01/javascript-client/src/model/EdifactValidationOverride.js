/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import TrailingSeparatorPolicy from './TrailingSeparatorPolicy';

/**
 * The EdifactValidationOverride model module.
 * @module model/EdifactValidationOverride
 * @version 2016-06-01
 */
class EdifactValidationOverride {
    /**
     * Constructs a new <code>EdifactValidationOverride</code>.
     * The Edifact validation override settings.
     * @alias module:model/EdifactValidationOverride
     * @param allowLeadingAndTrailingSpacesAndZeroes {Boolean} The value indicating whether to allow leading and trailing spaces and zeroes.
     * @param enforceCharacterSet {Boolean} The value indicating whether to validate character Set.
     * @param messageId {String} The message id on which the validation settings has to be applied.
     * @param trailingSeparatorPolicy {module:model/TrailingSeparatorPolicy} 
     * @param trimLeadingAndTrailingSpacesAndZeroes {Boolean} The value indicating whether to trim leading and trailing spaces and zeroes.
     * @param validateEdiTypes {Boolean} The value indicating whether to validate EDI types.
     * @param validateXsdTypes {Boolean} The value indicating whether to validate XSD types.
     */
    constructor(allowLeadingAndTrailingSpacesAndZeroes, enforceCharacterSet, messageId, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateEdiTypes, validateXsdTypes) { 
        
        EdifactValidationOverride.initialize(this, allowLeadingAndTrailingSpacesAndZeroes, enforceCharacterSet, messageId, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateEdiTypes, validateXsdTypes);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, allowLeadingAndTrailingSpacesAndZeroes, enforceCharacterSet, messageId, trailingSeparatorPolicy, trimLeadingAndTrailingSpacesAndZeroes, validateEdiTypes, validateXsdTypes) { 
        obj['allowLeadingAndTrailingSpacesAndZeroes'] = allowLeadingAndTrailingSpacesAndZeroes;
        obj['enforceCharacterSet'] = enforceCharacterSet;
        obj['messageId'] = messageId;
        obj['trailingSeparatorPolicy'] = trailingSeparatorPolicy;
        obj['trimLeadingAndTrailingSpacesAndZeroes'] = trimLeadingAndTrailingSpacesAndZeroes;
        obj['validateEdiTypes'] = validateEdiTypes;
        obj['validateXsdTypes'] = validateXsdTypes;
    }

    /**
     * Constructs a <code>EdifactValidationOverride</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EdifactValidationOverride} obj Optional instance to populate.
     * @return {module:model/EdifactValidationOverride} The populated <code>EdifactValidationOverride</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EdifactValidationOverride();

            if (data.hasOwnProperty('allowLeadingAndTrailingSpacesAndZeroes')) {
                obj['allowLeadingAndTrailingSpacesAndZeroes'] = ApiClient.convertToType(data['allowLeadingAndTrailingSpacesAndZeroes'], 'Boolean');
            }
            if (data.hasOwnProperty('enforceCharacterSet')) {
                obj['enforceCharacterSet'] = ApiClient.convertToType(data['enforceCharacterSet'], 'Boolean');
            }
            if (data.hasOwnProperty('messageId')) {
                obj['messageId'] = ApiClient.convertToType(data['messageId'], 'String');
            }
            if (data.hasOwnProperty('trailingSeparatorPolicy')) {
                obj['trailingSeparatorPolicy'] = TrailingSeparatorPolicy.constructFromObject(data['trailingSeparatorPolicy']);
            }
            if (data.hasOwnProperty('trimLeadingAndTrailingSpacesAndZeroes')) {
                obj['trimLeadingAndTrailingSpacesAndZeroes'] = ApiClient.convertToType(data['trimLeadingAndTrailingSpacesAndZeroes'], 'Boolean');
            }
            if (data.hasOwnProperty('validateEdiTypes')) {
                obj['validateEdiTypes'] = ApiClient.convertToType(data['validateEdiTypes'], 'Boolean');
            }
            if (data.hasOwnProperty('validateXsdTypes')) {
                obj['validateXsdTypes'] = ApiClient.convertToType(data['validateXsdTypes'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EdifactValidationOverride</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EdifactValidationOverride</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EdifactValidationOverride.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['messageId'] && !(typeof data['messageId'] === 'string' || data['messageId'] instanceof String)) {
            throw new Error("Expected the field `messageId` to be a primitive type in the JSON string but got " + data['messageId']);
        }

        return true;
    }


}

EdifactValidationOverride.RequiredProperties = ["allowLeadingAndTrailingSpacesAndZeroes", "enforceCharacterSet", "messageId", "trailingSeparatorPolicy", "trimLeadingAndTrailingSpacesAndZeroes", "validateEdiTypes", "validateXsdTypes"];

/**
 * The value indicating whether to allow leading and trailing spaces and zeroes.
 * @member {Boolean} allowLeadingAndTrailingSpacesAndZeroes
 */
EdifactValidationOverride.prototype['allowLeadingAndTrailingSpacesAndZeroes'] = undefined;

/**
 * The value indicating whether to validate character Set.
 * @member {Boolean} enforceCharacterSet
 */
EdifactValidationOverride.prototype['enforceCharacterSet'] = undefined;

/**
 * The message id on which the validation settings has to be applied.
 * @member {String} messageId
 */
EdifactValidationOverride.prototype['messageId'] = undefined;

/**
 * @member {module:model/TrailingSeparatorPolicy} trailingSeparatorPolicy
 */
EdifactValidationOverride.prototype['trailingSeparatorPolicy'] = undefined;

/**
 * The value indicating whether to trim leading and trailing spaces and zeroes.
 * @member {Boolean} trimLeadingAndTrailingSpacesAndZeroes
 */
EdifactValidationOverride.prototype['trimLeadingAndTrailingSpacesAndZeroes'] = undefined;

/**
 * The value indicating whether to validate EDI types.
 * @member {Boolean} validateEdiTypes
 */
EdifactValidationOverride.prototype['validateEdiTypes'] = undefined;

/**
 * The value indicating whether to validate XSD types.
 * @member {Boolean} validateXsdTypes
 */
EdifactValidationOverride.prototype['validateXsdTypes'] = undefined;






export default EdifactValidationOverride;

