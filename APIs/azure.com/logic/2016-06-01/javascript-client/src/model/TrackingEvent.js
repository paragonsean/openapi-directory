/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EventLevel from './EventLevel';
import TrackingEventErrorInfo from './TrackingEventErrorInfo';
import TrackingRecordType from './TrackingRecordType';

/**
 * The TrackingEvent model module.
 * @module model/TrackingEvent
 * @version 2016-06-01
 */
class TrackingEvent {
    /**
     * Constructs a new <code>TrackingEvent</code>.
     * @alias module:model/TrackingEvent
     * @param eventLevel {module:model/EventLevel} 
     * @param eventTime {Date} 
     * @param recordType {module:model/TrackingRecordType} 
     */
    constructor(eventLevel, eventTime, recordType) { 
        
        TrackingEvent.initialize(this, eventLevel, eventTime, recordType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, eventLevel, eventTime, recordType) { 
        obj['eventLevel'] = eventLevel;
        obj['eventTime'] = eventTime;
        obj['recordType'] = recordType;
    }

    /**
     * Constructs a <code>TrackingEvent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TrackingEvent} obj Optional instance to populate.
     * @return {module:model/TrackingEvent} The populated <code>TrackingEvent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TrackingEvent();

            if (data.hasOwnProperty('error')) {
                obj['error'] = TrackingEventErrorInfo.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('eventLevel')) {
                obj['eventLevel'] = EventLevel.constructFromObject(data['eventLevel']);
            }
            if (data.hasOwnProperty('eventTime')) {
                obj['eventTime'] = ApiClient.convertToType(data['eventTime'], 'Date');
            }
            if (data.hasOwnProperty('recordType')) {
                obj['recordType'] = TrackingRecordType.constructFromObject(data['recordType']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TrackingEvent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TrackingEvent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TrackingEvent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          TrackingEventErrorInfo.validateJSON(data['error']);
        }

        return true;
    }


}

TrackingEvent.RequiredProperties = ["eventLevel", "eventTime", "recordType"];

/**
 * @member {module:model/TrackingEventErrorInfo} error
 */
TrackingEvent.prototype['error'] = undefined;

/**
 * @member {module:model/EventLevel} eventLevel
 */
TrackingEvent.prototype['eventLevel'] = undefined;

/**
 * @member {Date} eventTime
 */
TrackingEvent.prototype['eventTime'] = undefined;

/**
 * @member {module:model/TrackingRecordType} recordType
 */
TrackingEvent.prototype['recordType'] = undefined;






export default TrackingEvent;

