/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ParameterType from './ParameterType';

/**
 * The WorkflowParameter model module.
 * @module model/WorkflowParameter
 * @version 2016-06-01
 */
class WorkflowParameter {
    /**
     * Constructs a new <code>WorkflowParameter</code>.
     * The workflow parameters.
     * @alias module:model/WorkflowParameter
     */
    constructor() { 
        
        WorkflowParameter.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>WorkflowParameter</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/WorkflowParameter} obj Optional instance to populate.
     * @return {module:model/WorkflowParameter} The populated <code>WorkflowParameter</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new WorkflowParameter();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ParameterType.constructFromObject(data['type']);
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>WorkflowParameter</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>WorkflowParameter</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}



/**
 * The description.
 * @member {String} description
 */
WorkflowParameter.prototype['description'] = undefined;

/**
 * @member {Object} metadata
 */
WorkflowParameter.prototype['metadata'] = undefined;

/**
 * @member {module:model/ParameterType} type
 */
WorkflowParameter.prototype['type'] = undefined;

/**
 * @member {Object} value
 */
WorkflowParameter.prototype['value'] = undefined;






export default WorkflowParameter;

