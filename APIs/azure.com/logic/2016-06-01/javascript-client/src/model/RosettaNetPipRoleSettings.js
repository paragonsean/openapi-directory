/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import RosettaNetPipBusinessDocument from './RosettaNetPipBusinessDocument';
import RosettaNetPipRoleType from './RosettaNetPipRoleType';

/**
 * The RosettaNetPipRoleSettings model module.
 * @module model/RosettaNetPipRoleSettings
 * @version 2016-06-01
 */
class RosettaNetPipRoleSettings {
    /**
     * Constructs a new <code>RosettaNetPipRoleSettings</code>.
     * The integration account RosettaNet ProcessConfiguration role settings.
     * @alias module:model/RosettaNetPipRoleSettings
     * @param action {String} The action name.
     * @param businessDocument {module:model/RosettaNetPipBusinessDocument} 
     * @param role {String} The role name.
     * @param roleType {module:model/RosettaNetPipRoleType} 
     * @param service {String} The service name.
     * @param serviceClassification {String} The service classification name.
     */
    constructor(action, businessDocument, role, roleType, service, serviceClassification) { 
        
        RosettaNetPipRoleSettings.initialize(this, action, businessDocument, role, roleType, service, serviceClassification);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, action, businessDocument, role, roleType, service, serviceClassification) { 
        obj['action'] = action;
        obj['businessDocument'] = businessDocument;
        obj['role'] = role;
        obj['roleType'] = roleType;
        obj['service'] = service;
        obj['serviceClassification'] = serviceClassification;
    }

    /**
     * Constructs a <code>RosettaNetPipRoleSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RosettaNetPipRoleSettings} obj Optional instance to populate.
     * @return {module:model/RosettaNetPipRoleSettings} The populated <code>RosettaNetPipRoleSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RosettaNetPipRoleSettings();

            if (data.hasOwnProperty('action')) {
                obj['action'] = ApiClient.convertToType(data['action'], 'String');
            }
            if (data.hasOwnProperty('businessDocument')) {
                obj['businessDocument'] = RosettaNetPipBusinessDocument.constructFromObject(data['businessDocument']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('roleType')) {
                obj['roleType'] = RosettaNetPipRoleType.constructFromObject(data['roleType']);
            }
            if (data.hasOwnProperty('service')) {
                obj['service'] = ApiClient.convertToType(data['service'], 'String');
            }
            if (data.hasOwnProperty('serviceClassification')) {
                obj['serviceClassification'] = ApiClient.convertToType(data['serviceClassification'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RosettaNetPipRoleSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RosettaNetPipRoleSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of RosettaNetPipRoleSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['action'] && !(typeof data['action'] === 'string' || data['action'] instanceof String)) {
            throw new Error("Expected the field `action` to be a primitive type in the JSON string but got " + data['action']);
        }
        // validate the optional field `businessDocument`
        if (data['businessDocument']) { // data not null
          RosettaNetPipBusinessDocument.validateJSON(data['businessDocument']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['service'] && !(typeof data['service'] === 'string' || data['service'] instanceof String)) {
            throw new Error("Expected the field `service` to be a primitive type in the JSON string but got " + data['service']);
        }
        // ensure the json data is a string
        if (data['serviceClassification'] && !(typeof data['serviceClassification'] === 'string' || data['serviceClassification'] instanceof String)) {
            throw new Error("Expected the field `serviceClassification` to be a primitive type in the JSON string but got " + data['serviceClassification']);
        }

        return true;
    }


}

RosettaNetPipRoleSettings.RequiredProperties = ["action", "businessDocument", "role", "roleType", "service", "serviceClassification"];

/**
 * The action name.
 * @member {String} action
 */
RosettaNetPipRoleSettings.prototype['action'] = undefined;

/**
 * @member {module:model/RosettaNetPipBusinessDocument} businessDocument
 */
RosettaNetPipRoleSettings.prototype['businessDocument'] = undefined;

/**
 * The description.
 * @member {String} description
 */
RosettaNetPipRoleSettings.prototype['description'] = undefined;

/**
 * The role name.
 * @member {String} role
 */
RosettaNetPipRoleSettings.prototype['role'] = undefined;

/**
 * @member {module:model/RosettaNetPipRoleType} roleType
 */
RosettaNetPipRoleSettings.prototype['roleType'] = undefined;

/**
 * The service name.
 * @member {String} service
 */
RosettaNetPipRoleSettings.prototype['service'] = undefined;

/**
 * The service classification name.
 * @member {String} serviceClassification
 */
RosettaNetPipRoleSettings.prototype['serviceClassification'] = undefined;






export default RosettaNetPipRoleSettings;

