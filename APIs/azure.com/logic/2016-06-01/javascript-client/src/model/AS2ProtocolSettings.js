/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AS2AcknowledgementConnectionSettings from './AS2AcknowledgementConnectionSettings';
import AS2EnvelopeSettings from './AS2EnvelopeSettings';
import AS2ErrorSettings from './AS2ErrorSettings';
import AS2MdnSettings from './AS2MdnSettings';
import AS2MessageConnectionSettings from './AS2MessageConnectionSettings';
import AS2SecuritySettings from './AS2SecuritySettings';
import AS2ValidationSettings from './AS2ValidationSettings';

/**
 * The AS2ProtocolSettings model module.
 * @module model/AS2ProtocolSettings
 * @version 2016-06-01
 */
class AS2ProtocolSettings {
    /**
     * Constructs a new <code>AS2ProtocolSettings</code>.
     * The AS2 agreement protocol settings.
     * @alias module:model/AS2ProtocolSettings
     * @param acknowledgementConnectionSettings {module:model/AS2AcknowledgementConnectionSettings} 
     * @param envelopeSettings {module:model/AS2EnvelopeSettings} 
     * @param errorSettings {module:model/AS2ErrorSettings} 
     * @param mdnSettings {module:model/AS2MdnSettings} 
     * @param messageConnectionSettings {module:model/AS2MessageConnectionSettings} 
     * @param securitySettings {module:model/AS2SecuritySettings} 
     * @param validationSettings {module:model/AS2ValidationSettings} 
     */
    constructor(acknowledgementConnectionSettings, envelopeSettings, errorSettings, mdnSettings, messageConnectionSettings, securitySettings, validationSettings) { 
        
        AS2ProtocolSettings.initialize(this, acknowledgementConnectionSettings, envelopeSettings, errorSettings, mdnSettings, messageConnectionSettings, securitySettings, validationSettings);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, acknowledgementConnectionSettings, envelopeSettings, errorSettings, mdnSettings, messageConnectionSettings, securitySettings, validationSettings) { 
        obj['acknowledgementConnectionSettings'] = acknowledgementConnectionSettings;
        obj['envelopeSettings'] = envelopeSettings;
        obj['errorSettings'] = errorSettings;
        obj['mdnSettings'] = mdnSettings;
        obj['messageConnectionSettings'] = messageConnectionSettings;
        obj['securitySettings'] = securitySettings;
        obj['validationSettings'] = validationSettings;
    }

    /**
     * Constructs a <code>AS2ProtocolSettings</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AS2ProtocolSettings} obj Optional instance to populate.
     * @return {module:model/AS2ProtocolSettings} The populated <code>AS2ProtocolSettings</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AS2ProtocolSettings();

            if (data.hasOwnProperty('acknowledgementConnectionSettings')) {
                obj['acknowledgementConnectionSettings'] = AS2AcknowledgementConnectionSettings.constructFromObject(data['acknowledgementConnectionSettings']);
            }
            if (data.hasOwnProperty('envelopeSettings')) {
                obj['envelopeSettings'] = AS2EnvelopeSettings.constructFromObject(data['envelopeSettings']);
            }
            if (data.hasOwnProperty('errorSettings')) {
                obj['errorSettings'] = AS2ErrorSettings.constructFromObject(data['errorSettings']);
            }
            if (data.hasOwnProperty('mdnSettings')) {
                obj['mdnSettings'] = AS2MdnSettings.constructFromObject(data['mdnSettings']);
            }
            if (data.hasOwnProperty('messageConnectionSettings')) {
                obj['messageConnectionSettings'] = AS2MessageConnectionSettings.constructFromObject(data['messageConnectionSettings']);
            }
            if (data.hasOwnProperty('securitySettings')) {
                obj['securitySettings'] = AS2SecuritySettings.constructFromObject(data['securitySettings']);
            }
            if (data.hasOwnProperty('validationSettings')) {
                obj['validationSettings'] = AS2ValidationSettings.constructFromObject(data['validationSettings']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AS2ProtocolSettings</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AS2ProtocolSettings</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AS2ProtocolSettings.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `acknowledgementConnectionSettings`
        if (data['acknowledgementConnectionSettings']) { // data not null
          AS2AcknowledgementConnectionSettings.validateJSON(data['acknowledgementConnectionSettings']);
        }
        // validate the optional field `envelopeSettings`
        if (data['envelopeSettings']) { // data not null
          AS2EnvelopeSettings.validateJSON(data['envelopeSettings']);
        }
        // validate the optional field `errorSettings`
        if (data['errorSettings']) { // data not null
          AS2ErrorSettings.validateJSON(data['errorSettings']);
        }
        // validate the optional field `mdnSettings`
        if (data['mdnSettings']) { // data not null
          AS2MdnSettings.validateJSON(data['mdnSettings']);
        }
        // validate the optional field `messageConnectionSettings`
        if (data['messageConnectionSettings']) { // data not null
          AS2MessageConnectionSettings.validateJSON(data['messageConnectionSettings']);
        }
        // validate the optional field `securitySettings`
        if (data['securitySettings']) { // data not null
          AS2SecuritySettings.validateJSON(data['securitySettings']);
        }
        // validate the optional field `validationSettings`
        if (data['validationSettings']) { // data not null
          AS2ValidationSettings.validateJSON(data['validationSettings']);
        }

        return true;
    }


}

AS2ProtocolSettings.RequiredProperties = ["acknowledgementConnectionSettings", "envelopeSettings", "errorSettings", "mdnSettings", "messageConnectionSettings", "securitySettings", "validationSettings"];

/**
 * @member {module:model/AS2AcknowledgementConnectionSettings} acknowledgementConnectionSettings
 */
AS2ProtocolSettings.prototype['acknowledgementConnectionSettings'] = undefined;

/**
 * @member {module:model/AS2EnvelopeSettings} envelopeSettings
 */
AS2ProtocolSettings.prototype['envelopeSettings'] = undefined;

/**
 * @member {module:model/AS2ErrorSettings} errorSettings
 */
AS2ProtocolSettings.prototype['errorSettings'] = undefined;

/**
 * @member {module:model/AS2MdnSettings} mdnSettings
 */
AS2ProtocolSettings.prototype['mdnSettings'] = undefined;

/**
 * @member {module:model/AS2MessageConnectionSettings} messageConnectionSettings
 */
AS2ProtocolSettings.prototype['messageConnectionSettings'] = undefined;

/**
 * @member {module:model/AS2SecuritySettings} securitySettings
 */
AS2ProtocolSettings.prototype['securitySettings'] = undefined;

/**
 * @member {module:model/AS2ValidationSettings} validationSettings
 */
AS2ProtocolSettings.prototype['validationSettings'] = undefined;






export default AS2ProtocolSettings;

