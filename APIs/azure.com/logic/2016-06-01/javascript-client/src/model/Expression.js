/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AzureResourceErrorInfo from './AzureResourceErrorInfo';

/**
 * The Expression model module.
 * @module model/Expression
 * @version 2016-06-01
 */
class Expression {
    /**
     * Constructs a new <code>Expression</code>.
     * @alias module:model/Expression
     */
    constructor() { 
        
        Expression.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Expression</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Expression} obj Optional instance to populate.
     * @return {module:model/Expression} The populated <code>Expression</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Expression();

            if (data.hasOwnProperty('error')) {
                obj['error'] = AzureResourceErrorInfo.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('subexpressions')) {
                obj['subexpressions'] = ApiClient.convertToType(data['subexpressions'], [Expression]);
            }
            if (data.hasOwnProperty('text')) {
                obj['text'] = ApiClient.convertToType(data['text'], 'String');
            }
            if (data.hasOwnProperty('value')) {
                obj['value'] = ApiClient.convertToType(data['value'], Object);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Expression</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Expression</code>.
     */
    static validateJSON(data) {
        // validate the optional field `error`
        if (data['error']) { // data not null
          AzureResourceErrorInfo.validateJSON(data['error']);
        }
        if (data['subexpressions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['subexpressions'])) {
                throw new Error("Expected the field `subexpressions` to be an array in the JSON data but got " + data['subexpressions']);
            }
            // validate the optional field `subexpressions` (array)
            for (const item of data['subexpressions']) {
                Expression.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['text'] && !(typeof data['text'] === 'string' || data['text'] instanceof String)) {
            throw new Error("Expected the field `text` to be a primitive type in the JSON string but got " + data['text']);
        }

        return true;
    }


}



/**
 * @member {module:model/AzureResourceErrorInfo} error
 */
Expression.prototype['error'] = undefined;

/**
 * @member {Array.<module:model/Expression>} subexpressions
 */
Expression.prototype['subexpressions'] = undefined;

/**
 * @member {String} text
 */
Expression.prototype['text'] = undefined;

/**
 * @member {Object} value
 */
Expression.prototype['value'] = undefined;






export default Expression;

