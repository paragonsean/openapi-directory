/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.LogicManagementClient);
  }
}(this, function(expect, LogicManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new LogicManagementClient.WorkflowsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('WorkflowsApi', function() {
    describe('workflowsCreateOrUpdate', function() {
      it('should call workflowsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test workflowsCreateOrUpdate
        //instance.workflowsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsDelete', function() {
      it('should call workflowsDelete successfully', function(done) {
        //uncomment below and update the code to test workflowsDelete
        //instance.workflowsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsDisable', function() {
      it('should call workflowsDisable successfully', function(done) {
        //uncomment below and update the code to test workflowsDisable
        //instance.workflowsDisable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsEnable', function() {
      it('should call workflowsEnable successfully', function(done) {
        //uncomment below and update the code to test workflowsEnable
        //instance.workflowsEnable(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsGenerateUpgradedDefinition', function() {
      it('should call workflowsGenerateUpgradedDefinition successfully', function(done) {
        //uncomment below and update the code to test workflowsGenerateUpgradedDefinition
        //instance.workflowsGenerateUpgradedDefinition(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsGet', function() {
      it('should call workflowsGet successfully', function(done) {
        //uncomment below and update the code to test workflowsGet
        //instance.workflowsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsListByResourceGroup', function() {
      it('should call workflowsListByResourceGroup successfully', function(done) {
        //uncomment below and update the code to test workflowsListByResourceGroup
        //instance.workflowsListByResourceGroup(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsListBySubscription', function() {
      it('should call workflowsListBySubscription successfully', function(done) {
        //uncomment below and update the code to test workflowsListBySubscription
        //instance.workflowsListBySubscription(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsListCallbackUrl', function() {
      it('should call workflowsListCallbackUrl successfully', function(done) {
        //uncomment below and update the code to test workflowsListCallbackUrl
        //instance.workflowsListCallbackUrl(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsListSwagger', function() {
      it('should call workflowsListSwagger successfully', function(done) {
        //uncomment below and update the code to test workflowsListSwagger
        //instance.workflowsListSwagger(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsMove', function() {
      it('should call workflowsMove successfully', function(done) {
        //uncomment below and update the code to test workflowsMove
        //instance.workflowsMove(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsRegenerateAccessKey', function() {
      it('should call workflowsRegenerateAccessKey successfully', function(done) {
        //uncomment below and update the code to test workflowsRegenerateAccessKey
        //instance.workflowsRegenerateAccessKey(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsUpdate', function() {
      it('should call workflowsUpdate successfully', function(done) {
        //uncomment below and update the code to test workflowsUpdate
        //instance.workflowsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsValidate', function() {
      it('should call workflowsValidate successfully', function(done) {
        //uncomment below and update the code to test workflowsValidate
        //instance.workflowsValidate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('workflowsValidateWorkflow', function() {
      it('should call workflowsValidateWorkflow successfully', function(done) {
        //uncomment below and update the code to test workflowsValidateWorkflow
        //instance.workflowsValidateWorkflow(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
