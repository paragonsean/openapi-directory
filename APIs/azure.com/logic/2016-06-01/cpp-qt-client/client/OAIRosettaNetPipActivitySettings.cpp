/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRosettaNetPipActivitySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRosettaNetPipActivitySettings::OAIRosettaNetPipActivitySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRosettaNetPipActivitySettings::OAIRosettaNetPipActivitySettings() {
    this->initializeModel();
}

OAIRosettaNetPipActivitySettings::~OAIRosettaNetPipActivitySettings() {}

void OAIRosettaNetPipActivitySettings::initializeModel() {

    m_acknowledgment_of_receipt_settings_isSet = false;
    m_acknowledgment_of_receipt_settings_isValid = false;

    m_activity_behavior_isSet = false;
    m_activity_behavior_isValid = false;

    m_activity_type_isSet = false;
    m_activity_type_isValid = false;
}

void OAIRosettaNetPipActivitySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRosettaNetPipActivitySettings::fromJsonObject(QJsonObject json) {

    m_acknowledgment_of_receipt_settings_isValid = ::OpenAPI::fromJsonValue(m_acknowledgment_of_receipt_settings, json[QString("acknowledgmentOfReceiptSettings")]);
    m_acknowledgment_of_receipt_settings_isSet = !json[QString("acknowledgmentOfReceiptSettings")].isNull() && m_acknowledgment_of_receipt_settings_isValid;

    m_activity_behavior_isValid = ::OpenAPI::fromJsonValue(m_activity_behavior, json[QString("activityBehavior")]);
    m_activity_behavior_isSet = !json[QString("activityBehavior")].isNull() && m_activity_behavior_isValid;

    m_activity_type_isValid = ::OpenAPI::fromJsonValue(m_activity_type, json[QString("activityType")]);
    m_activity_type_isSet = !json[QString("activityType")].isNull() && m_activity_type_isValid;
}

QString OAIRosettaNetPipActivitySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRosettaNetPipActivitySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgment_of_receipt_settings.isSet()) {
        obj.insert(QString("acknowledgmentOfReceiptSettings"), ::OpenAPI::toJsonValue(m_acknowledgment_of_receipt_settings));
    }
    if (m_activity_behavior.isSet()) {
        obj.insert(QString("activityBehavior"), ::OpenAPI::toJsonValue(m_activity_behavior));
    }
    if (m_activity_type.isSet()) {
        obj.insert(QString("activityType"), ::OpenAPI::toJsonValue(m_activity_type));
    }
    return obj;
}

OAIRosettaNetPipAcknowledgmentOfReceiptSettings OAIRosettaNetPipActivitySettings::getAcknowledgmentOfReceiptSettings() const {
    return m_acknowledgment_of_receipt_settings;
}
void OAIRosettaNetPipActivitySettings::setAcknowledgmentOfReceiptSettings(const OAIRosettaNetPipAcknowledgmentOfReceiptSettings &acknowledgment_of_receipt_settings) {
    m_acknowledgment_of_receipt_settings = acknowledgment_of_receipt_settings;
    m_acknowledgment_of_receipt_settings_isSet = true;
}

bool OAIRosettaNetPipActivitySettings::is_acknowledgment_of_receipt_settings_Set() const{
    return m_acknowledgment_of_receipt_settings_isSet;
}

bool OAIRosettaNetPipActivitySettings::is_acknowledgment_of_receipt_settings_Valid() const{
    return m_acknowledgment_of_receipt_settings_isValid;
}

OAIRosettaNetPipActivityBehavior OAIRosettaNetPipActivitySettings::getActivityBehavior() const {
    return m_activity_behavior;
}
void OAIRosettaNetPipActivitySettings::setActivityBehavior(const OAIRosettaNetPipActivityBehavior &activity_behavior) {
    m_activity_behavior = activity_behavior;
    m_activity_behavior_isSet = true;
}

bool OAIRosettaNetPipActivitySettings::is_activity_behavior_Set() const{
    return m_activity_behavior_isSet;
}

bool OAIRosettaNetPipActivitySettings::is_activity_behavior_Valid() const{
    return m_activity_behavior_isValid;
}

OAIRosettaNetPipActivityType OAIRosettaNetPipActivitySettings::getActivityType() const {
    return m_activity_type;
}
void OAIRosettaNetPipActivitySettings::setActivityType(const OAIRosettaNetPipActivityType &activity_type) {
    m_activity_type = activity_type;
    m_activity_type_isSet = true;
}

bool OAIRosettaNetPipActivitySettings::is_activity_type_Set() const{
    return m_activity_type_isSet;
}

bool OAIRosettaNetPipActivitySettings::is_activity_type_Valid() const{
    return m_activity_type_isValid;
}

bool OAIRosettaNetPipActivitySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgment_of_receipt_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_behavior.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRosettaNetPipActivitySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acknowledgment_of_receipt_settings_isValid && m_activity_behavior_isValid && m_activity_type_isValid && true;
}

} // namespace OpenAPI
