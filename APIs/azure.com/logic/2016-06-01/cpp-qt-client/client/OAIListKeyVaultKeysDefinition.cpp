/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIListKeyVaultKeysDefinition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIListKeyVaultKeysDefinition::OAIListKeyVaultKeysDefinition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIListKeyVaultKeysDefinition::OAIListKeyVaultKeysDefinition() {
    this->initializeModel();
}

OAIListKeyVaultKeysDefinition::~OAIListKeyVaultKeysDefinition() {}

void OAIListKeyVaultKeysDefinition::initializeModel() {

    m_key_vault_isSet = false;
    m_key_vault_isValid = false;

    m_skip_token_isSet = false;
    m_skip_token_isValid = false;
}

void OAIListKeyVaultKeysDefinition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIListKeyVaultKeysDefinition::fromJsonObject(QJsonObject json) {

    m_key_vault_isValid = ::OpenAPI::fromJsonValue(m_key_vault, json[QString("keyVault")]);
    m_key_vault_isSet = !json[QString("keyVault")].isNull() && m_key_vault_isValid;

    m_skip_token_isValid = ::OpenAPI::fromJsonValue(m_skip_token, json[QString("skipToken")]);
    m_skip_token_isSet = !json[QString("skipToken")].isNull() && m_skip_token_isValid;
}

QString OAIListKeyVaultKeysDefinition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIListKeyVaultKeysDefinition::asJsonObject() const {
    QJsonObject obj;
    if (m_key_vault.isSet()) {
        obj.insert(QString("keyVault"), ::OpenAPI::toJsonValue(m_key_vault));
    }
    if (m_skip_token_isSet) {
        obj.insert(QString("skipToken"), ::OpenAPI::toJsonValue(m_skip_token));
    }
    return obj;
}

OAIKeyVaultReference OAIListKeyVaultKeysDefinition::getKeyVault() const {
    return m_key_vault;
}
void OAIListKeyVaultKeysDefinition::setKeyVault(const OAIKeyVaultReference &key_vault) {
    m_key_vault = key_vault;
    m_key_vault_isSet = true;
}

bool OAIListKeyVaultKeysDefinition::is_key_vault_Set() const{
    return m_key_vault_isSet;
}

bool OAIListKeyVaultKeysDefinition::is_key_vault_Valid() const{
    return m_key_vault_isValid;
}

QString OAIListKeyVaultKeysDefinition::getSkipToken() const {
    return m_skip_token;
}
void OAIListKeyVaultKeysDefinition::setSkipToken(const QString &skip_token) {
    m_skip_token = skip_token;
    m_skip_token_isSet = true;
}

bool OAIListKeyVaultKeysDefinition::is_skip_token_Set() const{
    return m_skip_token_isSet;
}

bool OAIListKeyVaultKeysDefinition::is_skip_token_Valid() const{
    return m_skip_token_isValid;
}

bool OAIListKeyVaultKeysDefinition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_key_vault.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIListKeyVaultKeysDefinition::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_key_vault_isValid && true;
}

} // namespace OpenAPI
