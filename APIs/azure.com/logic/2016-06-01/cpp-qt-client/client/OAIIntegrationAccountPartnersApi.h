/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationAccountPartnersApi_H
#define OAI_OAIIntegrationAccountPartnersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetCallbackUrlParameters.h"
#include "OAIIntegrationAccountPartner.h"
#include "OAIIntegrationAccountPartnerListResult.h"
#include "OAIWorkflowTriggerCallbackUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationAccountPartnersApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationAccountPartnersApi(const int timeOut = 0);
    ~OAIIntegrationAccountPartnersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  partner OAIIntegrationAccountPartner [required]
    */
    virtual void partnersCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &partner_name, const QString &api_version, const OAIIntegrationAccountPartner &partner);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void partnersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &partner_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void partnersGet(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &partner_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void partnersListByIntegrationAccounts(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  partner_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  list_content_callback_url OAIGetCallbackUrlParameters [required]
    */
    virtual void partnersListContentCallbackUrl(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &partner_name, const QString &api_version, const OAIGetCallbackUrlParameters &list_content_callback_url);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void partnersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void partnersDeleteCallback(OAIHttpRequestWorker *worker);
    void partnersGetCallback(OAIHttpRequestWorker *worker);
    void partnersListByIntegrationAccountsCallback(OAIHttpRequestWorker *worker);
    void partnersListContentCallbackUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void partnersCreateOrUpdateSignal(OAIIntegrationAccountPartner summary);
    void partnersDeleteSignal();
    void partnersGetSignal(OAIIntegrationAccountPartner summary);
    void partnersListByIntegrationAccountsSignal(OAIIntegrationAccountPartnerListResult summary);
    void partnersListContentCallbackUrlSignal(OAIWorkflowTriggerCallbackUrl summary);


    void partnersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountPartner summary);
    void partnersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void partnersGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountPartner summary);
    void partnersListByIntegrationAccountsSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountPartnerListResult summary);
    void partnersListContentCallbackUrlSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowTriggerCallbackUrl summary);

    Q_DECL_DEPRECATED_X("Use partnersCreateOrUpdateSignalError() instead")
    void partnersCreateOrUpdateSignalE(OAIIntegrationAccountPartner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersCreateOrUpdateSignalError(OAIIntegrationAccountPartner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersDeleteSignalError() instead")
    void partnersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void partnersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersGetSignalError() instead")
    void partnersGetSignalE(OAIIntegrationAccountPartner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersGetSignalError(OAIIntegrationAccountPartner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersListByIntegrationAccountsSignalError() instead")
    void partnersListByIntegrationAccountsSignalE(OAIIntegrationAccountPartnerListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersListByIntegrationAccountsSignalError(OAIIntegrationAccountPartnerListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersListContentCallbackUrlSignalError() instead")
    void partnersListContentCallbackUrlSignalE(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersListContentCallbackUrlSignalError(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use partnersCreateOrUpdateSignalErrorFull() instead")
    void partnersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersDeleteSignalErrorFull() instead")
    void partnersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersGetSignalErrorFull() instead")
    void partnersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersListByIntegrationAccountsSignalErrorFull() instead")
    void partnersListByIntegrationAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersListByIntegrationAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use partnersListContentCallbackUrlSignalErrorFull() instead")
    void partnersListContentCallbackUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void partnersListContentCallbackUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
