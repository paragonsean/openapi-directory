/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2ProtocolSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2ProtocolSettings::OAIAS2ProtocolSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2ProtocolSettings::OAIAS2ProtocolSettings() {
    this->initializeModel();
}

OAIAS2ProtocolSettings::~OAIAS2ProtocolSettings() {}

void OAIAS2ProtocolSettings::initializeModel() {

    m_acknowledgement_connection_settings_isSet = false;
    m_acknowledgement_connection_settings_isValid = false;

    m_envelope_settings_isSet = false;
    m_envelope_settings_isValid = false;

    m_error_settings_isSet = false;
    m_error_settings_isValid = false;

    m_mdn_settings_isSet = false;
    m_mdn_settings_isValid = false;

    m_message_connection_settings_isSet = false;
    m_message_connection_settings_isValid = false;

    m_security_settings_isSet = false;
    m_security_settings_isValid = false;

    m_validation_settings_isSet = false;
    m_validation_settings_isValid = false;
}

void OAIAS2ProtocolSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2ProtocolSettings::fromJsonObject(QJsonObject json) {

    m_acknowledgement_connection_settings_isValid = ::OpenAPI::fromJsonValue(m_acknowledgement_connection_settings, json[QString("acknowledgementConnectionSettings")]);
    m_acknowledgement_connection_settings_isSet = !json[QString("acknowledgementConnectionSettings")].isNull() && m_acknowledgement_connection_settings_isValid;

    m_envelope_settings_isValid = ::OpenAPI::fromJsonValue(m_envelope_settings, json[QString("envelopeSettings")]);
    m_envelope_settings_isSet = !json[QString("envelopeSettings")].isNull() && m_envelope_settings_isValid;

    m_error_settings_isValid = ::OpenAPI::fromJsonValue(m_error_settings, json[QString("errorSettings")]);
    m_error_settings_isSet = !json[QString("errorSettings")].isNull() && m_error_settings_isValid;

    m_mdn_settings_isValid = ::OpenAPI::fromJsonValue(m_mdn_settings, json[QString("mdnSettings")]);
    m_mdn_settings_isSet = !json[QString("mdnSettings")].isNull() && m_mdn_settings_isValid;

    m_message_connection_settings_isValid = ::OpenAPI::fromJsonValue(m_message_connection_settings, json[QString("messageConnectionSettings")]);
    m_message_connection_settings_isSet = !json[QString("messageConnectionSettings")].isNull() && m_message_connection_settings_isValid;

    m_security_settings_isValid = ::OpenAPI::fromJsonValue(m_security_settings, json[QString("securitySettings")]);
    m_security_settings_isSet = !json[QString("securitySettings")].isNull() && m_security_settings_isValid;

    m_validation_settings_isValid = ::OpenAPI::fromJsonValue(m_validation_settings, json[QString("validationSettings")]);
    m_validation_settings_isSet = !json[QString("validationSettings")].isNull() && m_validation_settings_isValid;
}

QString OAIAS2ProtocolSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2ProtocolSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledgement_connection_settings.isSet()) {
        obj.insert(QString("acknowledgementConnectionSettings"), ::OpenAPI::toJsonValue(m_acknowledgement_connection_settings));
    }
    if (m_envelope_settings.isSet()) {
        obj.insert(QString("envelopeSettings"), ::OpenAPI::toJsonValue(m_envelope_settings));
    }
    if (m_error_settings.isSet()) {
        obj.insert(QString("errorSettings"), ::OpenAPI::toJsonValue(m_error_settings));
    }
    if (m_mdn_settings.isSet()) {
        obj.insert(QString("mdnSettings"), ::OpenAPI::toJsonValue(m_mdn_settings));
    }
    if (m_message_connection_settings.isSet()) {
        obj.insert(QString("messageConnectionSettings"), ::OpenAPI::toJsonValue(m_message_connection_settings));
    }
    if (m_security_settings.isSet()) {
        obj.insert(QString("securitySettings"), ::OpenAPI::toJsonValue(m_security_settings));
    }
    if (m_validation_settings.isSet()) {
        obj.insert(QString("validationSettings"), ::OpenAPI::toJsonValue(m_validation_settings));
    }
    return obj;
}

OAIAS2AcknowledgementConnectionSettings OAIAS2ProtocolSettings::getAcknowledgementConnectionSettings() const {
    return m_acknowledgement_connection_settings;
}
void OAIAS2ProtocolSettings::setAcknowledgementConnectionSettings(const OAIAS2AcknowledgementConnectionSettings &acknowledgement_connection_settings) {
    m_acknowledgement_connection_settings = acknowledgement_connection_settings;
    m_acknowledgement_connection_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_acknowledgement_connection_settings_Set() const{
    return m_acknowledgement_connection_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_acknowledgement_connection_settings_Valid() const{
    return m_acknowledgement_connection_settings_isValid;
}

OAIAS2EnvelopeSettings OAIAS2ProtocolSettings::getEnvelopeSettings() const {
    return m_envelope_settings;
}
void OAIAS2ProtocolSettings::setEnvelopeSettings(const OAIAS2EnvelopeSettings &envelope_settings) {
    m_envelope_settings = envelope_settings;
    m_envelope_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_envelope_settings_Set() const{
    return m_envelope_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_envelope_settings_Valid() const{
    return m_envelope_settings_isValid;
}

OAIAS2ErrorSettings OAIAS2ProtocolSettings::getErrorSettings() const {
    return m_error_settings;
}
void OAIAS2ProtocolSettings::setErrorSettings(const OAIAS2ErrorSettings &error_settings) {
    m_error_settings = error_settings;
    m_error_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_error_settings_Set() const{
    return m_error_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_error_settings_Valid() const{
    return m_error_settings_isValid;
}

OAIAS2MdnSettings OAIAS2ProtocolSettings::getMdnSettings() const {
    return m_mdn_settings;
}
void OAIAS2ProtocolSettings::setMdnSettings(const OAIAS2MdnSettings &mdn_settings) {
    m_mdn_settings = mdn_settings;
    m_mdn_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_mdn_settings_Set() const{
    return m_mdn_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_mdn_settings_Valid() const{
    return m_mdn_settings_isValid;
}

OAIAS2MessageConnectionSettings OAIAS2ProtocolSettings::getMessageConnectionSettings() const {
    return m_message_connection_settings;
}
void OAIAS2ProtocolSettings::setMessageConnectionSettings(const OAIAS2MessageConnectionSettings &message_connection_settings) {
    m_message_connection_settings = message_connection_settings;
    m_message_connection_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_message_connection_settings_Set() const{
    return m_message_connection_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_message_connection_settings_Valid() const{
    return m_message_connection_settings_isValid;
}

OAIAS2SecuritySettings OAIAS2ProtocolSettings::getSecuritySettings() const {
    return m_security_settings;
}
void OAIAS2ProtocolSettings::setSecuritySettings(const OAIAS2SecuritySettings &security_settings) {
    m_security_settings = security_settings;
    m_security_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_security_settings_Set() const{
    return m_security_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_security_settings_Valid() const{
    return m_security_settings_isValid;
}

OAIAS2ValidationSettings OAIAS2ProtocolSettings::getValidationSettings() const {
    return m_validation_settings;
}
void OAIAS2ProtocolSettings::setValidationSettings(const OAIAS2ValidationSettings &validation_settings) {
    m_validation_settings = validation_settings;
    m_validation_settings_isSet = true;
}

bool OAIAS2ProtocolSettings::is_validation_settings_Set() const{
    return m_validation_settings_isSet;
}

bool OAIAS2ProtocolSettings::is_validation_settings_Valid() const{
    return m_validation_settings_isValid;
}

bool OAIAS2ProtocolSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledgement_connection_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_envelope_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mdn_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_connection_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_security_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_validation_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2ProtocolSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_acknowledgement_connection_settings_isValid && m_envelope_settings_isValid && m_error_settings_isValid && m_mdn_settings_isValid && m_message_connection_settings_isValid && m_security_settings_isValid && m_validation_settings_isValid && true;
}

} // namespace OpenAPI
