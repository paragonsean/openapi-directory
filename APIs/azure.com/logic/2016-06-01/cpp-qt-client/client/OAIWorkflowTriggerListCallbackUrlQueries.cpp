/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowTriggerListCallbackUrlQueries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowTriggerListCallbackUrlQueries::OAIWorkflowTriggerListCallbackUrlQueries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowTriggerListCallbackUrlQueries::OAIWorkflowTriggerListCallbackUrlQueries() {
    this->initializeModel();
}

OAIWorkflowTriggerListCallbackUrlQueries::~OAIWorkflowTriggerListCallbackUrlQueries() {}

void OAIWorkflowTriggerListCallbackUrlQueries::initializeModel() {

    m_api_version_isSet = false;
    m_api_version_isValid = false;

    m_se_isSet = false;
    m_se_isValid = false;

    m_sig_isSet = false;
    m_sig_isValid = false;

    m_sp_isSet = false;
    m_sp_isValid = false;

    m_sv_isSet = false;
    m_sv_isValid = false;
}

void OAIWorkflowTriggerListCallbackUrlQueries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkflowTriggerListCallbackUrlQueries::fromJsonObject(QJsonObject json) {

    m_api_version_isValid = ::OpenAPI::fromJsonValue(m_api_version, json[QString("api-version")]);
    m_api_version_isSet = !json[QString("api-version")].isNull() && m_api_version_isValid;

    m_se_isValid = ::OpenAPI::fromJsonValue(m_se, json[QString("se")]);
    m_se_isSet = !json[QString("se")].isNull() && m_se_isValid;

    m_sig_isValid = ::OpenAPI::fromJsonValue(m_sig, json[QString("sig")]);
    m_sig_isSet = !json[QString("sig")].isNull() && m_sig_isValid;

    m_sp_isValid = ::OpenAPI::fromJsonValue(m_sp, json[QString("sp")]);
    m_sp_isSet = !json[QString("sp")].isNull() && m_sp_isValid;

    m_sv_isValid = ::OpenAPI::fromJsonValue(m_sv, json[QString("sv")]);
    m_sv_isSet = !json[QString("sv")].isNull() && m_sv_isValid;
}

QString OAIWorkflowTriggerListCallbackUrlQueries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkflowTriggerListCallbackUrlQueries::asJsonObject() const {
    QJsonObject obj;
    if (m_api_version_isSet) {
        obj.insert(QString("api-version"), ::OpenAPI::toJsonValue(m_api_version));
    }
    if (m_se_isSet) {
        obj.insert(QString("se"), ::OpenAPI::toJsonValue(m_se));
    }
    if (m_sig_isSet) {
        obj.insert(QString("sig"), ::OpenAPI::toJsonValue(m_sig));
    }
    if (m_sp_isSet) {
        obj.insert(QString("sp"), ::OpenAPI::toJsonValue(m_sp));
    }
    if (m_sv_isSet) {
        obj.insert(QString("sv"), ::OpenAPI::toJsonValue(m_sv));
    }
    return obj;
}

QString OAIWorkflowTriggerListCallbackUrlQueries::getApiVersion() const {
    return m_api_version;
}
void OAIWorkflowTriggerListCallbackUrlQueries::setApiVersion(const QString &api_version) {
    m_api_version = api_version;
    m_api_version_isSet = true;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_api_version_Set() const{
    return m_api_version_isSet;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_api_version_Valid() const{
    return m_api_version_isValid;
}

QString OAIWorkflowTriggerListCallbackUrlQueries::getSe() const {
    return m_se;
}
void OAIWorkflowTriggerListCallbackUrlQueries::setSe(const QString &se) {
    m_se = se;
    m_se_isSet = true;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_se_Set() const{
    return m_se_isSet;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_se_Valid() const{
    return m_se_isValid;
}

QString OAIWorkflowTriggerListCallbackUrlQueries::getSig() const {
    return m_sig;
}
void OAIWorkflowTriggerListCallbackUrlQueries::setSig(const QString &sig) {
    m_sig = sig;
    m_sig_isSet = true;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_sig_Set() const{
    return m_sig_isSet;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_sig_Valid() const{
    return m_sig_isValid;
}

QString OAIWorkflowTriggerListCallbackUrlQueries::getSp() const {
    return m_sp;
}
void OAIWorkflowTriggerListCallbackUrlQueries::setSp(const QString &sp) {
    m_sp = sp;
    m_sp_isSet = true;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_sp_Set() const{
    return m_sp_isSet;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_sp_Valid() const{
    return m_sp_isValid;
}

QString OAIWorkflowTriggerListCallbackUrlQueries::getSv() const {
    return m_sv;
}
void OAIWorkflowTriggerListCallbackUrlQueries::setSv(const QString &sv) {
    m_sv = sv;
    m_sv_isSet = true;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_sv_Set() const{
    return m_sv_isSet;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::is_sv_Valid() const{
    return m_sv_isValid;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_se_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sig_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sv_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkflowTriggerListCallbackUrlQueries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
