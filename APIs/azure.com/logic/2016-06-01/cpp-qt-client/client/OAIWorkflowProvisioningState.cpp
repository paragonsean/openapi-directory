/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowProvisioningState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowProvisioningState::OAIWorkflowProvisioningState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowProvisioningState::OAIWorkflowProvisioningState() {
    this->initializeModel();
}

OAIWorkflowProvisioningState::~OAIWorkflowProvisioningState() {}

void OAIWorkflowProvisioningState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIWorkflowProvisioningState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIWorkflowProvisioningState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Accepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Created", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Succeeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Moving", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::MOVING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Registering", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::REGISTERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Registered", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::REGISTERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unregistering", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::UNREGISTERING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Unregistered", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::UNREGISTERED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Completed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowProvisioningState::COMPLETED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIWorkflowProvisioningState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIWorkflowProvisioningState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIWorkflowProvisioningState::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIWorkflowProvisioningState::ACCEPTED:
            val = "Accepted";
            break;
        case eOAIWorkflowProvisioningState::RUNNING:
            val = "Running";
            break;
        case eOAIWorkflowProvisioningState::READY:
            val = "Ready";
            break;
        case eOAIWorkflowProvisioningState::CREATING:
            val = "Creating";
            break;
        case eOAIWorkflowProvisioningState::CREATED:
            val = "Created";
            break;
        case eOAIWorkflowProvisioningState::DELETING:
            val = "Deleting";
            break;
        case eOAIWorkflowProvisioningState::DELETED:
            val = "Deleted";
            break;
        case eOAIWorkflowProvisioningState::CANCELED:
            val = "Canceled";
            break;
        case eOAIWorkflowProvisioningState::FAILED:
            val = "Failed";
            break;
        case eOAIWorkflowProvisioningState::SUCCEEDED:
            val = "Succeeded";
            break;
        case eOAIWorkflowProvisioningState::MOVING:
            val = "Moving";
            break;
        case eOAIWorkflowProvisioningState::UPDATING:
            val = "Updating";
            break;
        case eOAIWorkflowProvisioningState::REGISTERING:
            val = "Registering";
            break;
        case eOAIWorkflowProvisioningState::REGISTERED:
            val = "Registered";
            break;
        case eOAIWorkflowProvisioningState::UNREGISTERING:
            val = "Unregistering";
            break;
        case eOAIWorkflowProvisioningState::UNREGISTERED:
            val = "Unregistered";
            break;
        case eOAIWorkflowProvisioningState::COMPLETED:
            val = "Completed";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIWorkflowProvisioningState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIWorkflowProvisioningState::eOAIWorkflowProvisioningState OAIWorkflowProvisioningState::getValue() const {
    return m_value;
}

void OAIWorkflowProvisioningState::setValue(const OAIWorkflowProvisioningState::eOAIWorkflowProvisioningState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIWorkflowProvisioningState::isSet() const {
    
    return m_value_isSet;
}

bool OAIWorkflowProvisioningState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
