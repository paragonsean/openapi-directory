/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRetryHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRetryHistory::OAIRetryHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRetryHistory::OAIRetryHistory() {
    this->initializeModel();
}

OAIRetryHistory::~OAIRetryHistory() {}

void OAIRetryHistory::initializeModel() {

    m_client_request_id_isSet = false;
    m_client_request_id_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_service_request_id_isSet = false;
    m_service_request_id_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;
}

void OAIRetryHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRetryHistory::fromJsonObject(QJsonObject json) {

    m_client_request_id_isValid = ::OpenAPI::fromJsonValue(m_client_request_id, json[QString("clientRequestId")]);
    m_client_request_id_isSet = !json[QString("clientRequestId")].isNull() && m_client_request_id_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_service_request_id_isValid = ::OpenAPI::fromJsonValue(m_service_request_id, json[QString("serviceRequestId")]);
    m_service_request_id_isSet = !json[QString("serviceRequestId")].isNull() && m_service_request_id_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;
}

QString OAIRetryHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRetryHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_client_request_id_isSet) {
        obj.insert(QString("clientRequestId"), ::OpenAPI::toJsonValue(m_client_request_id));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_service_request_id_isSet) {
        obj.insert(QString("serviceRequestId"), ::OpenAPI::toJsonValue(m_service_request_id));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    return obj;
}

QString OAIRetryHistory::getClientRequestId() const {
    return m_client_request_id;
}
void OAIRetryHistory::setClientRequestId(const QString &client_request_id) {
    m_client_request_id = client_request_id;
    m_client_request_id_isSet = true;
}

bool OAIRetryHistory::is_client_request_id_Set() const{
    return m_client_request_id_isSet;
}

bool OAIRetryHistory::is_client_request_id_Valid() const{
    return m_client_request_id_isValid;
}

QString OAIRetryHistory::getCode() const {
    return m_code;
}
void OAIRetryHistory::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIRetryHistory::is_code_Set() const{
    return m_code_isSet;
}

bool OAIRetryHistory::is_code_Valid() const{
    return m_code_isValid;
}

QDateTime OAIRetryHistory::getEndTime() const {
    return m_end_time;
}
void OAIRetryHistory::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIRetryHistory::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIRetryHistory::is_end_time_Valid() const{
    return m_end_time_isValid;
}

OAIErrorResponse OAIRetryHistory::getError() const {
    return m_error;
}
void OAIRetryHistory::setError(const OAIErrorResponse &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIRetryHistory::is_error_Set() const{
    return m_error_isSet;
}

bool OAIRetryHistory::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIRetryHistory::getServiceRequestId() const {
    return m_service_request_id;
}
void OAIRetryHistory::setServiceRequestId(const QString &service_request_id) {
    m_service_request_id = service_request_id;
    m_service_request_id_isSet = true;
}

bool OAIRetryHistory::is_service_request_id_Set() const{
    return m_service_request_id_isSet;
}

bool OAIRetryHistory::is_service_request_id_Valid() const{
    return m_service_request_id_isValid;
}

QDateTime OAIRetryHistory::getStartTime() const {
    return m_start_time;
}
void OAIRetryHistory::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIRetryHistory::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIRetryHistory::is_start_time_Valid() const{
    return m_start_time_isValid;
}

bool OAIRetryHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRetryHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
