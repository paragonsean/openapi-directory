/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkflowStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkflowStatus::OAIWorkflowStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkflowStatus::OAIWorkflowStatus() {
    this->initializeModel();
}

OAIWorkflowStatus::~OAIWorkflowStatus() {}

void OAIWorkflowStatus::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIWorkflowStatus::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIWorkflowStatus::fromJson(QString jsonString) {
    
    if ( jsonString.compare("NotSpecified", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::NOTSPECIFIED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Paused", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::PAUSED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Waiting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::WAITING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Succeeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Skipped", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::SKIPPED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Suspended", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::SUSPENDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Cancelled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::CANCELLED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Faulted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::FAULTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("TimedOut", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::TIMEDOUT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Aborted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::ABORTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ignored", Qt::CaseInsensitive) == 0) {
        m_value = eOAIWorkflowStatus::IGNORED;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIWorkflowStatus::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIWorkflowStatus::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIWorkflowStatus::NOTSPECIFIED:
            val = "NotSpecified";
            break;
        case eOAIWorkflowStatus::PAUSED:
            val = "Paused";
            break;
        case eOAIWorkflowStatus::RUNNING:
            val = "Running";
            break;
        case eOAIWorkflowStatus::WAITING:
            val = "Waiting";
            break;
        case eOAIWorkflowStatus::SUCCEEDED:
            val = "Succeeded";
            break;
        case eOAIWorkflowStatus::SKIPPED:
            val = "Skipped";
            break;
        case eOAIWorkflowStatus::SUSPENDED:
            val = "Suspended";
            break;
        case eOAIWorkflowStatus::CANCELLED:
            val = "Cancelled";
            break;
        case eOAIWorkflowStatus::FAILED:
            val = "Failed";
            break;
        case eOAIWorkflowStatus::FAULTED:
            val = "Faulted";
            break;
        case eOAIWorkflowStatus::TIMEDOUT:
            val = "TimedOut";
            break;
        case eOAIWorkflowStatus::ABORTED:
            val = "Aborted";
            break;
        case eOAIWorkflowStatus::IGNORED:
            val = "Ignored";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIWorkflowStatus::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIWorkflowStatus::eOAIWorkflowStatus OAIWorkflowStatus::getValue() const {
    return m_value;
}

void OAIWorkflowStatus::setValue(const OAIWorkflowStatus::eOAIWorkflowStatus& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIWorkflowStatus::isSet() const {
    
    return m_value_isSet;
}

bool OAIWorkflowStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
