/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2ErrorSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2ErrorSettings::OAIAS2ErrorSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2ErrorSettings::OAIAS2ErrorSettings() {
    this->initializeModel();
}

OAIAS2ErrorSettings::~OAIAS2ErrorSettings() {}

void OAIAS2ErrorSettings::initializeModel() {

    m_resend_if_mdn_not_received_isSet = false;
    m_resend_if_mdn_not_received_isValid = false;

    m_suspend_duplicate_message_isSet = false;
    m_suspend_duplicate_message_isValid = false;
}

void OAIAS2ErrorSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2ErrorSettings::fromJsonObject(QJsonObject json) {

    m_resend_if_mdn_not_received_isValid = ::OpenAPI::fromJsonValue(m_resend_if_mdn_not_received, json[QString("resendIfMdnNotReceived")]);
    m_resend_if_mdn_not_received_isSet = !json[QString("resendIfMdnNotReceived")].isNull() && m_resend_if_mdn_not_received_isValid;

    m_suspend_duplicate_message_isValid = ::OpenAPI::fromJsonValue(m_suspend_duplicate_message, json[QString("suspendDuplicateMessage")]);
    m_suspend_duplicate_message_isSet = !json[QString("suspendDuplicateMessage")].isNull() && m_suspend_duplicate_message_isValid;
}

QString OAIAS2ErrorSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2ErrorSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_resend_if_mdn_not_received_isSet) {
        obj.insert(QString("resendIfMdnNotReceived"), ::OpenAPI::toJsonValue(m_resend_if_mdn_not_received));
    }
    if (m_suspend_duplicate_message_isSet) {
        obj.insert(QString("suspendDuplicateMessage"), ::OpenAPI::toJsonValue(m_suspend_duplicate_message));
    }
    return obj;
}

bool OAIAS2ErrorSettings::isResendIfMdnNotReceived() const {
    return m_resend_if_mdn_not_received;
}
void OAIAS2ErrorSettings::setResendIfMdnNotReceived(const bool &resend_if_mdn_not_received) {
    m_resend_if_mdn_not_received = resend_if_mdn_not_received;
    m_resend_if_mdn_not_received_isSet = true;
}

bool OAIAS2ErrorSettings::is_resend_if_mdn_not_received_Set() const{
    return m_resend_if_mdn_not_received_isSet;
}

bool OAIAS2ErrorSettings::is_resend_if_mdn_not_received_Valid() const{
    return m_resend_if_mdn_not_received_isValid;
}

bool OAIAS2ErrorSettings::isSuspendDuplicateMessage() const {
    return m_suspend_duplicate_message;
}
void OAIAS2ErrorSettings::setSuspendDuplicateMessage(const bool &suspend_duplicate_message) {
    m_suspend_duplicate_message = suspend_duplicate_message;
    m_suspend_duplicate_message_isSet = true;
}

bool OAIAS2ErrorSettings::is_suspend_duplicate_message_Set() const{
    return m_suspend_duplicate_message_isSet;
}

bool OAIAS2ErrorSettings::is_suspend_duplicate_message_Valid() const{
    return m_suspend_duplicate_message_isValid;
}

bool OAIAS2ErrorSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_resend_if_mdn_not_received_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspend_duplicate_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2ErrorSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_resend_if_mdn_not_received_isValid && m_suspend_duplicate_message_isValid && true;
}

} // namespace OpenAPI
