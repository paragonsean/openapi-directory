/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2SecuritySettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2SecuritySettings::OAIAS2SecuritySettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2SecuritySettings::OAIAS2SecuritySettings() {
    this->initializeModel();
}

OAIAS2SecuritySettings::~OAIAS2SecuritySettings() {}

void OAIAS2SecuritySettings::initializeModel() {

    m_enable_nrr_for_inbound_decoded_messages_isSet = false;
    m_enable_nrr_for_inbound_decoded_messages_isValid = false;

    m_enable_nrr_for_inbound_encoded_messages_isSet = false;
    m_enable_nrr_for_inbound_encoded_messages_isValid = false;

    m_enable_nrr_for_inbound_mdn_isSet = false;
    m_enable_nrr_for_inbound_mdn_isValid = false;

    m_enable_nrr_for_outbound_decoded_messages_isSet = false;
    m_enable_nrr_for_outbound_decoded_messages_isValid = false;

    m_enable_nrr_for_outbound_encoded_messages_isSet = false;
    m_enable_nrr_for_outbound_encoded_messages_isValid = false;

    m_enable_nrr_for_outbound_mdn_isSet = false;
    m_enable_nrr_for_outbound_mdn_isValid = false;

    m_encryption_certificate_name_isSet = false;
    m_encryption_certificate_name_isValid = false;

    m_override_group_signing_certificate_isSet = false;
    m_override_group_signing_certificate_isValid = false;

    m_sha2_algorithm_format_isSet = false;
    m_sha2_algorithm_format_isValid = false;

    m_signing_certificate_name_isSet = false;
    m_signing_certificate_name_isValid = false;
}

void OAIAS2SecuritySettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2SecuritySettings::fromJsonObject(QJsonObject json) {

    m_enable_nrr_for_inbound_decoded_messages_isValid = ::OpenAPI::fromJsonValue(m_enable_nrr_for_inbound_decoded_messages, json[QString("enableNrrForInboundDecodedMessages")]);
    m_enable_nrr_for_inbound_decoded_messages_isSet = !json[QString("enableNrrForInboundDecodedMessages")].isNull() && m_enable_nrr_for_inbound_decoded_messages_isValid;

    m_enable_nrr_for_inbound_encoded_messages_isValid = ::OpenAPI::fromJsonValue(m_enable_nrr_for_inbound_encoded_messages, json[QString("enableNrrForInboundEncodedMessages")]);
    m_enable_nrr_for_inbound_encoded_messages_isSet = !json[QString("enableNrrForInboundEncodedMessages")].isNull() && m_enable_nrr_for_inbound_encoded_messages_isValid;

    m_enable_nrr_for_inbound_mdn_isValid = ::OpenAPI::fromJsonValue(m_enable_nrr_for_inbound_mdn, json[QString("enableNrrForInboundMdn")]);
    m_enable_nrr_for_inbound_mdn_isSet = !json[QString("enableNrrForInboundMdn")].isNull() && m_enable_nrr_for_inbound_mdn_isValid;

    m_enable_nrr_for_outbound_decoded_messages_isValid = ::OpenAPI::fromJsonValue(m_enable_nrr_for_outbound_decoded_messages, json[QString("enableNrrForOutboundDecodedMessages")]);
    m_enable_nrr_for_outbound_decoded_messages_isSet = !json[QString("enableNrrForOutboundDecodedMessages")].isNull() && m_enable_nrr_for_outbound_decoded_messages_isValid;

    m_enable_nrr_for_outbound_encoded_messages_isValid = ::OpenAPI::fromJsonValue(m_enable_nrr_for_outbound_encoded_messages, json[QString("enableNrrForOutboundEncodedMessages")]);
    m_enable_nrr_for_outbound_encoded_messages_isSet = !json[QString("enableNrrForOutboundEncodedMessages")].isNull() && m_enable_nrr_for_outbound_encoded_messages_isValid;

    m_enable_nrr_for_outbound_mdn_isValid = ::OpenAPI::fromJsonValue(m_enable_nrr_for_outbound_mdn, json[QString("enableNrrForOutboundMdn")]);
    m_enable_nrr_for_outbound_mdn_isSet = !json[QString("enableNrrForOutboundMdn")].isNull() && m_enable_nrr_for_outbound_mdn_isValid;

    m_encryption_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_encryption_certificate_name, json[QString("encryptionCertificateName")]);
    m_encryption_certificate_name_isSet = !json[QString("encryptionCertificateName")].isNull() && m_encryption_certificate_name_isValid;

    m_override_group_signing_certificate_isValid = ::OpenAPI::fromJsonValue(m_override_group_signing_certificate, json[QString("overrideGroupSigningCertificate")]);
    m_override_group_signing_certificate_isSet = !json[QString("overrideGroupSigningCertificate")].isNull() && m_override_group_signing_certificate_isValid;

    m_sha2_algorithm_format_isValid = ::OpenAPI::fromJsonValue(m_sha2_algorithm_format, json[QString("sha2AlgorithmFormat")]);
    m_sha2_algorithm_format_isSet = !json[QString("sha2AlgorithmFormat")].isNull() && m_sha2_algorithm_format_isValid;

    m_signing_certificate_name_isValid = ::OpenAPI::fromJsonValue(m_signing_certificate_name, json[QString("signingCertificateName")]);
    m_signing_certificate_name_isSet = !json[QString("signingCertificateName")].isNull() && m_signing_certificate_name_isValid;
}

QString OAIAS2SecuritySettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2SecuritySettings::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_nrr_for_inbound_decoded_messages_isSet) {
        obj.insert(QString("enableNrrForInboundDecodedMessages"), ::OpenAPI::toJsonValue(m_enable_nrr_for_inbound_decoded_messages));
    }
    if (m_enable_nrr_for_inbound_encoded_messages_isSet) {
        obj.insert(QString("enableNrrForInboundEncodedMessages"), ::OpenAPI::toJsonValue(m_enable_nrr_for_inbound_encoded_messages));
    }
    if (m_enable_nrr_for_inbound_mdn_isSet) {
        obj.insert(QString("enableNrrForInboundMdn"), ::OpenAPI::toJsonValue(m_enable_nrr_for_inbound_mdn));
    }
    if (m_enable_nrr_for_outbound_decoded_messages_isSet) {
        obj.insert(QString("enableNrrForOutboundDecodedMessages"), ::OpenAPI::toJsonValue(m_enable_nrr_for_outbound_decoded_messages));
    }
    if (m_enable_nrr_for_outbound_encoded_messages_isSet) {
        obj.insert(QString("enableNrrForOutboundEncodedMessages"), ::OpenAPI::toJsonValue(m_enable_nrr_for_outbound_encoded_messages));
    }
    if (m_enable_nrr_for_outbound_mdn_isSet) {
        obj.insert(QString("enableNrrForOutboundMdn"), ::OpenAPI::toJsonValue(m_enable_nrr_for_outbound_mdn));
    }
    if (m_encryption_certificate_name_isSet) {
        obj.insert(QString("encryptionCertificateName"), ::OpenAPI::toJsonValue(m_encryption_certificate_name));
    }
    if (m_override_group_signing_certificate_isSet) {
        obj.insert(QString("overrideGroupSigningCertificate"), ::OpenAPI::toJsonValue(m_override_group_signing_certificate));
    }
    if (m_sha2_algorithm_format_isSet) {
        obj.insert(QString("sha2AlgorithmFormat"), ::OpenAPI::toJsonValue(m_sha2_algorithm_format));
    }
    if (m_signing_certificate_name_isSet) {
        obj.insert(QString("signingCertificateName"), ::OpenAPI::toJsonValue(m_signing_certificate_name));
    }
    return obj;
}

bool OAIAS2SecuritySettings::isEnableNrrForInboundDecodedMessages() const {
    return m_enable_nrr_for_inbound_decoded_messages;
}
void OAIAS2SecuritySettings::setEnableNrrForInboundDecodedMessages(const bool &enable_nrr_for_inbound_decoded_messages) {
    m_enable_nrr_for_inbound_decoded_messages = enable_nrr_for_inbound_decoded_messages;
    m_enable_nrr_for_inbound_decoded_messages_isSet = true;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_inbound_decoded_messages_Set() const{
    return m_enable_nrr_for_inbound_decoded_messages_isSet;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_inbound_decoded_messages_Valid() const{
    return m_enable_nrr_for_inbound_decoded_messages_isValid;
}

bool OAIAS2SecuritySettings::isEnableNrrForInboundEncodedMessages() const {
    return m_enable_nrr_for_inbound_encoded_messages;
}
void OAIAS2SecuritySettings::setEnableNrrForInboundEncodedMessages(const bool &enable_nrr_for_inbound_encoded_messages) {
    m_enable_nrr_for_inbound_encoded_messages = enable_nrr_for_inbound_encoded_messages;
    m_enable_nrr_for_inbound_encoded_messages_isSet = true;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_inbound_encoded_messages_Set() const{
    return m_enable_nrr_for_inbound_encoded_messages_isSet;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_inbound_encoded_messages_Valid() const{
    return m_enable_nrr_for_inbound_encoded_messages_isValid;
}

bool OAIAS2SecuritySettings::isEnableNrrForInboundMdn() const {
    return m_enable_nrr_for_inbound_mdn;
}
void OAIAS2SecuritySettings::setEnableNrrForInboundMdn(const bool &enable_nrr_for_inbound_mdn) {
    m_enable_nrr_for_inbound_mdn = enable_nrr_for_inbound_mdn;
    m_enable_nrr_for_inbound_mdn_isSet = true;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_inbound_mdn_Set() const{
    return m_enable_nrr_for_inbound_mdn_isSet;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_inbound_mdn_Valid() const{
    return m_enable_nrr_for_inbound_mdn_isValid;
}

bool OAIAS2SecuritySettings::isEnableNrrForOutboundDecodedMessages() const {
    return m_enable_nrr_for_outbound_decoded_messages;
}
void OAIAS2SecuritySettings::setEnableNrrForOutboundDecodedMessages(const bool &enable_nrr_for_outbound_decoded_messages) {
    m_enable_nrr_for_outbound_decoded_messages = enable_nrr_for_outbound_decoded_messages;
    m_enable_nrr_for_outbound_decoded_messages_isSet = true;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_outbound_decoded_messages_Set() const{
    return m_enable_nrr_for_outbound_decoded_messages_isSet;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_outbound_decoded_messages_Valid() const{
    return m_enable_nrr_for_outbound_decoded_messages_isValid;
}

bool OAIAS2SecuritySettings::isEnableNrrForOutboundEncodedMessages() const {
    return m_enable_nrr_for_outbound_encoded_messages;
}
void OAIAS2SecuritySettings::setEnableNrrForOutboundEncodedMessages(const bool &enable_nrr_for_outbound_encoded_messages) {
    m_enable_nrr_for_outbound_encoded_messages = enable_nrr_for_outbound_encoded_messages;
    m_enable_nrr_for_outbound_encoded_messages_isSet = true;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_outbound_encoded_messages_Set() const{
    return m_enable_nrr_for_outbound_encoded_messages_isSet;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_outbound_encoded_messages_Valid() const{
    return m_enable_nrr_for_outbound_encoded_messages_isValid;
}

bool OAIAS2SecuritySettings::isEnableNrrForOutboundMdn() const {
    return m_enable_nrr_for_outbound_mdn;
}
void OAIAS2SecuritySettings::setEnableNrrForOutboundMdn(const bool &enable_nrr_for_outbound_mdn) {
    m_enable_nrr_for_outbound_mdn = enable_nrr_for_outbound_mdn;
    m_enable_nrr_for_outbound_mdn_isSet = true;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_outbound_mdn_Set() const{
    return m_enable_nrr_for_outbound_mdn_isSet;
}

bool OAIAS2SecuritySettings::is_enable_nrr_for_outbound_mdn_Valid() const{
    return m_enable_nrr_for_outbound_mdn_isValid;
}

QString OAIAS2SecuritySettings::getEncryptionCertificateName() const {
    return m_encryption_certificate_name;
}
void OAIAS2SecuritySettings::setEncryptionCertificateName(const QString &encryption_certificate_name) {
    m_encryption_certificate_name = encryption_certificate_name;
    m_encryption_certificate_name_isSet = true;
}

bool OAIAS2SecuritySettings::is_encryption_certificate_name_Set() const{
    return m_encryption_certificate_name_isSet;
}

bool OAIAS2SecuritySettings::is_encryption_certificate_name_Valid() const{
    return m_encryption_certificate_name_isValid;
}

bool OAIAS2SecuritySettings::isOverrideGroupSigningCertificate() const {
    return m_override_group_signing_certificate;
}
void OAIAS2SecuritySettings::setOverrideGroupSigningCertificate(const bool &override_group_signing_certificate) {
    m_override_group_signing_certificate = override_group_signing_certificate;
    m_override_group_signing_certificate_isSet = true;
}

bool OAIAS2SecuritySettings::is_override_group_signing_certificate_Set() const{
    return m_override_group_signing_certificate_isSet;
}

bool OAIAS2SecuritySettings::is_override_group_signing_certificate_Valid() const{
    return m_override_group_signing_certificate_isValid;
}

QString OAIAS2SecuritySettings::getSha2AlgorithmFormat() const {
    return m_sha2_algorithm_format;
}
void OAIAS2SecuritySettings::setSha2AlgorithmFormat(const QString &sha2_algorithm_format) {
    m_sha2_algorithm_format = sha2_algorithm_format;
    m_sha2_algorithm_format_isSet = true;
}

bool OAIAS2SecuritySettings::is_sha2_algorithm_format_Set() const{
    return m_sha2_algorithm_format_isSet;
}

bool OAIAS2SecuritySettings::is_sha2_algorithm_format_Valid() const{
    return m_sha2_algorithm_format_isValid;
}

QString OAIAS2SecuritySettings::getSigningCertificateName() const {
    return m_signing_certificate_name;
}
void OAIAS2SecuritySettings::setSigningCertificateName(const QString &signing_certificate_name) {
    m_signing_certificate_name = signing_certificate_name;
    m_signing_certificate_name_isSet = true;
}

bool OAIAS2SecuritySettings::is_signing_certificate_name_Set() const{
    return m_signing_certificate_name_isSet;
}

bool OAIAS2SecuritySettings::is_signing_certificate_name_Valid() const{
    return m_signing_certificate_name_isValid;
}

bool OAIAS2SecuritySettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_nrr_for_inbound_decoded_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_nrr_for_inbound_encoded_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_nrr_for_inbound_mdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_nrr_for_outbound_decoded_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_nrr_for_outbound_encoded_messages_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_nrr_for_outbound_mdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_group_signing_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sha2_algorithm_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_certificate_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2SecuritySettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_enable_nrr_for_inbound_decoded_messages_isValid && m_enable_nrr_for_inbound_encoded_messages_isValid && m_enable_nrr_for_inbound_mdn_isValid && m_enable_nrr_for_outbound_decoded_messages_isValid && m_enable_nrr_for_outbound_encoded_messages_isValid && m_enable_nrr_for_outbound_mdn_isValid && m_override_group_signing_certificate_isValid && true;
}

} // namespace OpenAPI
