/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIntegrationAccountMapProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIntegrationAccountMapProperties::OAIIntegrationAccountMapProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIntegrationAccountMapProperties::OAIIntegrationAccountMapProperties() {
    this->initializeModel();
}

OAIIntegrationAccountMapProperties::~OAIIntegrationAccountMapProperties() {}

void OAIIntegrationAccountMapProperties::initializeModel() {

    m_changed_time_isSet = false;
    m_changed_time_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_link_isSet = false;
    m_content_link_isValid = false;

    m_content_type_isSet = false;
    m_content_type_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_map_type_isSet = false;
    m_map_type_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_parameters_schema_isSet = false;
    m_parameters_schema_isValid = false;
}

void OAIIntegrationAccountMapProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIntegrationAccountMapProperties::fromJsonObject(QJsonObject json) {

    m_changed_time_isValid = ::OpenAPI::fromJsonValue(m_changed_time, json[QString("changedTime")]);
    m_changed_time_isSet = !json[QString("changedTime")].isNull() && m_changed_time_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("content")]);
    m_content_isSet = !json[QString("content")].isNull() && m_content_isValid;

    m_content_link_isValid = ::OpenAPI::fromJsonValue(m_content_link, json[QString("contentLink")]);
    m_content_link_isSet = !json[QString("contentLink")].isNull() && m_content_link_isValid;

    m_content_type_isValid = ::OpenAPI::fromJsonValue(m_content_type, json[QString("contentType")]);
    m_content_type_isSet = !json[QString("contentType")].isNull() && m_content_type_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("createdTime")]);
    m_created_time_isSet = !json[QString("createdTime")].isNull() && m_created_time_isValid;

    m_map_type_isValid = ::OpenAPI::fromJsonValue(m_map_type, json[QString("mapType")]);
    m_map_type_isSet = !json[QString("mapType")].isNull() && m_map_type_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_parameters_schema_isValid = ::OpenAPI::fromJsonValue(m_parameters_schema, json[QString("parametersSchema")]);
    m_parameters_schema_isSet = !json[QString("parametersSchema")].isNull() && m_parameters_schema_isValid;
}

QString OAIIntegrationAccountMapProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIntegrationAccountMapProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_changed_time_isSet) {
        obj.insert(QString("changedTime"), ::OpenAPI::toJsonValue(m_changed_time));
    }
    if (m_content_isSet) {
        obj.insert(QString("content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_link.isSet()) {
        obj.insert(QString("contentLink"), ::OpenAPI::toJsonValue(m_content_link));
    }
    if (m_content_type_isSet) {
        obj.insert(QString("contentType"), ::OpenAPI::toJsonValue(m_content_type));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("createdTime"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_map_type.isSet()) {
        obj.insert(QString("mapType"), ::OpenAPI::toJsonValue(m_map_type));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_parameters_schema.isSet()) {
        obj.insert(QString("parametersSchema"), ::OpenAPI::toJsonValue(m_parameters_schema));
    }
    return obj;
}

QDateTime OAIIntegrationAccountMapProperties::getChangedTime() const {
    return m_changed_time;
}
void OAIIntegrationAccountMapProperties::setChangedTime(const QDateTime &changed_time) {
    m_changed_time = changed_time;
    m_changed_time_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_changed_time_Set() const{
    return m_changed_time_isSet;
}

bool OAIIntegrationAccountMapProperties::is_changed_time_Valid() const{
    return m_changed_time_isValid;
}

OAIObject OAIIntegrationAccountMapProperties::getContent() const {
    return m_content;
}
void OAIIntegrationAccountMapProperties::setContent(const OAIObject &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_content_Set() const{
    return m_content_isSet;
}

bool OAIIntegrationAccountMapProperties::is_content_Valid() const{
    return m_content_isValid;
}

OAIContentLink OAIIntegrationAccountMapProperties::getContentLink() const {
    return m_content_link;
}
void OAIIntegrationAccountMapProperties::setContentLink(const OAIContentLink &content_link) {
    m_content_link = content_link;
    m_content_link_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_content_link_Set() const{
    return m_content_link_isSet;
}

bool OAIIntegrationAccountMapProperties::is_content_link_Valid() const{
    return m_content_link_isValid;
}

QString OAIIntegrationAccountMapProperties::getContentType() const {
    return m_content_type;
}
void OAIIntegrationAccountMapProperties::setContentType(const QString &content_type) {
    m_content_type = content_type;
    m_content_type_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_content_type_Set() const{
    return m_content_type_isSet;
}

bool OAIIntegrationAccountMapProperties::is_content_type_Valid() const{
    return m_content_type_isValid;
}

QDateTime OAIIntegrationAccountMapProperties::getCreatedTime() const {
    return m_created_time;
}
void OAIIntegrationAccountMapProperties::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIIntegrationAccountMapProperties::is_created_time_Valid() const{
    return m_created_time_isValid;
}

OAIMapType OAIIntegrationAccountMapProperties::getMapType() const {
    return m_map_type;
}
void OAIIntegrationAccountMapProperties::setMapType(const OAIMapType &map_type) {
    m_map_type = map_type;
    m_map_type_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_map_type_Set() const{
    return m_map_type_isSet;
}

bool OAIIntegrationAccountMapProperties::is_map_type_Valid() const{
    return m_map_type_isValid;
}

OAIObject OAIIntegrationAccountMapProperties::getMetadata() const {
    return m_metadata;
}
void OAIIntegrationAccountMapProperties::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIIntegrationAccountMapProperties::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIIntegrationAccountMapProperties_parametersSchema OAIIntegrationAccountMapProperties::getParametersSchema() const {
    return m_parameters_schema;
}
void OAIIntegrationAccountMapProperties::setParametersSchema(const OAIIntegrationAccountMapProperties_parametersSchema &parameters_schema) {
    m_parameters_schema = parameters_schema;
    m_parameters_schema_isSet = true;
}

bool OAIIntegrationAccountMapProperties::is_parameters_schema_Set() const{
    return m_parameters_schema_isSet;
}

bool OAIIntegrationAccountMapProperties::is_parameters_schema_Valid() const{
    return m_parameters_schema_isValid;
}

bool OAIIntegrationAccountMapProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_changed_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_map_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters_schema.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIntegrationAccountMapProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_map_type_isValid && true;
}

} // namespace OpenAPI
