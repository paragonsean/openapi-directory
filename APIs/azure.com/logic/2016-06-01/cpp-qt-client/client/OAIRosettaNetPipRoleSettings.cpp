/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRosettaNetPipRoleSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRosettaNetPipRoleSettings::OAIRosettaNetPipRoleSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRosettaNetPipRoleSettings::OAIRosettaNetPipRoleSettings() {
    this->initializeModel();
}

OAIRosettaNetPipRoleSettings::~OAIRosettaNetPipRoleSettings() {}

void OAIRosettaNetPipRoleSettings::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_business_document_isSet = false;
    m_business_document_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_role_type_isSet = false;
    m_role_type_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_classification_isSet = false;
    m_service_classification_isValid = false;
}

void OAIRosettaNetPipRoleSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRosettaNetPipRoleSettings::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_business_document_isValid = ::OpenAPI::fromJsonValue(m_business_document, json[QString("businessDocument")]);
    m_business_document_isSet = !json[QString("businessDocument")].isNull() && m_business_document_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_role_type_isValid = ::OpenAPI::fromJsonValue(m_role_type, json[QString("roleType")]);
    m_role_type_isSet = !json[QString("roleType")].isNull() && m_role_type_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_classification_isValid = ::OpenAPI::fromJsonValue(m_service_classification, json[QString("serviceClassification")]);
    m_service_classification_isSet = !json[QString("serviceClassification")].isNull() && m_service_classification_isValid;
}

QString OAIRosettaNetPipRoleSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRosettaNetPipRoleSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_business_document.isSet()) {
        obj.insert(QString("businessDocument"), ::OpenAPI::toJsonValue(m_business_document));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_role_type.isSet()) {
        obj.insert(QString("roleType"), ::OpenAPI::toJsonValue(m_role_type));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_classification_isSet) {
        obj.insert(QString("serviceClassification"), ::OpenAPI::toJsonValue(m_service_classification));
    }
    return obj;
}

QString OAIRosettaNetPipRoleSettings::getAction() const {
    return m_action;
}
void OAIRosettaNetPipRoleSettings::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_action_Set() const{
    return m_action_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_action_Valid() const{
    return m_action_isValid;
}

OAIRosettaNetPipBusinessDocument OAIRosettaNetPipRoleSettings::getBusinessDocument() const {
    return m_business_document;
}
void OAIRosettaNetPipRoleSettings::setBusinessDocument(const OAIRosettaNetPipBusinessDocument &business_document) {
    m_business_document = business_document;
    m_business_document_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_business_document_Set() const{
    return m_business_document_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_business_document_Valid() const{
    return m_business_document_isValid;
}

QString OAIRosettaNetPipRoleSettings::getDescription() const {
    return m_description;
}
void OAIRosettaNetPipRoleSettings::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_description_Set() const{
    return m_description_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIRosettaNetPipRoleSettings::getRole() const {
    return m_role;
}
void OAIRosettaNetPipRoleSettings::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_role_Set() const{
    return m_role_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_role_Valid() const{
    return m_role_isValid;
}

OAIRosettaNetPipRoleType OAIRosettaNetPipRoleSettings::getRoleType() const {
    return m_role_type;
}
void OAIRosettaNetPipRoleSettings::setRoleType(const OAIRosettaNetPipRoleType &role_type) {
    m_role_type = role_type;
    m_role_type_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_role_type_Set() const{
    return m_role_type_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_role_type_Valid() const{
    return m_role_type_isValid;
}

QString OAIRosettaNetPipRoleSettings::getService() const {
    return m_service;
}
void OAIRosettaNetPipRoleSettings::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_service_Set() const{
    return m_service_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIRosettaNetPipRoleSettings::getServiceClassification() const {
    return m_service_classification;
}
void OAIRosettaNetPipRoleSettings::setServiceClassification(const QString &service_classification) {
    m_service_classification = service_classification;
    m_service_classification_isSet = true;
}

bool OAIRosettaNetPipRoleSettings::is_service_classification_Set() const{
    return m_service_classification_isSet;
}

bool OAIRosettaNetPipRoleSettings::is_service_classification_Valid() const{
    return m_service_classification_isValid;
}

bool OAIRosettaNetPipRoleSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_business_document.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_classification_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRosettaNetPipRoleSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_isValid && m_business_document_isValid && m_role_isValid && m_role_type_isValid && m_service_isValid && m_service_classification_isValid && true;
}

} // namespace OpenAPI
