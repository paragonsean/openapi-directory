/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12EnvelopeSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12EnvelopeSettings::OAIX12EnvelopeSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12EnvelopeSettings::OAIX12EnvelopeSettings() {
    this->initializeModel();
}

OAIX12EnvelopeSettings::~OAIX12EnvelopeSettings() {}

void OAIX12EnvelopeSettings::initializeModel() {

    m_control_standards_id_isSet = false;
    m_control_standards_id_isValid = false;

    m_control_version_number_isSet = false;
    m_control_version_number_isValid = false;

    m_enable_default_group_headers_isSet = false;
    m_enable_default_group_headers_isValid = false;

    m_functional_group_id_isSet = false;
    m_functional_group_id_isValid = false;

    m_group_control_number_lower_bound_isSet = false;
    m_group_control_number_lower_bound_isValid = false;

    m_group_control_number_upper_bound_isSet = false;
    m_group_control_number_upper_bound_isValid = false;

    m_group_header_agency_code_isSet = false;
    m_group_header_agency_code_isValid = false;

    m_group_header_date_format_isSet = false;
    m_group_header_date_format_isValid = false;

    m_group_header_time_format_isSet = false;
    m_group_header_time_format_isValid = false;

    m_group_header_version_isSet = false;
    m_group_header_version_isValid = false;

    m_interchange_control_number_lower_bound_isSet = false;
    m_interchange_control_number_lower_bound_isValid = false;

    m_interchange_control_number_upper_bound_isSet = false;
    m_interchange_control_number_upper_bound_isValid = false;

    m_overwrite_existing_transaction_set_control_number_isSet = false;
    m_overwrite_existing_transaction_set_control_number_isValid = false;

    m_receiver_application_id_isSet = false;
    m_receiver_application_id_isValid = false;

    m_rollover_group_control_number_isSet = false;
    m_rollover_group_control_number_isValid = false;

    m_rollover_interchange_control_number_isSet = false;
    m_rollover_interchange_control_number_isValid = false;

    m_rollover_transaction_set_control_number_isSet = false;
    m_rollover_transaction_set_control_number_isValid = false;

    m_sender_application_id_isSet = false;
    m_sender_application_id_isValid = false;

    m_transaction_set_control_number_lower_bound_isSet = false;
    m_transaction_set_control_number_lower_bound_isValid = false;

    m_transaction_set_control_number_prefix_isSet = false;
    m_transaction_set_control_number_prefix_isValid = false;

    m_transaction_set_control_number_suffix_isSet = false;
    m_transaction_set_control_number_suffix_isValid = false;

    m_transaction_set_control_number_upper_bound_isSet = false;
    m_transaction_set_control_number_upper_bound_isValid = false;

    m_usage_indicator_isSet = false;
    m_usage_indicator_isValid = false;

    m_use_control_standards_id_as_repetition_character_isSet = false;
    m_use_control_standards_id_as_repetition_character_isValid = false;
}

void OAIX12EnvelopeSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12EnvelopeSettings::fromJsonObject(QJsonObject json) {

    m_control_standards_id_isValid = ::OpenAPI::fromJsonValue(m_control_standards_id, json[QString("controlStandardsId")]);
    m_control_standards_id_isSet = !json[QString("controlStandardsId")].isNull() && m_control_standards_id_isValid;

    m_control_version_number_isValid = ::OpenAPI::fromJsonValue(m_control_version_number, json[QString("controlVersionNumber")]);
    m_control_version_number_isSet = !json[QString("controlVersionNumber")].isNull() && m_control_version_number_isValid;

    m_enable_default_group_headers_isValid = ::OpenAPI::fromJsonValue(m_enable_default_group_headers, json[QString("enableDefaultGroupHeaders")]);
    m_enable_default_group_headers_isSet = !json[QString("enableDefaultGroupHeaders")].isNull() && m_enable_default_group_headers_isValid;

    m_functional_group_id_isValid = ::OpenAPI::fromJsonValue(m_functional_group_id, json[QString("functionalGroupId")]);
    m_functional_group_id_isSet = !json[QString("functionalGroupId")].isNull() && m_functional_group_id_isValid;

    m_group_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_group_control_number_lower_bound, json[QString("groupControlNumberLowerBound")]);
    m_group_control_number_lower_bound_isSet = !json[QString("groupControlNumberLowerBound")].isNull() && m_group_control_number_lower_bound_isValid;

    m_group_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_group_control_number_upper_bound, json[QString("groupControlNumberUpperBound")]);
    m_group_control_number_upper_bound_isSet = !json[QString("groupControlNumberUpperBound")].isNull() && m_group_control_number_upper_bound_isValid;

    m_group_header_agency_code_isValid = ::OpenAPI::fromJsonValue(m_group_header_agency_code, json[QString("groupHeaderAgencyCode")]);
    m_group_header_agency_code_isSet = !json[QString("groupHeaderAgencyCode")].isNull() && m_group_header_agency_code_isValid;

    m_group_header_date_format_isValid = ::OpenAPI::fromJsonValue(m_group_header_date_format, json[QString("groupHeaderDateFormat")]);
    m_group_header_date_format_isSet = !json[QString("groupHeaderDateFormat")].isNull() && m_group_header_date_format_isValid;

    m_group_header_time_format_isValid = ::OpenAPI::fromJsonValue(m_group_header_time_format, json[QString("groupHeaderTimeFormat")]);
    m_group_header_time_format_isSet = !json[QString("groupHeaderTimeFormat")].isNull() && m_group_header_time_format_isValid;

    m_group_header_version_isValid = ::OpenAPI::fromJsonValue(m_group_header_version, json[QString("groupHeaderVersion")]);
    m_group_header_version_isSet = !json[QString("groupHeaderVersion")].isNull() && m_group_header_version_isValid;

    m_interchange_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_lower_bound, json[QString("interchangeControlNumberLowerBound")]);
    m_interchange_control_number_lower_bound_isSet = !json[QString("interchangeControlNumberLowerBound")].isNull() && m_interchange_control_number_lower_bound_isValid;

    m_interchange_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_interchange_control_number_upper_bound, json[QString("interchangeControlNumberUpperBound")]);
    m_interchange_control_number_upper_bound_isSet = !json[QString("interchangeControlNumberUpperBound")].isNull() && m_interchange_control_number_upper_bound_isValid;

    m_overwrite_existing_transaction_set_control_number_isValid = ::OpenAPI::fromJsonValue(m_overwrite_existing_transaction_set_control_number, json[QString("overwriteExistingTransactionSetControlNumber")]);
    m_overwrite_existing_transaction_set_control_number_isSet = !json[QString("overwriteExistingTransactionSetControlNumber")].isNull() && m_overwrite_existing_transaction_set_control_number_isValid;

    m_receiver_application_id_isValid = ::OpenAPI::fromJsonValue(m_receiver_application_id, json[QString("receiverApplicationId")]);
    m_receiver_application_id_isSet = !json[QString("receiverApplicationId")].isNull() && m_receiver_application_id_isValid;

    m_rollover_group_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_group_control_number, json[QString("rolloverGroupControlNumber")]);
    m_rollover_group_control_number_isSet = !json[QString("rolloverGroupControlNumber")].isNull() && m_rollover_group_control_number_isValid;

    m_rollover_interchange_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_interchange_control_number, json[QString("rolloverInterchangeControlNumber")]);
    m_rollover_interchange_control_number_isSet = !json[QString("rolloverInterchangeControlNumber")].isNull() && m_rollover_interchange_control_number_isValid;

    m_rollover_transaction_set_control_number_isValid = ::OpenAPI::fromJsonValue(m_rollover_transaction_set_control_number, json[QString("rolloverTransactionSetControlNumber")]);
    m_rollover_transaction_set_control_number_isSet = !json[QString("rolloverTransactionSetControlNumber")].isNull() && m_rollover_transaction_set_control_number_isValid;

    m_sender_application_id_isValid = ::OpenAPI::fromJsonValue(m_sender_application_id, json[QString("senderApplicationId")]);
    m_sender_application_id_isSet = !json[QString("senderApplicationId")].isNull() && m_sender_application_id_isValid;

    m_transaction_set_control_number_lower_bound_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_lower_bound, json[QString("transactionSetControlNumberLowerBound")]);
    m_transaction_set_control_number_lower_bound_isSet = !json[QString("transactionSetControlNumberLowerBound")].isNull() && m_transaction_set_control_number_lower_bound_isValid;

    m_transaction_set_control_number_prefix_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_prefix, json[QString("transactionSetControlNumberPrefix")]);
    m_transaction_set_control_number_prefix_isSet = !json[QString("transactionSetControlNumberPrefix")].isNull() && m_transaction_set_control_number_prefix_isValid;

    m_transaction_set_control_number_suffix_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_suffix, json[QString("transactionSetControlNumberSuffix")]);
    m_transaction_set_control_number_suffix_isSet = !json[QString("transactionSetControlNumberSuffix")].isNull() && m_transaction_set_control_number_suffix_isValid;

    m_transaction_set_control_number_upper_bound_isValid = ::OpenAPI::fromJsonValue(m_transaction_set_control_number_upper_bound, json[QString("transactionSetControlNumberUpperBound")]);
    m_transaction_set_control_number_upper_bound_isSet = !json[QString("transactionSetControlNumberUpperBound")].isNull() && m_transaction_set_control_number_upper_bound_isValid;

    m_usage_indicator_isValid = ::OpenAPI::fromJsonValue(m_usage_indicator, json[QString("usageIndicator")]);
    m_usage_indicator_isSet = !json[QString("usageIndicator")].isNull() && m_usage_indicator_isValid;

    m_use_control_standards_id_as_repetition_character_isValid = ::OpenAPI::fromJsonValue(m_use_control_standards_id_as_repetition_character, json[QString("useControlStandardsIdAsRepetitionCharacter")]);
    m_use_control_standards_id_as_repetition_character_isSet = !json[QString("useControlStandardsIdAsRepetitionCharacter")].isNull() && m_use_control_standards_id_as_repetition_character_isValid;
}

QString OAIX12EnvelopeSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12EnvelopeSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_control_standards_id_isSet) {
        obj.insert(QString("controlStandardsId"), ::OpenAPI::toJsonValue(m_control_standards_id));
    }
    if (m_control_version_number_isSet) {
        obj.insert(QString("controlVersionNumber"), ::OpenAPI::toJsonValue(m_control_version_number));
    }
    if (m_enable_default_group_headers_isSet) {
        obj.insert(QString("enableDefaultGroupHeaders"), ::OpenAPI::toJsonValue(m_enable_default_group_headers));
    }
    if (m_functional_group_id_isSet) {
        obj.insert(QString("functionalGroupId"), ::OpenAPI::toJsonValue(m_functional_group_id));
    }
    if (m_group_control_number_lower_bound_isSet) {
        obj.insert(QString("groupControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_group_control_number_lower_bound));
    }
    if (m_group_control_number_upper_bound_isSet) {
        obj.insert(QString("groupControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_group_control_number_upper_bound));
    }
    if (m_group_header_agency_code_isSet) {
        obj.insert(QString("groupHeaderAgencyCode"), ::OpenAPI::toJsonValue(m_group_header_agency_code));
    }
    if (m_group_header_date_format.isSet()) {
        obj.insert(QString("groupHeaderDateFormat"), ::OpenAPI::toJsonValue(m_group_header_date_format));
    }
    if (m_group_header_time_format.isSet()) {
        obj.insert(QString("groupHeaderTimeFormat"), ::OpenAPI::toJsonValue(m_group_header_time_format));
    }
    if (m_group_header_version_isSet) {
        obj.insert(QString("groupHeaderVersion"), ::OpenAPI::toJsonValue(m_group_header_version));
    }
    if (m_interchange_control_number_lower_bound_isSet) {
        obj.insert(QString("interchangeControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_interchange_control_number_lower_bound));
    }
    if (m_interchange_control_number_upper_bound_isSet) {
        obj.insert(QString("interchangeControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_interchange_control_number_upper_bound));
    }
    if (m_overwrite_existing_transaction_set_control_number_isSet) {
        obj.insert(QString("overwriteExistingTransactionSetControlNumber"), ::OpenAPI::toJsonValue(m_overwrite_existing_transaction_set_control_number));
    }
    if (m_receiver_application_id_isSet) {
        obj.insert(QString("receiverApplicationId"), ::OpenAPI::toJsonValue(m_receiver_application_id));
    }
    if (m_rollover_group_control_number_isSet) {
        obj.insert(QString("rolloverGroupControlNumber"), ::OpenAPI::toJsonValue(m_rollover_group_control_number));
    }
    if (m_rollover_interchange_control_number_isSet) {
        obj.insert(QString("rolloverInterchangeControlNumber"), ::OpenAPI::toJsonValue(m_rollover_interchange_control_number));
    }
    if (m_rollover_transaction_set_control_number_isSet) {
        obj.insert(QString("rolloverTransactionSetControlNumber"), ::OpenAPI::toJsonValue(m_rollover_transaction_set_control_number));
    }
    if (m_sender_application_id_isSet) {
        obj.insert(QString("senderApplicationId"), ::OpenAPI::toJsonValue(m_sender_application_id));
    }
    if (m_transaction_set_control_number_lower_bound_isSet) {
        obj.insert(QString("transactionSetControlNumberLowerBound"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_lower_bound));
    }
    if (m_transaction_set_control_number_prefix_isSet) {
        obj.insert(QString("transactionSetControlNumberPrefix"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_prefix));
    }
    if (m_transaction_set_control_number_suffix_isSet) {
        obj.insert(QString("transactionSetControlNumberSuffix"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_suffix));
    }
    if (m_transaction_set_control_number_upper_bound_isSet) {
        obj.insert(QString("transactionSetControlNumberUpperBound"), ::OpenAPI::toJsonValue(m_transaction_set_control_number_upper_bound));
    }
    if (m_usage_indicator.isSet()) {
        obj.insert(QString("usageIndicator"), ::OpenAPI::toJsonValue(m_usage_indicator));
    }
    if (m_use_control_standards_id_as_repetition_character_isSet) {
        obj.insert(QString("useControlStandardsIdAsRepetitionCharacter"), ::OpenAPI::toJsonValue(m_use_control_standards_id_as_repetition_character));
    }
    return obj;
}

qint32 OAIX12EnvelopeSettings::getControlStandardsId() const {
    return m_control_standards_id;
}
void OAIX12EnvelopeSettings::setControlStandardsId(const qint32 &control_standards_id) {
    m_control_standards_id = control_standards_id;
    m_control_standards_id_isSet = true;
}

bool OAIX12EnvelopeSettings::is_control_standards_id_Set() const{
    return m_control_standards_id_isSet;
}

bool OAIX12EnvelopeSettings::is_control_standards_id_Valid() const{
    return m_control_standards_id_isValid;
}

QString OAIX12EnvelopeSettings::getControlVersionNumber() const {
    return m_control_version_number;
}
void OAIX12EnvelopeSettings::setControlVersionNumber(const QString &control_version_number) {
    m_control_version_number = control_version_number;
    m_control_version_number_isSet = true;
}

bool OAIX12EnvelopeSettings::is_control_version_number_Set() const{
    return m_control_version_number_isSet;
}

bool OAIX12EnvelopeSettings::is_control_version_number_Valid() const{
    return m_control_version_number_isValid;
}

bool OAIX12EnvelopeSettings::isEnableDefaultGroupHeaders() const {
    return m_enable_default_group_headers;
}
void OAIX12EnvelopeSettings::setEnableDefaultGroupHeaders(const bool &enable_default_group_headers) {
    m_enable_default_group_headers = enable_default_group_headers;
    m_enable_default_group_headers_isSet = true;
}

bool OAIX12EnvelopeSettings::is_enable_default_group_headers_Set() const{
    return m_enable_default_group_headers_isSet;
}

bool OAIX12EnvelopeSettings::is_enable_default_group_headers_Valid() const{
    return m_enable_default_group_headers_isValid;
}

QString OAIX12EnvelopeSettings::getFunctionalGroupId() const {
    return m_functional_group_id;
}
void OAIX12EnvelopeSettings::setFunctionalGroupId(const QString &functional_group_id) {
    m_functional_group_id = functional_group_id;
    m_functional_group_id_isSet = true;
}

bool OAIX12EnvelopeSettings::is_functional_group_id_Set() const{
    return m_functional_group_id_isSet;
}

bool OAIX12EnvelopeSettings::is_functional_group_id_Valid() const{
    return m_functional_group_id_isValid;
}

qint32 OAIX12EnvelopeSettings::getGroupControlNumberLowerBound() const {
    return m_group_control_number_lower_bound;
}
void OAIX12EnvelopeSettings::setGroupControlNumberLowerBound(const qint32 &group_control_number_lower_bound) {
    m_group_control_number_lower_bound = group_control_number_lower_bound;
    m_group_control_number_lower_bound_isSet = true;
}

bool OAIX12EnvelopeSettings::is_group_control_number_lower_bound_Set() const{
    return m_group_control_number_lower_bound_isSet;
}

bool OAIX12EnvelopeSettings::is_group_control_number_lower_bound_Valid() const{
    return m_group_control_number_lower_bound_isValid;
}

qint32 OAIX12EnvelopeSettings::getGroupControlNumberUpperBound() const {
    return m_group_control_number_upper_bound;
}
void OAIX12EnvelopeSettings::setGroupControlNumberUpperBound(const qint32 &group_control_number_upper_bound) {
    m_group_control_number_upper_bound = group_control_number_upper_bound;
    m_group_control_number_upper_bound_isSet = true;
}

bool OAIX12EnvelopeSettings::is_group_control_number_upper_bound_Set() const{
    return m_group_control_number_upper_bound_isSet;
}

bool OAIX12EnvelopeSettings::is_group_control_number_upper_bound_Valid() const{
    return m_group_control_number_upper_bound_isValid;
}

QString OAIX12EnvelopeSettings::getGroupHeaderAgencyCode() const {
    return m_group_header_agency_code;
}
void OAIX12EnvelopeSettings::setGroupHeaderAgencyCode(const QString &group_header_agency_code) {
    m_group_header_agency_code = group_header_agency_code;
    m_group_header_agency_code_isSet = true;
}

bool OAIX12EnvelopeSettings::is_group_header_agency_code_Set() const{
    return m_group_header_agency_code_isSet;
}

bool OAIX12EnvelopeSettings::is_group_header_agency_code_Valid() const{
    return m_group_header_agency_code_isValid;
}

OAIX12DateFormat OAIX12EnvelopeSettings::getGroupHeaderDateFormat() const {
    return m_group_header_date_format;
}
void OAIX12EnvelopeSettings::setGroupHeaderDateFormat(const OAIX12DateFormat &group_header_date_format) {
    m_group_header_date_format = group_header_date_format;
    m_group_header_date_format_isSet = true;
}

bool OAIX12EnvelopeSettings::is_group_header_date_format_Set() const{
    return m_group_header_date_format_isSet;
}

bool OAIX12EnvelopeSettings::is_group_header_date_format_Valid() const{
    return m_group_header_date_format_isValid;
}

OAIX12TimeFormat OAIX12EnvelopeSettings::getGroupHeaderTimeFormat() const {
    return m_group_header_time_format;
}
void OAIX12EnvelopeSettings::setGroupHeaderTimeFormat(const OAIX12TimeFormat &group_header_time_format) {
    m_group_header_time_format = group_header_time_format;
    m_group_header_time_format_isSet = true;
}

bool OAIX12EnvelopeSettings::is_group_header_time_format_Set() const{
    return m_group_header_time_format_isSet;
}

bool OAIX12EnvelopeSettings::is_group_header_time_format_Valid() const{
    return m_group_header_time_format_isValid;
}

QString OAIX12EnvelopeSettings::getGroupHeaderVersion() const {
    return m_group_header_version;
}
void OAIX12EnvelopeSettings::setGroupHeaderVersion(const QString &group_header_version) {
    m_group_header_version = group_header_version;
    m_group_header_version_isSet = true;
}

bool OAIX12EnvelopeSettings::is_group_header_version_Set() const{
    return m_group_header_version_isSet;
}

bool OAIX12EnvelopeSettings::is_group_header_version_Valid() const{
    return m_group_header_version_isValid;
}

qint32 OAIX12EnvelopeSettings::getInterchangeControlNumberLowerBound() const {
    return m_interchange_control_number_lower_bound;
}
void OAIX12EnvelopeSettings::setInterchangeControlNumberLowerBound(const qint32 &interchange_control_number_lower_bound) {
    m_interchange_control_number_lower_bound = interchange_control_number_lower_bound;
    m_interchange_control_number_lower_bound_isSet = true;
}

bool OAIX12EnvelopeSettings::is_interchange_control_number_lower_bound_Set() const{
    return m_interchange_control_number_lower_bound_isSet;
}

bool OAIX12EnvelopeSettings::is_interchange_control_number_lower_bound_Valid() const{
    return m_interchange_control_number_lower_bound_isValid;
}

qint32 OAIX12EnvelopeSettings::getInterchangeControlNumberUpperBound() const {
    return m_interchange_control_number_upper_bound;
}
void OAIX12EnvelopeSettings::setInterchangeControlNumberUpperBound(const qint32 &interchange_control_number_upper_bound) {
    m_interchange_control_number_upper_bound = interchange_control_number_upper_bound;
    m_interchange_control_number_upper_bound_isSet = true;
}

bool OAIX12EnvelopeSettings::is_interchange_control_number_upper_bound_Set() const{
    return m_interchange_control_number_upper_bound_isSet;
}

bool OAIX12EnvelopeSettings::is_interchange_control_number_upper_bound_Valid() const{
    return m_interchange_control_number_upper_bound_isValid;
}

bool OAIX12EnvelopeSettings::isOverwriteExistingTransactionSetControlNumber() const {
    return m_overwrite_existing_transaction_set_control_number;
}
void OAIX12EnvelopeSettings::setOverwriteExistingTransactionSetControlNumber(const bool &overwrite_existing_transaction_set_control_number) {
    m_overwrite_existing_transaction_set_control_number = overwrite_existing_transaction_set_control_number;
    m_overwrite_existing_transaction_set_control_number_isSet = true;
}

bool OAIX12EnvelopeSettings::is_overwrite_existing_transaction_set_control_number_Set() const{
    return m_overwrite_existing_transaction_set_control_number_isSet;
}

bool OAIX12EnvelopeSettings::is_overwrite_existing_transaction_set_control_number_Valid() const{
    return m_overwrite_existing_transaction_set_control_number_isValid;
}

QString OAIX12EnvelopeSettings::getReceiverApplicationId() const {
    return m_receiver_application_id;
}
void OAIX12EnvelopeSettings::setReceiverApplicationId(const QString &receiver_application_id) {
    m_receiver_application_id = receiver_application_id;
    m_receiver_application_id_isSet = true;
}

bool OAIX12EnvelopeSettings::is_receiver_application_id_Set() const{
    return m_receiver_application_id_isSet;
}

bool OAIX12EnvelopeSettings::is_receiver_application_id_Valid() const{
    return m_receiver_application_id_isValid;
}

bool OAIX12EnvelopeSettings::isRolloverGroupControlNumber() const {
    return m_rollover_group_control_number;
}
void OAIX12EnvelopeSettings::setRolloverGroupControlNumber(const bool &rollover_group_control_number) {
    m_rollover_group_control_number = rollover_group_control_number;
    m_rollover_group_control_number_isSet = true;
}

bool OAIX12EnvelopeSettings::is_rollover_group_control_number_Set() const{
    return m_rollover_group_control_number_isSet;
}

bool OAIX12EnvelopeSettings::is_rollover_group_control_number_Valid() const{
    return m_rollover_group_control_number_isValid;
}

bool OAIX12EnvelopeSettings::isRolloverInterchangeControlNumber() const {
    return m_rollover_interchange_control_number;
}
void OAIX12EnvelopeSettings::setRolloverInterchangeControlNumber(const bool &rollover_interchange_control_number) {
    m_rollover_interchange_control_number = rollover_interchange_control_number;
    m_rollover_interchange_control_number_isSet = true;
}

bool OAIX12EnvelopeSettings::is_rollover_interchange_control_number_Set() const{
    return m_rollover_interchange_control_number_isSet;
}

bool OAIX12EnvelopeSettings::is_rollover_interchange_control_number_Valid() const{
    return m_rollover_interchange_control_number_isValid;
}

bool OAIX12EnvelopeSettings::isRolloverTransactionSetControlNumber() const {
    return m_rollover_transaction_set_control_number;
}
void OAIX12EnvelopeSettings::setRolloverTransactionSetControlNumber(const bool &rollover_transaction_set_control_number) {
    m_rollover_transaction_set_control_number = rollover_transaction_set_control_number;
    m_rollover_transaction_set_control_number_isSet = true;
}

bool OAIX12EnvelopeSettings::is_rollover_transaction_set_control_number_Set() const{
    return m_rollover_transaction_set_control_number_isSet;
}

bool OAIX12EnvelopeSettings::is_rollover_transaction_set_control_number_Valid() const{
    return m_rollover_transaction_set_control_number_isValid;
}

QString OAIX12EnvelopeSettings::getSenderApplicationId() const {
    return m_sender_application_id;
}
void OAIX12EnvelopeSettings::setSenderApplicationId(const QString &sender_application_id) {
    m_sender_application_id = sender_application_id;
    m_sender_application_id_isSet = true;
}

bool OAIX12EnvelopeSettings::is_sender_application_id_Set() const{
    return m_sender_application_id_isSet;
}

bool OAIX12EnvelopeSettings::is_sender_application_id_Valid() const{
    return m_sender_application_id_isValid;
}

qint32 OAIX12EnvelopeSettings::getTransactionSetControlNumberLowerBound() const {
    return m_transaction_set_control_number_lower_bound;
}
void OAIX12EnvelopeSettings::setTransactionSetControlNumberLowerBound(const qint32 &transaction_set_control_number_lower_bound) {
    m_transaction_set_control_number_lower_bound = transaction_set_control_number_lower_bound;
    m_transaction_set_control_number_lower_bound_isSet = true;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_lower_bound_Set() const{
    return m_transaction_set_control_number_lower_bound_isSet;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_lower_bound_Valid() const{
    return m_transaction_set_control_number_lower_bound_isValid;
}

QString OAIX12EnvelopeSettings::getTransactionSetControlNumberPrefix() const {
    return m_transaction_set_control_number_prefix;
}
void OAIX12EnvelopeSettings::setTransactionSetControlNumberPrefix(const QString &transaction_set_control_number_prefix) {
    m_transaction_set_control_number_prefix = transaction_set_control_number_prefix;
    m_transaction_set_control_number_prefix_isSet = true;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_prefix_Set() const{
    return m_transaction_set_control_number_prefix_isSet;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_prefix_Valid() const{
    return m_transaction_set_control_number_prefix_isValid;
}

QString OAIX12EnvelopeSettings::getTransactionSetControlNumberSuffix() const {
    return m_transaction_set_control_number_suffix;
}
void OAIX12EnvelopeSettings::setTransactionSetControlNumberSuffix(const QString &transaction_set_control_number_suffix) {
    m_transaction_set_control_number_suffix = transaction_set_control_number_suffix;
    m_transaction_set_control_number_suffix_isSet = true;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_suffix_Set() const{
    return m_transaction_set_control_number_suffix_isSet;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_suffix_Valid() const{
    return m_transaction_set_control_number_suffix_isValid;
}

qint32 OAIX12EnvelopeSettings::getTransactionSetControlNumberUpperBound() const {
    return m_transaction_set_control_number_upper_bound;
}
void OAIX12EnvelopeSettings::setTransactionSetControlNumberUpperBound(const qint32 &transaction_set_control_number_upper_bound) {
    m_transaction_set_control_number_upper_bound = transaction_set_control_number_upper_bound;
    m_transaction_set_control_number_upper_bound_isSet = true;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_upper_bound_Set() const{
    return m_transaction_set_control_number_upper_bound_isSet;
}

bool OAIX12EnvelopeSettings::is_transaction_set_control_number_upper_bound_Valid() const{
    return m_transaction_set_control_number_upper_bound_isValid;
}

OAIUsageIndicator OAIX12EnvelopeSettings::getUsageIndicator() const {
    return m_usage_indicator;
}
void OAIX12EnvelopeSettings::setUsageIndicator(const OAIUsageIndicator &usage_indicator) {
    m_usage_indicator = usage_indicator;
    m_usage_indicator_isSet = true;
}

bool OAIX12EnvelopeSettings::is_usage_indicator_Set() const{
    return m_usage_indicator_isSet;
}

bool OAIX12EnvelopeSettings::is_usage_indicator_Valid() const{
    return m_usage_indicator_isValid;
}

bool OAIX12EnvelopeSettings::isUseControlStandardsIdAsRepetitionCharacter() const {
    return m_use_control_standards_id_as_repetition_character;
}
void OAIX12EnvelopeSettings::setUseControlStandardsIdAsRepetitionCharacter(const bool &use_control_standards_id_as_repetition_character) {
    m_use_control_standards_id_as_repetition_character = use_control_standards_id_as_repetition_character;
    m_use_control_standards_id_as_repetition_character_isSet = true;
}

bool OAIX12EnvelopeSettings::is_use_control_standards_id_as_repetition_character_Set() const{
    return m_use_control_standards_id_as_repetition_character_isSet;
}

bool OAIX12EnvelopeSettings::is_use_control_standards_id_as_repetition_character_Valid() const{
    return m_use_control_standards_id_as_repetition_character_isValid;
}

bool OAIX12EnvelopeSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_control_standards_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_control_version_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enable_default_group_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_functional_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_header_agency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_header_date_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_header_time_format.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_header_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_overwrite_existing_transaction_set_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_group_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_interchange_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rollover_transaction_set_control_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_application_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_lower_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_suffix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_set_control_number_upper_bound_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_indicator.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_control_standards_id_as_repetition_character_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12EnvelopeSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_control_standards_id_isValid && m_control_version_number_isValid && m_enable_default_group_headers_isValid && m_group_control_number_lower_bound_isValid && m_group_control_number_upper_bound_isValid && m_group_header_agency_code_isValid && m_group_header_date_format_isValid && m_group_header_time_format_isValid && m_group_header_version_isValid && m_interchange_control_number_lower_bound_isValid && m_interchange_control_number_upper_bound_isValid && m_overwrite_existing_transaction_set_control_number_isValid && m_receiver_application_id_isValid && m_rollover_group_control_number_isValid && m_rollover_interchange_control_number_isValid && m_rollover_transaction_set_control_number_isValid && m_sender_application_id_isValid && m_transaction_set_control_number_lower_bound_isValid && m_transaction_set_control_number_upper_bound_isValid && m_usage_indicator_isValid && m_use_control_standards_id_as_repetition_character_isValid && true;
}

} // namespace OpenAPI
