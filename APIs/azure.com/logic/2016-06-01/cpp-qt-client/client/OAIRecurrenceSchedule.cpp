/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRecurrenceSchedule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRecurrenceSchedule::OAIRecurrenceSchedule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRecurrenceSchedule::OAIRecurrenceSchedule() {
    this->initializeModel();
}

OAIRecurrenceSchedule::~OAIRecurrenceSchedule() {}

void OAIRecurrenceSchedule::initializeModel() {

    m_hours_isSet = false;
    m_hours_isValid = false;

    m_minutes_isSet = false;
    m_minutes_isValid = false;

    m_month_days_isSet = false;
    m_month_days_isValid = false;

    m_monthly_occurrences_isSet = false;
    m_monthly_occurrences_isValid = false;

    m_week_days_isSet = false;
    m_week_days_isValid = false;
}

void OAIRecurrenceSchedule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRecurrenceSchedule::fromJsonObject(QJsonObject json) {

    m_hours_isValid = ::OpenAPI::fromJsonValue(m_hours, json[QString("hours")]);
    m_hours_isSet = !json[QString("hours")].isNull() && m_hours_isValid;

    m_minutes_isValid = ::OpenAPI::fromJsonValue(m_minutes, json[QString("minutes")]);
    m_minutes_isSet = !json[QString("minutes")].isNull() && m_minutes_isValid;

    m_month_days_isValid = ::OpenAPI::fromJsonValue(m_month_days, json[QString("monthDays")]);
    m_month_days_isSet = !json[QString("monthDays")].isNull() && m_month_days_isValid;

    m_monthly_occurrences_isValid = ::OpenAPI::fromJsonValue(m_monthly_occurrences, json[QString("monthlyOccurrences")]);
    m_monthly_occurrences_isSet = !json[QString("monthlyOccurrences")].isNull() && m_monthly_occurrences_isValid;

    m_week_days_isValid = ::OpenAPI::fromJsonValue(m_week_days, json[QString("weekDays")]);
    m_week_days_isSet = !json[QString("weekDays")].isNull() && m_week_days_isValid;
}

QString OAIRecurrenceSchedule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRecurrenceSchedule::asJsonObject() const {
    QJsonObject obj;
    if (m_hours.size() > 0) {
        obj.insert(QString("hours"), ::OpenAPI::toJsonValue(m_hours));
    }
    if (m_minutes.size() > 0) {
        obj.insert(QString("minutes"), ::OpenAPI::toJsonValue(m_minutes));
    }
    if (m_month_days.size() > 0) {
        obj.insert(QString("monthDays"), ::OpenAPI::toJsonValue(m_month_days));
    }
    if (m_monthly_occurrences.size() > 0) {
        obj.insert(QString("monthlyOccurrences"), ::OpenAPI::toJsonValue(m_monthly_occurrences));
    }
    if (m_week_days.size() > 0) {
        obj.insert(QString("weekDays"), ::OpenAPI::toJsonValue(m_week_days));
    }
    return obj;
}

QList<qint32> OAIRecurrenceSchedule::getHours() const {
    return m_hours;
}
void OAIRecurrenceSchedule::setHours(const QList<qint32> &hours) {
    m_hours = hours;
    m_hours_isSet = true;
}

bool OAIRecurrenceSchedule::is_hours_Set() const{
    return m_hours_isSet;
}

bool OAIRecurrenceSchedule::is_hours_Valid() const{
    return m_hours_isValid;
}

QList<qint32> OAIRecurrenceSchedule::getMinutes() const {
    return m_minutes;
}
void OAIRecurrenceSchedule::setMinutes(const QList<qint32> &minutes) {
    m_minutes = minutes;
    m_minutes_isSet = true;
}

bool OAIRecurrenceSchedule::is_minutes_Set() const{
    return m_minutes_isSet;
}

bool OAIRecurrenceSchedule::is_minutes_Valid() const{
    return m_minutes_isValid;
}

QList<qint32> OAIRecurrenceSchedule::getMonthDays() const {
    return m_month_days;
}
void OAIRecurrenceSchedule::setMonthDays(const QList<qint32> &month_days) {
    m_month_days = month_days;
    m_month_days_isSet = true;
}

bool OAIRecurrenceSchedule::is_month_days_Set() const{
    return m_month_days_isSet;
}

bool OAIRecurrenceSchedule::is_month_days_Valid() const{
    return m_month_days_isValid;
}

QList<OAIRecurrenceScheduleOccurrence> OAIRecurrenceSchedule::getMonthlyOccurrences() const {
    return m_monthly_occurrences;
}
void OAIRecurrenceSchedule::setMonthlyOccurrences(const QList<OAIRecurrenceScheduleOccurrence> &monthly_occurrences) {
    m_monthly_occurrences = monthly_occurrences;
    m_monthly_occurrences_isSet = true;
}

bool OAIRecurrenceSchedule::is_monthly_occurrences_Set() const{
    return m_monthly_occurrences_isSet;
}

bool OAIRecurrenceSchedule::is_monthly_occurrences_Valid() const{
    return m_monthly_occurrences_isValid;
}

QList<QString> OAIRecurrenceSchedule::getWeekDays() const {
    return m_week_days;
}
void OAIRecurrenceSchedule::setWeekDays(const QList<QString> &week_days) {
    m_week_days = week_days;
    m_week_days_isSet = true;
}

bool OAIRecurrenceSchedule::is_week_days_Set() const{
    return m_week_days_isSet;
}

bool OAIRecurrenceSchedule::is_week_days_Valid() const{
    return m_week_days_isValid;
}

bool OAIRecurrenceSchedule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hours.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_minutes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_month_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_monthly_occurrences.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_week_days.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRecurrenceSchedule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
