/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIX12ProcessingSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIX12ProcessingSettings::OAIX12ProcessingSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIX12ProcessingSettings::OAIX12ProcessingSettings() {
    this->initializeModel();
}

OAIX12ProcessingSettings::~OAIX12ProcessingSettings() {}

void OAIX12ProcessingSettings::initializeModel() {

    m_convert_implied_decimal_isSet = false;
    m_convert_implied_decimal_isValid = false;

    m_create_empty_xml_tags_for_trailing_separators_isSet = false;
    m_create_empty_xml_tags_for_trailing_separators_isValid = false;

    m_mask_security_info_isSet = false;
    m_mask_security_info_isValid = false;

    m_preserve_interchange_isSet = false;
    m_preserve_interchange_isValid = false;

    m_suspend_interchange_on_error_isSet = false;
    m_suspend_interchange_on_error_isValid = false;

    m_use_dot_as_decimal_separator_isSet = false;
    m_use_dot_as_decimal_separator_isValid = false;
}

void OAIX12ProcessingSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIX12ProcessingSettings::fromJsonObject(QJsonObject json) {

    m_convert_implied_decimal_isValid = ::OpenAPI::fromJsonValue(m_convert_implied_decimal, json[QString("convertImpliedDecimal")]);
    m_convert_implied_decimal_isSet = !json[QString("convertImpliedDecimal")].isNull() && m_convert_implied_decimal_isValid;

    m_create_empty_xml_tags_for_trailing_separators_isValid = ::OpenAPI::fromJsonValue(m_create_empty_xml_tags_for_trailing_separators, json[QString("createEmptyXmlTagsForTrailingSeparators")]);
    m_create_empty_xml_tags_for_trailing_separators_isSet = !json[QString("createEmptyXmlTagsForTrailingSeparators")].isNull() && m_create_empty_xml_tags_for_trailing_separators_isValid;

    m_mask_security_info_isValid = ::OpenAPI::fromJsonValue(m_mask_security_info, json[QString("maskSecurityInfo")]);
    m_mask_security_info_isSet = !json[QString("maskSecurityInfo")].isNull() && m_mask_security_info_isValid;

    m_preserve_interchange_isValid = ::OpenAPI::fromJsonValue(m_preserve_interchange, json[QString("preserveInterchange")]);
    m_preserve_interchange_isSet = !json[QString("preserveInterchange")].isNull() && m_preserve_interchange_isValid;

    m_suspend_interchange_on_error_isValid = ::OpenAPI::fromJsonValue(m_suspend_interchange_on_error, json[QString("suspendInterchangeOnError")]);
    m_suspend_interchange_on_error_isSet = !json[QString("suspendInterchangeOnError")].isNull() && m_suspend_interchange_on_error_isValid;

    m_use_dot_as_decimal_separator_isValid = ::OpenAPI::fromJsonValue(m_use_dot_as_decimal_separator, json[QString("useDotAsDecimalSeparator")]);
    m_use_dot_as_decimal_separator_isSet = !json[QString("useDotAsDecimalSeparator")].isNull() && m_use_dot_as_decimal_separator_isValid;
}

QString OAIX12ProcessingSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIX12ProcessingSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_convert_implied_decimal_isSet) {
        obj.insert(QString("convertImpliedDecimal"), ::OpenAPI::toJsonValue(m_convert_implied_decimal));
    }
    if (m_create_empty_xml_tags_for_trailing_separators_isSet) {
        obj.insert(QString("createEmptyXmlTagsForTrailingSeparators"), ::OpenAPI::toJsonValue(m_create_empty_xml_tags_for_trailing_separators));
    }
    if (m_mask_security_info_isSet) {
        obj.insert(QString("maskSecurityInfo"), ::OpenAPI::toJsonValue(m_mask_security_info));
    }
    if (m_preserve_interchange_isSet) {
        obj.insert(QString("preserveInterchange"), ::OpenAPI::toJsonValue(m_preserve_interchange));
    }
    if (m_suspend_interchange_on_error_isSet) {
        obj.insert(QString("suspendInterchangeOnError"), ::OpenAPI::toJsonValue(m_suspend_interchange_on_error));
    }
    if (m_use_dot_as_decimal_separator_isSet) {
        obj.insert(QString("useDotAsDecimalSeparator"), ::OpenAPI::toJsonValue(m_use_dot_as_decimal_separator));
    }
    return obj;
}

bool OAIX12ProcessingSettings::isConvertImpliedDecimal() const {
    return m_convert_implied_decimal;
}
void OAIX12ProcessingSettings::setConvertImpliedDecimal(const bool &convert_implied_decimal) {
    m_convert_implied_decimal = convert_implied_decimal;
    m_convert_implied_decimal_isSet = true;
}

bool OAIX12ProcessingSettings::is_convert_implied_decimal_Set() const{
    return m_convert_implied_decimal_isSet;
}

bool OAIX12ProcessingSettings::is_convert_implied_decimal_Valid() const{
    return m_convert_implied_decimal_isValid;
}

bool OAIX12ProcessingSettings::isCreateEmptyXmlTagsForTrailingSeparators() const {
    return m_create_empty_xml_tags_for_trailing_separators;
}
void OAIX12ProcessingSettings::setCreateEmptyXmlTagsForTrailingSeparators(const bool &create_empty_xml_tags_for_trailing_separators) {
    m_create_empty_xml_tags_for_trailing_separators = create_empty_xml_tags_for_trailing_separators;
    m_create_empty_xml_tags_for_trailing_separators_isSet = true;
}

bool OAIX12ProcessingSettings::is_create_empty_xml_tags_for_trailing_separators_Set() const{
    return m_create_empty_xml_tags_for_trailing_separators_isSet;
}

bool OAIX12ProcessingSettings::is_create_empty_xml_tags_for_trailing_separators_Valid() const{
    return m_create_empty_xml_tags_for_trailing_separators_isValid;
}

bool OAIX12ProcessingSettings::isMaskSecurityInfo() const {
    return m_mask_security_info;
}
void OAIX12ProcessingSettings::setMaskSecurityInfo(const bool &mask_security_info) {
    m_mask_security_info = mask_security_info;
    m_mask_security_info_isSet = true;
}

bool OAIX12ProcessingSettings::is_mask_security_info_Set() const{
    return m_mask_security_info_isSet;
}

bool OAIX12ProcessingSettings::is_mask_security_info_Valid() const{
    return m_mask_security_info_isValid;
}

bool OAIX12ProcessingSettings::isPreserveInterchange() const {
    return m_preserve_interchange;
}
void OAIX12ProcessingSettings::setPreserveInterchange(const bool &preserve_interchange) {
    m_preserve_interchange = preserve_interchange;
    m_preserve_interchange_isSet = true;
}

bool OAIX12ProcessingSettings::is_preserve_interchange_Set() const{
    return m_preserve_interchange_isSet;
}

bool OAIX12ProcessingSettings::is_preserve_interchange_Valid() const{
    return m_preserve_interchange_isValid;
}

bool OAIX12ProcessingSettings::isSuspendInterchangeOnError() const {
    return m_suspend_interchange_on_error;
}
void OAIX12ProcessingSettings::setSuspendInterchangeOnError(const bool &suspend_interchange_on_error) {
    m_suspend_interchange_on_error = suspend_interchange_on_error;
    m_suspend_interchange_on_error_isSet = true;
}

bool OAIX12ProcessingSettings::is_suspend_interchange_on_error_Set() const{
    return m_suspend_interchange_on_error_isSet;
}

bool OAIX12ProcessingSettings::is_suspend_interchange_on_error_Valid() const{
    return m_suspend_interchange_on_error_isValid;
}

bool OAIX12ProcessingSettings::isUseDotAsDecimalSeparator() const {
    return m_use_dot_as_decimal_separator;
}
void OAIX12ProcessingSettings::setUseDotAsDecimalSeparator(const bool &use_dot_as_decimal_separator) {
    m_use_dot_as_decimal_separator = use_dot_as_decimal_separator;
    m_use_dot_as_decimal_separator_isSet = true;
}

bool OAIX12ProcessingSettings::is_use_dot_as_decimal_separator_Set() const{
    return m_use_dot_as_decimal_separator_isSet;
}

bool OAIX12ProcessingSettings::is_use_dot_as_decimal_separator_Valid() const{
    return m_use_dot_as_decimal_separator_isValid;
}

bool OAIX12ProcessingSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_convert_implied_decimal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_create_empty_xml_tags_for_trailing_separators_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_security_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preserve_interchange_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suspend_interchange_on_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_dot_as_decimal_separator_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIX12ProcessingSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_convert_implied_decimal_isValid && m_create_empty_xml_tags_for_trailing_separators_isValid && m_mask_security_info_isValid && m_preserve_interchange_isValid && m_suspend_interchange_on_error_isValid && m_use_dot_as_decimal_separator_isValid && true;
}

} // namespace OpenAPI
