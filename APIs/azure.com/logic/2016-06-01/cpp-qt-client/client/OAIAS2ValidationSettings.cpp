/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAS2ValidationSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAS2ValidationSettings::OAIAS2ValidationSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAS2ValidationSettings::OAIAS2ValidationSettings() {
    this->initializeModel();
}

OAIAS2ValidationSettings::~OAIAS2ValidationSettings() {}

void OAIAS2ValidationSettings::initializeModel() {

    m_check_certificate_revocation_list_on_receive_isSet = false;
    m_check_certificate_revocation_list_on_receive_isValid = false;

    m_check_certificate_revocation_list_on_send_isSet = false;
    m_check_certificate_revocation_list_on_send_isValid = false;

    m_check_duplicate_message_isSet = false;
    m_check_duplicate_message_isValid = false;

    m_compress_message_isSet = false;
    m_compress_message_isValid = false;

    m_encrypt_message_isSet = false;
    m_encrypt_message_isValid = false;

    m_encryption_algorithm_isSet = false;
    m_encryption_algorithm_isValid = false;

    m_interchange_duplicates_validity_days_isSet = false;
    m_interchange_duplicates_validity_days_isValid = false;

    m_override_message_properties_isSet = false;
    m_override_message_properties_isValid = false;

    m_sign_message_isSet = false;
    m_sign_message_isValid = false;

    m_signing_algorithm_isSet = false;
    m_signing_algorithm_isValid = false;
}

void OAIAS2ValidationSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAS2ValidationSettings::fromJsonObject(QJsonObject json) {

    m_check_certificate_revocation_list_on_receive_isValid = ::OpenAPI::fromJsonValue(m_check_certificate_revocation_list_on_receive, json[QString("checkCertificateRevocationListOnReceive")]);
    m_check_certificate_revocation_list_on_receive_isSet = !json[QString("checkCertificateRevocationListOnReceive")].isNull() && m_check_certificate_revocation_list_on_receive_isValid;

    m_check_certificate_revocation_list_on_send_isValid = ::OpenAPI::fromJsonValue(m_check_certificate_revocation_list_on_send, json[QString("checkCertificateRevocationListOnSend")]);
    m_check_certificate_revocation_list_on_send_isSet = !json[QString("checkCertificateRevocationListOnSend")].isNull() && m_check_certificate_revocation_list_on_send_isValid;

    m_check_duplicate_message_isValid = ::OpenAPI::fromJsonValue(m_check_duplicate_message, json[QString("checkDuplicateMessage")]);
    m_check_duplicate_message_isSet = !json[QString("checkDuplicateMessage")].isNull() && m_check_duplicate_message_isValid;

    m_compress_message_isValid = ::OpenAPI::fromJsonValue(m_compress_message, json[QString("compressMessage")]);
    m_compress_message_isSet = !json[QString("compressMessage")].isNull() && m_compress_message_isValid;

    m_encrypt_message_isValid = ::OpenAPI::fromJsonValue(m_encrypt_message, json[QString("encryptMessage")]);
    m_encrypt_message_isSet = !json[QString("encryptMessage")].isNull() && m_encrypt_message_isValid;

    m_encryption_algorithm_isValid = ::OpenAPI::fromJsonValue(m_encryption_algorithm, json[QString("encryptionAlgorithm")]);
    m_encryption_algorithm_isSet = !json[QString("encryptionAlgorithm")].isNull() && m_encryption_algorithm_isValid;

    m_interchange_duplicates_validity_days_isValid = ::OpenAPI::fromJsonValue(m_interchange_duplicates_validity_days, json[QString("interchangeDuplicatesValidityDays")]);
    m_interchange_duplicates_validity_days_isSet = !json[QString("interchangeDuplicatesValidityDays")].isNull() && m_interchange_duplicates_validity_days_isValid;

    m_override_message_properties_isValid = ::OpenAPI::fromJsonValue(m_override_message_properties, json[QString("overrideMessageProperties")]);
    m_override_message_properties_isSet = !json[QString("overrideMessageProperties")].isNull() && m_override_message_properties_isValid;

    m_sign_message_isValid = ::OpenAPI::fromJsonValue(m_sign_message, json[QString("signMessage")]);
    m_sign_message_isSet = !json[QString("signMessage")].isNull() && m_sign_message_isValid;

    m_signing_algorithm_isValid = ::OpenAPI::fromJsonValue(m_signing_algorithm, json[QString("signingAlgorithm")]);
    m_signing_algorithm_isSet = !json[QString("signingAlgorithm")].isNull() && m_signing_algorithm_isValid;
}

QString OAIAS2ValidationSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAS2ValidationSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_check_certificate_revocation_list_on_receive_isSet) {
        obj.insert(QString("checkCertificateRevocationListOnReceive"), ::OpenAPI::toJsonValue(m_check_certificate_revocation_list_on_receive));
    }
    if (m_check_certificate_revocation_list_on_send_isSet) {
        obj.insert(QString("checkCertificateRevocationListOnSend"), ::OpenAPI::toJsonValue(m_check_certificate_revocation_list_on_send));
    }
    if (m_check_duplicate_message_isSet) {
        obj.insert(QString("checkDuplicateMessage"), ::OpenAPI::toJsonValue(m_check_duplicate_message));
    }
    if (m_compress_message_isSet) {
        obj.insert(QString("compressMessage"), ::OpenAPI::toJsonValue(m_compress_message));
    }
    if (m_encrypt_message_isSet) {
        obj.insert(QString("encryptMessage"), ::OpenAPI::toJsonValue(m_encrypt_message));
    }
    if (m_encryption_algorithm.isSet()) {
        obj.insert(QString("encryptionAlgorithm"), ::OpenAPI::toJsonValue(m_encryption_algorithm));
    }
    if (m_interchange_duplicates_validity_days_isSet) {
        obj.insert(QString("interchangeDuplicatesValidityDays"), ::OpenAPI::toJsonValue(m_interchange_duplicates_validity_days));
    }
    if (m_override_message_properties_isSet) {
        obj.insert(QString("overrideMessageProperties"), ::OpenAPI::toJsonValue(m_override_message_properties));
    }
    if (m_sign_message_isSet) {
        obj.insert(QString("signMessage"), ::OpenAPI::toJsonValue(m_sign_message));
    }
    if (m_signing_algorithm.isSet()) {
        obj.insert(QString("signingAlgorithm"), ::OpenAPI::toJsonValue(m_signing_algorithm));
    }
    return obj;
}

bool OAIAS2ValidationSettings::isCheckCertificateRevocationListOnReceive() const {
    return m_check_certificate_revocation_list_on_receive;
}
void OAIAS2ValidationSettings::setCheckCertificateRevocationListOnReceive(const bool &check_certificate_revocation_list_on_receive) {
    m_check_certificate_revocation_list_on_receive = check_certificate_revocation_list_on_receive;
    m_check_certificate_revocation_list_on_receive_isSet = true;
}

bool OAIAS2ValidationSettings::is_check_certificate_revocation_list_on_receive_Set() const{
    return m_check_certificate_revocation_list_on_receive_isSet;
}

bool OAIAS2ValidationSettings::is_check_certificate_revocation_list_on_receive_Valid() const{
    return m_check_certificate_revocation_list_on_receive_isValid;
}

bool OAIAS2ValidationSettings::isCheckCertificateRevocationListOnSend() const {
    return m_check_certificate_revocation_list_on_send;
}
void OAIAS2ValidationSettings::setCheckCertificateRevocationListOnSend(const bool &check_certificate_revocation_list_on_send) {
    m_check_certificate_revocation_list_on_send = check_certificate_revocation_list_on_send;
    m_check_certificate_revocation_list_on_send_isSet = true;
}

bool OAIAS2ValidationSettings::is_check_certificate_revocation_list_on_send_Set() const{
    return m_check_certificate_revocation_list_on_send_isSet;
}

bool OAIAS2ValidationSettings::is_check_certificate_revocation_list_on_send_Valid() const{
    return m_check_certificate_revocation_list_on_send_isValid;
}

bool OAIAS2ValidationSettings::isCheckDuplicateMessage() const {
    return m_check_duplicate_message;
}
void OAIAS2ValidationSettings::setCheckDuplicateMessage(const bool &check_duplicate_message) {
    m_check_duplicate_message = check_duplicate_message;
    m_check_duplicate_message_isSet = true;
}

bool OAIAS2ValidationSettings::is_check_duplicate_message_Set() const{
    return m_check_duplicate_message_isSet;
}

bool OAIAS2ValidationSettings::is_check_duplicate_message_Valid() const{
    return m_check_duplicate_message_isValid;
}

bool OAIAS2ValidationSettings::isCompressMessage() const {
    return m_compress_message;
}
void OAIAS2ValidationSettings::setCompressMessage(const bool &compress_message) {
    m_compress_message = compress_message;
    m_compress_message_isSet = true;
}

bool OAIAS2ValidationSettings::is_compress_message_Set() const{
    return m_compress_message_isSet;
}

bool OAIAS2ValidationSettings::is_compress_message_Valid() const{
    return m_compress_message_isValid;
}

bool OAIAS2ValidationSettings::isEncryptMessage() const {
    return m_encrypt_message;
}
void OAIAS2ValidationSettings::setEncryptMessage(const bool &encrypt_message) {
    m_encrypt_message = encrypt_message;
    m_encrypt_message_isSet = true;
}

bool OAIAS2ValidationSettings::is_encrypt_message_Set() const{
    return m_encrypt_message_isSet;
}

bool OAIAS2ValidationSettings::is_encrypt_message_Valid() const{
    return m_encrypt_message_isValid;
}

OAIEncryptionAlgorithm OAIAS2ValidationSettings::getEncryptionAlgorithm() const {
    return m_encryption_algorithm;
}
void OAIAS2ValidationSettings::setEncryptionAlgorithm(const OAIEncryptionAlgorithm &encryption_algorithm) {
    m_encryption_algorithm = encryption_algorithm;
    m_encryption_algorithm_isSet = true;
}

bool OAIAS2ValidationSettings::is_encryption_algorithm_Set() const{
    return m_encryption_algorithm_isSet;
}

bool OAIAS2ValidationSettings::is_encryption_algorithm_Valid() const{
    return m_encryption_algorithm_isValid;
}

qint32 OAIAS2ValidationSettings::getInterchangeDuplicatesValidityDays() const {
    return m_interchange_duplicates_validity_days;
}
void OAIAS2ValidationSettings::setInterchangeDuplicatesValidityDays(const qint32 &interchange_duplicates_validity_days) {
    m_interchange_duplicates_validity_days = interchange_duplicates_validity_days;
    m_interchange_duplicates_validity_days_isSet = true;
}

bool OAIAS2ValidationSettings::is_interchange_duplicates_validity_days_Set() const{
    return m_interchange_duplicates_validity_days_isSet;
}

bool OAIAS2ValidationSettings::is_interchange_duplicates_validity_days_Valid() const{
    return m_interchange_duplicates_validity_days_isValid;
}

bool OAIAS2ValidationSettings::isOverrideMessageProperties() const {
    return m_override_message_properties;
}
void OAIAS2ValidationSettings::setOverrideMessageProperties(const bool &override_message_properties) {
    m_override_message_properties = override_message_properties;
    m_override_message_properties_isSet = true;
}

bool OAIAS2ValidationSettings::is_override_message_properties_Set() const{
    return m_override_message_properties_isSet;
}

bool OAIAS2ValidationSettings::is_override_message_properties_Valid() const{
    return m_override_message_properties_isValid;
}

bool OAIAS2ValidationSettings::isSignMessage() const {
    return m_sign_message;
}
void OAIAS2ValidationSettings::setSignMessage(const bool &sign_message) {
    m_sign_message = sign_message;
    m_sign_message_isSet = true;
}

bool OAIAS2ValidationSettings::is_sign_message_Set() const{
    return m_sign_message_isSet;
}

bool OAIAS2ValidationSettings::is_sign_message_Valid() const{
    return m_sign_message_isValid;
}

OAISigningAlgorithm OAIAS2ValidationSettings::getSigningAlgorithm() const {
    return m_signing_algorithm;
}
void OAIAS2ValidationSettings::setSigningAlgorithm(const OAISigningAlgorithm &signing_algorithm) {
    m_signing_algorithm = signing_algorithm;
    m_signing_algorithm_isSet = true;
}

bool OAIAS2ValidationSettings::is_signing_algorithm_Set() const{
    return m_signing_algorithm_isSet;
}

bool OAIAS2ValidationSettings::is_signing_algorithm_Valid() const{
    return m_signing_algorithm_isValid;
}

bool OAIAS2ValidationSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_check_certificate_revocation_list_on_receive_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_certificate_revocation_list_on_send_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_check_duplicate_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compress_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encrypt_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_encryption_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_interchange_duplicates_validity_days_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_override_message_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sign_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signing_algorithm.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAS2ValidationSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_check_certificate_revocation_list_on_receive_isValid && m_check_certificate_revocation_list_on_send_isValid && m_check_duplicate_message_isValid && m_compress_message_isValid && m_encrypt_message_isValid && m_encryption_algorithm_isValid && m_interchange_duplicates_validity_days_isValid && m_override_message_properties_isValid && m_sign_message_isValid && true;
}

} // namespace OpenAPI
