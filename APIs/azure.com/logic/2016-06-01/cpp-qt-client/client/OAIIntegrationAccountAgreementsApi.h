/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIIntegrationAccountAgreementsApi_H
#define OAI_OAIIntegrationAccountAgreementsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetCallbackUrlParameters.h"
#include "OAIIntegrationAccountAgreement.h"
#include "OAIIntegrationAccountAgreementListResult.h"
#include "OAIWorkflowTriggerCallbackUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIIntegrationAccountAgreementsApi : public QObject {
    Q_OBJECT

public:
    OAIIntegrationAccountAgreementsApi(const int timeOut = 0);
    ~OAIIntegrationAccountAgreementsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  agreement_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  agreement OAIIntegrationAccountAgreement [required]
    */
    virtual void agreementsCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &agreement_name, const QString &api_version, const OAIIntegrationAccountAgreement &agreement);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  agreement_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void agreementsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &agreement_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  agreement_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void agreementsGet(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &agreement_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  top qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void agreementsListByIntegrationAccounts(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &api_version, const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  integration_account_name QString [required]
    * @param[in]  agreement_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  list_content_callback_url OAIGetCallbackUrlParameters [required]
    */
    virtual void agreementsListContentCallbackUrl(const QString &subscription_id, const QString &resource_group_name, const QString &integration_account_name, const QString &agreement_name, const QString &api_version, const OAIGetCallbackUrlParameters &list_content_callback_url);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void agreementsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void agreementsDeleteCallback(OAIHttpRequestWorker *worker);
    void agreementsGetCallback(OAIHttpRequestWorker *worker);
    void agreementsListByIntegrationAccountsCallback(OAIHttpRequestWorker *worker);
    void agreementsListContentCallbackUrlCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void agreementsCreateOrUpdateSignal(OAIIntegrationAccountAgreement summary);
    void agreementsDeleteSignal();
    void agreementsGetSignal(OAIIntegrationAccountAgreement summary);
    void agreementsListByIntegrationAccountsSignal(OAIIntegrationAccountAgreementListResult summary);
    void agreementsListContentCallbackUrlSignal(OAIWorkflowTriggerCallbackUrl summary);


    void agreementsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountAgreement summary);
    void agreementsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void agreementsGetSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountAgreement summary);
    void agreementsListByIntegrationAccountsSignalFull(OAIHttpRequestWorker *worker, OAIIntegrationAccountAgreementListResult summary);
    void agreementsListContentCallbackUrlSignalFull(OAIHttpRequestWorker *worker, OAIWorkflowTriggerCallbackUrl summary);

    Q_DECL_DEPRECATED_X("Use agreementsCreateOrUpdateSignalError() instead")
    void agreementsCreateOrUpdateSignalE(OAIIntegrationAccountAgreement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsCreateOrUpdateSignalError(OAIIntegrationAccountAgreement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsDeleteSignalError() instead")
    void agreementsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsGetSignalError() instead")
    void agreementsGetSignalE(OAIIntegrationAccountAgreement summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsGetSignalError(OAIIntegrationAccountAgreement summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsListByIntegrationAccountsSignalError() instead")
    void agreementsListByIntegrationAccountsSignalE(OAIIntegrationAccountAgreementListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsListByIntegrationAccountsSignalError(OAIIntegrationAccountAgreementListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsListContentCallbackUrlSignalError() instead")
    void agreementsListContentCallbackUrlSignalE(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsListContentCallbackUrlSignalError(OAIWorkflowTriggerCallbackUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use agreementsCreateOrUpdateSignalErrorFull() instead")
    void agreementsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsDeleteSignalErrorFull() instead")
    void agreementsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsGetSignalErrorFull() instead")
    void agreementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsListByIntegrationAccountsSignalErrorFull() instead")
    void agreementsListByIntegrationAccountsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsListByIntegrationAccountsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use agreementsListContentCallbackUrlSignalErrorFull() instead")
    void agreementsListContentCallbackUrlSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void agreementsListContentCallbackUrlSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
