/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEdifactOneWayAgreement.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEdifactOneWayAgreement::OAIEdifactOneWayAgreement(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEdifactOneWayAgreement::OAIEdifactOneWayAgreement() {
    this->initializeModel();
}

OAIEdifactOneWayAgreement::~OAIEdifactOneWayAgreement() {}

void OAIEdifactOneWayAgreement::initializeModel() {

    m_protocol_settings_isSet = false;
    m_protocol_settings_isValid = false;

    m_receiver_business_identity_isSet = false;
    m_receiver_business_identity_isValid = false;

    m_sender_business_identity_isSet = false;
    m_sender_business_identity_isValid = false;
}

void OAIEdifactOneWayAgreement::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEdifactOneWayAgreement::fromJsonObject(QJsonObject json) {

    m_protocol_settings_isValid = ::OpenAPI::fromJsonValue(m_protocol_settings, json[QString("protocolSettings")]);
    m_protocol_settings_isSet = !json[QString("protocolSettings")].isNull() && m_protocol_settings_isValid;

    m_receiver_business_identity_isValid = ::OpenAPI::fromJsonValue(m_receiver_business_identity, json[QString("receiverBusinessIdentity")]);
    m_receiver_business_identity_isSet = !json[QString("receiverBusinessIdentity")].isNull() && m_receiver_business_identity_isValid;

    m_sender_business_identity_isValid = ::OpenAPI::fromJsonValue(m_sender_business_identity, json[QString("senderBusinessIdentity")]);
    m_sender_business_identity_isSet = !json[QString("senderBusinessIdentity")].isNull() && m_sender_business_identity_isValid;
}

QString OAIEdifactOneWayAgreement::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEdifactOneWayAgreement::asJsonObject() const {
    QJsonObject obj;
    if (m_protocol_settings.isSet()) {
        obj.insert(QString("protocolSettings"), ::OpenAPI::toJsonValue(m_protocol_settings));
    }
    if (m_receiver_business_identity.isSet()) {
        obj.insert(QString("receiverBusinessIdentity"), ::OpenAPI::toJsonValue(m_receiver_business_identity));
    }
    if (m_sender_business_identity.isSet()) {
        obj.insert(QString("senderBusinessIdentity"), ::OpenAPI::toJsonValue(m_sender_business_identity));
    }
    return obj;
}

OAIEdifactProtocolSettings OAIEdifactOneWayAgreement::getProtocolSettings() const {
    return m_protocol_settings;
}
void OAIEdifactOneWayAgreement::setProtocolSettings(const OAIEdifactProtocolSettings &protocol_settings) {
    m_protocol_settings = protocol_settings;
    m_protocol_settings_isSet = true;
}

bool OAIEdifactOneWayAgreement::is_protocol_settings_Set() const{
    return m_protocol_settings_isSet;
}

bool OAIEdifactOneWayAgreement::is_protocol_settings_Valid() const{
    return m_protocol_settings_isValid;
}

OAIBusinessIdentity OAIEdifactOneWayAgreement::getReceiverBusinessIdentity() const {
    return m_receiver_business_identity;
}
void OAIEdifactOneWayAgreement::setReceiverBusinessIdentity(const OAIBusinessIdentity &receiver_business_identity) {
    m_receiver_business_identity = receiver_business_identity;
    m_receiver_business_identity_isSet = true;
}

bool OAIEdifactOneWayAgreement::is_receiver_business_identity_Set() const{
    return m_receiver_business_identity_isSet;
}

bool OAIEdifactOneWayAgreement::is_receiver_business_identity_Valid() const{
    return m_receiver_business_identity_isValid;
}

OAIBusinessIdentity OAIEdifactOneWayAgreement::getSenderBusinessIdentity() const {
    return m_sender_business_identity;
}
void OAIEdifactOneWayAgreement::setSenderBusinessIdentity(const OAIBusinessIdentity &sender_business_identity) {
    m_sender_business_identity = sender_business_identity;
    m_sender_business_identity_isSet = true;
}

bool OAIEdifactOneWayAgreement::is_sender_business_identity_Set() const{
    return m_sender_business_identity_isSet;
}

bool OAIEdifactOneWayAgreement::is_sender_business_identity_Valid() const{
    return m_sender_business_identity_isValid;
}

bool OAIEdifactOneWayAgreement::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_protocol_settings.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_receiver_business_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sender_business_identity.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEdifactOneWayAgreement::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_protocol_settings_isValid && m_receiver_business_identity_isValid && m_sender_business_identity_isValid && true;
}

} // namespace OpenAPI
