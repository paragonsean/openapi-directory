/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRosettaNetPipActivityBehavior.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRosettaNetPipActivityBehavior::OAIRosettaNetPipActivityBehavior(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRosettaNetPipActivityBehavior::OAIRosettaNetPipActivityBehavior() {
    this->initializeModel();
}

OAIRosettaNetPipActivityBehavior::~OAIRosettaNetPipActivityBehavior() {}

void OAIRosettaNetPipActivityBehavior::initializeModel() {

    m_action_type_isSet = false;
    m_action_type_isValid = false;

    m_is_authorization_required_isSet = false;
    m_is_authorization_required_isValid = false;

    m_is_secured_transport_required_isSet = false;
    m_is_secured_transport_required_isValid = false;

    m_non_repudiation_of_origin_and_content_isSet = false;
    m_non_repudiation_of_origin_and_content_isValid = false;

    m_persistent_confidentiality_scope_isSet = false;
    m_persistent_confidentiality_scope_isValid = false;

    m_response_type_isSet = false;
    m_response_type_isValid = false;

    m_retry_count_isSet = false;
    m_retry_count_isValid = false;

    m_time_to_perform_in_seconds_isSet = false;
    m_time_to_perform_in_seconds_isValid = false;
}

void OAIRosettaNetPipActivityBehavior::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRosettaNetPipActivityBehavior::fromJsonObject(QJsonObject json) {

    m_action_type_isValid = ::OpenAPI::fromJsonValue(m_action_type, json[QString("actionType")]);
    m_action_type_isSet = !json[QString("actionType")].isNull() && m_action_type_isValid;

    m_is_authorization_required_isValid = ::OpenAPI::fromJsonValue(m_is_authorization_required, json[QString("isAuthorizationRequired")]);
    m_is_authorization_required_isSet = !json[QString("isAuthorizationRequired")].isNull() && m_is_authorization_required_isValid;

    m_is_secured_transport_required_isValid = ::OpenAPI::fromJsonValue(m_is_secured_transport_required, json[QString("isSecuredTransportRequired")]);
    m_is_secured_transport_required_isSet = !json[QString("isSecuredTransportRequired")].isNull() && m_is_secured_transport_required_isValid;

    m_non_repudiation_of_origin_and_content_isValid = ::OpenAPI::fromJsonValue(m_non_repudiation_of_origin_and_content, json[QString("nonRepudiationOfOriginAndContent")]);
    m_non_repudiation_of_origin_and_content_isSet = !json[QString("nonRepudiationOfOriginAndContent")].isNull() && m_non_repudiation_of_origin_and_content_isValid;

    m_persistent_confidentiality_scope_isValid = ::OpenAPI::fromJsonValue(m_persistent_confidentiality_scope, json[QString("persistentConfidentialityScope")]);
    m_persistent_confidentiality_scope_isSet = !json[QString("persistentConfidentialityScope")].isNull() && m_persistent_confidentiality_scope_isValid;

    m_response_type_isValid = ::OpenAPI::fromJsonValue(m_response_type, json[QString("responseType")]);
    m_response_type_isSet = !json[QString("responseType")].isNull() && m_response_type_isValid;

    m_retry_count_isValid = ::OpenAPI::fromJsonValue(m_retry_count, json[QString("retryCount")]);
    m_retry_count_isSet = !json[QString("retryCount")].isNull() && m_retry_count_isValid;

    m_time_to_perform_in_seconds_isValid = ::OpenAPI::fromJsonValue(m_time_to_perform_in_seconds, json[QString("timeToPerformInSeconds")]);
    m_time_to_perform_in_seconds_isSet = !json[QString("timeToPerformInSeconds")].isNull() && m_time_to_perform_in_seconds_isValid;
}

QString OAIRosettaNetPipActivityBehavior::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRosettaNetPipActivityBehavior::asJsonObject() const {
    QJsonObject obj;
    if (m_action_type.isSet()) {
        obj.insert(QString("actionType"), ::OpenAPI::toJsonValue(m_action_type));
    }
    if (m_is_authorization_required_isSet) {
        obj.insert(QString("isAuthorizationRequired"), ::OpenAPI::toJsonValue(m_is_authorization_required));
    }
    if (m_is_secured_transport_required_isSet) {
        obj.insert(QString("isSecuredTransportRequired"), ::OpenAPI::toJsonValue(m_is_secured_transport_required));
    }
    if (m_non_repudiation_of_origin_and_content_isSet) {
        obj.insert(QString("nonRepudiationOfOriginAndContent"), ::OpenAPI::toJsonValue(m_non_repudiation_of_origin_and_content));
    }
    if (m_persistent_confidentiality_scope.isSet()) {
        obj.insert(QString("persistentConfidentialityScope"), ::OpenAPI::toJsonValue(m_persistent_confidentiality_scope));
    }
    if (m_response_type.isSet()) {
        obj.insert(QString("responseType"), ::OpenAPI::toJsonValue(m_response_type));
    }
    if (m_retry_count_isSet) {
        obj.insert(QString("retryCount"), ::OpenAPI::toJsonValue(m_retry_count));
    }
    if (m_time_to_perform_in_seconds_isSet) {
        obj.insert(QString("timeToPerformInSeconds"), ::OpenAPI::toJsonValue(m_time_to_perform_in_seconds));
    }
    return obj;
}

OAIRosettaNetActionType OAIRosettaNetPipActivityBehavior::getActionType() const {
    return m_action_type;
}
void OAIRosettaNetPipActivityBehavior::setActionType(const OAIRosettaNetActionType &action_type) {
    m_action_type = action_type;
    m_action_type_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_action_type_Set() const{
    return m_action_type_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_action_type_Valid() const{
    return m_action_type_isValid;
}

bool OAIRosettaNetPipActivityBehavior::isIsAuthorizationRequired() const {
    return m_is_authorization_required;
}
void OAIRosettaNetPipActivityBehavior::setIsAuthorizationRequired(const bool &is_authorization_required) {
    m_is_authorization_required = is_authorization_required;
    m_is_authorization_required_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_is_authorization_required_Set() const{
    return m_is_authorization_required_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_is_authorization_required_Valid() const{
    return m_is_authorization_required_isValid;
}

bool OAIRosettaNetPipActivityBehavior::isIsSecuredTransportRequired() const {
    return m_is_secured_transport_required;
}
void OAIRosettaNetPipActivityBehavior::setIsSecuredTransportRequired(const bool &is_secured_transport_required) {
    m_is_secured_transport_required = is_secured_transport_required;
    m_is_secured_transport_required_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_is_secured_transport_required_Set() const{
    return m_is_secured_transport_required_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_is_secured_transport_required_Valid() const{
    return m_is_secured_transport_required_isValid;
}

bool OAIRosettaNetPipActivityBehavior::isNonRepudiationOfOriginAndContent() const {
    return m_non_repudiation_of_origin_and_content;
}
void OAIRosettaNetPipActivityBehavior::setNonRepudiationOfOriginAndContent(const bool &non_repudiation_of_origin_and_content) {
    m_non_repudiation_of_origin_and_content = non_repudiation_of_origin_and_content;
    m_non_repudiation_of_origin_and_content_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_non_repudiation_of_origin_and_content_Set() const{
    return m_non_repudiation_of_origin_and_content_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_non_repudiation_of_origin_and_content_Valid() const{
    return m_non_repudiation_of_origin_and_content_isValid;
}

OAIRosettaNetPipConfidentialityScope OAIRosettaNetPipActivityBehavior::getPersistentConfidentialityScope() const {
    return m_persistent_confidentiality_scope;
}
void OAIRosettaNetPipActivityBehavior::setPersistentConfidentialityScope(const OAIRosettaNetPipConfidentialityScope &persistent_confidentiality_scope) {
    m_persistent_confidentiality_scope = persistent_confidentiality_scope;
    m_persistent_confidentiality_scope_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_persistent_confidentiality_scope_Set() const{
    return m_persistent_confidentiality_scope_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_persistent_confidentiality_scope_Valid() const{
    return m_persistent_confidentiality_scope_isValid;
}

OAIRosettaNetResponseType OAIRosettaNetPipActivityBehavior::getResponseType() const {
    return m_response_type;
}
void OAIRosettaNetPipActivityBehavior::setResponseType(const OAIRosettaNetResponseType &response_type) {
    m_response_type = response_type;
    m_response_type_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_response_type_Set() const{
    return m_response_type_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_response_type_Valid() const{
    return m_response_type_isValid;
}

qint32 OAIRosettaNetPipActivityBehavior::getRetryCount() const {
    return m_retry_count;
}
void OAIRosettaNetPipActivityBehavior::setRetryCount(const qint32 &retry_count) {
    m_retry_count = retry_count;
    m_retry_count_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_retry_count_Set() const{
    return m_retry_count_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_retry_count_Valid() const{
    return m_retry_count_isValid;
}

qint32 OAIRosettaNetPipActivityBehavior::getTimeToPerformInSeconds() const {
    return m_time_to_perform_in_seconds;
}
void OAIRosettaNetPipActivityBehavior::setTimeToPerformInSeconds(const qint32 &time_to_perform_in_seconds) {
    m_time_to_perform_in_seconds = time_to_perform_in_seconds;
    m_time_to_perform_in_seconds_isSet = true;
}

bool OAIRosettaNetPipActivityBehavior::is_time_to_perform_in_seconds_Set() const{
    return m_time_to_perform_in_seconds_isSet;
}

bool OAIRosettaNetPipActivityBehavior::is_time_to_perform_in_seconds_Valid() const{
    return m_time_to_perform_in_seconds_isValid;
}

bool OAIRosettaNetPipActivityBehavior::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_authorization_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_secured_transport_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_non_repudiation_of_origin_and_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_persistent_confidentiality_scope.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_response_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_retry_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_to_perform_in_seconds_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRosettaNetPipActivityBehavior::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_action_type_isValid && m_is_authorization_required_isValid && m_is_secured_transport_required_isValid && m_non_repudiation_of_origin_and_content_isValid && m_persistent_confidentiality_scope_isValid && m_response_type_isValid && m_retry_count_isValid && m_time_to_perform_in_seconds_isValid && true;
}

} // namespace OpenAPI
