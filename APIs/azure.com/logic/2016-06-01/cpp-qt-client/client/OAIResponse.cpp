/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResponse::OAIResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResponse::OAIResponse() {
    this->initializeModel();
}

OAIResponse::~OAIResponse() {}

void OAIResponse::initializeModel() {

    m_body_link_isSet = false;
    m_body_link_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_status_code_isSet = false;
    m_status_code_isValid = false;
}

void OAIResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResponse::fromJsonObject(QJsonObject json) {

    m_body_link_isValid = ::OpenAPI::fromJsonValue(m_body_link, json[QString("bodyLink")]);
    m_body_link_isSet = !json[QString("bodyLink")].isNull() && m_body_link_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_status_code_isValid = ::OpenAPI::fromJsonValue(m_status_code, json[QString("statusCode")]);
    m_status_code_isSet = !json[QString("statusCode")].isNull() && m_status_code_isValid;
}

QString OAIResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_body_link.isSet()) {
        obj.insert(QString("bodyLink"), ::OpenAPI::toJsonValue(m_body_link));
    }
    if (m_headers_isSet) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_status_code_isSet) {
        obj.insert(QString("statusCode"), ::OpenAPI::toJsonValue(m_status_code));
    }
    return obj;
}

OAIContentLink OAIResponse::getBodyLink() const {
    return m_body_link;
}
void OAIResponse::setBodyLink(const OAIContentLink &body_link) {
    m_body_link = body_link;
    m_body_link_isSet = true;
}

bool OAIResponse::is_body_link_Set() const{
    return m_body_link_isSet;
}

bool OAIResponse::is_body_link_Valid() const{
    return m_body_link_isValid;
}

OAIObject OAIResponse::getHeaders() const {
    return m_headers;
}
void OAIResponse::setHeaders(const OAIObject &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIResponse::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIResponse::is_headers_Valid() const{
    return m_headers_isValid;
}

qint32 OAIResponse::getStatusCode() const {
    return m_status_code;
}
void OAIResponse::setStatusCode(const qint32 &status_code) {
    m_status_code = status_code;
    m_status_code_isSet = true;
}

bool OAIResponse::is_status_code_Set() const{
    return m_status_code_isSet;
}

bool OAIResponse::is_status_code_Valid() const{
    return m_status_code_isValid;
}

bool OAIResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_link.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
