/**
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITrackingEvent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITrackingEvent::OAITrackingEvent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITrackingEvent::OAITrackingEvent() {
    this->initializeModel();
}

OAITrackingEvent::~OAITrackingEvent() {}

void OAITrackingEvent::initializeModel() {

    m_error_isSet = false;
    m_error_isValid = false;

    m_event_level_isSet = false;
    m_event_level_isValid = false;

    m_event_time_isSet = false;
    m_event_time_isValid = false;

    m_record_type_isSet = false;
    m_record_type_isValid = false;
}

void OAITrackingEvent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITrackingEvent::fromJsonObject(QJsonObject json) {

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_event_level_isValid = ::OpenAPI::fromJsonValue(m_event_level, json[QString("eventLevel")]);
    m_event_level_isSet = !json[QString("eventLevel")].isNull() && m_event_level_isValid;

    m_event_time_isValid = ::OpenAPI::fromJsonValue(m_event_time, json[QString("eventTime")]);
    m_event_time_isSet = !json[QString("eventTime")].isNull() && m_event_time_isValid;

    m_record_type_isValid = ::OpenAPI::fromJsonValue(m_record_type, json[QString("recordType")]);
    m_record_type_isSet = !json[QString("recordType")].isNull() && m_record_type_isValid;
}

QString OAITrackingEvent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITrackingEvent::asJsonObject() const {
    QJsonObject obj;
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_event_level.isSet()) {
        obj.insert(QString("eventLevel"), ::OpenAPI::toJsonValue(m_event_level));
    }
    if (m_event_time_isSet) {
        obj.insert(QString("eventTime"), ::OpenAPI::toJsonValue(m_event_time));
    }
    if (m_record_type.isSet()) {
        obj.insert(QString("recordType"), ::OpenAPI::toJsonValue(m_record_type));
    }
    return obj;
}

OAITrackingEventErrorInfo OAITrackingEvent::getError() const {
    return m_error;
}
void OAITrackingEvent::setError(const OAITrackingEventErrorInfo &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAITrackingEvent::is_error_Set() const{
    return m_error_isSet;
}

bool OAITrackingEvent::is_error_Valid() const{
    return m_error_isValid;
}

OAIEventLevel OAITrackingEvent::getEventLevel() const {
    return m_event_level;
}
void OAITrackingEvent::setEventLevel(const OAIEventLevel &event_level) {
    m_event_level = event_level;
    m_event_level_isSet = true;
}

bool OAITrackingEvent::is_event_level_Set() const{
    return m_event_level_isSet;
}

bool OAITrackingEvent::is_event_level_Valid() const{
    return m_event_level_isValid;
}

QDateTime OAITrackingEvent::getEventTime() const {
    return m_event_time;
}
void OAITrackingEvent::setEventTime(const QDateTime &event_time) {
    m_event_time = event_time;
    m_event_time_isSet = true;
}

bool OAITrackingEvent::is_event_time_Set() const{
    return m_event_time_isSet;
}

bool OAITrackingEvent::is_event_time_Valid() const{
    return m_event_time_isValid;
}

OAITrackingRecordType OAITrackingEvent::getRecordType() const {
    return m_record_type;
}
void OAITrackingEvent::setRecordType(const OAITrackingRecordType &record_type) {
    m_record_type = record_type;
    m_record_type_isSet = true;
}

bool OAITrackingEvent::is_record_type_Set() const{
    return m_record_type_isSet;
}

bool OAITrackingEvent::is_record_type_Valid() const{
    return m_record_type_isValid;
}

bool OAITrackingEvent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_level.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_record_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITrackingEvent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_event_level_isValid && m_event_time_isValid && m_record_type_isValid && true;
}

} // namespace OpenAPI
