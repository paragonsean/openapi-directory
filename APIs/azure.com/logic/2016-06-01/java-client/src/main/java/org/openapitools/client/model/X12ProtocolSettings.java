/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.X12AcknowledgementSettings;
import org.openapitools.client.model.X12DelimiterOverrides;
import org.openapitools.client.model.X12EnvelopeOverride;
import org.openapitools.client.model.X12EnvelopeSettings;
import org.openapitools.client.model.X12FramingSettings;
import org.openapitools.client.model.X12MessageFilter;
import org.openapitools.client.model.X12MessageIdentifier;
import org.openapitools.client.model.X12ProcessingSettings;
import org.openapitools.client.model.X12SchemaReference;
import org.openapitools.client.model.X12SecuritySettings;
import org.openapitools.client.model.X12ValidationOverride;
import org.openapitools.client.model.X12ValidationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The X12 agreement protocol settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X12ProtocolSettings {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_SETTINGS = "acknowledgementSettings";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_SETTINGS)
  private X12AcknowledgementSettings acknowledgementSettings;

  public static final String SERIALIZED_NAME_ENVELOPE_OVERRIDES = "envelopeOverrides";
  @SerializedName(SERIALIZED_NAME_ENVELOPE_OVERRIDES)
  private List<X12EnvelopeOverride> envelopeOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVELOPE_SETTINGS = "envelopeSettings";
  @SerializedName(SERIALIZED_NAME_ENVELOPE_SETTINGS)
  private X12EnvelopeSettings envelopeSettings;

  public static final String SERIALIZED_NAME_FRAMING_SETTINGS = "framingSettings";
  @SerializedName(SERIALIZED_NAME_FRAMING_SETTINGS)
  private X12FramingSettings framingSettings;

  public static final String SERIALIZED_NAME_MESSAGE_FILTER = "messageFilter";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FILTER)
  private X12MessageFilter messageFilter;

  public static final String SERIALIZED_NAME_MESSAGE_FILTER_LIST = "messageFilterList";
  @SerializedName(SERIALIZED_NAME_MESSAGE_FILTER_LIST)
  private List<X12MessageIdentifier> messageFilterList = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROCESSING_SETTINGS = "processingSettings";
  @SerializedName(SERIALIZED_NAME_PROCESSING_SETTINGS)
  private X12ProcessingSettings processingSettings;

  public static final String SERIALIZED_NAME_SCHEMA_REFERENCES = "schemaReferences";
  @SerializedName(SERIALIZED_NAME_SCHEMA_REFERENCES)
  private List<X12SchemaReference> schemaReferences = new ArrayList<>();

  public static final String SERIALIZED_NAME_SECURITY_SETTINGS = "securitySettings";
  @SerializedName(SERIALIZED_NAME_SECURITY_SETTINGS)
  private X12SecuritySettings securitySettings;

  public static final String SERIALIZED_NAME_VALIDATION_OVERRIDES = "validationOverrides";
  @SerializedName(SERIALIZED_NAME_VALIDATION_OVERRIDES)
  private List<X12ValidationOverride> validationOverrides = new ArrayList<>();

  public static final String SERIALIZED_NAME_VALIDATION_SETTINGS = "validationSettings";
  @SerializedName(SERIALIZED_NAME_VALIDATION_SETTINGS)
  private X12ValidationSettings validationSettings;

  public static final String SERIALIZED_NAME_X12_DELIMITER_OVERRIDES = "x12DelimiterOverrides";
  @SerializedName(SERIALIZED_NAME_X12_DELIMITER_OVERRIDES)
  private List<X12DelimiterOverrides> x12DelimiterOverrides = new ArrayList<>();

  public X12ProtocolSettings() {
  }

  public X12ProtocolSettings acknowledgementSettings(X12AcknowledgementSettings acknowledgementSettings) {
    this.acknowledgementSettings = acknowledgementSettings;
    return this;
  }

  /**
   * Get acknowledgementSettings
   * @return acknowledgementSettings
   */
  @javax.annotation.Nonnull
  public X12AcknowledgementSettings getAcknowledgementSettings() {
    return acknowledgementSettings;
  }

  public void setAcknowledgementSettings(X12AcknowledgementSettings acknowledgementSettings) {
    this.acknowledgementSettings = acknowledgementSettings;
  }


  public X12ProtocolSettings envelopeOverrides(List<X12EnvelopeOverride> envelopeOverrides) {
    this.envelopeOverrides = envelopeOverrides;
    return this;
  }

  public X12ProtocolSettings addEnvelopeOverridesItem(X12EnvelopeOverride envelopeOverridesItem) {
    if (this.envelopeOverrides == null) {
      this.envelopeOverrides = new ArrayList<>();
    }
    this.envelopeOverrides.add(envelopeOverridesItem);
    return this;
  }

  /**
   * The X12 envelope override settings.
   * @return envelopeOverrides
   */
  @javax.annotation.Nullable
  public List<X12EnvelopeOverride> getEnvelopeOverrides() {
    return envelopeOverrides;
  }

  public void setEnvelopeOverrides(List<X12EnvelopeOverride> envelopeOverrides) {
    this.envelopeOverrides = envelopeOverrides;
  }


  public X12ProtocolSettings envelopeSettings(X12EnvelopeSettings envelopeSettings) {
    this.envelopeSettings = envelopeSettings;
    return this;
  }

  /**
   * Get envelopeSettings
   * @return envelopeSettings
   */
  @javax.annotation.Nonnull
  public X12EnvelopeSettings getEnvelopeSettings() {
    return envelopeSettings;
  }

  public void setEnvelopeSettings(X12EnvelopeSettings envelopeSettings) {
    this.envelopeSettings = envelopeSettings;
  }


  public X12ProtocolSettings framingSettings(X12FramingSettings framingSettings) {
    this.framingSettings = framingSettings;
    return this;
  }

  /**
   * Get framingSettings
   * @return framingSettings
   */
  @javax.annotation.Nonnull
  public X12FramingSettings getFramingSettings() {
    return framingSettings;
  }

  public void setFramingSettings(X12FramingSettings framingSettings) {
    this.framingSettings = framingSettings;
  }


  public X12ProtocolSettings messageFilter(X12MessageFilter messageFilter) {
    this.messageFilter = messageFilter;
    return this;
  }

  /**
   * Get messageFilter
   * @return messageFilter
   */
  @javax.annotation.Nonnull
  public X12MessageFilter getMessageFilter() {
    return messageFilter;
  }

  public void setMessageFilter(X12MessageFilter messageFilter) {
    this.messageFilter = messageFilter;
  }


  public X12ProtocolSettings messageFilterList(List<X12MessageIdentifier> messageFilterList) {
    this.messageFilterList = messageFilterList;
    return this;
  }

  public X12ProtocolSettings addMessageFilterListItem(X12MessageIdentifier messageFilterListItem) {
    if (this.messageFilterList == null) {
      this.messageFilterList = new ArrayList<>();
    }
    this.messageFilterList.add(messageFilterListItem);
    return this;
  }

  /**
   * The X12 message filter list.
   * @return messageFilterList
   */
  @javax.annotation.Nullable
  public List<X12MessageIdentifier> getMessageFilterList() {
    return messageFilterList;
  }

  public void setMessageFilterList(List<X12MessageIdentifier> messageFilterList) {
    this.messageFilterList = messageFilterList;
  }


  public X12ProtocolSettings processingSettings(X12ProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
    return this;
  }

  /**
   * Get processingSettings
   * @return processingSettings
   */
  @javax.annotation.Nonnull
  public X12ProcessingSettings getProcessingSettings() {
    return processingSettings;
  }

  public void setProcessingSettings(X12ProcessingSettings processingSettings) {
    this.processingSettings = processingSettings;
  }


  public X12ProtocolSettings schemaReferences(List<X12SchemaReference> schemaReferences) {
    this.schemaReferences = schemaReferences;
    return this;
  }

  public X12ProtocolSettings addSchemaReferencesItem(X12SchemaReference schemaReferencesItem) {
    if (this.schemaReferences == null) {
      this.schemaReferences = new ArrayList<>();
    }
    this.schemaReferences.add(schemaReferencesItem);
    return this;
  }

  /**
   * The X12 schema references.
   * @return schemaReferences
   */
  @javax.annotation.Nonnull
  public List<X12SchemaReference> getSchemaReferences() {
    return schemaReferences;
  }

  public void setSchemaReferences(List<X12SchemaReference> schemaReferences) {
    this.schemaReferences = schemaReferences;
  }


  public X12ProtocolSettings securitySettings(X12SecuritySettings securitySettings) {
    this.securitySettings = securitySettings;
    return this;
  }

  /**
   * Get securitySettings
   * @return securitySettings
   */
  @javax.annotation.Nonnull
  public X12SecuritySettings getSecuritySettings() {
    return securitySettings;
  }

  public void setSecuritySettings(X12SecuritySettings securitySettings) {
    this.securitySettings = securitySettings;
  }


  public X12ProtocolSettings validationOverrides(List<X12ValidationOverride> validationOverrides) {
    this.validationOverrides = validationOverrides;
    return this;
  }

  public X12ProtocolSettings addValidationOverridesItem(X12ValidationOverride validationOverridesItem) {
    if (this.validationOverrides == null) {
      this.validationOverrides = new ArrayList<>();
    }
    this.validationOverrides.add(validationOverridesItem);
    return this;
  }

  /**
   * The X12 validation override settings.
   * @return validationOverrides
   */
  @javax.annotation.Nullable
  public List<X12ValidationOverride> getValidationOverrides() {
    return validationOverrides;
  }

  public void setValidationOverrides(List<X12ValidationOverride> validationOverrides) {
    this.validationOverrides = validationOverrides;
  }


  public X12ProtocolSettings validationSettings(X12ValidationSettings validationSettings) {
    this.validationSettings = validationSettings;
    return this;
  }

  /**
   * Get validationSettings
   * @return validationSettings
   */
  @javax.annotation.Nonnull
  public X12ValidationSettings getValidationSettings() {
    return validationSettings;
  }

  public void setValidationSettings(X12ValidationSettings validationSettings) {
    this.validationSettings = validationSettings;
  }


  public X12ProtocolSettings x12DelimiterOverrides(List<X12DelimiterOverrides> x12DelimiterOverrides) {
    this.x12DelimiterOverrides = x12DelimiterOverrides;
    return this;
  }

  public X12ProtocolSettings addX12DelimiterOverridesItem(X12DelimiterOverrides x12DelimiterOverridesItem) {
    if (this.x12DelimiterOverrides == null) {
      this.x12DelimiterOverrides = new ArrayList<>();
    }
    this.x12DelimiterOverrides.add(x12DelimiterOverridesItem);
    return this;
  }

  /**
   * The X12 delimiter override settings.
   * @return x12DelimiterOverrides
   */
  @javax.annotation.Nullable
  public List<X12DelimiterOverrides> getX12DelimiterOverrides() {
    return x12DelimiterOverrides;
  }

  public void setX12DelimiterOverrides(List<X12DelimiterOverrides> x12DelimiterOverrides) {
    this.x12DelimiterOverrides = x12DelimiterOverrides;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X12ProtocolSettings x12ProtocolSettings = (X12ProtocolSettings) o;
    return Objects.equals(this.acknowledgementSettings, x12ProtocolSettings.acknowledgementSettings) &&
        Objects.equals(this.envelopeOverrides, x12ProtocolSettings.envelopeOverrides) &&
        Objects.equals(this.envelopeSettings, x12ProtocolSettings.envelopeSettings) &&
        Objects.equals(this.framingSettings, x12ProtocolSettings.framingSettings) &&
        Objects.equals(this.messageFilter, x12ProtocolSettings.messageFilter) &&
        Objects.equals(this.messageFilterList, x12ProtocolSettings.messageFilterList) &&
        Objects.equals(this.processingSettings, x12ProtocolSettings.processingSettings) &&
        Objects.equals(this.schemaReferences, x12ProtocolSettings.schemaReferences) &&
        Objects.equals(this.securitySettings, x12ProtocolSettings.securitySettings) &&
        Objects.equals(this.validationOverrides, x12ProtocolSettings.validationOverrides) &&
        Objects.equals(this.validationSettings, x12ProtocolSettings.validationSettings) &&
        Objects.equals(this.x12DelimiterOverrides, x12ProtocolSettings.x12DelimiterOverrides);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgementSettings, envelopeOverrides, envelopeSettings, framingSettings, messageFilter, messageFilterList, processingSettings, schemaReferences, securitySettings, validationOverrides, validationSettings, x12DelimiterOverrides);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X12ProtocolSettings {\n");
    sb.append("    acknowledgementSettings: ").append(toIndentedString(acknowledgementSettings)).append("\n");
    sb.append("    envelopeOverrides: ").append(toIndentedString(envelopeOverrides)).append("\n");
    sb.append("    envelopeSettings: ").append(toIndentedString(envelopeSettings)).append("\n");
    sb.append("    framingSettings: ").append(toIndentedString(framingSettings)).append("\n");
    sb.append("    messageFilter: ").append(toIndentedString(messageFilter)).append("\n");
    sb.append("    messageFilterList: ").append(toIndentedString(messageFilterList)).append("\n");
    sb.append("    processingSettings: ").append(toIndentedString(processingSettings)).append("\n");
    sb.append("    schemaReferences: ").append(toIndentedString(schemaReferences)).append("\n");
    sb.append("    securitySettings: ").append(toIndentedString(securitySettings)).append("\n");
    sb.append("    validationOverrides: ").append(toIndentedString(validationOverrides)).append("\n");
    sb.append("    validationSettings: ").append(toIndentedString(validationSettings)).append("\n");
    sb.append("    x12DelimiterOverrides: ").append(toIndentedString(x12DelimiterOverrides)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgementSettings");
    openapiFields.add("envelopeOverrides");
    openapiFields.add("envelopeSettings");
    openapiFields.add("framingSettings");
    openapiFields.add("messageFilter");
    openapiFields.add("messageFilterList");
    openapiFields.add("processingSettings");
    openapiFields.add("schemaReferences");
    openapiFields.add("securitySettings");
    openapiFields.add("validationOverrides");
    openapiFields.add("validationSettings");
    openapiFields.add("x12DelimiterOverrides");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acknowledgementSettings");
    openapiRequiredFields.add("envelopeSettings");
    openapiRequiredFields.add("framingSettings");
    openapiRequiredFields.add("messageFilter");
    openapiRequiredFields.add("processingSettings");
    openapiRequiredFields.add("schemaReferences");
    openapiRequiredFields.add("securitySettings");
    openapiRequiredFields.add("validationSettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X12ProtocolSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X12ProtocolSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X12ProtocolSettings is not found in the empty JSON string", X12ProtocolSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X12ProtocolSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X12ProtocolSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : X12ProtocolSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `acknowledgementSettings`
      X12AcknowledgementSettings.validateJsonElement(jsonObj.get("acknowledgementSettings"));
      if (jsonObj.get("envelopeOverrides") != null && !jsonObj.get("envelopeOverrides").isJsonNull()) {
        JsonArray jsonArrayenvelopeOverrides = jsonObj.getAsJsonArray("envelopeOverrides");
        if (jsonArrayenvelopeOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("envelopeOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `envelopeOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("envelopeOverrides").toString()));
          }

          // validate the optional field `envelopeOverrides` (array)
          for (int i = 0; i < jsonArrayenvelopeOverrides.size(); i++) {
            X12EnvelopeOverride.validateJsonElement(jsonArrayenvelopeOverrides.get(i));
          };
        }
      }
      // validate the required field `envelopeSettings`
      X12EnvelopeSettings.validateJsonElement(jsonObj.get("envelopeSettings"));
      // validate the required field `framingSettings`
      X12FramingSettings.validateJsonElement(jsonObj.get("framingSettings"));
      // validate the required field `messageFilter`
      X12MessageFilter.validateJsonElement(jsonObj.get("messageFilter"));
      if (jsonObj.get("messageFilterList") != null && !jsonObj.get("messageFilterList").isJsonNull()) {
        JsonArray jsonArraymessageFilterList = jsonObj.getAsJsonArray("messageFilterList");
        if (jsonArraymessageFilterList != null) {
          // ensure the json data is an array
          if (!jsonObj.get("messageFilterList").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `messageFilterList` to be an array in the JSON string but got `%s`", jsonObj.get("messageFilterList").toString()));
          }

          // validate the optional field `messageFilterList` (array)
          for (int i = 0; i < jsonArraymessageFilterList.size(); i++) {
            X12MessageIdentifier.validateJsonElement(jsonArraymessageFilterList.get(i));
          };
        }
      }
      // validate the required field `processingSettings`
      X12ProcessingSettings.validateJsonElement(jsonObj.get("processingSettings"));
      // ensure the json data is an array
      if (!jsonObj.get("schemaReferences").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaReferences` to be an array in the JSON string but got `%s`", jsonObj.get("schemaReferences").toString()));
      }

      JsonArray jsonArrayschemaReferences = jsonObj.getAsJsonArray("schemaReferences");
      // validate the required field `schemaReferences` (array)
      for (int i = 0; i < jsonArrayschemaReferences.size(); i++) {
        X12SchemaReference.validateJsonElement(jsonArrayschemaReferences.get(i));
      };
      // validate the required field `securitySettings`
      X12SecuritySettings.validateJsonElement(jsonObj.get("securitySettings"));
      if (jsonObj.get("validationOverrides") != null && !jsonObj.get("validationOverrides").isJsonNull()) {
        JsonArray jsonArrayvalidationOverrides = jsonObj.getAsJsonArray("validationOverrides");
        if (jsonArrayvalidationOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("validationOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `validationOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("validationOverrides").toString()));
          }

          // validate the optional field `validationOverrides` (array)
          for (int i = 0; i < jsonArrayvalidationOverrides.size(); i++) {
            X12ValidationOverride.validateJsonElement(jsonArrayvalidationOverrides.get(i));
          };
        }
      }
      // validate the required field `validationSettings`
      X12ValidationSettings.validateJsonElement(jsonObj.get("validationSettings"));
      if (jsonObj.get("x12DelimiterOverrides") != null && !jsonObj.get("x12DelimiterOverrides").isJsonNull()) {
        JsonArray jsonArrayx12DelimiterOverrides = jsonObj.getAsJsonArray("x12DelimiterOverrides");
        if (jsonArrayx12DelimiterOverrides != null) {
          // ensure the json data is an array
          if (!jsonObj.get("x12DelimiterOverrides").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `x12DelimiterOverrides` to be an array in the JSON string but got `%s`", jsonObj.get("x12DelimiterOverrides").toString()));
          }

          // validate the optional field `x12DelimiterOverrides` (array)
          for (int i = 0; i < jsonArrayx12DelimiterOverrides.size(); i++) {
            X12DelimiterOverrides.validateJsonElement(jsonArrayx12DelimiterOverrides.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X12ProtocolSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X12ProtocolSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X12ProtocolSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X12ProtocolSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<X12ProtocolSettings>() {
           @Override
           public void write(JsonWriter out, X12ProtocolSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X12ProtocolSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X12ProtocolSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X12ProtocolSettings
   * @throws IOException if the JSON string is invalid with respect to X12ProtocolSettings
   */
  public static X12ProtocolSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X12ProtocolSettings.class);
  }

  /**
   * Convert an instance of X12ProtocolSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

