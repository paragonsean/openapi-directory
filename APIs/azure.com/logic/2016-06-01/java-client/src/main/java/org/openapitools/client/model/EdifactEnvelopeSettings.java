/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Edifact agreement envelope settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EdifactEnvelopeSettings {
  public static final String SERIALIZED_NAME_APPLICATION_REFERENCE_ID = "applicationReferenceId";
  @SerializedName(SERIALIZED_NAME_APPLICATION_REFERENCE_ID)
  private String applicationReferenceId;

  public static final String SERIALIZED_NAME_APPLY_DELIMITER_STRING_ADVICE = "applyDelimiterStringAdvice";
  @SerializedName(SERIALIZED_NAME_APPLY_DELIMITER_STRING_ADVICE)
  private Boolean applyDelimiterStringAdvice;

  public static final String SERIALIZED_NAME_COMMUNICATION_AGREEMENT_ID = "communicationAgreementId";
  @SerializedName(SERIALIZED_NAME_COMMUNICATION_AGREEMENT_ID)
  private String communicationAgreementId;

  public static final String SERIALIZED_NAME_CREATE_GROUPING_SEGMENTS = "createGroupingSegments";
  @SerializedName(SERIALIZED_NAME_CREATE_GROUPING_SEGMENTS)
  private Boolean createGroupingSegments;

  public static final String SERIALIZED_NAME_ENABLE_DEFAULT_GROUP_HEADERS = "enableDefaultGroupHeaders";
  @SerializedName(SERIALIZED_NAME_ENABLE_DEFAULT_GROUP_HEADERS)
  private Boolean enableDefaultGroupHeaders;

  public static final String SERIALIZED_NAME_FUNCTIONAL_GROUP_ID = "functionalGroupId";
  @SerializedName(SERIALIZED_NAME_FUNCTIONAL_GROUP_ID)
  private String functionalGroupId;

  public static final String SERIALIZED_NAME_GROUP_APPLICATION_PASSWORD = "groupApplicationPassword";
  @SerializedName(SERIALIZED_NAME_GROUP_APPLICATION_PASSWORD)
  private String groupApplicationPassword;

  public static final String SERIALIZED_NAME_GROUP_APPLICATION_RECEIVER_ID = "groupApplicationReceiverId";
  @SerializedName(SERIALIZED_NAME_GROUP_APPLICATION_RECEIVER_ID)
  private String groupApplicationReceiverId;

  public static final String SERIALIZED_NAME_GROUP_APPLICATION_RECEIVER_QUALIFIER = "groupApplicationReceiverQualifier";
  @SerializedName(SERIALIZED_NAME_GROUP_APPLICATION_RECEIVER_QUALIFIER)
  private String groupApplicationReceiverQualifier;

  public static final String SERIALIZED_NAME_GROUP_APPLICATION_SENDER_ID = "groupApplicationSenderId";
  @SerializedName(SERIALIZED_NAME_GROUP_APPLICATION_SENDER_ID)
  private String groupApplicationSenderId;

  public static final String SERIALIZED_NAME_GROUP_APPLICATION_SENDER_QUALIFIER = "groupApplicationSenderQualifier";
  @SerializedName(SERIALIZED_NAME_GROUP_APPLICATION_SENDER_QUALIFIER)
  private String groupApplicationSenderQualifier;

  public static final String SERIALIZED_NAME_GROUP_ASSOCIATION_ASSIGNED_CODE = "groupAssociationAssignedCode";
  @SerializedName(SERIALIZED_NAME_GROUP_ASSOCIATION_ASSIGNED_CODE)
  private String groupAssociationAssignedCode;

  public static final String SERIALIZED_NAME_GROUP_CONTROL_NUMBER_LOWER_BOUND = "groupControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROL_NUMBER_LOWER_BOUND)
  private Long groupControlNumberLowerBound;

  public static final String SERIALIZED_NAME_GROUP_CONTROL_NUMBER_PREFIX = "groupControlNumberPrefix";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROL_NUMBER_PREFIX)
  private String groupControlNumberPrefix;

  public static final String SERIALIZED_NAME_GROUP_CONTROL_NUMBER_SUFFIX = "groupControlNumberSuffix";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROL_NUMBER_SUFFIX)
  private String groupControlNumberSuffix;

  public static final String SERIALIZED_NAME_GROUP_CONTROL_NUMBER_UPPER_BOUND = "groupControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROL_NUMBER_UPPER_BOUND)
  private Long groupControlNumberUpperBound;

  public static final String SERIALIZED_NAME_GROUP_CONTROLLING_AGENCY_CODE = "groupControllingAgencyCode";
  @SerializedName(SERIALIZED_NAME_GROUP_CONTROLLING_AGENCY_CODE)
  private String groupControllingAgencyCode;

  public static final String SERIALIZED_NAME_GROUP_MESSAGE_RELEASE = "groupMessageRelease";
  @SerializedName(SERIALIZED_NAME_GROUP_MESSAGE_RELEASE)
  private String groupMessageRelease;

  public static final String SERIALIZED_NAME_GROUP_MESSAGE_VERSION = "groupMessageVersion";
  @SerializedName(SERIALIZED_NAME_GROUP_MESSAGE_VERSION)
  private String groupMessageVersion;

  public static final String SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_LOWER_BOUND = "interchangeControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_LOWER_BOUND)
  private Long interchangeControlNumberLowerBound;

  public static final String SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_PREFIX = "interchangeControlNumberPrefix";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_PREFIX)
  private String interchangeControlNumberPrefix;

  public static final String SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_SUFFIX = "interchangeControlNumberSuffix";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_SUFFIX)
  private String interchangeControlNumberSuffix;

  public static final String SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_UPPER_BOUND = "interchangeControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_INTERCHANGE_CONTROL_NUMBER_UPPER_BOUND)
  private Long interchangeControlNumberUpperBound;

  public static final String SERIALIZED_NAME_IS_TEST_INTERCHANGE = "isTestInterchange";
  @SerializedName(SERIALIZED_NAME_IS_TEST_INTERCHANGE)
  private Boolean isTestInterchange;

  public static final String SERIALIZED_NAME_OVERWRITE_EXISTING_TRANSACTION_SET_CONTROL_NUMBER = "overwriteExistingTransactionSetControlNumber";
  @SerializedName(SERIALIZED_NAME_OVERWRITE_EXISTING_TRANSACTION_SET_CONTROL_NUMBER)
  private Boolean overwriteExistingTransactionSetControlNumber;

  public static final String SERIALIZED_NAME_PROCESSING_PRIORITY_CODE = "processingPriorityCode";
  @SerializedName(SERIALIZED_NAME_PROCESSING_PRIORITY_CODE)
  private String processingPriorityCode;

  public static final String SERIALIZED_NAME_RECEIVER_INTERNAL_IDENTIFICATION = "receiverInternalIdentification";
  @SerializedName(SERIALIZED_NAME_RECEIVER_INTERNAL_IDENTIFICATION)
  private String receiverInternalIdentification;

  public static final String SERIALIZED_NAME_RECEIVER_INTERNAL_SUB_IDENTIFICATION = "receiverInternalSubIdentification";
  @SerializedName(SERIALIZED_NAME_RECEIVER_INTERNAL_SUB_IDENTIFICATION)
  private String receiverInternalSubIdentification;

  public static final String SERIALIZED_NAME_RECEIVER_REVERSE_ROUTING_ADDRESS = "receiverReverseRoutingAddress";
  @SerializedName(SERIALIZED_NAME_RECEIVER_REVERSE_ROUTING_ADDRESS)
  private String receiverReverseRoutingAddress;

  public static final String SERIALIZED_NAME_RECIPIENT_REFERENCE_PASSWORD_QUALIFIER = "recipientReferencePasswordQualifier";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_REFERENCE_PASSWORD_QUALIFIER)
  private String recipientReferencePasswordQualifier;

  public static final String SERIALIZED_NAME_RECIPIENT_REFERENCE_PASSWORD_VALUE = "recipientReferencePasswordValue";
  @SerializedName(SERIALIZED_NAME_RECIPIENT_REFERENCE_PASSWORD_VALUE)
  private String recipientReferencePasswordValue;

  public static final String SERIALIZED_NAME_ROLLOVER_GROUP_CONTROL_NUMBER = "rolloverGroupControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_GROUP_CONTROL_NUMBER)
  private Boolean rolloverGroupControlNumber;

  public static final String SERIALIZED_NAME_ROLLOVER_INTERCHANGE_CONTROL_NUMBER = "rolloverInterchangeControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_INTERCHANGE_CONTROL_NUMBER)
  private Boolean rolloverInterchangeControlNumber;

  public static final String SERIALIZED_NAME_ROLLOVER_TRANSACTION_SET_CONTROL_NUMBER = "rolloverTransactionSetControlNumber";
  @SerializedName(SERIALIZED_NAME_ROLLOVER_TRANSACTION_SET_CONTROL_NUMBER)
  private Boolean rolloverTransactionSetControlNumber;

  public static final String SERIALIZED_NAME_SENDER_INTERNAL_IDENTIFICATION = "senderInternalIdentification";
  @SerializedName(SERIALIZED_NAME_SENDER_INTERNAL_IDENTIFICATION)
  private String senderInternalIdentification;

  public static final String SERIALIZED_NAME_SENDER_INTERNAL_SUB_IDENTIFICATION = "senderInternalSubIdentification";
  @SerializedName(SERIALIZED_NAME_SENDER_INTERNAL_SUB_IDENTIFICATION)
  private String senderInternalSubIdentification;

  public static final String SERIALIZED_NAME_SENDER_REVERSE_ROUTING_ADDRESS = "senderReverseRoutingAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_REVERSE_ROUTING_ADDRESS)
  private String senderReverseRoutingAddress;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_LOWER_BOUND = "transactionSetControlNumberLowerBound";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_LOWER_BOUND)
  private Long transactionSetControlNumberLowerBound;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_PREFIX = "transactionSetControlNumberPrefix";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_PREFIX)
  private String transactionSetControlNumberPrefix;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_SUFFIX = "transactionSetControlNumberSuffix";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_SUFFIX)
  private String transactionSetControlNumberSuffix;

  public static final String SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_UPPER_BOUND = "transactionSetControlNumberUpperBound";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_SET_CONTROL_NUMBER_UPPER_BOUND)
  private Long transactionSetControlNumberUpperBound;

  public EdifactEnvelopeSettings() {
  }

  public EdifactEnvelopeSettings applicationReferenceId(String applicationReferenceId) {
    this.applicationReferenceId = applicationReferenceId;
    return this;
  }

  /**
   * The application reference id.
   * @return applicationReferenceId
   */
  @javax.annotation.Nullable
  public String getApplicationReferenceId() {
    return applicationReferenceId;
  }

  public void setApplicationReferenceId(String applicationReferenceId) {
    this.applicationReferenceId = applicationReferenceId;
  }


  public EdifactEnvelopeSettings applyDelimiterStringAdvice(Boolean applyDelimiterStringAdvice) {
    this.applyDelimiterStringAdvice = applyDelimiterStringAdvice;
    return this;
  }

  /**
   * The value indicating whether to apply delimiter string advice.
   * @return applyDelimiterStringAdvice
   */
  @javax.annotation.Nonnull
  public Boolean getApplyDelimiterStringAdvice() {
    return applyDelimiterStringAdvice;
  }

  public void setApplyDelimiterStringAdvice(Boolean applyDelimiterStringAdvice) {
    this.applyDelimiterStringAdvice = applyDelimiterStringAdvice;
  }


  public EdifactEnvelopeSettings communicationAgreementId(String communicationAgreementId) {
    this.communicationAgreementId = communicationAgreementId;
    return this;
  }

  /**
   * The communication agreement id.
   * @return communicationAgreementId
   */
  @javax.annotation.Nullable
  public String getCommunicationAgreementId() {
    return communicationAgreementId;
  }

  public void setCommunicationAgreementId(String communicationAgreementId) {
    this.communicationAgreementId = communicationAgreementId;
  }


  public EdifactEnvelopeSettings createGroupingSegments(Boolean createGroupingSegments) {
    this.createGroupingSegments = createGroupingSegments;
    return this;
  }

  /**
   * The value indicating whether to create grouping segments.
   * @return createGroupingSegments
   */
  @javax.annotation.Nonnull
  public Boolean getCreateGroupingSegments() {
    return createGroupingSegments;
  }

  public void setCreateGroupingSegments(Boolean createGroupingSegments) {
    this.createGroupingSegments = createGroupingSegments;
  }


  public EdifactEnvelopeSettings enableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
    this.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
    return this;
  }

  /**
   * The value indicating whether to enable default group headers.
   * @return enableDefaultGroupHeaders
   */
  @javax.annotation.Nonnull
  public Boolean getEnableDefaultGroupHeaders() {
    return enableDefaultGroupHeaders;
  }

  public void setEnableDefaultGroupHeaders(Boolean enableDefaultGroupHeaders) {
    this.enableDefaultGroupHeaders = enableDefaultGroupHeaders;
  }


  public EdifactEnvelopeSettings functionalGroupId(String functionalGroupId) {
    this.functionalGroupId = functionalGroupId;
    return this;
  }

  /**
   * The functional group id.
   * @return functionalGroupId
   */
  @javax.annotation.Nullable
  public String getFunctionalGroupId() {
    return functionalGroupId;
  }

  public void setFunctionalGroupId(String functionalGroupId) {
    this.functionalGroupId = functionalGroupId;
  }


  public EdifactEnvelopeSettings groupApplicationPassword(String groupApplicationPassword) {
    this.groupApplicationPassword = groupApplicationPassword;
    return this;
  }

  /**
   * The group application password.
   * @return groupApplicationPassword
   */
  @javax.annotation.Nullable
  public String getGroupApplicationPassword() {
    return groupApplicationPassword;
  }

  public void setGroupApplicationPassword(String groupApplicationPassword) {
    this.groupApplicationPassword = groupApplicationPassword;
  }


  public EdifactEnvelopeSettings groupApplicationReceiverId(String groupApplicationReceiverId) {
    this.groupApplicationReceiverId = groupApplicationReceiverId;
    return this;
  }

  /**
   * The group application receiver id.
   * @return groupApplicationReceiverId
   */
  @javax.annotation.Nullable
  public String getGroupApplicationReceiverId() {
    return groupApplicationReceiverId;
  }

  public void setGroupApplicationReceiverId(String groupApplicationReceiverId) {
    this.groupApplicationReceiverId = groupApplicationReceiverId;
  }


  public EdifactEnvelopeSettings groupApplicationReceiverQualifier(String groupApplicationReceiverQualifier) {
    this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
    return this;
  }

  /**
   * The group application receiver qualifier.
   * @return groupApplicationReceiverQualifier
   */
  @javax.annotation.Nullable
  public String getGroupApplicationReceiverQualifier() {
    return groupApplicationReceiverQualifier;
  }

  public void setGroupApplicationReceiverQualifier(String groupApplicationReceiverQualifier) {
    this.groupApplicationReceiverQualifier = groupApplicationReceiverQualifier;
  }


  public EdifactEnvelopeSettings groupApplicationSenderId(String groupApplicationSenderId) {
    this.groupApplicationSenderId = groupApplicationSenderId;
    return this;
  }

  /**
   * The group application sender id.
   * @return groupApplicationSenderId
   */
  @javax.annotation.Nullable
  public String getGroupApplicationSenderId() {
    return groupApplicationSenderId;
  }

  public void setGroupApplicationSenderId(String groupApplicationSenderId) {
    this.groupApplicationSenderId = groupApplicationSenderId;
  }


  public EdifactEnvelopeSettings groupApplicationSenderQualifier(String groupApplicationSenderQualifier) {
    this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
    return this;
  }

  /**
   * The group application sender qualifier.
   * @return groupApplicationSenderQualifier
   */
  @javax.annotation.Nullable
  public String getGroupApplicationSenderQualifier() {
    return groupApplicationSenderQualifier;
  }

  public void setGroupApplicationSenderQualifier(String groupApplicationSenderQualifier) {
    this.groupApplicationSenderQualifier = groupApplicationSenderQualifier;
  }


  public EdifactEnvelopeSettings groupAssociationAssignedCode(String groupAssociationAssignedCode) {
    this.groupAssociationAssignedCode = groupAssociationAssignedCode;
    return this;
  }

  /**
   * The group association assigned code.
   * @return groupAssociationAssignedCode
   */
  @javax.annotation.Nullable
  public String getGroupAssociationAssignedCode() {
    return groupAssociationAssignedCode;
  }

  public void setGroupAssociationAssignedCode(String groupAssociationAssignedCode) {
    this.groupAssociationAssignedCode = groupAssociationAssignedCode;
  }


  public EdifactEnvelopeSettings groupControlNumberLowerBound(Long groupControlNumberLowerBound) {
    this.groupControlNumberLowerBound = groupControlNumberLowerBound;
    return this;
  }

  /**
   * The group control number lower bound.
   * @return groupControlNumberLowerBound
   */
  @javax.annotation.Nonnull
  public Long getGroupControlNumberLowerBound() {
    return groupControlNumberLowerBound;
  }

  public void setGroupControlNumberLowerBound(Long groupControlNumberLowerBound) {
    this.groupControlNumberLowerBound = groupControlNumberLowerBound;
  }


  public EdifactEnvelopeSettings groupControlNumberPrefix(String groupControlNumberPrefix) {
    this.groupControlNumberPrefix = groupControlNumberPrefix;
    return this;
  }

  /**
   * The group control number prefix.
   * @return groupControlNumberPrefix
   */
  @javax.annotation.Nullable
  public String getGroupControlNumberPrefix() {
    return groupControlNumberPrefix;
  }

  public void setGroupControlNumberPrefix(String groupControlNumberPrefix) {
    this.groupControlNumberPrefix = groupControlNumberPrefix;
  }


  public EdifactEnvelopeSettings groupControlNumberSuffix(String groupControlNumberSuffix) {
    this.groupControlNumberSuffix = groupControlNumberSuffix;
    return this;
  }

  /**
   * The group control number suffix.
   * @return groupControlNumberSuffix
   */
  @javax.annotation.Nullable
  public String getGroupControlNumberSuffix() {
    return groupControlNumberSuffix;
  }

  public void setGroupControlNumberSuffix(String groupControlNumberSuffix) {
    this.groupControlNumberSuffix = groupControlNumberSuffix;
  }


  public EdifactEnvelopeSettings groupControlNumberUpperBound(Long groupControlNumberUpperBound) {
    this.groupControlNumberUpperBound = groupControlNumberUpperBound;
    return this;
  }

  /**
   * The group control number upper bound.
   * @return groupControlNumberUpperBound
   */
  @javax.annotation.Nonnull
  public Long getGroupControlNumberUpperBound() {
    return groupControlNumberUpperBound;
  }

  public void setGroupControlNumberUpperBound(Long groupControlNumberUpperBound) {
    this.groupControlNumberUpperBound = groupControlNumberUpperBound;
  }


  public EdifactEnvelopeSettings groupControllingAgencyCode(String groupControllingAgencyCode) {
    this.groupControllingAgencyCode = groupControllingAgencyCode;
    return this;
  }

  /**
   * The group controlling agency code.
   * @return groupControllingAgencyCode
   */
  @javax.annotation.Nullable
  public String getGroupControllingAgencyCode() {
    return groupControllingAgencyCode;
  }

  public void setGroupControllingAgencyCode(String groupControllingAgencyCode) {
    this.groupControllingAgencyCode = groupControllingAgencyCode;
  }


  public EdifactEnvelopeSettings groupMessageRelease(String groupMessageRelease) {
    this.groupMessageRelease = groupMessageRelease;
    return this;
  }

  /**
   * The group message release.
   * @return groupMessageRelease
   */
  @javax.annotation.Nullable
  public String getGroupMessageRelease() {
    return groupMessageRelease;
  }

  public void setGroupMessageRelease(String groupMessageRelease) {
    this.groupMessageRelease = groupMessageRelease;
  }


  public EdifactEnvelopeSettings groupMessageVersion(String groupMessageVersion) {
    this.groupMessageVersion = groupMessageVersion;
    return this;
  }

  /**
   * The group message version.
   * @return groupMessageVersion
   */
  @javax.annotation.Nullable
  public String getGroupMessageVersion() {
    return groupMessageVersion;
  }

  public void setGroupMessageVersion(String groupMessageVersion) {
    this.groupMessageVersion = groupMessageVersion;
  }


  public EdifactEnvelopeSettings interchangeControlNumberLowerBound(Long interchangeControlNumberLowerBound) {
    this.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
    return this;
  }

  /**
   * The interchange control number lower bound.
   * @return interchangeControlNumberLowerBound
   */
  @javax.annotation.Nonnull
  public Long getInterchangeControlNumberLowerBound() {
    return interchangeControlNumberLowerBound;
  }

  public void setInterchangeControlNumberLowerBound(Long interchangeControlNumberLowerBound) {
    this.interchangeControlNumberLowerBound = interchangeControlNumberLowerBound;
  }


  public EdifactEnvelopeSettings interchangeControlNumberPrefix(String interchangeControlNumberPrefix) {
    this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
    return this;
  }

  /**
   * The interchange control number prefix.
   * @return interchangeControlNumberPrefix
   */
  @javax.annotation.Nullable
  public String getInterchangeControlNumberPrefix() {
    return interchangeControlNumberPrefix;
  }

  public void setInterchangeControlNumberPrefix(String interchangeControlNumberPrefix) {
    this.interchangeControlNumberPrefix = interchangeControlNumberPrefix;
  }


  public EdifactEnvelopeSettings interchangeControlNumberSuffix(String interchangeControlNumberSuffix) {
    this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
    return this;
  }

  /**
   * The interchange control number suffix.
   * @return interchangeControlNumberSuffix
   */
  @javax.annotation.Nullable
  public String getInterchangeControlNumberSuffix() {
    return interchangeControlNumberSuffix;
  }

  public void setInterchangeControlNumberSuffix(String interchangeControlNumberSuffix) {
    this.interchangeControlNumberSuffix = interchangeControlNumberSuffix;
  }


  public EdifactEnvelopeSettings interchangeControlNumberUpperBound(Long interchangeControlNumberUpperBound) {
    this.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
    return this;
  }

  /**
   * The interchange control number upper bound.
   * @return interchangeControlNumberUpperBound
   */
  @javax.annotation.Nonnull
  public Long getInterchangeControlNumberUpperBound() {
    return interchangeControlNumberUpperBound;
  }

  public void setInterchangeControlNumberUpperBound(Long interchangeControlNumberUpperBound) {
    this.interchangeControlNumberUpperBound = interchangeControlNumberUpperBound;
  }


  public EdifactEnvelopeSettings isTestInterchange(Boolean isTestInterchange) {
    this.isTestInterchange = isTestInterchange;
    return this;
  }

  /**
   * The value indicating whether the message is a test interchange.
   * @return isTestInterchange
   */
  @javax.annotation.Nonnull
  public Boolean getIsTestInterchange() {
    return isTestInterchange;
  }

  public void setIsTestInterchange(Boolean isTestInterchange) {
    this.isTestInterchange = isTestInterchange;
  }


  public EdifactEnvelopeSettings overwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
    this.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
    return this;
  }

  /**
   * The value indicating whether to overwrite existing transaction set control number.
   * @return overwriteExistingTransactionSetControlNumber
   */
  @javax.annotation.Nonnull
  public Boolean getOverwriteExistingTransactionSetControlNumber() {
    return overwriteExistingTransactionSetControlNumber;
  }

  public void setOverwriteExistingTransactionSetControlNumber(Boolean overwriteExistingTransactionSetControlNumber) {
    this.overwriteExistingTransactionSetControlNumber = overwriteExistingTransactionSetControlNumber;
  }


  public EdifactEnvelopeSettings processingPriorityCode(String processingPriorityCode) {
    this.processingPriorityCode = processingPriorityCode;
    return this;
  }

  /**
   * The processing priority code.
   * @return processingPriorityCode
   */
  @javax.annotation.Nullable
  public String getProcessingPriorityCode() {
    return processingPriorityCode;
  }

  public void setProcessingPriorityCode(String processingPriorityCode) {
    this.processingPriorityCode = processingPriorityCode;
  }


  public EdifactEnvelopeSettings receiverInternalIdentification(String receiverInternalIdentification) {
    this.receiverInternalIdentification = receiverInternalIdentification;
    return this;
  }

  /**
   * The receiver internal identification.
   * @return receiverInternalIdentification
   */
  @javax.annotation.Nullable
  public String getReceiverInternalIdentification() {
    return receiverInternalIdentification;
  }

  public void setReceiverInternalIdentification(String receiverInternalIdentification) {
    this.receiverInternalIdentification = receiverInternalIdentification;
  }


  public EdifactEnvelopeSettings receiverInternalSubIdentification(String receiverInternalSubIdentification) {
    this.receiverInternalSubIdentification = receiverInternalSubIdentification;
    return this;
  }

  /**
   * The receiver internal sub identification.
   * @return receiverInternalSubIdentification
   */
  @javax.annotation.Nullable
  public String getReceiverInternalSubIdentification() {
    return receiverInternalSubIdentification;
  }

  public void setReceiverInternalSubIdentification(String receiverInternalSubIdentification) {
    this.receiverInternalSubIdentification = receiverInternalSubIdentification;
  }


  public EdifactEnvelopeSettings receiverReverseRoutingAddress(String receiverReverseRoutingAddress) {
    this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
    return this;
  }

  /**
   * The receiver reverse routing address.
   * @return receiverReverseRoutingAddress
   */
  @javax.annotation.Nullable
  public String getReceiverReverseRoutingAddress() {
    return receiverReverseRoutingAddress;
  }

  public void setReceiverReverseRoutingAddress(String receiverReverseRoutingAddress) {
    this.receiverReverseRoutingAddress = receiverReverseRoutingAddress;
  }


  public EdifactEnvelopeSettings recipientReferencePasswordQualifier(String recipientReferencePasswordQualifier) {
    this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
    return this;
  }

  /**
   * The recipient reference password qualifier.
   * @return recipientReferencePasswordQualifier
   */
  @javax.annotation.Nullable
  public String getRecipientReferencePasswordQualifier() {
    return recipientReferencePasswordQualifier;
  }

  public void setRecipientReferencePasswordQualifier(String recipientReferencePasswordQualifier) {
    this.recipientReferencePasswordQualifier = recipientReferencePasswordQualifier;
  }


  public EdifactEnvelopeSettings recipientReferencePasswordValue(String recipientReferencePasswordValue) {
    this.recipientReferencePasswordValue = recipientReferencePasswordValue;
    return this;
  }

  /**
   * The recipient reference password value.
   * @return recipientReferencePasswordValue
   */
  @javax.annotation.Nullable
  public String getRecipientReferencePasswordValue() {
    return recipientReferencePasswordValue;
  }

  public void setRecipientReferencePasswordValue(String recipientReferencePasswordValue) {
    this.recipientReferencePasswordValue = recipientReferencePasswordValue;
  }


  public EdifactEnvelopeSettings rolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
    this.rolloverGroupControlNumber = rolloverGroupControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover group control number.
   * @return rolloverGroupControlNumber
   */
  @javax.annotation.Nonnull
  public Boolean getRolloverGroupControlNumber() {
    return rolloverGroupControlNumber;
  }

  public void setRolloverGroupControlNumber(Boolean rolloverGroupControlNumber) {
    this.rolloverGroupControlNumber = rolloverGroupControlNumber;
  }


  public EdifactEnvelopeSettings rolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
    this.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover interchange control number.
   * @return rolloverInterchangeControlNumber
   */
  @javax.annotation.Nonnull
  public Boolean getRolloverInterchangeControlNumber() {
    return rolloverInterchangeControlNumber;
  }

  public void setRolloverInterchangeControlNumber(Boolean rolloverInterchangeControlNumber) {
    this.rolloverInterchangeControlNumber = rolloverInterchangeControlNumber;
  }


  public EdifactEnvelopeSettings rolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
    this.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
    return this;
  }

  /**
   * The value indicating whether to rollover transaction set control number.
   * @return rolloverTransactionSetControlNumber
   */
  @javax.annotation.Nonnull
  public Boolean getRolloverTransactionSetControlNumber() {
    return rolloverTransactionSetControlNumber;
  }

  public void setRolloverTransactionSetControlNumber(Boolean rolloverTransactionSetControlNumber) {
    this.rolloverTransactionSetControlNumber = rolloverTransactionSetControlNumber;
  }


  public EdifactEnvelopeSettings senderInternalIdentification(String senderInternalIdentification) {
    this.senderInternalIdentification = senderInternalIdentification;
    return this;
  }

  /**
   * The sender internal identification.
   * @return senderInternalIdentification
   */
  @javax.annotation.Nullable
  public String getSenderInternalIdentification() {
    return senderInternalIdentification;
  }

  public void setSenderInternalIdentification(String senderInternalIdentification) {
    this.senderInternalIdentification = senderInternalIdentification;
  }


  public EdifactEnvelopeSettings senderInternalSubIdentification(String senderInternalSubIdentification) {
    this.senderInternalSubIdentification = senderInternalSubIdentification;
    return this;
  }

  /**
   * The sender internal sub identification.
   * @return senderInternalSubIdentification
   */
  @javax.annotation.Nullable
  public String getSenderInternalSubIdentification() {
    return senderInternalSubIdentification;
  }

  public void setSenderInternalSubIdentification(String senderInternalSubIdentification) {
    this.senderInternalSubIdentification = senderInternalSubIdentification;
  }


  public EdifactEnvelopeSettings senderReverseRoutingAddress(String senderReverseRoutingAddress) {
    this.senderReverseRoutingAddress = senderReverseRoutingAddress;
    return this;
  }

  /**
   * The sender reverse routing address.
   * @return senderReverseRoutingAddress
   */
  @javax.annotation.Nullable
  public String getSenderReverseRoutingAddress() {
    return senderReverseRoutingAddress;
  }

  public void setSenderReverseRoutingAddress(String senderReverseRoutingAddress) {
    this.senderReverseRoutingAddress = senderReverseRoutingAddress;
  }


  public EdifactEnvelopeSettings transactionSetControlNumberLowerBound(Long transactionSetControlNumberLowerBound) {
    this.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
    return this;
  }

  /**
   * The transaction set control number lower bound.
   * @return transactionSetControlNumberLowerBound
   */
  @javax.annotation.Nonnull
  public Long getTransactionSetControlNumberLowerBound() {
    return transactionSetControlNumberLowerBound;
  }

  public void setTransactionSetControlNumberLowerBound(Long transactionSetControlNumberLowerBound) {
    this.transactionSetControlNumberLowerBound = transactionSetControlNumberLowerBound;
  }


  public EdifactEnvelopeSettings transactionSetControlNumberPrefix(String transactionSetControlNumberPrefix) {
    this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
    return this;
  }

  /**
   * The transaction set control number prefix.
   * @return transactionSetControlNumberPrefix
   */
  @javax.annotation.Nullable
  public String getTransactionSetControlNumberPrefix() {
    return transactionSetControlNumberPrefix;
  }

  public void setTransactionSetControlNumberPrefix(String transactionSetControlNumberPrefix) {
    this.transactionSetControlNumberPrefix = transactionSetControlNumberPrefix;
  }


  public EdifactEnvelopeSettings transactionSetControlNumberSuffix(String transactionSetControlNumberSuffix) {
    this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
    return this;
  }

  /**
   * The transaction set control number suffix.
   * @return transactionSetControlNumberSuffix
   */
  @javax.annotation.Nullable
  public String getTransactionSetControlNumberSuffix() {
    return transactionSetControlNumberSuffix;
  }

  public void setTransactionSetControlNumberSuffix(String transactionSetControlNumberSuffix) {
    this.transactionSetControlNumberSuffix = transactionSetControlNumberSuffix;
  }


  public EdifactEnvelopeSettings transactionSetControlNumberUpperBound(Long transactionSetControlNumberUpperBound) {
    this.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
    return this;
  }

  /**
   * The transaction set control number upper bound.
   * @return transactionSetControlNumberUpperBound
   */
  @javax.annotation.Nonnull
  public Long getTransactionSetControlNumberUpperBound() {
    return transactionSetControlNumberUpperBound;
  }

  public void setTransactionSetControlNumberUpperBound(Long transactionSetControlNumberUpperBound) {
    this.transactionSetControlNumberUpperBound = transactionSetControlNumberUpperBound;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdifactEnvelopeSettings edifactEnvelopeSettings = (EdifactEnvelopeSettings) o;
    return Objects.equals(this.applicationReferenceId, edifactEnvelopeSettings.applicationReferenceId) &&
        Objects.equals(this.applyDelimiterStringAdvice, edifactEnvelopeSettings.applyDelimiterStringAdvice) &&
        Objects.equals(this.communicationAgreementId, edifactEnvelopeSettings.communicationAgreementId) &&
        Objects.equals(this.createGroupingSegments, edifactEnvelopeSettings.createGroupingSegments) &&
        Objects.equals(this.enableDefaultGroupHeaders, edifactEnvelopeSettings.enableDefaultGroupHeaders) &&
        Objects.equals(this.functionalGroupId, edifactEnvelopeSettings.functionalGroupId) &&
        Objects.equals(this.groupApplicationPassword, edifactEnvelopeSettings.groupApplicationPassword) &&
        Objects.equals(this.groupApplicationReceiverId, edifactEnvelopeSettings.groupApplicationReceiverId) &&
        Objects.equals(this.groupApplicationReceiverQualifier, edifactEnvelopeSettings.groupApplicationReceiverQualifier) &&
        Objects.equals(this.groupApplicationSenderId, edifactEnvelopeSettings.groupApplicationSenderId) &&
        Objects.equals(this.groupApplicationSenderQualifier, edifactEnvelopeSettings.groupApplicationSenderQualifier) &&
        Objects.equals(this.groupAssociationAssignedCode, edifactEnvelopeSettings.groupAssociationAssignedCode) &&
        Objects.equals(this.groupControlNumberLowerBound, edifactEnvelopeSettings.groupControlNumberLowerBound) &&
        Objects.equals(this.groupControlNumberPrefix, edifactEnvelopeSettings.groupControlNumberPrefix) &&
        Objects.equals(this.groupControlNumberSuffix, edifactEnvelopeSettings.groupControlNumberSuffix) &&
        Objects.equals(this.groupControlNumberUpperBound, edifactEnvelopeSettings.groupControlNumberUpperBound) &&
        Objects.equals(this.groupControllingAgencyCode, edifactEnvelopeSettings.groupControllingAgencyCode) &&
        Objects.equals(this.groupMessageRelease, edifactEnvelopeSettings.groupMessageRelease) &&
        Objects.equals(this.groupMessageVersion, edifactEnvelopeSettings.groupMessageVersion) &&
        Objects.equals(this.interchangeControlNumberLowerBound, edifactEnvelopeSettings.interchangeControlNumberLowerBound) &&
        Objects.equals(this.interchangeControlNumberPrefix, edifactEnvelopeSettings.interchangeControlNumberPrefix) &&
        Objects.equals(this.interchangeControlNumberSuffix, edifactEnvelopeSettings.interchangeControlNumberSuffix) &&
        Objects.equals(this.interchangeControlNumberUpperBound, edifactEnvelopeSettings.interchangeControlNumberUpperBound) &&
        Objects.equals(this.isTestInterchange, edifactEnvelopeSettings.isTestInterchange) &&
        Objects.equals(this.overwriteExistingTransactionSetControlNumber, edifactEnvelopeSettings.overwriteExistingTransactionSetControlNumber) &&
        Objects.equals(this.processingPriorityCode, edifactEnvelopeSettings.processingPriorityCode) &&
        Objects.equals(this.receiverInternalIdentification, edifactEnvelopeSettings.receiverInternalIdentification) &&
        Objects.equals(this.receiverInternalSubIdentification, edifactEnvelopeSettings.receiverInternalSubIdentification) &&
        Objects.equals(this.receiverReverseRoutingAddress, edifactEnvelopeSettings.receiverReverseRoutingAddress) &&
        Objects.equals(this.recipientReferencePasswordQualifier, edifactEnvelopeSettings.recipientReferencePasswordQualifier) &&
        Objects.equals(this.recipientReferencePasswordValue, edifactEnvelopeSettings.recipientReferencePasswordValue) &&
        Objects.equals(this.rolloverGroupControlNumber, edifactEnvelopeSettings.rolloverGroupControlNumber) &&
        Objects.equals(this.rolloverInterchangeControlNumber, edifactEnvelopeSettings.rolloverInterchangeControlNumber) &&
        Objects.equals(this.rolloverTransactionSetControlNumber, edifactEnvelopeSettings.rolloverTransactionSetControlNumber) &&
        Objects.equals(this.senderInternalIdentification, edifactEnvelopeSettings.senderInternalIdentification) &&
        Objects.equals(this.senderInternalSubIdentification, edifactEnvelopeSettings.senderInternalSubIdentification) &&
        Objects.equals(this.senderReverseRoutingAddress, edifactEnvelopeSettings.senderReverseRoutingAddress) &&
        Objects.equals(this.transactionSetControlNumberLowerBound, edifactEnvelopeSettings.transactionSetControlNumberLowerBound) &&
        Objects.equals(this.transactionSetControlNumberPrefix, edifactEnvelopeSettings.transactionSetControlNumberPrefix) &&
        Objects.equals(this.transactionSetControlNumberSuffix, edifactEnvelopeSettings.transactionSetControlNumberSuffix) &&
        Objects.equals(this.transactionSetControlNumberUpperBound, edifactEnvelopeSettings.transactionSetControlNumberUpperBound);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationReferenceId, applyDelimiterStringAdvice, communicationAgreementId, createGroupingSegments, enableDefaultGroupHeaders, functionalGroupId, groupApplicationPassword, groupApplicationReceiverId, groupApplicationReceiverQualifier, groupApplicationSenderId, groupApplicationSenderQualifier, groupAssociationAssignedCode, groupControlNumberLowerBound, groupControlNumberPrefix, groupControlNumberSuffix, groupControlNumberUpperBound, groupControllingAgencyCode, groupMessageRelease, groupMessageVersion, interchangeControlNumberLowerBound, interchangeControlNumberPrefix, interchangeControlNumberSuffix, interchangeControlNumberUpperBound, isTestInterchange, overwriteExistingTransactionSetControlNumber, processingPriorityCode, receiverInternalIdentification, receiverInternalSubIdentification, receiverReverseRoutingAddress, recipientReferencePasswordQualifier, recipientReferencePasswordValue, rolloverGroupControlNumber, rolloverInterchangeControlNumber, rolloverTransactionSetControlNumber, senderInternalIdentification, senderInternalSubIdentification, senderReverseRoutingAddress, transactionSetControlNumberLowerBound, transactionSetControlNumberPrefix, transactionSetControlNumberSuffix, transactionSetControlNumberUpperBound);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdifactEnvelopeSettings {\n");
    sb.append("    applicationReferenceId: ").append(toIndentedString(applicationReferenceId)).append("\n");
    sb.append("    applyDelimiterStringAdvice: ").append(toIndentedString(applyDelimiterStringAdvice)).append("\n");
    sb.append("    communicationAgreementId: ").append(toIndentedString(communicationAgreementId)).append("\n");
    sb.append("    createGroupingSegments: ").append(toIndentedString(createGroupingSegments)).append("\n");
    sb.append("    enableDefaultGroupHeaders: ").append(toIndentedString(enableDefaultGroupHeaders)).append("\n");
    sb.append("    functionalGroupId: ").append(toIndentedString(functionalGroupId)).append("\n");
    sb.append("    groupApplicationPassword: ").append(toIndentedString(groupApplicationPassword)).append("\n");
    sb.append("    groupApplicationReceiverId: ").append(toIndentedString(groupApplicationReceiverId)).append("\n");
    sb.append("    groupApplicationReceiverQualifier: ").append(toIndentedString(groupApplicationReceiverQualifier)).append("\n");
    sb.append("    groupApplicationSenderId: ").append(toIndentedString(groupApplicationSenderId)).append("\n");
    sb.append("    groupApplicationSenderQualifier: ").append(toIndentedString(groupApplicationSenderQualifier)).append("\n");
    sb.append("    groupAssociationAssignedCode: ").append(toIndentedString(groupAssociationAssignedCode)).append("\n");
    sb.append("    groupControlNumberLowerBound: ").append(toIndentedString(groupControlNumberLowerBound)).append("\n");
    sb.append("    groupControlNumberPrefix: ").append(toIndentedString(groupControlNumberPrefix)).append("\n");
    sb.append("    groupControlNumberSuffix: ").append(toIndentedString(groupControlNumberSuffix)).append("\n");
    sb.append("    groupControlNumberUpperBound: ").append(toIndentedString(groupControlNumberUpperBound)).append("\n");
    sb.append("    groupControllingAgencyCode: ").append(toIndentedString(groupControllingAgencyCode)).append("\n");
    sb.append("    groupMessageRelease: ").append(toIndentedString(groupMessageRelease)).append("\n");
    sb.append("    groupMessageVersion: ").append(toIndentedString(groupMessageVersion)).append("\n");
    sb.append("    interchangeControlNumberLowerBound: ").append(toIndentedString(interchangeControlNumberLowerBound)).append("\n");
    sb.append("    interchangeControlNumberPrefix: ").append(toIndentedString(interchangeControlNumberPrefix)).append("\n");
    sb.append("    interchangeControlNumberSuffix: ").append(toIndentedString(interchangeControlNumberSuffix)).append("\n");
    sb.append("    interchangeControlNumberUpperBound: ").append(toIndentedString(interchangeControlNumberUpperBound)).append("\n");
    sb.append("    isTestInterchange: ").append(toIndentedString(isTestInterchange)).append("\n");
    sb.append("    overwriteExistingTransactionSetControlNumber: ").append(toIndentedString(overwriteExistingTransactionSetControlNumber)).append("\n");
    sb.append("    processingPriorityCode: ").append(toIndentedString(processingPriorityCode)).append("\n");
    sb.append("    receiverInternalIdentification: ").append(toIndentedString(receiverInternalIdentification)).append("\n");
    sb.append("    receiverInternalSubIdentification: ").append(toIndentedString(receiverInternalSubIdentification)).append("\n");
    sb.append("    receiverReverseRoutingAddress: ").append(toIndentedString(receiverReverseRoutingAddress)).append("\n");
    sb.append("    recipientReferencePasswordQualifier: ").append(toIndentedString(recipientReferencePasswordQualifier)).append("\n");
    sb.append("    recipientReferencePasswordValue: ").append(toIndentedString(recipientReferencePasswordValue)).append("\n");
    sb.append("    rolloverGroupControlNumber: ").append(toIndentedString(rolloverGroupControlNumber)).append("\n");
    sb.append("    rolloverInterchangeControlNumber: ").append(toIndentedString(rolloverInterchangeControlNumber)).append("\n");
    sb.append("    rolloverTransactionSetControlNumber: ").append(toIndentedString(rolloverTransactionSetControlNumber)).append("\n");
    sb.append("    senderInternalIdentification: ").append(toIndentedString(senderInternalIdentification)).append("\n");
    sb.append("    senderInternalSubIdentification: ").append(toIndentedString(senderInternalSubIdentification)).append("\n");
    sb.append("    senderReverseRoutingAddress: ").append(toIndentedString(senderReverseRoutingAddress)).append("\n");
    sb.append("    transactionSetControlNumberLowerBound: ").append(toIndentedString(transactionSetControlNumberLowerBound)).append("\n");
    sb.append("    transactionSetControlNumberPrefix: ").append(toIndentedString(transactionSetControlNumberPrefix)).append("\n");
    sb.append("    transactionSetControlNumberSuffix: ").append(toIndentedString(transactionSetControlNumberSuffix)).append("\n");
    sb.append("    transactionSetControlNumberUpperBound: ").append(toIndentedString(transactionSetControlNumberUpperBound)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationReferenceId");
    openapiFields.add("applyDelimiterStringAdvice");
    openapiFields.add("communicationAgreementId");
    openapiFields.add("createGroupingSegments");
    openapiFields.add("enableDefaultGroupHeaders");
    openapiFields.add("functionalGroupId");
    openapiFields.add("groupApplicationPassword");
    openapiFields.add("groupApplicationReceiverId");
    openapiFields.add("groupApplicationReceiverQualifier");
    openapiFields.add("groupApplicationSenderId");
    openapiFields.add("groupApplicationSenderQualifier");
    openapiFields.add("groupAssociationAssignedCode");
    openapiFields.add("groupControlNumberLowerBound");
    openapiFields.add("groupControlNumberPrefix");
    openapiFields.add("groupControlNumberSuffix");
    openapiFields.add("groupControlNumberUpperBound");
    openapiFields.add("groupControllingAgencyCode");
    openapiFields.add("groupMessageRelease");
    openapiFields.add("groupMessageVersion");
    openapiFields.add("interchangeControlNumberLowerBound");
    openapiFields.add("interchangeControlNumberPrefix");
    openapiFields.add("interchangeControlNumberSuffix");
    openapiFields.add("interchangeControlNumberUpperBound");
    openapiFields.add("isTestInterchange");
    openapiFields.add("overwriteExistingTransactionSetControlNumber");
    openapiFields.add("processingPriorityCode");
    openapiFields.add("receiverInternalIdentification");
    openapiFields.add("receiverInternalSubIdentification");
    openapiFields.add("receiverReverseRoutingAddress");
    openapiFields.add("recipientReferencePasswordQualifier");
    openapiFields.add("recipientReferencePasswordValue");
    openapiFields.add("rolloverGroupControlNumber");
    openapiFields.add("rolloverInterchangeControlNumber");
    openapiFields.add("rolloverTransactionSetControlNumber");
    openapiFields.add("senderInternalIdentification");
    openapiFields.add("senderInternalSubIdentification");
    openapiFields.add("senderReverseRoutingAddress");
    openapiFields.add("transactionSetControlNumberLowerBound");
    openapiFields.add("transactionSetControlNumberPrefix");
    openapiFields.add("transactionSetControlNumberSuffix");
    openapiFields.add("transactionSetControlNumberUpperBound");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("applyDelimiterStringAdvice");
    openapiRequiredFields.add("createGroupingSegments");
    openapiRequiredFields.add("enableDefaultGroupHeaders");
    openapiRequiredFields.add("groupControlNumberLowerBound");
    openapiRequiredFields.add("groupControlNumberUpperBound");
    openapiRequiredFields.add("interchangeControlNumberLowerBound");
    openapiRequiredFields.add("interchangeControlNumberUpperBound");
    openapiRequiredFields.add("isTestInterchange");
    openapiRequiredFields.add("overwriteExistingTransactionSetControlNumber");
    openapiRequiredFields.add("rolloverGroupControlNumber");
    openapiRequiredFields.add("rolloverInterchangeControlNumber");
    openapiRequiredFields.add("rolloverTransactionSetControlNumber");
    openapiRequiredFields.add("transactionSetControlNumberLowerBound");
    openapiRequiredFields.add("transactionSetControlNumberUpperBound");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EdifactEnvelopeSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EdifactEnvelopeSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EdifactEnvelopeSettings is not found in the empty JSON string", EdifactEnvelopeSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EdifactEnvelopeSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EdifactEnvelopeSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EdifactEnvelopeSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationReferenceId") != null && !jsonObj.get("applicationReferenceId").isJsonNull()) && !jsonObj.get("applicationReferenceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationReferenceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationReferenceId").toString()));
      }
      if ((jsonObj.get("communicationAgreementId") != null && !jsonObj.get("communicationAgreementId").isJsonNull()) && !jsonObj.get("communicationAgreementId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `communicationAgreementId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("communicationAgreementId").toString()));
      }
      if ((jsonObj.get("functionalGroupId") != null && !jsonObj.get("functionalGroupId").isJsonNull()) && !jsonObj.get("functionalGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionalGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionalGroupId").toString()));
      }
      if ((jsonObj.get("groupApplicationPassword") != null && !jsonObj.get("groupApplicationPassword").isJsonNull()) && !jsonObj.get("groupApplicationPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupApplicationPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupApplicationPassword").toString()));
      }
      if ((jsonObj.get("groupApplicationReceiverId") != null && !jsonObj.get("groupApplicationReceiverId").isJsonNull()) && !jsonObj.get("groupApplicationReceiverId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupApplicationReceiverId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupApplicationReceiverId").toString()));
      }
      if ((jsonObj.get("groupApplicationReceiverQualifier") != null && !jsonObj.get("groupApplicationReceiverQualifier").isJsonNull()) && !jsonObj.get("groupApplicationReceiverQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupApplicationReceiverQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupApplicationReceiverQualifier").toString()));
      }
      if ((jsonObj.get("groupApplicationSenderId") != null && !jsonObj.get("groupApplicationSenderId").isJsonNull()) && !jsonObj.get("groupApplicationSenderId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupApplicationSenderId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupApplicationSenderId").toString()));
      }
      if ((jsonObj.get("groupApplicationSenderQualifier") != null && !jsonObj.get("groupApplicationSenderQualifier").isJsonNull()) && !jsonObj.get("groupApplicationSenderQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupApplicationSenderQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupApplicationSenderQualifier").toString()));
      }
      if ((jsonObj.get("groupAssociationAssignedCode") != null && !jsonObj.get("groupAssociationAssignedCode").isJsonNull()) && !jsonObj.get("groupAssociationAssignedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupAssociationAssignedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupAssociationAssignedCode").toString()));
      }
      if ((jsonObj.get("groupControlNumberPrefix") != null && !jsonObj.get("groupControlNumberPrefix").isJsonNull()) && !jsonObj.get("groupControlNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupControlNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupControlNumberPrefix").toString()));
      }
      if ((jsonObj.get("groupControlNumberSuffix") != null && !jsonObj.get("groupControlNumberSuffix").isJsonNull()) && !jsonObj.get("groupControlNumberSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupControlNumberSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupControlNumberSuffix").toString()));
      }
      if ((jsonObj.get("groupControllingAgencyCode") != null && !jsonObj.get("groupControllingAgencyCode").isJsonNull()) && !jsonObj.get("groupControllingAgencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupControllingAgencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupControllingAgencyCode").toString()));
      }
      if ((jsonObj.get("groupMessageRelease") != null && !jsonObj.get("groupMessageRelease").isJsonNull()) && !jsonObj.get("groupMessageRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupMessageRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupMessageRelease").toString()));
      }
      if ((jsonObj.get("groupMessageVersion") != null && !jsonObj.get("groupMessageVersion").isJsonNull()) && !jsonObj.get("groupMessageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupMessageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupMessageVersion").toString()));
      }
      if ((jsonObj.get("interchangeControlNumberPrefix") != null && !jsonObj.get("interchangeControlNumberPrefix").isJsonNull()) && !jsonObj.get("interchangeControlNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchangeControlNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchangeControlNumberPrefix").toString()));
      }
      if ((jsonObj.get("interchangeControlNumberSuffix") != null && !jsonObj.get("interchangeControlNumberSuffix").isJsonNull()) && !jsonObj.get("interchangeControlNumberSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interchangeControlNumberSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interchangeControlNumberSuffix").toString()));
      }
      if ((jsonObj.get("processingPriorityCode") != null && !jsonObj.get("processingPriorityCode").isJsonNull()) && !jsonObj.get("processingPriorityCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processingPriorityCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processingPriorityCode").toString()));
      }
      if ((jsonObj.get("receiverInternalIdentification") != null && !jsonObj.get("receiverInternalIdentification").isJsonNull()) && !jsonObj.get("receiverInternalIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverInternalIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverInternalIdentification").toString()));
      }
      if ((jsonObj.get("receiverInternalSubIdentification") != null && !jsonObj.get("receiverInternalSubIdentification").isJsonNull()) && !jsonObj.get("receiverInternalSubIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverInternalSubIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverInternalSubIdentification").toString()));
      }
      if ((jsonObj.get("receiverReverseRoutingAddress") != null && !jsonObj.get("receiverReverseRoutingAddress").isJsonNull()) && !jsonObj.get("receiverReverseRoutingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverReverseRoutingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverReverseRoutingAddress").toString()));
      }
      if ((jsonObj.get("recipientReferencePasswordQualifier") != null && !jsonObj.get("recipientReferencePasswordQualifier").isJsonNull()) && !jsonObj.get("recipientReferencePasswordQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientReferencePasswordQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientReferencePasswordQualifier").toString()));
      }
      if ((jsonObj.get("recipientReferencePasswordValue") != null && !jsonObj.get("recipientReferencePasswordValue").isJsonNull()) && !jsonObj.get("recipientReferencePasswordValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipientReferencePasswordValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipientReferencePasswordValue").toString()));
      }
      if ((jsonObj.get("senderInternalIdentification") != null && !jsonObj.get("senderInternalIdentification").isJsonNull()) && !jsonObj.get("senderInternalIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderInternalIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderInternalIdentification").toString()));
      }
      if ((jsonObj.get("senderInternalSubIdentification") != null && !jsonObj.get("senderInternalSubIdentification").isJsonNull()) && !jsonObj.get("senderInternalSubIdentification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderInternalSubIdentification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderInternalSubIdentification").toString()));
      }
      if ((jsonObj.get("senderReverseRoutingAddress") != null && !jsonObj.get("senderReverseRoutingAddress").isJsonNull()) && !jsonObj.get("senderReverseRoutingAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderReverseRoutingAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderReverseRoutingAddress").toString()));
      }
      if ((jsonObj.get("transactionSetControlNumberPrefix") != null && !jsonObj.get("transactionSetControlNumberPrefix").isJsonNull()) && !jsonObj.get("transactionSetControlNumberPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionSetControlNumberPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionSetControlNumberPrefix").toString()));
      }
      if ((jsonObj.get("transactionSetControlNumberSuffix") != null && !jsonObj.get("transactionSetControlNumberSuffix").isJsonNull()) && !jsonObj.get("transactionSetControlNumberSuffix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transactionSetControlNumberSuffix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transactionSetControlNumberSuffix").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EdifactEnvelopeSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EdifactEnvelopeSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EdifactEnvelopeSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EdifactEnvelopeSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<EdifactEnvelopeSettings>() {
           @Override
           public void write(JsonWriter out, EdifactEnvelopeSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EdifactEnvelopeSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EdifactEnvelopeSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EdifactEnvelopeSettings
   * @throws IOException if the JSON string is invalid with respect to EdifactEnvelopeSettings
   */
  public static EdifactEnvelopeSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EdifactEnvelopeSettings.class);
  }

  /**
   * Convert an instance of EdifactEnvelopeSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

