/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.SegmentTerminatorSuffix;
import org.openapitools.client.model.X12CharacterSet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The X12 agreement framing settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class X12FramingSettings {
  public static final String SERIALIZED_NAME_CHARACTER_SET = "characterSet";
  @SerializedName(SERIALIZED_NAME_CHARACTER_SET)
  private X12CharacterSet characterSet;

  public static final String SERIALIZED_NAME_COMPONENT_SEPARATOR = "componentSeparator";
  @SerializedName(SERIALIZED_NAME_COMPONENT_SEPARATOR)
  private Integer componentSeparator;

  public static final String SERIALIZED_NAME_DATA_ELEMENT_SEPARATOR = "dataElementSeparator";
  @SerializedName(SERIALIZED_NAME_DATA_ELEMENT_SEPARATOR)
  private Integer dataElementSeparator;

  public static final String SERIALIZED_NAME_REPLACE_CHARACTER = "replaceCharacter";
  @SerializedName(SERIALIZED_NAME_REPLACE_CHARACTER)
  private Integer replaceCharacter;

  public static final String SERIALIZED_NAME_REPLACE_SEPARATORS_IN_PAYLOAD = "replaceSeparatorsInPayload";
  @SerializedName(SERIALIZED_NAME_REPLACE_SEPARATORS_IN_PAYLOAD)
  private Boolean replaceSeparatorsInPayload;

  public static final String SERIALIZED_NAME_SEGMENT_TERMINATOR = "segmentTerminator";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TERMINATOR)
  private Integer segmentTerminator;

  public static final String SERIALIZED_NAME_SEGMENT_TERMINATOR_SUFFIX = "segmentTerminatorSuffix";
  @SerializedName(SERIALIZED_NAME_SEGMENT_TERMINATOR_SUFFIX)
  private SegmentTerminatorSuffix segmentTerminatorSuffix;

  public X12FramingSettings() {
  }

  public X12FramingSettings characterSet(X12CharacterSet characterSet) {
    this.characterSet = characterSet;
    return this;
  }

  /**
   * Get characterSet
   * @return characterSet
   */
  @javax.annotation.Nonnull
  public X12CharacterSet getCharacterSet() {
    return characterSet;
  }

  public void setCharacterSet(X12CharacterSet characterSet) {
    this.characterSet = characterSet;
  }


  public X12FramingSettings componentSeparator(Integer componentSeparator) {
    this.componentSeparator = componentSeparator;
    return this;
  }

  /**
   * The component separator.
   * @return componentSeparator
   */
  @javax.annotation.Nonnull
  public Integer getComponentSeparator() {
    return componentSeparator;
  }

  public void setComponentSeparator(Integer componentSeparator) {
    this.componentSeparator = componentSeparator;
  }


  public X12FramingSettings dataElementSeparator(Integer dataElementSeparator) {
    this.dataElementSeparator = dataElementSeparator;
    return this;
  }

  /**
   * The data element separator.
   * @return dataElementSeparator
   */
  @javax.annotation.Nonnull
  public Integer getDataElementSeparator() {
    return dataElementSeparator;
  }

  public void setDataElementSeparator(Integer dataElementSeparator) {
    this.dataElementSeparator = dataElementSeparator;
  }


  public X12FramingSettings replaceCharacter(Integer replaceCharacter) {
    this.replaceCharacter = replaceCharacter;
    return this;
  }

  /**
   * The replacement character.
   * @return replaceCharacter
   */
  @javax.annotation.Nonnull
  public Integer getReplaceCharacter() {
    return replaceCharacter;
  }

  public void setReplaceCharacter(Integer replaceCharacter) {
    this.replaceCharacter = replaceCharacter;
  }


  public X12FramingSettings replaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
    this.replaceSeparatorsInPayload = replaceSeparatorsInPayload;
    return this;
  }

  /**
   * The value indicating whether to replace separators in payload.
   * @return replaceSeparatorsInPayload
   */
  @javax.annotation.Nonnull
  public Boolean getReplaceSeparatorsInPayload() {
    return replaceSeparatorsInPayload;
  }

  public void setReplaceSeparatorsInPayload(Boolean replaceSeparatorsInPayload) {
    this.replaceSeparatorsInPayload = replaceSeparatorsInPayload;
  }


  public X12FramingSettings segmentTerminator(Integer segmentTerminator) {
    this.segmentTerminator = segmentTerminator;
    return this;
  }

  /**
   * The segment terminator.
   * @return segmentTerminator
   */
  @javax.annotation.Nonnull
  public Integer getSegmentTerminator() {
    return segmentTerminator;
  }

  public void setSegmentTerminator(Integer segmentTerminator) {
    this.segmentTerminator = segmentTerminator;
  }


  public X12FramingSettings segmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
    this.segmentTerminatorSuffix = segmentTerminatorSuffix;
    return this;
  }

  /**
   * Get segmentTerminatorSuffix
   * @return segmentTerminatorSuffix
   */
  @javax.annotation.Nonnull
  public SegmentTerminatorSuffix getSegmentTerminatorSuffix() {
    return segmentTerminatorSuffix;
  }

  public void setSegmentTerminatorSuffix(SegmentTerminatorSuffix segmentTerminatorSuffix) {
    this.segmentTerminatorSuffix = segmentTerminatorSuffix;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    X12FramingSettings x12FramingSettings = (X12FramingSettings) o;
    return Objects.equals(this.characterSet, x12FramingSettings.characterSet) &&
        Objects.equals(this.componentSeparator, x12FramingSettings.componentSeparator) &&
        Objects.equals(this.dataElementSeparator, x12FramingSettings.dataElementSeparator) &&
        Objects.equals(this.replaceCharacter, x12FramingSettings.replaceCharacter) &&
        Objects.equals(this.replaceSeparatorsInPayload, x12FramingSettings.replaceSeparatorsInPayload) &&
        Objects.equals(this.segmentTerminator, x12FramingSettings.segmentTerminator) &&
        Objects.equals(this.segmentTerminatorSuffix, x12FramingSettings.segmentTerminatorSuffix);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterSet, componentSeparator, dataElementSeparator, replaceCharacter, replaceSeparatorsInPayload, segmentTerminator, segmentTerminatorSuffix);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class X12FramingSettings {\n");
    sb.append("    characterSet: ").append(toIndentedString(characterSet)).append("\n");
    sb.append("    componentSeparator: ").append(toIndentedString(componentSeparator)).append("\n");
    sb.append("    dataElementSeparator: ").append(toIndentedString(dataElementSeparator)).append("\n");
    sb.append("    replaceCharacter: ").append(toIndentedString(replaceCharacter)).append("\n");
    sb.append("    replaceSeparatorsInPayload: ").append(toIndentedString(replaceSeparatorsInPayload)).append("\n");
    sb.append("    segmentTerminator: ").append(toIndentedString(segmentTerminator)).append("\n");
    sb.append("    segmentTerminatorSuffix: ").append(toIndentedString(segmentTerminatorSuffix)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("characterSet");
    openapiFields.add("componentSeparator");
    openapiFields.add("dataElementSeparator");
    openapiFields.add("replaceCharacter");
    openapiFields.add("replaceSeparatorsInPayload");
    openapiFields.add("segmentTerminator");
    openapiFields.add("segmentTerminatorSuffix");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("characterSet");
    openapiRequiredFields.add("componentSeparator");
    openapiRequiredFields.add("dataElementSeparator");
    openapiRequiredFields.add("replaceCharacter");
    openapiRequiredFields.add("replaceSeparatorsInPayload");
    openapiRequiredFields.add("segmentTerminator");
    openapiRequiredFields.add("segmentTerminatorSuffix");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to X12FramingSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!X12FramingSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in X12FramingSettings is not found in the empty JSON string", X12FramingSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!X12FramingSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `X12FramingSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : X12FramingSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `characterSet`
      X12CharacterSet.validateJsonElement(jsonObj.get("characterSet"));
      // validate the required field `segmentTerminatorSuffix`
      SegmentTerminatorSuffix.validateJsonElement(jsonObj.get("segmentTerminatorSuffix"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!X12FramingSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'X12FramingSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<X12FramingSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(X12FramingSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<X12FramingSettings>() {
           @Override
           public void write(JsonWriter out, X12FramingSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public X12FramingSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of X12FramingSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of X12FramingSettings
   * @throws IOException if the JSON string is invalid with respect to X12FramingSettings
   */
  public static X12FramingSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, X12FramingSettings.class);
  }

  /**
   * Convert an instance of X12FramingSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

