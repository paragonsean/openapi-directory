/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Edifact envelope override settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EdifactEnvelopeOverride {
  public static final String SERIALIZED_NAME_APPLICATION_PASSWORD = "applicationPassword";
  @SerializedName(SERIALIZED_NAME_APPLICATION_PASSWORD)
  private String applicationPassword;

  public static final String SERIALIZED_NAME_ASSOCIATION_ASSIGNED_CODE = "associationAssignedCode";
  @SerializedName(SERIALIZED_NAME_ASSOCIATION_ASSIGNED_CODE)
  private String associationAssignedCode;

  public static final String SERIALIZED_NAME_CONTROLLING_AGENCY_CODE = "controllingAgencyCode";
  @SerializedName(SERIALIZED_NAME_CONTROLLING_AGENCY_CODE)
  private String controllingAgencyCode;

  public static final String SERIALIZED_NAME_FUNCTIONAL_GROUP_ID = "functionalGroupId";
  @SerializedName(SERIALIZED_NAME_FUNCTIONAL_GROUP_ID)
  private String functionalGroupId;

  public static final String SERIALIZED_NAME_GROUP_HEADER_MESSAGE_RELEASE = "groupHeaderMessageRelease";
  @SerializedName(SERIALIZED_NAME_GROUP_HEADER_MESSAGE_RELEASE)
  private String groupHeaderMessageRelease;

  public static final String SERIALIZED_NAME_GROUP_HEADER_MESSAGE_VERSION = "groupHeaderMessageVersion";
  @SerializedName(SERIALIZED_NAME_GROUP_HEADER_MESSAGE_VERSION)
  private String groupHeaderMessageVersion;

  public static final String SERIALIZED_NAME_MESSAGE_ASSOCIATION_ASSIGNED_CODE = "messageAssociationAssignedCode";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ASSOCIATION_ASSIGNED_CODE)
  private String messageAssociationAssignedCode;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  private String messageId;

  public static final String SERIALIZED_NAME_MESSAGE_RELEASE = "messageRelease";
  @SerializedName(SERIALIZED_NAME_MESSAGE_RELEASE)
  private String messageRelease;

  public static final String SERIALIZED_NAME_MESSAGE_VERSION = "messageVersion";
  @SerializedName(SERIALIZED_NAME_MESSAGE_VERSION)
  private String messageVersion;

  public static final String SERIALIZED_NAME_RECEIVER_APPLICATION_ID = "receiverApplicationId";
  @SerializedName(SERIALIZED_NAME_RECEIVER_APPLICATION_ID)
  private String receiverApplicationId;

  public static final String SERIALIZED_NAME_RECEIVER_APPLICATION_QUALIFIER = "receiverApplicationQualifier";
  @SerializedName(SERIALIZED_NAME_RECEIVER_APPLICATION_QUALIFIER)
  private String receiverApplicationQualifier;

  public static final String SERIALIZED_NAME_SENDER_APPLICATION_ID = "senderApplicationId";
  @SerializedName(SERIALIZED_NAME_SENDER_APPLICATION_ID)
  private String senderApplicationId;

  public static final String SERIALIZED_NAME_SENDER_APPLICATION_QUALIFIER = "senderApplicationQualifier";
  @SerializedName(SERIALIZED_NAME_SENDER_APPLICATION_QUALIFIER)
  private String senderApplicationQualifier;

  public static final String SERIALIZED_NAME_TARGET_NAMESPACE = "targetNamespace";
  @SerializedName(SERIALIZED_NAME_TARGET_NAMESPACE)
  private String targetNamespace;

  public EdifactEnvelopeOverride() {
  }

  public EdifactEnvelopeOverride applicationPassword(String applicationPassword) {
    this.applicationPassword = applicationPassword;
    return this;
  }

  /**
   * The application password.
   * @return applicationPassword
   */
  @javax.annotation.Nullable
  public String getApplicationPassword() {
    return applicationPassword;
  }

  public void setApplicationPassword(String applicationPassword) {
    this.applicationPassword = applicationPassword;
  }


  public EdifactEnvelopeOverride associationAssignedCode(String associationAssignedCode) {
    this.associationAssignedCode = associationAssignedCode;
    return this;
  }

  /**
   * The association assigned code.
   * @return associationAssignedCode
   */
  @javax.annotation.Nullable
  public String getAssociationAssignedCode() {
    return associationAssignedCode;
  }

  public void setAssociationAssignedCode(String associationAssignedCode) {
    this.associationAssignedCode = associationAssignedCode;
  }


  public EdifactEnvelopeOverride controllingAgencyCode(String controllingAgencyCode) {
    this.controllingAgencyCode = controllingAgencyCode;
    return this;
  }

  /**
   * The controlling agency code.
   * @return controllingAgencyCode
   */
  @javax.annotation.Nullable
  public String getControllingAgencyCode() {
    return controllingAgencyCode;
  }

  public void setControllingAgencyCode(String controllingAgencyCode) {
    this.controllingAgencyCode = controllingAgencyCode;
  }


  public EdifactEnvelopeOverride functionalGroupId(String functionalGroupId) {
    this.functionalGroupId = functionalGroupId;
    return this;
  }

  /**
   * The functional group id.
   * @return functionalGroupId
   */
  @javax.annotation.Nullable
  public String getFunctionalGroupId() {
    return functionalGroupId;
  }

  public void setFunctionalGroupId(String functionalGroupId) {
    this.functionalGroupId = functionalGroupId;
  }


  public EdifactEnvelopeOverride groupHeaderMessageRelease(String groupHeaderMessageRelease) {
    this.groupHeaderMessageRelease = groupHeaderMessageRelease;
    return this;
  }

  /**
   * The group header message release.
   * @return groupHeaderMessageRelease
   */
  @javax.annotation.Nullable
  public String getGroupHeaderMessageRelease() {
    return groupHeaderMessageRelease;
  }

  public void setGroupHeaderMessageRelease(String groupHeaderMessageRelease) {
    this.groupHeaderMessageRelease = groupHeaderMessageRelease;
  }


  public EdifactEnvelopeOverride groupHeaderMessageVersion(String groupHeaderMessageVersion) {
    this.groupHeaderMessageVersion = groupHeaderMessageVersion;
    return this;
  }

  /**
   * The group header message version.
   * @return groupHeaderMessageVersion
   */
  @javax.annotation.Nullable
  public String getGroupHeaderMessageVersion() {
    return groupHeaderMessageVersion;
  }

  public void setGroupHeaderMessageVersion(String groupHeaderMessageVersion) {
    this.groupHeaderMessageVersion = groupHeaderMessageVersion;
  }


  public EdifactEnvelopeOverride messageAssociationAssignedCode(String messageAssociationAssignedCode) {
    this.messageAssociationAssignedCode = messageAssociationAssignedCode;
    return this;
  }

  /**
   * The message association assigned code.
   * @return messageAssociationAssignedCode
   */
  @javax.annotation.Nullable
  public String getMessageAssociationAssignedCode() {
    return messageAssociationAssignedCode;
  }

  public void setMessageAssociationAssignedCode(String messageAssociationAssignedCode) {
    this.messageAssociationAssignedCode = messageAssociationAssignedCode;
  }


  public EdifactEnvelopeOverride messageId(String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * The message id on which this envelope settings has to be applied.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(String messageId) {
    this.messageId = messageId;
  }


  public EdifactEnvelopeOverride messageRelease(String messageRelease) {
    this.messageRelease = messageRelease;
    return this;
  }

  /**
   * The message release version on which this envelope settings has to be applied.
   * @return messageRelease
   */
  @javax.annotation.Nullable
  public String getMessageRelease() {
    return messageRelease;
  }

  public void setMessageRelease(String messageRelease) {
    this.messageRelease = messageRelease;
  }


  public EdifactEnvelopeOverride messageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
    return this;
  }

  /**
   * The message version on which this envelope settings has to be applied.
   * @return messageVersion
   */
  @javax.annotation.Nullable
  public String getMessageVersion() {
    return messageVersion;
  }

  public void setMessageVersion(String messageVersion) {
    this.messageVersion = messageVersion;
  }


  public EdifactEnvelopeOverride receiverApplicationId(String receiverApplicationId) {
    this.receiverApplicationId = receiverApplicationId;
    return this;
  }

  /**
   * The receiver application id.
   * @return receiverApplicationId
   */
  @javax.annotation.Nullable
  public String getReceiverApplicationId() {
    return receiverApplicationId;
  }

  public void setReceiverApplicationId(String receiverApplicationId) {
    this.receiverApplicationId = receiverApplicationId;
  }


  public EdifactEnvelopeOverride receiverApplicationQualifier(String receiverApplicationQualifier) {
    this.receiverApplicationQualifier = receiverApplicationQualifier;
    return this;
  }

  /**
   * The receiver application qualifier.
   * @return receiverApplicationQualifier
   */
  @javax.annotation.Nullable
  public String getReceiverApplicationQualifier() {
    return receiverApplicationQualifier;
  }

  public void setReceiverApplicationQualifier(String receiverApplicationQualifier) {
    this.receiverApplicationQualifier = receiverApplicationQualifier;
  }


  public EdifactEnvelopeOverride senderApplicationId(String senderApplicationId) {
    this.senderApplicationId = senderApplicationId;
    return this;
  }

  /**
   * The sender application id.
   * @return senderApplicationId
   */
  @javax.annotation.Nullable
  public String getSenderApplicationId() {
    return senderApplicationId;
  }

  public void setSenderApplicationId(String senderApplicationId) {
    this.senderApplicationId = senderApplicationId;
  }


  public EdifactEnvelopeOverride senderApplicationQualifier(String senderApplicationQualifier) {
    this.senderApplicationQualifier = senderApplicationQualifier;
    return this;
  }

  /**
   * The sender application qualifier.
   * @return senderApplicationQualifier
   */
  @javax.annotation.Nullable
  public String getSenderApplicationQualifier() {
    return senderApplicationQualifier;
  }

  public void setSenderApplicationQualifier(String senderApplicationQualifier) {
    this.senderApplicationQualifier = senderApplicationQualifier;
  }


  public EdifactEnvelopeOverride targetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
    return this;
  }

  /**
   * The target namespace on which this envelope settings has to be applied.
   * @return targetNamespace
   */
  @javax.annotation.Nullable
  public String getTargetNamespace() {
    return targetNamespace;
  }

  public void setTargetNamespace(String targetNamespace) {
    this.targetNamespace = targetNamespace;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdifactEnvelopeOverride edifactEnvelopeOverride = (EdifactEnvelopeOverride) o;
    return Objects.equals(this.applicationPassword, edifactEnvelopeOverride.applicationPassword) &&
        Objects.equals(this.associationAssignedCode, edifactEnvelopeOverride.associationAssignedCode) &&
        Objects.equals(this.controllingAgencyCode, edifactEnvelopeOverride.controllingAgencyCode) &&
        Objects.equals(this.functionalGroupId, edifactEnvelopeOverride.functionalGroupId) &&
        Objects.equals(this.groupHeaderMessageRelease, edifactEnvelopeOverride.groupHeaderMessageRelease) &&
        Objects.equals(this.groupHeaderMessageVersion, edifactEnvelopeOverride.groupHeaderMessageVersion) &&
        Objects.equals(this.messageAssociationAssignedCode, edifactEnvelopeOverride.messageAssociationAssignedCode) &&
        Objects.equals(this.messageId, edifactEnvelopeOverride.messageId) &&
        Objects.equals(this.messageRelease, edifactEnvelopeOverride.messageRelease) &&
        Objects.equals(this.messageVersion, edifactEnvelopeOverride.messageVersion) &&
        Objects.equals(this.receiverApplicationId, edifactEnvelopeOverride.receiverApplicationId) &&
        Objects.equals(this.receiverApplicationQualifier, edifactEnvelopeOverride.receiverApplicationQualifier) &&
        Objects.equals(this.senderApplicationId, edifactEnvelopeOverride.senderApplicationId) &&
        Objects.equals(this.senderApplicationQualifier, edifactEnvelopeOverride.senderApplicationQualifier) &&
        Objects.equals(this.targetNamespace, edifactEnvelopeOverride.targetNamespace);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationPassword, associationAssignedCode, controllingAgencyCode, functionalGroupId, groupHeaderMessageRelease, groupHeaderMessageVersion, messageAssociationAssignedCode, messageId, messageRelease, messageVersion, receiverApplicationId, receiverApplicationQualifier, senderApplicationId, senderApplicationQualifier, targetNamespace);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdifactEnvelopeOverride {\n");
    sb.append("    applicationPassword: ").append(toIndentedString(applicationPassword)).append("\n");
    sb.append("    associationAssignedCode: ").append(toIndentedString(associationAssignedCode)).append("\n");
    sb.append("    controllingAgencyCode: ").append(toIndentedString(controllingAgencyCode)).append("\n");
    sb.append("    functionalGroupId: ").append(toIndentedString(functionalGroupId)).append("\n");
    sb.append("    groupHeaderMessageRelease: ").append(toIndentedString(groupHeaderMessageRelease)).append("\n");
    sb.append("    groupHeaderMessageVersion: ").append(toIndentedString(groupHeaderMessageVersion)).append("\n");
    sb.append("    messageAssociationAssignedCode: ").append(toIndentedString(messageAssociationAssignedCode)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    messageRelease: ").append(toIndentedString(messageRelease)).append("\n");
    sb.append("    messageVersion: ").append(toIndentedString(messageVersion)).append("\n");
    sb.append("    receiverApplicationId: ").append(toIndentedString(receiverApplicationId)).append("\n");
    sb.append("    receiverApplicationQualifier: ").append(toIndentedString(receiverApplicationQualifier)).append("\n");
    sb.append("    senderApplicationId: ").append(toIndentedString(senderApplicationId)).append("\n");
    sb.append("    senderApplicationQualifier: ").append(toIndentedString(senderApplicationQualifier)).append("\n");
    sb.append("    targetNamespace: ").append(toIndentedString(targetNamespace)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationPassword");
    openapiFields.add("associationAssignedCode");
    openapiFields.add("controllingAgencyCode");
    openapiFields.add("functionalGroupId");
    openapiFields.add("groupHeaderMessageRelease");
    openapiFields.add("groupHeaderMessageVersion");
    openapiFields.add("messageAssociationAssignedCode");
    openapiFields.add("messageId");
    openapiFields.add("messageRelease");
    openapiFields.add("messageVersion");
    openapiFields.add("receiverApplicationId");
    openapiFields.add("receiverApplicationQualifier");
    openapiFields.add("senderApplicationId");
    openapiFields.add("senderApplicationQualifier");
    openapiFields.add("targetNamespace");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EdifactEnvelopeOverride
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EdifactEnvelopeOverride.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EdifactEnvelopeOverride is not found in the empty JSON string", EdifactEnvelopeOverride.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EdifactEnvelopeOverride.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EdifactEnvelopeOverride` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationPassword") != null && !jsonObj.get("applicationPassword").isJsonNull()) && !jsonObj.get("applicationPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationPassword").toString()));
      }
      if ((jsonObj.get("associationAssignedCode") != null && !jsonObj.get("associationAssignedCode").isJsonNull()) && !jsonObj.get("associationAssignedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `associationAssignedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("associationAssignedCode").toString()));
      }
      if ((jsonObj.get("controllingAgencyCode") != null && !jsonObj.get("controllingAgencyCode").isJsonNull()) && !jsonObj.get("controllingAgencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllingAgencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllingAgencyCode").toString()));
      }
      if ((jsonObj.get("functionalGroupId") != null && !jsonObj.get("functionalGroupId").isJsonNull()) && !jsonObj.get("functionalGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionalGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionalGroupId").toString()));
      }
      if ((jsonObj.get("groupHeaderMessageRelease") != null && !jsonObj.get("groupHeaderMessageRelease").isJsonNull()) && !jsonObj.get("groupHeaderMessageRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupHeaderMessageRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupHeaderMessageRelease").toString()));
      }
      if ((jsonObj.get("groupHeaderMessageVersion") != null && !jsonObj.get("groupHeaderMessageVersion").isJsonNull()) && !jsonObj.get("groupHeaderMessageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `groupHeaderMessageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("groupHeaderMessageVersion").toString()));
      }
      if ((jsonObj.get("messageAssociationAssignedCode") != null && !jsonObj.get("messageAssociationAssignedCode").isJsonNull()) && !jsonObj.get("messageAssociationAssignedCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageAssociationAssignedCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageAssociationAssignedCode").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("messageRelease") != null && !jsonObj.get("messageRelease").isJsonNull()) && !jsonObj.get("messageRelease").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageRelease` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageRelease").toString()));
      }
      if ((jsonObj.get("messageVersion") != null && !jsonObj.get("messageVersion").isJsonNull()) && !jsonObj.get("messageVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageVersion").toString()));
      }
      if ((jsonObj.get("receiverApplicationId") != null && !jsonObj.get("receiverApplicationId").isJsonNull()) && !jsonObj.get("receiverApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverApplicationId").toString()));
      }
      if ((jsonObj.get("receiverApplicationQualifier") != null && !jsonObj.get("receiverApplicationQualifier").isJsonNull()) && !jsonObj.get("receiverApplicationQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `receiverApplicationQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("receiverApplicationQualifier").toString()));
      }
      if ((jsonObj.get("senderApplicationId") != null && !jsonObj.get("senderApplicationId").isJsonNull()) && !jsonObj.get("senderApplicationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderApplicationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderApplicationId").toString()));
      }
      if ((jsonObj.get("senderApplicationQualifier") != null && !jsonObj.get("senderApplicationQualifier").isJsonNull()) && !jsonObj.get("senderApplicationQualifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderApplicationQualifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderApplicationQualifier").toString()));
      }
      if ((jsonObj.get("targetNamespace") != null && !jsonObj.get("targetNamespace").isJsonNull()) && !jsonObj.get("targetNamespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetNamespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetNamespace").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EdifactEnvelopeOverride.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EdifactEnvelopeOverride' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EdifactEnvelopeOverride> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EdifactEnvelopeOverride.class));

       return (TypeAdapter<T>) new TypeAdapter<EdifactEnvelopeOverride>() {
           @Override
           public void write(JsonWriter out, EdifactEnvelopeOverride value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EdifactEnvelopeOverride read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EdifactEnvelopeOverride given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EdifactEnvelopeOverride
   * @throws IOException if the JSON string is invalid with respect to EdifactEnvelopeOverride
   */
  public static EdifactEnvelopeOverride fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EdifactEnvelopeOverride.class);
  }

  /**
   * Convert an instance of EdifactEnvelopeOverride to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

