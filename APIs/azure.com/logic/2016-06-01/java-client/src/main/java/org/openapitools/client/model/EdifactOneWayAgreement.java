/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.BusinessIdentity;
import org.openapitools.client.model.EdifactProtocolSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Edifact one way agreement.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EdifactOneWayAgreement {
  public static final String SERIALIZED_NAME_PROTOCOL_SETTINGS = "protocolSettings";
  @SerializedName(SERIALIZED_NAME_PROTOCOL_SETTINGS)
  private EdifactProtocolSettings protocolSettings;

  public static final String SERIALIZED_NAME_RECEIVER_BUSINESS_IDENTITY = "receiverBusinessIdentity";
  @SerializedName(SERIALIZED_NAME_RECEIVER_BUSINESS_IDENTITY)
  private BusinessIdentity receiverBusinessIdentity;

  public static final String SERIALIZED_NAME_SENDER_BUSINESS_IDENTITY = "senderBusinessIdentity";
  @SerializedName(SERIALIZED_NAME_SENDER_BUSINESS_IDENTITY)
  private BusinessIdentity senderBusinessIdentity;

  public EdifactOneWayAgreement() {
  }

  public EdifactOneWayAgreement protocolSettings(EdifactProtocolSettings protocolSettings) {
    this.protocolSettings = protocolSettings;
    return this;
  }

  /**
   * Get protocolSettings
   * @return protocolSettings
   */
  @javax.annotation.Nonnull
  public EdifactProtocolSettings getProtocolSettings() {
    return protocolSettings;
  }

  public void setProtocolSettings(EdifactProtocolSettings protocolSettings) {
    this.protocolSettings = protocolSettings;
  }


  public EdifactOneWayAgreement receiverBusinessIdentity(BusinessIdentity receiverBusinessIdentity) {
    this.receiverBusinessIdentity = receiverBusinessIdentity;
    return this;
  }

  /**
   * Get receiverBusinessIdentity
   * @return receiverBusinessIdentity
   */
  @javax.annotation.Nonnull
  public BusinessIdentity getReceiverBusinessIdentity() {
    return receiverBusinessIdentity;
  }

  public void setReceiverBusinessIdentity(BusinessIdentity receiverBusinessIdentity) {
    this.receiverBusinessIdentity = receiverBusinessIdentity;
  }


  public EdifactOneWayAgreement senderBusinessIdentity(BusinessIdentity senderBusinessIdentity) {
    this.senderBusinessIdentity = senderBusinessIdentity;
    return this;
  }

  /**
   * Get senderBusinessIdentity
   * @return senderBusinessIdentity
   */
  @javax.annotation.Nonnull
  public BusinessIdentity getSenderBusinessIdentity() {
    return senderBusinessIdentity;
  }

  public void setSenderBusinessIdentity(BusinessIdentity senderBusinessIdentity) {
    this.senderBusinessIdentity = senderBusinessIdentity;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EdifactOneWayAgreement edifactOneWayAgreement = (EdifactOneWayAgreement) o;
    return Objects.equals(this.protocolSettings, edifactOneWayAgreement.protocolSettings) &&
        Objects.equals(this.receiverBusinessIdentity, edifactOneWayAgreement.receiverBusinessIdentity) &&
        Objects.equals(this.senderBusinessIdentity, edifactOneWayAgreement.senderBusinessIdentity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(protocolSettings, receiverBusinessIdentity, senderBusinessIdentity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EdifactOneWayAgreement {\n");
    sb.append("    protocolSettings: ").append(toIndentedString(protocolSettings)).append("\n");
    sb.append("    receiverBusinessIdentity: ").append(toIndentedString(receiverBusinessIdentity)).append("\n");
    sb.append("    senderBusinessIdentity: ").append(toIndentedString(senderBusinessIdentity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("protocolSettings");
    openapiFields.add("receiverBusinessIdentity");
    openapiFields.add("senderBusinessIdentity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("protocolSettings");
    openapiRequiredFields.add("receiverBusinessIdentity");
    openapiRequiredFields.add("senderBusinessIdentity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EdifactOneWayAgreement
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EdifactOneWayAgreement.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EdifactOneWayAgreement is not found in the empty JSON string", EdifactOneWayAgreement.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EdifactOneWayAgreement.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EdifactOneWayAgreement` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EdifactOneWayAgreement.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `protocolSettings`
      EdifactProtocolSettings.validateJsonElement(jsonObj.get("protocolSettings"));
      // validate the required field `receiverBusinessIdentity`
      BusinessIdentity.validateJsonElement(jsonObj.get("receiverBusinessIdentity"));
      // validate the required field `senderBusinessIdentity`
      BusinessIdentity.validateJsonElement(jsonObj.get("senderBusinessIdentity"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EdifactOneWayAgreement.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EdifactOneWayAgreement' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EdifactOneWayAgreement> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EdifactOneWayAgreement.class));

       return (TypeAdapter<T>) new TypeAdapter<EdifactOneWayAgreement>() {
           @Override
           public void write(JsonWriter out, EdifactOneWayAgreement value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EdifactOneWayAgreement read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EdifactOneWayAgreement given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EdifactOneWayAgreement
   * @throws IOException if the JSON string is invalid with respect to EdifactOneWayAgreement
   */
  public static EdifactOneWayAgreement fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EdifactOneWayAgreement.class);
  }

  /**
   * Convert an instance of EdifactOneWayAgreement to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

