/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.IntegrationAccountCertificate;
import org.openapitools.client.model.IntegrationAccountCertificateListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IntegrationAccountCertificatesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public IntegrationAccountCertificatesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IntegrationAccountCertificatesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for certificatesCreateOrUpdate
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param certificate The integration account certificate. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, IntegrationAccountCertificate certificate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = certificate;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, IntegrationAccountCertificate certificate, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'certificate' is set
        if (certificate == null) {
            throw new ApiException("Missing the required parameter 'certificate' when calling certificatesCreateOrUpdate(Async)");
        }

        return certificatesCreateOrUpdateCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, certificate, _callback);

    }

    /**
     * 
     * Creates or updates an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param certificate The integration account certificate. (required)
     * @return IntegrationAccountCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationAccountCertificate certificatesCreateOrUpdate(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, IntegrationAccountCertificate certificate) throws ApiException {
        ApiResponse<IntegrationAccountCertificate> localVarResp = certificatesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, certificate);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param certificate The integration account certificate. (required)
     * @return ApiResponse&lt;IntegrationAccountCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationAccountCertificate> certificatesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, IntegrationAccountCertificate certificate) throws ApiException {
        okhttp3.Call localVarCall = certificatesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, certificate, null);
        Type localVarReturnType = new TypeToken<IntegrationAccountCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param certificate The integration account certificate. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, IntegrationAccountCertificate certificate, final ApiCallback<IntegrationAccountCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, certificate, _callback);
        Type localVarReturnType = new TypeToken<IntegrationAccountCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesDelete
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesDelete(Async)");
        }

        return certificatesDeleteCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public void certificatesDelete(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion) throws ApiException {
        certificatesDeleteWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion);
    }

    /**
     * 
     * Deletes an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> certificatesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesDeleteAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates/{certificateName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()))
            .replace("{" + "certificateName" + "}", localVarApiClient.escapeString(certificateName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'certificateName' is set
        if (certificateName == null) {
            throw new ApiException("Missing the required parameter 'certificateName' when calling certificatesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesGet(Async)");
        }

        return certificatesGetCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, _callback);

    }

    /**
     * 
     * Gets an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @return IntegrationAccountCertificate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationAccountCertificate certificatesGet(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion) throws ApiException {
        ApiResponse<IntegrationAccountCertificate> localVarResp = certificatesGetWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;IntegrationAccountCertificate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationAccountCertificate> certificatesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = certificatesGetValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, null);
        Type localVarReturnType = new TypeToken<IntegrationAccountCertificate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets an integration account certificate.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param certificateName The integration account certificate name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesGetAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String certificateName, String apiVersion, final ApiCallback<IntegrationAccountCertificate> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesGetValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, certificateName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<IntegrationAccountCertificate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for certificatesListByIntegrationAccounts
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListByIntegrationAccountsCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/integrationAccounts/{integrationAccountName}/certificates"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "integrationAccountName" + "}", localVarApiClient.escapeString(integrationAccountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call certificatesListByIntegrationAccountsValidateBeforeCall(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, Integer $top, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling certificatesListByIntegrationAccounts(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling certificatesListByIntegrationAccounts(Async)");
        }

        // verify the required parameter 'integrationAccountName' is set
        if (integrationAccountName == null) {
            throw new ApiException("Missing the required parameter 'integrationAccountName' when calling certificatesListByIntegrationAccounts(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling certificatesListByIntegrationAccounts(Async)");
        }

        return certificatesListByIntegrationAccountsCall(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, $top, _callback);

    }

    /**
     * 
     * Gets a list of integration account certificates.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @return IntegrationAccountCertificateListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public IntegrationAccountCertificateListResult certificatesListByIntegrationAccounts(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, Integer $top) throws ApiException {
        ApiResponse<IntegrationAccountCertificateListResult> localVarResp = certificatesListByIntegrationAccountsWithHttpInfo(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, $top);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of integration account certificates.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @return ApiResponse&lt;IntegrationAccountCertificateListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IntegrationAccountCertificateListResult> certificatesListByIntegrationAccountsWithHttpInfo(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, Integer $top) throws ApiException {
        okhttp3.Call localVarCall = certificatesListByIntegrationAccountsValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, $top, null);
        Type localVarReturnType = new TypeToken<IntegrationAccountCertificateListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of integration account certificates.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param integrationAccountName The integration account name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call certificatesListByIntegrationAccountsAsync(String subscriptionId, String resourceGroupName, String integrationAccountName, String apiVersion, Integer $top, final ApiCallback<IntegrationAccountCertificateListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = certificatesListByIntegrationAccountsValidateBeforeCall(subscriptionId, resourceGroupName, integrationAccountName, apiVersion, $top, _callback);
        Type localVarReturnType = new TypeToken<IntegrationAccountCertificateListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
