/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.ExpressionTraces;
import org.openapitools.client.model.RequestHistory;
import org.openapitools.client.model.RequestHistoryListResult;
import org.openapitools.client.model.WorkflowRunAction;
import org.openapitools.client.model.WorkflowRunActionListResult;
import org.openapitools.client.model.WorkflowRunActionRepetitionDefinition;
import org.openapitools.client.model.WorkflowRunActionRepetitionDefinitionCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WorkflowRunActionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WorkflowRunActionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WorkflowRunActionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for workflowRunActionRepetitionsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsGetCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()))
            .replace("{" + "repetitionName" + "}", localVarApiClient.escapeString(repetitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRepetitionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsGet(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsGet(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsGet(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsGet(Async)");
        }

        // verify the required parameter 'repetitionName' is set
        if (repetitionName == null) {
            throw new ApiException("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsGet(Async)");
        }

        return workflowRunActionRepetitionsGetCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);

    }

    /**
     * 
     * Get a workflow run action repetition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return WorkflowRunActionRepetitionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowRunActionRepetitionDefinition workflowRunActionRepetitionsGet(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        ApiResponse<WorkflowRunActionRepetitionDefinition> localVarResp = workflowRunActionRepetitionsGetWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a workflow run action repetition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;WorkflowRunActionRepetitionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowRunActionRepetitionDefinition> workflowRunActionRepetitionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRepetitionsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a workflow run action repetition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsGetAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback<WorkflowRunActionRepetitionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRepetitionsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionRepetitionsList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsListCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRepetitionsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsList(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsList(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsList(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsList(Async)");
        }

        return workflowRunActionRepetitionsListCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);

    }

    /**
     * 
     * Get all of a workflow run action repetitions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return WorkflowRunActionRepetitionDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowRunActionRepetitionDefinitionCollection workflowRunActionRepetitionsList(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        ApiResponse<WorkflowRunActionRepetitionDefinitionCollection> localVarResp = workflowRunActionRepetitionsListWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all of a workflow run action repetitions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;WorkflowRunActionRepetitionDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowRunActionRepetitionDefinitionCollection> workflowRunActionRepetitionsListWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRepetitionsListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all of a workflow run action repetitions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsListAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback<WorkflowRunActionRepetitionDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRepetitionsListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionRepetitionsListExpressionTraces
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsListExpressionTracesCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/listExpressionTraces"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()))
            .replace("{" + "repetitionName" + "}", localVarApiClient.escapeString(repetitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRepetitionsListExpressionTracesValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'repetitionName' is set
        if (repetitionName == null) {
            throw new ApiException("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsListExpressionTraces(Async)");
        }

        return workflowRunActionRepetitionsListExpressionTracesCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);

    }

    /**
     * 
     * Lists a workflow run expression trace.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return ExpressionTraces
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExpressionTraces workflowRunActionRepetitionsListExpressionTraces(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        ApiResponse<ExpressionTraces> localVarResp = workflowRunActionRepetitionsListExpressionTracesWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists a workflow run expression trace.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;ExpressionTraces&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressionTraces> workflowRunActionRepetitionsListExpressionTracesWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRepetitionsListExpressionTracesValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ExpressionTraces>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists a workflow run expression trace.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsListExpressionTracesAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback<ExpressionTraces> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRepetitionsListExpressionTracesValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ExpressionTraces>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionRepetitionsRequestHistoriesGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsRequestHistoriesGetCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String requestHistoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories/{requestHistoryName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()))
            .replace("{" + "repetitionName" + "}", localVarApiClient.escapeString(repetitionName.toString()))
            .replace("{" + "requestHistoryName" + "}", localVarApiClient.escapeString(requestHistoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRepetitionsRequestHistoriesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String requestHistoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'repetitionName' is set
        if (repetitionName == null) {
            throw new ApiException("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'requestHistoryName' is set
        if (requestHistoryName == null) {
            throw new ApiException("Missing the required parameter 'requestHistoryName' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsRequestHistoriesGet(Async)");
        }

        return workflowRunActionRepetitionsRequestHistoriesGetCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, requestHistoryName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a workflow run repetition request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @return RequestHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RequestHistory workflowRunActionRepetitionsRequestHistoriesGet(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String requestHistoryName, String apiVersion) throws ApiException {
        ApiResponse<RequestHistory> localVarResp = workflowRunActionRepetitionsRequestHistoriesGetWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, requestHistoryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a workflow run repetition request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;RequestHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestHistory> workflowRunActionRepetitionsRequestHistoriesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String requestHistoryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRepetitionsRequestHistoriesGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, requestHistoryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RequestHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a workflow run repetition request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsRequestHistoriesGetAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String requestHistoryName, String apiVersion, final ApiCallback<RequestHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRepetitionsRequestHistoriesGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, requestHistoryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RequestHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionRepetitionsRequestHistoriesList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsRequestHistoriesListCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/repetitions/{repetitionName}/requestHistories"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()))
            .replace("{" + "repetitionName" + "}", localVarApiClient.escapeString(repetitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRepetitionsRequestHistoriesListValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        // verify the required parameter 'repetitionName' is set
        if (repetitionName == null) {
            throw new ApiException("Missing the required parameter 'repetitionName' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRepetitionsRequestHistoriesList(Async)");
        }

        return workflowRunActionRepetitionsRequestHistoriesListCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);

    }

    /**
     * 
     * List a workflow run repetition request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return RequestHistoryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RequestHistoryListResult workflowRunActionRepetitionsRequestHistoriesList(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        ApiResponse<RequestHistoryListResult> localVarResp = workflowRunActionRepetitionsRequestHistoriesListWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List a workflow run repetition request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;RequestHistoryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestHistoryListResult> workflowRunActionRepetitionsRequestHistoriesListWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRepetitionsRequestHistoriesListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RequestHistoryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List a workflow run repetition request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRepetitionsRequestHistoriesListAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback<RequestHistoryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRepetitionsRequestHistoriesListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RequestHistoryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionRequestHistoriesGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRequestHistoriesGetCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String requestHistoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories/{requestHistoryName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()))
            .replace("{" + "requestHistoryName" + "}", localVarApiClient.escapeString(requestHistoryName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRequestHistoriesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String requestHistoryName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'requestHistoryName' is set
        if (requestHistoryName == null) {
            throw new ApiException("Missing the required parameter 'requestHistoryName' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRequestHistoriesGet(Async)");
        }

        return workflowRunActionRequestHistoriesGetCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, requestHistoryName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a workflow run request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @return RequestHistory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RequestHistory workflowRunActionRequestHistoriesGet(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String requestHistoryName, String apiVersion) throws ApiException {
        ApiResponse<RequestHistory> localVarResp = workflowRunActionRequestHistoriesGetWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, requestHistoryName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a workflow run request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;RequestHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestHistory> workflowRunActionRequestHistoriesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String requestHistoryName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRequestHistoriesGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, requestHistoryName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RequestHistory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a workflow run request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param requestHistoryName The request history name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRequestHistoriesGetAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String requestHistoryName, String apiVersion, final ApiCallback<RequestHistory> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRequestHistoriesGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, requestHistoryName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RequestHistory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionRequestHistoriesList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRequestHistoriesListCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/requestHistories"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionRequestHistoriesListValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionRequestHistoriesList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionRequestHistoriesList(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionRequestHistoriesList(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionRequestHistoriesList(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionRequestHistoriesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionRequestHistoriesList(Async)");
        }

        return workflowRunActionRequestHistoriesListCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);

    }

    /**
     * 
     * List a workflow run request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return RequestHistoryListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public RequestHistoryListResult workflowRunActionRequestHistoriesList(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        ApiResponse<RequestHistoryListResult> localVarResp = workflowRunActionRequestHistoriesListWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List a workflow run request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;RequestHistoryListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RequestHistoryListResult> workflowRunActionRequestHistoriesListWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionRequestHistoriesListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<RequestHistoryListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List a workflow run request history.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionRequestHistoriesListAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback<RequestHistoryListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionRequestHistoriesListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<RequestHistoryListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionScopedRepetitionsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionScopedRepetitionsGetCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions/{repetitionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()))
            .replace("{" + "repetitionName" + "}", localVarApiClient.escapeString(repetitionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionScopedRepetitionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        // verify the required parameter 'repetitionName' is set
        if (repetitionName == null) {
            throw new ApiException("Missing the required parameter 'repetitionName' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionScopedRepetitionsGet(Async)");
        }

        return workflowRunActionScopedRepetitionsGetCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);

    }

    /**
     * 
     * Get a workflow run action scoped repetition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return WorkflowRunActionRepetitionDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowRunActionRepetitionDefinition workflowRunActionScopedRepetitionsGet(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        ApiResponse<WorkflowRunActionRepetitionDefinition> localVarResp = workflowRunActionScopedRepetitionsGetWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a workflow run action scoped repetition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;WorkflowRunActionRepetitionDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowRunActionRepetitionDefinition> workflowRunActionScopedRepetitionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionScopedRepetitionsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a workflow run action scoped repetition.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param repetitionName The workflow repetition. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionScopedRepetitionsGetAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String repetitionName, String apiVersion, final ApiCallback<WorkflowRunActionRepetitionDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionScopedRepetitionsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, repetitionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionScopedRepetitionsList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionScopedRepetitionsListCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/scopeRepetitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionScopedRepetitionsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionScopedRepetitionsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionScopedRepetitionsList(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionScopedRepetitionsList(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionScopedRepetitionsList(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionScopedRepetitionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionScopedRepetitionsList(Async)");
        }

        return workflowRunActionScopedRepetitionsListCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);

    }

    /**
     * 
     * List the workflow run action scoped repetitions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return WorkflowRunActionRepetitionDefinitionCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowRunActionRepetitionDefinitionCollection workflowRunActionScopedRepetitionsList(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        ApiResponse<WorkflowRunActionRepetitionDefinitionCollection> localVarResp = workflowRunActionScopedRepetitionsListWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List the workflow run action scoped repetitions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;WorkflowRunActionRepetitionDefinitionCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowRunActionRepetitionDefinitionCollection> workflowRunActionScopedRepetitionsListWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionScopedRepetitionsListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinitionCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List the workflow run action scoped repetitions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionScopedRepetitionsListAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback<WorkflowRunActionRepetitionDefinitionCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionScopedRepetitionsListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunActionRepetitionDefinitionCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionsGet
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionsGetCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionsGet(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionsGet(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionsGet(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionsGet(Async)");
        }

        return workflowRunActionsGetCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);

    }

    /**
     * 
     * Gets a workflow run action.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return WorkflowRunAction
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowRunAction workflowRunActionsGet(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        ApiResponse<WorkflowRunAction> localVarResp = workflowRunActionsGetWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a workflow run action.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;WorkflowRunAction&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowRunAction> workflowRunActionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<WorkflowRunAction>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a workflow run action.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionsGetAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback<WorkflowRunAction> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionsGetValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunAction>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionsList
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: Status. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionsListCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionsListValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String apiVersion, Integer $top, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionsList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionsList(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionsList(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionsList(Async)");
        }

        return workflowRunActionsListCall(subscriptionId, resourceGroupName, workflowName, runName, apiVersion, $top, $filter, _callback);

    }

    /**
     * 
     * Gets a list of workflow run actions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: Status. (optional)
     * @return WorkflowRunActionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public WorkflowRunActionListResult workflowRunActionsList(String subscriptionId, String resourceGroupName, String workflowName, String runName, String apiVersion, Integer $top, String $filter) throws ApiException {
        ApiResponse<WorkflowRunActionListResult> localVarResp = workflowRunActionsListWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, apiVersion, $top, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of workflow run actions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: Status. (optional)
     * @return ApiResponse&lt;WorkflowRunActionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WorkflowRunActionListResult> workflowRunActionsListWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String apiVersion, Integer $top, String $filter) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionsListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, apiVersion, $top, $filter, null);
        Type localVarReturnType = new TypeToken<WorkflowRunActionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of workflow run actions.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param apiVersion The API version. (required)
     * @param $top The number of items to be included in the result. (optional)
     * @param $filter The filter to apply on the operation. Options for filters include: Status. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionsListAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String apiVersion, Integer $top, String $filter, final ApiCallback<WorkflowRunActionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionsListValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, apiVersion, $top, $filter, _callback);
        Type localVarReturnType = new TypeToken<WorkflowRunActionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for workflowRunActionsListExpressionTraces
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionsListExpressionTracesCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Logic/workflows/{workflowName}/runs/{runName}/actions/{actionName}/listExpressionTraces"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "workflowName" + "}", localVarApiClient.escapeString(workflowName.toString()))
            .replace("{" + "runName" + "}", localVarApiClient.escapeString(runName.toString()))
            .replace("{" + "actionName" + "}", localVarApiClient.escapeString(actionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call workflowRunActionsListExpressionTracesValidateBeforeCall(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling workflowRunActionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling workflowRunActionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling workflowRunActionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'runName' is set
        if (runName == null) {
            throw new ApiException("Missing the required parameter 'runName' when calling workflowRunActionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'actionName' is set
        if (actionName == null) {
            throw new ApiException("Missing the required parameter 'actionName' when calling workflowRunActionsListExpressionTraces(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling workflowRunActionsListExpressionTraces(Async)");
        }

        return workflowRunActionsListExpressionTracesCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);

    }

    /**
     * 
     * Lists a workflow run expression trace.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return ExpressionTraces
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExpressionTraces workflowRunActionsListExpressionTraces(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        ApiResponse<ExpressionTraces> localVarResp = workflowRunActionsListExpressionTracesWithHttpInfo(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists a workflow run expression trace.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @return ApiResponse&lt;ExpressionTraces&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressionTraces> workflowRunActionsListExpressionTracesWithHttpInfo(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = workflowRunActionsListExpressionTracesValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ExpressionTraces>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists a workflow run expression trace.
     * @param subscriptionId The subscription id. (required)
     * @param resourceGroupName The resource group name. (required)
     * @param workflowName The workflow name. (required)
     * @param runName The workflow run name. (required)
     * @param actionName The workflow action name. (required)
     * @param apiVersion The API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call workflowRunActionsListExpressionTracesAsync(String subscriptionId, String resourceGroupName, String workflowName, String runName, String actionName, String apiVersion, final ApiCallback<ExpressionTraces> _callback) throws ApiException {

        okhttp3.Call localVarCall = workflowRunActionsListExpressionTracesValidateBeforeCall(subscriptionId, resourceGroupName, workflowName, runName, actionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ExpressionTraces>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
