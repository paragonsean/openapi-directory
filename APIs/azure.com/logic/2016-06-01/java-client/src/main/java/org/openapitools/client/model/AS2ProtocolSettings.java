/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AS2AcknowledgementConnectionSettings;
import org.openapitools.client.model.AS2EnvelopeSettings;
import org.openapitools.client.model.AS2ErrorSettings;
import org.openapitools.client.model.AS2MdnSettings;
import org.openapitools.client.model.AS2MessageConnectionSettings;
import org.openapitools.client.model.AS2SecuritySettings;
import org.openapitools.client.model.AS2ValidationSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The AS2 agreement protocol settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AS2ProtocolSettings {
  public static final String SERIALIZED_NAME_ACKNOWLEDGEMENT_CONNECTION_SETTINGS = "acknowledgementConnectionSettings";
  @SerializedName(SERIALIZED_NAME_ACKNOWLEDGEMENT_CONNECTION_SETTINGS)
  private AS2AcknowledgementConnectionSettings acknowledgementConnectionSettings;

  public static final String SERIALIZED_NAME_ENVELOPE_SETTINGS = "envelopeSettings";
  @SerializedName(SERIALIZED_NAME_ENVELOPE_SETTINGS)
  private AS2EnvelopeSettings envelopeSettings;

  public static final String SERIALIZED_NAME_ERROR_SETTINGS = "errorSettings";
  @SerializedName(SERIALIZED_NAME_ERROR_SETTINGS)
  private AS2ErrorSettings errorSettings;

  public static final String SERIALIZED_NAME_MDN_SETTINGS = "mdnSettings";
  @SerializedName(SERIALIZED_NAME_MDN_SETTINGS)
  private AS2MdnSettings mdnSettings;

  public static final String SERIALIZED_NAME_MESSAGE_CONNECTION_SETTINGS = "messageConnectionSettings";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CONNECTION_SETTINGS)
  private AS2MessageConnectionSettings messageConnectionSettings;

  public static final String SERIALIZED_NAME_SECURITY_SETTINGS = "securitySettings";
  @SerializedName(SERIALIZED_NAME_SECURITY_SETTINGS)
  private AS2SecuritySettings securitySettings;

  public static final String SERIALIZED_NAME_VALIDATION_SETTINGS = "validationSettings";
  @SerializedName(SERIALIZED_NAME_VALIDATION_SETTINGS)
  private AS2ValidationSettings validationSettings;

  public AS2ProtocolSettings() {
  }

  public AS2ProtocolSettings acknowledgementConnectionSettings(AS2AcknowledgementConnectionSettings acknowledgementConnectionSettings) {
    this.acknowledgementConnectionSettings = acknowledgementConnectionSettings;
    return this;
  }

  /**
   * Get acknowledgementConnectionSettings
   * @return acknowledgementConnectionSettings
   */
  @javax.annotation.Nonnull
  public AS2AcknowledgementConnectionSettings getAcknowledgementConnectionSettings() {
    return acknowledgementConnectionSettings;
  }

  public void setAcknowledgementConnectionSettings(AS2AcknowledgementConnectionSettings acknowledgementConnectionSettings) {
    this.acknowledgementConnectionSettings = acknowledgementConnectionSettings;
  }


  public AS2ProtocolSettings envelopeSettings(AS2EnvelopeSettings envelopeSettings) {
    this.envelopeSettings = envelopeSettings;
    return this;
  }

  /**
   * Get envelopeSettings
   * @return envelopeSettings
   */
  @javax.annotation.Nonnull
  public AS2EnvelopeSettings getEnvelopeSettings() {
    return envelopeSettings;
  }

  public void setEnvelopeSettings(AS2EnvelopeSettings envelopeSettings) {
    this.envelopeSettings = envelopeSettings;
  }


  public AS2ProtocolSettings errorSettings(AS2ErrorSettings errorSettings) {
    this.errorSettings = errorSettings;
    return this;
  }

  /**
   * Get errorSettings
   * @return errorSettings
   */
  @javax.annotation.Nonnull
  public AS2ErrorSettings getErrorSettings() {
    return errorSettings;
  }

  public void setErrorSettings(AS2ErrorSettings errorSettings) {
    this.errorSettings = errorSettings;
  }


  public AS2ProtocolSettings mdnSettings(AS2MdnSettings mdnSettings) {
    this.mdnSettings = mdnSettings;
    return this;
  }

  /**
   * Get mdnSettings
   * @return mdnSettings
   */
  @javax.annotation.Nonnull
  public AS2MdnSettings getMdnSettings() {
    return mdnSettings;
  }

  public void setMdnSettings(AS2MdnSettings mdnSettings) {
    this.mdnSettings = mdnSettings;
  }


  public AS2ProtocolSettings messageConnectionSettings(AS2MessageConnectionSettings messageConnectionSettings) {
    this.messageConnectionSettings = messageConnectionSettings;
    return this;
  }

  /**
   * Get messageConnectionSettings
   * @return messageConnectionSettings
   */
  @javax.annotation.Nonnull
  public AS2MessageConnectionSettings getMessageConnectionSettings() {
    return messageConnectionSettings;
  }

  public void setMessageConnectionSettings(AS2MessageConnectionSettings messageConnectionSettings) {
    this.messageConnectionSettings = messageConnectionSettings;
  }


  public AS2ProtocolSettings securitySettings(AS2SecuritySettings securitySettings) {
    this.securitySettings = securitySettings;
    return this;
  }

  /**
   * Get securitySettings
   * @return securitySettings
   */
  @javax.annotation.Nonnull
  public AS2SecuritySettings getSecuritySettings() {
    return securitySettings;
  }

  public void setSecuritySettings(AS2SecuritySettings securitySettings) {
    this.securitySettings = securitySettings;
  }


  public AS2ProtocolSettings validationSettings(AS2ValidationSettings validationSettings) {
    this.validationSettings = validationSettings;
    return this;
  }

  /**
   * Get validationSettings
   * @return validationSettings
   */
  @javax.annotation.Nonnull
  public AS2ValidationSettings getValidationSettings() {
    return validationSettings;
  }

  public void setValidationSettings(AS2ValidationSettings validationSettings) {
    this.validationSettings = validationSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AS2ProtocolSettings as2ProtocolSettings = (AS2ProtocolSettings) o;
    return Objects.equals(this.acknowledgementConnectionSettings, as2ProtocolSettings.acknowledgementConnectionSettings) &&
        Objects.equals(this.envelopeSettings, as2ProtocolSettings.envelopeSettings) &&
        Objects.equals(this.errorSettings, as2ProtocolSettings.errorSettings) &&
        Objects.equals(this.mdnSettings, as2ProtocolSettings.mdnSettings) &&
        Objects.equals(this.messageConnectionSettings, as2ProtocolSettings.messageConnectionSettings) &&
        Objects.equals(this.securitySettings, as2ProtocolSettings.securitySettings) &&
        Objects.equals(this.validationSettings, as2ProtocolSettings.validationSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(acknowledgementConnectionSettings, envelopeSettings, errorSettings, mdnSettings, messageConnectionSettings, securitySettings, validationSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AS2ProtocolSettings {\n");
    sb.append("    acknowledgementConnectionSettings: ").append(toIndentedString(acknowledgementConnectionSettings)).append("\n");
    sb.append("    envelopeSettings: ").append(toIndentedString(envelopeSettings)).append("\n");
    sb.append("    errorSettings: ").append(toIndentedString(errorSettings)).append("\n");
    sb.append("    mdnSettings: ").append(toIndentedString(mdnSettings)).append("\n");
    sb.append("    messageConnectionSettings: ").append(toIndentedString(messageConnectionSettings)).append("\n");
    sb.append("    securitySettings: ").append(toIndentedString(securitySettings)).append("\n");
    sb.append("    validationSettings: ").append(toIndentedString(validationSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("acknowledgementConnectionSettings");
    openapiFields.add("envelopeSettings");
    openapiFields.add("errorSettings");
    openapiFields.add("mdnSettings");
    openapiFields.add("messageConnectionSettings");
    openapiFields.add("securitySettings");
    openapiFields.add("validationSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("acknowledgementConnectionSettings");
    openapiRequiredFields.add("envelopeSettings");
    openapiRequiredFields.add("errorSettings");
    openapiRequiredFields.add("mdnSettings");
    openapiRequiredFields.add("messageConnectionSettings");
    openapiRequiredFields.add("securitySettings");
    openapiRequiredFields.add("validationSettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AS2ProtocolSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AS2ProtocolSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AS2ProtocolSettings is not found in the empty JSON string", AS2ProtocolSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AS2ProtocolSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AS2ProtocolSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AS2ProtocolSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `acknowledgementConnectionSettings`
      AS2AcknowledgementConnectionSettings.validateJsonElement(jsonObj.get("acknowledgementConnectionSettings"));
      // validate the required field `envelopeSettings`
      AS2EnvelopeSettings.validateJsonElement(jsonObj.get("envelopeSettings"));
      // validate the required field `errorSettings`
      AS2ErrorSettings.validateJsonElement(jsonObj.get("errorSettings"));
      // validate the required field `mdnSettings`
      AS2MdnSettings.validateJsonElement(jsonObj.get("mdnSettings"));
      // validate the required field `messageConnectionSettings`
      AS2MessageConnectionSettings.validateJsonElement(jsonObj.get("messageConnectionSettings"));
      // validate the required field `securitySettings`
      AS2SecuritySettings.validateJsonElement(jsonObj.get("securitySettings"));
      // validate the required field `validationSettings`
      AS2ValidationSettings.validateJsonElement(jsonObj.get("validationSettings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AS2ProtocolSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AS2ProtocolSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AS2ProtocolSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AS2ProtocolSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<AS2ProtocolSettings>() {
           @Override
           public void write(JsonWriter out, AS2ProtocolSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AS2ProtocolSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AS2ProtocolSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AS2ProtocolSettings
   * @throws IOException if the JSON string is invalid with respect to AS2ProtocolSettings
   */
  public static AS2ProtocolSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AS2ProtocolSettings.class);
  }

  /**
   * Convert an instance of AS2ProtocolSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

