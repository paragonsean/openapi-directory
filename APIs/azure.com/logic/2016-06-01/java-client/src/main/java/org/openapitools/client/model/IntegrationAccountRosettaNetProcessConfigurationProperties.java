/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.RosettaNetPipActivitySettings;
import org.openapitools.client.model.RosettaNetPipRoleSettings;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The integration account RosettaNet process configuration properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class IntegrationAccountRosettaNetProcessConfigurationProperties {
  public static final String SERIALIZED_NAME_ACTIVITY_SETTINGS = "activitySettings";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_SETTINGS)
  private RosettaNetPipActivitySettings activitySettings;

  public static final String SERIALIZED_NAME_CHANGED_TIME = "changedTime";
  @SerializedName(SERIALIZED_NAME_CHANGED_TIME)
  private OffsetDateTime changedTime;

  public static final String SERIALIZED_NAME_CREATED_TIME = "createdTime";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INITIATOR_ROLE_SETTINGS = "initiatorRoleSettings";
  @SerializedName(SERIALIZED_NAME_INITIATOR_ROLE_SETTINGS)
  private RosettaNetPipRoleSettings initiatorRoleSettings;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Map<String, String> metadata = new HashMap<>();

  public static final String SERIALIZED_NAME_PROCESS_CODE = "processCode";
  @SerializedName(SERIALIZED_NAME_PROCESS_CODE)
  private String processCode;

  public static final String SERIALIZED_NAME_PROCESS_NAME = "processName";
  @SerializedName(SERIALIZED_NAME_PROCESS_NAME)
  private String processName;

  public static final String SERIALIZED_NAME_PROCESS_VERSION = "processVersion";
  @SerializedName(SERIALIZED_NAME_PROCESS_VERSION)
  private String processVersion;

  public static final String SERIALIZED_NAME_RESPONDER_ROLE_SETTINGS = "responderRoleSettings";
  @SerializedName(SERIALIZED_NAME_RESPONDER_ROLE_SETTINGS)
  private RosettaNetPipRoleSettings responderRoleSettings;

  public IntegrationAccountRosettaNetProcessConfigurationProperties() {
  }

  public IntegrationAccountRosettaNetProcessConfigurationProperties(
     OffsetDateTime changedTime, 
     OffsetDateTime createdTime
  ) {
    this();
    this.changedTime = changedTime;
    this.createdTime = createdTime;
  }

  public IntegrationAccountRosettaNetProcessConfigurationProperties activitySettings(RosettaNetPipActivitySettings activitySettings) {
    this.activitySettings = activitySettings;
    return this;
  }

  /**
   * Get activitySettings
   * @return activitySettings
   */
  @javax.annotation.Nonnull
  public RosettaNetPipActivitySettings getActivitySettings() {
    return activitySettings;
  }

  public void setActivitySettings(RosettaNetPipActivitySettings activitySettings) {
    this.activitySettings = activitySettings;
  }


  /**
   * The changed time.
   * @return changedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getChangedTime() {
    return changedTime;
  }



  /**
   * The created time.
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }



  public IntegrationAccountRosettaNetProcessConfigurationProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The integration account RosettaNet ProcessConfiguration properties.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public IntegrationAccountRosettaNetProcessConfigurationProperties initiatorRoleSettings(RosettaNetPipRoleSettings initiatorRoleSettings) {
    this.initiatorRoleSettings = initiatorRoleSettings;
    return this;
  }

  /**
   * Get initiatorRoleSettings
   * @return initiatorRoleSettings
   */
  @javax.annotation.Nonnull
  public RosettaNetPipRoleSettings getInitiatorRoleSettings() {
    return initiatorRoleSettings;
  }

  public void setInitiatorRoleSettings(RosettaNetPipRoleSettings initiatorRoleSettings) {
    this.initiatorRoleSettings = initiatorRoleSettings;
  }


  public IntegrationAccountRosettaNetProcessConfigurationProperties metadata(Map<String, String> metadata) {
    this.metadata = metadata;
    return this;
  }

  public IntegrationAccountRosettaNetProcessConfigurationProperties putMetadataItem(String key, String metadataItem) {
    if (this.metadata == null) {
      this.metadata = new HashMap<>();
    }
    this.metadata.put(key, metadataItem);
    return this;
  }

  /**
   * The metadata.
   * @return metadata
   */
  @javax.annotation.Nullable
  public Map<String, String> getMetadata() {
    return metadata;
  }

  public void setMetadata(Map<String, String> metadata) {
    this.metadata = metadata;
  }


  public IntegrationAccountRosettaNetProcessConfigurationProperties processCode(String processCode) {
    this.processCode = processCode;
    return this;
  }

  /**
   * The integration account RosettaNet process code.
   * @return processCode
   */
  @javax.annotation.Nonnull
  public String getProcessCode() {
    return processCode;
  }

  public void setProcessCode(String processCode) {
    this.processCode = processCode;
  }


  public IntegrationAccountRosettaNetProcessConfigurationProperties processName(String processName) {
    this.processName = processName;
    return this;
  }

  /**
   * The integration account RosettaNet process name.
   * @return processName
   */
  @javax.annotation.Nonnull
  public String getProcessName() {
    return processName;
  }

  public void setProcessName(String processName) {
    this.processName = processName;
  }


  public IntegrationAccountRosettaNetProcessConfigurationProperties processVersion(String processVersion) {
    this.processVersion = processVersion;
    return this;
  }

  /**
   * The integration account RosettaNet process version.
   * @return processVersion
   */
  @javax.annotation.Nonnull
  public String getProcessVersion() {
    return processVersion;
  }

  public void setProcessVersion(String processVersion) {
    this.processVersion = processVersion;
  }


  public IntegrationAccountRosettaNetProcessConfigurationProperties responderRoleSettings(RosettaNetPipRoleSettings responderRoleSettings) {
    this.responderRoleSettings = responderRoleSettings;
    return this;
  }

  /**
   * Get responderRoleSettings
   * @return responderRoleSettings
   */
  @javax.annotation.Nonnull
  public RosettaNetPipRoleSettings getResponderRoleSettings() {
    return responderRoleSettings;
  }

  public void setResponderRoleSettings(RosettaNetPipRoleSettings responderRoleSettings) {
    this.responderRoleSettings = responderRoleSettings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IntegrationAccountRosettaNetProcessConfigurationProperties integrationAccountRosettaNetProcessConfigurationProperties = (IntegrationAccountRosettaNetProcessConfigurationProperties) o;
    return Objects.equals(this.activitySettings, integrationAccountRosettaNetProcessConfigurationProperties.activitySettings) &&
        Objects.equals(this.changedTime, integrationAccountRosettaNetProcessConfigurationProperties.changedTime) &&
        Objects.equals(this.createdTime, integrationAccountRosettaNetProcessConfigurationProperties.createdTime) &&
        Objects.equals(this.description, integrationAccountRosettaNetProcessConfigurationProperties.description) &&
        Objects.equals(this.initiatorRoleSettings, integrationAccountRosettaNetProcessConfigurationProperties.initiatorRoleSettings) &&
        Objects.equals(this.metadata, integrationAccountRosettaNetProcessConfigurationProperties.metadata) &&
        Objects.equals(this.processCode, integrationAccountRosettaNetProcessConfigurationProperties.processCode) &&
        Objects.equals(this.processName, integrationAccountRosettaNetProcessConfigurationProperties.processName) &&
        Objects.equals(this.processVersion, integrationAccountRosettaNetProcessConfigurationProperties.processVersion) &&
        Objects.equals(this.responderRoleSettings, integrationAccountRosettaNetProcessConfigurationProperties.responderRoleSettings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activitySettings, changedTime, createdTime, description, initiatorRoleSettings, metadata, processCode, processName, processVersion, responderRoleSettings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IntegrationAccountRosettaNetProcessConfigurationProperties {\n");
    sb.append("    activitySettings: ").append(toIndentedString(activitySettings)).append("\n");
    sb.append("    changedTime: ").append(toIndentedString(changedTime)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    initiatorRoleSettings: ").append(toIndentedString(initiatorRoleSettings)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    processCode: ").append(toIndentedString(processCode)).append("\n");
    sb.append("    processName: ").append(toIndentedString(processName)).append("\n");
    sb.append("    processVersion: ").append(toIndentedString(processVersion)).append("\n");
    sb.append("    responderRoleSettings: ").append(toIndentedString(responderRoleSettings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activitySettings");
    openapiFields.add("changedTime");
    openapiFields.add("createdTime");
    openapiFields.add("description");
    openapiFields.add("initiatorRoleSettings");
    openapiFields.add("metadata");
    openapiFields.add("processCode");
    openapiFields.add("processName");
    openapiFields.add("processVersion");
    openapiFields.add("responderRoleSettings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activitySettings");
    openapiRequiredFields.add("initiatorRoleSettings");
    openapiRequiredFields.add("processCode");
    openapiRequiredFields.add("processName");
    openapiRequiredFields.add("processVersion");
    openapiRequiredFields.add("responderRoleSettings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to IntegrationAccountRosettaNetProcessConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!IntegrationAccountRosettaNetProcessConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in IntegrationAccountRosettaNetProcessConfigurationProperties is not found in the empty JSON string", IntegrationAccountRosettaNetProcessConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!IntegrationAccountRosettaNetProcessConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `IntegrationAccountRosettaNetProcessConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : IntegrationAccountRosettaNetProcessConfigurationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `activitySettings`
      RosettaNetPipActivitySettings.validateJsonElement(jsonObj.get("activitySettings"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the required field `initiatorRoleSettings`
      RosettaNetPipRoleSettings.validateJsonElement(jsonObj.get("initiatorRoleSettings"));
      if (!jsonObj.get("processCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processCode").toString()));
      }
      if (!jsonObj.get("processName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processName").toString()));
      }
      if (!jsonObj.get("processVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `processVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("processVersion").toString()));
      }
      // validate the required field `responderRoleSettings`
      RosettaNetPipRoleSettings.validateJsonElement(jsonObj.get("responderRoleSettings"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!IntegrationAccountRosettaNetProcessConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'IntegrationAccountRosettaNetProcessConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<IntegrationAccountRosettaNetProcessConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(IntegrationAccountRosettaNetProcessConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<IntegrationAccountRosettaNetProcessConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, IntegrationAccountRosettaNetProcessConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public IntegrationAccountRosettaNetProcessConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of IntegrationAccountRosettaNetProcessConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of IntegrationAccountRosettaNetProcessConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to IntegrationAccountRosettaNetProcessConfigurationProperties
   */
  public static IntegrationAccountRosettaNetProcessConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, IntegrationAccountRosettaNetProcessConfigurationProperties.class);
  }

  /**
   * Convert an instance of IntegrationAccountRosettaNetProcessConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

