/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RosettaNetPipBusinessDocument;
import org.openapitools.client.model.RosettaNetPipRoleType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The integration account RosettaNet ProcessConfiguration role settings.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RosettaNetPipRoleSettings {
  public static final String SERIALIZED_NAME_ACTION = "action";
  @SerializedName(SERIALIZED_NAME_ACTION)
  private String action;

  public static final String SERIALIZED_NAME_BUSINESS_DOCUMENT = "businessDocument";
  @SerializedName(SERIALIZED_NAME_BUSINESS_DOCUMENT)
  private RosettaNetPipBusinessDocument businessDocument;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private String role;

  public static final String SERIALIZED_NAME_ROLE_TYPE = "roleType";
  @SerializedName(SERIALIZED_NAME_ROLE_TYPE)
  private RosettaNetPipRoleType roleType;

  public static final String SERIALIZED_NAME_SERVICE = "service";
  @SerializedName(SERIALIZED_NAME_SERVICE)
  private String service;

  public static final String SERIALIZED_NAME_SERVICE_CLASSIFICATION = "serviceClassification";
  @SerializedName(SERIALIZED_NAME_SERVICE_CLASSIFICATION)
  private String serviceClassification;

  public RosettaNetPipRoleSettings() {
  }

  public RosettaNetPipRoleSettings action(String action) {
    this.action = action;
    return this;
  }

  /**
   * The action name.
   * @return action
   */
  @javax.annotation.Nonnull
  public String getAction() {
    return action;
  }

  public void setAction(String action) {
    this.action = action;
  }


  public RosettaNetPipRoleSettings businessDocument(RosettaNetPipBusinessDocument businessDocument) {
    this.businessDocument = businessDocument;
    return this;
  }

  /**
   * Get businessDocument
   * @return businessDocument
   */
  @javax.annotation.Nonnull
  public RosettaNetPipBusinessDocument getBusinessDocument() {
    return businessDocument;
  }

  public void setBusinessDocument(RosettaNetPipBusinessDocument businessDocument) {
    this.businessDocument = businessDocument;
  }


  public RosettaNetPipRoleSettings description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RosettaNetPipRoleSettings role(String role) {
    this.role = role;
    return this;
  }

  /**
   * The role name.
   * @return role
   */
  @javax.annotation.Nonnull
  public String getRole() {
    return role;
  }

  public void setRole(String role) {
    this.role = role;
  }


  public RosettaNetPipRoleSettings roleType(RosettaNetPipRoleType roleType) {
    this.roleType = roleType;
    return this;
  }

  /**
   * Get roleType
   * @return roleType
   */
  @javax.annotation.Nonnull
  public RosettaNetPipRoleType getRoleType() {
    return roleType;
  }

  public void setRoleType(RosettaNetPipRoleType roleType) {
    this.roleType = roleType;
  }


  public RosettaNetPipRoleSettings service(String service) {
    this.service = service;
    return this;
  }

  /**
   * The service name.
   * @return service
   */
  @javax.annotation.Nonnull
  public String getService() {
    return service;
  }

  public void setService(String service) {
    this.service = service;
  }


  public RosettaNetPipRoleSettings serviceClassification(String serviceClassification) {
    this.serviceClassification = serviceClassification;
    return this;
  }

  /**
   * The service classification name.
   * @return serviceClassification
   */
  @javax.annotation.Nonnull
  public String getServiceClassification() {
    return serviceClassification;
  }

  public void setServiceClassification(String serviceClassification) {
    this.serviceClassification = serviceClassification;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RosettaNetPipRoleSettings rosettaNetPipRoleSettings = (RosettaNetPipRoleSettings) o;
    return Objects.equals(this.action, rosettaNetPipRoleSettings.action) &&
        Objects.equals(this.businessDocument, rosettaNetPipRoleSettings.businessDocument) &&
        Objects.equals(this.description, rosettaNetPipRoleSettings.description) &&
        Objects.equals(this.role, rosettaNetPipRoleSettings.role) &&
        Objects.equals(this.roleType, rosettaNetPipRoleSettings.roleType) &&
        Objects.equals(this.service, rosettaNetPipRoleSettings.service) &&
        Objects.equals(this.serviceClassification, rosettaNetPipRoleSettings.serviceClassification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(action, businessDocument, description, role, roleType, service, serviceClassification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RosettaNetPipRoleSettings {\n");
    sb.append("    action: ").append(toIndentedString(action)).append("\n");
    sb.append("    businessDocument: ").append(toIndentedString(businessDocument)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    roleType: ").append(toIndentedString(roleType)).append("\n");
    sb.append("    service: ").append(toIndentedString(service)).append("\n");
    sb.append("    serviceClassification: ").append(toIndentedString(serviceClassification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("action");
    openapiFields.add("businessDocument");
    openapiFields.add("description");
    openapiFields.add("role");
    openapiFields.add("roleType");
    openapiFields.add("service");
    openapiFields.add("serviceClassification");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("action");
    openapiRequiredFields.add("businessDocument");
    openapiRequiredFields.add("role");
    openapiRequiredFields.add("roleType");
    openapiRequiredFields.add("service");
    openapiRequiredFields.add("serviceClassification");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RosettaNetPipRoleSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RosettaNetPipRoleSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RosettaNetPipRoleSettings is not found in the empty JSON string", RosettaNetPipRoleSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RosettaNetPipRoleSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RosettaNetPipRoleSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RosettaNetPipRoleSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("action").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `action` to be a primitive type in the JSON string but got `%s`", jsonObj.get("action").toString()));
      }
      // validate the required field `businessDocument`
      RosettaNetPipBusinessDocument.validateJsonElement(jsonObj.get("businessDocument"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the required field `roleType`
      RosettaNetPipRoleType.validateJsonElement(jsonObj.get("roleType"));
      if (!jsonObj.get("service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("service").toString()));
      }
      if (!jsonObj.get("serviceClassification").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `serviceClassification` to be a primitive type in the JSON string but got `%s`", jsonObj.get("serviceClassification").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RosettaNetPipRoleSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RosettaNetPipRoleSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RosettaNetPipRoleSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RosettaNetPipRoleSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<RosettaNetPipRoleSettings>() {
           @Override
           public void write(JsonWriter out, RosettaNetPipRoleSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RosettaNetPipRoleSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RosettaNetPipRoleSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RosettaNetPipRoleSettings
   * @throws IOException if the JSON string is invalid with respect to RosettaNetPipRoleSettings
   */
  public static RosettaNetPipRoleSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RosettaNetPipRoleSettings.class);
  }

  /**
   * Convert an instance of RosettaNetPipRoleSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

