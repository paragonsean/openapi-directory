/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.RosettaNetActionType;
import org.openapitools.client.model.RosettaNetPipConfidentialityScope;
import org.openapitools.client.model.RosettaNetResponseType;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The integration account RosettaNet ProcessConfiguration activity behavior.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:07.706962-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RosettaNetPipActivityBehavior {
  public static final String SERIALIZED_NAME_ACTION_TYPE = "actionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private RosettaNetActionType actionType;

  public static final String SERIALIZED_NAME_IS_AUTHORIZATION_REQUIRED = "isAuthorizationRequired";
  @SerializedName(SERIALIZED_NAME_IS_AUTHORIZATION_REQUIRED)
  private Boolean isAuthorizationRequired;

  public static final String SERIALIZED_NAME_IS_SECURED_TRANSPORT_REQUIRED = "isSecuredTransportRequired";
  @SerializedName(SERIALIZED_NAME_IS_SECURED_TRANSPORT_REQUIRED)
  private Boolean isSecuredTransportRequired;

  public static final String SERIALIZED_NAME_NON_REPUDIATION_OF_ORIGIN_AND_CONTENT = "nonRepudiationOfOriginAndContent";
  @SerializedName(SERIALIZED_NAME_NON_REPUDIATION_OF_ORIGIN_AND_CONTENT)
  private Boolean nonRepudiationOfOriginAndContent;

  public static final String SERIALIZED_NAME_PERSISTENT_CONFIDENTIALITY_SCOPE = "persistentConfidentialityScope";
  @SerializedName(SERIALIZED_NAME_PERSISTENT_CONFIDENTIALITY_SCOPE)
  private RosettaNetPipConfidentialityScope persistentConfidentialityScope;

  public static final String SERIALIZED_NAME_RESPONSE_TYPE = "responseType";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TYPE)
  private RosettaNetResponseType responseType;

  public static final String SERIALIZED_NAME_RETRY_COUNT = "retryCount";
  @SerializedName(SERIALIZED_NAME_RETRY_COUNT)
  private Integer retryCount;

  public static final String SERIALIZED_NAME_TIME_TO_PERFORM_IN_SECONDS = "timeToPerformInSeconds";
  @SerializedName(SERIALIZED_NAME_TIME_TO_PERFORM_IN_SECONDS)
  private Integer timeToPerformInSeconds;

  public RosettaNetPipActivityBehavior() {
  }

  public RosettaNetPipActivityBehavior actionType(RosettaNetActionType actionType) {
    this.actionType = actionType;
    return this;
  }

  /**
   * Get actionType
   * @return actionType
   */
  @javax.annotation.Nonnull
  public RosettaNetActionType getActionType() {
    return actionType;
  }

  public void setActionType(RosettaNetActionType actionType) {
    this.actionType = actionType;
  }


  public RosettaNetPipActivityBehavior isAuthorizationRequired(Boolean isAuthorizationRequired) {
    this.isAuthorizationRequired = isAuthorizationRequired;
    return this;
  }

  /**
   * The value indicating whether authorization is required.
   * @return isAuthorizationRequired
   */
  @javax.annotation.Nonnull
  public Boolean getIsAuthorizationRequired() {
    return isAuthorizationRequired;
  }

  public void setIsAuthorizationRequired(Boolean isAuthorizationRequired) {
    this.isAuthorizationRequired = isAuthorizationRequired;
  }


  public RosettaNetPipActivityBehavior isSecuredTransportRequired(Boolean isSecuredTransportRequired) {
    this.isSecuredTransportRequired = isSecuredTransportRequired;
    return this;
  }

  /**
   * The value indicating whether secured transport is required.
   * @return isSecuredTransportRequired
   */
  @javax.annotation.Nonnull
  public Boolean getIsSecuredTransportRequired() {
    return isSecuredTransportRequired;
  }

  public void setIsSecuredTransportRequired(Boolean isSecuredTransportRequired) {
    this.isSecuredTransportRequired = isSecuredTransportRequired;
  }


  public RosettaNetPipActivityBehavior nonRepudiationOfOriginAndContent(Boolean nonRepudiationOfOriginAndContent) {
    this.nonRepudiationOfOriginAndContent = nonRepudiationOfOriginAndContent;
    return this;
  }

  /**
   * The value indicating whether non-repudiation is for origin and content.
   * @return nonRepudiationOfOriginAndContent
   */
  @javax.annotation.Nonnull
  public Boolean getNonRepudiationOfOriginAndContent() {
    return nonRepudiationOfOriginAndContent;
  }

  public void setNonRepudiationOfOriginAndContent(Boolean nonRepudiationOfOriginAndContent) {
    this.nonRepudiationOfOriginAndContent = nonRepudiationOfOriginAndContent;
  }


  public RosettaNetPipActivityBehavior persistentConfidentialityScope(RosettaNetPipConfidentialityScope persistentConfidentialityScope) {
    this.persistentConfidentialityScope = persistentConfidentialityScope;
    return this;
  }

  /**
   * Get persistentConfidentialityScope
   * @return persistentConfidentialityScope
   */
  @javax.annotation.Nonnull
  public RosettaNetPipConfidentialityScope getPersistentConfidentialityScope() {
    return persistentConfidentialityScope;
  }

  public void setPersistentConfidentialityScope(RosettaNetPipConfidentialityScope persistentConfidentialityScope) {
    this.persistentConfidentialityScope = persistentConfidentialityScope;
  }


  public RosettaNetPipActivityBehavior responseType(RosettaNetResponseType responseType) {
    this.responseType = responseType;
    return this;
  }

  /**
   * Get responseType
   * @return responseType
   */
  @javax.annotation.Nonnull
  public RosettaNetResponseType getResponseType() {
    return responseType;
  }

  public void setResponseType(RosettaNetResponseType responseType) {
    this.responseType = responseType;
  }


  public RosettaNetPipActivityBehavior retryCount(Integer retryCount) {
    this.retryCount = retryCount;
    return this;
  }

  /**
   * The value indicating retry count.
   * @return retryCount
   */
  @javax.annotation.Nonnull
  public Integer getRetryCount() {
    return retryCount;
  }

  public void setRetryCount(Integer retryCount) {
    this.retryCount = retryCount;
  }


  public RosettaNetPipActivityBehavior timeToPerformInSeconds(Integer timeToPerformInSeconds) {
    this.timeToPerformInSeconds = timeToPerformInSeconds;
    return this;
  }

  /**
   * The time to perform in seconds.
   * @return timeToPerformInSeconds
   */
  @javax.annotation.Nonnull
  public Integer getTimeToPerformInSeconds() {
    return timeToPerformInSeconds;
  }

  public void setTimeToPerformInSeconds(Integer timeToPerformInSeconds) {
    this.timeToPerformInSeconds = timeToPerformInSeconds;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RosettaNetPipActivityBehavior rosettaNetPipActivityBehavior = (RosettaNetPipActivityBehavior) o;
    return Objects.equals(this.actionType, rosettaNetPipActivityBehavior.actionType) &&
        Objects.equals(this.isAuthorizationRequired, rosettaNetPipActivityBehavior.isAuthorizationRequired) &&
        Objects.equals(this.isSecuredTransportRequired, rosettaNetPipActivityBehavior.isSecuredTransportRequired) &&
        Objects.equals(this.nonRepudiationOfOriginAndContent, rosettaNetPipActivityBehavior.nonRepudiationOfOriginAndContent) &&
        Objects.equals(this.persistentConfidentialityScope, rosettaNetPipActivityBehavior.persistentConfidentialityScope) &&
        Objects.equals(this.responseType, rosettaNetPipActivityBehavior.responseType) &&
        Objects.equals(this.retryCount, rosettaNetPipActivityBehavior.retryCount) &&
        Objects.equals(this.timeToPerformInSeconds, rosettaNetPipActivityBehavior.timeToPerformInSeconds);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionType, isAuthorizationRequired, isSecuredTransportRequired, nonRepudiationOfOriginAndContent, persistentConfidentialityScope, responseType, retryCount, timeToPerformInSeconds);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RosettaNetPipActivityBehavior {\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    isAuthorizationRequired: ").append(toIndentedString(isAuthorizationRequired)).append("\n");
    sb.append("    isSecuredTransportRequired: ").append(toIndentedString(isSecuredTransportRequired)).append("\n");
    sb.append("    nonRepudiationOfOriginAndContent: ").append(toIndentedString(nonRepudiationOfOriginAndContent)).append("\n");
    sb.append("    persistentConfidentialityScope: ").append(toIndentedString(persistentConfidentialityScope)).append("\n");
    sb.append("    responseType: ").append(toIndentedString(responseType)).append("\n");
    sb.append("    retryCount: ").append(toIndentedString(retryCount)).append("\n");
    sb.append("    timeToPerformInSeconds: ").append(toIndentedString(timeToPerformInSeconds)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionType");
    openapiFields.add("isAuthorizationRequired");
    openapiFields.add("isSecuredTransportRequired");
    openapiFields.add("nonRepudiationOfOriginAndContent");
    openapiFields.add("persistentConfidentialityScope");
    openapiFields.add("responseType");
    openapiFields.add("retryCount");
    openapiFields.add("timeToPerformInSeconds");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("actionType");
    openapiRequiredFields.add("isAuthorizationRequired");
    openapiRequiredFields.add("isSecuredTransportRequired");
    openapiRequiredFields.add("nonRepudiationOfOriginAndContent");
    openapiRequiredFields.add("persistentConfidentialityScope");
    openapiRequiredFields.add("responseType");
    openapiRequiredFields.add("retryCount");
    openapiRequiredFields.add("timeToPerformInSeconds");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RosettaNetPipActivityBehavior
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RosettaNetPipActivityBehavior.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RosettaNetPipActivityBehavior is not found in the empty JSON string", RosettaNetPipActivityBehavior.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RosettaNetPipActivityBehavior.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RosettaNetPipActivityBehavior` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RosettaNetPipActivityBehavior.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `actionType`
      RosettaNetActionType.validateJsonElement(jsonObj.get("actionType"));
      // validate the required field `persistentConfidentialityScope`
      RosettaNetPipConfidentialityScope.validateJsonElement(jsonObj.get("persistentConfidentialityScope"));
      // validate the required field `responseType`
      RosettaNetResponseType.validateJsonElement(jsonObj.get("responseType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RosettaNetPipActivityBehavior.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RosettaNetPipActivityBehavior' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RosettaNetPipActivityBehavior> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RosettaNetPipActivityBehavior.class));

       return (TypeAdapter<T>) new TypeAdapter<RosettaNetPipActivityBehavior>() {
           @Override
           public void write(JsonWriter out, RosettaNetPipActivityBehavior value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RosettaNetPipActivityBehavior read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RosettaNetPipActivityBehavior given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RosettaNetPipActivityBehavior
   * @throws IOException if the JSON string is invalid with respect to RosettaNetPipActivityBehavior
   */
  public static RosettaNetPipActivityBehavior fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RosettaNetPipActivityBehavior.class);
  }

  /**
   * Convert an instance of RosettaNetPipActivityBehavior to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

