/*
 * LogicManagementClient
 * REST API for Azure Logic Apps.
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GenerateUpgradedDefinitionParameters;
import org.openapitools.client.model.GetCallbackUrlParameters;
import org.openapitools.client.model.RegenerateActionParameter;
import org.openapitools.client.model.Workflow;
import org.openapitools.client.model.WorkflowListResult;
import org.openapitools.client.model.WorkflowTriggerCallbackUrl;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WorkflowsApi
 */
@Disabled
public class WorkflowsApiTest {

    private final WorkflowsApi api = new WorkflowsApi();

    /**
     * Creates or updates a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        Workflow workflow = null;
        Workflow response = api.workflowsCreateOrUpdate(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow);
        // TODO: test validations
    }

    /**
     * Deletes a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        api.workflowsDelete(subscriptionId, resourceGroupName, workflowName, apiVersion);
        // TODO: test validations
    }

    /**
     * Disables a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsDisableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        api.workflowsDisable(subscriptionId, resourceGroupName, workflowName, apiVersion);
        // TODO: test validations
    }

    /**
     * Enables a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsEnableTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        api.workflowsEnable(subscriptionId, resourceGroupName, workflowName, apiVersion);
        // TODO: test validations
    }

    /**
     * Generates the upgraded definition for a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsGenerateUpgradedDefinitionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        GenerateUpgradedDefinitionParameters parameters = null;
        Object response = api.workflowsGenerateUpgradedDefinition(subscriptionId, resourceGroupName, workflowName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Gets a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        Workflow response = api.workflowsGet(subscriptionId, resourceGroupName, workflowName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets a list of workflows by resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        Integer $top = null;
        String $filter = null;
        WorkflowListResult response = api.workflowsListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, $top, $filter);
        // TODO: test validations
    }

    /**
     * Gets a list of workflows by subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        Integer $top = null;
        String $filter = null;
        WorkflowListResult response = api.workflowsListBySubscription(subscriptionId, apiVersion, $top, $filter);
        // TODO: test validations
    }

    /**
     * Get the workflow callback Url.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsListCallbackUrlTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        GetCallbackUrlParameters listCallbackUrl = null;
        WorkflowTriggerCallbackUrl response = api.workflowsListCallbackUrl(subscriptionId, resourceGroupName, workflowName, apiVersion, listCallbackUrl);
        // TODO: test validations
    }

    /**
     * Gets an OpenAPI definition for the workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsListSwaggerTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        Object response = api.workflowsListSwagger(subscriptionId, resourceGroupName, workflowName, apiVersion);
        // TODO: test validations
    }

    /**
     * Moves an existing workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsMoveTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        Workflow move = null;
        api.workflowsMove(subscriptionId, resourceGroupName, workflowName, apiVersion, move);
        // TODO: test validations
    }

    /**
     * Regenerates the callback URL access key for request triggers.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsRegenerateAccessKeyTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        RegenerateActionParameter keyType = null;
        api.workflowsRegenerateAccessKey(subscriptionId, resourceGroupName, workflowName, apiVersion, keyType);
        // TODO: test validations
    }

    /**
     * Updates a workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        Workflow workflow = null;
        Workflow response = api.workflowsUpdate(subscriptionId, resourceGroupName, workflowName, apiVersion, workflow);
        // TODO: test validations
    }

    /**
     * Validates the workflow definition.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsValidateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String location = null;
        String workflowName = null;
        String apiVersion = null;
        Workflow workflow = null;
        api.workflowsValidate(subscriptionId, resourceGroupName, location, workflowName, apiVersion, workflow);
        // TODO: test validations
    }

    /**
     * Validates the workflow.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void workflowsValidateWorkflowTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String workflowName = null;
        String apiVersion = null;
        Workflow validate = null;
        api.workflowsValidateWorkflow(subscriptionId, resourceGroupName, workflowName, apiVersion, validate);
        // TODO: test validations
    }

}
