# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edifact_character_set import EdifactCharacterSet
from openapi_server.models.edifact_decimal_indicator import EdifactDecimalIndicator
from openapi_server.models.segment_terminator_suffix import SegmentTerminatorSuffix
from openapi_server import util


class EdifactFramingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_encoding: str=None, character_set: EdifactCharacterSet=None, component_separator: int=None, data_element_separator: int=None, decimal_point_indicator: EdifactDecimalIndicator=None, protocol_version: int=None, release_indicator: int=None, repetition_separator: int=None, segment_terminator: int=None, segment_terminator_suffix: SegmentTerminatorSuffix=None, service_code_list_directory_version: str=None):
        """EdifactFramingSettings - a model defined in OpenAPI

        :param character_encoding: The character_encoding of this EdifactFramingSettings.
        :param character_set: The character_set of this EdifactFramingSettings.
        :param component_separator: The component_separator of this EdifactFramingSettings.
        :param data_element_separator: The data_element_separator of this EdifactFramingSettings.
        :param decimal_point_indicator: The decimal_point_indicator of this EdifactFramingSettings.
        :param protocol_version: The protocol_version of this EdifactFramingSettings.
        :param release_indicator: The release_indicator of this EdifactFramingSettings.
        :param repetition_separator: The repetition_separator of this EdifactFramingSettings.
        :param segment_terminator: The segment_terminator of this EdifactFramingSettings.
        :param segment_terminator_suffix: The segment_terminator_suffix of this EdifactFramingSettings.
        :param service_code_list_directory_version: The service_code_list_directory_version of this EdifactFramingSettings.
        """
        self.openapi_types = {
            'character_encoding': str,
            'character_set': EdifactCharacterSet,
            'component_separator': int,
            'data_element_separator': int,
            'decimal_point_indicator': EdifactDecimalIndicator,
            'protocol_version': int,
            'release_indicator': int,
            'repetition_separator': int,
            'segment_terminator': int,
            'segment_terminator_suffix': SegmentTerminatorSuffix,
            'service_code_list_directory_version': str
        }

        self.attribute_map = {
            'character_encoding': 'characterEncoding',
            'character_set': 'characterSet',
            'component_separator': 'componentSeparator',
            'data_element_separator': 'dataElementSeparator',
            'decimal_point_indicator': 'decimalPointIndicator',
            'protocol_version': 'protocolVersion',
            'release_indicator': 'releaseIndicator',
            'repetition_separator': 'repetitionSeparator',
            'segment_terminator': 'segmentTerminator',
            'segment_terminator_suffix': 'segmentTerminatorSuffix',
            'service_code_list_directory_version': 'serviceCodeListDirectoryVersion'
        }

        self._character_encoding = character_encoding
        self._character_set = character_set
        self._component_separator = component_separator
        self._data_element_separator = data_element_separator
        self._decimal_point_indicator = decimal_point_indicator
        self._protocol_version = protocol_version
        self._release_indicator = release_indicator
        self._repetition_separator = repetition_separator
        self._segment_terminator = segment_terminator
        self._segment_terminator_suffix = segment_terminator_suffix
        self._service_code_list_directory_version = service_code_list_directory_version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdifactFramingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EdifactFramingSettings of this EdifactFramingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_encoding(self):
        """Gets the character_encoding of this EdifactFramingSettings.

        The character encoding.

        :return: The character_encoding of this EdifactFramingSettings.
        :rtype: str
        """
        return self._character_encoding

    @character_encoding.setter
    def character_encoding(self, character_encoding):
        """Sets the character_encoding of this EdifactFramingSettings.

        The character encoding.

        :param character_encoding: The character_encoding of this EdifactFramingSettings.
        :type character_encoding: str
        """

        self._character_encoding = character_encoding

    @property
    def character_set(self):
        """Gets the character_set of this EdifactFramingSettings.


        :return: The character_set of this EdifactFramingSettings.
        :rtype: EdifactCharacterSet
        """
        return self._character_set

    @character_set.setter
    def character_set(self, character_set):
        """Sets the character_set of this EdifactFramingSettings.


        :param character_set: The character_set of this EdifactFramingSettings.
        :type character_set: EdifactCharacterSet
        """
        if character_set is None:
            raise ValueError("Invalid value for `character_set`, must not be `None`")

        self._character_set = character_set

    @property
    def component_separator(self):
        """Gets the component_separator of this EdifactFramingSettings.

        The component separator.

        :return: The component_separator of this EdifactFramingSettings.
        :rtype: int
        """
        return self._component_separator

    @component_separator.setter
    def component_separator(self, component_separator):
        """Sets the component_separator of this EdifactFramingSettings.

        The component separator.

        :param component_separator: The component_separator of this EdifactFramingSettings.
        :type component_separator: int
        """
        if component_separator is None:
            raise ValueError("Invalid value for `component_separator`, must not be `None`")

        self._component_separator = component_separator

    @property
    def data_element_separator(self):
        """Gets the data_element_separator of this EdifactFramingSettings.

        The data element separator.

        :return: The data_element_separator of this EdifactFramingSettings.
        :rtype: int
        """
        return self._data_element_separator

    @data_element_separator.setter
    def data_element_separator(self, data_element_separator):
        """Sets the data_element_separator of this EdifactFramingSettings.

        The data element separator.

        :param data_element_separator: The data_element_separator of this EdifactFramingSettings.
        :type data_element_separator: int
        """
        if data_element_separator is None:
            raise ValueError("Invalid value for `data_element_separator`, must not be `None`")

        self._data_element_separator = data_element_separator

    @property
    def decimal_point_indicator(self):
        """Gets the decimal_point_indicator of this EdifactFramingSettings.


        :return: The decimal_point_indicator of this EdifactFramingSettings.
        :rtype: EdifactDecimalIndicator
        """
        return self._decimal_point_indicator

    @decimal_point_indicator.setter
    def decimal_point_indicator(self, decimal_point_indicator):
        """Sets the decimal_point_indicator of this EdifactFramingSettings.


        :param decimal_point_indicator: The decimal_point_indicator of this EdifactFramingSettings.
        :type decimal_point_indicator: EdifactDecimalIndicator
        """
        if decimal_point_indicator is None:
            raise ValueError("Invalid value for `decimal_point_indicator`, must not be `None`")

        self._decimal_point_indicator = decimal_point_indicator

    @property
    def protocol_version(self):
        """Gets the protocol_version of this EdifactFramingSettings.

        The protocol version.

        :return: The protocol_version of this EdifactFramingSettings.
        :rtype: int
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this EdifactFramingSettings.

        The protocol version.

        :param protocol_version: The protocol_version of this EdifactFramingSettings.
        :type protocol_version: int
        """
        if protocol_version is None:
            raise ValueError("Invalid value for `protocol_version`, must not be `None`")

        self._protocol_version = protocol_version

    @property
    def release_indicator(self):
        """Gets the release_indicator of this EdifactFramingSettings.

        The release indicator.

        :return: The release_indicator of this EdifactFramingSettings.
        :rtype: int
        """
        return self._release_indicator

    @release_indicator.setter
    def release_indicator(self, release_indicator):
        """Sets the release_indicator of this EdifactFramingSettings.

        The release indicator.

        :param release_indicator: The release_indicator of this EdifactFramingSettings.
        :type release_indicator: int
        """
        if release_indicator is None:
            raise ValueError("Invalid value for `release_indicator`, must not be `None`")

        self._release_indicator = release_indicator

    @property
    def repetition_separator(self):
        """Gets the repetition_separator of this EdifactFramingSettings.

        The repetition separator.

        :return: The repetition_separator of this EdifactFramingSettings.
        :rtype: int
        """
        return self._repetition_separator

    @repetition_separator.setter
    def repetition_separator(self, repetition_separator):
        """Sets the repetition_separator of this EdifactFramingSettings.

        The repetition separator.

        :param repetition_separator: The repetition_separator of this EdifactFramingSettings.
        :type repetition_separator: int
        """
        if repetition_separator is None:
            raise ValueError("Invalid value for `repetition_separator`, must not be `None`")

        self._repetition_separator = repetition_separator

    @property
    def segment_terminator(self):
        """Gets the segment_terminator of this EdifactFramingSettings.

        The segment terminator.

        :return: The segment_terminator of this EdifactFramingSettings.
        :rtype: int
        """
        return self._segment_terminator

    @segment_terminator.setter
    def segment_terminator(self, segment_terminator):
        """Sets the segment_terminator of this EdifactFramingSettings.

        The segment terminator.

        :param segment_terminator: The segment_terminator of this EdifactFramingSettings.
        :type segment_terminator: int
        """
        if segment_terminator is None:
            raise ValueError("Invalid value for `segment_terminator`, must not be `None`")

        self._segment_terminator = segment_terminator

    @property
    def segment_terminator_suffix(self):
        """Gets the segment_terminator_suffix of this EdifactFramingSettings.


        :return: The segment_terminator_suffix of this EdifactFramingSettings.
        :rtype: SegmentTerminatorSuffix
        """
        return self._segment_terminator_suffix

    @segment_terminator_suffix.setter
    def segment_terminator_suffix(self, segment_terminator_suffix):
        """Sets the segment_terminator_suffix of this EdifactFramingSettings.


        :param segment_terminator_suffix: The segment_terminator_suffix of this EdifactFramingSettings.
        :type segment_terminator_suffix: SegmentTerminatorSuffix
        """
        if segment_terminator_suffix is None:
            raise ValueError("Invalid value for `segment_terminator_suffix`, must not be `None`")

        self._segment_terminator_suffix = segment_terminator_suffix

    @property
    def service_code_list_directory_version(self):
        """Gets the service_code_list_directory_version of this EdifactFramingSettings.

        The service code list directory version.

        :return: The service_code_list_directory_version of this EdifactFramingSettings.
        :rtype: str
        """
        return self._service_code_list_directory_version

    @service_code_list_directory_version.setter
    def service_code_list_directory_version(self, service_code_list_directory_version):
        """Sets the service_code_list_directory_version of this EdifactFramingSettings.

        The service code list directory version.

        :param service_code_list_directory_version: The service_code_list_directory_version of this EdifactFramingSettings.
        :type service_code_list_directory_version: str
        """

        self._service_code_list_directory_version = service_code_list_directory_version
