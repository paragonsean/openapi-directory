# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class X12AcknowledgementSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgement_control_number_lower_bound: int=None, acknowledgement_control_number_prefix: str=None, acknowledgement_control_number_suffix: str=None, acknowledgement_control_number_upper_bound: int=None, batch_functional_acknowledgements: bool=None, batch_implementation_acknowledgements: bool=None, batch_technical_acknowledgements: bool=None, functional_acknowledgement_version: str=None, implementation_acknowledgement_version: str=None, need_functional_acknowledgement: bool=None, need_implementation_acknowledgement: bool=None, need_loop_for_valid_messages: bool=None, need_technical_acknowledgement: bool=None, rollover_acknowledgement_control_number: bool=None, send_synchronous_acknowledgement: bool=None):
        """X12AcknowledgementSettings - a model defined in OpenAPI

        :param acknowledgement_control_number_lower_bound: The acknowledgement_control_number_lower_bound of this X12AcknowledgementSettings.
        :param acknowledgement_control_number_prefix: The acknowledgement_control_number_prefix of this X12AcknowledgementSettings.
        :param acknowledgement_control_number_suffix: The acknowledgement_control_number_suffix of this X12AcknowledgementSettings.
        :param acknowledgement_control_number_upper_bound: The acknowledgement_control_number_upper_bound of this X12AcknowledgementSettings.
        :param batch_functional_acknowledgements: The batch_functional_acknowledgements of this X12AcknowledgementSettings.
        :param batch_implementation_acknowledgements: The batch_implementation_acknowledgements of this X12AcknowledgementSettings.
        :param batch_technical_acknowledgements: The batch_technical_acknowledgements of this X12AcknowledgementSettings.
        :param functional_acknowledgement_version: The functional_acknowledgement_version of this X12AcknowledgementSettings.
        :param implementation_acknowledgement_version: The implementation_acknowledgement_version of this X12AcknowledgementSettings.
        :param need_functional_acknowledgement: The need_functional_acknowledgement of this X12AcknowledgementSettings.
        :param need_implementation_acknowledgement: The need_implementation_acknowledgement of this X12AcknowledgementSettings.
        :param need_loop_for_valid_messages: The need_loop_for_valid_messages of this X12AcknowledgementSettings.
        :param need_technical_acknowledgement: The need_technical_acknowledgement of this X12AcknowledgementSettings.
        :param rollover_acknowledgement_control_number: The rollover_acknowledgement_control_number of this X12AcknowledgementSettings.
        :param send_synchronous_acknowledgement: The send_synchronous_acknowledgement of this X12AcknowledgementSettings.
        """
        self.openapi_types = {
            'acknowledgement_control_number_lower_bound': int,
            'acknowledgement_control_number_prefix': str,
            'acknowledgement_control_number_suffix': str,
            'acknowledgement_control_number_upper_bound': int,
            'batch_functional_acknowledgements': bool,
            'batch_implementation_acknowledgements': bool,
            'batch_technical_acknowledgements': bool,
            'functional_acknowledgement_version': str,
            'implementation_acknowledgement_version': str,
            'need_functional_acknowledgement': bool,
            'need_implementation_acknowledgement': bool,
            'need_loop_for_valid_messages': bool,
            'need_technical_acknowledgement': bool,
            'rollover_acknowledgement_control_number': bool,
            'send_synchronous_acknowledgement': bool
        }

        self.attribute_map = {
            'acknowledgement_control_number_lower_bound': 'acknowledgementControlNumberLowerBound',
            'acknowledgement_control_number_prefix': 'acknowledgementControlNumberPrefix',
            'acknowledgement_control_number_suffix': 'acknowledgementControlNumberSuffix',
            'acknowledgement_control_number_upper_bound': 'acknowledgementControlNumberUpperBound',
            'batch_functional_acknowledgements': 'batchFunctionalAcknowledgements',
            'batch_implementation_acknowledgements': 'batchImplementationAcknowledgements',
            'batch_technical_acknowledgements': 'batchTechnicalAcknowledgements',
            'functional_acknowledgement_version': 'functionalAcknowledgementVersion',
            'implementation_acknowledgement_version': 'implementationAcknowledgementVersion',
            'need_functional_acknowledgement': 'needFunctionalAcknowledgement',
            'need_implementation_acknowledgement': 'needImplementationAcknowledgement',
            'need_loop_for_valid_messages': 'needLoopForValidMessages',
            'need_technical_acknowledgement': 'needTechnicalAcknowledgement',
            'rollover_acknowledgement_control_number': 'rolloverAcknowledgementControlNumber',
            'send_synchronous_acknowledgement': 'sendSynchronousAcknowledgement'
        }

        self._acknowledgement_control_number_lower_bound = acknowledgement_control_number_lower_bound
        self._acknowledgement_control_number_prefix = acknowledgement_control_number_prefix
        self._acknowledgement_control_number_suffix = acknowledgement_control_number_suffix
        self._acknowledgement_control_number_upper_bound = acknowledgement_control_number_upper_bound
        self._batch_functional_acknowledgements = batch_functional_acknowledgements
        self._batch_implementation_acknowledgements = batch_implementation_acknowledgements
        self._batch_technical_acknowledgements = batch_technical_acknowledgements
        self._functional_acknowledgement_version = functional_acknowledgement_version
        self._implementation_acknowledgement_version = implementation_acknowledgement_version
        self._need_functional_acknowledgement = need_functional_acknowledgement
        self._need_implementation_acknowledgement = need_implementation_acknowledgement
        self._need_loop_for_valid_messages = need_loop_for_valid_messages
        self._need_technical_acknowledgement = need_technical_acknowledgement
        self._rollover_acknowledgement_control_number = rollover_acknowledgement_control_number
        self._send_synchronous_acknowledgement = send_synchronous_acknowledgement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12AcknowledgementSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12AcknowledgementSettings of this X12AcknowledgementSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgement_control_number_lower_bound(self):
        """Gets the acknowledgement_control_number_lower_bound of this X12AcknowledgementSettings.

        The acknowledgement control number lower bound.

        :return: The acknowledgement_control_number_lower_bound of this X12AcknowledgementSettings.
        :rtype: int
        """
        return self._acknowledgement_control_number_lower_bound

    @acknowledgement_control_number_lower_bound.setter
    def acknowledgement_control_number_lower_bound(self, acknowledgement_control_number_lower_bound):
        """Sets the acknowledgement_control_number_lower_bound of this X12AcknowledgementSettings.

        The acknowledgement control number lower bound.

        :param acknowledgement_control_number_lower_bound: The acknowledgement_control_number_lower_bound of this X12AcknowledgementSettings.
        :type acknowledgement_control_number_lower_bound: int
        """
        if acknowledgement_control_number_lower_bound is None:
            raise ValueError("Invalid value for `acknowledgement_control_number_lower_bound`, must not be `None`")

        self._acknowledgement_control_number_lower_bound = acknowledgement_control_number_lower_bound

    @property
    def acknowledgement_control_number_prefix(self):
        """Gets the acknowledgement_control_number_prefix of this X12AcknowledgementSettings.

        The acknowledgement control number prefix.

        :return: The acknowledgement_control_number_prefix of this X12AcknowledgementSettings.
        :rtype: str
        """
        return self._acknowledgement_control_number_prefix

    @acknowledgement_control_number_prefix.setter
    def acknowledgement_control_number_prefix(self, acknowledgement_control_number_prefix):
        """Sets the acknowledgement_control_number_prefix of this X12AcknowledgementSettings.

        The acknowledgement control number prefix.

        :param acknowledgement_control_number_prefix: The acknowledgement_control_number_prefix of this X12AcknowledgementSettings.
        :type acknowledgement_control_number_prefix: str
        """

        self._acknowledgement_control_number_prefix = acknowledgement_control_number_prefix

    @property
    def acknowledgement_control_number_suffix(self):
        """Gets the acknowledgement_control_number_suffix of this X12AcknowledgementSettings.

        The acknowledgement control number suffix.

        :return: The acknowledgement_control_number_suffix of this X12AcknowledgementSettings.
        :rtype: str
        """
        return self._acknowledgement_control_number_suffix

    @acknowledgement_control_number_suffix.setter
    def acknowledgement_control_number_suffix(self, acknowledgement_control_number_suffix):
        """Sets the acknowledgement_control_number_suffix of this X12AcknowledgementSettings.

        The acknowledgement control number suffix.

        :param acknowledgement_control_number_suffix: The acknowledgement_control_number_suffix of this X12AcknowledgementSettings.
        :type acknowledgement_control_number_suffix: str
        """

        self._acknowledgement_control_number_suffix = acknowledgement_control_number_suffix

    @property
    def acknowledgement_control_number_upper_bound(self):
        """Gets the acknowledgement_control_number_upper_bound of this X12AcknowledgementSettings.

        The acknowledgement control number upper bound.

        :return: The acknowledgement_control_number_upper_bound of this X12AcknowledgementSettings.
        :rtype: int
        """
        return self._acknowledgement_control_number_upper_bound

    @acknowledgement_control_number_upper_bound.setter
    def acknowledgement_control_number_upper_bound(self, acknowledgement_control_number_upper_bound):
        """Sets the acknowledgement_control_number_upper_bound of this X12AcknowledgementSettings.

        The acknowledgement control number upper bound.

        :param acknowledgement_control_number_upper_bound: The acknowledgement_control_number_upper_bound of this X12AcknowledgementSettings.
        :type acknowledgement_control_number_upper_bound: int
        """
        if acknowledgement_control_number_upper_bound is None:
            raise ValueError("Invalid value for `acknowledgement_control_number_upper_bound`, must not be `None`")

        self._acknowledgement_control_number_upper_bound = acknowledgement_control_number_upper_bound

    @property
    def batch_functional_acknowledgements(self):
        """Gets the batch_functional_acknowledgements of this X12AcknowledgementSettings.

        The value indicating whether to batch functional acknowledgements.

        :return: The batch_functional_acknowledgements of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._batch_functional_acknowledgements

    @batch_functional_acknowledgements.setter
    def batch_functional_acknowledgements(self, batch_functional_acknowledgements):
        """Sets the batch_functional_acknowledgements of this X12AcknowledgementSettings.

        The value indicating whether to batch functional acknowledgements.

        :param batch_functional_acknowledgements: The batch_functional_acknowledgements of this X12AcknowledgementSettings.
        :type batch_functional_acknowledgements: bool
        """
        if batch_functional_acknowledgements is None:
            raise ValueError("Invalid value for `batch_functional_acknowledgements`, must not be `None`")

        self._batch_functional_acknowledgements = batch_functional_acknowledgements

    @property
    def batch_implementation_acknowledgements(self):
        """Gets the batch_implementation_acknowledgements of this X12AcknowledgementSettings.

        The value indicating whether to batch implementation acknowledgements.

        :return: The batch_implementation_acknowledgements of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._batch_implementation_acknowledgements

    @batch_implementation_acknowledgements.setter
    def batch_implementation_acknowledgements(self, batch_implementation_acknowledgements):
        """Sets the batch_implementation_acknowledgements of this X12AcknowledgementSettings.

        The value indicating whether to batch implementation acknowledgements.

        :param batch_implementation_acknowledgements: The batch_implementation_acknowledgements of this X12AcknowledgementSettings.
        :type batch_implementation_acknowledgements: bool
        """
        if batch_implementation_acknowledgements is None:
            raise ValueError("Invalid value for `batch_implementation_acknowledgements`, must not be `None`")

        self._batch_implementation_acknowledgements = batch_implementation_acknowledgements

    @property
    def batch_technical_acknowledgements(self):
        """Gets the batch_technical_acknowledgements of this X12AcknowledgementSettings.

        The value indicating whether to batch the technical acknowledgements.

        :return: The batch_technical_acknowledgements of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._batch_technical_acknowledgements

    @batch_technical_acknowledgements.setter
    def batch_technical_acknowledgements(self, batch_technical_acknowledgements):
        """Sets the batch_technical_acknowledgements of this X12AcknowledgementSettings.

        The value indicating whether to batch the technical acknowledgements.

        :param batch_technical_acknowledgements: The batch_technical_acknowledgements of this X12AcknowledgementSettings.
        :type batch_technical_acknowledgements: bool
        """
        if batch_technical_acknowledgements is None:
            raise ValueError("Invalid value for `batch_technical_acknowledgements`, must not be `None`")

        self._batch_technical_acknowledgements = batch_technical_acknowledgements

    @property
    def functional_acknowledgement_version(self):
        """Gets the functional_acknowledgement_version of this X12AcknowledgementSettings.

        The functional acknowledgement version.

        :return: The functional_acknowledgement_version of this X12AcknowledgementSettings.
        :rtype: str
        """
        return self._functional_acknowledgement_version

    @functional_acknowledgement_version.setter
    def functional_acknowledgement_version(self, functional_acknowledgement_version):
        """Sets the functional_acknowledgement_version of this X12AcknowledgementSettings.

        The functional acknowledgement version.

        :param functional_acknowledgement_version: The functional_acknowledgement_version of this X12AcknowledgementSettings.
        :type functional_acknowledgement_version: str
        """

        self._functional_acknowledgement_version = functional_acknowledgement_version

    @property
    def implementation_acknowledgement_version(self):
        """Gets the implementation_acknowledgement_version of this X12AcknowledgementSettings.

        The implementation acknowledgement version.

        :return: The implementation_acknowledgement_version of this X12AcknowledgementSettings.
        :rtype: str
        """
        return self._implementation_acknowledgement_version

    @implementation_acknowledgement_version.setter
    def implementation_acknowledgement_version(self, implementation_acknowledgement_version):
        """Sets the implementation_acknowledgement_version of this X12AcknowledgementSettings.

        The implementation acknowledgement version.

        :param implementation_acknowledgement_version: The implementation_acknowledgement_version of this X12AcknowledgementSettings.
        :type implementation_acknowledgement_version: str
        """

        self._implementation_acknowledgement_version = implementation_acknowledgement_version

    @property
    def need_functional_acknowledgement(self):
        """Gets the need_functional_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether functional acknowledgement is needed.

        :return: The need_functional_acknowledgement of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._need_functional_acknowledgement

    @need_functional_acknowledgement.setter
    def need_functional_acknowledgement(self, need_functional_acknowledgement):
        """Sets the need_functional_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether functional acknowledgement is needed.

        :param need_functional_acknowledgement: The need_functional_acknowledgement of this X12AcknowledgementSettings.
        :type need_functional_acknowledgement: bool
        """
        if need_functional_acknowledgement is None:
            raise ValueError("Invalid value for `need_functional_acknowledgement`, must not be `None`")

        self._need_functional_acknowledgement = need_functional_acknowledgement

    @property
    def need_implementation_acknowledgement(self):
        """Gets the need_implementation_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether implementation acknowledgement is needed.

        :return: The need_implementation_acknowledgement of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._need_implementation_acknowledgement

    @need_implementation_acknowledgement.setter
    def need_implementation_acknowledgement(self, need_implementation_acknowledgement):
        """Sets the need_implementation_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether implementation acknowledgement is needed.

        :param need_implementation_acknowledgement: The need_implementation_acknowledgement of this X12AcknowledgementSettings.
        :type need_implementation_acknowledgement: bool
        """
        if need_implementation_acknowledgement is None:
            raise ValueError("Invalid value for `need_implementation_acknowledgement`, must not be `None`")

        self._need_implementation_acknowledgement = need_implementation_acknowledgement

    @property
    def need_loop_for_valid_messages(self):
        """Gets the need_loop_for_valid_messages of this X12AcknowledgementSettings.

        The value indicating whether a loop is needed for valid messages.

        :return: The need_loop_for_valid_messages of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._need_loop_for_valid_messages

    @need_loop_for_valid_messages.setter
    def need_loop_for_valid_messages(self, need_loop_for_valid_messages):
        """Sets the need_loop_for_valid_messages of this X12AcknowledgementSettings.

        The value indicating whether a loop is needed for valid messages.

        :param need_loop_for_valid_messages: The need_loop_for_valid_messages of this X12AcknowledgementSettings.
        :type need_loop_for_valid_messages: bool
        """
        if need_loop_for_valid_messages is None:
            raise ValueError("Invalid value for `need_loop_for_valid_messages`, must not be `None`")

        self._need_loop_for_valid_messages = need_loop_for_valid_messages

    @property
    def need_technical_acknowledgement(self):
        """Gets the need_technical_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether technical acknowledgement is needed.

        :return: The need_technical_acknowledgement of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._need_technical_acknowledgement

    @need_technical_acknowledgement.setter
    def need_technical_acknowledgement(self, need_technical_acknowledgement):
        """Sets the need_technical_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether technical acknowledgement is needed.

        :param need_technical_acknowledgement: The need_technical_acknowledgement of this X12AcknowledgementSettings.
        :type need_technical_acknowledgement: bool
        """
        if need_technical_acknowledgement is None:
            raise ValueError("Invalid value for `need_technical_acknowledgement`, must not be `None`")

        self._need_technical_acknowledgement = need_technical_acknowledgement

    @property
    def rollover_acknowledgement_control_number(self):
        """Gets the rollover_acknowledgement_control_number of this X12AcknowledgementSettings.

        The value indicating whether to rollover acknowledgement control number.

        :return: The rollover_acknowledgement_control_number of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._rollover_acknowledgement_control_number

    @rollover_acknowledgement_control_number.setter
    def rollover_acknowledgement_control_number(self, rollover_acknowledgement_control_number):
        """Sets the rollover_acknowledgement_control_number of this X12AcknowledgementSettings.

        The value indicating whether to rollover acknowledgement control number.

        :param rollover_acknowledgement_control_number: The rollover_acknowledgement_control_number of this X12AcknowledgementSettings.
        :type rollover_acknowledgement_control_number: bool
        """
        if rollover_acknowledgement_control_number is None:
            raise ValueError("Invalid value for `rollover_acknowledgement_control_number`, must not be `None`")

        self._rollover_acknowledgement_control_number = rollover_acknowledgement_control_number

    @property
    def send_synchronous_acknowledgement(self):
        """Gets the send_synchronous_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether to send synchronous acknowledgement.

        :return: The send_synchronous_acknowledgement of this X12AcknowledgementSettings.
        :rtype: bool
        """
        return self._send_synchronous_acknowledgement

    @send_synchronous_acknowledgement.setter
    def send_synchronous_acknowledgement(self, send_synchronous_acknowledgement):
        """Sets the send_synchronous_acknowledgement of this X12AcknowledgementSettings.

        The value indicating whether to send synchronous acknowledgement.

        :param send_synchronous_acknowledgement: The send_synchronous_acknowledgement of this X12AcknowledgementSettings.
        :type send_synchronous_acknowledgement: bool
        """
        if send_synchronous_acknowledgement is None:
            raise ValueError("Invalid value for `send_synchronous_acknowledgement`, must not be `None`")

        self._send_synchronous_acknowledgement = send_synchronous_acknowledgement
