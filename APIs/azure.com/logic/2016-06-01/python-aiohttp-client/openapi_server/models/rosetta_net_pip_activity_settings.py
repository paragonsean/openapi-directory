# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rosetta_net_pip_acknowledgment_of_receipt_settings import RosettaNetPipAcknowledgmentOfReceiptSettings
from openapi_server.models.rosetta_net_pip_activity_behavior import RosettaNetPipActivityBehavior
from openapi_server.models.rosetta_net_pip_activity_type import RosettaNetPipActivityType
from openapi_server import util


class RosettaNetPipActivitySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgment_of_receipt_settings: RosettaNetPipAcknowledgmentOfReceiptSettings=None, activity_behavior: RosettaNetPipActivityBehavior=None, activity_type: RosettaNetPipActivityType=None):
        """RosettaNetPipActivitySettings - a model defined in OpenAPI

        :param acknowledgment_of_receipt_settings: The acknowledgment_of_receipt_settings of this RosettaNetPipActivitySettings.
        :param activity_behavior: The activity_behavior of this RosettaNetPipActivitySettings.
        :param activity_type: The activity_type of this RosettaNetPipActivitySettings.
        """
        self.openapi_types = {
            'acknowledgment_of_receipt_settings': RosettaNetPipAcknowledgmentOfReceiptSettings,
            'activity_behavior': RosettaNetPipActivityBehavior,
            'activity_type': RosettaNetPipActivityType
        }

        self.attribute_map = {
            'acknowledgment_of_receipt_settings': 'acknowledgmentOfReceiptSettings',
            'activity_behavior': 'activityBehavior',
            'activity_type': 'activityType'
        }

        self._acknowledgment_of_receipt_settings = acknowledgment_of_receipt_settings
        self._activity_behavior = activity_behavior
        self._activity_type = activity_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RosettaNetPipActivitySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RosettaNetPipActivitySettings of this RosettaNetPipActivitySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgment_of_receipt_settings(self):
        """Gets the acknowledgment_of_receipt_settings of this RosettaNetPipActivitySettings.


        :return: The acknowledgment_of_receipt_settings of this RosettaNetPipActivitySettings.
        :rtype: RosettaNetPipAcknowledgmentOfReceiptSettings
        """
        return self._acknowledgment_of_receipt_settings

    @acknowledgment_of_receipt_settings.setter
    def acknowledgment_of_receipt_settings(self, acknowledgment_of_receipt_settings):
        """Sets the acknowledgment_of_receipt_settings of this RosettaNetPipActivitySettings.


        :param acknowledgment_of_receipt_settings: The acknowledgment_of_receipt_settings of this RosettaNetPipActivitySettings.
        :type acknowledgment_of_receipt_settings: RosettaNetPipAcknowledgmentOfReceiptSettings
        """
        if acknowledgment_of_receipt_settings is None:
            raise ValueError("Invalid value for `acknowledgment_of_receipt_settings`, must not be `None`")

        self._acknowledgment_of_receipt_settings = acknowledgment_of_receipt_settings

    @property
    def activity_behavior(self):
        """Gets the activity_behavior of this RosettaNetPipActivitySettings.


        :return: The activity_behavior of this RosettaNetPipActivitySettings.
        :rtype: RosettaNetPipActivityBehavior
        """
        return self._activity_behavior

    @activity_behavior.setter
    def activity_behavior(self, activity_behavior):
        """Sets the activity_behavior of this RosettaNetPipActivitySettings.


        :param activity_behavior: The activity_behavior of this RosettaNetPipActivitySettings.
        :type activity_behavior: RosettaNetPipActivityBehavior
        """
        if activity_behavior is None:
            raise ValueError("Invalid value for `activity_behavior`, must not be `None`")

        self._activity_behavior = activity_behavior

    @property
    def activity_type(self):
        """Gets the activity_type of this RosettaNetPipActivitySettings.


        :return: The activity_type of this RosettaNetPipActivitySettings.
        :rtype: RosettaNetPipActivityType
        """
        return self._activity_type

    @activity_type.setter
    def activity_type(self, activity_type):
        """Sets the activity_type of this RosettaNetPipActivitySettings.


        :param activity_type: The activity_type of this RosettaNetPipActivitySettings.
        :type activity_type: RosettaNetPipActivityType
        """
        if activity_type is None:
            raise ValueError("Invalid value for `activity_type`, must not be `None`")

        self._activity_type = activity_type
