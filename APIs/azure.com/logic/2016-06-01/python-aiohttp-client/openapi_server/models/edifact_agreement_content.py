# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.edifact_one_way_agreement import EdifactOneWayAgreement
from openapi_server import util


class EdifactAgreementContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, receive_agreement: EdifactOneWayAgreement=None, send_agreement: EdifactOneWayAgreement=None):
        """EdifactAgreementContent - a model defined in OpenAPI

        :param receive_agreement: The receive_agreement of this EdifactAgreementContent.
        :param send_agreement: The send_agreement of this EdifactAgreementContent.
        """
        self.openapi_types = {
            'receive_agreement': EdifactOneWayAgreement,
            'send_agreement': EdifactOneWayAgreement
        }

        self.attribute_map = {
            'receive_agreement': 'receiveAgreement',
            'send_agreement': 'sendAgreement'
        }

        self._receive_agreement = receive_agreement
        self._send_agreement = send_agreement

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdifactAgreementContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EdifactAgreementContent of this EdifactAgreementContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def receive_agreement(self):
        """Gets the receive_agreement of this EdifactAgreementContent.


        :return: The receive_agreement of this EdifactAgreementContent.
        :rtype: EdifactOneWayAgreement
        """
        return self._receive_agreement

    @receive_agreement.setter
    def receive_agreement(self, receive_agreement):
        """Sets the receive_agreement of this EdifactAgreementContent.


        :param receive_agreement: The receive_agreement of this EdifactAgreementContent.
        :type receive_agreement: EdifactOneWayAgreement
        """
        if receive_agreement is None:
            raise ValueError("Invalid value for `receive_agreement`, must not be `None`")

        self._receive_agreement = receive_agreement

    @property
    def send_agreement(self):
        """Gets the send_agreement of this EdifactAgreementContent.


        :return: The send_agreement of this EdifactAgreementContent.
        :rtype: EdifactOneWayAgreement
        """
        return self._send_agreement

    @send_agreement.setter
    def send_agreement(self, send_agreement):
        """Sets the send_agreement of this EdifactAgreementContent.


        :param send_agreement: The send_agreement of this EdifactAgreementContent.
        :type send_agreement: EdifactOneWayAgreement
        """
        if send_agreement is None:
            raise ValueError("Invalid value for `send_agreement`, must not be `None`")

        self._send_agreement = send_agreement
