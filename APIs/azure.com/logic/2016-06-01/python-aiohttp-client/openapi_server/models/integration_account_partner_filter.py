# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.partner_type import PartnerType
from openapi_server import util


class IntegrationAccountPartnerFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, partner_type: PartnerType=None):
        """IntegrationAccountPartnerFilter - a model defined in OpenAPI

        :param partner_type: The partner_type of this IntegrationAccountPartnerFilter.
        """
        self.openapi_types = {
            'partner_type': PartnerType
        }

        self.attribute_map = {
            'partner_type': 'partnerType'
        }

        self._partner_type = partner_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegrationAccountPartnerFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegrationAccountPartnerFilter of this IntegrationAccountPartnerFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def partner_type(self):
        """Gets the partner_type of this IntegrationAccountPartnerFilter.


        :return: The partner_type of this IntegrationAccountPartnerFilter.
        :rtype: PartnerType
        """
        return self._partner_type

    @partner_type.setter
    def partner_type(self, partner_type):
        """Sets the partner_type of this IntegrationAccountPartnerFilter.


        :param partner_type: The partner_type of this IntegrationAccountPartnerFilter.
        :type partner_type: PartnerType
        """
        if partner_type is None:
            raise ValueError("Invalid value for `partner_type`, must not be `None`")

        self._partner_type = partner_type
