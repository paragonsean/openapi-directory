# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.recurrence_frequency import RecurrenceFrequency
from openapi_server.models.recurrence_schedule import RecurrenceSchedule
from openapi_server import util


class WorkflowTriggerRecurrence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_time: str=None, frequency: RecurrenceFrequency=None, interval: int=None, schedule: RecurrenceSchedule=None, start_time: str=None, time_zone: str=None):
        """WorkflowTriggerRecurrence - a model defined in OpenAPI

        :param end_time: The end_time of this WorkflowTriggerRecurrence.
        :param frequency: The frequency of this WorkflowTriggerRecurrence.
        :param interval: The interval of this WorkflowTriggerRecurrence.
        :param schedule: The schedule of this WorkflowTriggerRecurrence.
        :param start_time: The start_time of this WorkflowTriggerRecurrence.
        :param time_zone: The time_zone of this WorkflowTriggerRecurrence.
        """
        self.openapi_types = {
            'end_time': str,
            'frequency': RecurrenceFrequency,
            'interval': int,
            'schedule': RecurrenceSchedule,
            'start_time': str,
            'time_zone': str
        }

        self.attribute_map = {
            'end_time': 'endTime',
            'frequency': 'frequency',
            'interval': 'interval',
            'schedule': 'schedule',
            'start_time': 'startTime',
            'time_zone': 'timeZone'
        }

        self._end_time = end_time
        self._frequency = frequency
        self._interval = interval
        self._schedule = schedule
        self._start_time = start_time
        self._time_zone = time_zone

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowTriggerRecurrence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowTriggerRecurrence of this WorkflowTriggerRecurrence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_time(self):
        """Gets the end_time of this WorkflowTriggerRecurrence.

        The end time.

        :return: The end_time of this WorkflowTriggerRecurrence.
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this WorkflowTriggerRecurrence.

        The end time.

        :param end_time: The end_time of this WorkflowTriggerRecurrence.
        :type end_time: str
        """

        self._end_time = end_time

    @property
    def frequency(self):
        """Gets the frequency of this WorkflowTriggerRecurrence.


        :return: The frequency of this WorkflowTriggerRecurrence.
        :rtype: RecurrenceFrequency
        """
        return self._frequency

    @frequency.setter
    def frequency(self, frequency):
        """Sets the frequency of this WorkflowTriggerRecurrence.


        :param frequency: The frequency of this WorkflowTriggerRecurrence.
        :type frequency: RecurrenceFrequency
        """

        self._frequency = frequency

    @property
    def interval(self):
        """Gets the interval of this WorkflowTriggerRecurrence.

        The interval.

        :return: The interval of this WorkflowTriggerRecurrence.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this WorkflowTriggerRecurrence.

        The interval.

        :param interval: The interval of this WorkflowTriggerRecurrence.
        :type interval: int
        """

        self._interval = interval

    @property
    def schedule(self):
        """Gets the schedule of this WorkflowTriggerRecurrence.


        :return: The schedule of this WorkflowTriggerRecurrence.
        :rtype: RecurrenceSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this WorkflowTriggerRecurrence.


        :param schedule: The schedule of this WorkflowTriggerRecurrence.
        :type schedule: RecurrenceSchedule
        """

        self._schedule = schedule

    @property
    def start_time(self):
        """Gets the start_time of this WorkflowTriggerRecurrence.

        The start time.

        :return: The start_time of this WorkflowTriggerRecurrence.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this WorkflowTriggerRecurrence.

        The start time.

        :param start_time: The start_time of this WorkflowTriggerRecurrence.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def time_zone(self):
        """Gets the time_zone of this WorkflowTriggerRecurrence.

        The time zone.

        :return: The time_zone of this WorkflowTriggerRecurrence.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this WorkflowTriggerRecurrence.

        The time zone.

        :param time_zone: The time_zone of this WorkflowTriggerRecurrence.
        :type time_zone: str
        """

        self._time_zone = time_zone
