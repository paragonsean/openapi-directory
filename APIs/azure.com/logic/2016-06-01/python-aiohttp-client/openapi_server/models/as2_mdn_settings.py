# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hashing_algorithm import HashingAlgorithm
from openapi_server import util


class AS2MdnSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disposition_notification_to: str=None, mdn_text: str=None, mic_hashing_algorithm: HashingAlgorithm=None, need_mdn: bool=None, receipt_delivery_url: str=None, send_inbound_mdn_to_message_box: bool=None, send_mdn_asynchronously: bool=None, sign_mdn: bool=None, sign_outbound_mdn_if_optional: bool=None):
        """AS2MdnSettings - a model defined in OpenAPI

        :param disposition_notification_to: The disposition_notification_to of this AS2MdnSettings.
        :param mdn_text: The mdn_text of this AS2MdnSettings.
        :param mic_hashing_algorithm: The mic_hashing_algorithm of this AS2MdnSettings.
        :param need_mdn: The need_mdn of this AS2MdnSettings.
        :param receipt_delivery_url: The receipt_delivery_url of this AS2MdnSettings.
        :param send_inbound_mdn_to_message_box: The send_inbound_mdn_to_message_box of this AS2MdnSettings.
        :param send_mdn_asynchronously: The send_mdn_asynchronously of this AS2MdnSettings.
        :param sign_mdn: The sign_mdn of this AS2MdnSettings.
        :param sign_outbound_mdn_if_optional: The sign_outbound_mdn_if_optional of this AS2MdnSettings.
        """
        self.openapi_types = {
            'disposition_notification_to': str,
            'mdn_text': str,
            'mic_hashing_algorithm': HashingAlgorithm,
            'need_mdn': bool,
            'receipt_delivery_url': str,
            'send_inbound_mdn_to_message_box': bool,
            'send_mdn_asynchronously': bool,
            'sign_mdn': bool,
            'sign_outbound_mdn_if_optional': bool
        }

        self.attribute_map = {
            'disposition_notification_to': 'dispositionNotificationTo',
            'mdn_text': 'mdnText',
            'mic_hashing_algorithm': 'micHashingAlgorithm',
            'need_mdn': 'needMdn',
            'receipt_delivery_url': 'receiptDeliveryUrl',
            'send_inbound_mdn_to_message_box': 'sendInboundMdnToMessageBox',
            'send_mdn_asynchronously': 'sendMdnAsynchronously',
            'sign_mdn': 'signMdn',
            'sign_outbound_mdn_if_optional': 'signOutboundMdnIfOptional'
        }

        self._disposition_notification_to = disposition_notification_to
        self._mdn_text = mdn_text
        self._mic_hashing_algorithm = mic_hashing_algorithm
        self._need_mdn = need_mdn
        self._receipt_delivery_url = receipt_delivery_url
        self._send_inbound_mdn_to_message_box = send_inbound_mdn_to_message_box
        self._send_mdn_asynchronously = send_mdn_asynchronously
        self._sign_mdn = sign_mdn
        self._sign_outbound_mdn_if_optional = sign_outbound_mdn_if_optional

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AS2MdnSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AS2MdnSettings of this AS2MdnSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disposition_notification_to(self):
        """Gets the disposition_notification_to of this AS2MdnSettings.

        The disposition notification to header value.

        :return: The disposition_notification_to of this AS2MdnSettings.
        :rtype: str
        """
        return self._disposition_notification_to

    @disposition_notification_to.setter
    def disposition_notification_to(self, disposition_notification_to):
        """Sets the disposition_notification_to of this AS2MdnSettings.

        The disposition notification to header value.

        :param disposition_notification_to: The disposition_notification_to of this AS2MdnSettings.
        :type disposition_notification_to: str
        """

        self._disposition_notification_to = disposition_notification_to

    @property
    def mdn_text(self):
        """Gets the mdn_text of this AS2MdnSettings.

        The MDN text.

        :return: The mdn_text of this AS2MdnSettings.
        :rtype: str
        """
        return self._mdn_text

    @mdn_text.setter
    def mdn_text(self, mdn_text):
        """Sets the mdn_text of this AS2MdnSettings.

        The MDN text.

        :param mdn_text: The mdn_text of this AS2MdnSettings.
        :type mdn_text: str
        """

        self._mdn_text = mdn_text

    @property
    def mic_hashing_algorithm(self):
        """Gets the mic_hashing_algorithm of this AS2MdnSettings.


        :return: The mic_hashing_algorithm of this AS2MdnSettings.
        :rtype: HashingAlgorithm
        """
        return self._mic_hashing_algorithm

    @mic_hashing_algorithm.setter
    def mic_hashing_algorithm(self, mic_hashing_algorithm):
        """Sets the mic_hashing_algorithm of this AS2MdnSettings.


        :param mic_hashing_algorithm: The mic_hashing_algorithm of this AS2MdnSettings.
        :type mic_hashing_algorithm: HashingAlgorithm
        """
        if mic_hashing_algorithm is None:
            raise ValueError("Invalid value for `mic_hashing_algorithm`, must not be `None`")

        self._mic_hashing_algorithm = mic_hashing_algorithm

    @property
    def need_mdn(self):
        """Gets the need_mdn of this AS2MdnSettings.

        The value indicating whether to send or request a MDN.

        :return: The need_mdn of this AS2MdnSettings.
        :rtype: bool
        """
        return self._need_mdn

    @need_mdn.setter
    def need_mdn(self, need_mdn):
        """Sets the need_mdn of this AS2MdnSettings.

        The value indicating whether to send or request a MDN.

        :param need_mdn: The need_mdn of this AS2MdnSettings.
        :type need_mdn: bool
        """
        if need_mdn is None:
            raise ValueError("Invalid value for `need_mdn`, must not be `None`")

        self._need_mdn = need_mdn

    @property
    def receipt_delivery_url(self):
        """Gets the receipt_delivery_url of this AS2MdnSettings.

        The receipt delivery URL.

        :return: The receipt_delivery_url of this AS2MdnSettings.
        :rtype: str
        """
        return self._receipt_delivery_url

    @receipt_delivery_url.setter
    def receipt_delivery_url(self, receipt_delivery_url):
        """Sets the receipt_delivery_url of this AS2MdnSettings.

        The receipt delivery URL.

        :param receipt_delivery_url: The receipt_delivery_url of this AS2MdnSettings.
        :type receipt_delivery_url: str
        """

        self._receipt_delivery_url = receipt_delivery_url

    @property
    def send_inbound_mdn_to_message_box(self):
        """Gets the send_inbound_mdn_to_message_box of this AS2MdnSettings.

        The value indicating whether to send inbound MDN to message box.

        :return: The send_inbound_mdn_to_message_box of this AS2MdnSettings.
        :rtype: bool
        """
        return self._send_inbound_mdn_to_message_box

    @send_inbound_mdn_to_message_box.setter
    def send_inbound_mdn_to_message_box(self, send_inbound_mdn_to_message_box):
        """Sets the send_inbound_mdn_to_message_box of this AS2MdnSettings.

        The value indicating whether to send inbound MDN to message box.

        :param send_inbound_mdn_to_message_box: The send_inbound_mdn_to_message_box of this AS2MdnSettings.
        :type send_inbound_mdn_to_message_box: bool
        """
        if send_inbound_mdn_to_message_box is None:
            raise ValueError("Invalid value for `send_inbound_mdn_to_message_box`, must not be `None`")

        self._send_inbound_mdn_to_message_box = send_inbound_mdn_to_message_box

    @property
    def send_mdn_asynchronously(self):
        """Gets the send_mdn_asynchronously of this AS2MdnSettings.

        The value indicating whether to send the asynchronous MDN.

        :return: The send_mdn_asynchronously of this AS2MdnSettings.
        :rtype: bool
        """
        return self._send_mdn_asynchronously

    @send_mdn_asynchronously.setter
    def send_mdn_asynchronously(self, send_mdn_asynchronously):
        """Sets the send_mdn_asynchronously of this AS2MdnSettings.

        The value indicating whether to send the asynchronous MDN.

        :param send_mdn_asynchronously: The send_mdn_asynchronously of this AS2MdnSettings.
        :type send_mdn_asynchronously: bool
        """
        if send_mdn_asynchronously is None:
            raise ValueError("Invalid value for `send_mdn_asynchronously`, must not be `None`")

        self._send_mdn_asynchronously = send_mdn_asynchronously

    @property
    def sign_mdn(self):
        """Gets the sign_mdn of this AS2MdnSettings.

        The value indicating whether the MDN needs to be signed or not.

        :return: The sign_mdn of this AS2MdnSettings.
        :rtype: bool
        """
        return self._sign_mdn

    @sign_mdn.setter
    def sign_mdn(self, sign_mdn):
        """Sets the sign_mdn of this AS2MdnSettings.

        The value indicating whether the MDN needs to be signed or not.

        :param sign_mdn: The sign_mdn of this AS2MdnSettings.
        :type sign_mdn: bool
        """
        if sign_mdn is None:
            raise ValueError("Invalid value for `sign_mdn`, must not be `None`")

        self._sign_mdn = sign_mdn

    @property
    def sign_outbound_mdn_if_optional(self):
        """Gets the sign_outbound_mdn_if_optional of this AS2MdnSettings.

        The value indicating whether to sign the outbound MDN if optional.

        :return: The sign_outbound_mdn_if_optional of this AS2MdnSettings.
        :rtype: bool
        """
        return self._sign_outbound_mdn_if_optional

    @sign_outbound_mdn_if_optional.setter
    def sign_outbound_mdn_if_optional(self, sign_outbound_mdn_if_optional):
        """Sets the sign_outbound_mdn_if_optional of this AS2MdnSettings.

        The value indicating whether to sign the outbound MDN if optional.

        :param sign_outbound_mdn_if_optional: The sign_outbound_mdn_if_optional of this AS2MdnSettings.
        :type sign_outbound_mdn_if_optional: bool
        """
        if sign_outbound_mdn_if_optional is None:
            raise ValueError("Invalid value for `sign_outbound_mdn_if_optional`, must not be `None`")

        self._sign_outbound_mdn_if_optional = sign_outbound_mdn_if_optional
