# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rosetta_net_pip_business_document import RosettaNetPipBusinessDocument
from openapi_server.models.rosetta_net_pip_role_type import RosettaNetPipRoleType
from openapi_server import util


class RosettaNetPipRoleSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action: str=None, business_document: RosettaNetPipBusinessDocument=None, description: str=None, role: str=None, role_type: RosettaNetPipRoleType=None, service: str=None, service_classification: str=None):
        """RosettaNetPipRoleSettings - a model defined in OpenAPI

        :param action: The action of this RosettaNetPipRoleSettings.
        :param business_document: The business_document of this RosettaNetPipRoleSettings.
        :param description: The description of this RosettaNetPipRoleSettings.
        :param role: The role of this RosettaNetPipRoleSettings.
        :param role_type: The role_type of this RosettaNetPipRoleSettings.
        :param service: The service of this RosettaNetPipRoleSettings.
        :param service_classification: The service_classification of this RosettaNetPipRoleSettings.
        """
        self.openapi_types = {
            'action': str,
            'business_document': RosettaNetPipBusinessDocument,
            'description': str,
            'role': str,
            'role_type': RosettaNetPipRoleType,
            'service': str,
            'service_classification': str
        }

        self.attribute_map = {
            'action': 'action',
            'business_document': 'businessDocument',
            'description': 'description',
            'role': 'role',
            'role_type': 'roleType',
            'service': 'service',
            'service_classification': 'serviceClassification'
        }

        self._action = action
        self._business_document = business_document
        self._description = description
        self._role = role
        self._role_type = role_type
        self._service = service
        self._service_classification = service_classification

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RosettaNetPipRoleSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RosettaNetPipRoleSettings of this RosettaNetPipRoleSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self):
        """Gets the action of this RosettaNetPipRoleSettings.

        The action name.

        :return: The action of this RosettaNetPipRoleSettings.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this RosettaNetPipRoleSettings.

        The action name.

        :param action: The action of this RosettaNetPipRoleSettings.
        :type action: str
        """
        if action is None:
            raise ValueError("Invalid value for `action`, must not be `None`")

        self._action = action

    @property
    def business_document(self):
        """Gets the business_document of this RosettaNetPipRoleSettings.


        :return: The business_document of this RosettaNetPipRoleSettings.
        :rtype: RosettaNetPipBusinessDocument
        """
        return self._business_document

    @business_document.setter
    def business_document(self, business_document):
        """Sets the business_document of this RosettaNetPipRoleSettings.


        :param business_document: The business_document of this RosettaNetPipRoleSettings.
        :type business_document: RosettaNetPipBusinessDocument
        """
        if business_document is None:
            raise ValueError("Invalid value for `business_document`, must not be `None`")

        self._business_document = business_document

    @property
    def description(self):
        """Gets the description of this RosettaNetPipRoleSettings.

        The description.

        :return: The description of this RosettaNetPipRoleSettings.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RosettaNetPipRoleSettings.

        The description.

        :param description: The description of this RosettaNetPipRoleSettings.
        :type description: str
        """

        self._description = description

    @property
    def role(self):
        """Gets the role of this RosettaNetPipRoleSettings.

        The role name.

        :return: The role of this RosettaNetPipRoleSettings.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this RosettaNetPipRoleSettings.

        The role name.

        :param role: The role of this RosettaNetPipRoleSettings.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")

        self._role = role

    @property
    def role_type(self):
        """Gets the role_type of this RosettaNetPipRoleSettings.


        :return: The role_type of this RosettaNetPipRoleSettings.
        :rtype: RosettaNetPipRoleType
        """
        return self._role_type

    @role_type.setter
    def role_type(self, role_type):
        """Sets the role_type of this RosettaNetPipRoleSettings.


        :param role_type: The role_type of this RosettaNetPipRoleSettings.
        :type role_type: RosettaNetPipRoleType
        """
        if role_type is None:
            raise ValueError("Invalid value for `role_type`, must not be `None`")

        self._role_type = role_type

    @property
    def service(self):
        """Gets the service of this RosettaNetPipRoleSettings.

        The service name.

        :return: The service of this RosettaNetPipRoleSettings.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this RosettaNetPipRoleSettings.

        The service name.

        :param service: The service of this RosettaNetPipRoleSettings.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")

        self._service = service

    @property
    def service_classification(self):
        """Gets the service_classification of this RosettaNetPipRoleSettings.

        The service classification name.

        :return: The service_classification of this RosettaNetPipRoleSettings.
        :rtype: str
        """
        return self._service_classification

    @service_classification.setter
    def service_classification(self, service_classification):
        """Sets the service_classification of this RosettaNetPipRoleSettings.

        The service classification name.

        :param service_classification: The service_classification of this RosettaNetPipRoleSettings.
        :type service_classification: str
        """
        if service_classification is None:
            raise ValueError("Invalid value for `service_classification`, must not be `None`")

        self._service_classification = service_classification
