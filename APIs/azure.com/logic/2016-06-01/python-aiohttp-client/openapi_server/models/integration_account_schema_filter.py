# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.schema_type import SchemaType
from openapi_server import util


class IntegrationAccountSchemaFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, schema_type: SchemaType=None):
        """IntegrationAccountSchemaFilter - a model defined in OpenAPI

        :param schema_type: The schema_type of this IntegrationAccountSchemaFilter.
        """
        self.openapi_types = {
            'schema_type': SchemaType
        }

        self.attribute_map = {
            'schema_type': 'schemaType'
        }

        self._schema_type = schema_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegrationAccountSchemaFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegrationAccountSchemaFilter of this IntegrationAccountSchemaFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_type(self):
        """Gets the schema_type of this IntegrationAccountSchemaFilter.


        :return: The schema_type of this IntegrationAccountSchemaFilter.
        :rtype: SchemaType
        """
        return self._schema_type

    @schema_type.setter
    def schema_type(self, schema_type):
        """Sets the schema_type of this IntegrationAccountSchemaFilter.


        :param schema_type: The schema_type of this IntegrationAccountSchemaFilter.
        :type schema_type: SchemaType
        """
        if schema_type is None:
            raise ValueError("Invalid value for `schema_type`, must not be `None`")

        self._schema_type = schema_type
