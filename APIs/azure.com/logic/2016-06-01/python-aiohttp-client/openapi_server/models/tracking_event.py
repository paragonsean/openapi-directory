# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.event_level import EventLevel
from openapi_server.models.tracking_event_error_info import TrackingEventErrorInfo
from openapi_server.models.tracking_record_type import TrackingRecordType
from openapi_server import util


class TrackingEvent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: TrackingEventErrorInfo=None, event_level: EventLevel=None, event_time: datetime=None, record_type: TrackingRecordType=None):
        """TrackingEvent - a model defined in OpenAPI

        :param error: The error of this TrackingEvent.
        :param event_level: The event_level of this TrackingEvent.
        :param event_time: The event_time of this TrackingEvent.
        :param record_type: The record_type of this TrackingEvent.
        """
        self.openapi_types = {
            'error': TrackingEventErrorInfo,
            'event_level': EventLevel,
            'event_time': datetime,
            'record_type': TrackingRecordType
        }

        self.attribute_map = {
            'error': 'error',
            'event_level': 'eventLevel',
            'event_time': 'eventTime',
            'record_type': 'recordType'
        }

        self._error = error
        self._event_level = event_level
        self._event_time = event_time
        self._record_type = record_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackingEvent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackingEvent of this TrackingEvent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this TrackingEvent.


        :return: The error of this TrackingEvent.
        :rtype: TrackingEventErrorInfo
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TrackingEvent.


        :param error: The error of this TrackingEvent.
        :type error: TrackingEventErrorInfo
        """

        self._error = error

    @property
    def event_level(self):
        """Gets the event_level of this TrackingEvent.


        :return: The event_level of this TrackingEvent.
        :rtype: EventLevel
        """
        return self._event_level

    @event_level.setter
    def event_level(self, event_level):
        """Sets the event_level of this TrackingEvent.


        :param event_level: The event_level of this TrackingEvent.
        :type event_level: EventLevel
        """
        if event_level is None:
            raise ValueError("Invalid value for `event_level`, must not be `None`")

        self._event_level = event_level

    @property
    def event_time(self):
        """Gets the event_time of this TrackingEvent.


        :return: The event_time of this TrackingEvent.
        :rtype: datetime
        """
        return self._event_time

    @event_time.setter
    def event_time(self, event_time):
        """Sets the event_time of this TrackingEvent.


        :param event_time: The event_time of this TrackingEvent.
        :type event_time: datetime
        """
        if event_time is None:
            raise ValueError("Invalid value for `event_time`, must not be `None`")

        self._event_time = event_time

    @property
    def record_type(self):
        """Gets the record_type of this TrackingEvent.


        :return: The record_type of this TrackingEvent.
        :rtype: TrackingRecordType
        """
        return self._record_type

    @record_type.setter
    def record_type(self, record_type):
        """Sets the record_type of this TrackingEvent.


        :param record_type: The record_type of this TrackingEvent.
        :type record_type: TrackingRecordType
        """
        if record_type is None:
            raise ValueError("Invalid value for `record_type`, must not be `None`")

        self._record_type = record_type
