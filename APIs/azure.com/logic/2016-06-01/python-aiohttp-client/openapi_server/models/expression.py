# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_resource_error_info import AzureResourceErrorInfo
from openapi_server import util


class Expression(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error: AzureResourceErrorInfo=None, subexpressions: List[Expression]=None, text: str=None, value: object=None):
        """Expression - a model defined in OpenAPI

        :param error: The error of this Expression.
        :param subexpressions: The subexpressions of this Expression.
        :param text: The text of this Expression.
        :param value: The value of this Expression.
        """
        self.openapi_types = {
            'error': AzureResourceErrorInfo,
            'subexpressions': List[Expression],
            'text': str,
            'value': object
        }

        self.attribute_map = {
            'error': 'error',
            'subexpressions': 'subexpressions',
            'text': 'text',
            'value': 'value'
        }

        self._error = error
        self._subexpressions = subexpressions
        self._text = text
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Expression':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Expression of this Expression.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self):
        """Gets the error of this Expression.


        :return: The error of this Expression.
        :rtype: AzureResourceErrorInfo
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Expression.


        :param error: The error of this Expression.
        :type error: AzureResourceErrorInfo
        """

        self._error = error

    @property
    def subexpressions(self):
        """Gets the subexpressions of this Expression.


        :return: The subexpressions of this Expression.
        :rtype: List[Expression]
        """
        return self._subexpressions

    @subexpressions.setter
    def subexpressions(self, subexpressions):
        """Sets the subexpressions of this Expression.


        :param subexpressions: The subexpressions of this Expression.
        :type subexpressions: List[Expression]
        """

        self._subexpressions = subexpressions

    @property
    def text(self):
        """Gets the text of this Expression.


        :return: The text of this Expression.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Expression.


        :param text: The text of this Expression.
        :type text: str
        """

        self._text = text

    @property
    def value(self):
        """Gets the value of this Expression.


        :return: The value of this Expression.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Expression.


        :param value: The value of this Expression.
        :type value: object
        """

        self._value = value
