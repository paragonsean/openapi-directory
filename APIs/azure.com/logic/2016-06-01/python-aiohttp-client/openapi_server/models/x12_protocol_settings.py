# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.x12_acknowledgement_settings import X12AcknowledgementSettings
from openapi_server.models.x12_delimiter_overrides import X12DelimiterOverrides
from openapi_server.models.x12_envelope_override import X12EnvelopeOverride
from openapi_server.models.x12_envelope_settings import X12EnvelopeSettings
from openapi_server.models.x12_framing_settings import X12FramingSettings
from openapi_server.models.x12_message_filter import X12MessageFilter
from openapi_server.models.x12_message_identifier import X12MessageIdentifier
from openapi_server.models.x12_processing_settings import X12ProcessingSettings
from openapi_server.models.x12_schema_reference import X12SchemaReference
from openapi_server.models.x12_security_settings import X12SecuritySettings
from openapi_server.models.x12_validation_override import X12ValidationOverride
from openapi_server.models.x12_validation_settings import X12ValidationSettings
from openapi_server import util


class X12ProtocolSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgement_settings: X12AcknowledgementSettings=None, envelope_overrides: List[X12EnvelopeOverride]=None, envelope_settings: X12EnvelopeSettings=None, framing_settings: X12FramingSettings=None, message_filter: X12MessageFilter=None, message_filter_list: List[X12MessageIdentifier]=None, processing_settings: X12ProcessingSettings=None, schema_references: List[X12SchemaReference]=None, security_settings: X12SecuritySettings=None, validation_overrides: List[X12ValidationOverride]=None, validation_settings: X12ValidationSettings=None, x12_delimiter_overrides: List[X12DelimiterOverrides]=None):
        """X12ProtocolSettings - a model defined in OpenAPI

        :param acknowledgement_settings: The acknowledgement_settings of this X12ProtocolSettings.
        :param envelope_overrides: The envelope_overrides of this X12ProtocolSettings.
        :param envelope_settings: The envelope_settings of this X12ProtocolSettings.
        :param framing_settings: The framing_settings of this X12ProtocolSettings.
        :param message_filter: The message_filter of this X12ProtocolSettings.
        :param message_filter_list: The message_filter_list of this X12ProtocolSettings.
        :param processing_settings: The processing_settings of this X12ProtocolSettings.
        :param schema_references: The schema_references of this X12ProtocolSettings.
        :param security_settings: The security_settings of this X12ProtocolSettings.
        :param validation_overrides: The validation_overrides of this X12ProtocolSettings.
        :param validation_settings: The validation_settings of this X12ProtocolSettings.
        :param x12_delimiter_overrides: The x12_delimiter_overrides of this X12ProtocolSettings.
        """
        self.openapi_types = {
            'acknowledgement_settings': X12AcknowledgementSettings,
            'envelope_overrides': List[X12EnvelopeOverride],
            'envelope_settings': X12EnvelopeSettings,
            'framing_settings': X12FramingSettings,
            'message_filter': X12MessageFilter,
            'message_filter_list': List[X12MessageIdentifier],
            'processing_settings': X12ProcessingSettings,
            'schema_references': List[X12SchemaReference],
            'security_settings': X12SecuritySettings,
            'validation_overrides': List[X12ValidationOverride],
            'validation_settings': X12ValidationSettings,
            'x12_delimiter_overrides': List[X12DelimiterOverrides]
        }

        self.attribute_map = {
            'acknowledgement_settings': 'acknowledgementSettings',
            'envelope_overrides': 'envelopeOverrides',
            'envelope_settings': 'envelopeSettings',
            'framing_settings': 'framingSettings',
            'message_filter': 'messageFilter',
            'message_filter_list': 'messageFilterList',
            'processing_settings': 'processingSettings',
            'schema_references': 'schemaReferences',
            'security_settings': 'securitySettings',
            'validation_overrides': 'validationOverrides',
            'validation_settings': 'validationSettings',
            'x12_delimiter_overrides': 'x12DelimiterOverrides'
        }

        self._acknowledgement_settings = acknowledgement_settings
        self._envelope_overrides = envelope_overrides
        self._envelope_settings = envelope_settings
        self._framing_settings = framing_settings
        self._message_filter = message_filter
        self._message_filter_list = message_filter_list
        self._processing_settings = processing_settings
        self._schema_references = schema_references
        self._security_settings = security_settings
        self._validation_overrides = validation_overrides
        self._validation_settings = validation_settings
        self._x12_delimiter_overrides = x12_delimiter_overrides

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12ProtocolSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12ProtocolSettings of this X12ProtocolSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgement_settings(self):
        """Gets the acknowledgement_settings of this X12ProtocolSettings.


        :return: The acknowledgement_settings of this X12ProtocolSettings.
        :rtype: X12AcknowledgementSettings
        """
        return self._acknowledgement_settings

    @acknowledgement_settings.setter
    def acknowledgement_settings(self, acknowledgement_settings):
        """Sets the acknowledgement_settings of this X12ProtocolSettings.


        :param acknowledgement_settings: The acknowledgement_settings of this X12ProtocolSettings.
        :type acknowledgement_settings: X12AcknowledgementSettings
        """
        if acknowledgement_settings is None:
            raise ValueError("Invalid value for `acknowledgement_settings`, must not be `None`")

        self._acknowledgement_settings = acknowledgement_settings

    @property
    def envelope_overrides(self):
        """Gets the envelope_overrides of this X12ProtocolSettings.

        The X12 envelope override settings.

        :return: The envelope_overrides of this X12ProtocolSettings.
        :rtype: List[X12EnvelopeOverride]
        """
        return self._envelope_overrides

    @envelope_overrides.setter
    def envelope_overrides(self, envelope_overrides):
        """Sets the envelope_overrides of this X12ProtocolSettings.

        The X12 envelope override settings.

        :param envelope_overrides: The envelope_overrides of this X12ProtocolSettings.
        :type envelope_overrides: List[X12EnvelopeOverride]
        """

        self._envelope_overrides = envelope_overrides

    @property
    def envelope_settings(self):
        """Gets the envelope_settings of this X12ProtocolSettings.


        :return: The envelope_settings of this X12ProtocolSettings.
        :rtype: X12EnvelopeSettings
        """
        return self._envelope_settings

    @envelope_settings.setter
    def envelope_settings(self, envelope_settings):
        """Sets the envelope_settings of this X12ProtocolSettings.


        :param envelope_settings: The envelope_settings of this X12ProtocolSettings.
        :type envelope_settings: X12EnvelopeSettings
        """
        if envelope_settings is None:
            raise ValueError("Invalid value for `envelope_settings`, must not be `None`")

        self._envelope_settings = envelope_settings

    @property
    def framing_settings(self):
        """Gets the framing_settings of this X12ProtocolSettings.


        :return: The framing_settings of this X12ProtocolSettings.
        :rtype: X12FramingSettings
        """
        return self._framing_settings

    @framing_settings.setter
    def framing_settings(self, framing_settings):
        """Sets the framing_settings of this X12ProtocolSettings.


        :param framing_settings: The framing_settings of this X12ProtocolSettings.
        :type framing_settings: X12FramingSettings
        """
        if framing_settings is None:
            raise ValueError("Invalid value for `framing_settings`, must not be `None`")

        self._framing_settings = framing_settings

    @property
    def message_filter(self):
        """Gets the message_filter of this X12ProtocolSettings.


        :return: The message_filter of this X12ProtocolSettings.
        :rtype: X12MessageFilter
        """
        return self._message_filter

    @message_filter.setter
    def message_filter(self, message_filter):
        """Sets the message_filter of this X12ProtocolSettings.


        :param message_filter: The message_filter of this X12ProtocolSettings.
        :type message_filter: X12MessageFilter
        """
        if message_filter is None:
            raise ValueError("Invalid value for `message_filter`, must not be `None`")

        self._message_filter = message_filter

    @property
    def message_filter_list(self):
        """Gets the message_filter_list of this X12ProtocolSettings.

        The X12 message filter list.

        :return: The message_filter_list of this X12ProtocolSettings.
        :rtype: List[X12MessageIdentifier]
        """
        return self._message_filter_list

    @message_filter_list.setter
    def message_filter_list(self, message_filter_list):
        """Sets the message_filter_list of this X12ProtocolSettings.

        The X12 message filter list.

        :param message_filter_list: The message_filter_list of this X12ProtocolSettings.
        :type message_filter_list: List[X12MessageIdentifier]
        """

        self._message_filter_list = message_filter_list

    @property
    def processing_settings(self):
        """Gets the processing_settings of this X12ProtocolSettings.


        :return: The processing_settings of this X12ProtocolSettings.
        :rtype: X12ProcessingSettings
        """
        return self._processing_settings

    @processing_settings.setter
    def processing_settings(self, processing_settings):
        """Sets the processing_settings of this X12ProtocolSettings.


        :param processing_settings: The processing_settings of this X12ProtocolSettings.
        :type processing_settings: X12ProcessingSettings
        """
        if processing_settings is None:
            raise ValueError("Invalid value for `processing_settings`, must not be `None`")

        self._processing_settings = processing_settings

    @property
    def schema_references(self):
        """Gets the schema_references of this X12ProtocolSettings.

        The X12 schema references.

        :return: The schema_references of this X12ProtocolSettings.
        :rtype: List[X12SchemaReference]
        """
        return self._schema_references

    @schema_references.setter
    def schema_references(self, schema_references):
        """Sets the schema_references of this X12ProtocolSettings.

        The X12 schema references.

        :param schema_references: The schema_references of this X12ProtocolSettings.
        :type schema_references: List[X12SchemaReference]
        """
        if schema_references is None:
            raise ValueError("Invalid value for `schema_references`, must not be `None`")

        self._schema_references = schema_references

    @property
    def security_settings(self):
        """Gets the security_settings of this X12ProtocolSettings.


        :return: The security_settings of this X12ProtocolSettings.
        :rtype: X12SecuritySettings
        """
        return self._security_settings

    @security_settings.setter
    def security_settings(self, security_settings):
        """Sets the security_settings of this X12ProtocolSettings.


        :param security_settings: The security_settings of this X12ProtocolSettings.
        :type security_settings: X12SecuritySettings
        """
        if security_settings is None:
            raise ValueError("Invalid value for `security_settings`, must not be `None`")

        self._security_settings = security_settings

    @property
    def validation_overrides(self):
        """Gets the validation_overrides of this X12ProtocolSettings.

        The X12 validation override settings.

        :return: The validation_overrides of this X12ProtocolSettings.
        :rtype: List[X12ValidationOverride]
        """
        return self._validation_overrides

    @validation_overrides.setter
    def validation_overrides(self, validation_overrides):
        """Sets the validation_overrides of this X12ProtocolSettings.

        The X12 validation override settings.

        :param validation_overrides: The validation_overrides of this X12ProtocolSettings.
        :type validation_overrides: List[X12ValidationOverride]
        """

        self._validation_overrides = validation_overrides

    @property
    def validation_settings(self):
        """Gets the validation_settings of this X12ProtocolSettings.


        :return: The validation_settings of this X12ProtocolSettings.
        :rtype: X12ValidationSettings
        """
        return self._validation_settings

    @validation_settings.setter
    def validation_settings(self, validation_settings):
        """Sets the validation_settings of this X12ProtocolSettings.


        :param validation_settings: The validation_settings of this X12ProtocolSettings.
        :type validation_settings: X12ValidationSettings
        """
        if validation_settings is None:
            raise ValueError("Invalid value for `validation_settings`, must not be `None`")

        self._validation_settings = validation_settings

    @property
    def x12_delimiter_overrides(self):
        """Gets the x12_delimiter_overrides of this X12ProtocolSettings.

        The X12 delimiter override settings.

        :return: The x12_delimiter_overrides of this X12ProtocolSettings.
        :rtype: List[X12DelimiterOverrides]
        """
        return self._x12_delimiter_overrides

    @x12_delimiter_overrides.setter
    def x12_delimiter_overrides(self, x12_delimiter_overrides):
        """Sets the x12_delimiter_overrides of this X12ProtocolSettings.

        The X12 delimiter override settings.

        :param x12_delimiter_overrides: The x12_delimiter_overrides of this X12ProtocolSettings.
        :type x12_delimiter_overrides: List[X12DelimiterOverrides]
        """

        self._x12_delimiter_overrides = x12_delimiter_overrides
