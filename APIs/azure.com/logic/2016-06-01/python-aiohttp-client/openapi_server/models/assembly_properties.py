# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.content_link import ContentLink
from openapi_server import util


class AssemblyProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assembly_culture: str=None, assembly_name: str=None, assembly_public_key_token: str=None, assembly_version: str=None, content: object=None, content_link: ContentLink=None, content_type: str=None, changed_time: datetime=None, created_time: datetime=None, metadata: object=None):
        """AssemblyProperties - a model defined in OpenAPI

        :param assembly_culture: The assembly_culture of this AssemblyProperties.
        :param assembly_name: The assembly_name of this AssemblyProperties.
        :param assembly_public_key_token: The assembly_public_key_token of this AssemblyProperties.
        :param assembly_version: The assembly_version of this AssemblyProperties.
        :param content: The content of this AssemblyProperties.
        :param content_link: The content_link of this AssemblyProperties.
        :param content_type: The content_type of this AssemblyProperties.
        :param changed_time: The changed_time of this AssemblyProperties.
        :param created_time: The created_time of this AssemblyProperties.
        :param metadata: The metadata of this AssemblyProperties.
        """
        self.openapi_types = {
            'assembly_culture': str,
            'assembly_name': str,
            'assembly_public_key_token': str,
            'assembly_version': str,
            'content': object,
            'content_link': ContentLink,
            'content_type': str,
            'changed_time': datetime,
            'created_time': datetime,
            'metadata': object
        }

        self.attribute_map = {
            'assembly_culture': 'assemblyCulture',
            'assembly_name': 'assemblyName',
            'assembly_public_key_token': 'assemblyPublicKeyToken',
            'assembly_version': 'assemblyVersion',
            'content': 'content',
            'content_link': 'contentLink',
            'content_type': 'contentType',
            'changed_time': 'changedTime',
            'created_time': 'createdTime',
            'metadata': 'metadata'
        }

        self._assembly_culture = assembly_culture
        self._assembly_name = assembly_name
        self._assembly_public_key_token = assembly_public_key_token
        self._assembly_version = assembly_version
        self._content = content
        self._content_link = content_link
        self._content_type = content_type
        self._changed_time = changed_time
        self._created_time = created_time
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssemblyProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssemblyProperties of this AssemblyProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assembly_culture(self):
        """Gets the assembly_culture of this AssemblyProperties.

        The assembly culture.

        :return: The assembly_culture of this AssemblyProperties.
        :rtype: str
        """
        return self._assembly_culture

    @assembly_culture.setter
    def assembly_culture(self, assembly_culture):
        """Sets the assembly_culture of this AssemblyProperties.

        The assembly culture.

        :param assembly_culture: The assembly_culture of this AssemblyProperties.
        :type assembly_culture: str
        """

        self._assembly_culture = assembly_culture

    @property
    def assembly_name(self):
        """Gets the assembly_name of this AssemblyProperties.

        The assembly name.

        :return: The assembly_name of this AssemblyProperties.
        :rtype: str
        """
        return self._assembly_name

    @assembly_name.setter
    def assembly_name(self, assembly_name):
        """Sets the assembly_name of this AssemblyProperties.

        The assembly name.

        :param assembly_name: The assembly_name of this AssemblyProperties.
        :type assembly_name: str
        """
        if assembly_name is None:
            raise ValueError("Invalid value for `assembly_name`, must not be `None`")

        self._assembly_name = assembly_name

    @property
    def assembly_public_key_token(self):
        """Gets the assembly_public_key_token of this AssemblyProperties.

        The assembly public key token.

        :return: The assembly_public_key_token of this AssemblyProperties.
        :rtype: str
        """
        return self._assembly_public_key_token

    @assembly_public_key_token.setter
    def assembly_public_key_token(self, assembly_public_key_token):
        """Sets the assembly_public_key_token of this AssemblyProperties.

        The assembly public key token.

        :param assembly_public_key_token: The assembly_public_key_token of this AssemblyProperties.
        :type assembly_public_key_token: str
        """

        self._assembly_public_key_token = assembly_public_key_token

    @property
    def assembly_version(self):
        """Gets the assembly_version of this AssemblyProperties.

        The assembly version.

        :return: The assembly_version of this AssemblyProperties.
        :rtype: str
        """
        return self._assembly_version

    @assembly_version.setter
    def assembly_version(self, assembly_version):
        """Sets the assembly_version of this AssemblyProperties.

        The assembly version.

        :param assembly_version: The assembly_version of this AssemblyProperties.
        :type assembly_version: str
        """

        self._assembly_version = assembly_version

    @property
    def content(self):
        """Gets the content of this AssemblyProperties.


        :return: The content of this AssemblyProperties.
        :rtype: object
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this AssemblyProperties.


        :param content: The content of this AssemblyProperties.
        :type content: object
        """

        self._content = content

    @property
    def content_link(self):
        """Gets the content_link of this AssemblyProperties.


        :return: The content_link of this AssemblyProperties.
        :rtype: ContentLink
        """
        return self._content_link

    @content_link.setter
    def content_link(self, content_link):
        """Sets the content_link of this AssemblyProperties.


        :param content_link: The content_link of this AssemblyProperties.
        :type content_link: ContentLink
        """

        self._content_link = content_link

    @property
    def content_type(self):
        """Gets the content_type of this AssemblyProperties.

        The content type.

        :return: The content_type of this AssemblyProperties.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AssemblyProperties.

        The content type.

        :param content_type: The content_type of this AssemblyProperties.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def changed_time(self):
        """Gets the changed_time of this AssemblyProperties.

        The artifact changed time.

        :return: The changed_time of this AssemblyProperties.
        :rtype: datetime
        """
        return self._changed_time

    @changed_time.setter
    def changed_time(self, changed_time):
        """Sets the changed_time of this AssemblyProperties.

        The artifact changed time.

        :param changed_time: The changed_time of this AssemblyProperties.
        :type changed_time: datetime
        """

        self._changed_time = changed_time

    @property
    def created_time(self):
        """Gets the created_time of this AssemblyProperties.

        The artifact creation time.

        :return: The created_time of this AssemblyProperties.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this AssemblyProperties.

        The artifact creation time.

        :param created_time: The created_time of this AssemblyProperties.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def metadata(self):
        """Gets the metadata of this AssemblyProperties.


        :return: The metadata of this AssemblyProperties.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this AssemblyProperties.


        :param metadata: The metadata of this AssemblyProperties.
        :type metadata: object
        """

        self._metadata = metadata
