# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.business_identity import BusinessIdentity
from openapi_server.models.edifact_protocol_settings import EdifactProtocolSettings
from openapi_server import util


class EdifactOneWayAgreement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, protocol_settings: EdifactProtocolSettings=None, receiver_business_identity: BusinessIdentity=None, sender_business_identity: BusinessIdentity=None):
        """EdifactOneWayAgreement - a model defined in OpenAPI

        :param protocol_settings: The protocol_settings of this EdifactOneWayAgreement.
        :param receiver_business_identity: The receiver_business_identity of this EdifactOneWayAgreement.
        :param sender_business_identity: The sender_business_identity of this EdifactOneWayAgreement.
        """
        self.openapi_types = {
            'protocol_settings': EdifactProtocolSettings,
            'receiver_business_identity': BusinessIdentity,
            'sender_business_identity': BusinessIdentity
        }

        self.attribute_map = {
            'protocol_settings': 'protocolSettings',
            'receiver_business_identity': 'receiverBusinessIdentity',
            'sender_business_identity': 'senderBusinessIdentity'
        }

        self._protocol_settings = protocol_settings
        self._receiver_business_identity = receiver_business_identity
        self._sender_business_identity = sender_business_identity

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EdifactOneWayAgreement':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EdifactOneWayAgreement of this EdifactOneWayAgreement.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def protocol_settings(self):
        """Gets the protocol_settings of this EdifactOneWayAgreement.


        :return: The protocol_settings of this EdifactOneWayAgreement.
        :rtype: EdifactProtocolSettings
        """
        return self._protocol_settings

    @protocol_settings.setter
    def protocol_settings(self, protocol_settings):
        """Sets the protocol_settings of this EdifactOneWayAgreement.


        :param protocol_settings: The protocol_settings of this EdifactOneWayAgreement.
        :type protocol_settings: EdifactProtocolSettings
        """
        if protocol_settings is None:
            raise ValueError("Invalid value for `protocol_settings`, must not be `None`")

        self._protocol_settings = protocol_settings

    @property
    def receiver_business_identity(self):
        """Gets the receiver_business_identity of this EdifactOneWayAgreement.


        :return: The receiver_business_identity of this EdifactOneWayAgreement.
        :rtype: BusinessIdentity
        """
        return self._receiver_business_identity

    @receiver_business_identity.setter
    def receiver_business_identity(self, receiver_business_identity):
        """Sets the receiver_business_identity of this EdifactOneWayAgreement.


        :param receiver_business_identity: The receiver_business_identity of this EdifactOneWayAgreement.
        :type receiver_business_identity: BusinessIdentity
        """
        if receiver_business_identity is None:
            raise ValueError("Invalid value for `receiver_business_identity`, must not be `None`")

        self._receiver_business_identity = receiver_business_identity

    @property
    def sender_business_identity(self):
        """Gets the sender_business_identity of this EdifactOneWayAgreement.


        :return: The sender_business_identity of this EdifactOneWayAgreement.
        :rtype: BusinessIdentity
        """
        return self._sender_business_identity

    @sender_business_identity.setter
    def sender_business_identity(self, sender_business_identity):
        """Sets the sender_business_identity of this EdifactOneWayAgreement.


        :param sender_business_identity: The sender_business_identity of this EdifactOneWayAgreement.
        :type sender_business_identity: BusinessIdentity
        """
        if sender_business_identity is None:
            raise ValueError("Invalid value for `sender_business_identity`, must not be `None`")

        self._sender_business_identity = sender_business_identity
