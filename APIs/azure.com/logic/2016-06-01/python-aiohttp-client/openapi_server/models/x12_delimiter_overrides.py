# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_terminator_suffix import SegmentTerminatorSuffix
from openapi_server import util


class X12DelimiterOverrides(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, component_separator: int=None, data_element_separator: int=None, message_id: str=None, protocol_version: str=None, replace_character: int=None, replace_separators_in_payload: bool=None, segment_terminator: int=None, segment_terminator_suffix: SegmentTerminatorSuffix=None, target_namespace: str=None):
        """X12DelimiterOverrides - a model defined in OpenAPI

        :param component_separator: The component_separator of this X12DelimiterOverrides.
        :param data_element_separator: The data_element_separator of this X12DelimiterOverrides.
        :param message_id: The message_id of this X12DelimiterOverrides.
        :param protocol_version: The protocol_version of this X12DelimiterOverrides.
        :param replace_character: The replace_character of this X12DelimiterOverrides.
        :param replace_separators_in_payload: The replace_separators_in_payload of this X12DelimiterOverrides.
        :param segment_terminator: The segment_terminator of this X12DelimiterOverrides.
        :param segment_terminator_suffix: The segment_terminator_suffix of this X12DelimiterOverrides.
        :param target_namespace: The target_namespace of this X12DelimiterOverrides.
        """
        self.openapi_types = {
            'component_separator': int,
            'data_element_separator': int,
            'message_id': str,
            'protocol_version': str,
            'replace_character': int,
            'replace_separators_in_payload': bool,
            'segment_terminator': int,
            'segment_terminator_suffix': SegmentTerminatorSuffix,
            'target_namespace': str
        }

        self.attribute_map = {
            'component_separator': 'componentSeparator',
            'data_element_separator': 'dataElementSeparator',
            'message_id': 'messageId',
            'protocol_version': 'protocolVersion',
            'replace_character': 'replaceCharacter',
            'replace_separators_in_payload': 'replaceSeparatorsInPayload',
            'segment_terminator': 'segmentTerminator',
            'segment_terminator_suffix': 'segmentTerminatorSuffix',
            'target_namespace': 'targetNamespace'
        }

        self._component_separator = component_separator
        self._data_element_separator = data_element_separator
        self._message_id = message_id
        self._protocol_version = protocol_version
        self._replace_character = replace_character
        self._replace_separators_in_payload = replace_separators_in_payload
        self._segment_terminator = segment_terminator
        self._segment_terminator_suffix = segment_terminator_suffix
        self._target_namespace = target_namespace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12DelimiterOverrides':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12DelimiterOverrides of this X12DelimiterOverrides.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def component_separator(self):
        """Gets the component_separator of this X12DelimiterOverrides.

        The component separator.

        :return: The component_separator of this X12DelimiterOverrides.
        :rtype: int
        """
        return self._component_separator

    @component_separator.setter
    def component_separator(self, component_separator):
        """Sets the component_separator of this X12DelimiterOverrides.

        The component separator.

        :param component_separator: The component_separator of this X12DelimiterOverrides.
        :type component_separator: int
        """
        if component_separator is None:
            raise ValueError("Invalid value for `component_separator`, must not be `None`")

        self._component_separator = component_separator

    @property
    def data_element_separator(self):
        """Gets the data_element_separator of this X12DelimiterOverrides.

        The data element separator.

        :return: The data_element_separator of this X12DelimiterOverrides.
        :rtype: int
        """
        return self._data_element_separator

    @data_element_separator.setter
    def data_element_separator(self, data_element_separator):
        """Sets the data_element_separator of this X12DelimiterOverrides.

        The data element separator.

        :param data_element_separator: The data_element_separator of this X12DelimiterOverrides.
        :type data_element_separator: int
        """
        if data_element_separator is None:
            raise ValueError("Invalid value for `data_element_separator`, must not be `None`")

        self._data_element_separator = data_element_separator

    @property
    def message_id(self):
        """Gets the message_id of this X12DelimiterOverrides.

        The message id.

        :return: The message_id of this X12DelimiterOverrides.
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this X12DelimiterOverrides.

        The message id.

        :param message_id: The message_id of this X12DelimiterOverrides.
        :type message_id: str
        """

        self._message_id = message_id

    @property
    def protocol_version(self):
        """Gets the protocol_version of this X12DelimiterOverrides.

        The protocol version.

        :return: The protocol_version of this X12DelimiterOverrides.
        :rtype: str
        """
        return self._protocol_version

    @protocol_version.setter
    def protocol_version(self, protocol_version):
        """Sets the protocol_version of this X12DelimiterOverrides.

        The protocol version.

        :param protocol_version: The protocol_version of this X12DelimiterOverrides.
        :type protocol_version: str
        """

        self._protocol_version = protocol_version

    @property
    def replace_character(self):
        """Gets the replace_character of this X12DelimiterOverrides.

        The replacement character.

        :return: The replace_character of this X12DelimiterOverrides.
        :rtype: int
        """
        return self._replace_character

    @replace_character.setter
    def replace_character(self, replace_character):
        """Sets the replace_character of this X12DelimiterOverrides.

        The replacement character.

        :param replace_character: The replace_character of this X12DelimiterOverrides.
        :type replace_character: int
        """
        if replace_character is None:
            raise ValueError("Invalid value for `replace_character`, must not be `None`")

        self._replace_character = replace_character

    @property
    def replace_separators_in_payload(self):
        """Gets the replace_separators_in_payload of this X12DelimiterOverrides.

        The value indicating whether to replace separators in payload.

        :return: The replace_separators_in_payload of this X12DelimiterOverrides.
        :rtype: bool
        """
        return self._replace_separators_in_payload

    @replace_separators_in_payload.setter
    def replace_separators_in_payload(self, replace_separators_in_payload):
        """Sets the replace_separators_in_payload of this X12DelimiterOverrides.

        The value indicating whether to replace separators in payload.

        :param replace_separators_in_payload: The replace_separators_in_payload of this X12DelimiterOverrides.
        :type replace_separators_in_payload: bool
        """
        if replace_separators_in_payload is None:
            raise ValueError("Invalid value for `replace_separators_in_payload`, must not be `None`")

        self._replace_separators_in_payload = replace_separators_in_payload

    @property
    def segment_terminator(self):
        """Gets the segment_terminator of this X12DelimiterOverrides.

        The segment terminator.

        :return: The segment_terminator of this X12DelimiterOverrides.
        :rtype: int
        """
        return self._segment_terminator

    @segment_terminator.setter
    def segment_terminator(self, segment_terminator):
        """Sets the segment_terminator of this X12DelimiterOverrides.

        The segment terminator.

        :param segment_terminator: The segment_terminator of this X12DelimiterOverrides.
        :type segment_terminator: int
        """
        if segment_terminator is None:
            raise ValueError("Invalid value for `segment_terminator`, must not be `None`")

        self._segment_terminator = segment_terminator

    @property
    def segment_terminator_suffix(self):
        """Gets the segment_terminator_suffix of this X12DelimiterOverrides.


        :return: The segment_terminator_suffix of this X12DelimiterOverrides.
        :rtype: SegmentTerminatorSuffix
        """
        return self._segment_terminator_suffix

    @segment_terminator_suffix.setter
    def segment_terminator_suffix(self, segment_terminator_suffix):
        """Sets the segment_terminator_suffix of this X12DelimiterOverrides.


        :param segment_terminator_suffix: The segment_terminator_suffix of this X12DelimiterOverrides.
        :type segment_terminator_suffix: SegmentTerminatorSuffix
        """
        if segment_terminator_suffix is None:
            raise ValueError("Invalid value for `segment_terminator_suffix`, must not be `None`")

        self._segment_terminator_suffix = segment_terminator_suffix

    @property
    def target_namespace(self):
        """Gets the target_namespace of this X12DelimiterOverrides.

        The target namespace on which this delimiter settings has to be applied.

        :return: The target_namespace of this X12DelimiterOverrides.
        :rtype: str
        """
        return self._target_namespace

    @target_namespace.setter
    def target_namespace(self, target_namespace):
        """Sets the target_namespace of this X12DelimiterOverrides.

        The target namespace on which this delimiter settings has to be applied.

        :param target_namespace: The target_namespace of this X12DelimiterOverrides.
        :type target_namespace: str
        """

        self._target_namespace = target_namespace
