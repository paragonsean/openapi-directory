# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.rosetta_net_action_type import RosettaNetActionType
from openapi_server.models.rosetta_net_pip_confidentiality_scope import RosettaNetPipConfidentialityScope
from openapi_server.models.rosetta_net_response_type import RosettaNetResponseType
from openapi_server import util


class RosettaNetPipActivityBehavior(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_type: RosettaNetActionType=None, is_authorization_required: bool=None, is_secured_transport_required: bool=None, non_repudiation_of_origin_and_content: bool=None, persistent_confidentiality_scope: RosettaNetPipConfidentialityScope=None, response_type: RosettaNetResponseType=None, retry_count: int=None, time_to_perform_in_seconds: int=None):
        """RosettaNetPipActivityBehavior - a model defined in OpenAPI

        :param action_type: The action_type of this RosettaNetPipActivityBehavior.
        :param is_authorization_required: The is_authorization_required of this RosettaNetPipActivityBehavior.
        :param is_secured_transport_required: The is_secured_transport_required of this RosettaNetPipActivityBehavior.
        :param non_repudiation_of_origin_and_content: The non_repudiation_of_origin_and_content of this RosettaNetPipActivityBehavior.
        :param persistent_confidentiality_scope: The persistent_confidentiality_scope of this RosettaNetPipActivityBehavior.
        :param response_type: The response_type of this RosettaNetPipActivityBehavior.
        :param retry_count: The retry_count of this RosettaNetPipActivityBehavior.
        :param time_to_perform_in_seconds: The time_to_perform_in_seconds of this RosettaNetPipActivityBehavior.
        """
        self.openapi_types = {
            'action_type': RosettaNetActionType,
            'is_authorization_required': bool,
            'is_secured_transport_required': bool,
            'non_repudiation_of_origin_and_content': bool,
            'persistent_confidentiality_scope': RosettaNetPipConfidentialityScope,
            'response_type': RosettaNetResponseType,
            'retry_count': int,
            'time_to_perform_in_seconds': int
        }

        self.attribute_map = {
            'action_type': 'actionType',
            'is_authorization_required': 'isAuthorizationRequired',
            'is_secured_transport_required': 'isSecuredTransportRequired',
            'non_repudiation_of_origin_and_content': 'nonRepudiationOfOriginAndContent',
            'persistent_confidentiality_scope': 'persistentConfidentialityScope',
            'response_type': 'responseType',
            'retry_count': 'retryCount',
            'time_to_perform_in_seconds': 'timeToPerformInSeconds'
        }

        self._action_type = action_type
        self._is_authorization_required = is_authorization_required
        self._is_secured_transport_required = is_secured_transport_required
        self._non_repudiation_of_origin_and_content = non_repudiation_of_origin_and_content
        self._persistent_confidentiality_scope = persistent_confidentiality_scope
        self._response_type = response_type
        self._retry_count = retry_count
        self._time_to_perform_in_seconds = time_to_perform_in_seconds

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RosettaNetPipActivityBehavior':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RosettaNetPipActivityBehavior of this RosettaNetPipActivityBehavior.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_type(self):
        """Gets the action_type of this RosettaNetPipActivityBehavior.


        :return: The action_type of this RosettaNetPipActivityBehavior.
        :rtype: RosettaNetActionType
        """
        return self._action_type

    @action_type.setter
    def action_type(self, action_type):
        """Sets the action_type of this RosettaNetPipActivityBehavior.


        :param action_type: The action_type of this RosettaNetPipActivityBehavior.
        :type action_type: RosettaNetActionType
        """
        if action_type is None:
            raise ValueError("Invalid value for `action_type`, must not be `None`")

        self._action_type = action_type

    @property
    def is_authorization_required(self):
        """Gets the is_authorization_required of this RosettaNetPipActivityBehavior.

        The value indicating whether authorization is required.

        :return: The is_authorization_required of this RosettaNetPipActivityBehavior.
        :rtype: bool
        """
        return self._is_authorization_required

    @is_authorization_required.setter
    def is_authorization_required(self, is_authorization_required):
        """Sets the is_authorization_required of this RosettaNetPipActivityBehavior.

        The value indicating whether authorization is required.

        :param is_authorization_required: The is_authorization_required of this RosettaNetPipActivityBehavior.
        :type is_authorization_required: bool
        """
        if is_authorization_required is None:
            raise ValueError("Invalid value for `is_authorization_required`, must not be `None`")

        self._is_authorization_required = is_authorization_required

    @property
    def is_secured_transport_required(self):
        """Gets the is_secured_transport_required of this RosettaNetPipActivityBehavior.

        The value indicating whether secured transport is required.

        :return: The is_secured_transport_required of this RosettaNetPipActivityBehavior.
        :rtype: bool
        """
        return self._is_secured_transport_required

    @is_secured_transport_required.setter
    def is_secured_transport_required(self, is_secured_transport_required):
        """Sets the is_secured_transport_required of this RosettaNetPipActivityBehavior.

        The value indicating whether secured transport is required.

        :param is_secured_transport_required: The is_secured_transport_required of this RosettaNetPipActivityBehavior.
        :type is_secured_transport_required: bool
        """
        if is_secured_transport_required is None:
            raise ValueError("Invalid value for `is_secured_transport_required`, must not be `None`")

        self._is_secured_transport_required = is_secured_transport_required

    @property
    def non_repudiation_of_origin_and_content(self):
        """Gets the non_repudiation_of_origin_and_content of this RosettaNetPipActivityBehavior.

        The value indicating whether non-repudiation is for origin and content.

        :return: The non_repudiation_of_origin_and_content of this RosettaNetPipActivityBehavior.
        :rtype: bool
        """
        return self._non_repudiation_of_origin_and_content

    @non_repudiation_of_origin_and_content.setter
    def non_repudiation_of_origin_and_content(self, non_repudiation_of_origin_and_content):
        """Sets the non_repudiation_of_origin_and_content of this RosettaNetPipActivityBehavior.

        The value indicating whether non-repudiation is for origin and content.

        :param non_repudiation_of_origin_and_content: The non_repudiation_of_origin_and_content of this RosettaNetPipActivityBehavior.
        :type non_repudiation_of_origin_and_content: bool
        """
        if non_repudiation_of_origin_and_content is None:
            raise ValueError("Invalid value for `non_repudiation_of_origin_and_content`, must not be `None`")

        self._non_repudiation_of_origin_and_content = non_repudiation_of_origin_and_content

    @property
    def persistent_confidentiality_scope(self):
        """Gets the persistent_confidentiality_scope of this RosettaNetPipActivityBehavior.


        :return: The persistent_confidentiality_scope of this RosettaNetPipActivityBehavior.
        :rtype: RosettaNetPipConfidentialityScope
        """
        return self._persistent_confidentiality_scope

    @persistent_confidentiality_scope.setter
    def persistent_confidentiality_scope(self, persistent_confidentiality_scope):
        """Sets the persistent_confidentiality_scope of this RosettaNetPipActivityBehavior.


        :param persistent_confidentiality_scope: The persistent_confidentiality_scope of this RosettaNetPipActivityBehavior.
        :type persistent_confidentiality_scope: RosettaNetPipConfidentialityScope
        """
        if persistent_confidentiality_scope is None:
            raise ValueError("Invalid value for `persistent_confidentiality_scope`, must not be `None`")

        self._persistent_confidentiality_scope = persistent_confidentiality_scope

    @property
    def response_type(self):
        """Gets the response_type of this RosettaNetPipActivityBehavior.


        :return: The response_type of this RosettaNetPipActivityBehavior.
        :rtype: RosettaNetResponseType
        """
        return self._response_type

    @response_type.setter
    def response_type(self, response_type):
        """Sets the response_type of this RosettaNetPipActivityBehavior.


        :param response_type: The response_type of this RosettaNetPipActivityBehavior.
        :type response_type: RosettaNetResponseType
        """
        if response_type is None:
            raise ValueError("Invalid value for `response_type`, must not be `None`")

        self._response_type = response_type

    @property
    def retry_count(self):
        """Gets the retry_count of this RosettaNetPipActivityBehavior.

        The value indicating retry count.

        :return: The retry_count of this RosettaNetPipActivityBehavior.
        :rtype: int
        """
        return self._retry_count

    @retry_count.setter
    def retry_count(self, retry_count):
        """Sets the retry_count of this RosettaNetPipActivityBehavior.

        The value indicating retry count.

        :param retry_count: The retry_count of this RosettaNetPipActivityBehavior.
        :type retry_count: int
        """
        if retry_count is None:
            raise ValueError("Invalid value for `retry_count`, must not be `None`")

        self._retry_count = retry_count

    @property
    def time_to_perform_in_seconds(self):
        """Gets the time_to_perform_in_seconds of this RosettaNetPipActivityBehavior.

        The time to perform in seconds.

        :return: The time_to_perform_in_seconds of this RosettaNetPipActivityBehavior.
        :rtype: int
        """
        return self._time_to_perform_in_seconds

    @time_to_perform_in_seconds.setter
    def time_to_perform_in_seconds(self, time_to_perform_in_seconds):
        """Sets the time_to_perform_in_seconds of this RosettaNetPipActivityBehavior.

        The time to perform in seconds.

        :param time_to_perform_in_seconds: The time_to_perform_in_seconds of this RosettaNetPipActivityBehavior.
        :type time_to_perform_in_seconds: int
        """
        if time_to_perform_in_seconds is None:
            raise ValueError("Invalid value for `time_to_perform_in_seconds`, must not be `None`")

        self._time_to_perform_in_seconds = time_to_perform_in_seconds
