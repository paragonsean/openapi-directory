# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AS2EnvelopeSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, autogenerate_file_name: bool=None, file_name_template: str=None, message_content_type: str=None, suspend_message_on_file_name_generation_error: bool=None, transmit_file_name_in_mime_header: bool=None):
        """AS2EnvelopeSettings - a model defined in OpenAPI

        :param autogenerate_file_name: The autogenerate_file_name of this AS2EnvelopeSettings.
        :param file_name_template: The file_name_template of this AS2EnvelopeSettings.
        :param message_content_type: The message_content_type of this AS2EnvelopeSettings.
        :param suspend_message_on_file_name_generation_error: The suspend_message_on_file_name_generation_error of this AS2EnvelopeSettings.
        :param transmit_file_name_in_mime_header: The transmit_file_name_in_mime_header of this AS2EnvelopeSettings.
        """
        self.openapi_types = {
            'autogenerate_file_name': bool,
            'file_name_template': str,
            'message_content_type': str,
            'suspend_message_on_file_name_generation_error': bool,
            'transmit_file_name_in_mime_header': bool
        }

        self.attribute_map = {
            'autogenerate_file_name': 'autogenerateFileName',
            'file_name_template': 'fileNameTemplate',
            'message_content_type': 'messageContentType',
            'suspend_message_on_file_name_generation_error': 'suspendMessageOnFileNameGenerationError',
            'transmit_file_name_in_mime_header': 'transmitFileNameInMimeHeader'
        }

        self._autogenerate_file_name = autogenerate_file_name
        self._file_name_template = file_name_template
        self._message_content_type = message_content_type
        self._suspend_message_on_file_name_generation_error = suspend_message_on_file_name_generation_error
        self._transmit_file_name_in_mime_header = transmit_file_name_in_mime_header

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AS2EnvelopeSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AS2EnvelopeSettings of this AS2EnvelopeSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def autogenerate_file_name(self):
        """Gets the autogenerate_file_name of this AS2EnvelopeSettings.

        The value indicating whether to auto generate file name.

        :return: The autogenerate_file_name of this AS2EnvelopeSettings.
        :rtype: bool
        """
        return self._autogenerate_file_name

    @autogenerate_file_name.setter
    def autogenerate_file_name(self, autogenerate_file_name):
        """Sets the autogenerate_file_name of this AS2EnvelopeSettings.

        The value indicating whether to auto generate file name.

        :param autogenerate_file_name: The autogenerate_file_name of this AS2EnvelopeSettings.
        :type autogenerate_file_name: bool
        """
        if autogenerate_file_name is None:
            raise ValueError("Invalid value for `autogenerate_file_name`, must not be `None`")

        self._autogenerate_file_name = autogenerate_file_name

    @property
    def file_name_template(self):
        """Gets the file_name_template of this AS2EnvelopeSettings.

        The template for file name.

        :return: The file_name_template of this AS2EnvelopeSettings.
        :rtype: str
        """
        return self._file_name_template

    @file_name_template.setter
    def file_name_template(self, file_name_template):
        """Sets the file_name_template of this AS2EnvelopeSettings.

        The template for file name.

        :param file_name_template: The file_name_template of this AS2EnvelopeSettings.
        :type file_name_template: str
        """
        if file_name_template is None:
            raise ValueError("Invalid value for `file_name_template`, must not be `None`")

        self._file_name_template = file_name_template

    @property
    def message_content_type(self):
        """Gets the message_content_type of this AS2EnvelopeSettings.

        The message content type.

        :return: The message_content_type of this AS2EnvelopeSettings.
        :rtype: str
        """
        return self._message_content_type

    @message_content_type.setter
    def message_content_type(self, message_content_type):
        """Sets the message_content_type of this AS2EnvelopeSettings.

        The message content type.

        :param message_content_type: The message_content_type of this AS2EnvelopeSettings.
        :type message_content_type: str
        """
        if message_content_type is None:
            raise ValueError("Invalid value for `message_content_type`, must not be `None`")

        self._message_content_type = message_content_type

    @property
    def suspend_message_on_file_name_generation_error(self):
        """Gets the suspend_message_on_file_name_generation_error of this AS2EnvelopeSettings.

        The value indicating whether to suspend message on file name generation error.

        :return: The suspend_message_on_file_name_generation_error of this AS2EnvelopeSettings.
        :rtype: bool
        """
        return self._suspend_message_on_file_name_generation_error

    @suspend_message_on_file_name_generation_error.setter
    def suspend_message_on_file_name_generation_error(self, suspend_message_on_file_name_generation_error):
        """Sets the suspend_message_on_file_name_generation_error of this AS2EnvelopeSettings.

        The value indicating whether to suspend message on file name generation error.

        :param suspend_message_on_file_name_generation_error: The suspend_message_on_file_name_generation_error of this AS2EnvelopeSettings.
        :type suspend_message_on_file_name_generation_error: bool
        """
        if suspend_message_on_file_name_generation_error is None:
            raise ValueError("Invalid value for `suspend_message_on_file_name_generation_error`, must not be `None`")

        self._suspend_message_on_file_name_generation_error = suspend_message_on_file_name_generation_error

    @property
    def transmit_file_name_in_mime_header(self):
        """Gets the transmit_file_name_in_mime_header of this AS2EnvelopeSettings.

        The value indicating whether to transmit file name in mime header.

        :return: The transmit_file_name_in_mime_header of this AS2EnvelopeSettings.
        :rtype: bool
        """
        return self._transmit_file_name_in_mime_header

    @transmit_file_name_in_mime_header.setter
    def transmit_file_name_in_mime_header(self, transmit_file_name_in_mime_header):
        """Sets the transmit_file_name_in_mime_header of this AS2EnvelopeSettings.

        The value indicating whether to transmit file name in mime header.

        :param transmit_file_name_in_mime_header: The transmit_file_name_in_mime_header of this AS2EnvelopeSettings.
        :type transmit_file_name_in_mime_header: bool
        """
        if transmit_file_name_in_mime_header is None:
            raise ValueError("Invalid value for `transmit_file_name_in_mime_header`, must not be `None`")

        self._transmit_file_name_in_mime_header = transmit_file_name_in_mime_header
