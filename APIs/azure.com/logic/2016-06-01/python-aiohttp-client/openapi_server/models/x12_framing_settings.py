# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.segment_terminator_suffix import SegmentTerminatorSuffix
from openapi_server.models.x12_character_set import X12CharacterSet
from openapi_server import util


class X12FramingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, character_set: X12CharacterSet=None, component_separator: int=None, data_element_separator: int=None, replace_character: int=None, replace_separators_in_payload: bool=None, segment_terminator: int=None, segment_terminator_suffix: SegmentTerminatorSuffix=None):
        """X12FramingSettings - a model defined in OpenAPI

        :param character_set: The character_set of this X12FramingSettings.
        :param component_separator: The component_separator of this X12FramingSettings.
        :param data_element_separator: The data_element_separator of this X12FramingSettings.
        :param replace_character: The replace_character of this X12FramingSettings.
        :param replace_separators_in_payload: The replace_separators_in_payload of this X12FramingSettings.
        :param segment_terminator: The segment_terminator of this X12FramingSettings.
        :param segment_terminator_suffix: The segment_terminator_suffix of this X12FramingSettings.
        """
        self.openapi_types = {
            'character_set': X12CharacterSet,
            'component_separator': int,
            'data_element_separator': int,
            'replace_character': int,
            'replace_separators_in_payload': bool,
            'segment_terminator': int,
            'segment_terminator_suffix': SegmentTerminatorSuffix
        }

        self.attribute_map = {
            'character_set': 'characterSet',
            'component_separator': 'componentSeparator',
            'data_element_separator': 'dataElementSeparator',
            'replace_character': 'replaceCharacter',
            'replace_separators_in_payload': 'replaceSeparatorsInPayload',
            'segment_terminator': 'segmentTerminator',
            'segment_terminator_suffix': 'segmentTerminatorSuffix'
        }

        self._character_set = character_set
        self._component_separator = component_separator
        self._data_element_separator = data_element_separator
        self._replace_character = replace_character
        self._replace_separators_in_payload = replace_separators_in_payload
        self._segment_terminator = segment_terminator
        self._segment_terminator_suffix = segment_terminator_suffix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12FramingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12FramingSettings of this X12FramingSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def character_set(self):
        """Gets the character_set of this X12FramingSettings.


        :return: The character_set of this X12FramingSettings.
        :rtype: X12CharacterSet
        """
        return self._character_set

    @character_set.setter
    def character_set(self, character_set):
        """Sets the character_set of this X12FramingSettings.


        :param character_set: The character_set of this X12FramingSettings.
        :type character_set: X12CharacterSet
        """
        if character_set is None:
            raise ValueError("Invalid value for `character_set`, must not be `None`")

        self._character_set = character_set

    @property
    def component_separator(self):
        """Gets the component_separator of this X12FramingSettings.

        The component separator.

        :return: The component_separator of this X12FramingSettings.
        :rtype: int
        """
        return self._component_separator

    @component_separator.setter
    def component_separator(self, component_separator):
        """Sets the component_separator of this X12FramingSettings.

        The component separator.

        :param component_separator: The component_separator of this X12FramingSettings.
        :type component_separator: int
        """
        if component_separator is None:
            raise ValueError("Invalid value for `component_separator`, must not be `None`")

        self._component_separator = component_separator

    @property
    def data_element_separator(self):
        """Gets the data_element_separator of this X12FramingSettings.

        The data element separator.

        :return: The data_element_separator of this X12FramingSettings.
        :rtype: int
        """
        return self._data_element_separator

    @data_element_separator.setter
    def data_element_separator(self, data_element_separator):
        """Sets the data_element_separator of this X12FramingSettings.

        The data element separator.

        :param data_element_separator: The data_element_separator of this X12FramingSettings.
        :type data_element_separator: int
        """
        if data_element_separator is None:
            raise ValueError("Invalid value for `data_element_separator`, must not be `None`")

        self._data_element_separator = data_element_separator

    @property
    def replace_character(self):
        """Gets the replace_character of this X12FramingSettings.

        The replacement character.

        :return: The replace_character of this X12FramingSettings.
        :rtype: int
        """
        return self._replace_character

    @replace_character.setter
    def replace_character(self, replace_character):
        """Sets the replace_character of this X12FramingSettings.

        The replacement character.

        :param replace_character: The replace_character of this X12FramingSettings.
        :type replace_character: int
        """
        if replace_character is None:
            raise ValueError("Invalid value for `replace_character`, must not be `None`")

        self._replace_character = replace_character

    @property
    def replace_separators_in_payload(self):
        """Gets the replace_separators_in_payload of this X12FramingSettings.

        The value indicating whether to replace separators in payload.

        :return: The replace_separators_in_payload of this X12FramingSettings.
        :rtype: bool
        """
        return self._replace_separators_in_payload

    @replace_separators_in_payload.setter
    def replace_separators_in_payload(self, replace_separators_in_payload):
        """Sets the replace_separators_in_payload of this X12FramingSettings.

        The value indicating whether to replace separators in payload.

        :param replace_separators_in_payload: The replace_separators_in_payload of this X12FramingSettings.
        :type replace_separators_in_payload: bool
        """
        if replace_separators_in_payload is None:
            raise ValueError("Invalid value for `replace_separators_in_payload`, must not be `None`")

        self._replace_separators_in_payload = replace_separators_in_payload

    @property
    def segment_terminator(self):
        """Gets the segment_terminator of this X12FramingSettings.

        The segment terminator.

        :return: The segment_terminator of this X12FramingSettings.
        :rtype: int
        """
        return self._segment_terminator

    @segment_terminator.setter
    def segment_terminator(self, segment_terminator):
        """Sets the segment_terminator of this X12FramingSettings.

        The segment terminator.

        :param segment_terminator: The segment_terminator of this X12FramingSettings.
        :type segment_terminator: int
        """
        if segment_terminator is None:
            raise ValueError("Invalid value for `segment_terminator`, must not be `None`")

        self._segment_terminator = segment_terminator

    @property
    def segment_terminator_suffix(self):
        """Gets the segment_terminator_suffix of this X12FramingSettings.


        :return: The segment_terminator_suffix of this X12FramingSettings.
        :rtype: SegmentTerminatorSuffix
        """
        return self._segment_terminator_suffix

    @segment_terminator_suffix.setter
    def segment_terminator_suffix(self, segment_terminator_suffix):
        """Sets the segment_terminator_suffix of this X12FramingSettings.


        :param segment_terminator_suffix: The segment_terminator_suffix of this X12FramingSettings.
        :type segment_terminator_suffix: SegmentTerminatorSuffix
        """
        if segment_terminator_suffix is None:
            raise ValueError("Invalid value for `segment_terminator_suffix`, must not be `None`")

        self._segment_terminator_suffix = segment_terminator_suffix
