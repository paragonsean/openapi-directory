# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AS2SecuritySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_nrr_for_inbound_decoded_messages: bool=None, enable_nrr_for_inbound_encoded_messages: bool=None, enable_nrr_for_inbound_mdn: bool=None, enable_nrr_for_outbound_decoded_messages: bool=None, enable_nrr_for_outbound_encoded_messages: bool=None, enable_nrr_for_outbound_mdn: bool=None, encryption_certificate_name: str=None, override_group_signing_certificate: bool=None, sha2_algorithm_format: str=None, signing_certificate_name: str=None):
        """AS2SecuritySettings - a model defined in OpenAPI

        :param enable_nrr_for_inbound_decoded_messages: The enable_nrr_for_inbound_decoded_messages of this AS2SecuritySettings.
        :param enable_nrr_for_inbound_encoded_messages: The enable_nrr_for_inbound_encoded_messages of this AS2SecuritySettings.
        :param enable_nrr_for_inbound_mdn: The enable_nrr_for_inbound_mdn of this AS2SecuritySettings.
        :param enable_nrr_for_outbound_decoded_messages: The enable_nrr_for_outbound_decoded_messages of this AS2SecuritySettings.
        :param enable_nrr_for_outbound_encoded_messages: The enable_nrr_for_outbound_encoded_messages of this AS2SecuritySettings.
        :param enable_nrr_for_outbound_mdn: The enable_nrr_for_outbound_mdn of this AS2SecuritySettings.
        :param encryption_certificate_name: The encryption_certificate_name of this AS2SecuritySettings.
        :param override_group_signing_certificate: The override_group_signing_certificate of this AS2SecuritySettings.
        :param sha2_algorithm_format: The sha2_algorithm_format of this AS2SecuritySettings.
        :param signing_certificate_name: The signing_certificate_name of this AS2SecuritySettings.
        """
        self.openapi_types = {
            'enable_nrr_for_inbound_decoded_messages': bool,
            'enable_nrr_for_inbound_encoded_messages': bool,
            'enable_nrr_for_inbound_mdn': bool,
            'enable_nrr_for_outbound_decoded_messages': bool,
            'enable_nrr_for_outbound_encoded_messages': bool,
            'enable_nrr_for_outbound_mdn': bool,
            'encryption_certificate_name': str,
            'override_group_signing_certificate': bool,
            'sha2_algorithm_format': str,
            'signing_certificate_name': str
        }

        self.attribute_map = {
            'enable_nrr_for_inbound_decoded_messages': 'enableNrrForInboundDecodedMessages',
            'enable_nrr_for_inbound_encoded_messages': 'enableNrrForInboundEncodedMessages',
            'enable_nrr_for_inbound_mdn': 'enableNrrForInboundMdn',
            'enable_nrr_for_outbound_decoded_messages': 'enableNrrForOutboundDecodedMessages',
            'enable_nrr_for_outbound_encoded_messages': 'enableNrrForOutboundEncodedMessages',
            'enable_nrr_for_outbound_mdn': 'enableNrrForOutboundMdn',
            'encryption_certificate_name': 'encryptionCertificateName',
            'override_group_signing_certificate': 'overrideGroupSigningCertificate',
            'sha2_algorithm_format': 'sha2AlgorithmFormat',
            'signing_certificate_name': 'signingCertificateName'
        }

        self._enable_nrr_for_inbound_decoded_messages = enable_nrr_for_inbound_decoded_messages
        self._enable_nrr_for_inbound_encoded_messages = enable_nrr_for_inbound_encoded_messages
        self._enable_nrr_for_inbound_mdn = enable_nrr_for_inbound_mdn
        self._enable_nrr_for_outbound_decoded_messages = enable_nrr_for_outbound_decoded_messages
        self._enable_nrr_for_outbound_encoded_messages = enable_nrr_for_outbound_encoded_messages
        self._enable_nrr_for_outbound_mdn = enable_nrr_for_outbound_mdn
        self._encryption_certificate_name = encryption_certificate_name
        self._override_group_signing_certificate = override_group_signing_certificate
        self._sha2_algorithm_format = sha2_algorithm_format
        self._signing_certificate_name = signing_certificate_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AS2SecuritySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AS2SecuritySettings of this AS2SecuritySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_nrr_for_inbound_decoded_messages(self):
        """Gets the enable_nrr_for_inbound_decoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for inbound decoded messages.

        :return: The enable_nrr_for_inbound_decoded_messages of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._enable_nrr_for_inbound_decoded_messages

    @enable_nrr_for_inbound_decoded_messages.setter
    def enable_nrr_for_inbound_decoded_messages(self, enable_nrr_for_inbound_decoded_messages):
        """Sets the enable_nrr_for_inbound_decoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for inbound decoded messages.

        :param enable_nrr_for_inbound_decoded_messages: The enable_nrr_for_inbound_decoded_messages of this AS2SecuritySettings.
        :type enable_nrr_for_inbound_decoded_messages: bool
        """
        if enable_nrr_for_inbound_decoded_messages is None:
            raise ValueError("Invalid value for `enable_nrr_for_inbound_decoded_messages`, must not be `None`")

        self._enable_nrr_for_inbound_decoded_messages = enable_nrr_for_inbound_decoded_messages

    @property
    def enable_nrr_for_inbound_encoded_messages(self):
        """Gets the enable_nrr_for_inbound_encoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for inbound encoded messages.

        :return: The enable_nrr_for_inbound_encoded_messages of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._enable_nrr_for_inbound_encoded_messages

    @enable_nrr_for_inbound_encoded_messages.setter
    def enable_nrr_for_inbound_encoded_messages(self, enable_nrr_for_inbound_encoded_messages):
        """Sets the enable_nrr_for_inbound_encoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for inbound encoded messages.

        :param enable_nrr_for_inbound_encoded_messages: The enable_nrr_for_inbound_encoded_messages of this AS2SecuritySettings.
        :type enable_nrr_for_inbound_encoded_messages: bool
        """
        if enable_nrr_for_inbound_encoded_messages is None:
            raise ValueError("Invalid value for `enable_nrr_for_inbound_encoded_messages`, must not be `None`")

        self._enable_nrr_for_inbound_encoded_messages = enable_nrr_for_inbound_encoded_messages

    @property
    def enable_nrr_for_inbound_mdn(self):
        """Gets the enable_nrr_for_inbound_mdn of this AS2SecuritySettings.

        The value indicating whether to enable NRR for inbound MDN.

        :return: The enable_nrr_for_inbound_mdn of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._enable_nrr_for_inbound_mdn

    @enable_nrr_for_inbound_mdn.setter
    def enable_nrr_for_inbound_mdn(self, enable_nrr_for_inbound_mdn):
        """Sets the enable_nrr_for_inbound_mdn of this AS2SecuritySettings.

        The value indicating whether to enable NRR for inbound MDN.

        :param enable_nrr_for_inbound_mdn: The enable_nrr_for_inbound_mdn of this AS2SecuritySettings.
        :type enable_nrr_for_inbound_mdn: bool
        """
        if enable_nrr_for_inbound_mdn is None:
            raise ValueError("Invalid value for `enable_nrr_for_inbound_mdn`, must not be `None`")

        self._enable_nrr_for_inbound_mdn = enable_nrr_for_inbound_mdn

    @property
    def enable_nrr_for_outbound_decoded_messages(self):
        """Gets the enable_nrr_for_outbound_decoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for outbound decoded messages.

        :return: The enable_nrr_for_outbound_decoded_messages of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._enable_nrr_for_outbound_decoded_messages

    @enable_nrr_for_outbound_decoded_messages.setter
    def enable_nrr_for_outbound_decoded_messages(self, enable_nrr_for_outbound_decoded_messages):
        """Sets the enable_nrr_for_outbound_decoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for outbound decoded messages.

        :param enable_nrr_for_outbound_decoded_messages: The enable_nrr_for_outbound_decoded_messages of this AS2SecuritySettings.
        :type enable_nrr_for_outbound_decoded_messages: bool
        """
        if enable_nrr_for_outbound_decoded_messages is None:
            raise ValueError("Invalid value for `enable_nrr_for_outbound_decoded_messages`, must not be `None`")

        self._enable_nrr_for_outbound_decoded_messages = enable_nrr_for_outbound_decoded_messages

    @property
    def enable_nrr_for_outbound_encoded_messages(self):
        """Gets the enable_nrr_for_outbound_encoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for outbound encoded messages.

        :return: The enable_nrr_for_outbound_encoded_messages of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._enable_nrr_for_outbound_encoded_messages

    @enable_nrr_for_outbound_encoded_messages.setter
    def enable_nrr_for_outbound_encoded_messages(self, enable_nrr_for_outbound_encoded_messages):
        """Sets the enable_nrr_for_outbound_encoded_messages of this AS2SecuritySettings.

        The value indicating whether to enable NRR for outbound encoded messages.

        :param enable_nrr_for_outbound_encoded_messages: The enable_nrr_for_outbound_encoded_messages of this AS2SecuritySettings.
        :type enable_nrr_for_outbound_encoded_messages: bool
        """
        if enable_nrr_for_outbound_encoded_messages is None:
            raise ValueError("Invalid value for `enable_nrr_for_outbound_encoded_messages`, must not be `None`")

        self._enable_nrr_for_outbound_encoded_messages = enable_nrr_for_outbound_encoded_messages

    @property
    def enable_nrr_for_outbound_mdn(self):
        """Gets the enable_nrr_for_outbound_mdn of this AS2SecuritySettings.

        The value indicating whether to enable NRR for outbound MDN.

        :return: The enable_nrr_for_outbound_mdn of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._enable_nrr_for_outbound_mdn

    @enable_nrr_for_outbound_mdn.setter
    def enable_nrr_for_outbound_mdn(self, enable_nrr_for_outbound_mdn):
        """Sets the enable_nrr_for_outbound_mdn of this AS2SecuritySettings.

        The value indicating whether to enable NRR for outbound MDN.

        :param enable_nrr_for_outbound_mdn: The enable_nrr_for_outbound_mdn of this AS2SecuritySettings.
        :type enable_nrr_for_outbound_mdn: bool
        """
        if enable_nrr_for_outbound_mdn is None:
            raise ValueError("Invalid value for `enable_nrr_for_outbound_mdn`, must not be `None`")

        self._enable_nrr_for_outbound_mdn = enable_nrr_for_outbound_mdn

    @property
    def encryption_certificate_name(self):
        """Gets the encryption_certificate_name of this AS2SecuritySettings.

        The name of the encryption certificate.

        :return: The encryption_certificate_name of this AS2SecuritySettings.
        :rtype: str
        """
        return self._encryption_certificate_name

    @encryption_certificate_name.setter
    def encryption_certificate_name(self, encryption_certificate_name):
        """Sets the encryption_certificate_name of this AS2SecuritySettings.

        The name of the encryption certificate.

        :param encryption_certificate_name: The encryption_certificate_name of this AS2SecuritySettings.
        :type encryption_certificate_name: str
        """

        self._encryption_certificate_name = encryption_certificate_name

    @property
    def override_group_signing_certificate(self):
        """Gets the override_group_signing_certificate of this AS2SecuritySettings.

        The value indicating whether to send or request a MDN.

        :return: The override_group_signing_certificate of this AS2SecuritySettings.
        :rtype: bool
        """
        return self._override_group_signing_certificate

    @override_group_signing_certificate.setter
    def override_group_signing_certificate(self, override_group_signing_certificate):
        """Sets the override_group_signing_certificate of this AS2SecuritySettings.

        The value indicating whether to send or request a MDN.

        :param override_group_signing_certificate: The override_group_signing_certificate of this AS2SecuritySettings.
        :type override_group_signing_certificate: bool
        """
        if override_group_signing_certificate is None:
            raise ValueError("Invalid value for `override_group_signing_certificate`, must not be `None`")

        self._override_group_signing_certificate = override_group_signing_certificate

    @property
    def sha2_algorithm_format(self):
        """Gets the sha2_algorithm_format of this AS2SecuritySettings.

        The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.

        :return: The sha2_algorithm_format of this AS2SecuritySettings.
        :rtype: str
        """
        return self._sha2_algorithm_format

    @sha2_algorithm_format.setter
    def sha2_algorithm_format(self, sha2_algorithm_format):
        """Sets the sha2_algorithm_format of this AS2SecuritySettings.

        The Sha2 algorithm format. Valid values are Sha2, ShaHashSize, ShaHyphenHashSize, Sha2UnderscoreHashSize.

        :param sha2_algorithm_format: The sha2_algorithm_format of this AS2SecuritySettings.
        :type sha2_algorithm_format: str
        """

        self._sha2_algorithm_format = sha2_algorithm_format

    @property
    def signing_certificate_name(self):
        """Gets the signing_certificate_name of this AS2SecuritySettings.

        The name of the signing certificate.

        :return: The signing_certificate_name of this AS2SecuritySettings.
        :rtype: str
        """
        return self._signing_certificate_name

    @signing_certificate_name.setter
    def signing_certificate_name(self, signing_certificate_name):
        """Sets the signing_certificate_name of this AS2SecuritySettings.

        The name of the signing certificate.

        :param signing_certificate_name: The signing_certificate_name of this AS2SecuritySettings.
        :type signing_certificate_name: str
        """

        self._signing_certificate_name = signing_certificate_name
