# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_vault_reference import KeyVaultReference
from openapi_server import util


class ListKeyVaultKeysDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key_vault: KeyVaultReference=None, skip_token: str=None):
        """ListKeyVaultKeysDefinition - a model defined in OpenAPI

        :param key_vault: The key_vault of this ListKeyVaultKeysDefinition.
        :param skip_token: The skip_token of this ListKeyVaultKeysDefinition.
        """
        self.openapi_types = {
            'key_vault': KeyVaultReference,
            'skip_token': str
        }

        self.attribute_map = {
            'key_vault': 'keyVault',
            'skip_token': 'skipToken'
        }

        self._key_vault = key_vault
        self._skip_token = skip_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListKeyVaultKeysDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ListKeyVaultKeysDefinition of this ListKeyVaultKeysDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key_vault(self):
        """Gets the key_vault of this ListKeyVaultKeysDefinition.


        :return: The key_vault of this ListKeyVaultKeysDefinition.
        :rtype: KeyVaultReference
        """
        return self._key_vault

    @key_vault.setter
    def key_vault(self, key_vault):
        """Sets the key_vault of this ListKeyVaultKeysDefinition.


        :param key_vault: The key_vault of this ListKeyVaultKeysDefinition.
        :type key_vault: KeyVaultReference
        """
        if key_vault is None:
            raise ValueError("Invalid value for `key_vault`, must not be `None`")

        self._key_vault = key_vault

    @property
    def skip_token(self):
        """Gets the skip_token of this ListKeyVaultKeysDefinition.

        The skip token.

        :return: The skip_token of this ListKeyVaultKeysDefinition.
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this ListKeyVaultKeysDefinition.

        The skip token.

        :param skip_token: The skip_token of this ListKeyVaultKeysDefinition.
        :type skip_token: str
        """

        self._skip_token = skip_token
