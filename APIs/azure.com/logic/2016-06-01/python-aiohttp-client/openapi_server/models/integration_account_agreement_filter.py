# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.agreement_type import AgreementType
from openapi_server import util


class IntegrationAccountAgreementFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement_type: AgreementType=None):
        """IntegrationAccountAgreementFilter - a model defined in OpenAPI

        :param agreement_type: The agreement_type of this IntegrationAccountAgreementFilter.
        """
        self.openapi_types = {
            'agreement_type': AgreementType
        }

        self.attribute_map = {
            'agreement_type': 'agreementType'
        }

        self._agreement_type = agreement_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegrationAccountAgreementFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegrationAccountAgreementFilter of this IntegrationAccountAgreementFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement_type(self):
        """Gets the agreement_type of this IntegrationAccountAgreementFilter.


        :return: The agreement_type of this IntegrationAccountAgreementFilter.
        :rtype: AgreementType
        """
        return self._agreement_type

    @agreement_type.setter
    def agreement_type(self, agreement_type):
        """Sets the agreement_type of this IntegrationAccountAgreementFilter.


        :param agreement_type: The agreement_type of this IntegrationAccountAgreementFilter.
        :type agreement_type: AgreementType
        """
        if agreement_type is None:
            raise ValueError("Invalid value for `agreement_type`, must not be `None`")

        self._agreement_type = agreement_type
