# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AS2AcknowledgementConnectionSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ignore_certificate_name_mismatch: bool=None, keep_http_connection_alive: bool=None, support_http_status_code_continue: bool=None, unfold_http_headers: bool=None):
        """AS2AcknowledgementConnectionSettings - a model defined in OpenAPI

        :param ignore_certificate_name_mismatch: The ignore_certificate_name_mismatch of this AS2AcknowledgementConnectionSettings.
        :param keep_http_connection_alive: The keep_http_connection_alive of this AS2AcknowledgementConnectionSettings.
        :param support_http_status_code_continue: The support_http_status_code_continue of this AS2AcknowledgementConnectionSettings.
        :param unfold_http_headers: The unfold_http_headers of this AS2AcknowledgementConnectionSettings.
        """
        self.openapi_types = {
            'ignore_certificate_name_mismatch': bool,
            'keep_http_connection_alive': bool,
            'support_http_status_code_continue': bool,
            'unfold_http_headers': bool
        }

        self.attribute_map = {
            'ignore_certificate_name_mismatch': 'ignoreCertificateNameMismatch',
            'keep_http_connection_alive': 'keepHttpConnectionAlive',
            'support_http_status_code_continue': 'supportHttpStatusCodeContinue',
            'unfold_http_headers': 'unfoldHttpHeaders'
        }

        self._ignore_certificate_name_mismatch = ignore_certificate_name_mismatch
        self._keep_http_connection_alive = keep_http_connection_alive
        self._support_http_status_code_continue = support_http_status_code_continue
        self._unfold_http_headers = unfold_http_headers

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AS2AcknowledgementConnectionSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AS2AcknowledgementConnectionSettings of this AS2AcknowledgementConnectionSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ignore_certificate_name_mismatch(self):
        """Gets the ignore_certificate_name_mismatch of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to ignore mismatch in certificate name.

        :return: The ignore_certificate_name_mismatch of this AS2AcknowledgementConnectionSettings.
        :rtype: bool
        """
        return self._ignore_certificate_name_mismatch

    @ignore_certificate_name_mismatch.setter
    def ignore_certificate_name_mismatch(self, ignore_certificate_name_mismatch):
        """Sets the ignore_certificate_name_mismatch of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to ignore mismatch in certificate name.

        :param ignore_certificate_name_mismatch: The ignore_certificate_name_mismatch of this AS2AcknowledgementConnectionSettings.
        :type ignore_certificate_name_mismatch: bool
        """
        if ignore_certificate_name_mismatch is None:
            raise ValueError("Invalid value for `ignore_certificate_name_mismatch`, must not be `None`")

        self._ignore_certificate_name_mismatch = ignore_certificate_name_mismatch

    @property
    def keep_http_connection_alive(self):
        """Gets the keep_http_connection_alive of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to keep the connection alive.

        :return: The keep_http_connection_alive of this AS2AcknowledgementConnectionSettings.
        :rtype: bool
        """
        return self._keep_http_connection_alive

    @keep_http_connection_alive.setter
    def keep_http_connection_alive(self, keep_http_connection_alive):
        """Sets the keep_http_connection_alive of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to keep the connection alive.

        :param keep_http_connection_alive: The keep_http_connection_alive of this AS2AcknowledgementConnectionSettings.
        :type keep_http_connection_alive: bool
        """
        if keep_http_connection_alive is None:
            raise ValueError("Invalid value for `keep_http_connection_alive`, must not be `None`")

        self._keep_http_connection_alive = keep_http_connection_alive

    @property
    def support_http_status_code_continue(self):
        """Gets the support_http_status_code_continue of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to support HTTP status code 'CONTINUE'.

        :return: The support_http_status_code_continue of this AS2AcknowledgementConnectionSettings.
        :rtype: bool
        """
        return self._support_http_status_code_continue

    @support_http_status_code_continue.setter
    def support_http_status_code_continue(self, support_http_status_code_continue):
        """Sets the support_http_status_code_continue of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to support HTTP status code 'CONTINUE'.

        :param support_http_status_code_continue: The support_http_status_code_continue of this AS2AcknowledgementConnectionSettings.
        :type support_http_status_code_continue: bool
        """
        if support_http_status_code_continue is None:
            raise ValueError("Invalid value for `support_http_status_code_continue`, must not be `None`")

        self._support_http_status_code_continue = support_http_status_code_continue

    @property
    def unfold_http_headers(self):
        """Gets the unfold_http_headers of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to unfold the HTTP headers.

        :return: The unfold_http_headers of this AS2AcknowledgementConnectionSettings.
        :rtype: bool
        """
        return self._unfold_http_headers

    @unfold_http_headers.setter
    def unfold_http_headers(self, unfold_http_headers):
        """Sets the unfold_http_headers of this AS2AcknowledgementConnectionSettings.

        The value indicating whether to unfold the HTTP headers.

        :param unfold_http_headers: The unfold_http_headers of this AS2AcknowledgementConnectionSettings.
        :type unfold_http_headers: bool
        """
        if unfold_http_headers is None:
            raise ValueError("Invalid value for `unfold_http_headers`, must not be `None`")

        self._unfold_http_headers = unfold_http_headers
