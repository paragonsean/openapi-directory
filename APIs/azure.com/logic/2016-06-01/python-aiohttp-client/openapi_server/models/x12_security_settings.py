# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class X12SecuritySettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization_qualifier: str=None, authorization_value: str=None, password_value: str=None, security_qualifier: str=None):
        """X12SecuritySettings - a model defined in OpenAPI

        :param authorization_qualifier: The authorization_qualifier of this X12SecuritySettings.
        :param authorization_value: The authorization_value of this X12SecuritySettings.
        :param password_value: The password_value of this X12SecuritySettings.
        :param security_qualifier: The security_qualifier of this X12SecuritySettings.
        """
        self.openapi_types = {
            'authorization_qualifier': str,
            'authorization_value': str,
            'password_value': str,
            'security_qualifier': str
        }

        self.attribute_map = {
            'authorization_qualifier': 'authorizationQualifier',
            'authorization_value': 'authorizationValue',
            'password_value': 'passwordValue',
            'security_qualifier': 'securityQualifier'
        }

        self._authorization_qualifier = authorization_qualifier
        self._authorization_value = authorization_value
        self._password_value = password_value
        self._security_qualifier = security_qualifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'X12SecuritySettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The X12SecuritySettings of this X12SecuritySettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization_qualifier(self):
        """Gets the authorization_qualifier of this X12SecuritySettings.

        The authorization qualifier.

        :return: The authorization_qualifier of this X12SecuritySettings.
        :rtype: str
        """
        return self._authorization_qualifier

    @authorization_qualifier.setter
    def authorization_qualifier(self, authorization_qualifier):
        """Sets the authorization_qualifier of this X12SecuritySettings.

        The authorization qualifier.

        :param authorization_qualifier: The authorization_qualifier of this X12SecuritySettings.
        :type authorization_qualifier: str
        """
        if authorization_qualifier is None:
            raise ValueError("Invalid value for `authorization_qualifier`, must not be `None`")

        self._authorization_qualifier = authorization_qualifier

    @property
    def authorization_value(self):
        """Gets the authorization_value of this X12SecuritySettings.

        The authorization value.

        :return: The authorization_value of this X12SecuritySettings.
        :rtype: str
        """
        return self._authorization_value

    @authorization_value.setter
    def authorization_value(self, authorization_value):
        """Sets the authorization_value of this X12SecuritySettings.

        The authorization value.

        :param authorization_value: The authorization_value of this X12SecuritySettings.
        :type authorization_value: str
        """

        self._authorization_value = authorization_value

    @property
    def password_value(self):
        """Gets the password_value of this X12SecuritySettings.

        The password value.

        :return: The password_value of this X12SecuritySettings.
        :rtype: str
        """
        return self._password_value

    @password_value.setter
    def password_value(self, password_value):
        """Sets the password_value of this X12SecuritySettings.

        The password value.

        :param password_value: The password_value of this X12SecuritySettings.
        :type password_value: str
        """

        self._password_value = password_value

    @property
    def security_qualifier(self):
        """Gets the security_qualifier of this X12SecuritySettings.

        The security qualifier.

        :return: The security_qualifier of this X12SecuritySettings.
        :rtype: str
        """
        return self._security_qualifier

    @security_qualifier.setter
    def security_qualifier(self, security_qualifier):
        """Sets the security_qualifier of this X12SecuritySettings.

        The security qualifier.

        :param security_qualifier: The security_qualifier of this X12SecuritySettings.
        :type security_qualifier: str
        """
        if security_qualifier is None:
            raise ValueError("Invalid value for `security_qualifier`, must not be `None`")

        self._security_qualifier = security_qualifier
