# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.as2_acknowledgement_connection_settings import AS2AcknowledgementConnectionSettings
from openapi_server.models.as2_envelope_settings import AS2EnvelopeSettings
from openapi_server.models.as2_error_settings import AS2ErrorSettings
from openapi_server.models.as2_mdn_settings import AS2MdnSettings
from openapi_server.models.as2_message_connection_settings import AS2MessageConnectionSettings
from openapi_server.models.as2_security_settings import AS2SecuritySettings
from openapi_server.models.as2_validation_settings import AS2ValidationSettings
from openapi_server import util


class AS2ProtocolSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledgement_connection_settings: AS2AcknowledgementConnectionSettings=None, envelope_settings: AS2EnvelopeSettings=None, error_settings: AS2ErrorSettings=None, mdn_settings: AS2MdnSettings=None, message_connection_settings: AS2MessageConnectionSettings=None, security_settings: AS2SecuritySettings=None, validation_settings: AS2ValidationSettings=None):
        """AS2ProtocolSettings - a model defined in OpenAPI

        :param acknowledgement_connection_settings: The acknowledgement_connection_settings of this AS2ProtocolSettings.
        :param envelope_settings: The envelope_settings of this AS2ProtocolSettings.
        :param error_settings: The error_settings of this AS2ProtocolSettings.
        :param mdn_settings: The mdn_settings of this AS2ProtocolSettings.
        :param message_connection_settings: The message_connection_settings of this AS2ProtocolSettings.
        :param security_settings: The security_settings of this AS2ProtocolSettings.
        :param validation_settings: The validation_settings of this AS2ProtocolSettings.
        """
        self.openapi_types = {
            'acknowledgement_connection_settings': AS2AcknowledgementConnectionSettings,
            'envelope_settings': AS2EnvelopeSettings,
            'error_settings': AS2ErrorSettings,
            'mdn_settings': AS2MdnSettings,
            'message_connection_settings': AS2MessageConnectionSettings,
            'security_settings': AS2SecuritySettings,
            'validation_settings': AS2ValidationSettings
        }

        self.attribute_map = {
            'acknowledgement_connection_settings': 'acknowledgementConnectionSettings',
            'envelope_settings': 'envelopeSettings',
            'error_settings': 'errorSettings',
            'mdn_settings': 'mdnSettings',
            'message_connection_settings': 'messageConnectionSettings',
            'security_settings': 'securitySettings',
            'validation_settings': 'validationSettings'
        }

        self._acknowledgement_connection_settings = acknowledgement_connection_settings
        self._envelope_settings = envelope_settings
        self._error_settings = error_settings
        self._mdn_settings = mdn_settings
        self._message_connection_settings = message_connection_settings
        self._security_settings = security_settings
        self._validation_settings = validation_settings

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AS2ProtocolSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AS2ProtocolSettings of this AS2ProtocolSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledgement_connection_settings(self):
        """Gets the acknowledgement_connection_settings of this AS2ProtocolSettings.


        :return: The acknowledgement_connection_settings of this AS2ProtocolSettings.
        :rtype: AS2AcknowledgementConnectionSettings
        """
        return self._acknowledgement_connection_settings

    @acknowledgement_connection_settings.setter
    def acknowledgement_connection_settings(self, acknowledgement_connection_settings):
        """Sets the acknowledgement_connection_settings of this AS2ProtocolSettings.


        :param acknowledgement_connection_settings: The acknowledgement_connection_settings of this AS2ProtocolSettings.
        :type acknowledgement_connection_settings: AS2AcknowledgementConnectionSettings
        """
        if acknowledgement_connection_settings is None:
            raise ValueError("Invalid value for `acknowledgement_connection_settings`, must not be `None`")

        self._acknowledgement_connection_settings = acknowledgement_connection_settings

    @property
    def envelope_settings(self):
        """Gets the envelope_settings of this AS2ProtocolSettings.


        :return: The envelope_settings of this AS2ProtocolSettings.
        :rtype: AS2EnvelopeSettings
        """
        return self._envelope_settings

    @envelope_settings.setter
    def envelope_settings(self, envelope_settings):
        """Sets the envelope_settings of this AS2ProtocolSettings.


        :param envelope_settings: The envelope_settings of this AS2ProtocolSettings.
        :type envelope_settings: AS2EnvelopeSettings
        """
        if envelope_settings is None:
            raise ValueError("Invalid value for `envelope_settings`, must not be `None`")

        self._envelope_settings = envelope_settings

    @property
    def error_settings(self):
        """Gets the error_settings of this AS2ProtocolSettings.


        :return: The error_settings of this AS2ProtocolSettings.
        :rtype: AS2ErrorSettings
        """
        return self._error_settings

    @error_settings.setter
    def error_settings(self, error_settings):
        """Sets the error_settings of this AS2ProtocolSettings.


        :param error_settings: The error_settings of this AS2ProtocolSettings.
        :type error_settings: AS2ErrorSettings
        """
        if error_settings is None:
            raise ValueError("Invalid value for `error_settings`, must not be `None`")

        self._error_settings = error_settings

    @property
    def mdn_settings(self):
        """Gets the mdn_settings of this AS2ProtocolSettings.


        :return: The mdn_settings of this AS2ProtocolSettings.
        :rtype: AS2MdnSettings
        """
        return self._mdn_settings

    @mdn_settings.setter
    def mdn_settings(self, mdn_settings):
        """Sets the mdn_settings of this AS2ProtocolSettings.


        :param mdn_settings: The mdn_settings of this AS2ProtocolSettings.
        :type mdn_settings: AS2MdnSettings
        """
        if mdn_settings is None:
            raise ValueError("Invalid value for `mdn_settings`, must not be `None`")

        self._mdn_settings = mdn_settings

    @property
    def message_connection_settings(self):
        """Gets the message_connection_settings of this AS2ProtocolSettings.


        :return: The message_connection_settings of this AS2ProtocolSettings.
        :rtype: AS2MessageConnectionSettings
        """
        return self._message_connection_settings

    @message_connection_settings.setter
    def message_connection_settings(self, message_connection_settings):
        """Sets the message_connection_settings of this AS2ProtocolSettings.


        :param message_connection_settings: The message_connection_settings of this AS2ProtocolSettings.
        :type message_connection_settings: AS2MessageConnectionSettings
        """
        if message_connection_settings is None:
            raise ValueError("Invalid value for `message_connection_settings`, must not be `None`")

        self._message_connection_settings = message_connection_settings

    @property
    def security_settings(self):
        """Gets the security_settings of this AS2ProtocolSettings.


        :return: The security_settings of this AS2ProtocolSettings.
        :rtype: AS2SecuritySettings
        """
        return self._security_settings

    @security_settings.setter
    def security_settings(self, security_settings):
        """Sets the security_settings of this AS2ProtocolSettings.


        :param security_settings: The security_settings of this AS2ProtocolSettings.
        :type security_settings: AS2SecuritySettings
        """
        if security_settings is None:
            raise ValueError("Invalid value for `security_settings`, must not be `None`")

        self._security_settings = security_settings

    @property
    def validation_settings(self):
        """Gets the validation_settings of this AS2ProtocolSettings.


        :return: The validation_settings of this AS2ProtocolSettings.
        :rtype: AS2ValidationSettings
        """
        return self._validation_settings

    @validation_settings.setter
    def validation_settings(self, validation_settings):
        """Sets the validation_settings of this AS2ProtocolSettings.


        :param validation_settings: The validation_settings of this AS2ProtocolSettings.
        :type validation_settings: AS2ValidationSettings
        """
        if validation_settings is None:
            raise ValueError("Invalid value for `validation_settings`, must not be `None`")

        self._validation_settings = validation_settings
