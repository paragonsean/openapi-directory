# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.track_events_operation_options import TrackEventsOperationOptions
from openapi_server.models.tracking_event import TrackingEvent
from openapi_server import util


class TrackingEventsDefinition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, events: List[TrackingEvent]=None, source_type: str=None, track_events_options: TrackEventsOperationOptions=None):
        """TrackingEventsDefinition - a model defined in OpenAPI

        :param events: The events of this TrackingEventsDefinition.
        :param source_type: The source_type of this TrackingEventsDefinition.
        :param track_events_options: The track_events_options of this TrackingEventsDefinition.
        """
        self.openapi_types = {
            'events': List[TrackingEvent],
            'source_type': str,
            'track_events_options': TrackEventsOperationOptions
        }

        self.attribute_map = {
            'events': 'events',
            'source_type': 'sourceType',
            'track_events_options': 'trackEventsOptions'
        }

        self._events = events
        self._source_type = source_type
        self._track_events_options = track_events_options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TrackingEventsDefinition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TrackingEventsDefinition of this TrackingEventsDefinition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def events(self):
        """Gets the events of this TrackingEventsDefinition.


        :return: The events of this TrackingEventsDefinition.
        :rtype: List[TrackingEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this TrackingEventsDefinition.


        :param events: The events of this TrackingEventsDefinition.
        :type events: List[TrackingEvent]
        """
        if events is None:
            raise ValueError("Invalid value for `events`, must not be `None`")

        self._events = events

    @property
    def source_type(self):
        """Gets the source_type of this TrackingEventsDefinition.


        :return: The source_type of this TrackingEventsDefinition.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type):
        """Sets the source_type of this TrackingEventsDefinition.


        :param source_type: The source_type of this TrackingEventsDefinition.
        :type source_type: str
        """
        if source_type is None:
            raise ValueError("Invalid value for `source_type`, must not be `None`")

        self._source_type = source_type

    @property
    def track_events_options(self):
        """Gets the track_events_options of this TrackingEventsDefinition.


        :return: The track_events_options of this TrackingEventsDefinition.
        :rtype: TrackEventsOperationOptions
        """
        return self._track_events_options

    @track_events_options.setter
    def track_events_options(self, track_events_options):
        """Sets the track_events_options of this TrackingEventsDefinition.


        :param track_events_options: The track_events_options of this TrackingEventsDefinition.
        :type track_events_options: TrackEventsOperationOptions
        """

        self._track_events_options = track_events_options
