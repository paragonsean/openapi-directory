# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.map_type import MapType
from openapi_server import util


class IntegrationAccountMapFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, map_type: MapType=None):
        """IntegrationAccountMapFilter - a model defined in OpenAPI

        :param map_type: The map_type of this IntegrationAccountMapFilter.
        """
        self.openapi_types = {
            'map_type': MapType
        }

        self.attribute_map = {
            'map_type': 'mapType'
        }

        self._map_type = map_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IntegrationAccountMapFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IntegrationAccountMapFilter of this IntegrationAccountMapFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def map_type(self):
        """Gets the map_type of this IntegrationAccountMapFilter.


        :return: The map_type of this IntegrationAccountMapFilter.
        :rtype: MapType
        """
        return self._map_type

    @map_type.setter
    def map_type(self, map_type):
        """Sets the map_type of this IntegrationAccountMapFilter.


        :param map_type: The map_type of this IntegrationAccountMapFilter.
        :type map_type: MapType
        """
        if map_type is None:
            raise ValueError("Invalid value for `map_type`, must not be `None`")

        self._map_type = map_type
