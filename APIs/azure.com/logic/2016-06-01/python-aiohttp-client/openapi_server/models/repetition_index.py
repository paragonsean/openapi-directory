# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RepetitionIndex(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, item_index: int=None, scope_name: str=None):
        """RepetitionIndex - a model defined in OpenAPI

        :param item_index: The item_index of this RepetitionIndex.
        :param scope_name: The scope_name of this RepetitionIndex.
        """
        self.openapi_types = {
            'item_index': int,
            'scope_name': str
        }

        self.attribute_map = {
            'item_index': 'itemIndex',
            'scope_name': 'scopeName'
        }

        self._item_index = item_index
        self._scope_name = scope_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RepetitionIndex':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RepetitionIndex of this RepetitionIndex.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def item_index(self):
        """Gets the item_index of this RepetitionIndex.

        The index.

        :return: The item_index of this RepetitionIndex.
        :rtype: int
        """
        return self._item_index

    @item_index.setter
    def item_index(self, item_index):
        """Sets the item_index of this RepetitionIndex.

        The index.

        :param item_index: The item_index of this RepetitionIndex.
        :type item_index: int
        """
        if item_index is None:
            raise ValueError("Invalid value for `item_index`, must not be `None`")

        self._item_index = item_index

    @property
    def scope_name(self):
        """Gets the scope_name of this RepetitionIndex.

        The scope.

        :return: The scope_name of this RepetitionIndex.
        :rtype: str
        """
        return self._scope_name

    @scope_name.setter
    def scope_name(self, scope_name):
        """Sets the scope_name of this RepetitionIndex.

        The scope.

        :param scope_name: The scope_name of this RepetitionIndex.
        :type scope_name: str
        """

        self._scope_name = scope_name
