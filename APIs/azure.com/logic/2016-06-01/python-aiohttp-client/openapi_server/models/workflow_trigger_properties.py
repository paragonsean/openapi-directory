# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_reference import ResourceReference
from openapi_server.models.workflow_state import WorkflowState
from openapi_server.models.workflow_status import WorkflowStatus
from openapi_server.models.workflow_trigger_provisioning_state import WorkflowTriggerProvisioningState
from openapi_server.models.workflow_trigger_recurrence import WorkflowTriggerRecurrence
from openapi_server import util


class WorkflowTriggerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, changed_time: datetime=None, created_time: datetime=None, last_execution_time: datetime=None, next_execution_time: datetime=None, provisioning_state: WorkflowTriggerProvisioningState=None, recurrence: WorkflowTriggerRecurrence=None, state: WorkflowState=None, status: WorkflowStatus=None, workflow: ResourceReference=None):
        """WorkflowTriggerProperties - a model defined in OpenAPI

        :param changed_time: The changed_time of this WorkflowTriggerProperties.
        :param created_time: The created_time of this WorkflowTriggerProperties.
        :param last_execution_time: The last_execution_time of this WorkflowTriggerProperties.
        :param next_execution_time: The next_execution_time of this WorkflowTriggerProperties.
        :param provisioning_state: The provisioning_state of this WorkflowTriggerProperties.
        :param recurrence: The recurrence of this WorkflowTriggerProperties.
        :param state: The state of this WorkflowTriggerProperties.
        :param status: The status of this WorkflowTriggerProperties.
        :param workflow: The workflow of this WorkflowTriggerProperties.
        """
        self.openapi_types = {
            'changed_time': datetime,
            'created_time': datetime,
            'last_execution_time': datetime,
            'next_execution_time': datetime,
            'provisioning_state': WorkflowTriggerProvisioningState,
            'recurrence': WorkflowTriggerRecurrence,
            'state': WorkflowState,
            'status': WorkflowStatus,
            'workflow': ResourceReference
        }

        self.attribute_map = {
            'changed_time': 'changedTime',
            'created_time': 'createdTime',
            'last_execution_time': 'lastExecutionTime',
            'next_execution_time': 'nextExecutionTime',
            'provisioning_state': 'provisioningState',
            'recurrence': 'recurrence',
            'state': 'state',
            'status': 'status',
            'workflow': 'workflow'
        }

        self._changed_time = changed_time
        self._created_time = created_time
        self._last_execution_time = last_execution_time
        self._next_execution_time = next_execution_time
        self._provisioning_state = provisioning_state
        self._recurrence = recurrence
        self._state = state
        self._status = status
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkflowTriggerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkflowTriggerProperties of this WorkflowTriggerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def changed_time(self):
        """Gets the changed_time of this WorkflowTriggerProperties.

        Gets the changed time.

        :return: The changed_time of this WorkflowTriggerProperties.
        :rtype: datetime
        """
        return self._changed_time

    @changed_time.setter
    def changed_time(self, changed_time):
        """Sets the changed_time of this WorkflowTriggerProperties.

        Gets the changed time.

        :param changed_time: The changed_time of this WorkflowTriggerProperties.
        :type changed_time: datetime
        """

        self._changed_time = changed_time

    @property
    def created_time(self):
        """Gets the created_time of this WorkflowTriggerProperties.

        Gets the created time.

        :return: The created_time of this WorkflowTriggerProperties.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this WorkflowTriggerProperties.

        Gets the created time.

        :param created_time: The created_time of this WorkflowTriggerProperties.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def last_execution_time(self):
        """Gets the last_execution_time of this WorkflowTriggerProperties.

        Gets the last execution time.

        :return: The last_execution_time of this WorkflowTriggerProperties.
        :rtype: datetime
        """
        return self._last_execution_time

    @last_execution_time.setter
    def last_execution_time(self, last_execution_time):
        """Sets the last_execution_time of this WorkflowTriggerProperties.

        Gets the last execution time.

        :param last_execution_time: The last_execution_time of this WorkflowTriggerProperties.
        :type last_execution_time: datetime
        """

        self._last_execution_time = last_execution_time

    @property
    def next_execution_time(self):
        """Gets the next_execution_time of this WorkflowTriggerProperties.

        Gets the next execution time.

        :return: The next_execution_time of this WorkflowTriggerProperties.
        :rtype: datetime
        """
        return self._next_execution_time

    @next_execution_time.setter
    def next_execution_time(self, next_execution_time):
        """Sets the next_execution_time of this WorkflowTriggerProperties.

        Gets the next execution time.

        :param next_execution_time: The next_execution_time of this WorkflowTriggerProperties.
        :type next_execution_time: datetime
        """

        self._next_execution_time = next_execution_time

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WorkflowTriggerProperties.


        :return: The provisioning_state of this WorkflowTriggerProperties.
        :rtype: WorkflowTriggerProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WorkflowTriggerProperties.


        :param provisioning_state: The provisioning_state of this WorkflowTriggerProperties.
        :type provisioning_state: WorkflowTriggerProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def recurrence(self):
        """Gets the recurrence of this WorkflowTriggerProperties.


        :return: The recurrence of this WorkflowTriggerProperties.
        :rtype: WorkflowTriggerRecurrence
        """
        return self._recurrence

    @recurrence.setter
    def recurrence(self, recurrence):
        """Sets the recurrence of this WorkflowTriggerProperties.


        :param recurrence: The recurrence of this WorkflowTriggerProperties.
        :type recurrence: WorkflowTriggerRecurrence
        """

        self._recurrence = recurrence

    @property
    def state(self):
        """Gets the state of this WorkflowTriggerProperties.


        :return: The state of this WorkflowTriggerProperties.
        :rtype: WorkflowState
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this WorkflowTriggerProperties.


        :param state: The state of this WorkflowTriggerProperties.
        :type state: WorkflowState
        """

        self._state = state

    @property
    def status(self):
        """Gets the status of this WorkflowTriggerProperties.


        :return: The status of this WorkflowTriggerProperties.
        :rtype: WorkflowStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this WorkflowTriggerProperties.


        :param status: The status of this WorkflowTriggerProperties.
        :type status: WorkflowStatus
        """

        self._status = status

    @property
    def workflow(self):
        """Gets the workflow of this WorkflowTriggerProperties.


        :return: The workflow of this WorkflowTriggerProperties.
        :rtype: ResourceReference
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this WorkflowTriggerProperties.


        :param workflow: The workflow of this WorkflowTriggerProperties.
        :type workflow: ResourceReference
        """

        self._workflow = workflow
