/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMpnsCredentialProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMpnsCredentialProperties::OAIMpnsCredentialProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMpnsCredentialProperties::OAIMpnsCredentialProperties() {
    this->initializeModel();
}

OAIMpnsCredentialProperties::~OAIMpnsCredentialProperties() {}

void OAIMpnsCredentialProperties::initializeModel() {

    m_certificate_key_isSet = false;
    m_certificate_key_isValid = false;

    m_mpns_certificate_isSet = false;
    m_mpns_certificate_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;
}

void OAIMpnsCredentialProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMpnsCredentialProperties::fromJsonObject(QJsonObject json) {

    m_certificate_key_isValid = ::OpenAPI::fromJsonValue(m_certificate_key, json[QString("certificateKey")]);
    m_certificate_key_isSet = !json[QString("certificateKey")].isNull() && m_certificate_key_isValid;

    m_mpns_certificate_isValid = ::OpenAPI::fromJsonValue(m_mpns_certificate, json[QString("mpnsCertificate")]);
    m_mpns_certificate_isSet = !json[QString("mpnsCertificate")].isNull() && m_mpns_certificate_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;
}

QString OAIMpnsCredentialProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMpnsCredentialProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_certificate_key_isSet) {
        obj.insert(QString("certificateKey"), ::OpenAPI::toJsonValue(m_certificate_key));
    }
    if (m_mpns_certificate_isSet) {
        obj.insert(QString("mpnsCertificate"), ::OpenAPI::toJsonValue(m_mpns_certificate));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    return obj;
}

QString OAIMpnsCredentialProperties::getCertificateKey() const {
    return m_certificate_key;
}
void OAIMpnsCredentialProperties::setCertificateKey(const QString &certificate_key) {
    m_certificate_key = certificate_key;
    m_certificate_key_isSet = true;
}

bool OAIMpnsCredentialProperties::is_certificate_key_Set() const{
    return m_certificate_key_isSet;
}

bool OAIMpnsCredentialProperties::is_certificate_key_Valid() const{
    return m_certificate_key_isValid;
}

QString OAIMpnsCredentialProperties::getMpnsCertificate() const {
    return m_mpns_certificate;
}
void OAIMpnsCredentialProperties::setMpnsCertificate(const QString &mpns_certificate) {
    m_mpns_certificate = mpns_certificate;
    m_mpns_certificate_isSet = true;
}

bool OAIMpnsCredentialProperties::is_mpns_certificate_Set() const{
    return m_mpns_certificate_isSet;
}

bool OAIMpnsCredentialProperties::is_mpns_certificate_Valid() const{
    return m_mpns_certificate_isValid;
}

QString OAIMpnsCredentialProperties::getThumbprint() const {
    return m_thumbprint;
}
void OAIMpnsCredentialProperties::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAIMpnsCredentialProperties::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAIMpnsCredentialProperties::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

bool OAIMpnsCredentialProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_certificate_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpns_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMpnsCredentialProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
