/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2016-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINamespacesApi_H
#define OAI_OAINamespacesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckAvailabilityParameters.h"
#include "OAICheckAvailabilityResult.h"
#include "OAINamespaceCreateOrUpdateParameters.h"
#include "OAINamespaceListResult.h"
#include "OAINamespacePatchParameters.h"
#include "OAINamespaceResource.h"
#include "OAIPolicykeyResource.h"
#include "OAIResourceListKeys.h"
#include "OAISharedAccessAuthorizationRuleCreateOrUpdateParameters.h"
#include "OAISharedAccessAuthorizationRuleListResult.h"
#include "OAISharedAccessAuthorizationRuleResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINamespacesApi : public QObject {
    Q_OBJECT

public:
    OAINamespacesApi(const int timeOut = 0);
    ~OAINamespacesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckAvailabilityParameters [required]
    */
    virtual void namespacesCheckAvailability(const QString &api_version, const QString &subscription_id, const OAICheckAvailabilityParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINamespaceCreateOrUpdateParameters [required]
    */
    virtual void namespacesCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAINamespaceCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISharedAccessAuthorizationRuleCreateOrUpdateParameters [required]
    */
    virtual void namespacesCreateOrUpdateAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAISharedAccessAuthorizationRuleCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesDelete(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesDeleteAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesGet(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListAll(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void namespacesListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINamespacePatchParameters [required]
    */
    virtual void namespacesPatch(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAINamespacePatchParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPolicykeyResource [required]
    */
    virtual void namespacesRegenerateKeys(const QString &resource_group_name, const QString &namespace_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAIPolicykeyResource &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void namespacesCheckAvailabilityCallback(OAIHttpRequestWorker *worker);
    void namespacesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void namespacesCreateOrUpdateAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void namespacesDeleteCallback(OAIHttpRequestWorker *worker);
    void namespacesDeleteAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void namespacesGetCallback(OAIHttpRequestWorker *worker);
    void namespacesGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void namespacesListCallback(OAIHttpRequestWorker *worker);
    void namespacesListAllCallback(OAIHttpRequestWorker *worker);
    void namespacesListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void namespacesListKeysCallback(OAIHttpRequestWorker *worker);
    void namespacesPatchCallback(OAIHttpRequestWorker *worker);
    void namespacesRegenerateKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void namespacesCheckAvailabilitySignal(OAICheckAvailabilityResult summary);
    void namespacesCreateOrUpdateSignal(OAINamespaceResource summary);
    void namespacesCreateOrUpdateAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void namespacesDeleteSignal();
    void namespacesDeleteAuthorizationRuleSignal();
    void namespacesGetSignal(OAINamespaceResource summary);
    void namespacesGetAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void namespacesListSignal(OAINamespaceListResult summary);
    void namespacesListAllSignal(OAINamespaceListResult summary);
    void namespacesListAuthorizationRulesSignal(OAISharedAccessAuthorizationRuleListResult summary);
    void namespacesListKeysSignal(OAIResourceListKeys summary);
    void namespacesPatchSignal(OAINamespaceResource summary);
    void namespacesRegenerateKeysSignal(OAIResourceListKeys summary);


    void namespacesCheckAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckAvailabilityResult summary);
    void namespacesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINamespaceResource summary);
    void namespacesCreateOrUpdateAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void namespacesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void namespacesDeleteAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void namespacesGetSignalFull(OAIHttpRequestWorker *worker, OAINamespaceResource summary);
    void namespacesGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void namespacesListSignalFull(OAIHttpRequestWorker *worker, OAINamespaceListResult summary);
    void namespacesListAllSignalFull(OAIHttpRequestWorker *worker, OAINamespaceListResult summary);
    void namespacesListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleListResult summary);
    void namespacesListKeysSignalFull(OAIHttpRequestWorker *worker, OAIResourceListKeys summary);
    void namespacesPatchSignalFull(OAIHttpRequestWorker *worker, OAINamespaceResource summary);
    void namespacesRegenerateKeysSignalFull(OAIHttpRequestWorker *worker, OAIResourceListKeys summary);

    Q_DECL_DEPRECATED_X("Use namespacesCheckAvailabilitySignalError() instead")
    void namespacesCheckAvailabilitySignalE(OAICheckAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCheckAvailabilitySignalError(OAICheckAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateSignalError() instead")
    void namespacesCreateOrUpdateSignalE(OAINamespaceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateSignalError(OAINamespaceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateAuthorizationRuleSignalError() instead")
    void namespacesCreateOrUpdateAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteSignalError() instead")
    void namespacesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteAuthorizationRuleSignalError() instead")
    void namespacesDeleteAuthorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteAuthorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetSignalError() instead")
    void namespacesGetSignalE(OAINamespaceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetSignalError(OAINamespaceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetAuthorizationRuleSignalError() instead")
    void namespacesGetAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListSignalError() instead")
    void namespacesListSignalE(OAINamespaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListSignalError(OAINamespaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListAllSignalError() instead")
    void namespacesListAllSignalE(OAINamespaceListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListAllSignalError(OAINamespaceListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListAuthorizationRulesSignalError() instead")
    void namespacesListAuthorizationRulesSignalE(OAISharedAccessAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListAuthorizationRulesSignalError(OAISharedAccessAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListKeysSignalError() instead")
    void namespacesListKeysSignalE(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListKeysSignalError(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesPatchSignalError() instead")
    void namespacesPatchSignalE(OAINamespaceResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesPatchSignalError(OAINamespaceResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesRegenerateKeysSignalError() instead")
    void namespacesRegenerateKeysSignalE(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesRegenerateKeysSignalError(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use namespacesCheckAvailabilitySignalErrorFull() instead")
    void namespacesCheckAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCheckAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateSignalErrorFull() instead")
    void namespacesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesCreateOrUpdateAuthorizationRuleSignalErrorFull() instead")
    void namespacesCreateOrUpdateAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesCreateOrUpdateAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteSignalErrorFull() instead")
    void namespacesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesDeleteAuthorizationRuleSignalErrorFull() instead")
    void namespacesDeleteAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesDeleteAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetSignalErrorFull() instead")
    void namespacesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesGetAuthorizationRuleSignalErrorFull() instead")
    void namespacesGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListSignalErrorFull() instead")
    void namespacesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListAllSignalErrorFull() instead")
    void namespacesListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListAuthorizationRulesSignalErrorFull() instead")
    void namespacesListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesListKeysSignalErrorFull() instead")
    void namespacesListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesPatchSignalErrorFull() instead")
    void namespacesPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use namespacesRegenerateKeysSignalErrorFull() instead")
    void namespacesRegenerateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void namespacesRegenerateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
