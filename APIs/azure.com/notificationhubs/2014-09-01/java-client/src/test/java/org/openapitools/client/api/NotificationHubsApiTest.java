/*
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckAvailabilityParameters;
import org.openapitools.client.model.CheckAvailabilityResource;
import org.openapitools.client.model.NotificationHubCreateOrUpdateParameters;
import org.openapitools.client.model.NotificationHubListResult;
import org.openapitools.client.model.NotificationHubResource;
import org.openapitools.client.model.ResourceListKeys;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NotificationHubsApi
 */
@Disabled
public class NotificationHubsApiTest {

    private final NotificationHubsApi api = new NotificationHubsApi();

    /**
     * Checks the availability of the given notificationHub in a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsCheckAvailabilityTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        CheckAvailabilityParameters parameters = null;
        CheckAvailabilityResource response = api.notificationHubsCheckAvailability(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates/Update a NotificationHub in a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NotificationHubCreateOrUpdateParameters parameters = null;
        NotificationHubResource response = api.notificationHubsCreateOrUpdate(resourceGroupName, namespaceName, notificationHubName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates/Updates an authorization rule for a NotificationHub
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters = null;
        SharedAccessAuthorizationRuleResource response = api.notificationHubsCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes a notification hub associated with a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.notificationHubsDelete(resourceGroupName, namespaceName, notificationHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a notificationHub authorization rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.notificationHubsDeleteAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NotificationHubResource response = api.notificationHubsGet(resourceGroupName, namespaceName, notificationHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an authorization rule for a NotificationHub by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleResource response = api.notificationHubsGetAuthorizationRule(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the PNS Credentials associated with a notification hub .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsGetPnsCredentialsTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NotificationHubResource response = api.notificationHubsGetPnsCredentials(resourceGroupName, namespaceName, notificationHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the notification hubs associated with a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsListTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NotificationHubListResult response = api.notificationHubsList(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the authorization rules for a NotificationHub.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.notificationHubsListAuthorizationRules(resourceGroupName, namespaceName, notificationHubName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the Primary and Secondary ConnectionStrings to the NotificationHub 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void notificationHubsListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String notificationHubName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        ResourceListKeys response = api.notificationHubsListKeys(resourceGroupName, namespaceName, notificationHubName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
