/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2014-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWnsCredentialProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWnsCredentialProperties::OAIWnsCredentialProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWnsCredentialProperties::OAIWnsCredentialProperties() {
    this->initializeModel();
}

OAIWnsCredentialProperties::~OAIWnsCredentialProperties() {}

void OAIWnsCredentialProperties::initializeModel() {

    m_package_sid_isSet = false;
    m_package_sid_isValid = false;

    m_secret_key_isSet = false;
    m_secret_key_isValid = false;

    m_windows_live_endpoint_isSet = false;
    m_windows_live_endpoint_isValid = false;
}

void OAIWnsCredentialProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWnsCredentialProperties::fromJsonObject(QJsonObject json) {

    m_package_sid_isValid = ::OpenAPI::fromJsonValue(m_package_sid, json[QString("packageSid")]);
    m_package_sid_isSet = !json[QString("packageSid")].isNull() && m_package_sid_isValid;

    m_secret_key_isValid = ::OpenAPI::fromJsonValue(m_secret_key, json[QString("secretKey")]);
    m_secret_key_isSet = !json[QString("secretKey")].isNull() && m_secret_key_isValid;

    m_windows_live_endpoint_isValid = ::OpenAPI::fromJsonValue(m_windows_live_endpoint, json[QString("windowsLiveEndpoint")]);
    m_windows_live_endpoint_isSet = !json[QString("windowsLiveEndpoint")].isNull() && m_windows_live_endpoint_isValid;
}

QString OAIWnsCredentialProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWnsCredentialProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_package_sid_isSet) {
        obj.insert(QString("packageSid"), ::OpenAPI::toJsonValue(m_package_sid));
    }
    if (m_secret_key_isSet) {
        obj.insert(QString("secretKey"), ::OpenAPI::toJsonValue(m_secret_key));
    }
    if (m_windows_live_endpoint_isSet) {
        obj.insert(QString("windowsLiveEndpoint"), ::OpenAPI::toJsonValue(m_windows_live_endpoint));
    }
    return obj;
}

QString OAIWnsCredentialProperties::getPackageSid() const {
    return m_package_sid;
}
void OAIWnsCredentialProperties::setPackageSid(const QString &package_sid) {
    m_package_sid = package_sid;
    m_package_sid_isSet = true;
}

bool OAIWnsCredentialProperties::is_package_sid_Set() const{
    return m_package_sid_isSet;
}

bool OAIWnsCredentialProperties::is_package_sid_Valid() const{
    return m_package_sid_isValid;
}

QString OAIWnsCredentialProperties::getSecretKey() const {
    return m_secret_key;
}
void OAIWnsCredentialProperties::setSecretKey(const QString &secret_key) {
    m_secret_key = secret_key;
    m_secret_key_isSet = true;
}

bool OAIWnsCredentialProperties::is_secret_key_Set() const{
    return m_secret_key_isSet;
}

bool OAIWnsCredentialProperties::is_secret_key_Valid() const{
    return m_secret_key_isValid;
}

QString OAIWnsCredentialProperties::getWindowsLiveEndpoint() const {
    return m_windows_live_endpoint;
}
void OAIWnsCredentialProperties::setWindowsLiveEndpoint(const QString &windows_live_endpoint) {
    m_windows_live_endpoint = windows_live_endpoint;
    m_windows_live_endpoint_isSet = true;
}

bool OAIWnsCredentialProperties::is_windows_live_endpoint_Set() const{
    return m_windows_live_endpoint_isSet;
}

bool OAIWnsCredentialProperties::is_windows_live_endpoint_Valid() const{
    return m_windows_live_endpoint_isValid;
}

bool OAIWnsCredentialProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_package_sid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows_live_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWnsCredentialProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
