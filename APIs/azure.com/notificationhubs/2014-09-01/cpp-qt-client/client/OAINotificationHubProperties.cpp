/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2014-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINotificationHubProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINotificationHubProperties::OAINotificationHubProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINotificationHubProperties::OAINotificationHubProperties() {
    this->initializeModel();
}

OAINotificationHubProperties::~OAINotificationHubProperties() {}

void OAINotificationHubProperties::initializeModel() {

    m_adm_credential_isSet = false;
    m_adm_credential_isValid = false;

    m_apns_credential_isSet = false;
    m_apns_credential_isValid = false;

    m_authorization_rules_isSet = false;
    m_authorization_rules_isValid = false;

    m_baidu_credential_isSet = false;
    m_baidu_credential_isValid = false;

    m_gcm_credential_isSet = false;
    m_gcm_credential_isValid = false;

    m_mpns_credential_isSet = false;
    m_mpns_credential_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_registration_ttl_isSet = false;
    m_registration_ttl_isValid = false;

    m_wns_credential_isSet = false;
    m_wns_credential_isValid = false;
}

void OAINotificationHubProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINotificationHubProperties::fromJsonObject(QJsonObject json) {

    m_adm_credential_isValid = ::OpenAPI::fromJsonValue(m_adm_credential, json[QString("admCredential")]);
    m_adm_credential_isSet = !json[QString("admCredential")].isNull() && m_adm_credential_isValid;

    m_apns_credential_isValid = ::OpenAPI::fromJsonValue(m_apns_credential, json[QString("apnsCredential")]);
    m_apns_credential_isSet = !json[QString("apnsCredential")].isNull() && m_apns_credential_isValid;

    m_authorization_rules_isValid = ::OpenAPI::fromJsonValue(m_authorization_rules, json[QString("authorizationRules")]);
    m_authorization_rules_isSet = !json[QString("authorizationRules")].isNull() && m_authorization_rules_isValid;

    m_baidu_credential_isValid = ::OpenAPI::fromJsonValue(m_baidu_credential, json[QString("baiduCredential")]);
    m_baidu_credential_isSet = !json[QString("baiduCredential")].isNull() && m_baidu_credential_isValid;

    m_gcm_credential_isValid = ::OpenAPI::fromJsonValue(m_gcm_credential, json[QString("gcmCredential")]);
    m_gcm_credential_isSet = !json[QString("gcmCredential")].isNull() && m_gcm_credential_isValid;

    m_mpns_credential_isValid = ::OpenAPI::fromJsonValue(m_mpns_credential, json[QString("mpnsCredential")]);
    m_mpns_credential_isSet = !json[QString("mpnsCredential")].isNull() && m_mpns_credential_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_registration_ttl_isValid = ::OpenAPI::fromJsonValue(m_registration_ttl, json[QString("registrationTtl")]);
    m_registration_ttl_isSet = !json[QString("registrationTtl")].isNull() && m_registration_ttl_isValid;

    m_wns_credential_isValid = ::OpenAPI::fromJsonValue(m_wns_credential, json[QString("wnsCredential")]);
    m_wns_credential_isSet = !json[QString("wnsCredential")].isNull() && m_wns_credential_isValid;
}

QString OAINotificationHubProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINotificationHubProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_adm_credential.isSet()) {
        obj.insert(QString("admCredential"), ::OpenAPI::toJsonValue(m_adm_credential));
    }
    if (m_apns_credential.isSet()) {
        obj.insert(QString("apnsCredential"), ::OpenAPI::toJsonValue(m_apns_credential));
    }
    if (m_authorization_rules.size() > 0) {
        obj.insert(QString("authorizationRules"), ::OpenAPI::toJsonValue(m_authorization_rules));
    }
    if (m_baidu_credential.isSet()) {
        obj.insert(QString("baiduCredential"), ::OpenAPI::toJsonValue(m_baidu_credential));
    }
    if (m_gcm_credential.isSet()) {
        obj.insert(QString("gcmCredential"), ::OpenAPI::toJsonValue(m_gcm_credential));
    }
    if (m_mpns_credential.isSet()) {
        obj.insert(QString("mpnsCredential"), ::OpenAPI::toJsonValue(m_mpns_credential));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_registration_ttl_isSet) {
        obj.insert(QString("registrationTtl"), ::OpenAPI::toJsonValue(m_registration_ttl));
    }
    if (m_wns_credential.isSet()) {
        obj.insert(QString("wnsCredential"), ::OpenAPI::toJsonValue(m_wns_credential));
    }
    return obj;
}

OAIAdmCredential OAINotificationHubProperties::getAdmCredential() const {
    return m_adm_credential;
}
void OAINotificationHubProperties::setAdmCredential(const OAIAdmCredential &adm_credential) {
    m_adm_credential = adm_credential;
    m_adm_credential_isSet = true;
}

bool OAINotificationHubProperties::is_adm_credential_Set() const{
    return m_adm_credential_isSet;
}

bool OAINotificationHubProperties::is_adm_credential_Valid() const{
    return m_adm_credential_isValid;
}

OAIApnsCredential OAINotificationHubProperties::getApnsCredential() const {
    return m_apns_credential;
}
void OAINotificationHubProperties::setApnsCredential(const OAIApnsCredential &apns_credential) {
    m_apns_credential = apns_credential;
    m_apns_credential_isSet = true;
}

bool OAINotificationHubProperties::is_apns_credential_Set() const{
    return m_apns_credential_isSet;
}

bool OAINotificationHubProperties::is_apns_credential_Valid() const{
    return m_apns_credential_isValid;
}

QList<OAISharedAccessAuthorizationRuleProperties> OAINotificationHubProperties::getAuthorizationRules() const {
    return m_authorization_rules;
}
void OAINotificationHubProperties::setAuthorizationRules(const QList<OAISharedAccessAuthorizationRuleProperties> &authorization_rules) {
    m_authorization_rules = authorization_rules;
    m_authorization_rules_isSet = true;
}

bool OAINotificationHubProperties::is_authorization_rules_Set() const{
    return m_authorization_rules_isSet;
}

bool OAINotificationHubProperties::is_authorization_rules_Valid() const{
    return m_authorization_rules_isValid;
}

OAIBaiduCredential OAINotificationHubProperties::getBaiduCredential() const {
    return m_baidu_credential;
}
void OAINotificationHubProperties::setBaiduCredential(const OAIBaiduCredential &baidu_credential) {
    m_baidu_credential = baidu_credential;
    m_baidu_credential_isSet = true;
}

bool OAINotificationHubProperties::is_baidu_credential_Set() const{
    return m_baidu_credential_isSet;
}

bool OAINotificationHubProperties::is_baidu_credential_Valid() const{
    return m_baidu_credential_isValid;
}

OAIGcmCredential OAINotificationHubProperties::getGcmCredential() const {
    return m_gcm_credential;
}
void OAINotificationHubProperties::setGcmCredential(const OAIGcmCredential &gcm_credential) {
    m_gcm_credential = gcm_credential;
    m_gcm_credential_isSet = true;
}

bool OAINotificationHubProperties::is_gcm_credential_Set() const{
    return m_gcm_credential_isSet;
}

bool OAINotificationHubProperties::is_gcm_credential_Valid() const{
    return m_gcm_credential_isValid;
}

OAIMpnsCredential OAINotificationHubProperties::getMpnsCredential() const {
    return m_mpns_credential;
}
void OAINotificationHubProperties::setMpnsCredential(const OAIMpnsCredential &mpns_credential) {
    m_mpns_credential = mpns_credential;
    m_mpns_credential_isSet = true;
}

bool OAINotificationHubProperties::is_mpns_credential_Set() const{
    return m_mpns_credential_isSet;
}

bool OAINotificationHubProperties::is_mpns_credential_Valid() const{
    return m_mpns_credential_isValid;
}

QString OAINotificationHubProperties::getName() const {
    return m_name;
}
void OAINotificationHubProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINotificationHubProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAINotificationHubProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINotificationHubProperties::getRegistrationTtl() const {
    return m_registration_ttl;
}
void OAINotificationHubProperties::setRegistrationTtl(const QString &registration_ttl) {
    m_registration_ttl = registration_ttl;
    m_registration_ttl_isSet = true;
}

bool OAINotificationHubProperties::is_registration_ttl_Set() const{
    return m_registration_ttl_isSet;
}

bool OAINotificationHubProperties::is_registration_ttl_Valid() const{
    return m_registration_ttl_isValid;
}

OAIWnsCredential OAINotificationHubProperties::getWnsCredential() const {
    return m_wns_credential;
}
void OAINotificationHubProperties::setWnsCredential(const OAIWnsCredential &wns_credential) {
    m_wns_credential = wns_credential;
    m_wns_credential_isSet = true;
}

bool OAINotificationHubProperties::is_wns_credential_Set() const{
    return m_wns_credential_isSet;
}

bool OAINotificationHubProperties::is_wns_credential_Valid() const{
    return m_wns_credential_isValid;
}

bool OAINotificationHubProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adm_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_apns_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_authorization_rules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_baidu_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_gcm_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_mpns_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_registration_ttl_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_wns_credential.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINotificationHubProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
