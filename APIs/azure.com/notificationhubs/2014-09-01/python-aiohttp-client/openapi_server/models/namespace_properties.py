# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NamespaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, critical: bool=None, enabled: bool=None, name: str=None, namespace_type: str=None, provisioning_state: str=None, region: str=None, scale_unit: str=None, service_bus_endpoint: str=None, status: str=None, subscription_id: str=None):
        """NamespaceProperties - a model defined in OpenAPI

        :param created_at: The created_at of this NamespaceProperties.
        :param critical: The critical of this NamespaceProperties.
        :param enabled: The enabled of this NamespaceProperties.
        :param name: The name of this NamespaceProperties.
        :param namespace_type: The namespace_type of this NamespaceProperties.
        :param provisioning_state: The provisioning_state of this NamespaceProperties.
        :param region: The region of this NamespaceProperties.
        :param scale_unit: The scale_unit of this NamespaceProperties.
        :param service_bus_endpoint: The service_bus_endpoint of this NamespaceProperties.
        :param status: The status of this NamespaceProperties.
        :param subscription_id: The subscription_id of this NamespaceProperties.
        """
        self.openapi_types = {
            'created_at': datetime,
            'critical': bool,
            'enabled': bool,
            'name': str,
            'namespace_type': str,
            'provisioning_state': str,
            'region': str,
            'scale_unit': str,
            'service_bus_endpoint': str,
            'status': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'critical': 'critical',
            'enabled': 'enabled',
            'name': 'name',
            'namespace_type': 'namespaceType',
            'provisioning_state': 'provisioningState',
            'region': 'region',
            'scale_unit': 'scaleUnit',
            'service_bus_endpoint': 'serviceBusEndpoint',
            'status': 'status',
            'subscription_id': 'subscriptionId'
        }

        self._created_at = created_at
        self._critical = critical
        self._enabled = enabled
        self._name = name
        self._namespace_type = namespace_type
        self._provisioning_state = provisioning_state
        self._region = region
        self._scale_unit = scale_unit
        self._service_bus_endpoint = service_bus_endpoint
        self._status = status
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NamespaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NamespaceProperties of this NamespaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this NamespaceProperties.

        The time the namespace was created.

        :return: The created_at of this NamespaceProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this NamespaceProperties.

        The time the namespace was created.

        :param created_at: The created_at of this NamespaceProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def critical(self):
        """Gets the critical of this NamespaceProperties.

        Whether or not the namespace is set as Critical.

        :return: The critical of this NamespaceProperties.
        :rtype: bool
        """
        return self._critical

    @critical.setter
    def critical(self, critical):
        """Sets the critical of this NamespaceProperties.

        Whether or not the namespace is set as Critical.

        :param critical: The critical of this NamespaceProperties.
        :type critical: bool
        """

        self._critical = critical

    @property
    def enabled(self):
        """Gets the enabled of this NamespaceProperties.

        Whether or not the namespace is currently enabled.

        :return: The enabled of this NamespaceProperties.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this NamespaceProperties.

        Whether or not the namespace is currently enabled.

        :param enabled: The enabled of this NamespaceProperties.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self):
        """Gets the name of this NamespaceProperties.

        The name of the namespace.

        :return: The name of this NamespaceProperties.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NamespaceProperties.

        The name of the namespace.

        :param name: The name of this NamespaceProperties.
        :type name: str
        """

        self._name = name

    @property
    def namespace_type(self):
        """Gets the namespace_type of this NamespaceProperties.

        Gets or sets the namespace type.

        :return: The namespace_type of this NamespaceProperties.
        :rtype: str
        """
        return self._namespace_type

    @namespace_type.setter
    def namespace_type(self, namespace_type):
        """Sets the namespace_type of this NamespaceProperties.

        Gets or sets the namespace type.

        :param namespace_type: The namespace_type of this NamespaceProperties.
        :type namespace_type: str
        """
        allowed_values = ["Messaging", "NotificationHub"]  # noqa: E501
        if namespace_type not in allowed_values:
            raise ValueError(
                "Invalid value for `namespace_type` ({0}), must be one of {1}"
                .format(namespace_type, allowed_values)
            )

        self._namespace_type = namespace_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this NamespaceProperties.

        Gets or sets provisioning state of the Namespace.

        :return: The provisioning_state of this NamespaceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this NamespaceProperties.

        Gets or sets provisioning state of the Namespace.

        :param provisioning_state: The provisioning_state of this NamespaceProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def region(self):
        """Gets the region of this NamespaceProperties.

        Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe

        :return: The region of this NamespaceProperties.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this NamespaceProperties.

        Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe

        :param region: The region of this NamespaceProperties.
        :type region: str
        """

        self._region = region

    @property
    def scale_unit(self):
        """Gets the scale_unit of this NamespaceProperties.

        ScaleUnit where the namespace gets created

        :return: The scale_unit of this NamespaceProperties.
        :rtype: str
        """
        return self._scale_unit

    @scale_unit.setter
    def scale_unit(self, scale_unit):
        """Sets the scale_unit of this NamespaceProperties.

        ScaleUnit where the namespace gets created

        :param scale_unit: The scale_unit of this NamespaceProperties.
        :type scale_unit: str
        """

        self._scale_unit = scale_unit

    @property
    def service_bus_endpoint(self):
        """Gets the service_bus_endpoint of this NamespaceProperties.

        Endpoint you can use to perform NotificationHub operations.

        :return: The service_bus_endpoint of this NamespaceProperties.
        :rtype: str
        """
        return self._service_bus_endpoint

    @service_bus_endpoint.setter
    def service_bus_endpoint(self, service_bus_endpoint):
        """Sets the service_bus_endpoint of this NamespaceProperties.

        Endpoint you can use to perform NotificationHub operations.

        :param service_bus_endpoint: The service_bus_endpoint of this NamespaceProperties.
        :type service_bus_endpoint: str
        """

        self._service_bus_endpoint = service_bus_endpoint

    @property
    def status(self):
        """Gets the status of this NamespaceProperties.

        Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting

        :return: The status of this NamespaceProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this NamespaceProperties.

        Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting

        :param status: The status of this NamespaceProperties.
        :type status: str
        """

        self._status = status

    @property
    def subscription_id(self):
        """Gets the subscription_id of this NamespaceProperties.

        The Id of the Azure subscription associated with the namespace.

        :return: The subscription_id of this NamespaceProperties.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this NamespaceProperties.

        The Id of the Azure subscription associated with the namespace.

        :param subscription_id: The subscription_id of this NamespaceProperties.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id
