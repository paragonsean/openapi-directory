/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2014-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The NamespaceProperties model module.
 * @module model/NamespaceProperties
 * @version 2014-09-01
 */
class NamespaceProperties {
    /**
     * Constructs a new <code>NamespaceProperties</code>.
     * Namespace properties.
     * @alias module:model/NamespaceProperties
     */
    constructor() { 
        
        NamespaceProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>NamespaceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/NamespaceProperties} obj Optional instance to populate.
     * @return {module:model/NamespaceProperties} The populated <code>NamespaceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new NamespaceProperties();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('critical')) {
                obj['critical'] = ApiClient.convertToType(data['critical'], 'Boolean');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('namespaceType')) {
                obj['namespaceType'] = ApiClient.convertToType(data['namespaceType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('scaleUnit')) {
                obj['scaleUnit'] = ApiClient.convertToType(data['scaleUnit'], 'String');
            }
            if (data.hasOwnProperty('serviceBusEndpoint')) {
                obj['serviceBusEndpoint'] = ApiClient.convertToType(data['serviceBusEndpoint'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>NamespaceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>NamespaceProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['namespaceType'] && !(typeof data['namespaceType'] === 'string' || data['namespaceType'] instanceof String)) {
            throw new Error("Expected the field `namespaceType` to be a primitive type in the JSON string but got " + data['namespaceType']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['scaleUnit'] && !(typeof data['scaleUnit'] === 'string' || data['scaleUnit'] instanceof String)) {
            throw new Error("Expected the field `scaleUnit` to be a primitive type in the JSON string but got " + data['scaleUnit']);
        }
        // ensure the json data is a string
        if (data['serviceBusEndpoint'] && !(typeof data['serviceBusEndpoint'] === 'string' || data['serviceBusEndpoint'] instanceof String)) {
            throw new Error("Expected the field `serviceBusEndpoint` to be a primitive type in the JSON string but got " + data['serviceBusEndpoint']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}



/**
 * The time the namespace was created.
 * @member {Date} createdAt
 */
NamespaceProperties.prototype['createdAt'] = undefined;

/**
 * Whether or not the namespace is set as Critical.
 * @member {Boolean} critical
 */
NamespaceProperties.prototype['critical'] = undefined;

/**
 * Whether or not the namespace is currently enabled.
 * @member {Boolean} enabled
 */
NamespaceProperties.prototype['enabled'] = undefined;

/**
 * The name of the namespace.
 * @member {String} name
 */
NamespaceProperties.prototype['name'] = undefined;

/**
 * Gets or sets the namespace type.
 * @member {module:model/NamespaceProperties.NamespaceTypeEnum} namespaceType
 */
NamespaceProperties.prototype['namespaceType'] = undefined;

/**
 * Gets or sets provisioning state of the Namespace.
 * @member {String} provisioningState
 */
NamespaceProperties.prototype['provisioningState'] = undefined;

/**
 * Specifies the targeted region in which the namespace should be created. It can be any of the following values: Australia East, Australia Southeast, Central US, East US, East US 2, West US, North Central US, South Central US, East Asia, Southeast Asia, Brazil South, Japan East, Japan West, North Europe, West Europe
 * @member {String} region
 */
NamespaceProperties.prototype['region'] = undefined;

/**
 * ScaleUnit where the namespace gets created
 * @member {String} scaleUnit
 */
NamespaceProperties.prototype['scaleUnit'] = undefined;

/**
 * Endpoint you can use to perform NotificationHub operations.
 * @member {String} serviceBusEndpoint
 */
NamespaceProperties.prototype['serviceBusEndpoint'] = undefined;

/**
 * Status of the namespace. It can be any of these values:1 = Created/Active2 = Creating3 = Suspended4 = Deleting
 * @member {String} status
 */
NamespaceProperties.prototype['status'] = undefined;

/**
 * The Id of the Azure subscription associated with the namespace.
 * @member {String} subscriptionId
 */
NamespaceProperties.prototype['subscriptionId'] = undefined;





/**
 * Allowed values for the <code>namespaceType</code> property.
 * @enum {String}
 * @readonly
 */
NamespaceProperties['NamespaceTypeEnum'] = {

    /**
     * value: "Messaging"
     * @const
     */
    "Messaging": "Messaging",

    /**
     * value: "NotificationHub"
     * @const
     */
    "NotificationHub": "NotificationHub"
};



export default NamespaceProperties;

