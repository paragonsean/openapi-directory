/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAINotificationHubsApi_H
#define OAI_OAINotificationHubsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICheckAvailabilityParameters.h"
#include "OAICheckAvailabilityResult.h"
#include "OAIDebugSendResponse.h"
#include "OAINotificationHubCreateOrUpdateParameters.h"
#include "OAINotificationHubListResult.h"
#include "OAINotificationHubPatchParameters.h"
#include "OAINotificationHubResource.h"
#include "OAIObject.h"
#include "OAIPnsCredentialsResource.h"
#include "OAIPolicykeyResource.h"
#include "OAIResourceListKeys.h"
#include "OAISharedAccessAuthorizationRuleCreateOrUpdateParameters.h"
#include "OAISharedAccessAuthorizationRuleListResult.h"
#include "OAISharedAccessAuthorizationRuleResource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAINotificationHubsApi : public QObject {
    Q_OBJECT

public:
    OAINotificationHubsApi(const int timeOut = 0);
    ~OAINotificationHubsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAICheckAvailabilityParameters [required]
    */
    virtual void notificationHubsCheckNotificationHubAvailability(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id, const OAICheckAvailabilityParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINotificationHubCreateOrUpdateParameters [required]
    */
    virtual void notificationHubsCreateOrUpdate(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id, const OAINotificationHubCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAISharedAccessAuthorizationRuleCreateOrUpdateParameters [required]
    */
    virtual void notificationHubsCreateOrUpdateAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAISharedAccessAuthorizationRuleCreateOrUpdateParameters &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIObject [optional]
    */
    virtual void notificationHubsDebugSend(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAIObject> &parameters = ::OpenAPI::OptionalParam<OAIObject>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsDelete(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsDeleteAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsGet(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsGetAuthorizationRule(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsGetPnsCredentials(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsList(const QString &resource_group_name, const QString &namespace_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsListAuthorizationRules(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void notificationHubsListKeys(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAINotificationHubPatchParameters [optional]
    */
    virtual void notificationHubsPatch(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<OAINotificationHubPatchParameters> &parameters = ::OpenAPI::OptionalParam<OAINotificationHubPatchParameters>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  namespace_name QString [required]
    * @param[in]  notification_hub_name QString [required]
    * @param[in]  authorization_rule_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIPolicykeyResource [required]
    */
    virtual void notificationHubsRegenerateKeys(const QString &resource_group_name, const QString &namespace_name, const QString &notification_hub_name, const QString &authorization_rule_name, const QString &api_version, const QString &subscription_id, const OAIPolicykeyResource &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void notificationHubsCheckNotificationHubAvailabilityCallback(OAIHttpRequestWorker *worker);
    void notificationHubsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void notificationHubsCreateOrUpdateAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void notificationHubsDebugSendCallback(OAIHttpRequestWorker *worker);
    void notificationHubsDeleteCallback(OAIHttpRequestWorker *worker);
    void notificationHubsDeleteAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void notificationHubsGetCallback(OAIHttpRequestWorker *worker);
    void notificationHubsGetAuthorizationRuleCallback(OAIHttpRequestWorker *worker);
    void notificationHubsGetPnsCredentialsCallback(OAIHttpRequestWorker *worker);
    void notificationHubsListCallback(OAIHttpRequestWorker *worker);
    void notificationHubsListAuthorizationRulesCallback(OAIHttpRequestWorker *worker);
    void notificationHubsListKeysCallback(OAIHttpRequestWorker *worker);
    void notificationHubsPatchCallback(OAIHttpRequestWorker *worker);
    void notificationHubsRegenerateKeysCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void notificationHubsCheckNotificationHubAvailabilitySignal(OAICheckAvailabilityResult summary);
    void notificationHubsCreateOrUpdateSignal(OAINotificationHubResource summary);
    void notificationHubsCreateOrUpdateAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void notificationHubsDebugSendSignal(OAIDebugSendResponse summary);
    void notificationHubsDeleteSignal();
    void notificationHubsDeleteAuthorizationRuleSignal();
    void notificationHubsGetSignal(OAINotificationHubResource summary);
    void notificationHubsGetAuthorizationRuleSignal(OAISharedAccessAuthorizationRuleResource summary);
    void notificationHubsGetPnsCredentialsSignal(OAIPnsCredentialsResource summary);
    void notificationHubsListSignal(OAINotificationHubListResult summary);
    void notificationHubsListAuthorizationRulesSignal(OAISharedAccessAuthorizationRuleListResult summary);
    void notificationHubsListKeysSignal(OAIResourceListKeys summary);
    void notificationHubsPatchSignal(OAINotificationHubResource summary);
    void notificationHubsRegenerateKeysSignal(OAIResourceListKeys summary);


    void notificationHubsCheckNotificationHubAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAICheckAvailabilityResult summary);
    void notificationHubsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAINotificationHubResource summary);
    void notificationHubsCreateOrUpdateAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void notificationHubsDebugSendSignalFull(OAIHttpRequestWorker *worker, OAIDebugSendResponse summary);
    void notificationHubsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void notificationHubsDeleteAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker);
    void notificationHubsGetSignalFull(OAIHttpRequestWorker *worker, OAINotificationHubResource summary);
    void notificationHubsGetAuthorizationRuleSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleResource summary);
    void notificationHubsGetPnsCredentialsSignalFull(OAIHttpRequestWorker *worker, OAIPnsCredentialsResource summary);
    void notificationHubsListSignalFull(OAIHttpRequestWorker *worker, OAINotificationHubListResult summary);
    void notificationHubsListAuthorizationRulesSignalFull(OAIHttpRequestWorker *worker, OAISharedAccessAuthorizationRuleListResult summary);
    void notificationHubsListKeysSignalFull(OAIHttpRequestWorker *worker, OAIResourceListKeys summary);
    void notificationHubsPatchSignalFull(OAIHttpRequestWorker *worker, OAINotificationHubResource summary);
    void notificationHubsRegenerateKeysSignalFull(OAIHttpRequestWorker *worker, OAIResourceListKeys summary);

    Q_DECL_DEPRECATED_X("Use notificationHubsCheckNotificationHubAvailabilitySignalError() instead")
    void notificationHubsCheckNotificationHubAvailabilitySignalE(OAICheckAvailabilityResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsCheckNotificationHubAvailabilitySignalError(OAICheckAvailabilityResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsCreateOrUpdateSignalError() instead")
    void notificationHubsCreateOrUpdateSignalE(OAINotificationHubResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsCreateOrUpdateSignalError(OAINotificationHubResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsCreateOrUpdateAuthorizationRuleSignalError() instead")
    void notificationHubsCreateOrUpdateAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsCreateOrUpdateAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsDebugSendSignalError() instead")
    void notificationHubsDebugSendSignalE(OAIDebugSendResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsDebugSendSignalError(OAIDebugSendResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsDeleteSignalError() instead")
    void notificationHubsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsDeleteAuthorizationRuleSignalError() instead")
    void notificationHubsDeleteAuthorizationRuleSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsDeleteAuthorizationRuleSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsGetSignalError() instead")
    void notificationHubsGetSignalE(OAINotificationHubResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsGetSignalError(OAINotificationHubResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsGetAuthorizationRuleSignalError() instead")
    void notificationHubsGetAuthorizationRuleSignalE(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsGetAuthorizationRuleSignalError(OAISharedAccessAuthorizationRuleResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsGetPnsCredentialsSignalError() instead")
    void notificationHubsGetPnsCredentialsSignalE(OAIPnsCredentialsResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsGetPnsCredentialsSignalError(OAIPnsCredentialsResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsListSignalError() instead")
    void notificationHubsListSignalE(OAINotificationHubListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsListSignalError(OAINotificationHubListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsListAuthorizationRulesSignalError() instead")
    void notificationHubsListAuthorizationRulesSignalE(OAISharedAccessAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsListAuthorizationRulesSignalError(OAISharedAccessAuthorizationRuleListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsListKeysSignalError() instead")
    void notificationHubsListKeysSignalE(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsListKeysSignalError(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsPatchSignalError() instead")
    void notificationHubsPatchSignalE(OAINotificationHubResource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsPatchSignalError(OAINotificationHubResource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsRegenerateKeysSignalError() instead")
    void notificationHubsRegenerateKeysSignalE(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsRegenerateKeysSignalError(OAIResourceListKeys summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use notificationHubsCheckNotificationHubAvailabilitySignalErrorFull() instead")
    void notificationHubsCheckNotificationHubAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsCheckNotificationHubAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsCreateOrUpdateSignalErrorFull() instead")
    void notificationHubsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsCreateOrUpdateAuthorizationRuleSignalErrorFull() instead")
    void notificationHubsCreateOrUpdateAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsCreateOrUpdateAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsDebugSendSignalErrorFull() instead")
    void notificationHubsDebugSendSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsDebugSendSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsDeleteSignalErrorFull() instead")
    void notificationHubsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsDeleteAuthorizationRuleSignalErrorFull() instead")
    void notificationHubsDeleteAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsDeleteAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsGetSignalErrorFull() instead")
    void notificationHubsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsGetAuthorizationRuleSignalErrorFull() instead")
    void notificationHubsGetAuthorizationRuleSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsGetAuthorizationRuleSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsGetPnsCredentialsSignalErrorFull() instead")
    void notificationHubsGetPnsCredentialsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsGetPnsCredentialsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsListSignalErrorFull() instead")
    void notificationHubsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsListAuthorizationRulesSignalErrorFull() instead")
    void notificationHubsListAuthorizationRulesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsListAuthorizationRulesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsListKeysSignalErrorFull() instead")
    void notificationHubsListKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsListKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsPatchSignalErrorFull() instead")
    void notificationHubsPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use notificationHubsRegenerateKeysSignalErrorFull() instead")
    void notificationHubsRegenerateKeysSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void notificationHubsRegenerateKeysSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
