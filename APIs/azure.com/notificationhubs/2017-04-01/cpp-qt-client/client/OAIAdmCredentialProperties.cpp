/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAdmCredentialProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAdmCredentialProperties::OAIAdmCredentialProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAdmCredentialProperties::OAIAdmCredentialProperties() {
    this->initializeModel();
}

OAIAdmCredentialProperties::~OAIAdmCredentialProperties() {}

void OAIAdmCredentialProperties::initializeModel() {

    m_auth_token_url_isSet = false;
    m_auth_token_url_isValid = false;

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;
}

void OAIAdmCredentialProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAdmCredentialProperties::fromJsonObject(QJsonObject json) {

    m_auth_token_url_isValid = ::OpenAPI::fromJsonValue(m_auth_token_url, json[QString("authTokenUrl")]);
    m_auth_token_url_isSet = !json[QString("authTokenUrl")].isNull() && m_auth_token_url_isValid;

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("clientId")]);
    m_client_id_isSet = !json[QString("clientId")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("clientSecret")]);
    m_client_secret_isSet = !json[QString("clientSecret")].isNull() && m_client_secret_isValid;
}

QString OAIAdmCredentialProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAdmCredentialProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_token_url_isSet) {
        obj.insert(QString("authTokenUrl"), ::OpenAPI::toJsonValue(m_auth_token_url));
    }
    if (m_client_id_isSet) {
        obj.insert(QString("clientId"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("clientSecret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    return obj;
}

QString OAIAdmCredentialProperties::getAuthTokenUrl() const {
    return m_auth_token_url;
}
void OAIAdmCredentialProperties::setAuthTokenUrl(const QString &auth_token_url) {
    m_auth_token_url = auth_token_url;
    m_auth_token_url_isSet = true;
}

bool OAIAdmCredentialProperties::is_auth_token_url_Set() const{
    return m_auth_token_url_isSet;
}

bool OAIAdmCredentialProperties::is_auth_token_url_Valid() const{
    return m_auth_token_url_isValid;
}

QString OAIAdmCredentialProperties::getClientId() const {
    return m_client_id;
}
void OAIAdmCredentialProperties::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAdmCredentialProperties::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAdmCredentialProperties::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAdmCredentialProperties::getClientSecret() const {
    return m_client_secret;
}
void OAIAdmCredentialProperties::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAIAdmCredentialProperties::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAIAdmCredentialProperties::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

bool OAIAdmCredentialProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_token_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAdmCredentialProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
