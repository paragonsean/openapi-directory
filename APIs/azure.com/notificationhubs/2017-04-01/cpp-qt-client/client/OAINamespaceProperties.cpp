/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINamespaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINamespaceProperties::OAINamespaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINamespaceProperties::OAINamespaceProperties() {
    this->initializeModel();
}

OAINamespaceProperties::~OAINamespaceProperties() {}

void OAINamespaceProperties::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_critical_isSet = false;
    m_critical_isValid = false;

    m_data_center_isSet = false;
    m_data_center_isValid = false;

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_metric_id_isSet = false;
    m_metric_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_namespace_type_isSet = false;
    m_namespace_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_scale_unit_isSet = false;
    m_scale_unit_isValid = false;

    m_service_bus_endpoint_isSet = false;
    m_service_bus_endpoint_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAINamespaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINamespaceProperties::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_critical_isValid = ::OpenAPI::fromJsonValue(m_critical, json[QString("critical")]);
    m_critical_isSet = !json[QString("critical")].isNull() && m_critical_isValid;

    m_data_center_isValid = ::OpenAPI::fromJsonValue(m_data_center, json[QString("dataCenter")]);
    m_data_center_isSet = !json[QString("dataCenter")].isNull() && m_data_center_isValid;

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_metric_id_isValid = ::OpenAPI::fromJsonValue(m_metric_id, json[QString("metricId")]);
    m_metric_id_isSet = !json[QString("metricId")].isNull() && m_metric_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_namespace_type_isValid = ::OpenAPI::fromJsonValue(m_namespace_type, json[QString("namespaceType")]);
    m_namespace_type_isSet = !json[QString("namespaceType")].isNull() && m_namespace_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_scale_unit_isValid = ::OpenAPI::fromJsonValue(m_scale_unit, json[QString("scaleUnit")]);
    m_scale_unit_isSet = !json[QString("scaleUnit")].isNull() && m_scale_unit_isValid;

    m_service_bus_endpoint_isValid = ::OpenAPI::fromJsonValue(m_service_bus_endpoint, json[QString("serviceBusEndpoint")]);
    m_service_bus_endpoint_isSet = !json[QString("serviceBusEndpoint")].isNull() && m_service_bus_endpoint_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updatedAt")]);
    m_updated_at_isSet = !json[QString("updatedAt")].isNull() && m_updated_at_isValid;
}

QString OAINamespaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINamespaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_critical_isSet) {
        obj.insert(QString("critical"), ::OpenAPI::toJsonValue(m_critical));
    }
    if (m_data_center_isSet) {
        obj.insert(QString("dataCenter"), ::OpenAPI::toJsonValue(m_data_center));
    }
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_metric_id_isSet) {
        obj.insert(QString("metricId"), ::OpenAPI::toJsonValue(m_metric_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_namespace_type_isSet) {
        obj.insert(QString("namespaceType"), ::OpenAPI::toJsonValue(m_namespace_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_scale_unit_isSet) {
        obj.insert(QString("scaleUnit"), ::OpenAPI::toJsonValue(m_scale_unit));
    }
    if (m_service_bus_endpoint_isSet) {
        obj.insert(QString("serviceBusEndpoint"), ::OpenAPI::toJsonValue(m_service_bus_endpoint));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updatedAt"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QDateTime OAINamespaceProperties::getCreatedAt() const {
    return m_created_at;
}
void OAINamespaceProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAINamespaceProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAINamespaceProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAINamespaceProperties::isCritical() const {
    return m_critical;
}
void OAINamespaceProperties::setCritical(const bool &critical) {
    m_critical = critical;
    m_critical_isSet = true;
}

bool OAINamespaceProperties::is_critical_Set() const{
    return m_critical_isSet;
}

bool OAINamespaceProperties::is_critical_Valid() const{
    return m_critical_isValid;
}

QString OAINamespaceProperties::getDataCenter() const {
    return m_data_center;
}
void OAINamespaceProperties::setDataCenter(const QString &data_center) {
    m_data_center = data_center;
    m_data_center_isSet = true;
}

bool OAINamespaceProperties::is_data_center_Set() const{
    return m_data_center_isSet;
}

bool OAINamespaceProperties::is_data_center_Valid() const{
    return m_data_center_isValid;
}

bool OAINamespaceProperties::isEnabled() const {
    return m_enabled;
}
void OAINamespaceProperties::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAINamespaceProperties::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAINamespaceProperties::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAINamespaceProperties::getMetricId() const {
    return m_metric_id;
}
void OAINamespaceProperties::setMetricId(const QString &metric_id) {
    m_metric_id = metric_id;
    m_metric_id_isSet = true;
}

bool OAINamespaceProperties::is_metric_id_Set() const{
    return m_metric_id_isSet;
}

bool OAINamespaceProperties::is_metric_id_Valid() const{
    return m_metric_id_isValid;
}

QString OAINamespaceProperties::getName() const {
    return m_name;
}
void OAINamespaceProperties::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAINamespaceProperties::is_name_Set() const{
    return m_name_isSet;
}

bool OAINamespaceProperties::is_name_Valid() const{
    return m_name_isValid;
}

QString OAINamespaceProperties::getNamespaceType() const {
    return m_namespace_type;
}
void OAINamespaceProperties::setNamespaceType(const QString &namespace_type) {
    m_namespace_type = namespace_type;
    m_namespace_type_isSet = true;
}

bool OAINamespaceProperties::is_namespace_type_Set() const{
    return m_namespace_type_isSet;
}

bool OAINamespaceProperties::is_namespace_type_Valid() const{
    return m_namespace_type_isValid;
}

QString OAINamespaceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAINamespaceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAINamespaceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAINamespaceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAINamespaceProperties::getRegion() const {
    return m_region;
}
void OAINamespaceProperties::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAINamespaceProperties::is_region_Set() const{
    return m_region_isSet;
}

bool OAINamespaceProperties::is_region_Valid() const{
    return m_region_isValid;
}

QString OAINamespaceProperties::getScaleUnit() const {
    return m_scale_unit;
}
void OAINamespaceProperties::setScaleUnit(const QString &scale_unit) {
    m_scale_unit = scale_unit;
    m_scale_unit_isSet = true;
}

bool OAINamespaceProperties::is_scale_unit_Set() const{
    return m_scale_unit_isSet;
}

bool OAINamespaceProperties::is_scale_unit_Valid() const{
    return m_scale_unit_isValid;
}

QString OAINamespaceProperties::getServiceBusEndpoint() const {
    return m_service_bus_endpoint;
}
void OAINamespaceProperties::setServiceBusEndpoint(const QString &service_bus_endpoint) {
    m_service_bus_endpoint = service_bus_endpoint;
    m_service_bus_endpoint_isSet = true;
}

bool OAINamespaceProperties::is_service_bus_endpoint_Set() const{
    return m_service_bus_endpoint_isSet;
}

bool OAINamespaceProperties::is_service_bus_endpoint_Valid() const{
    return m_service_bus_endpoint_isValid;
}

QString OAINamespaceProperties::getStatus() const {
    return m_status;
}
void OAINamespaceProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAINamespaceProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAINamespaceProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAINamespaceProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAINamespaceProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAINamespaceProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAINamespaceProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QDateTime OAINamespaceProperties::getUpdatedAt() const {
    return m_updated_at;
}
void OAINamespaceProperties::setUpdatedAt(const QDateTime &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAINamespaceProperties::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAINamespaceProperties::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAINamespaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_critical_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_namespace_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scale_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_bus_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINamespaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
