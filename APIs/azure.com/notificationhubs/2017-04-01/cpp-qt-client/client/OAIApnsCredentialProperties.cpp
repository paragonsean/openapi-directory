/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApnsCredentialProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApnsCredentialProperties::OAIApnsCredentialProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApnsCredentialProperties::OAIApnsCredentialProperties() {
    this->initializeModel();
}

OAIApnsCredentialProperties::~OAIApnsCredentialProperties() {}

void OAIApnsCredentialProperties::initializeModel() {

    m_apns_certificate_isSet = false;
    m_apns_certificate_isValid = false;

    m_app_id_isSet = false;
    m_app_id_isValid = false;

    m_app_name_isSet = false;
    m_app_name_isValid = false;

    m_certificate_key_isSet = false;
    m_certificate_key_isValid = false;

    m_endpoint_isSet = false;
    m_endpoint_isValid = false;

    m_key_id_isSet = false;
    m_key_id_isValid = false;

    m_thumbprint_isSet = false;
    m_thumbprint_isValid = false;

    m_token_isSet = false;
    m_token_isValid = false;
}

void OAIApnsCredentialProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApnsCredentialProperties::fromJsonObject(QJsonObject json) {

    m_apns_certificate_isValid = ::OpenAPI::fromJsonValue(m_apns_certificate, json[QString("apnsCertificate")]);
    m_apns_certificate_isSet = !json[QString("apnsCertificate")].isNull() && m_apns_certificate_isValid;

    m_app_id_isValid = ::OpenAPI::fromJsonValue(m_app_id, json[QString("appId")]);
    m_app_id_isSet = !json[QString("appId")].isNull() && m_app_id_isValid;

    m_app_name_isValid = ::OpenAPI::fromJsonValue(m_app_name, json[QString("appName")]);
    m_app_name_isSet = !json[QString("appName")].isNull() && m_app_name_isValid;

    m_certificate_key_isValid = ::OpenAPI::fromJsonValue(m_certificate_key, json[QString("certificateKey")]);
    m_certificate_key_isSet = !json[QString("certificateKey")].isNull() && m_certificate_key_isValid;

    m_endpoint_isValid = ::OpenAPI::fromJsonValue(m_endpoint, json[QString("endpoint")]);
    m_endpoint_isSet = !json[QString("endpoint")].isNull() && m_endpoint_isValid;

    m_key_id_isValid = ::OpenAPI::fromJsonValue(m_key_id, json[QString("keyId")]);
    m_key_id_isSet = !json[QString("keyId")].isNull() && m_key_id_isValid;

    m_thumbprint_isValid = ::OpenAPI::fromJsonValue(m_thumbprint, json[QString("thumbprint")]);
    m_thumbprint_isSet = !json[QString("thumbprint")].isNull() && m_thumbprint_isValid;

    m_token_isValid = ::OpenAPI::fromJsonValue(m_token, json[QString("token")]);
    m_token_isSet = !json[QString("token")].isNull() && m_token_isValid;
}

QString OAIApnsCredentialProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApnsCredentialProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_apns_certificate_isSet) {
        obj.insert(QString("apnsCertificate"), ::OpenAPI::toJsonValue(m_apns_certificate));
    }
    if (m_app_id_isSet) {
        obj.insert(QString("appId"), ::OpenAPI::toJsonValue(m_app_id));
    }
    if (m_app_name_isSet) {
        obj.insert(QString("appName"), ::OpenAPI::toJsonValue(m_app_name));
    }
    if (m_certificate_key_isSet) {
        obj.insert(QString("certificateKey"), ::OpenAPI::toJsonValue(m_certificate_key));
    }
    if (m_endpoint_isSet) {
        obj.insert(QString("endpoint"), ::OpenAPI::toJsonValue(m_endpoint));
    }
    if (m_key_id_isSet) {
        obj.insert(QString("keyId"), ::OpenAPI::toJsonValue(m_key_id));
    }
    if (m_thumbprint_isSet) {
        obj.insert(QString("thumbprint"), ::OpenAPI::toJsonValue(m_thumbprint));
    }
    if (m_token_isSet) {
        obj.insert(QString("token"), ::OpenAPI::toJsonValue(m_token));
    }
    return obj;
}

QString OAIApnsCredentialProperties::getApnsCertificate() const {
    return m_apns_certificate;
}
void OAIApnsCredentialProperties::setApnsCertificate(const QString &apns_certificate) {
    m_apns_certificate = apns_certificate;
    m_apns_certificate_isSet = true;
}

bool OAIApnsCredentialProperties::is_apns_certificate_Set() const{
    return m_apns_certificate_isSet;
}

bool OAIApnsCredentialProperties::is_apns_certificate_Valid() const{
    return m_apns_certificate_isValid;
}

QString OAIApnsCredentialProperties::getAppId() const {
    return m_app_id;
}
void OAIApnsCredentialProperties::setAppId(const QString &app_id) {
    m_app_id = app_id;
    m_app_id_isSet = true;
}

bool OAIApnsCredentialProperties::is_app_id_Set() const{
    return m_app_id_isSet;
}

bool OAIApnsCredentialProperties::is_app_id_Valid() const{
    return m_app_id_isValid;
}

QString OAIApnsCredentialProperties::getAppName() const {
    return m_app_name;
}
void OAIApnsCredentialProperties::setAppName(const QString &app_name) {
    m_app_name = app_name;
    m_app_name_isSet = true;
}

bool OAIApnsCredentialProperties::is_app_name_Set() const{
    return m_app_name_isSet;
}

bool OAIApnsCredentialProperties::is_app_name_Valid() const{
    return m_app_name_isValid;
}

QString OAIApnsCredentialProperties::getCertificateKey() const {
    return m_certificate_key;
}
void OAIApnsCredentialProperties::setCertificateKey(const QString &certificate_key) {
    m_certificate_key = certificate_key;
    m_certificate_key_isSet = true;
}

bool OAIApnsCredentialProperties::is_certificate_key_Set() const{
    return m_certificate_key_isSet;
}

bool OAIApnsCredentialProperties::is_certificate_key_Valid() const{
    return m_certificate_key_isValid;
}

QString OAIApnsCredentialProperties::getEndpoint() const {
    return m_endpoint;
}
void OAIApnsCredentialProperties::setEndpoint(const QString &endpoint) {
    m_endpoint = endpoint;
    m_endpoint_isSet = true;
}

bool OAIApnsCredentialProperties::is_endpoint_Set() const{
    return m_endpoint_isSet;
}

bool OAIApnsCredentialProperties::is_endpoint_Valid() const{
    return m_endpoint_isValid;
}

QString OAIApnsCredentialProperties::getKeyId() const {
    return m_key_id;
}
void OAIApnsCredentialProperties::setKeyId(const QString &key_id) {
    m_key_id = key_id;
    m_key_id_isSet = true;
}

bool OAIApnsCredentialProperties::is_key_id_Set() const{
    return m_key_id_isSet;
}

bool OAIApnsCredentialProperties::is_key_id_Valid() const{
    return m_key_id_isValid;
}

QString OAIApnsCredentialProperties::getThumbprint() const {
    return m_thumbprint;
}
void OAIApnsCredentialProperties::setThumbprint(const QString &thumbprint) {
    m_thumbprint = thumbprint;
    m_thumbprint_isSet = true;
}

bool OAIApnsCredentialProperties::is_thumbprint_Set() const{
    return m_thumbprint_isSet;
}

bool OAIApnsCredentialProperties::is_thumbprint_Valid() const{
    return m_thumbprint_isValid;
}

QString OAIApnsCredentialProperties::getToken() const {
    return m_token;
}
void OAIApnsCredentialProperties::setToken(const QString &token) {
    m_token = token;
    m_token_isSet = true;
}

bool OAIApnsCredentialProperties::is_token_Set() const{
    return m_token_isSet;
}

bool OAIApnsCredentialProperties::is_token_Valid() const{
    return m_token_isValid;
}

bool OAIApnsCredentialProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_apns_certificate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_app_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_certificate_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumbprint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApnsCredentialProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
