/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CheckAvailabilityParameters from '../model/CheckAvailabilityParameters';
import CheckAvailabilityResult from '../model/CheckAvailabilityResult';
import NamespaceCreateOrUpdateParameters from '../model/NamespaceCreateOrUpdateParameters';
import NamespaceListResult from '../model/NamespaceListResult';
import NamespacePatchParameters from '../model/NamespacePatchParameters';
import NamespaceResource from '../model/NamespaceResource';
import PolicykeyResource from '../model/PolicykeyResource';
import ResourceListKeys from '../model/ResourceListKeys';
import SharedAccessAuthorizationRuleCreateOrUpdateParameters from '../model/SharedAccessAuthorizationRuleCreateOrUpdateParameters';
import SharedAccessAuthorizationRuleListResult from '../model/SharedAccessAuthorizationRuleListResult';
import SharedAccessAuthorizationRuleResource from '../model/SharedAccessAuthorizationRuleResource';

/**
* Namespaces service.
* @module api/NamespacesApi
* @version 2017-04-01
*/
export default class NamespacesApi {

    /**
    * Constructs a new NamespacesApi. 
    * @alias module:api/NamespacesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the namespacesCheckAvailability operation.
     * @callback module:api/NamespacesApi~namespacesCheckAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CheckAvailabilityResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Checks the availability of the given service namespace across all Azure subscriptions. This is useful because the domain name is created based on the service namespace name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/CheckAvailabilityParameters} parameters The namespace name.
     * @param {module:api/NamespacesApi~namespacesCheckAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CheckAvailabilityResult}
     */
    namespacesCheckAvailability(apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesCheckAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesCheckAvailability");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling namespacesCheckAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CheckAvailabilityResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/checkNamespaceAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesCreateOrUpdate operation.
     * @callback module:api/NamespacesApi~namespacesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates/Updates a service namespace. Once created, this namespace's resource manifest is immutable. This operation is idempotent.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/NamespaceCreateOrUpdateParameters} parameters Parameters supplied to create a Namespace Resource.
     * @param {module:api/NamespacesApi~namespacesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceResource}
     */
    namespacesCreateOrUpdate(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesCreateOrUpdate");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling namespacesCreateOrUpdate");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NamespaceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesCreateOrUpdateAuthorizationRule operation.
     * @callback module:api/NamespacesApi~namespacesCreateOrUpdateAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an authorization rule for a namespace
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} authorizationRuleName Authorization Rule Name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/SharedAccessAuthorizationRuleCreateOrUpdateParameters} parameters The shared access authorization rule.
     * @param {module:api/NamespacesApi~namespacesCreateOrUpdateAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    namespacesCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling namespacesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesCreateOrUpdateAuthorizationRule");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling namespacesCreateOrUpdateAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesDelete operation.
     * @callback module:api/NamespacesApi~namespacesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the namespace.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    namespacesDelete(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesDelete");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesDelete");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesDeleteAuthorizationRule operation.
     * @callback module:api/NamespacesApi~namespacesDeleteAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a namespace authorization rule
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} authorizationRuleName Authorization Rule Name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesDeleteAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     */
    namespacesDeleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesDeleteAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesDeleteAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling namespacesDeleteAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesDeleteAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesDeleteAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesGet operation.
     * @callback module:api/NamespacesApi~namespacesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the description for the specified namespace.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceResource}
     */
    namespacesGet(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesGet");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesGet");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamespaceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesGetAuthorizationRule operation.
     * @callback module:api/NamespacesApi~namespacesGetAuthorizationRuleCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an authorization rule for a namespace by name.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name
     * @param {String} authorizationRuleName Authorization rule name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesGetAuthorizationRuleCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleResource}
     */
    namespacesGetAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesGetAuthorizationRule");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesGetAuthorizationRule");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling namespacesGetAuthorizationRule");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesGetAuthorizationRule");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesGetAuthorizationRule");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesList operation.
     * @callback module:api/NamespacesApi~namespacesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the available namespaces within a resourceGroup.
     * @param {String} resourceGroupName The name of the resource group. If resourceGroupName value is null the method lists all the namespaces within subscription
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceListResult}
     */
    namespacesList(resourceGroupName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesList");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamespaceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesListAll operation.
     * @callback module:api/NamespacesApi~namespacesListAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesListAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceListResult}
     */
    namespacesListAll(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesListAll");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesListAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NamespaceListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.NotificationHubs/namespaces', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesListAuthorizationRules operation.
     * @callback module:api/NamespacesApi~namespacesListAuthorizationRulesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the authorization rules for a namespace.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesListAuthorizationRulesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleListResult}
     */
    namespacesListAuthorizationRules(resourceGroupName, namespaceName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesListAuthorizationRules");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesListAuthorizationRules");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesListAuthorizationRules");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesListAuthorizationRules");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesListKeys operation.
     * @callback module:api/NamespacesApi~namespacesListKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedAccessAuthorizationRuleListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace 
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} authorizationRuleName The connection string of the namespace for the specified authorizationRule.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/NamespacesApi~namespacesListKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedAccessAuthorizationRuleListResult}
     */
    namespacesListKeys(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesListKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesListKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling namespacesListKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesListKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesListKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SharedAccessAuthorizationRuleListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/listKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesPatch operation.
     * @callback module:api/NamespacesApi~namespacesPatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NamespaceResource} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the existing namespace
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/NamespacePatchParameters} parameters Parameters supplied to patch a Namespace Resource.
     * @param {module:api/NamespacesApi~namespacesPatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NamespaceResource}
     */
    namespacesPatch(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesPatch");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesPatch");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesPatch");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesPatch");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling namespacesPatch");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = NamespaceResource;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the namespacesRegenerateKeys operation.
     * @callback module:api/NamespacesApi~namespacesRegenerateKeysCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceListKeys} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} namespaceName The namespace name.
     * @param {String} authorizationRuleName The connection string of the namespace for the specified authorizationRule.
     * @param {String} apiVersion Client Api Version.
     * @param {String} subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/PolicykeyResource} parameters Parameters supplied to regenerate the Namespace Authorization Rule Key.
     * @param {module:api/NamespacesApi~namespacesRegenerateKeysCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceListKeys}
     */
    namespacesRegenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling namespacesRegenerateKeys");
      }
      // verify the required parameter 'namespaceName' is set
      if (namespaceName === undefined || namespaceName === null) {
        throw new Error("Missing the required parameter 'namespaceName' when calling namespacesRegenerateKeys");
      }
      // verify the required parameter 'authorizationRuleName' is set
      if (authorizationRuleName === undefined || authorizationRuleName === null) {
        throw new Error("Missing the required parameter 'authorizationRuleName' when calling namespacesRegenerateKeys");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling namespacesRegenerateKeys");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling namespacesRegenerateKeys");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling namespacesRegenerateKeys");
      }

      let pathParams = {
        'resourceGroupName': resourceGroupName,
        'namespaceName': namespaceName,
        'authorizationRuleName': authorizationRuleName,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ResourceListKeys;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.NotificationHubs/namespaces/{namespaceName}/AuthorizationRules/{authorizationRuleName}/regenerateKeys', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
