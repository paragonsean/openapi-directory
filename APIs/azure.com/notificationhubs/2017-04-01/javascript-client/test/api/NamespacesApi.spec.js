/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NotificationHubsManagementClient);
  }
}(this, function(expect, NotificationHubsManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NotificationHubsManagementClient.NamespacesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NamespacesApi', function() {
    describe('namespacesCheckAvailability', function() {
      it('should call namespacesCheckAvailability successfully', function(done) {
        //uncomment below and update the code to test namespacesCheckAvailability
        //instance.namespacesCheckAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesCreateOrUpdate', function() {
      it('should call namespacesCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test namespacesCreateOrUpdate
        //instance.namespacesCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesCreateOrUpdateAuthorizationRule', function() {
      it('should call namespacesCreateOrUpdateAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test namespacesCreateOrUpdateAuthorizationRule
        //instance.namespacesCreateOrUpdateAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesDelete', function() {
      it('should call namespacesDelete successfully', function(done) {
        //uncomment below and update the code to test namespacesDelete
        //instance.namespacesDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesDeleteAuthorizationRule', function() {
      it('should call namespacesDeleteAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test namespacesDeleteAuthorizationRule
        //instance.namespacesDeleteAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesGet', function() {
      it('should call namespacesGet successfully', function(done) {
        //uncomment below and update the code to test namespacesGet
        //instance.namespacesGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesGetAuthorizationRule', function() {
      it('should call namespacesGetAuthorizationRule successfully', function(done) {
        //uncomment below and update the code to test namespacesGetAuthorizationRule
        //instance.namespacesGetAuthorizationRule(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesList', function() {
      it('should call namespacesList successfully', function(done) {
        //uncomment below and update the code to test namespacesList
        //instance.namespacesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesListAll', function() {
      it('should call namespacesListAll successfully', function(done) {
        //uncomment below and update the code to test namespacesListAll
        //instance.namespacesListAll(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesListAuthorizationRules', function() {
      it('should call namespacesListAuthorizationRules successfully', function(done) {
        //uncomment below and update the code to test namespacesListAuthorizationRules
        //instance.namespacesListAuthorizationRules(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesListKeys', function() {
      it('should call namespacesListKeys successfully', function(done) {
        //uncomment below and update the code to test namespacesListKeys
        //instance.namespacesListKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesPatch', function() {
      it('should call namespacesPatch successfully', function(done) {
        //uncomment below and update the code to test namespacesPatch
        //instance.namespacesPatch(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('namespacesRegenerateKeys', function() {
      it('should call namespacesRegenerateKeys successfully', function(done) {
        //uncomment below and update the code to test namespacesRegenerateKeys
        //instance.namespacesRegenerateKeys(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
