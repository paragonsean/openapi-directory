/**
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NotificationHubsManagementClient);
  }
}(this, function(expect, NotificationHubsManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NotificationHubsManagementClient.NamespaceProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('NamespaceProperties', function() {
    it('should create an instance of NamespaceProperties', function() {
      // uncomment below and update the code to test NamespaceProperties
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be.a(NotificationHubsManagementClient.NamespaceProperties);
    });

    it('should have the property createdAt (base name: "createdAt")', function() {
      // uncomment below and update the code to test the property createdAt
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property critical (base name: "critical")', function() {
      // uncomment below and update the code to test the property critical
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property dataCenter (base name: "dataCenter")', function() {
      // uncomment below and update the code to test the property dataCenter
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property enabled (base name: "enabled")', function() {
      // uncomment below and update the code to test the property enabled
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property metricId (base name: "metricId")', function() {
      // uncomment below and update the code to test the property metricId
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property namespaceType (base name: "namespaceType")', function() {
      // uncomment below and update the code to test the property namespaceType
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property region (base name: "region")', function() {
      // uncomment below and update the code to test the property region
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property scaleUnit (base name: "scaleUnit")', function() {
      // uncomment below and update the code to test the property scaleUnit
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property serviceBusEndpoint (base name: "serviceBusEndpoint")', function() {
      // uncomment below and update the code to test the property serviceBusEndpoint
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property subscriptionId (base name: "subscriptionId")', function() {
      // uncomment below and update the code to test the property subscriptionId
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

    it('should have the property updatedAt (base name: "updatedAt")', function() {
      // uncomment below and update the code to test the property updatedAt
      //var instance = new NotificationHubsManagementClient.NamespaceProperties();
      //expect(instance).to.be();
    });

  });

}));
