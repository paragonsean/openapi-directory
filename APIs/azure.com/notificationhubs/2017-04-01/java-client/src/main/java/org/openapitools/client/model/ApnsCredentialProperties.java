/*
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Description of a NotificationHub ApnsCredential.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:04.342792-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApnsCredentialProperties {
  public static final String SERIALIZED_NAME_APNS_CERTIFICATE = "apnsCertificate";
  @SerializedName(SERIALIZED_NAME_APNS_CERTIFICATE)
  private String apnsCertificate;

  public static final String SERIALIZED_NAME_APP_ID = "appId";
  @SerializedName(SERIALIZED_NAME_APP_ID)
  private String appId;

  public static final String SERIALIZED_NAME_APP_NAME = "appName";
  @SerializedName(SERIALIZED_NAME_APP_NAME)
  private String appName;

  public static final String SERIALIZED_NAME_CERTIFICATE_KEY = "certificateKey";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_KEY)
  private String certificateKey;

  public static final String SERIALIZED_NAME_ENDPOINT = "endpoint";
  @SerializedName(SERIALIZED_NAME_ENDPOINT)
  private String endpoint;

  public static final String SERIALIZED_NAME_KEY_ID = "keyId";
  @SerializedName(SERIALIZED_NAME_KEY_ID)
  private String keyId;

  public static final String SERIALIZED_NAME_THUMBPRINT = "thumbprint";
  @SerializedName(SERIALIZED_NAME_THUMBPRINT)
  private String thumbprint;

  public static final String SERIALIZED_NAME_TOKEN = "token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public ApnsCredentialProperties() {
  }

  public ApnsCredentialProperties apnsCertificate(String apnsCertificate) {
    this.apnsCertificate = apnsCertificate;
    return this;
  }

  /**
   * The APNS certificate.
   * @return apnsCertificate
   */
  @javax.annotation.Nullable
  public String getApnsCertificate() {
    return apnsCertificate;
  }

  public void setApnsCertificate(String apnsCertificate) {
    this.apnsCertificate = apnsCertificate;
  }


  public ApnsCredentialProperties appId(String appId) {
    this.appId = appId;
    return this;
  }

  /**
   * The issuer (iss) registered claim key, whose value is your 10-character Team ID, obtained from your developer account
   * @return appId
   */
  @javax.annotation.Nullable
  public String getAppId() {
    return appId;
  }

  public void setAppId(String appId) {
    this.appId = appId;
  }


  public ApnsCredentialProperties appName(String appName) {
    this.appName = appName;
    return this;
  }

  /**
   * The name of the application
   * @return appName
   */
  @javax.annotation.Nullable
  public String getAppName() {
    return appName;
  }

  public void setAppName(String appName) {
    this.appName = appName;
  }


  public ApnsCredentialProperties certificateKey(String certificateKey) {
    this.certificateKey = certificateKey;
    return this;
  }

  /**
   * The certificate key.
   * @return certificateKey
   */
  @javax.annotation.Nullable
  public String getCertificateKey() {
    return certificateKey;
  }

  public void setCertificateKey(String certificateKey) {
    this.certificateKey = certificateKey;
  }


  public ApnsCredentialProperties endpoint(String endpoint) {
    this.endpoint = endpoint;
    return this;
  }

  /**
   * The endpoint of this credential.
   * @return endpoint
   */
  @javax.annotation.Nullable
  public String getEndpoint() {
    return endpoint;
  }

  public void setEndpoint(String endpoint) {
    this.endpoint = endpoint;
  }


  public ApnsCredentialProperties keyId(String keyId) {
    this.keyId = keyId;
    return this;
  }

  /**
   * A 10-character key identifier (kid) key, obtained from your developer account
   * @return keyId
   */
  @javax.annotation.Nullable
  public String getKeyId() {
    return keyId;
  }

  public void setKeyId(String keyId) {
    this.keyId = keyId;
  }


  public ApnsCredentialProperties thumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
    return this;
  }

  /**
   * The APNS certificate Thumbprint
   * @return thumbprint
   */
  @javax.annotation.Nullable
  public String getThumbprint() {
    return thumbprint;
  }

  public void setThumbprint(String thumbprint) {
    this.thumbprint = thumbprint;
  }


  public ApnsCredentialProperties token(String token) {
    this.token = token;
    return this;
  }

  /**
   * Provider Authentication Token, obtained through your developer account
   * @return token
   */
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApnsCredentialProperties apnsCredentialProperties = (ApnsCredentialProperties) o;
    return Objects.equals(this.apnsCertificate, apnsCredentialProperties.apnsCertificate) &&
        Objects.equals(this.appId, apnsCredentialProperties.appId) &&
        Objects.equals(this.appName, apnsCredentialProperties.appName) &&
        Objects.equals(this.certificateKey, apnsCredentialProperties.certificateKey) &&
        Objects.equals(this.endpoint, apnsCredentialProperties.endpoint) &&
        Objects.equals(this.keyId, apnsCredentialProperties.keyId) &&
        Objects.equals(this.thumbprint, apnsCredentialProperties.thumbprint) &&
        Objects.equals(this.token, apnsCredentialProperties.token);
  }

  @Override
  public int hashCode() {
    return Objects.hash(apnsCertificate, appId, appName, certificateKey, endpoint, keyId, thumbprint, token);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApnsCredentialProperties {\n");
    sb.append("    apnsCertificate: ").append(toIndentedString(apnsCertificate)).append("\n");
    sb.append("    appId: ").append(toIndentedString(appId)).append("\n");
    sb.append("    appName: ").append(toIndentedString(appName)).append("\n");
    sb.append("    certificateKey: ").append(toIndentedString(certificateKey)).append("\n");
    sb.append("    endpoint: ").append(toIndentedString(endpoint)).append("\n");
    sb.append("    keyId: ").append(toIndentedString(keyId)).append("\n");
    sb.append("    thumbprint: ").append(toIndentedString(thumbprint)).append("\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("apnsCertificate");
    openapiFields.add("appId");
    openapiFields.add("appName");
    openapiFields.add("certificateKey");
    openapiFields.add("endpoint");
    openapiFields.add("keyId");
    openapiFields.add("thumbprint");
    openapiFields.add("token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApnsCredentialProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApnsCredentialProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApnsCredentialProperties is not found in the empty JSON string", ApnsCredentialProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApnsCredentialProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApnsCredentialProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("apnsCertificate") != null && !jsonObj.get("apnsCertificate").isJsonNull()) && !jsonObj.get("apnsCertificate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `apnsCertificate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("apnsCertificate").toString()));
      }
      if ((jsonObj.get("appId") != null && !jsonObj.get("appId").isJsonNull()) && !jsonObj.get("appId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appId").toString()));
      }
      if ((jsonObj.get("appName") != null && !jsonObj.get("appName").isJsonNull()) && !jsonObj.get("appName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `appName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("appName").toString()));
      }
      if ((jsonObj.get("certificateKey") != null && !jsonObj.get("certificateKey").isJsonNull()) && !jsonObj.get("certificateKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `certificateKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("certificateKey").toString()));
      }
      if ((jsonObj.get("endpoint") != null && !jsonObj.get("endpoint").isJsonNull()) && !jsonObj.get("endpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endpoint").toString()));
      }
      if ((jsonObj.get("keyId") != null && !jsonObj.get("keyId").isJsonNull()) && !jsonObj.get("keyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyId").toString()));
      }
      if ((jsonObj.get("thumbprint") != null && !jsonObj.get("thumbprint").isJsonNull()) && !jsonObj.get("thumbprint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `thumbprint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("thumbprint").toString()));
      }
      if ((jsonObj.get("token") != null && !jsonObj.get("token").isJsonNull()) && !jsonObj.get("token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApnsCredentialProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApnsCredentialProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApnsCredentialProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApnsCredentialProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApnsCredentialProperties>() {
           @Override
           public void write(JsonWriter out, ApnsCredentialProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApnsCredentialProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApnsCredentialProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApnsCredentialProperties
   * @throws IOException if the JSON string is invalid with respect to ApnsCredentialProperties
   */
  public static ApnsCredentialProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApnsCredentialProperties.class);
  }

  /**
   * Convert an instance of ApnsCredentialProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

