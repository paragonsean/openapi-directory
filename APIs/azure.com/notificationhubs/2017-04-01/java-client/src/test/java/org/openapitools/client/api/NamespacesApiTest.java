/*
 * NotificationHubsManagementClient
 * Azure NotificationHub client
 *
 * The version of the OpenAPI document: 2017-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CheckAvailabilityParameters;
import org.openapitools.client.model.CheckAvailabilityResult;
import org.openapitools.client.model.NamespaceCreateOrUpdateParameters;
import org.openapitools.client.model.NamespaceListResult;
import org.openapitools.client.model.NamespacePatchParameters;
import org.openapitools.client.model.NamespaceResource;
import org.openapitools.client.model.PolicykeyResource;
import org.openapitools.client.model.ResourceListKeys;
import org.openapitools.client.model.SharedAccessAuthorizationRuleCreateOrUpdateParameters;
import org.openapitools.client.model.SharedAccessAuthorizationRuleListResult;
import org.openapitools.client.model.SharedAccessAuthorizationRuleResource;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for NamespacesApi
 */
@Disabled
public class NamespacesApiTest {

    private final NamespacesApi api = new NamespacesApi();

    /**
     * Checks the availability of the given service namespace across all Azure subscriptions. This is useful because the domain name is created based on the service namespace name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCheckAvailabilityTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        CheckAvailabilityParameters parameters = null;
        CheckAvailabilityResult response = api.namespacesCheckAvailability(apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates/Updates a service namespace. Once created, this namespace&#39;s resource manifest is immutable. This operation is idempotent.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceCreateOrUpdateParameters parameters = null;
        NamespaceResource response = api.namespacesCreateOrUpdate(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Creates an authorization rule for a namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesCreateOrUpdateAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleCreateOrUpdateParameters parameters = null;
        SharedAccessAuthorizationRuleResource response = api.namespacesCreateOrUpdateAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes an existing namespace. This operation also removes all associated notificationHubs under the namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.namespacesDelete(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Deletes a namespace authorization rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesDeleteAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.namespacesDeleteAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Returns the description for the specified namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesGetTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceResource response = api.namespacesGet(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets an authorization rule for a namespace by name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesGetAuthorizationRuleTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleResource response = api.namespacesGetAuthorizationRule(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists the available namespaces within a resourceGroup.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceListResult response = api.namespacesList(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all the available namespaces within the subscription irrespective of the resourceGroups.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListAllTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        NamespaceListResult response = api.namespacesListAll(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the authorization rules for a namespace.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListAuthorizationRulesTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.namespacesListAuthorizationRules(resourceGroupName, namespaceName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the Primary and Secondary ConnectionStrings to the namespace 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesListKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        SharedAccessAuthorizationRuleListResult response = api.namespacesListKeys(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Patches the existing namespace
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesPatchTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        NamespacePatchParameters parameters = null;
        NamespaceResource response = api.namespacesPatch(resourceGroupName, namespaceName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Regenerates the Primary/Secondary Keys to the Namespace Authorization Rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void namespacesRegenerateKeysTest() throws ApiException {
        String resourceGroupName = null;
        String namespaceName = null;
        String authorizationRuleName = null;
        String apiVersion = null;
        String subscriptionId = null;
        PolicykeyResource parameters = null;
        ResourceListKeys response = api.namespacesRegenerateKeys(resourceGroupName, namespaceName, authorizationRuleName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
