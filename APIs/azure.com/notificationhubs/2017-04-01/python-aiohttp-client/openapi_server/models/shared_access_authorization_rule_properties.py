# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SharedAccessAuthorizationRuleProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, claim_type: str=None, claim_value: str=None, created_time: str=None, key_name: str=None, modified_time: str=None, primary_key: str=None, revision: int=None, rights: List[str]=None, secondary_key: str=None):
        """SharedAccessAuthorizationRuleProperties - a model defined in OpenAPI

        :param claim_type: The claim_type of this SharedAccessAuthorizationRuleProperties.
        :param claim_value: The claim_value of this SharedAccessAuthorizationRuleProperties.
        :param created_time: The created_time of this SharedAccessAuthorizationRuleProperties.
        :param key_name: The key_name of this SharedAccessAuthorizationRuleProperties.
        :param modified_time: The modified_time of this SharedAccessAuthorizationRuleProperties.
        :param primary_key: The primary_key of this SharedAccessAuthorizationRuleProperties.
        :param revision: The revision of this SharedAccessAuthorizationRuleProperties.
        :param rights: The rights of this SharedAccessAuthorizationRuleProperties.
        :param secondary_key: The secondary_key of this SharedAccessAuthorizationRuleProperties.
        """
        self.openapi_types = {
            'claim_type': str,
            'claim_value': str,
            'created_time': str,
            'key_name': str,
            'modified_time': str,
            'primary_key': str,
            'revision': int,
            'rights': List[str],
            'secondary_key': str
        }

        self.attribute_map = {
            'claim_type': 'claimType',
            'claim_value': 'claimValue',
            'created_time': 'createdTime',
            'key_name': 'keyName',
            'modified_time': 'modifiedTime',
            'primary_key': 'primaryKey',
            'revision': 'revision',
            'rights': 'rights',
            'secondary_key': 'secondaryKey'
        }

        self._claim_type = claim_type
        self._claim_value = claim_value
        self._created_time = created_time
        self._key_name = key_name
        self._modified_time = modified_time
        self._primary_key = primary_key
        self._revision = revision
        self._rights = rights
        self._secondary_key = secondary_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SharedAccessAuthorizationRuleProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SharedAccessAuthorizationRuleProperties of this SharedAccessAuthorizationRuleProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def claim_type(self):
        """Gets the claim_type of this SharedAccessAuthorizationRuleProperties.

        A string that describes the claim type

        :return: The claim_type of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._claim_type

    @claim_type.setter
    def claim_type(self, claim_type):
        """Sets the claim_type of this SharedAccessAuthorizationRuleProperties.

        A string that describes the claim type

        :param claim_type: The claim_type of this SharedAccessAuthorizationRuleProperties.
        :type claim_type: str
        """

        self._claim_type = claim_type

    @property
    def claim_value(self):
        """Gets the claim_value of this SharedAccessAuthorizationRuleProperties.

        A string that describes the claim value

        :return: The claim_value of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._claim_value

    @claim_value.setter
    def claim_value(self, claim_value):
        """Sets the claim_value of this SharedAccessAuthorizationRuleProperties.

        A string that describes the claim value

        :param claim_value: The claim_value of this SharedAccessAuthorizationRuleProperties.
        :type claim_value: str
        """

        self._claim_value = claim_value

    @property
    def created_time(self):
        """Gets the created_time of this SharedAccessAuthorizationRuleProperties.

        The created time for this rule

        :return: The created_time of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this SharedAccessAuthorizationRuleProperties.

        The created time for this rule

        :param created_time: The created_time of this SharedAccessAuthorizationRuleProperties.
        :type created_time: str
        """

        self._created_time = created_time

    @property
    def key_name(self):
        """Gets the key_name of this SharedAccessAuthorizationRuleProperties.

        A string that describes the authorization rule.

        :return: The key_name of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._key_name

    @key_name.setter
    def key_name(self, key_name):
        """Sets the key_name of this SharedAccessAuthorizationRuleProperties.

        A string that describes the authorization rule.

        :param key_name: The key_name of this SharedAccessAuthorizationRuleProperties.
        :type key_name: str
        """

        self._key_name = key_name

    @property
    def modified_time(self):
        """Gets the modified_time of this SharedAccessAuthorizationRuleProperties.

        The last modified time for this rule

        :return: The modified_time of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._modified_time

    @modified_time.setter
    def modified_time(self, modified_time):
        """Sets the modified_time of this SharedAccessAuthorizationRuleProperties.

        The last modified time for this rule

        :param modified_time: The modified_time of this SharedAccessAuthorizationRuleProperties.
        :type modified_time: str
        """

        self._modified_time = modified_time

    @property
    def primary_key(self):
        """Gets the primary_key of this SharedAccessAuthorizationRuleProperties.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :return: The primary_key of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._primary_key

    @primary_key.setter
    def primary_key(self, primary_key):
        """Sets the primary_key of this SharedAccessAuthorizationRuleProperties.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :param primary_key: The primary_key of this SharedAccessAuthorizationRuleProperties.
        :type primary_key: str
        """

        self._primary_key = primary_key

    @property
    def revision(self):
        """Gets the revision of this SharedAccessAuthorizationRuleProperties.

        The revision number for the rule

        :return: The revision of this SharedAccessAuthorizationRuleProperties.
        :rtype: int
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this SharedAccessAuthorizationRuleProperties.

        The revision number for the rule

        :param revision: The revision of this SharedAccessAuthorizationRuleProperties.
        :type revision: int
        """

        self._revision = revision

    @property
    def rights(self):
        """Gets the rights of this SharedAccessAuthorizationRuleProperties.

        The rights associated with the rule.

        :return: The rights of this SharedAccessAuthorizationRuleProperties.
        :rtype: List[str]
        """
        return self._rights

    @rights.setter
    def rights(self, rights):
        """Sets the rights of this SharedAccessAuthorizationRuleProperties.

        The rights associated with the rule.

        :param rights: The rights of this SharedAccessAuthorizationRuleProperties.
        :type rights: List[str]
        """
        allowed_values = ["Manage", "Send", "Listen"]  # noqa: E501
        if not set(rights).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `rights` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(rights) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._rights = rights

    @property
    def secondary_key(self):
        """Gets the secondary_key of this SharedAccessAuthorizationRuleProperties.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :return: The secondary_key of this SharedAccessAuthorizationRuleProperties.
        :rtype: str
        """
        return self._secondary_key

    @secondary_key.setter
    def secondary_key(self, secondary_key):
        """Sets the secondary_key of this SharedAccessAuthorizationRuleProperties.

        A base64-encoded 256-bit primary key for signing and validating the SAS token.

        :param secondary_key: The secondary_key of this SharedAccessAuthorizationRuleProperties.
        :type secondary_key: str
        """

        self._secondary_key = secondary_key
