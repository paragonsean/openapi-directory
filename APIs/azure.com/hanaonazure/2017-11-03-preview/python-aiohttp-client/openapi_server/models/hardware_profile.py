# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HardwareProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hana_instance_size: str=None, hardware_type: str=None):
        """HardwareProfile - a model defined in OpenAPI

        :param hana_instance_size: The hana_instance_size of this HardwareProfile.
        :param hardware_type: The hardware_type of this HardwareProfile.
        """
        self.openapi_types = {
            'hana_instance_size': str,
            'hardware_type': str
        }

        self.attribute_map = {
            'hana_instance_size': 'hanaInstanceSize',
            'hardware_type': 'hardwareType'
        }

        self._hana_instance_size = hana_instance_size
        self._hardware_type = hardware_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HardwareProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HardwareProfile of this HardwareProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hana_instance_size(self):
        """Gets the hana_instance_size of this HardwareProfile.

        Specifies the HANA instance SKU.

        :return: The hana_instance_size of this HardwareProfile.
        :rtype: str
        """
        return self._hana_instance_size

    @hana_instance_size.setter
    def hana_instance_size(self, hana_instance_size):
        """Sets the hana_instance_size of this HardwareProfile.

        Specifies the HANA instance SKU.

        :param hana_instance_size: The hana_instance_size of this HardwareProfile.
        :type hana_instance_size: str
        """
        allowed_values = ["S72m", "S144m", "S72", "S144", "S192", "S192m", "S192xm", "S96", "S112", "S224m", "S224o", "S224om", "S224oo", "S224oom", "S224ooo", "S224oxm", "S224oxxm", "S384", "S384m", "S384xm", "S384xxm", "S576m", "S576xm", "S768", "S768m", "S768xm", "S960m"]  # noqa: E501
        if hana_instance_size not in allowed_values:
            raise ValueError(
                "Invalid value for `hana_instance_size` ({0}), must be one of {1}"
                .format(hana_instance_size, allowed_values)
            )

        self._hana_instance_size = hana_instance_size

    @property
    def hardware_type(self):
        """Gets the hardware_type of this HardwareProfile.

        Name of the hardware type (vendor and/or their product name)

        :return: The hardware_type of this HardwareProfile.
        :rtype: str
        """
        return self._hardware_type

    @hardware_type.setter
    def hardware_type(self, hardware_type):
        """Sets the hardware_type of this HardwareProfile.

        Name of the hardware type (vendor and/or their product name)

        :param hardware_type: The hardware_type of this HardwareProfile.
        :type hardware_type: str
        """
        allowed_values = ["Cisco_UCS", "HPE"]  # noqa: E501
        if hardware_type not in allowed_values:
            raise ValueError(
                "Invalid value for `hardware_type` ({0}), must be one of {1}"
                .format(hardware_type, allowed_values)
            )

        self._hardware_type = hardware_type
