# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.ip_address import IpAddress
from openapi_server import util


class NetworkProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, circuit_id: str=None, network_interfaces: List[IpAddress]=None):
        """NetworkProfile - a model defined in OpenAPI

        :param circuit_id: The circuit_id of this NetworkProfile.
        :param network_interfaces: The network_interfaces of this NetworkProfile.
        """
        self.openapi_types = {
            'circuit_id': str,
            'network_interfaces': List[IpAddress]
        }

        self.attribute_map = {
            'circuit_id': 'circuitId',
            'network_interfaces': 'networkInterfaces'
        }

        self._circuit_id = circuit_id
        self._network_interfaces = network_interfaces

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NetworkProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NetworkProfile of this NetworkProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def circuit_id(self):
        """Gets the circuit_id of this NetworkProfile.

        Specifies the circuit id for connecting to express route.

        :return: The circuit_id of this NetworkProfile.
        :rtype: str
        """
        return self._circuit_id

    @circuit_id.setter
    def circuit_id(self, circuit_id):
        """Sets the circuit_id of this NetworkProfile.

        Specifies the circuit id for connecting to express route.

        :param circuit_id: The circuit_id of this NetworkProfile.
        :type circuit_id: str
        """

        self._circuit_id = circuit_id

    @property
    def network_interfaces(self):
        """Gets the network_interfaces of this NetworkProfile.

        Specifies the network interfaces for the HANA instance.

        :return: The network_interfaces of this NetworkProfile.
        :rtype: List[IpAddress]
        """
        return self._network_interfaces

    @network_interfaces.setter
    def network_interfaces(self, network_interfaces):
        """Sets the network_interfaces of this NetworkProfile.

        Specifies the network interfaces for the HANA instance.

        :param network_interfaces: The network_interfaces of this NetworkProfile.
        :type network_interfaces: List[IpAddress]
        """

        self._network_interfaces = network_interfaces
