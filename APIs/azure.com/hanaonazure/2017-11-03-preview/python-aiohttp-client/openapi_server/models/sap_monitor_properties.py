# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SapMonitorProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, enable_customer_analytics: bool=None, hana_db_credentials_msi_id: str=None, hana_db_name: str=None, hana_db_password: str=None, hana_db_password_key_vault_url: str=None, hana_db_sql_port: int=None, hana_db_username: str=None, hana_hostname: str=None, hana_subnet: str=None, key_vault_id: str=None, log_analytics_workspace_arm_id: str=None, log_analytics_workspace_id: str=None, log_analytics_workspace_shared_key: str=None, managed_resource_group_name: str=None, provisioning_state: str=None):
        """SapMonitorProperties - a model defined in OpenAPI

        :param enable_customer_analytics: The enable_customer_analytics of this SapMonitorProperties.
        :param hana_db_credentials_msi_id: The hana_db_credentials_msi_id of this SapMonitorProperties.
        :param hana_db_name: The hana_db_name of this SapMonitorProperties.
        :param hana_db_password: The hana_db_password of this SapMonitorProperties.
        :param hana_db_password_key_vault_url: The hana_db_password_key_vault_url of this SapMonitorProperties.
        :param hana_db_sql_port: The hana_db_sql_port of this SapMonitorProperties.
        :param hana_db_username: The hana_db_username of this SapMonitorProperties.
        :param hana_hostname: The hana_hostname of this SapMonitorProperties.
        :param hana_subnet: The hana_subnet of this SapMonitorProperties.
        :param key_vault_id: The key_vault_id of this SapMonitorProperties.
        :param log_analytics_workspace_arm_id: The log_analytics_workspace_arm_id of this SapMonitorProperties.
        :param log_analytics_workspace_id: The log_analytics_workspace_id of this SapMonitorProperties.
        :param log_analytics_workspace_shared_key: The log_analytics_workspace_shared_key of this SapMonitorProperties.
        :param managed_resource_group_name: The managed_resource_group_name of this SapMonitorProperties.
        :param provisioning_state: The provisioning_state of this SapMonitorProperties.
        """
        self.openapi_types = {
            'enable_customer_analytics': bool,
            'hana_db_credentials_msi_id': str,
            'hana_db_name': str,
            'hana_db_password': str,
            'hana_db_password_key_vault_url': str,
            'hana_db_sql_port': int,
            'hana_db_username': str,
            'hana_hostname': str,
            'hana_subnet': str,
            'key_vault_id': str,
            'log_analytics_workspace_arm_id': str,
            'log_analytics_workspace_id': str,
            'log_analytics_workspace_shared_key': str,
            'managed_resource_group_name': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'enable_customer_analytics': 'enableCustomerAnalytics',
            'hana_db_credentials_msi_id': 'hanaDbCredentialsMsiId',
            'hana_db_name': 'hanaDbName',
            'hana_db_password': 'hanaDbPassword',
            'hana_db_password_key_vault_url': 'hanaDbPasswordKeyVaultUrl',
            'hana_db_sql_port': 'hanaDbSqlPort',
            'hana_db_username': 'hanaDbUsername',
            'hana_hostname': 'hanaHostname',
            'hana_subnet': 'hanaSubnet',
            'key_vault_id': 'keyVaultId',
            'log_analytics_workspace_arm_id': 'logAnalyticsWorkspaceArmId',
            'log_analytics_workspace_id': 'logAnalyticsWorkspaceId',
            'log_analytics_workspace_shared_key': 'logAnalyticsWorkspaceSharedKey',
            'managed_resource_group_name': 'managedResourceGroupName',
            'provisioning_state': 'provisioningState'
        }

        self._enable_customer_analytics = enable_customer_analytics
        self._hana_db_credentials_msi_id = hana_db_credentials_msi_id
        self._hana_db_name = hana_db_name
        self._hana_db_password = hana_db_password
        self._hana_db_password_key_vault_url = hana_db_password_key_vault_url
        self._hana_db_sql_port = hana_db_sql_port
        self._hana_db_username = hana_db_username
        self._hana_hostname = hana_hostname
        self._hana_subnet = hana_subnet
        self._key_vault_id = key_vault_id
        self._log_analytics_workspace_arm_id = log_analytics_workspace_arm_id
        self._log_analytics_workspace_id = log_analytics_workspace_id
        self._log_analytics_workspace_shared_key = log_analytics_workspace_shared_key
        self._managed_resource_group_name = managed_resource_group_name
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SapMonitorProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SapMonitorProperties of this SapMonitorProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def enable_customer_analytics(self):
        """Gets the enable_customer_analytics of this SapMonitorProperties.

        The value indicating whether to send analytics to Microsoft

        :return: The enable_customer_analytics of this SapMonitorProperties.
        :rtype: bool
        """
        return self._enable_customer_analytics

    @enable_customer_analytics.setter
    def enable_customer_analytics(self, enable_customer_analytics):
        """Sets the enable_customer_analytics of this SapMonitorProperties.

        The value indicating whether to send analytics to Microsoft

        :param enable_customer_analytics: The enable_customer_analytics of this SapMonitorProperties.
        :type enable_customer_analytics: bool
        """

        self._enable_customer_analytics = enable_customer_analytics

    @property
    def hana_db_credentials_msi_id(self):
        """Gets the hana_db_credentials_msi_id of this SapMonitorProperties.

        MSI ID passed by customer which has access to customer's KeyVault and to be assigned to the Collector VM.

        :return: The hana_db_credentials_msi_id of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_db_credentials_msi_id

    @hana_db_credentials_msi_id.setter
    def hana_db_credentials_msi_id(self, hana_db_credentials_msi_id):
        """Sets the hana_db_credentials_msi_id of this SapMonitorProperties.

        MSI ID passed by customer which has access to customer's KeyVault and to be assigned to the Collector VM.

        :param hana_db_credentials_msi_id: The hana_db_credentials_msi_id of this SapMonitorProperties.
        :type hana_db_credentials_msi_id: str
        """

        self._hana_db_credentials_msi_id = hana_db_credentials_msi_id

    @property
    def hana_db_name(self):
        """Gets the hana_db_name of this SapMonitorProperties.

        Database name of the HANA instance.

        :return: The hana_db_name of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_db_name

    @hana_db_name.setter
    def hana_db_name(self, hana_db_name):
        """Sets the hana_db_name of this SapMonitorProperties.

        Database name of the HANA instance.

        :param hana_db_name: The hana_db_name of this SapMonitorProperties.
        :type hana_db_name: str
        """

        self._hana_db_name = hana_db_name

    @property
    def hana_db_password(self):
        """Gets the hana_db_password of this SapMonitorProperties.

        Database password of the HANA instance.

        :return: The hana_db_password of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_db_password

    @hana_db_password.setter
    def hana_db_password(self, hana_db_password):
        """Sets the hana_db_password of this SapMonitorProperties.

        Database password of the HANA instance.

        :param hana_db_password: The hana_db_password of this SapMonitorProperties.
        :type hana_db_password: str
        """

        self._hana_db_password = hana_db_password

    @property
    def hana_db_password_key_vault_url(self):
        """Gets the hana_db_password_key_vault_url of this SapMonitorProperties.

        KeyVault URL link to the password for the HANA database.

        :return: The hana_db_password_key_vault_url of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_db_password_key_vault_url

    @hana_db_password_key_vault_url.setter
    def hana_db_password_key_vault_url(self, hana_db_password_key_vault_url):
        """Sets the hana_db_password_key_vault_url of this SapMonitorProperties.

        KeyVault URL link to the password for the HANA database.

        :param hana_db_password_key_vault_url: The hana_db_password_key_vault_url of this SapMonitorProperties.
        :type hana_db_password_key_vault_url: str
        """

        self._hana_db_password_key_vault_url = hana_db_password_key_vault_url

    @property
    def hana_db_sql_port(self):
        """Gets the hana_db_sql_port of this SapMonitorProperties.

        Database port of the HANA instance.

        :return: The hana_db_sql_port of this SapMonitorProperties.
        :rtype: int
        """
        return self._hana_db_sql_port

    @hana_db_sql_port.setter
    def hana_db_sql_port(self, hana_db_sql_port):
        """Sets the hana_db_sql_port of this SapMonitorProperties.

        Database port of the HANA instance.

        :param hana_db_sql_port: The hana_db_sql_port of this SapMonitorProperties.
        :type hana_db_sql_port: int
        """

        self._hana_db_sql_port = hana_db_sql_port

    @property
    def hana_db_username(self):
        """Gets the hana_db_username of this SapMonitorProperties.

        Database username of the HANA instance.

        :return: The hana_db_username of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_db_username

    @hana_db_username.setter
    def hana_db_username(self, hana_db_username):
        """Sets the hana_db_username of this SapMonitorProperties.

        Database username of the HANA instance.

        :param hana_db_username: The hana_db_username of this SapMonitorProperties.
        :type hana_db_username: str
        """

        self._hana_db_username = hana_db_username

    @property
    def hana_hostname(self):
        """Gets the hana_hostname of this SapMonitorProperties.

        Hostname of the HANA instance.

        :return: The hana_hostname of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_hostname

    @hana_hostname.setter
    def hana_hostname(self, hana_hostname):
        """Sets the hana_hostname of this SapMonitorProperties.

        Hostname of the HANA instance.

        :param hana_hostname: The hana_hostname of this SapMonitorProperties.
        :type hana_hostname: str
        """

        self._hana_hostname = hana_hostname

    @property
    def hana_subnet(self):
        """Gets the hana_subnet of this SapMonitorProperties.

        Specifies the SAP monitor unique ID.

        :return: The hana_subnet of this SapMonitorProperties.
        :rtype: str
        """
        return self._hana_subnet

    @hana_subnet.setter
    def hana_subnet(self, hana_subnet):
        """Sets the hana_subnet of this SapMonitorProperties.

        Specifies the SAP monitor unique ID.

        :param hana_subnet: The hana_subnet of this SapMonitorProperties.
        :type hana_subnet: str
        """

        self._hana_subnet = hana_subnet

    @property
    def key_vault_id(self):
        """Gets the key_vault_id of this SapMonitorProperties.

        Key Vault ID containing customer's HANA credentials.

        :return: The key_vault_id of this SapMonitorProperties.
        :rtype: str
        """
        return self._key_vault_id

    @key_vault_id.setter
    def key_vault_id(self, key_vault_id):
        """Sets the key_vault_id of this SapMonitorProperties.

        Key Vault ID containing customer's HANA credentials.

        :param key_vault_id: The key_vault_id of this SapMonitorProperties.
        :type key_vault_id: str
        """

        self._key_vault_id = key_vault_id

    @property
    def log_analytics_workspace_arm_id(self):
        """Gets the log_analytics_workspace_arm_id of this SapMonitorProperties.

        The ARM ID of the Log Analytics Workspace that is used for monitoring

        :return: The log_analytics_workspace_arm_id of this SapMonitorProperties.
        :rtype: str
        """
        return self._log_analytics_workspace_arm_id

    @log_analytics_workspace_arm_id.setter
    def log_analytics_workspace_arm_id(self, log_analytics_workspace_arm_id):
        """Sets the log_analytics_workspace_arm_id of this SapMonitorProperties.

        The ARM ID of the Log Analytics Workspace that is used for monitoring

        :param log_analytics_workspace_arm_id: The log_analytics_workspace_arm_id of this SapMonitorProperties.
        :type log_analytics_workspace_arm_id: str
        """

        self._log_analytics_workspace_arm_id = log_analytics_workspace_arm_id

    @property
    def log_analytics_workspace_id(self):
        """Gets the log_analytics_workspace_id of this SapMonitorProperties.

        The workspace ID of the log analytics workspace to be used for monitoring

        :return: The log_analytics_workspace_id of this SapMonitorProperties.
        :rtype: str
        """
        return self._log_analytics_workspace_id

    @log_analytics_workspace_id.setter
    def log_analytics_workspace_id(self, log_analytics_workspace_id):
        """Sets the log_analytics_workspace_id of this SapMonitorProperties.

        The workspace ID of the log analytics workspace to be used for monitoring

        :param log_analytics_workspace_id: The log_analytics_workspace_id of this SapMonitorProperties.
        :type log_analytics_workspace_id: str
        """

        self._log_analytics_workspace_id = log_analytics_workspace_id

    @property
    def log_analytics_workspace_shared_key(self):
        """Gets the log_analytics_workspace_shared_key of this SapMonitorProperties.

        The shared key of the log analytics workspace that is used for monitoring

        :return: The log_analytics_workspace_shared_key of this SapMonitorProperties.
        :rtype: str
        """
        return self._log_analytics_workspace_shared_key

    @log_analytics_workspace_shared_key.setter
    def log_analytics_workspace_shared_key(self, log_analytics_workspace_shared_key):
        """Sets the log_analytics_workspace_shared_key of this SapMonitorProperties.

        The shared key of the log analytics workspace that is used for monitoring

        :param log_analytics_workspace_shared_key: The log_analytics_workspace_shared_key of this SapMonitorProperties.
        :type log_analytics_workspace_shared_key: str
        """

        self._log_analytics_workspace_shared_key = log_analytics_workspace_shared_key

    @property
    def managed_resource_group_name(self):
        """Gets the managed_resource_group_name of this SapMonitorProperties.

        The name of the resource group the SAP Monitor resources get deployed into.

        :return: The managed_resource_group_name of this SapMonitorProperties.
        :rtype: str
        """
        return self._managed_resource_group_name

    @managed_resource_group_name.setter
    def managed_resource_group_name(self, managed_resource_group_name):
        """Sets the managed_resource_group_name of this SapMonitorProperties.

        The name of the resource group the SAP Monitor resources get deployed into.

        :param managed_resource_group_name: The managed_resource_group_name of this SapMonitorProperties.
        :type managed_resource_group_name: str
        """

        self._managed_resource_group_name = managed_resource_group_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this SapMonitorProperties.

        State of provisioning of the HanaInstance

        :return: The provisioning_state of this SapMonitorProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this SapMonitorProperties.

        State of provisioning of the HanaInstance

        :param provisioning_state: The provisioning_state of this SapMonitorProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
