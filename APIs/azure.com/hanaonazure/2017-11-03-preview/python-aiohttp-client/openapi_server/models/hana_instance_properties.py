# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.hardware_profile import HardwareProfile
from openapi_server.models.network_profile import NetworkProfile
from openapi_server.models.os_profile import OSProfile
from openapi_server.models.storage_profile import StorageProfile
from openapi_server import util


class HanaInstanceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hana_instance_id: str=None, hardware_profile: HardwareProfile=None, hw_revision: str=None, network_profile: NetworkProfile=None, os_profile: OSProfile=None, partner_node_id: str=None, power_state: str=None, provisioning_state: str=None, proximity_placement_group: str=None, storage_profile: StorageProfile=None):
        """HanaInstanceProperties - a model defined in OpenAPI

        :param hana_instance_id: The hana_instance_id of this HanaInstanceProperties.
        :param hardware_profile: The hardware_profile of this HanaInstanceProperties.
        :param hw_revision: The hw_revision of this HanaInstanceProperties.
        :param network_profile: The network_profile of this HanaInstanceProperties.
        :param os_profile: The os_profile of this HanaInstanceProperties.
        :param partner_node_id: The partner_node_id of this HanaInstanceProperties.
        :param power_state: The power_state of this HanaInstanceProperties.
        :param provisioning_state: The provisioning_state of this HanaInstanceProperties.
        :param proximity_placement_group: The proximity_placement_group of this HanaInstanceProperties.
        :param storage_profile: The storage_profile of this HanaInstanceProperties.
        """
        self.openapi_types = {
            'hana_instance_id': str,
            'hardware_profile': HardwareProfile,
            'hw_revision': str,
            'network_profile': NetworkProfile,
            'os_profile': OSProfile,
            'partner_node_id': str,
            'power_state': str,
            'provisioning_state': str,
            'proximity_placement_group': str,
            'storage_profile': StorageProfile
        }

        self.attribute_map = {
            'hana_instance_id': 'hanaInstanceId',
            'hardware_profile': 'hardwareProfile',
            'hw_revision': 'hwRevision',
            'network_profile': 'networkProfile',
            'os_profile': 'osProfile',
            'partner_node_id': 'partnerNodeId',
            'power_state': 'powerState',
            'provisioning_state': 'provisioningState',
            'proximity_placement_group': 'proximityPlacementGroup',
            'storage_profile': 'storageProfile'
        }

        self._hana_instance_id = hana_instance_id
        self._hardware_profile = hardware_profile
        self._hw_revision = hw_revision
        self._network_profile = network_profile
        self._os_profile = os_profile
        self._partner_node_id = partner_node_id
        self._power_state = power_state
        self._provisioning_state = provisioning_state
        self._proximity_placement_group = proximity_placement_group
        self._storage_profile = storage_profile

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HanaInstanceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HanaInstanceProperties of this HanaInstanceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hana_instance_id(self):
        """Gets the hana_instance_id of this HanaInstanceProperties.

        Specifies the HANA instance unique ID.

        :return: The hana_instance_id of this HanaInstanceProperties.
        :rtype: str
        """
        return self._hana_instance_id

    @hana_instance_id.setter
    def hana_instance_id(self, hana_instance_id):
        """Sets the hana_instance_id of this HanaInstanceProperties.

        Specifies the HANA instance unique ID.

        :param hana_instance_id: The hana_instance_id of this HanaInstanceProperties.
        :type hana_instance_id: str
        """

        self._hana_instance_id = hana_instance_id

    @property
    def hardware_profile(self):
        """Gets the hardware_profile of this HanaInstanceProperties.


        :return: The hardware_profile of this HanaInstanceProperties.
        :rtype: HardwareProfile
        """
        return self._hardware_profile

    @hardware_profile.setter
    def hardware_profile(self, hardware_profile):
        """Sets the hardware_profile of this HanaInstanceProperties.


        :param hardware_profile: The hardware_profile of this HanaInstanceProperties.
        :type hardware_profile: HardwareProfile
        """

        self._hardware_profile = hardware_profile

    @property
    def hw_revision(self):
        """Gets the hw_revision of this HanaInstanceProperties.

        Hardware revision of a HANA instance

        :return: The hw_revision of this HanaInstanceProperties.
        :rtype: str
        """
        return self._hw_revision

    @hw_revision.setter
    def hw_revision(self, hw_revision):
        """Sets the hw_revision of this HanaInstanceProperties.

        Hardware revision of a HANA instance

        :param hw_revision: The hw_revision of this HanaInstanceProperties.
        :type hw_revision: str
        """

        self._hw_revision = hw_revision

    @property
    def network_profile(self):
        """Gets the network_profile of this HanaInstanceProperties.


        :return: The network_profile of this HanaInstanceProperties.
        :rtype: NetworkProfile
        """
        return self._network_profile

    @network_profile.setter
    def network_profile(self, network_profile):
        """Sets the network_profile of this HanaInstanceProperties.


        :param network_profile: The network_profile of this HanaInstanceProperties.
        :type network_profile: NetworkProfile
        """

        self._network_profile = network_profile

    @property
    def os_profile(self):
        """Gets the os_profile of this HanaInstanceProperties.


        :return: The os_profile of this HanaInstanceProperties.
        :rtype: OSProfile
        """
        return self._os_profile

    @os_profile.setter
    def os_profile(self, os_profile):
        """Sets the os_profile of this HanaInstanceProperties.


        :param os_profile: The os_profile of this HanaInstanceProperties.
        :type os_profile: OSProfile
        """

        self._os_profile = os_profile

    @property
    def partner_node_id(self):
        """Gets the partner_node_id of this HanaInstanceProperties.

        ARM ID of another HanaInstance that will share a network with this HanaInstance

        :return: The partner_node_id of this HanaInstanceProperties.
        :rtype: str
        """
        return self._partner_node_id

    @partner_node_id.setter
    def partner_node_id(self, partner_node_id):
        """Sets the partner_node_id of this HanaInstanceProperties.

        ARM ID of another HanaInstance that will share a network with this HanaInstance

        :param partner_node_id: The partner_node_id of this HanaInstanceProperties.
        :type partner_node_id: str
        """

        self._partner_node_id = partner_node_id

    @property
    def power_state(self):
        """Gets the power_state of this HanaInstanceProperties.

        Resource power state

        :return: The power_state of this HanaInstanceProperties.
        :rtype: str
        """
        return self._power_state

    @power_state.setter
    def power_state(self, power_state):
        """Sets the power_state of this HanaInstanceProperties.

        Resource power state

        :param power_state: The power_state of this HanaInstanceProperties.
        :type power_state: str
        """
        allowed_values = ["starting", "started", "stopping", "stopped", "restarting", "unknown"]  # noqa: E501
        if power_state not in allowed_values:
            raise ValueError(
                "Invalid value for `power_state` ({0}), must be one of {1}"
                .format(power_state, allowed_values)
            )

        self._power_state = power_state

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this HanaInstanceProperties.

        State of provisioning of the HanaInstance

        :return: The provisioning_state of this HanaInstanceProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this HanaInstanceProperties.

        State of provisioning of the HanaInstance

        :param provisioning_state: The provisioning_state of this HanaInstanceProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Creating", "Updating", "Failed", "Succeeded", "Deleting", "Migrating"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def proximity_placement_group(self):
        """Gets the proximity_placement_group of this HanaInstanceProperties.

        Resource proximity placement group

        :return: The proximity_placement_group of this HanaInstanceProperties.
        :rtype: str
        """
        return self._proximity_placement_group

    @proximity_placement_group.setter
    def proximity_placement_group(self, proximity_placement_group):
        """Sets the proximity_placement_group of this HanaInstanceProperties.

        Resource proximity placement group

        :param proximity_placement_group: The proximity_placement_group of this HanaInstanceProperties.
        :type proximity_placement_group: str
        """

        self._proximity_placement_group = proximity_placement_group

    @property
    def storage_profile(self):
        """Gets the storage_profile of this HanaInstanceProperties.


        :return: The storage_profile of this HanaInstanceProperties.
        :rtype: StorageProfile
        """
        return self._storage_profile

    @storage_profile.setter
    def storage_profile(self, storage_profile):
        """Sets the storage_profile of this HanaInstanceProperties.


        :param storage_profile: The storage_profile of this HanaInstanceProperties.
        :type storage_profile: StorageProfile
        """

        self._storage_profile = storage_profile
