/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HanaInstance;
import org.openapitools.client.model.HanaInstancesListResult;
import org.openapitools.client.model.OperationList;
import org.openapitools.client.model.SapMonitor;
import org.openapitools.client.model.SapMonitorListResult;
import org.openapitools.client.model.Tags;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for HanaOnAzureApi
 */
@Disabled
public class HanaOnAzureApiTest {

    private final HanaOnAzureApi api = new HanaOnAzureApi();

    /**
     * Creates a SAP HANA instance.
     *
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesCreateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        HanaInstance hanaInstanceParameter = null;
        HanaInstance response = api.hanaInstancesCreate(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, hanaInstanceParameter);
        // TODO: test validations
    }

    /**
     * Deletes a SAP HANA instance.
     *
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        api.hanaInstancesDelete(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
        // TODO: test validations
    }

    /**
     * Gets properties of a SAP HANA instance.
     *
     * Gets properties of a SAP HANA instance for the specified subscription, resource group, and instance name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        HanaInstance response = api.hanaInstancesGet(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
        // TODO: test validations
    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription.
     *
     * Gets a list of SAP HANA instances in the specified subscription. The operations returns various properties of each SAP HANA on Azure instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        HanaInstancesListResult response = api.hanaInstancesList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription and the resource group.
     *
     * Gets a list of SAP HANA instances in the specified subscription and the resource group. The operations returns various properties of each SAP HANA on Azure instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesListByResourceGroupTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        HanaInstancesListResult response = api.hanaInstancesListByResourceGroup(apiVersion, subscriptionId, resourceGroupName);
        // TODO: test validations
    }

    /**
     * The operation to restart a SAP HANA instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesRestartTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        api.hanaInstancesRestart(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
        // TODO: test validations
    }

    /**
     * The operation to shutdown a SAP HANA instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesShutdownTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        api.hanaInstancesShutdown(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
        // TODO: test validations
    }

    /**
     * The operation to start a SAP HANA instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesStartTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        api.hanaInstancesStart(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
        // TODO: test validations
    }

    /**
     * Patches the Tags field of a SAP HANA instance.
     *
     * Patches the Tags field of a SAP HANA instance for the specified subscription, resource group, and instance name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void hanaInstancesUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String hanaInstanceName = null;
        Tags tagsParameter = null;
        HanaInstance response = api.hanaInstancesUpdate(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, tagsParameter);
        // TODO: test validations
    }

    /**
     * Gets a list of SAP HANA management operations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        OperationList response = api.operationsList(apiVersion);
        // TODO: test validations
    }

    /**
     * Creates a SAP monitor.
     *
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sapMonitorsCreateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String sapMonitorName = null;
        SapMonitor sapMonitorParameter = null;
        SapMonitor response = api.sapMonitorsCreate(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, sapMonitorParameter);
        // TODO: test validations
    }

    /**
     * Deletes a SAP monitor.
     *
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sapMonitorsDeleteTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String sapMonitorName = null;
        api.sapMonitorsDelete(apiVersion, subscriptionId, resourceGroupName, sapMonitorName);
        // TODO: test validations
    }

    /**
     * Gets properties of a SAP monitor.
     *
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sapMonitorsGetTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String sapMonitorName = null;
        SapMonitor response = api.sapMonitorsGet(apiVersion, subscriptionId, resourceGroupName, sapMonitorName);
        // TODO: test validations
    }

    /**
     * Gets a list of SAP monitors in the specified subscription.
     *
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sapMonitorsListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        SapMonitorListResult response = api.sapMonitorsList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Patches the Tags field of a SAP monitor.
     *
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sapMonitorsUpdateTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        String resourceGroupName = null;
        String sapMonitorName = null;
        Tags tagsParameter = null;
        SapMonitor response = api.sapMonitorsUpdate(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, tagsParameter);
        // TODO: test validations
    }

}
