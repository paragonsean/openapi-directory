/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the hardware settings for the HANA instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:44.289410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HardwareProfile {
  /**
   * Specifies the HANA instance SKU.
   */
  @JsonAdapter(HanaInstanceSizeEnum.Adapter.class)
  public enum HanaInstanceSizeEnum {
    S72M("S72m"),
    
    S144M("S144m"),
    
    S72("S72"),
    
    S144("S144"),
    
    S192("S192"),
    
    S192M("S192m"),
    
    S192XM("S192xm"),
    
    S96("S96"),
    
    S112("S112"),
    
    S224M("S224m"),
    
    S224O("S224o"),
    
    S224OM("S224om"),
    
    S224OO("S224oo"),
    
    S224OOM("S224oom"),
    
    S224OOO("S224ooo"),
    
    S224OXM("S224oxm"),
    
    S224OXXM("S224oxxm"),
    
    S384("S384"),
    
    S384M("S384m"),
    
    S384XM("S384xm"),
    
    S384XXM("S384xxm"),
    
    S576M("S576m"),
    
    S576XM("S576xm"),
    
    S768("S768"),
    
    S768M("S768m"),
    
    S768XM("S768xm"),
    
    S960M("S960m");

    private String value;

    HanaInstanceSizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HanaInstanceSizeEnum fromValue(String value) {
      for (HanaInstanceSizeEnum b : HanaInstanceSizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HanaInstanceSizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HanaInstanceSizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HanaInstanceSizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HanaInstanceSizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HanaInstanceSizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HANA_INSTANCE_SIZE = "hanaInstanceSize";
  @SerializedName(SERIALIZED_NAME_HANA_INSTANCE_SIZE)
  private HanaInstanceSizeEnum hanaInstanceSize;

  /**
   * Name of the hardware type (vendor and/or their product name)
   */
  @JsonAdapter(HardwareTypeEnum.Adapter.class)
  public enum HardwareTypeEnum {
    CISCO_UCS("Cisco_UCS"),
    
    HPE("HPE");

    private String value;

    HardwareTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HardwareTypeEnum fromValue(String value) {
      for (HardwareTypeEnum b : HardwareTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HardwareTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HardwareTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HardwareTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HardwareTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      HardwareTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HARDWARE_TYPE = "hardwareType";
  @SerializedName(SERIALIZED_NAME_HARDWARE_TYPE)
  private HardwareTypeEnum hardwareType;

  public HardwareProfile() {
  }

  public HardwareProfile(
     HanaInstanceSizeEnum hanaInstanceSize, 
     HardwareTypeEnum hardwareType
  ) {
    this();
    this.hanaInstanceSize = hanaInstanceSize;
    this.hardwareType = hardwareType;
  }

  /**
   * Specifies the HANA instance SKU.
   * @return hanaInstanceSize
   */
  @javax.annotation.Nullable
  public HanaInstanceSizeEnum getHanaInstanceSize() {
    return hanaInstanceSize;
  }



  /**
   * Name of the hardware type (vendor and/or their product name)
   * @return hardwareType
   */
  @javax.annotation.Nullable
  public HardwareTypeEnum getHardwareType() {
    return hardwareType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HardwareProfile hardwareProfile = (HardwareProfile) o;
    return Objects.equals(this.hanaInstanceSize, hardwareProfile.hanaInstanceSize) &&
        Objects.equals(this.hardwareType, hardwareProfile.hardwareType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hanaInstanceSize, hardwareType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HardwareProfile {\n");
    sb.append("    hanaInstanceSize: ").append(toIndentedString(hanaInstanceSize)).append("\n");
    sb.append("    hardwareType: ").append(toIndentedString(hardwareType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hanaInstanceSize");
    openapiFields.add("hardwareType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HardwareProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HardwareProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HardwareProfile is not found in the empty JSON string", HardwareProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HardwareProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HardwareProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hanaInstanceSize") != null && !jsonObj.get("hanaInstanceSize").isJsonNull()) && !jsonObj.get("hanaInstanceSize").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaInstanceSize` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaInstanceSize").toString()));
      }
      // validate the optional field `hanaInstanceSize`
      if (jsonObj.get("hanaInstanceSize") != null && !jsonObj.get("hanaInstanceSize").isJsonNull()) {
        HanaInstanceSizeEnum.validateJsonElement(jsonObj.get("hanaInstanceSize"));
      }
      if ((jsonObj.get("hardwareType") != null && !jsonObj.get("hardwareType").isJsonNull()) && !jsonObj.get("hardwareType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hardwareType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hardwareType").toString()));
      }
      // validate the optional field `hardwareType`
      if (jsonObj.get("hardwareType") != null && !jsonObj.get("hardwareType").isJsonNull()) {
        HardwareTypeEnum.validateJsonElement(jsonObj.get("hardwareType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HardwareProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HardwareProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HardwareProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HardwareProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<HardwareProfile>() {
           @Override
           public void write(JsonWriter out, HardwareProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HardwareProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HardwareProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HardwareProfile
   * @throws IOException if the JSON string is invalid with respect to HardwareProfile
   */
  public static HardwareProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HardwareProfile.class);
  }

  /**
   * Convert an instance of HardwareProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

