/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.HardwareProfile;
import org.openapitools.client.model.NetworkProfile;
import org.openapitools.client.model.OSProfile;
import org.openapitools.client.model.StorageProfile;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a HANA instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:44.289410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class HanaInstanceProperties {
  public static final String SERIALIZED_NAME_HANA_INSTANCE_ID = "hanaInstanceId";
  @SerializedName(SERIALIZED_NAME_HANA_INSTANCE_ID)
  private String hanaInstanceId;

  public static final String SERIALIZED_NAME_HARDWARE_PROFILE = "hardwareProfile";
  @SerializedName(SERIALIZED_NAME_HARDWARE_PROFILE)
  private HardwareProfile hardwareProfile;

  public static final String SERIALIZED_NAME_HW_REVISION = "hwRevision";
  @SerializedName(SERIALIZED_NAME_HW_REVISION)
  private String hwRevision;

  public static final String SERIALIZED_NAME_NETWORK_PROFILE = "networkProfile";
  @SerializedName(SERIALIZED_NAME_NETWORK_PROFILE)
  private NetworkProfile networkProfile;

  public static final String SERIALIZED_NAME_OS_PROFILE = "osProfile";
  @SerializedName(SERIALIZED_NAME_OS_PROFILE)
  private OSProfile osProfile;

  public static final String SERIALIZED_NAME_PARTNER_NODE_ID = "partnerNodeId";
  @SerializedName(SERIALIZED_NAME_PARTNER_NODE_ID)
  private String partnerNodeId;

  /**
   * Resource power state
   */
  @JsonAdapter(PowerStateEnum.Adapter.class)
  public enum PowerStateEnum {
    STARTING("starting"),
    
    STARTED("started"),
    
    STOPPING("stopping"),
    
    STOPPED("stopped"),
    
    RESTARTING("restarting"),
    
    UNKNOWN("unknown");

    private String value;

    PowerStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PowerStateEnum fromValue(String value) {
      for (PowerStateEnum b : PowerStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PowerStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PowerStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PowerStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PowerStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PowerStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POWER_STATE = "powerState";
  @SerializedName(SERIALIZED_NAME_POWER_STATE)
  private PowerStateEnum powerState;

  /**
   * State of provisioning of the HanaInstance
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    ACCEPTED("Accepted"),
    
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    DELETING("Deleting"),
    
    MIGRATING("Migrating");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_PROXIMITY_PLACEMENT_GROUP = "proximityPlacementGroup";
  @SerializedName(SERIALIZED_NAME_PROXIMITY_PLACEMENT_GROUP)
  private String proximityPlacementGroup;

  public static final String SERIALIZED_NAME_STORAGE_PROFILE = "storageProfile";
  @SerializedName(SERIALIZED_NAME_STORAGE_PROFILE)
  private StorageProfile storageProfile;

  public HanaInstanceProperties() {
  }

  public HanaInstanceProperties(
     String hanaInstanceId, 
     String hwRevision, 
     PowerStateEnum powerState, 
     ProvisioningStateEnum provisioningState, 
     String proximityPlacementGroup
  ) {
    this();
    this.hanaInstanceId = hanaInstanceId;
    this.hwRevision = hwRevision;
    this.powerState = powerState;
    this.provisioningState = provisioningState;
    this.proximityPlacementGroup = proximityPlacementGroup;
  }

  /**
   * Specifies the HANA instance unique ID.
   * @return hanaInstanceId
   */
  @javax.annotation.Nullable
  public String getHanaInstanceId() {
    return hanaInstanceId;
  }



  public HanaInstanceProperties hardwareProfile(HardwareProfile hardwareProfile) {
    this.hardwareProfile = hardwareProfile;
    return this;
  }

  /**
   * Get hardwareProfile
   * @return hardwareProfile
   */
  @javax.annotation.Nullable
  public HardwareProfile getHardwareProfile() {
    return hardwareProfile;
  }

  public void setHardwareProfile(HardwareProfile hardwareProfile) {
    this.hardwareProfile = hardwareProfile;
  }


  /**
   * Hardware revision of a HANA instance
   * @return hwRevision
   */
  @javax.annotation.Nullable
  public String getHwRevision() {
    return hwRevision;
  }



  public HanaInstanceProperties networkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
    return this;
  }

  /**
   * Get networkProfile
   * @return networkProfile
   */
  @javax.annotation.Nullable
  public NetworkProfile getNetworkProfile() {
    return networkProfile;
  }

  public void setNetworkProfile(NetworkProfile networkProfile) {
    this.networkProfile = networkProfile;
  }


  public HanaInstanceProperties osProfile(OSProfile osProfile) {
    this.osProfile = osProfile;
    return this;
  }

  /**
   * Get osProfile
   * @return osProfile
   */
  @javax.annotation.Nullable
  public OSProfile getOsProfile() {
    return osProfile;
  }

  public void setOsProfile(OSProfile osProfile) {
    this.osProfile = osProfile;
  }


  public HanaInstanceProperties partnerNodeId(String partnerNodeId) {
    this.partnerNodeId = partnerNodeId;
    return this;
  }

  /**
   * ARM ID of another HanaInstance that will share a network with this HanaInstance
   * @return partnerNodeId
   */
  @javax.annotation.Nullable
  public String getPartnerNodeId() {
    return partnerNodeId;
  }

  public void setPartnerNodeId(String partnerNodeId) {
    this.partnerNodeId = partnerNodeId;
  }


  /**
   * Resource power state
   * @return powerState
   */
  @javax.annotation.Nullable
  public PowerStateEnum getPowerState() {
    return powerState;
  }



  /**
   * State of provisioning of the HanaInstance
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * Resource proximity placement group
   * @return proximityPlacementGroup
   */
  @javax.annotation.Nullable
  public String getProximityPlacementGroup() {
    return proximityPlacementGroup;
  }



  public HanaInstanceProperties storageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
    return this;
  }

  /**
   * Get storageProfile
   * @return storageProfile
   */
  @javax.annotation.Nullable
  public StorageProfile getStorageProfile() {
    return storageProfile;
  }

  public void setStorageProfile(StorageProfile storageProfile) {
    this.storageProfile = storageProfile;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HanaInstanceProperties hanaInstanceProperties = (HanaInstanceProperties) o;
    return Objects.equals(this.hanaInstanceId, hanaInstanceProperties.hanaInstanceId) &&
        Objects.equals(this.hardwareProfile, hanaInstanceProperties.hardwareProfile) &&
        Objects.equals(this.hwRevision, hanaInstanceProperties.hwRevision) &&
        Objects.equals(this.networkProfile, hanaInstanceProperties.networkProfile) &&
        Objects.equals(this.osProfile, hanaInstanceProperties.osProfile) &&
        Objects.equals(this.partnerNodeId, hanaInstanceProperties.partnerNodeId) &&
        Objects.equals(this.powerState, hanaInstanceProperties.powerState) &&
        Objects.equals(this.provisioningState, hanaInstanceProperties.provisioningState) &&
        Objects.equals(this.proximityPlacementGroup, hanaInstanceProperties.proximityPlacementGroup) &&
        Objects.equals(this.storageProfile, hanaInstanceProperties.storageProfile);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hanaInstanceId, hardwareProfile, hwRevision, networkProfile, osProfile, partnerNodeId, powerState, provisioningState, proximityPlacementGroup, storageProfile);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HanaInstanceProperties {\n");
    sb.append("    hanaInstanceId: ").append(toIndentedString(hanaInstanceId)).append("\n");
    sb.append("    hardwareProfile: ").append(toIndentedString(hardwareProfile)).append("\n");
    sb.append("    hwRevision: ").append(toIndentedString(hwRevision)).append("\n");
    sb.append("    networkProfile: ").append(toIndentedString(networkProfile)).append("\n");
    sb.append("    osProfile: ").append(toIndentedString(osProfile)).append("\n");
    sb.append("    partnerNodeId: ").append(toIndentedString(partnerNodeId)).append("\n");
    sb.append("    powerState: ").append(toIndentedString(powerState)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    proximityPlacementGroup: ").append(toIndentedString(proximityPlacementGroup)).append("\n");
    sb.append("    storageProfile: ").append(toIndentedString(storageProfile)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hanaInstanceId");
    openapiFields.add("hardwareProfile");
    openapiFields.add("hwRevision");
    openapiFields.add("networkProfile");
    openapiFields.add("osProfile");
    openapiFields.add("partnerNodeId");
    openapiFields.add("powerState");
    openapiFields.add("provisioningState");
    openapiFields.add("proximityPlacementGroup");
    openapiFields.add("storageProfile");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HanaInstanceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!HanaInstanceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HanaInstanceProperties is not found in the empty JSON string", HanaInstanceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HanaInstanceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HanaInstanceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hanaInstanceId") != null && !jsonObj.get("hanaInstanceId").isJsonNull()) && !jsonObj.get("hanaInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaInstanceId").toString()));
      }
      // validate the optional field `hardwareProfile`
      if (jsonObj.get("hardwareProfile") != null && !jsonObj.get("hardwareProfile").isJsonNull()) {
        HardwareProfile.validateJsonElement(jsonObj.get("hardwareProfile"));
      }
      if ((jsonObj.get("hwRevision") != null && !jsonObj.get("hwRevision").isJsonNull()) && !jsonObj.get("hwRevision").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hwRevision` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hwRevision").toString()));
      }
      // validate the optional field `networkProfile`
      if (jsonObj.get("networkProfile") != null && !jsonObj.get("networkProfile").isJsonNull()) {
        NetworkProfile.validateJsonElement(jsonObj.get("networkProfile"));
      }
      // validate the optional field `osProfile`
      if (jsonObj.get("osProfile") != null && !jsonObj.get("osProfile").isJsonNull()) {
        OSProfile.validateJsonElement(jsonObj.get("osProfile"));
      }
      if ((jsonObj.get("partnerNodeId") != null && !jsonObj.get("partnerNodeId").isJsonNull()) && !jsonObj.get("partnerNodeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerNodeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerNodeId").toString()));
      }
      if ((jsonObj.get("powerState") != null && !jsonObj.get("powerState").isJsonNull()) && !jsonObj.get("powerState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `powerState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("powerState").toString()));
      }
      // validate the optional field `powerState`
      if (jsonObj.get("powerState") != null && !jsonObj.get("powerState").isJsonNull()) {
        PowerStateEnum.validateJsonElement(jsonObj.get("powerState"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("proximityPlacementGroup") != null && !jsonObj.get("proximityPlacementGroup").isJsonNull()) && !jsonObj.get("proximityPlacementGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proximityPlacementGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proximityPlacementGroup").toString()));
      }
      // validate the optional field `storageProfile`
      if (jsonObj.get("storageProfile") != null && !jsonObj.get("storageProfile").isJsonNull()) {
        StorageProfile.validateJsonElement(jsonObj.get("storageProfile"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HanaInstanceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HanaInstanceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HanaInstanceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HanaInstanceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<HanaInstanceProperties>() {
           @Override
           public void write(JsonWriter out, HanaInstanceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HanaInstanceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HanaInstanceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HanaInstanceProperties
   * @throws IOException if the JSON string is invalid with respect to HanaInstanceProperties
   */
  public static HanaInstanceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HanaInstanceProperties.class);
  }

  /**
   * Convert an instance of HanaInstanceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

