/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Details needed to monitor a Hana Instance
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:44.289410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MonitoringDetails {
  public static final String SERIALIZED_NAME_HANA_DB_NAME = "hanaDbName";
  @SerializedName(SERIALIZED_NAME_HANA_DB_NAME)
  private String hanaDbName;

  public static final String SERIALIZED_NAME_HANA_DB_PASSWORD = "hanaDbPassword";
  @SerializedName(SERIALIZED_NAME_HANA_DB_PASSWORD)
  private String hanaDbPassword;

  public static final String SERIALIZED_NAME_HANA_DB_SQL_PORT = "hanaDbSqlPort";
  @SerializedName(SERIALIZED_NAME_HANA_DB_SQL_PORT)
  private Integer hanaDbSqlPort;

  public static final String SERIALIZED_NAME_HANA_DB_USERNAME = "hanaDbUsername";
  @SerializedName(SERIALIZED_NAME_HANA_DB_USERNAME)
  private String hanaDbUsername;

  public static final String SERIALIZED_NAME_HANA_HOSTNAME = "hanaHostname";
  @SerializedName(SERIALIZED_NAME_HANA_HOSTNAME)
  private String hanaHostname;

  public static final String SERIALIZED_NAME_HANA_SUBNET = "hanaSubnet";
  @SerializedName(SERIALIZED_NAME_HANA_SUBNET)
  private String hanaSubnet;

  public MonitoringDetails() {
  }

  public MonitoringDetails hanaDbName(String hanaDbName) {
    this.hanaDbName = hanaDbName;
    return this;
  }

  /**
   * Name of the database itself.
   * @return hanaDbName
   */
  @javax.annotation.Nullable
  public String getHanaDbName() {
    return hanaDbName;
  }

  public void setHanaDbName(String hanaDbName) {
    this.hanaDbName = hanaDbName;
  }


  public MonitoringDetails hanaDbPassword(String hanaDbPassword) {
    this.hanaDbPassword = hanaDbPassword;
    return this;
  }

  /**
   * Password for the HANA database to login for monitoring
   * @return hanaDbPassword
   */
  @javax.annotation.Nullable
  public String getHanaDbPassword() {
    return hanaDbPassword;
  }

  public void setHanaDbPassword(String hanaDbPassword) {
    this.hanaDbPassword = hanaDbPassword;
  }


  public MonitoringDetails hanaDbSqlPort(Integer hanaDbSqlPort) {
    this.hanaDbSqlPort = hanaDbSqlPort;
    return this;
  }

  /**
   * The port number of the tenant DB. Used to connect to the DB.
   * @return hanaDbSqlPort
   */
  @javax.annotation.Nullable
  public Integer getHanaDbSqlPort() {
    return hanaDbSqlPort;
  }

  public void setHanaDbSqlPort(Integer hanaDbSqlPort) {
    this.hanaDbSqlPort = hanaDbSqlPort;
  }


  public MonitoringDetails hanaDbUsername(String hanaDbUsername) {
    this.hanaDbUsername = hanaDbUsername;
    return this;
  }

  /**
   * Username for the HANA database to login to for monitoring
   * @return hanaDbUsername
   */
  @javax.annotation.Nullable
  public String getHanaDbUsername() {
    return hanaDbUsername;
  }

  public void setHanaDbUsername(String hanaDbUsername) {
    this.hanaDbUsername = hanaDbUsername;
  }


  public MonitoringDetails hanaHostname(String hanaHostname) {
    this.hanaHostname = hanaHostname;
    return this;
  }

  /**
   * Hostname of the HANA Instance blade.
   * @return hanaHostname
   */
  @javax.annotation.Nullable
  public String getHanaHostname() {
    return hanaHostname;
  }

  public void setHanaHostname(String hanaHostname) {
    this.hanaHostname = hanaHostname;
  }


  public MonitoringDetails hanaSubnet(String hanaSubnet) {
    this.hanaSubnet = hanaSubnet;
    return this;
  }

  /**
   * ARM ID of an Azure Subnet with access to the HANA instance.
   * @return hanaSubnet
   */
  @javax.annotation.Nullable
  public String getHanaSubnet() {
    return hanaSubnet;
  }

  public void setHanaSubnet(String hanaSubnet) {
    this.hanaSubnet = hanaSubnet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MonitoringDetails monitoringDetails = (MonitoringDetails) o;
    return Objects.equals(this.hanaDbName, monitoringDetails.hanaDbName) &&
        Objects.equals(this.hanaDbPassword, monitoringDetails.hanaDbPassword) &&
        Objects.equals(this.hanaDbSqlPort, monitoringDetails.hanaDbSqlPort) &&
        Objects.equals(this.hanaDbUsername, monitoringDetails.hanaDbUsername) &&
        Objects.equals(this.hanaHostname, monitoringDetails.hanaHostname) &&
        Objects.equals(this.hanaSubnet, monitoringDetails.hanaSubnet);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hanaDbName, hanaDbPassword, hanaDbSqlPort, hanaDbUsername, hanaHostname, hanaSubnet);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MonitoringDetails {\n");
    sb.append("    hanaDbName: ").append(toIndentedString(hanaDbName)).append("\n");
    sb.append("    hanaDbPassword: ").append(toIndentedString(hanaDbPassword)).append("\n");
    sb.append("    hanaDbSqlPort: ").append(toIndentedString(hanaDbSqlPort)).append("\n");
    sb.append("    hanaDbUsername: ").append(toIndentedString(hanaDbUsername)).append("\n");
    sb.append("    hanaHostname: ").append(toIndentedString(hanaHostname)).append("\n");
    sb.append("    hanaSubnet: ").append(toIndentedString(hanaSubnet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hanaDbName");
    openapiFields.add("hanaDbPassword");
    openapiFields.add("hanaDbSqlPort");
    openapiFields.add("hanaDbUsername");
    openapiFields.add("hanaHostname");
    openapiFields.add("hanaSubnet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MonitoringDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MonitoringDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MonitoringDetails is not found in the empty JSON string", MonitoringDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MonitoringDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MonitoringDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hanaDbName") != null && !jsonObj.get("hanaDbName").isJsonNull()) && !jsonObj.get("hanaDbName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbName").toString()));
      }
      if ((jsonObj.get("hanaDbPassword") != null && !jsonObj.get("hanaDbPassword").isJsonNull()) && !jsonObj.get("hanaDbPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbPassword").toString()));
      }
      if ((jsonObj.get("hanaDbUsername") != null && !jsonObj.get("hanaDbUsername").isJsonNull()) && !jsonObj.get("hanaDbUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbUsername").toString()));
      }
      if ((jsonObj.get("hanaHostname") != null && !jsonObj.get("hanaHostname").isJsonNull()) && !jsonObj.get("hanaHostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaHostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaHostname").toString()));
      }
      if ((jsonObj.get("hanaSubnet") != null && !jsonObj.get("hanaSubnet").isJsonNull()) && !jsonObj.get("hanaSubnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaSubnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaSubnet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MonitoringDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MonitoringDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MonitoringDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MonitoringDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<MonitoringDetails>() {
           @Override
           public void write(JsonWriter out, MonitoringDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MonitoringDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MonitoringDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MonitoringDetails
   * @throws IOException if the JSON string is invalid with respect to MonitoringDetails
   */
  public static MonitoringDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MonitoringDetails.class);
  }

  /**
   * Convert an instance of MonitoringDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

