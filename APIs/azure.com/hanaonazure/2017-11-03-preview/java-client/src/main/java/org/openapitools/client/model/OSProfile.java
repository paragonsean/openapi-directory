/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Specifies the operating system settings for the HANA instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:44.289410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OSProfile {
  public static final String SERIALIZED_NAME_COMPUTER_NAME = "computerName";
  @SerializedName(SERIALIZED_NAME_COMPUTER_NAME)
  private String computerName;

  public static final String SERIALIZED_NAME_OS_TYPE = "osType";
  @SerializedName(SERIALIZED_NAME_OS_TYPE)
  private String osType;

  public static final String SERIALIZED_NAME_SSH_PUBLIC_KEY = "sshPublicKey";
  @SerializedName(SERIALIZED_NAME_SSH_PUBLIC_KEY)
  private String sshPublicKey;

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public OSProfile() {
  }

  public OSProfile(
     String osType, 
     String version
  ) {
    this();
    this.osType = osType;
    this.version = version;
  }

  public OSProfile computerName(String computerName) {
    this.computerName = computerName;
    return this;
  }

  /**
   * Specifies the host OS name of the HANA instance.
   * @return computerName
   */
  @javax.annotation.Nullable
  public String getComputerName() {
    return computerName;
  }

  public void setComputerName(String computerName) {
    this.computerName = computerName;
  }


  /**
   * This property allows you to specify the type of the OS.
   * @return osType
   */
  @javax.annotation.Nullable
  public String getOsType() {
    return osType;
  }



  public OSProfile sshPublicKey(String sshPublicKey) {
    this.sshPublicKey = sshPublicKey;
    return this;
  }

  /**
   * Specifies the SSH public key used to access the operating system.
   * @return sshPublicKey
   */
  @javax.annotation.Nullable
  public String getSshPublicKey() {
    return sshPublicKey;
  }

  public void setSshPublicKey(String sshPublicKey) {
    this.sshPublicKey = sshPublicKey;
  }


  /**
   * Specifies version of operating system.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OSProfile osProfile = (OSProfile) o;
    return Objects.equals(this.computerName, osProfile.computerName) &&
        Objects.equals(this.osType, osProfile.osType) &&
        Objects.equals(this.sshPublicKey, osProfile.sshPublicKey) &&
        Objects.equals(this.version, osProfile.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computerName, osType, sshPublicKey, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OSProfile {\n");
    sb.append("    computerName: ").append(toIndentedString(computerName)).append("\n");
    sb.append("    osType: ").append(toIndentedString(osType)).append("\n");
    sb.append("    sshPublicKey: ").append(toIndentedString(sshPublicKey)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computerName");
    openapiFields.add("osType");
    openapiFields.add("sshPublicKey");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OSProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OSProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OSProfile is not found in the empty JSON string", OSProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OSProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OSProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computerName") != null && !jsonObj.get("computerName").isJsonNull()) && !jsonObj.get("computerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computerName").toString()));
      }
      if ((jsonObj.get("osType") != null && !jsonObj.get("osType").isJsonNull()) && !jsonObj.get("osType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `osType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("osType").toString()));
      }
      if ((jsonObj.get("sshPublicKey") != null && !jsonObj.get("sshPublicKey").isJsonNull()) && !jsonObj.get("sshPublicKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sshPublicKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sshPublicKey").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OSProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OSProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OSProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OSProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<OSProfile>() {
           @Override
           public void write(JsonWriter out, OSProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OSProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OSProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OSProfile
   * @throws IOException if the JSON string is invalid with respect to OSProfile
   */
  public static OSProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OSProfile.class);
  }

  /**
   * Convert an instance of OSProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

