/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.HanaInstance;
import org.openapitools.client.model.HanaInstancesListResult;
import org.openapitools.client.model.OperationList;
import org.openapitools.client.model.SapMonitor;
import org.openapitools.client.model.SapMonitorListResult;
import org.openapitools.client.model.Tags;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class HanaOnAzureApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public HanaOnAzureApi() {
        this(Configuration.getDefaultApiClient());
    }

    public HanaOnAzureApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for hanaInstancesCreate
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param hanaInstanceParameter Request body representing a HanaInstance (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created HanaInstance </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating HanaInstance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesCreateCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, HanaInstance hanaInstanceParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = hanaInstanceParameter;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesCreateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, HanaInstance hanaInstanceParameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesCreate(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesCreate(Async)");
        }

        // verify the required parameter 'hanaInstanceParameter' is set
        if (hanaInstanceParameter == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceParameter' when calling hanaInstancesCreate(Async)");
        }

        return hanaInstancesCreateCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, hanaInstanceParameter, _callback);

    }

    /**
     * Creates a SAP HANA instance.
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param hanaInstanceParameter Request body representing a HanaInstance (required)
     * @return HanaInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created HanaInstance </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating HanaInstance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HanaInstance hanaInstancesCreate(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, HanaInstance hanaInstanceParameter) throws ApiException {
        ApiResponse<HanaInstance> localVarResp = hanaInstancesCreateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, hanaInstanceParameter);
        return localVarResp.getData();
    }

    /**
     * Creates a SAP HANA instance.
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param hanaInstanceParameter Request body representing a HanaInstance (required)
     * @return ApiResponse&lt;HanaInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created HanaInstance </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating HanaInstance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HanaInstance> hanaInstancesCreateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, HanaInstance hanaInstanceParameter) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, hanaInstanceParameter, null);
        Type localVarReturnType = new TypeToken<HanaInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a SAP HANA instance. (asynchronously)
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param hanaInstanceParameter Request body representing a HanaInstance (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created HanaInstance </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating HanaInstance </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesCreateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, HanaInstance hanaInstanceParameter, final ApiCallback<HanaInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, hanaInstanceParameter, _callback);
        Type localVarReturnType = new TypeToken<HanaInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesDelete
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted HanaInstance </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting HanaInstance </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No HanaInstance to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesDelete(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesDelete(Async)");
        }

        return hanaInstancesDeleteCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);

    }

    /**
     * Deletes a SAP HANA instance.
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted HanaInstance </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting HanaInstance </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No HanaInstance to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hanaInstancesDelete(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        hanaInstancesDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
    }

    /**
     * Deletes a SAP HANA instance.
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted HanaInstance </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting HanaInstance </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No HanaInstance to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hanaInstancesDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a SAP HANA instance. (asynchronously)
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted HanaInstance </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting HanaInstance </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No HanaInstance to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesGet
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesGet(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesGet(Async)");
        }

        return hanaInstancesGetCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);

    }

    /**
     * Gets properties of a SAP HANA instance.
     * Gets properties of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @return HanaInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HanaInstance hanaInstancesGet(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        ApiResponse<HanaInstance> localVarResp = hanaInstancesGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
        return localVarResp.getData();
    }

    /**
     * Gets properties of a SAP HANA instance.
     * Gets properties of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @return ApiResponse&lt;HanaInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HanaInstance> hanaInstancesGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, null);
        Type localVarReturnType = new TypeToken<HanaInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets properties of a SAP HANA instance. (asynchronously)
     * Gets properties of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback<HanaInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);
        Type localVarReturnType = new TypeToken<HanaInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesList
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/hanaInstances"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesList(Async)");
        }

        return hanaInstancesListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription.
     * Gets a list of SAP HANA instances in the specified subscription. The operations returns various properties of each SAP HANA on Azure instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return HanaInstancesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HanaInstancesListResult hanaInstancesList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<HanaInstancesListResult> localVarResp = hanaInstancesListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription.
     * Gets a list of SAP HANA instances in the specified subscription. The operations returns various properties of each SAP HANA on Azure instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;HanaInstancesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HanaInstancesListResult> hanaInstancesListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<HanaInstancesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription. (asynchronously)
     * Gets a list of SAP HANA instances in the specified subscription. The operations returns various properties of each SAP HANA on Azure instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesListAsync(String apiVersion, String subscriptionId, final ApiCallback<HanaInstancesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<HanaInstancesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesListByResourceGroup
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesListByResourceGroup(Async)");
        }

        return hanaInstancesListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription and the resource group.
     * Gets a list of SAP HANA instances in the specified subscription and the resource group. The operations returns various properties of each SAP HANA on Azure instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @return HanaInstancesListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HanaInstancesListResult hanaInstancesListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<HanaInstancesListResult> localVarResp = hanaInstancesListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription and the resource group.
     * Gets a list of SAP HANA instances in the specified subscription and the resource group. The operations returns various properties of each SAP HANA on Azure instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @return ApiResponse&lt;HanaInstancesListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HanaInstancesListResult> hanaInstancesListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<HanaInstancesListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of SAP HANA instances in the specified subscription and the resource group. (asynchronously)
     * Gets a list of SAP HANA instances in the specified subscription and the resource group. The operations returns various properties of each SAP HANA on Azure instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<HanaInstancesListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<HanaInstancesListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesRestart
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesRestartCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/restart"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesRestartValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesRestart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesRestart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesRestart(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesRestart(Async)");
        }

        return hanaInstancesRestartCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);

    }

    /**
     * 
     * The operation to restart a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hanaInstancesRestart(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        hanaInstancesRestartWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
    }

    /**
     * 
     * The operation to restart a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hanaInstancesRestartWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesRestartValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The operation to restart a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesRestartAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesRestartValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesShutdown
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesShutdownCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/shutdown"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesShutdownValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesShutdown(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesShutdown(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesShutdown(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesShutdown(Async)");
        }

        return hanaInstancesShutdownCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);

    }

    /**
     * 
     * The operation to shutdown a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hanaInstancesShutdown(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        hanaInstancesShutdownWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
    }

    /**
     * 
     * The operation to shutdown a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hanaInstancesShutdownWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesShutdownValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The operation to shutdown a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesShutdownAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesShutdownValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesStart
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesStartCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesStartValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesStart(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesStart(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesStart(Async)");
        }

        return hanaInstancesStartCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);

    }

    /**
     * 
     * The operation to start a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void hanaInstancesStart(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        hanaInstancesStartWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName);
    }

    /**
     * 
     * The operation to start a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> hanaInstancesStartWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesStartValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The operation to start a SAP HANA instance.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesStartAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesStartValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for hanaInstancesUpdate
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, Tags tagsParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsParameter;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "hanaInstanceName" + "}", localVarApiClient.escapeString(hanaInstanceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hanaInstancesUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, Tags tagsParameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling hanaInstancesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling hanaInstancesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling hanaInstancesUpdate(Async)");
        }

        // verify the required parameter 'hanaInstanceName' is set
        if (hanaInstanceName == null) {
            throw new ApiException("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesUpdate(Async)");
        }

        // verify the required parameter 'tagsParameter' is set
        if (tagsParameter == null) {
            throw new ApiException("Missing the required parameter 'tagsParameter' when calling hanaInstancesUpdate(Async)");
        }

        return hanaInstancesUpdateCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, tagsParameter, _callback);

    }

    /**
     * Patches the Tags field of a SAP HANA instance.
     * Patches the Tags field of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @return HanaInstance
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public HanaInstance hanaInstancesUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, Tags tagsParameter) throws ApiException {
        ApiResponse<HanaInstance> localVarResp = hanaInstancesUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, tagsParameter);
        return localVarResp.getData();
    }

    /**
     * Patches the Tags field of a SAP HANA instance.
     * Patches the Tags field of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @return ApiResponse&lt;HanaInstance&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<HanaInstance> hanaInstancesUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, Tags tagsParameter) throws ApiException {
        okhttp3.Call localVarCall = hanaInstancesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, tagsParameter, null);
        Type localVarReturnType = new TypeToken<HanaInstance>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patches the Tags field of a SAP HANA instance. (asynchronously)
     * Patches the Tags field of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param hanaInstanceName Name of the SAP HANA on Azure instance. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hanaInstancesUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String hanaInstanceName, Tags tagsParameter, final ApiCallback<HanaInstance> _callback) throws ApiException {

        okhttp3.Call localVarCall = hanaInstancesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, tagsParameter, _callback);
        Type localVarReturnType = new TypeToken<HanaInstance>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.HanaOnAzure/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * Gets a list of SAP HANA management operations.
     * @param apiVersion Client API version. (required)
     * @return OperationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public OperationList operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationList> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of SAP HANA management operations.
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;OperationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationList> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of SAP HANA management operations.
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sapMonitorsCreate
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param sapMonitorParameter Request body representing a SAP Monitor (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created SapMonitor </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating SapMonitor </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsCreateCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, SapMonitor sapMonitorParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sapMonitorParameter;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "sapMonitorName" + "}", localVarApiClient.escapeString(sapMonitorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sapMonitorsCreateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, SapMonitor sapMonitorParameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sapMonitorsCreate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sapMonitorsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sapMonitorsCreate(Async)");
        }

        // verify the required parameter 'sapMonitorName' is set
        if (sapMonitorName == null) {
            throw new ApiException("Missing the required parameter 'sapMonitorName' when calling sapMonitorsCreate(Async)");
        }

        // verify the required parameter 'sapMonitorParameter' is set
        if (sapMonitorParameter == null) {
            throw new ApiException("Missing the required parameter 'sapMonitorParameter' when calling sapMonitorsCreate(Async)");
        }

        return sapMonitorsCreateCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, sapMonitorParameter, _callback);

    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param sapMonitorParameter Request body representing a SAP Monitor (required)
     * @return SapMonitor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created SapMonitor </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating SapMonitor </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SapMonitor sapMonitorsCreate(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, SapMonitor sapMonitorParameter) throws ApiException {
        ApiResponse<SapMonitor> localVarResp = sapMonitorsCreateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, sapMonitorParameter);
        return localVarResp.getData();
    }

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param sapMonitorParameter Request body representing a SAP Monitor (required)
     * @return ApiResponse&lt;SapMonitor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created SapMonitor </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating SapMonitor </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SapMonitor> sapMonitorsCreateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, SapMonitor sapMonitorParameter) throws ApiException {
        okhttp3.Call localVarCall = sapMonitorsCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, sapMonitorParameter, null);
        Type localVarReturnType = new TypeToken<SapMonitor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Creates a SAP monitor. (asynchronously)
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param sapMonitorParameter Request body representing a SAP Monitor (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Created SapMonitor </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Creating SapMonitor </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsCreateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, SapMonitor sapMonitorParameter, final ApiCallback<SapMonitor> _callback) throws ApiException {

        okhttp3.Call localVarCall = sapMonitorsCreateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, sapMonitorParameter, _callback);
        Type localVarReturnType = new TypeToken<SapMonitor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sapMonitorsDelete
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted SapMonitor </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting SapMonitor </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No SapMonitor to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "sapMonitorName" + "}", localVarApiClient.escapeString(sapMonitorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sapMonitorsDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sapMonitorsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sapMonitorsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sapMonitorsDelete(Async)");
        }

        // verify the required parameter 'sapMonitorName' is set
        if (sapMonitorName == null) {
            throw new ApiException("Missing the required parameter 'sapMonitorName' when calling sapMonitorsDelete(Async)");
        }

        return sapMonitorsDeleteCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, _callback);

    }

    /**
     * Deletes a SAP monitor.
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted SapMonitor </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting SapMonitor </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No SapMonitor to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void sapMonitorsDelete(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName) throws ApiException {
        sapMonitorsDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, sapMonitorName);
    }

    /**
     * Deletes a SAP monitor.
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted SapMonitor </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting SapMonitor </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No SapMonitor to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> sapMonitorsDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName) throws ApiException {
        okhttp3.Call localVarCall = sapMonitorsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Deletes a SAP monitor. (asynchronously)
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Deleted SapMonitor </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deleting SapMonitor </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> No SapMonitor to delete </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sapMonitorsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for sapMonitorsGet
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "sapMonitorName" + "}", localVarApiClient.escapeString(sapMonitorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sapMonitorsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sapMonitorsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sapMonitorsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sapMonitorsGet(Async)");
        }

        // verify the required parameter 'sapMonitorName' is set
        if (sapMonitorName == null) {
            throw new ApiException("Missing the required parameter 'sapMonitorName' when calling sapMonitorsGet(Async)");
        }

        return sapMonitorsGetCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, _callback);

    }

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @return SapMonitor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SapMonitor sapMonitorsGet(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName) throws ApiException {
        ApiResponse<SapMonitor> localVarResp = sapMonitorsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, sapMonitorName);
        return localVarResp.getData();
    }

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @return ApiResponse&lt;SapMonitor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SapMonitor> sapMonitorsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName) throws ApiException {
        okhttp3.Call localVarCall = sapMonitorsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, null);
        Type localVarReturnType = new TypeToken<SapMonitor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets properties of a SAP monitor. (asynchronously)
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, final ApiCallback<SapMonitor> _callback) throws ApiException {

        okhttp3.Call localVarCall = sapMonitorsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, _callback);
        Type localVarReturnType = new TypeToken<SapMonitor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sapMonitorsList
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/sapMonitors"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sapMonitorsListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sapMonitorsList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sapMonitorsList(Async)");
        }

        return sapMonitorsListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * Gets a list of SAP monitors in the specified subscription.
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return SapMonitorListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SapMonitorListResult sapMonitorsList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<SapMonitorListResult> localVarResp = sapMonitorsListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * Gets a list of SAP monitors in the specified subscription.
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;SapMonitorListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SapMonitorListResult> sapMonitorsListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = sapMonitorsListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<SapMonitorListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets a list of SAP monitors in the specified subscription. (asynchronously)
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsListAsync(String apiVersion, String subscriptionId, final ApiCallback<SapMonitorListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sapMonitorsListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<SapMonitorListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sapMonitorsUpdate
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, Tags tagsParameter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagsParameter;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "sapMonitorName" + "}", localVarApiClient.escapeString(sapMonitorName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sapMonitorsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, Tags tagsParameter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sapMonitorsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sapMonitorsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sapMonitorsUpdate(Async)");
        }

        // verify the required parameter 'sapMonitorName' is set
        if (sapMonitorName == null) {
            throw new ApiException("Missing the required parameter 'sapMonitorName' when calling sapMonitorsUpdate(Async)");
        }

        // verify the required parameter 'tagsParameter' is set
        if (tagsParameter == null) {
            throw new ApiException("Missing the required parameter 'tagsParameter' when calling sapMonitorsUpdate(Async)");
        }

        return sapMonitorsUpdateCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, tagsParameter, _callback);

    }

    /**
     * Patches the Tags field of a SAP monitor.
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @return SapMonitor
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SapMonitor sapMonitorsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, Tags tagsParameter) throws ApiException {
        ApiResponse<SapMonitor> localVarResp = sapMonitorsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, tagsParameter);
        return localVarResp.getData();
    }

    /**
     * Patches the Tags field of a SAP monitor.
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @return ApiResponse&lt;SapMonitor&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SapMonitor> sapMonitorsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, Tags tagsParameter) throws ApiException {
        okhttp3.Call localVarCall = sapMonitorsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, tagsParameter, null);
        Type localVarReturnType = new TypeToken<SapMonitor>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patches the Tags field of a SAP monitor. (asynchronously)
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     * @param apiVersion Client API version. (required)
     * @param subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName Name of the resource group. (required)
     * @param sapMonitorName Name of the SAP monitor resource. (required)
     * @param tagsParameter Request body that only contains the new Tags field (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sapMonitorsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String sapMonitorName, Tags tagsParameter, final ApiCallback<SapMonitor> _callback) throws ApiException {

        okhttp3.Call localVarCall = sapMonitorsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, tagsParameter, _callback);
        Type localVarReturnType = new TypeToken<SapMonitor>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
