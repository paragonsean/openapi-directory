/*
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes the properties of a SAP monitor.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:44.289410-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SapMonitorProperties {
  public static final String SERIALIZED_NAME_ENABLE_CUSTOMER_ANALYTICS = "enableCustomerAnalytics";
  @SerializedName(SERIALIZED_NAME_ENABLE_CUSTOMER_ANALYTICS)
  private Boolean enableCustomerAnalytics;

  public static final String SERIALIZED_NAME_HANA_DB_CREDENTIALS_MSI_ID = "hanaDbCredentialsMsiId";
  @SerializedName(SERIALIZED_NAME_HANA_DB_CREDENTIALS_MSI_ID)
  private String hanaDbCredentialsMsiId;

  public static final String SERIALIZED_NAME_HANA_DB_NAME = "hanaDbName";
  @SerializedName(SERIALIZED_NAME_HANA_DB_NAME)
  private String hanaDbName;

  public static final String SERIALIZED_NAME_HANA_DB_PASSWORD = "hanaDbPassword";
  @SerializedName(SERIALIZED_NAME_HANA_DB_PASSWORD)
  private String hanaDbPassword;

  public static final String SERIALIZED_NAME_HANA_DB_PASSWORD_KEY_VAULT_URL = "hanaDbPasswordKeyVaultUrl";
  @SerializedName(SERIALIZED_NAME_HANA_DB_PASSWORD_KEY_VAULT_URL)
  private String hanaDbPasswordKeyVaultUrl;

  public static final String SERIALIZED_NAME_HANA_DB_SQL_PORT = "hanaDbSqlPort";
  @SerializedName(SERIALIZED_NAME_HANA_DB_SQL_PORT)
  private Integer hanaDbSqlPort;

  public static final String SERIALIZED_NAME_HANA_DB_USERNAME = "hanaDbUsername";
  @SerializedName(SERIALIZED_NAME_HANA_DB_USERNAME)
  private String hanaDbUsername;

  public static final String SERIALIZED_NAME_HANA_HOSTNAME = "hanaHostname";
  @SerializedName(SERIALIZED_NAME_HANA_HOSTNAME)
  private String hanaHostname;

  public static final String SERIALIZED_NAME_HANA_SUBNET = "hanaSubnet";
  @SerializedName(SERIALIZED_NAME_HANA_SUBNET)
  private String hanaSubnet;

  public static final String SERIALIZED_NAME_KEY_VAULT_ID = "keyVaultId";
  @SerializedName(SERIALIZED_NAME_KEY_VAULT_ID)
  private String keyVaultId;

  public static final String SERIALIZED_NAME_LOG_ANALYTICS_WORKSPACE_ARM_ID = "logAnalyticsWorkspaceArmId";
  @SerializedName(SERIALIZED_NAME_LOG_ANALYTICS_WORKSPACE_ARM_ID)
  private String logAnalyticsWorkspaceArmId;

  public static final String SERIALIZED_NAME_LOG_ANALYTICS_WORKSPACE_ID = "logAnalyticsWorkspaceId";
  @SerializedName(SERIALIZED_NAME_LOG_ANALYTICS_WORKSPACE_ID)
  private String logAnalyticsWorkspaceId;

  public static final String SERIALIZED_NAME_LOG_ANALYTICS_WORKSPACE_SHARED_KEY = "logAnalyticsWorkspaceSharedKey";
  @SerializedName(SERIALIZED_NAME_LOG_ANALYTICS_WORKSPACE_SHARED_KEY)
  private String logAnalyticsWorkspaceSharedKey;

  public static final String SERIALIZED_NAME_MANAGED_RESOURCE_GROUP_NAME = "managedResourceGroupName";
  @SerializedName(SERIALIZED_NAME_MANAGED_RESOURCE_GROUP_NAME)
  private String managedResourceGroupName;

  /**
   * State of provisioning of the HanaInstance
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    ACCEPTED("Accepted"),
    
    CREATING("Creating"),
    
    UPDATING("Updating"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    DELETING("Deleting"),
    
    MIGRATING("Migrating");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public SapMonitorProperties() {
  }

  public SapMonitorProperties(
     String managedResourceGroupName, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.managedResourceGroupName = managedResourceGroupName;
    this.provisioningState = provisioningState;
  }

  public SapMonitorProperties enableCustomerAnalytics(Boolean enableCustomerAnalytics) {
    this.enableCustomerAnalytics = enableCustomerAnalytics;
    return this;
  }

  /**
   * The value indicating whether to send analytics to Microsoft
   * @return enableCustomerAnalytics
   */
  @javax.annotation.Nullable
  public Boolean getEnableCustomerAnalytics() {
    return enableCustomerAnalytics;
  }

  public void setEnableCustomerAnalytics(Boolean enableCustomerAnalytics) {
    this.enableCustomerAnalytics = enableCustomerAnalytics;
  }


  public SapMonitorProperties hanaDbCredentialsMsiId(String hanaDbCredentialsMsiId) {
    this.hanaDbCredentialsMsiId = hanaDbCredentialsMsiId;
    return this;
  }

  /**
   * MSI ID passed by customer which has access to customer&#39;s KeyVault and to be assigned to the Collector VM.
   * @return hanaDbCredentialsMsiId
   */
  @javax.annotation.Nullable
  public String getHanaDbCredentialsMsiId() {
    return hanaDbCredentialsMsiId;
  }

  public void setHanaDbCredentialsMsiId(String hanaDbCredentialsMsiId) {
    this.hanaDbCredentialsMsiId = hanaDbCredentialsMsiId;
  }


  public SapMonitorProperties hanaDbName(String hanaDbName) {
    this.hanaDbName = hanaDbName;
    return this;
  }

  /**
   * Database name of the HANA instance.
   * @return hanaDbName
   */
  @javax.annotation.Nullable
  public String getHanaDbName() {
    return hanaDbName;
  }

  public void setHanaDbName(String hanaDbName) {
    this.hanaDbName = hanaDbName;
  }


  public SapMonitorProperties hanaDbPassword(String hanaDbPassword) {
    this.hanaDbPassword = hanaDbPassword;
    return this;
  }

  /**
   * Database password of the HANA instance.
   * @return hanaDbPassword
   */
  @javax.annotation.Nullable
  public String getHanaDbPassword() {
    return hanaDbPassword;
  }

  public void setHanaDbPassword(String hanaDbPassword) {
    this.hanaDbPassword = hanaDbPassword;
  }


  public SapMonitorProperties hanaDbPasswordKeyVaultUrl(String hanaDbPasswordKeyVaultUrl) {
    this.hanaDbPasswordKeyVaultUrl = hanaDbPasswordKeyVaultUrl;
    return this;
  }

  /**
   * KeyVault URL link to the password for the HANA database.
   * @return hanaDbPasswordKeyVaultUrl
   */
  @javax.annotation.Nullable
  public String getHanaDbPasswordKeyVaultUrl() {
    return hanaDbPasswordKeyVaultUrl;
  }

  public void setHanaDbPasswordKeyVaultUrl(String hanaDbPasswordKeyVaultUrl) {
    this.hanaDbPasswordKeyVaultUrl = hanaDbPasswordKeyVaultUrl;
  }


  public SapMonitorProperties hanaDbSqlPort(Integer hanaDbSqlPort) {
    this.hanaDbSqlPort = hanaDbSqlPort;
    return this;
  }

  /**
   * Database port of the HANA instance.
   * @return hanaDbSqlPort
   */
  @javax.annotation.Nullable
  public Integer getHanaDbSqlPort() {
    return hanaDbSqlPort;
  }

  public void setHanaDbSqlPort(Integer hanaDbSqlPort) {
    this.hanaDbSqlPort = hanaDbSqlPort;
  }


  public SapMonitorProperties hanaDbUsername(String hanaDbUsername) {
    this.hanaDbUsername = hanaDbUsername;
    return this;
  }

  /**
   * Database username of the HANA instance.
   * @return hanaDbUsername
   */
  @javax.annotation.Nullable
  public String getHanaDbUsername() {
    return hanaDbUsername;
  }

  public void setHanaDbUsername(String hanaDbUsername) {
    this.hanaDbUsername = hanaDbUsername;
  }


  public SapMonitorProperties hanaHostname(String hanaHostname) {
    this.hanaHostname = hanaHostname;
    return this;
  }

  /**
   * Hostname of the HANA instance.
   * @return hanaHostname
   */
  @javax.annotation.Nullable
  public String getHanaHostname() {
    return hanaHostname;
  }

  public void setHanaHostname(String hanaHostname) {
    this.hanaHostname = hanaHostname;
  }


  public SapMonitorProperties hanaSubnet(String hanaSubnet) {
    this.hanaSubnet = hanaSubnet;
    return this;
  }

  /**
   * Specifies the SAP monitor unique ID.
   * @return hanaSubnet
   */
  @javax.annotation.Nullable
  public String getHanaSubnet() {
    return hanaSubnet;
  }

  public void setHanaSubnet(String hanaSubnet) {
    this.hanaSubnet = hanaSubnet;
  }


  public SapMonitorProperties keyVaultId(String keyVaultId) {
    this.keyVaultId = keyVaultId;
    return this;
  }

  /**
   * Key Vault ID containing customer&#39;s HANA credentials.
   * @return keyVaultId
   */
  @javax.annotation.Nullable
  public String getKeyVaultId() {
    return keyVaultId;
  }

  public void setKeyVaultId(String keyVaultId) {
    this.keyVaultId = keyVaultId;
  }


  public SapMonitorProperties logAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
    this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
    return this;
  }

  /**
   * The ARM ID of the Log Analytics Workspace that is used for monitoring
   * @return logAnalyticsWorkspaceArmId
   */
  @javax.annotation.Nullable
  public String getLogAnalyticsWorkspaceArmId() {
    return logAnalyticsWorkspaceArmId;
  }

  public void setLogAnalyticsWorkspaceArmId(String logAnalyticsWorkspaceArmId) {
    this.logAnalyticsWorkspaceArmId = logAnalyticsWorkspaceArmId;
  }


  public SapMonitorProperties logAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
    this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
    return this;
  }

  /**
   * The workspace ID of the log analytics workspace to be used for monitoring
   * @return logAnalyticsWorkspaceId
   */
  @javax.annotation.Nullable
  public String getLogAnalyticsWorkspaceId() {
    return logAnalyticsWorkspaceId;
  }

  public void setLogAnalyticsWorkspaceId(String logAnalyticsWorkspaceId) {
    this.logAnalyticsWorkspaceId = logAnalyticsWorkspaceId;
  }


  public SapMonitorProperties logAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey) {
    this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
    return this;
  }

  /**
   * The shared key of the log analytics workspace that is used for monitoring
   * @return logAnalyticsWorkspaceSharedKey
   */
  @javax.annotation.Nullable
  public String getLogAnalyticsWorkspaceSharedKey() {
    return logAnalyticsWorkspaceSharedKey;
  }

  public void setLogAnalyticsWorkspaceSharedKey(String logAnalyticsWorkspaceSharedKey) {
    this.logAnalyticsWorkspaceSharedKey = logAnalyticsWorkspaceSharedKey;
  }


  /**
   * The name of the resource group the SAP Monitor resources get deployed into.
   * @return managedResourceGroupName
   */
  @javax.annotation.Nullable
  public String getManagedResourceGroupName() {
    return managedResourceGroupName;
  }



  /**
   * State of provisioning of the HanaInstance
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SapMonitorProperties sapMonitorProperties = (SapMonitorProperties) o;
    return Objects.equals(this.enableCustomerAnalytics, sapMonitorProperties.enableCustomerAnalytics) &&
        Objects.equals(this.hanaDbCredentialsMsiId, sapMonitorProperties.hanaDbCredentialsMsiId) &&
        Objects.equals(this.hanaDbName, sapMonitorProperties.hanaDbName) &&
        Objects.equals(this.hanaDbPassword, sapMonitorProperties.hanaDbPassword) &&
        Objects.equals(this.hanaDbPasswordKeyVaultUrl, sapMonitorProperties.hanaDbPasswordKeyVaultUrl) &&
        Objects.equals(this.hanaDbSqlPort, sapMonitorProperties.hanaDbSqlPort) &&
        Objects.equals(this.hanaDbUsername, sapMonitorProperties.hanaDbUsername) &&
        Objects.equals(this.hanaHostname, sapMonitorProperties.hanaHostname) &&
        Objects.equals(this.hanaSubnet, sapMonitorProperties.hanaSubnet) &&
        Objects.equals(this.keyVaultId, sapMonitorProperties.keyVaultId) &&
        Objects.equals(this.logAnalyticsWorkspaceArmId, sapMonitorProperties.logAnalyticsWorkspaceArmId) &&
        Objects.equals(this.logAnalyticsWorkspaceId, sapMonitorProperties.logAnalyticsWorkspaceId) &&
        Objects.equals(this.logAnalyticsWorkspaceSharedKey, sapMonitorProperties.logAnalyticsWorkspaceSharedKey) &&
        Objects.equals(this.managedResourceGroupName, sapMonitorProperties.managedResourceGroupName) &&
        Objects.equals(this.provisioningState, sapMonitorProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enableCustomerAnalytics, hanaDbCredentialsMsiId, hanaDbName, hanaDbPassword, hanaDbPasswordKeyVaultUrl, hanaDbSqlPort, hanaDbUsername, hanaHostname, hanaSubnet, keyVaultId, logAnalyticsWorkspaceArmId, logAnalyticsWorkspaceId, logAnalyticsWorkspaceSharedKey, managedResourceGroupName, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SapMonitorProperties {\n");
    sb.append("    enableCustomerAnalytics: ").append(toIndentedString(enableCustomerAnalytics)).append("\n");
    sb.append("    hanaDbCredentialsMsiId: ").append(toIndentedString(hanaDbCredentialsMsiId)).append("\n");
    sb.append("    hanaDbName: ").append(toIndentedString(hanaDbName)).append("\n");
    sb.append("    hanaDbPassword: ").append(toIndentedString(hanaDbPassword)).append("\n");
    sb.append("    hanaDbPasswordKeyVaultUrl: ").append(toIndentedString(hanaDbPasswordKeyVaultUrl)).append("\n");
    sb.append("    hanaDbSqlPort: ").append(toIndentedString(hanaDbSqlPort)).append("\n");
    sb.append("    hanaDbUsername: ").append(toIndentedString(hanaDbUsername)).append("\n");
    sb.append("    hanaHostname: ").append(toIndentedString(hanaHostname)).append("\n");
    sb.append("    hanaSubnet: ").append(toIndentedString(hanaSubnet)).append("\n");
    sb.append("    keyVaultId: ").append(toIndentedString(keyVaultId)).append("\n");
    sb.append("    logAnalyticsWorkspaceArmId: ").append(toIndentedString(logAnalyticsWorkspaceArmId)).append("\n");
    sb.append("    logAnalyticsWorkspaceId: ").append(toIndentedString(logAnalyticsWorkspaceId)).append("\n");
    sb.append("    logAnalyticsWorkspaceSharedKey: ").append(toIndentedString(logAnalyticsWorkspaceSharedKey)).append("\n");
    sb.append("    managedResourceGroupName: ").append(toIndentedString(managedResourceGroupName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enableCustomerAnalytics");
    openapiFields.add("hanaDbCredentialsMsiId");
    openapiFields.add("hanaDbName");
    openapiFields.add("hanaDbPassword");
    openapiFields.add("hanaDbPasswordKeyVaultUrl");
    openapiFields.add("hanaDbSqlPort");
    openapiFields.add("hanaDbUsername");
    openapiFields.add("hanaHostname");
    openapiFields.add("hanaSubnet");
    openapiFields.add("keyVaultId");
    openapiFields.add("logAnalyticsWorkspaceArmId");
    openapiFields.add("logAnalyticsWorkspaceId");
    openapiFields.add("logAnalyticsWorkspaceSharedKey");
    openapiFields.add("managedResourceGroupName");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SapMonitorProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SapMonitorProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SapMonitorProperties is not found in the empty JSON string", SapMonitorProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SapMonitorProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SapMonitorProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("hanaDbCredentialsMsiId") != null && !jsonObj.get("hanaDbCredentialsMsiId").isJsonNull()) && !jsonObj.get("hanaDbCredentialsMsiId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbCredentialsMsiId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbCredentialsMsiId").toString()));
      }
      if ((jsonObj.get("hanaDbName") != null && !jsonObj.get("hanaDbName").isJsonNull()) && !jsonObj.get("hanaDbName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbName").toString()));
      }
      if ((jsonObj.get("hanaDbPassword") != null && !jsonObj.get("hanaDbPassword").isJsonNull()) && !jsonObj.get("hanaDbPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbPassword").toString()));
      }
      if ((jsonObj.get("hanaDbPasswordKeyVaultUrl") != null && !jsonObj.get("hanaDbPasswordKeyVaultUrl").isJsonNull()) && !jsonObj.get("hanaDbPasswordKeyVaultUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbPasswordKeyVaultUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbPasswordKeyVaultUrl").toString()));
      }
      if ((jsonObj.get("hanaDbUsername") != null && !jsonObj.get("hanaDbUsername").isJsonNull()) && !jsonObj.get("hanaDbUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaDbUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaDbUsername").toString()));
      }
      if ((jsonObj.get("hanaHostname") != null && !jsonObj.get("hanaHostname").isJsonNull()) && !jsonObj.get("hanaHostname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaHostname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaHostname").toString()));
      }
      if ((jsonObj.get("hanaSubnet") != null && !jsonObj.get("hanaSubnet").isJsonNull()) && !jsonObj.get("hanaSubnet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hanaSubnet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hanaSubnet").toString()));
      }
      if ((jsonObj.get("keyVaultId") != null && !jsonObj.get("keyVaultId").isJsonNull()) && !jsonObj.get("keyVaultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `keyVaultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("keyVaultId").toString()));
      }
      if ((jsonObj.get("logAnalyticsWorkspaceArmId") != null && !jsonObj.get("logAnalyticsWorkspaceArmId").isJsonNull()) && !jsonObj.get("logAnalyticsWorkspaceArmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logAnalyticsWorkspaceArmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logAnalyticsWorkspaceArmId").toString()));
      }
      if ((jsonObj.get("logAnalyticsWorkspaceId") != null && !jsonObj.get("logAnalyticsWorkspaceId").isJsonNull()) && !jsonObj.get("logAnalyticsWorkspaceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logAnalyticsWorkspaceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logAnalyticsWorkspaceId").toString()));
      }
      if ((jsonObj.get("logAnalyticsWorkspaceSharedKey") != null && !jsonObj.get("logAnalyticsWorkspaceSharedKey").isJsonNull()) && !jsonObj.get("logAnalyticsWorkspaceSharedKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logAnalyticsWorkspaceSharedKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logAnalyticsWorkspaceSharedKey").toString()));
      }
      if ((jsonObj.get("managedResourceGroupName") != null && !jsonObj.get("managedResourceGroupName").isJsonNull()) && !jsonObj.get("managedResourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedResourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedResourceGroupName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SapMonitorProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SapMonitorProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SapMonitorProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SapMonitorProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SapMonitorProperties>() {
           @Override
           public void write(JsonWriter out, SapMonitorProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SapMonitorProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SapMonitorProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SapMonitorProperties
   * @throws IOException if the JSON string is invalid with respect to SapMonitorProperties
   */
  public static SapMonitorProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SapMonitorProperties.class);
  }

  /**
   * Convert an instance of SapMonitorProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

