/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The HardwareProfile model module.
 * @module model/HardwareProfile
 * @version 2017-11-03-preview
 */
class HardwareProfile {
    /**
     * Constructs a new <code>HardwareProfile</code>.
     * Specifies the hardware settings for the HANA instance.
     * @alias module:model/HardwareProfile
     */
    constructor() { 
        
        HardwareProfile.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>HardwareProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/HardwareProfile} obj Optional instance to populate.
     * @return {module:model/HardwareProfile} The populated <code>HardwareProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new HardwareProfile();

            if (data.hasOwnProperty('hanaInstanceSize')) {
                obj['hanaInstanceSize'] = ApiClient.convertToType(data['hanaInstanceSize'], 'String');
            }
            if (data.hasOwnProperty('hardwareType')) {
                obj['hardwareType'] = ApiClient.convertToType(data['hardwareType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>HardwareProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>HardwareProfile</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hanaInstanceSize'] && !(typeof data['hanaInstanceSize'] === 'string' || data['hanaInstanceSize'] instanceof String)) {
            throw new Error("Expected the field `hanaInstanceSize` to be a primitive type in the JSON string but got " + data['hanaInstanceSize']);
        }
        // ensure the json data is a string
        if (data['hardwareType'] && !(typeof data['hardwareType'] === 'string' || data['hardwareType'] instanceof String)) {
            throw new Error("Expected the field `hardwareType` to be a primitive type in the JSON string but got " + data['hardwareType']);
        }

        return true;
    }


}



/**
 * Specifies the HANA instance SKU.
 * @member {module:model/HardwareProfile.HanaInstanceSizeEnum} hanaInstanceSize
 */
HardwareProfile.prototype['hanaInstanceSize'] = undefined;

/**
 * Name of the hardware type (vendor and/or their product name)
 * @member {module:model/HardwareProfile.HardwareTypeEnum} hardwareType
 */
HardwareProfile.prototype['hardwareType'] = undefined;





/**
 * Allowed values for the <code>hanaInstanceSize</code> property.
 * @enum {String}
 * @readonly
 */
HardwareProfile['HanaInstanceSizeEnum'] = {

    /**
     * value: "S72m"
     * @const
     */
    "S72m": "S72m",

    /**
     * value: "S144m"
     * @const
     */
    "S144m": "S144m",

    /**
     * value: "S72"
     * @const
     */
    "S72": "S72",

    /**
     * value: "S144"
     * @const
     */
    "S144": "S144",

    /**
     * value: "S192"
     * @const
     */
    "S192": "S192",

    /**
     * value: "S192m"
     * @const
     */
    "S192m": "S192m",

    /**
     * value: "S192xm"
     * @const
     */
    "S192xm": "S192xm",

    /**
     * value: "S96"
     * @const
     */
    "S96": "S96",

    /**
     * value: "S112"
     * @const
     */
    "S112": "S112",

    /**
     * value: "S224m"
     * @const
     */
    "S224m": "S224m",

    /**
     * value: "S224o"
     * @const
     */
    "S224o": "S224o",

    /**
     * value: "S224om"
     * @const
     */
    "S224om": "S224om",

    /**
     * value: "S224oo"
     * @const
     */
    "S224oo": "S224oo",

    /**
     * value: "S224oom"
     * @const
     */
    "S224oom": "S224oom",

    /**
     * value: "S224ooo"
     * @const
     */
    "S224ooo": "S224ooo",

    /**
     * value: "S224oxm"
     * @const
     */
    "S224oxm": "S224oxm",

    /**
     * value: "S224oxxm"
     * @const
     */
    "S224oxxm": "S224oxxm",

    /**
     * value: "S384"
     * @const
     */
    "S384": "S384",

    /**
     * value: "S384m"
     * @const
     */
    "S384m": "S384m",

    /**
     * value: "S384xm"
     * @const
     */
    "S384xm": "S384xm",

    /**
     * value: "S384xxm"
     * @const
     */
    "S384xxm": "S384xxm",

    /**
     * value: "S576m"
     * @const
     */
    "S576m": "S576m",

    /**
     * value: "S576xm"
     * @const
     */
    "S576xm": "S576xm",

    /**
     * value: "S768"
     * @const
     */
    "S768": "S768",

    /**
     * value: "S768m"
     * @const
     */
    "S768m": "S768m",

    /**
     * value: "S768xm"
     * @const
     */
    "S768xm": "S768xm",

    /**
     * value: "S960m"
     * @const
     */
    "S960m": "S960m"
};


/**
 * Allowed values for the <code>hardwareType</code> property.
 * @enum {String}
 * @readonly
 */
HardwareProfile['HardwareTypeEnum'] = {

    /**
     * value: "Cisco_UCS"
     * @const
     */
    "Cisco_UCS": "Cisco_UCS",

    /**
     * value: "HPE"
     * @const
     */
    "HPE": "HPE"
};



export default HardwareProfile;

