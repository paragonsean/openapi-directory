/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SapMonitorProperties model module.
 * @module model/SapMonitorProperties
 * @version 2017-11-03-preview
 */
class SapMonitorProperties {
    /**
     * Constructs a new <code>SapMonitorProperties</code>.
     * Describes the properties of a SAP monitor.
     * @alias module:model/SapMonitorProperties
     */
    constructor() { 
        
        SapMonitorProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SapMonitorProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SapMonitorProperties} obj Optional instance to populate.
     * @return {module:model/SapMonitorProperties} The populated <code>SapMonitorProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SapMonitorProperties();

            if (data.hasOwnProperty('enableCustomerAnalytics')) {
                obj['enableCustomerAnalytics'] = ApiClient.convertToType(data['enableCustomerAnalytics'], 'Boolean');
            }
            if (data.hasOwnProperty('hanaDbCredentialsMsiId')) {
                obj['hanaDbCredentialsMsiId'] = ApiClient.convertToType(data['hanaDbCredentialsMsiId'], 'String');
            }
            if (data.hasOwnProperty('hanaDbName')) {
                obj['hanaDbName'] = ApiClient.convertToType(data['hanaDbName'], 'String');
            }
            if (data.hasOwnProperty('hanaDbPassword')) {
                obj['hanaDbPassword'] = ApiClient.convertToType(data['hanaDbPassword'], 'String');
            }
            if (data.hasOwnProperty('hanaDbPasswordKeyVaultUrl')) {
                obj['hanaDbPasswordKeyVaultUrl'] = ApiClient.convertToType(data['hanaDbPasswordKeyVaultUrl'], 'String');
            }
            if (data.hasOwnProperty('hanaDbSqlPort')) {
                obj['hanaDbSqlPort'] = ApiClient.convertToType(data['hanaDbSqlPort'], 'Number');
            }
            if (data.hasOwnProperty('hanaDbUsername')) {
                obj['hanaDbUsername'] = ApiClient.convertToType(data['hanaDbUsername'], 'String');
            }
            if (data.hasOwnProperty('hanaHostname')) {
                obj['hanaHostname'] = ApiClient.convertToType(data['hanaHostname'], 'String');
            }
            if (data.hasOwnProperty('hanaSubnet')) {
                obj['hanaSubnet'] = ApiClient.convertToType(data['hanaSubnet'], 'String');
            }
            if (data.hasOwnProperty('keyVaultId')) {
                obj['keyVaultId'] = ApiClient.convertToType(data['keyVaultId'], 'String');
            }
            if (data.hasOwnProperty('logAnalyticsWorkspaceArmId')) {
                obj['logAnalyticsWorkspaceArmId'] = ApiClient.convertToType(data['logAnalyticsWorkspaceArmId'], 'String');
            }
            if (data.hasOwnProperty('logAnalyticsWorkspaceId')) {
                obj['logAnalyticsWorkspaceId'] = ApiClient.convertToType(data['logAnalyticsWorkspaceId'], 'String');
            }
            if (data.hasOwnProperty('logAnalyticsWorkspaceSharedKey')) {
                obj['logAnalyticsWorkspaceSharedKey'] = ApiClient.convertToType(data['logAnalyticsWorkspaceSharedKey'], 'String');
            }
            if (data.hasOwnProperty('managedResourceGroupName')) {
                obj['managedResourceGroupName'] = ApiClient.convertToType(data['managedResourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SapMonitorProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SapMonitorProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['hanaDbCredentialsMsiId'] && !(typeof data['hanaDbCredentialsMsiId'] === 'string' || data['hanaDbCredentialsMsiId'] instanceof String)) {
            throw new Error("Expected the field `hanaDbCredentialsMsiId` to be a primitive type in the JSON string but got " + data['hanaDbCredentialsMsiId']);
        }
        // ensure the json data is a string
        if (data['hanaDbName'] && !(typeof data['hanaDbName'] === 'string' || data['hanaDbName'] instanceof String)) {
            throw new Error("Expected the field `hanaDbName` to be a primitive type in the JSON string but got " + data['hanaDbName']);
        }
        // ensure the json data is a string
        if (data['hanaDbPassword'] && !(typeof data['hanaDbPassword'] === 'string' || data['hanaDbPassword'] instanceof String)) {
            throw new Error("Expected the field `hanaDbPassword` to be a primitive type in the JSON string but got " + data['hanaDbPassword']);
        }
        // ensure the json data is a string
        if (data['hanaDbPasswordKeyVaultUrl'] && !(typeof data['hanaDbPasswordKeyVaultUrl'] === 'string' || data['hanaDbPasswordKeyVaultUrl'] instanceof String)) {
            throw new Error("Expected the field `hanaDbPasswordKeyVaultUrl` to be a primitive type in the JSON string but got " + data['hanaDbPasswordKeyVaultUrl']);
        }
        // ensure the json data is a string
        if (data['hanaDbUsername'] && !(typeof data['hanaDbUsername'] === 'string' || data['hanaDbUsername'] instanceof String)) {
            throw new Error("Expected the field `hanaDbUsername` to be a primitive type in the JSON string but got " + data['hanaDbUsername']);
        }
        // ensure the json data is a string
        if (data['hanaHostname'] && !(typeof data['hanaHostname'] === 'string' || data['hanaHostname'] instanceof String)) {
            throw new Error("Expected the field `hanaHostname` to be a primitive type in the JSON string but got " + data['hanaHostname']);
        }
        // ensure the json data is a string
        if (data['hanaSubnet'] && !(typeof data['hanaSubnet'] === 'string' || data['hanaSubnet'] instanceof String)) {
            throw new Error("Expected the field `hanaSubnet` to be a primitive type in the JSON string but got " + data['hanaSubnet']);
        }
        // ensure the json data is a string
        if (data['keyVaultId'] && !(typeof data['keyVaultId'] === 'string' || data['keyVaultId'] instanceof String)) {
            throw new Error("Expected the field `keyVaultId` to be a primitive type in the JSON string but got " + data['keyVaultId']);
        }
        // ensure the json data is a string
        if (data['logAnalyticsWorkspaceArmId'] && !(typeof data['logAnalyticsWorkspaceArmId'] === 'string' || data['logAnalyticsWorkspaceArmId'] instanceof String)) {
            throw new Error("Expected the field `logAnalyticsWorkspaceArmId` to be a primitive type in the JSON string but got " + data['logAnalyticsWorkspaceArmId']);
        }
        // ensure the json data is a string
        if (data['logAnalyticsWorkspaceId'] && !(typeof data['logAnalyticsWorkspaceId'] === 'string' || data['logAnalyticsWorkspaceId'] instanceof String)) {
            throw new Error("Expected the field `logAnalyticsWorkspaceId` to be a primitive type in the JSON string but got " + data['logAnalyticsWorkspaceId']);
        }
        // ensure the json data is a string
        if (data['logAnalyticsWorkspaceSharedKey'] && !(typeof data['logAnalyticsWorkspaceSharedKey'] === 'string' || data['logAnalyticsWorkspaceSharedKey'] instanceof String)) {
            throw new Error("Expected the field `logAnalyticsWorkspaceSharedKey` to be a primitive type in the JSON string but got " + data['logAnalyticsWorkspaceSharedKey']);
        }
        // ensure the json data is a string
        if (data['managedResourceGroupName'] && !(typeof data['managedResourceGroupName'] === 'string' || data['managedResourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `managedResourceGroupName` to be a primitive type in the JSON string but got " + data['managedResourceGroupName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}



/**
 * The value indicating whether to send analytics to Microsoft
 * @member {Boolean} enableCustomerAnalytics
 */
SapMonitorProperties.prototype['enableCustomerAnalytics'] = undefined;

/**
 * MSI ID passed by customer which has access to customer's KeyVault and to be assigned to the Collector VM.
 * @member {String} hanaDbCredentialsMsiId
 */
SapMonitorProperties.prototype['hanaDbCredentialsMsiId'] = undefined;

/**
 * Database name of the HANA instance.
 * @member {String} hanaDbName
 */
SapMonitorProperties.prototype['hanaDbName'] = undefined;

/**
 * Database password of the HANA instance.
 * @member {String} hanaDbPassword
 */
SapMonitorProperties.prototype['hanaDbPassword'] = undefined;

/**
 * KeyVault URL link to the password for the HANA database.
 * @member {String} hanaDbPasswordKeyVaultUrl
 */
SapMonitorProperties.prototype['hanaDbPasswordKeyVaultUrl'] = undefined;

/**
 * Database port of the HANA instance.
 * @member {Number} hanaDbSqlPort
 */
SapMonitorProperties.prototype['hanaDbSqlPort'] = undefined;

/**
 * Database username of the HANA instance.
 * @member {String} hanaDbUsername
 */
SapMonitorProperties.prototype['hanaDbUsername'] = undefined;

/**
 * Hostname of the HANA instance.
 * @member {String} hanaHostname
 */
SapMonitorProperties.prototype['hanaHostname'] = undefined;

/**
 * Specifies the SAP monitor unique ID.
 * @member {String} hanaSubnet
 */
SapMonitorProperties.prototype['hanaSubnet'] = undefined;

/**
 * Key Vault ID containing customer's HANA credentials.
 * @member {String} keyVaultId
 */
SapMonitorProperties.prototype['keyVaultId'] = undefined;

/**
 * The ARM ID of the Log Analytics Workspace that is used for monitoring
 * @member {String} logAnalyticsWorkspaceArmId
 */
SapMonitorProperties.prototype['logAnalyticsWorkspaceArmId'] = undefined;

/**
 * The workspace ID of the log analytics workspace to be used for monitoring
 * @member {String} logAnalyticsWorkspaceId
 */
SapMonitorProperties.prototype['logAnalyticsWorkspaceId'] = undefined;

/**
 * The shared key of the log analytics workspace that is used for monitoring
 * @member {String} logAnalyticsWorkspaceSharedKey
 */
SapMonitorProperties.prototype['logAnalyticsWorkspaceSharedKey'] = undefined;

/**
 * The name of the resource group the SAP Monitor resources get deployed into.
 * @member {String} managedResourceGroupName
 */
SapMonitorProperties.prototype['managedResourceGroupName'] = undefined;

/**
 * State of provisioning of the HanaInstance
 * @member {module:model/SapMonitorProperties.ProvisioningStateEnum} provisioningState
 */
SapMonitorProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
SapMonitorProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Migrating"
     * @const
     */
    "Migrating": "Migrating"
};



export default SapMonitorProperties;

