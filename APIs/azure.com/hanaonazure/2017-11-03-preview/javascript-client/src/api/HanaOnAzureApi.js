/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ErrorResponse from '../model/ErrorResponse';
import HanaInstance from '../model/HanaInstance';
import HanaInstancesListResult from '../model/HanaInstancesListResult';
import OperationList from '../model/OperationList';
import SapMonitor from '../model/SapMonitor';
import SapMonitorListResult from '../model/SapMonitorListResult';
import Tags from '../model/Tags';

/**
* HanaOnAzure service.
* @module api/HanaOnAzureApi
* @version 2017-11-03-preview
*/
export default class HanaOnAzureApi {

    /**
    * Constructs a new HanaOnAzureApi. 
    * @alias module:api/HanaOnAzureApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the hanaInstancesCreate operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HanaInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a SAP HANA instance.
     * Creates a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:model/HanaInstance} hanaInstanceParameter Request body representing a HanaInstance
     * @param {module:api/HanaOnAzureApi~hanaInstancesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HanaInstance}
     */
    hanaInstancesCreate(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, hanaInstanceParameter, callback) {
      let postBody = hanaInstanceParameter;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesCreate");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesCreate");
      }
      // verify the required parameter 'hanaInstanceParameter' is set
      if (hanaInstanceParameter === undefined || hanaInstanceParameter === null) {
        throw new Error("Missing the required parameter 'hanaInstanceParameter' when calling hanaInstancesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HanaInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesDelete operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a SAP HANA instance.
     * Deletes a SAP HANA instance with the specified subscription, resource group, and instance name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:api/HanaOnAzureApi~hanaInstancesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hanaInstancesDelete(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesDelete");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesGet operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HanaInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets properties of a SAP HANA instance.
     * Gets properties of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:api/HanaOnAzureApi~hanaInstancesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HanaInstance}
     */
    hanaInstancesGet(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesGet");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HanaInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesList operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HanaInstancesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of SAP HANA instances in the specified subscription.
     * Gets a list of SAP HANA instances in the specified subscription. The operations returns various properties of each SAP HANA on Azure instance.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/HanaOnAzureApi~hanaInstancesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HanaInstancesListResult}
     */
    hanaInstancesList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HanaInstancesListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/hanaInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesListByResourceGroup operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HanaInstancesListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of SAP HANA instances in the specified subscription and the resource group.
     * Gets a list of SAP HANA instances in the specified subscription and the resource group. The operations returns various properties of each SAP HANA on Azure instance.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {module:api/HanaOnAzureApi~hanaInstancesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HanaInstancesListResult}
     */
    hanaInstancesListByResourceGroup(apiVersion, subscriptionId, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesListByResourceGroup");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = HanaInstancesListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesRestart operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesRestartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to restart a SAP HANA instance.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:api/HanaOnAzureApi~hanaInstancesRestartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hanaInstancesRestart(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesRestart");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesRestart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesRestart");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesRestart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/restart', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesShutdown operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesShutdownCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to shutdown a SAP HANA instance.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:api/HanaOnAzureApi~hanaInstancesShutdownCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hanaInstancesShutdown(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesShutdown");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesShutdown");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesShutdown");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesShutdown");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/shutdown', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesStart operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The operation to start a SAP HANA instance.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:api/HanaOnAzureApi~hanaInstancesStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    hanaInstancesStart(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesStart");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesStart");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the hanaInstancesUpdate operation.
     * @callback module:api/HanaOnAzureApi~hanaInstancesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/HanaInstance} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the Tags field of a SAP HANA instance.
     * Patches the Tags field of a SAP HANA instance for the specified subscription, resource group, and instance name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} hanaInstanceName Name of the SAP HANA on Azure instance.
     * @param {module:model/Tags} tagsParameter Request body that only contains the new Tags field
     * @param {module:api/HanaOnAzureApi~hanaInstancesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/HanaInstance}
     */
    hanaInstancesUpdate(apiVersion, subscriptionId, resourceGroupName, hanaInstanceName, tagsParameter, callback) {
      let postBody = tagsParameter;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling hanaInstancesUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling hanaInstancesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling hanaInstancesUpdate");
      }
      // verify the required parameter 'hanaInstanceName' is set
      if (hanaInstanceName === undefined || hanaInstanceName === null) {
        throw new Error("Missing the required parameter 'hanaInstanceName' when calling hanaInstancesUpdate");
      }
      // verify the required parameter 'tagsParameter' is set
      if (tagsParameter === undefined || tagsParameter === null) {
        throw new Error("Missing the required parameter 'tagsParameter' when calling hanaInstancesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'hanaInstanceName': hanaInstanceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = HanaInstance;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/hanaInstances/{hanaInstanceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/HanaOnAzureApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of SAP HANA management operations.
     * @param {String} apiVersion Client API version.
     * @param {module:api/HanaOnAzureApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationList}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationList;
      return this.apiClient.callApi(
        '/providers/Microsoft.HanaOnAzure/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sapMonitorsCreate operation.
     * @callback module:api/HanaOnAzureApi~sapMonitorsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SapMonitor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a SAP monitor.
     * Creates a SAP monitor for the specified subscription, resource group, and resource name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} sapMonitorName Name of the SAP monitor resource.
     * @param {module:model/SapMonitor} sapMonitorParameter Request body representing a SAP Monitor
     * @param {module:api/HanaOnAzureApi~sapMonitorsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SapMonitor}
     */
    sapMonitorsCreate(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, sapMonitorParameter, callback) {
      let postBody = sapMonitorParameter;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sapMonitorsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sapMonitorsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sapMonitorsCreate");
      }
      // verify the required parameter 'sapMonitorName' is set
      if (sapMonitorName === undefined || sapMonitorName === null) {
        throw new Error("Missing the required parameter 'sapMonitorName' when calling sapMonitorsCreate");
      }
      // verify the required parameter 'sapMonitorParameter' is set
      if (sapMonitorParameter === undefined || sapMonitorParameter === null) {
        throw new Error("Missing the required parameter 'sapMonitorParameter' when calling sapMonitorsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sapMonitorName': sapMonitorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SapMonitor;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sapMonitorsDelete operation.
     * @callback module:api/HanaOnAzureApi~sapMonitorsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a SAP monitor.
     * Deletes a SAP monitor with the specified subscription, resource group, and monitor name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} sapMonitorName Name of the SAP monitor resource.
     * @param {module:api/HanaOnAzureApi~sapMonitorsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    sapMonitorsDelete(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sapMonitorsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sapMonitorsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sapMonitorsDelete");
      }
      // verify the required parameter 'sapMonitorName' is set
      if (sapMonitorName === undefined || sapMonitorName === null) {
        throw new Error("Missing the required parameter 'sapMonitorName' when calling sapMonitorsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sapMonitorName': sapMonitorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sapMonitorsGet operation.
     * @callback module:api/HanaOnAzureApi~sapMonitorsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SapMonitor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets properties of a SAP monitor.
     * Gets properties of a SAP monitor for the specified subscription, resource group, and resource name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} sapMonitorName Name of the SAP monitor resource.
     * @param {module:api/HanaOnAzureApi~sapMonitorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SapMonitor}
     */
    sapMonitorsGet(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sapMonitorsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sapMonitorsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sapMonitorsGet");
      }
      // verify the required parameter 'sapMonitorName' is set
      if (sapMonitorName === undefined || sapMonitorName === null) {
        throw new Error("Missing the required parameter 'sapMonitorName' when calling sapMonitorsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sapMonitorName': sapMonitorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SapMonitor;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sapMonitorsList operation.
     * @callback module:api/HanaOnAzureApi~sapMonitorsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SapMonitorListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of SAP monitors in the specified subscription.
     * Gets a list of SAP monitors in the specified subscription. The operations returns various properties of each SAP monitor.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:api/HanaOnAzureApi~sapMonitorsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SapMonitorListResult}
     */
    sapMonitorsList(apiVersion, subscriptionId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sapMonitorsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sapMonitorsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SapMonitorListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.HanaOnAzure/sapMonitors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sapMonitorsUpdate operation.
     * @callback module:api/HanaOnAzureApi~sapMonitorsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SapMonitor} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patches the Tags field of a SAP monitor.
     * Patches the Tags field of a SAP monitor for the specified subscription, resource group, and monitor name.
     * @param {String} apiVersion Client API version.
     * @param {String} subscriptionId Subscription ID which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} resourceGroupName Name of the resource group.
     * @param {String} sapMonitorName Name of the SAP monitor resource.
     * @param {module:model/Tags} tagsParameter Request body that only contains the new Tags field
     * @param {module:api/HanaOnAzureApi~sapMonitorsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SapMonitor}
     */
    sapMonitorsUpdate(apiVersion, subscriptionId, resourceGroupName, sapMonitorName, tagsParameter, callback) {
      let postBody = tagsParameter;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sapMonitorsUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sapMonitorsUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sapMonitorsUpdate");
      }
      // verify the required parameter 'sapMonitorName' is set
      if (sapMonitorName === undefined || sapMonitorName === null) {
        throw new Error("Missing the required parameter 'sapMonitorName' when calling sapMonitorsUpdate");
      }
      // verify the required parameter 'tagsParameter' is set
      if (tagsParameter === undefined || tagsParameter === null) {
        throw new Error("Missing the required parameter 'tagsParameter' when calling sapMonitorsUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'sapMonitorName': sapMonitorName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SapMonitor;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HanaOnAzure/sapMonitors/{sapMonitorName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
