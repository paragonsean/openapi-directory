/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIHanaOnAzureApi_H
#define OAI_OAIHanaOnAzureApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorResponse.h"
#include "OAIHanaInstance.h"
#include "OAIHanaInstancesListResult.h"
#include "OAIOperationList.h"
#include "OAISapMonitor.h"
#include "OAISapMonitorListResult.h"
#include "OAITags.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIHanaOnAzureApi : public QObject {
    Q_OBJECT

public:
    OAIHanaOnAzureApi(const int timeOut = 0);
    ~OAIHanaOnAzureApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    * @param[in]  hana_instance_parameter OAIHanaInstance [required]
    */
    virtual void hanaInstancesCreate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name, const OAIHanaInstance &hana_instance_parameter);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    */
    virtual void hanaInstancesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    */
    virtual void hanaInstancesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void hanaInstancesList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void hanaInstancesListByResourceGroup(const QString &api_version, const QString &subscription_id, const QString &resource_group_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    */
    virtual void hanaInstancesRestart(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    */
    virtual void hanaInstancesShutdown(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    */
    virtual void hanaInstancesStart(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  hana_instance_name QString [required]
    * @param[in]  tags_parameter OAITags [required]
    */
    virtual void hanaInstancesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &hana_instance_name, const OAITags &tags_parameter);

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  sap_monitor_name QString [required]
    * @param[in]  sap_monitor_parameter OAISapMonitor [required]
    */
    virtual void sapMonitorsCreate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &sap_monitor_name, const OAISapMonitor &sap_monitor_parameter);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  sap_monitor_name QString [required]
    */
    virtual void sapMonitorsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &sap_monitor_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  sap_monitor_name QString [required]
    */
    virtual void sapMonitorsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &sap_monitor_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void sapMonitorsList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  sap_monitor_name QString [required]
    * @param[in]  tags_parameter OAITags [required]
    */
    virtual void sapMonitorsUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &sap_monitor_name, const OAITags &tags_parameter);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void hanaInstancesCreateCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesDeleteCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesGetCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesListCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesRestartCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesShutdownCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesStartCallback(OAIHttpRequestWorker *worker);
    void hanaInstancesUpdateCallback(OAIHttpRequestWorker *worker);
    void operationsListCallback(OAIHttpRequestWorker *worker);
    void sapMonitorsCreateCallback(OAIHttpRequestWorker *worker);
    void sapMonitorsDeleteCallback(OAIHttpRequestWorker *worker);
    void sapMonitorsGetCallback(OAIHttpRequestWorker *worker);
    void sapMonitorsListCallback(OAIHttpRequestWorker *worker);
    void sapMonitorsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void hanaInstancesCreateSignal(OAIHanaInstance summary);
    void hanaInstancesDeleteSignal();
    void hanaInstancesGetSignal(OAIHanaInstance summary);
    void hanaInstancesListSignal(OAIHanaInstancesListResult summary);
    void hanaInstancesListByResourceGroupSignal(OAIHanaInstancesListResult summary);
    void hanaInstancesRestartSignal();
    void hanaInstancesShutdownSignal();
    void hanaInstancesStartSignal();
    void hanaInstancesUpdateSignal(OAIHanaInstance summary);
    void operationsListSignal(OAIOperationList summary);
    void sapMonitorsCreateSignal(OAISapMonitor summary);
    void sapMonitorsDeleteSignal();
    void sapMonitorsGetSignal(OAISapMonitor summary);
    void sapMonitorsListSignal(OAISapMonitorListResult summary);
    void sapMonitorsUpdateSignal(OAISapMonitor summary);


    void hanaInstancesCreateSignalFull(OAIHttpRequestWorker *worker, OAIHanaInstance summary);
    void hanaInstancesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void hanaInstancesGetSignalFull(OAIHttpRequestWorker *worker, OAIHanaInstance summary);
    void hanaInstancesListSignalFull(OAIHttpRequestWorker *worker, OAIHanaInstancesListResult summary);
    void hanaInstancesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIHanaInstancesListResult summary);
    void hanaInstancesRestartSignalFull(OAIHttpRequestWorker *worker);
    void hanaInstancesShutdownSignalFull(OAIHttpRequestWorker *worker);
    void hanaInstancesStartSignalFull(OAIHttpRequestWorker *worker);
    void hanaInstancesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIHanaInstance summary);
    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationList summary);
    void sapMonitorsCreateSignalFull(OAIHttpRequestWorker *worker, OAISapMonitor summary);
    void sapMonitorsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void sapMonitorsGetSignalFull(OAIHttpRequestWorker *worker, OAISapMonitor summary);
    void sapMonitorsListSignalFull(OAIHttpRequestWorker *worker, OAISapMonitorListResult summary);
    void sapMonitorsUpdateSignalFull(OAIHttpRequestWorker *worker, OAISapMonitor summary);

    Q_DECL_DEPRECATED_X("Use hanaInstancesCreateSignalError() instead")
    void hanaInstancesCreateSignalE(OAIHanaInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesCreateSignalError(OAIHanaInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesDeleteSignalError() instead")
    void hanaInstancesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesGetSignalError() instead")
    void hanaInstancesGetSignalE(OAIHanaInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesGetSignalError(OAIHanaInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesListSignalError() instead")
    void hanaInstancesListSignalE(OAIHanaInstancesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesListSignalError(OAIHanaInstancesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesListByResourceGroupSignalError() instead")
    void hanaInstancesListByResourceGroupSignalE(OAIHanaInstancesListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesListByResourceGroupSignalError(OAIHanaInstancesListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesRestartSignalError() instead")
    void hanaInstancesRestartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesRestartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesShutdownSignalError() instead")
    void hanaInstancesShutdownSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesShutdownSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesStartSignalError() instead")
    void hanaInstancesStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesUpdateSignalError() instead")
    void hanaInstancesUpdateSignalE(OAIHanaInstance summary, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesUpdateSignalError(OAIHanaInstance summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsCreateSignalError() instead")
    void sapMonitorsCreateSignalE(OAISapMonitor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsCreateSignalError(OAISapMonitor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsDeleteSignalError() instead")
    void sapMonitorsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsGetSignalError() instead")
    void sapMonitorsGetSignalE(OAISapMonitor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsGetSignalError(OAISapMonitor summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsListSignalError() instead")
    void sapMonitorsListSignalE(OAISapMonitorListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsListSignalError(OAISapMonitorListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsUpdateSignalError() instead")
    void sapMonitorsUpdateSignalE(OAISapMonitor summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsUpdateSignalError(OAISapMonitor summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use hanaInstancesCreateSignalErrorFull() instead")
    void hanaInstancesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesDeleteSignalErrorFull() instead")
    void hanaInstancesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesGetSignalErrorFull() instead")
    void hanaInstancesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesListSignalErrorFull() instead")
    void hanaInstancesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesListByResourceGroupSignalErrorFull() instead")
    void hanaInstancesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesRestartSignalErrorFull() instead")
    void hanaInstancesRestartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesRestartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesShutdownSignalErrorFull() instead")
    void hanaInstancesShutdownSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesShutdownSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesStartSignalErrorFull() instead")
    void hanaInstancesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use hanaInstancesUpdateSignalErrorFull() instead")
    void hanaInstancesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void hanaInstancesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsCreateSignalErrorFull() instead")
    void sapMonitorsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsDeleteSignalErrorFull() instead")
    void sapMonitorsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsGetSignalErrorFull() instead")
    void sapMonitorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsListSignalErrorFull() instead")
    void sapMonitorsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sapMonitorsUpdateSignalErrorFull() instead")
    void sapMonitorsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sapMonitorsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
