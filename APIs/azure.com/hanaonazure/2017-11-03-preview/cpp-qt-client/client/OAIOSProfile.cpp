/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOSProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOSProfile::OAIOSProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOSProfile::OAIOSProfile() {
    this->initializeModel();
}

OAIOSProfile::~OAIOSProfile() {}

void OAIOSProfile::initializeModel() {

    m_computer_name_isSet = false;
    m_computer_name_isValid = false;

    m_os_type_isSet = false;
    m_os_type_isValid = false;

    m_ssh_public_key_isSet = false;
    m_ssh_public_key_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIOSProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOSProfile::fromJsonObject(QJsonObject json) {

    m_computer_name_isValid = ::OpenAPI::fromJsonValue(m_computer_name, json[QString("computerName")]);
    m_computer_name_isSet = !json[QString("computerName")].isNull() && m_computer_name_isValid;

    m_os_type_isValid = ::OpenAPI::fromJsonValue(m_os_type, json[QString("osType")]);
    m_os_type_isSet = !json[QString("osType")].isNull() && m_os_type_isValid;

    m_ssh_public_key_isValid = ::OpenAPI::fromJsonValue(m_ssh_public_key, json[QString("sshPublicKey")]);
    m_ssh_public_key_isSet = !json[QString("sshPublicKey")].isNull() && m_ssh_public_key_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIOSProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOSProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_computer_name_isSet) {
        obj.insert(QString("computerName"), ::OpenAPI::toJsonValue(m_computer_name));
    }
    if (m_os_type_isSet) {
        obj.insert(QString("osType"), ::OpenAPI::toJsonValue(m_os_type));
    }
    if (m_ssh_public_key_isSet) {
        obj.insert(QString("sshPublicKey"), ::OpenAPI::toJsonValue(m_ssh_public_key));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAIOSProfile::getComputerName() const {
    return m_computer_name;
}
void OAIOSProfile::setComputerName(const QString &computer_name) {
    m_computer_name = computer_name;
    m_computer_name_isSet = true;
}

bool OAIOSProfile::is_computer_name_Set() const{
    return m_computer_name_isSet;
}

bool OAIOSProfile::is_computer_name_Valid() const{
    return m_computer_name_isValid;
}

QString OAIOSProfile::getOsType() const {
    return m_os_type;
}
void OAIOSProfile::setOsType(const QString &os_type) {
    m_os_type = os_type;
    m_os_type_isSet = true;
}

bool OAIOSProfile::is_os_type_Set() const{
    return m_os_type_isSet;
}

bool OAIOSProfile::is_os_type_Valid() const{
    return m_os_type_isValid;
}

QString OAIOSProfile::getSshPublicKey() const {
    return m_ssh_public_key;
}
void OAIOSProfile::setSshPublicKey(const QString &ssh_public_key) {
    m_ssh_public_key = ssh_public_key;
    m_ssh_public_key_isSet = true;
}

bool OAIOSProfile::is_ssh_public_key_Set() const{
    return m_ssh_public_key_isSet;
}

bool OAIOSProfile::is_ssh_public_key_Valid() const{
    return m_ssh_public_key_isValid;
}

QString OAIOSProfile::getVersion() const {
    return m_version;
}
void OAIOSProfile::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIOSProfile::is_version_Set() const{
    return m_version_isSet;
}

bool OAIOSProfile::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIOSProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_computer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_public_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOSProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
