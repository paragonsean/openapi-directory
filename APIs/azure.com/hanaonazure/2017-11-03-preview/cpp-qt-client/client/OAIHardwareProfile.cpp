/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHardwareProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHardwareProfile::OAIHardwareProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHardwareProfile::OAIHardwareProfile() {
    this->initializeModel();
}

OAIHardwareProfile::~OAIHardwareProfile() {}

void OAIHardwareProfile::initializeModel() {

    m_hana_instance_size_isSet = false;
    m_hana_instance_size_isValid = false;

    m_hardware_type_isSet = false;
    m_hardware_type_isValid = false;
}

void OAIHardwareProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHardwareProfile::fromJsonObject(QJsonObject json) {

    m_hana_instance_size_isValid = ::OpenAPI::fromJsonValue(m_hana_instance_size, json[QString("hanaInstanceSize")]);
    m_hana_instance_size_isSet = !json[QString("hanaInstanceSize")].isNull() && m_hana_instance_size_isValid;

    m_hardware_type_isValid = ::OpenAPI::fromJsonValue(m_hardware_type, json[QString("hardwareType")]);
    m_hardware_type_isSet = !json[QString("hardwareType")].isNull() && m_hardware_type_isValid;
}

QString OAIHardwareProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHardwareProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_hana_instance_size_isSet) {
        obj.insert(QString("hanaInstanceSize"), ::OpenAPI::toJsonValue(m_hana_instance_size));
    }
    if (m_hardware_type_isSet) {
        obj.insert(QString("hardwareType"), ::OpenAPI::toJsonValue(m_hardware_type));
    }
    return obj;
}

QString OAIHardwareProfile::getHanaInstanceSize() const {
    return m_hana_instance_size;
}
void OAIHardwareProfile::setHanaInstanceSize(const QString &hana_instance_size) {
    m_hana_instance_size = hana_instance_size;
    m_hana_instance_size_isSet = true;
}

bool OAIHardwareProfile::is_hana_instance_size_Set() const{
    return m_hana_instance_size_isSet;
}

bool OAIHardwareProfile::is_hana_instance_size_Valid() const{
    return m_hana_instance_size_isValid;
}

QString OAIHardwareProfile::getHardwareType() const {
    return m_hardware_type;
}
void OAIHardwareProfile::setHardwareType(const QString &hardware_type) {
    m_hardware_type = hardware_type;
    m_hardware_type_isSet = true;
}

bool OAIHardwareProfile::is_hardware_type_Set() const{
    return m_hardware_type_isSet;
}

bool OAIHardwareProfile::is_hardware_type_Valid() const{
    return m_hardware_type_isValid;
}

bool OAIHardwareProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hana_instance_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHardwareProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
