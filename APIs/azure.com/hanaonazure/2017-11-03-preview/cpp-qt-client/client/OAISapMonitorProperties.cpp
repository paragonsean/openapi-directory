/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISapMonitorProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISapMonitorProperties::OAISapMonitorProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISapMonitorProperties::OAISapMonitorProperties() {
    this->initializeModel();
}

OAISapMonitorProperties::~OAISapMonitorProperties() {}

void OAISapMonitorProperties::initializeModel() {

    m_enable_customer_analytics_isSet = false;
    m_enable_customer_analytics_isValid = false;

    m_hana_db_credentials_msi_id_isSet = false;
    m_hana_db_credentials_msi_id_isValid = false;

    m_hana_db_name_isSet = false;
    m_hana_db_name_isValid = false;

    m_hana_db_password_isSet = false;
    m_hana_db_password_isValid = false;

    m_hana_db_password_key_vault_url_isSet = false;
    m_hana_db_password_key_vault_url_isValid = false;

    m_hana_db_sql_port_isSet = false;
    m_hana_db_sql_port_isValid = false;

    m_hana_db_username_isSet = false;
    m_hana_db_username_isValid = false;

    m_hana_hostname_isSet = false;
    m_hana_hostname_isValid = false;

    m_hana_subnet_isSet = false;
    m_hana_subnet_isValid = false;

    m_key_vault_id_isSet = false;
    m_key_vault_id_isValid = false;

    m_log_analytics_workspace_arm_id_isSet = false;
    m_log_analytics_workspace_arm_id_isValid = false;

    m_log_analytics_workspace_id_isSet = false;
    m_log_analytics_workspace_id_isValid = false;

    m_log_analytics_workspace_shared_key_isSet = false;
    m_log_analytics_workspace_shared_key_isValid = false;

    m_managed_resource_group_name_isSet = false;
    m_managed_resource_group_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAISapMonitorProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISapMonitorProperties::fromJsonObject(QJsonObject json) {

    m_enable_customer_analytics_isValid = ::OpenAPI::fromJsonValue(m_enable_customer_analytics, json[QString("enableCustomerAnalytics")]);
    m_enable_customer_analytics_isSet = !json[QString("enableCustomerAnalytics")].isNull() && m_enable_customer_analytics_isValid;

    m_hana_db_credentials_msi_id_isValid = ::OpenAPI::fromJsonValue(m_hana_db_credentials_msi_id, json[QString("hanaDbCredentialsMsiId")]);
    m_hana_db_credentials_msi_id_isSet = !json[QString("hanaDbCredentialsMsiId")].isNull() && m_hana_db_credentials_msi_id_isValid;

    m_hana_db_name_isValid = ::OpenAPI::fromJsonValue(m_hana_db_name, json[QString("hanaDbName")]);
    m_hana_db_name_isSet = !json[QString("hanaDbName")].isNull() && m_hana_db_name_isValid;

    m_hana_db_password_isValid = ::OpenAPI::fromJsonValue(m_hana_db_password, json[QString("hanaDbPassword")]);
    m_hana_db_password_isSet = !json[QString("hanaDbPassword")].isNull() && m_hana_db_password_isValid;

    m_hana_db_password_key_vault_url_isValid = ::OpenAPI::fromJsonValue(m_hana_db_password_key_vault_url, json[QString("hanaDbPasswordKeyVaultUrl")]);
    m_hana_db_password_key_vault_url_isSet = !json[QString("hanaDbPasswordKeyVaultUrl")].isNull() && m_hana_db_password_key_vault_url_isValid;

    m_hana_db_sql_port_isValid = ::OpenAPI::fromJsonValue(m_hana_db_sql_port, json[QString("hanaDbSqlPort")]);
    m_hana_db_sql_port_isSet = !json[QString("hanaDbSqlPort")].isNull() && m_hana_db_sql_port_isValid;

    m_hana_db_username_isValid = ::OpenAPI::fromJsonValue(m_hana_db_username, json[QString("hanaDbUsername")]);
    m_hana_db_username_isSet = !json[QString("hanaDbUsername")].isNull() && m_hana_db_username_isValid;

    m_hana_hostname_isValid = ::OpenAPI::fromJsonValue(m_hana_hostname, json[QString("hanaHostname")]);
    m_hana_hostname_isSet = !json[QString("hanaHostname")].isNull() && m_hana_hostname_isValid;

    m_hana_subnet_isValid = ::OpenAPI::fromJsonValue(m_hana_subnet, json[QString("hanaSubnet")]);
    m_hana_subnet_isSet = !json[QString("hanaSubnet")].isNull() && m_hana_subnet_isValid;

    m_key_vault_id_isValid = ::OpenAPI::fromJsonValue(m_key_vault_id, json[QString("keyVaultId")]);
    m_key_vault_id_isSet = !json[QString("keyVaultId")].isNull() && m_key_vault_id_isValid;

    m_log_analytics_workspace_arm_id_isValid = ::OpenAPI::fromJsonValue(m_log_analytics_workspace_arm_id, json[QString("logAnalyticsWorkspaceArmId")]);
    m_log_analytics_workspace_arm_id_isSet = !json[QString("logAnalyticsWorkspaceArmId")].isNull() && m_log_analytics_workspace_arm_id_isValid;

    m_log_analytics_workspace_id_isValid = ::OpenAPI::fromJsonValue(m_log_analytics_workspace_id, json[QString("logAnalyticsWorkspaceId")]);
    m_log_analytics_workspace_id_isSet = !json[QString("logAnalyticsWorkspaceId")].isNull() && m_log_analytics_workspace_id_isValid;

    m_log_analytics_workspace_shared_key_isValid = ::OpenAPI::fromJsonValue(m_log_analytics_workspace_shared_key, json[QString("logAnalyticsWorkspaceSharedKey")]);
    m_log_analytics_workspace_shared_key_isSet = !json[QString("logAnalyticsWorkspaceSharedKey")].isNull() && m_log_analytics_workspace_shared_key_isValid;

    m_managed_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_managed_resource_group_name, json[QString("managedResourceGroupName")]);
    m_managed_resource_group_name_isSet = !json[QString("managedResourceGroupName")].isNull() && m_managed_resource_group_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAISapMonitorProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISapMonitorProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_enable_customer_analytics_isSet) {
        obj.insert(QString("enableCustomerAnalytics"), ::OpenAPI::toJsonValue(m_enable_customer_analytics));
    }
    if (m_hana_db_credentials_msi_id_isSet) {
        obj.insert(QString("hanaDbCredentialsMsiId"), ::OpenAPI::toJsonValue(m_hana_db_credentials_msi_id));
    }
    if (m_hana_db_name_isSet) {
        obj.insert(QString("hanaDbName"), ::OpenAPI::toJsonValue(m_hana_db_name));
    }
    if (m_hana_db_password_isSet) {
        obj.insert(QString("hanaDbPassword"), ::OpenAPI::toJsonValue(m_hana_db_password));
    }
    if (m_hana_db_password_key_vault_url_isSet) {
        obj.insert(QString("hanaDbPasswordKeyVaultUrl"), ::OpenAPI::toJsonValue(m_hana_db_password_key_vault_url));
    }
    if (m_hana_db_sql_port_isSet) {
        obj.insert(QString("hanaDbSqlPort"), ::OpenAPI::toJsonValue(m_hana_db_sql_port));
    }
    if (m_hana_db_username_isSet) {
        obj.insert(QString("hanaDbUsername"), ::OpenAPI::toJsonValue(m_hana_db_username));
    }
    if (m_hana_hostname_isSet) {
        obj.insert(QString("hanaHostname"), ::OpenAPI::toJsonValue(m_hana_hostname));
    }
    if (m_hana_subnet_isSet) {
        obj.insert(QString("hanaSubnet"), ::OpenAPI::toJsonValue(m_hana_subnet));
    }
    if (m_key_vault_id_isSet) {
        obj.insert(QString("keyVaultId"), ::OpenAPI::toJsonValue(m_key_vault_id));
    }
    if (m_log_analytics_workspace_arm_id_isSet) {
        obj.insert(QString("logAnalyticsWorkspaceArmId"), ::OpenAPI::toJsonValue(m_log_analytics_workspace_arm_id));
    }
    if (m_log_analytics_workspace_id_isSet) {
        obj.insert(QString("logAnalyticsWorkspaceId"), ::OpenAPI::toJsonValue(m_log_analytics_workspace_id));
    }
    if (m_log_analytics_workspace_shared_key_isSet) {
        obj.insert(QString("logAnalyticsWorkspaceSharedKey"), ::OpenAPI::toJsonValue(m_log_analytics_workspace_shared_key));
    }
    if (m_managed_resource_group_name_isSet) {
        obj.insert(QString("managedResourceGroupName"), ::OpenAPI::toJsonValue(m_managed_resource_group_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

bool OAISapMonitorProperties::isEnableCustomerAnalytics() const {
    return m_enable_customer_analytics;
}
void OAISapMonitorProperties::setEnableCustomerAnalytics(const bool &enable_customer_analytics) {
    m_enable_customer_analytics = enable_customer_analytics;
    m_enable_customer_analytics_isSet = true;
}

bool OAISapMonitorProperties::is_enable_customer_analytics_Set() const{
    return m_enable_customer_analytics_isSet;
}

bool OAISapMonitorProperties::is_enable_customer_analytics_Valid() const{
    return m_enable_customer_analytics_isValid;
}

QString OAISapMonitorProperties::getHanaDbCredentialsMsiId() const {
    return m_hana_db_credentials_msi_id;
}
void OAISapMonitorProperties::setHanaDbCredentialsMsiId(const QString &hana_db_credentials_msi_id) {
    m_hana_db_credentials_msi_id = hana_db_credentials_msi_id;
    m_hana_db_credentials_msi_id_isSet = true;
}

bool OAISapMonitorProperties::is_hana_db_credentials_msi_id_Set() const{
    return m_hana_db_credentials_msi_id_isSet;
}

bool OAISapMonitorProperties::is_hana_db_credentials_msi_id_Valid() const{
    return m_hana_db_credentials_msi_id_isValid;
}

QString OAISapMonitorProperties::getHanaDbName() const {
    return m_hana_db_name;
}
void OAISapMonitorProperties::setHanaDbName(const QString &hana_db_name) {
    m_hana_db_name = hana_db_name;
    m_hana_db_name_isSet = true;
}

bool OAISapMonitorProperties::is_hana_db_name_Set() const{
    return m_hana_db_name_isSet;
}

bool OAISapMonitorProperties::is_hana_db_name_Valid() const{
    return m_hana_db_name_isValid;
}

QString OAISapMonitorProperties::getHanaDbPassword() const {
    return m_hana_db_password;
}
void OAISapMonitorProperties::setHanaDbPassword(const QString &hana_db_password) {
    m_hana_db_password = hana_db_password;
    m_hana_db_password_isSet = true;
}

bool OAISapMonitorProperties::is_hana_db_password_Set() const{
    return m_hana_db_password_isSet;
}

bool OAISapMonitorProperties::is_hana_db_password_Valid() const{
    return m_hana_db_password_isValid;
}

QString OAISapMonitorProperties::getHanaDbPasswordKeyVaultUrl() const {
    return m_hana_db_password_key_vault_url;
}
void OAISapMonitorProperties::setHanaDbPasswordKeyVaultUrl(const QString &hana_db_password_key_vault_url) {
    m_hana_db_password_key_vault_url = hana_db_password_key_vault_url;
    m_hana_db_password_key_vault_url_isSet = true;
}

bool OAISapMonitorProperties::is_hana_db_password_key_vault_url_Set() const{
    return m_hana_db_password_key_vault_url_isSet;
}

bool OAISapMonitorProperties::is_hana_db_password_key_vault_url_Valid() const{
    return m_hana_db_password_key_vault_url_isValid;
}

qint32 OAISapMonitorProperties::getHanaDbSqlPort() const {
    return m_hana_db_sql_port;
}
void OAISapMonitorProperties::setHanaDbSqlPort(const qint32 &hana_db_sql_port) {
    m_hana_db_sql_port = hana_db_sql_port;
    m_hana_db_sql_port_isSet = true;
}

bool OAISapMonitorProperties::is_hana_db_sql_port_Set() const{
    return m_hana_db_sql_port_isSet;
}

bool OAISapMonitorProperties::is_hana_db_sql_port_Valid() const{
    return m_hana_db_sql_port_isValid;
}

QString OAISapMonitorProperties::getHanaDbUsername() const {
    return m_hana_db_username;
}
void OAISapMonitorProperties::setHanaDbUsername(const QString &hana_db_username) {
    m_hana_db_username = hana_db_username;
    m_hana_db_username_isSet = true;
}

bool OAISapMonitorProperties::is_hana_db_username_Set() const{
    return m_hana_db_username_isSet;
}

bool OAISapMonitorProperties::is_hana_db_username_Valid() const{
    return m_hana_db_username_isValid;
}

QString OAISapMonitorProperties::getHanaHostname() const {
    return m_hana_hostname;
}
void OAISapMonitorProperties::setHanaHostname(const QString &hana_hostname) {
    m_hana_hostname = hana_hostname;
    m_hana_hostname_isSet = true;
}

bool OAISapMonitorProperties::is_hana_hostname_Set() const{
    return m_hana_hostname_isSet;
}

bool OAISapMonitorProperties::is_hana_hostname_Valid() const{
    return m_hana_hostname_isValid;
}

QString OAISapMonitorProperties::getHanaSubnet() const {
    return m_hana_subnet;
}
void OAISapMonitorProperties::setHanaSubnet(const QString &hana_subnet) {
    m_hana_subnet = hana_subnet;
    m_hana_subnet_isSet = true;
}

bool OAISapMonitorProperties::is_hana_subnet_Set() const{
    return m_hana_subnet_isSet;
}

bool OAISapMonitorProperties::is_hana_subnet_Valid() const{
    return m_hana_subnet_isValid;
}

QString OAISapMonitorProperties::getKeyVaultId() const {
    return m_key_vault_id;
}
void OAISapMonitorProperties::setKeyVaultId(const QString &key_vault_id) {
    m_key_vault_id = key_vault_id;
    m_key_vault_id_isSet = true;
}

bool OAISapMonitorProperties::is_key_vault_id_Set() const{
    return m_key_vault_id_isSet;
}

bool OAISapMonitorProperties::is_key_vault_id_Valid() const{
    return m_key_vault_id_isValid;
}

QString OAISapMonitorProperties::getLogAnalyticsWorkspaceArmId() const {
    return m_log_analytics_workspace_arm_id;
}
void OAISapMonitorProperties::setLogAnalyticsWorkspaceArmId(const QString &log_analytics_workspace_arm_id) {
    m_log_analytics_workspace_arm_id = log_analytics_workspace_arm_id;
    m_log_analytics_workspace_arm_id_isSet = true;
}

bool OAISapMonitorProperties::is_log_analytics_workspace_arm_id_Set() const{
    return m_log_analytics_workspace_arm_id_isSet;
}

bool OAISapMonitorProperties::is_log_analytics_workspace_arm_id_Valid() const{
    return m_log_analytics_workspace_arm_id_isValid;
}

QString OAISapMonitorProperties::getLogAnalyticsWorkspaceId() const {
    return m_log_analytics_workspace_id;
}
void OAISapMonitorProperties::setLogAnalyticsWorkspaceId(const QString &log_analytics_workspace_id) {
    m_log_analytics_workspace_id = log_analytics_workspace_id;
    m_log_analytics_workspace_id_isSet = true;
}

bool OAISapMonitorProperties::is_log_analytics_workspace_id_Set() const{
    return m_log_analytics_workspace_id_isSet;
}

bool OAISapMonitorProperties::is_log_analytics_workspace_id_Valid() const{
    return m_log_analytics_workspace_id_isValid;
}

QString OAISapMonitorProperties::getLogAnalyticsWorkspaceSharedKey() const {
    return m_log_analytics_workspace_shared_key;
}
void OAISapMonitorProperties::setLogAnalyticsWorkspaceSharedKey(const QString &log_analytics_workspace_shared_key) {
    m_log_analytics_workspace_shared_key = log_analytics_workspace_shared_key;
    m_log_analytics_workspace_shared_key_isSet = true;
}

bool OAISapMonitorProperties::is_log_analytics_workspace_shared_key_Set() const{
    return m_log_analytics_workspace_shared_key_isSet;
}

bool OAISapMonitorProperties::is_log_analytics_workspace_shared_key_Valid() const{
    return m_log_analytics_workspace_shared_key_isValid;
}

QString OAISapMonitorProperties::getManagedResourceGroupName() const {
    return m_managed_resource_group_name;
}
void OAISapMonitorProperties::setManagedResourceGroupName(const QString &managed_resource_group_name) {
    m_managed_resource_group_name = managed_resource_group_name;
    m_managed_resource_group_name_isSet = true;
}

bool OAISapMonitorProperties::is_managed_resource_group_name_Set() const{
    return m_managed_resource_group_name_isSet;
}

bool OAISapMonitorProperties::is_managed_resource_group_name_Valid() const{
    return m_managed_resource_group_name_isValid;
}

QString OAISapMonitorProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISapMonitorProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISapMonitorProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISapMonitorProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAISapMonitorProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enable_customer_analytics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_db_credentials_msi_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_db_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_db_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_db_password_key_vault_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_db_sql_port_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_db_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_hostname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hana_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_vault_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_analytics_workspace_arm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_analytics_workspace_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_analytics_workspace_shared_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISapMonitorProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
