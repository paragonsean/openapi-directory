/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHanaInstanceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHanaInstanceProperties::OAIHanaInstanceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHanaInstanceProperties::OAIHanaInstanceProperties() {
    this->initializeModel();
}

OAIHanaInstanceProperties::~OAIHanaInstanceProperties() {}

void OAIHanaInstanceProperties::initializeModel() {

    m_hana_instance_id_isSet = false;
    m_hana_instance_id_isValid = false;

    m_hardware_profile_isSet = false;
    m_hardware_profile_isValid = false;

    m_hw_revision_isSet = false;
    m_hw_revision_isValid = false;

    m_network_profile_isSet = false;
    m_network_profile_isValid = false;

    m_os_profile_isSet = false;
    m_os_profile_isValid = false;

    m_partner_node_id_isSet = false;
    m_partner_node_id_isValid = false;

    m_power_state_isSet = false;
    m_power_state_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_proximity_placement_group_isSet = false;
    m_proximity_placement_group_isValid = false;

    m_storage_profile_isSet = false;
    m_storage_profile_isValid = false;
}

void OAIHanaInstanceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHanaInstanceProperties::fromJsonObject(QJsonObject json) {

    m_hana_instance_id_isValid = ::OpenAPI::fromJsonValue(m_hana_instance_id, json[QString("hanaInstanceId")]);
    m_hana_instance_id_isSet = !json[QString("hanaInstanceId")].isNull() && m_hana_instance_id_isValid;

    m_hardware_profile_isValid = ::OpenAPI::fromJsonValue(m_hardware_profile, json[QString("hardwareProfile")]);
    m_hardware_profile_isSet = !json[QString("hardwareProfile")].isNull() && m_hardware_profile_isValid;

    m_hw_revision_isValid = ::OpenAPI::fromJsonValue(m_hw_revision, json[QString("hwRevision")]);
    m_hw_revision_isSet = !json[QString("hwRevision")].isNull() && m_hw_revision_isValid;

    m_network_profile_isValid = ::OpenAPI::fromJsonValue(m_network_profile, json[QString("networkProfile")]);
    m_network_profile_isSet = !json[QString("networkProfile")].isNull() && m_network_profile_isValid;

    m_os_profile_isValid = ::OpenAPI::fromJsonValue(m_os_profile, json[QString("osProfile")]);
    m_os_profile_isSet = !json[QString("osProfile")].isNull() && m_os_profile_isValid;

    m_partner_node_id_isValid = ::OpenAPI::fromJsonValue(m_partner_node_id, json[QString("partnerNodeId")]);
    m_partner_node_id_isSet = !json[QString("partnerNodeId")].isNull() && m_partner_node_id_isValid;

    m_power_state_isValid = ::OpenAPI::fromJsonValue(m_power_state, json[QString("powerState")]);
    m_power_state_isSet = !json[QString("powerState")].isNull() && m_power_state_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_proximity_placement_group_isValid = ::OpenAPI::fromJsonValue(m_proximity_placement_group, json[QString("proximityPlacementGroup")]);
    m_proximity_placement_group_isSet = !json[QString("proximityPlacementGroup")].isNull() && m_proximity_placement_group_isValid;

    m_storage_profile_isValid = ::OpenAPI::fromJsonValue(m_storage_profile, json[QString("storageProfile")]);
    m_storage_profile_isSet = !json[QString("storageProfile")].isNull() && m_storage_profile_isValid;
}

QString OAIHanaInstanceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHanaInstanceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_hana_instance_id_isSet) {
        obj.insert(QString("hanaInstanceId"), ::OpenAPI::toJsonValue(m_hana_instance_id));
    }
    if (m_hardware_profile.isSet()) {
        obj.insert(QString("hardwareProfile"), ::OpenAPI::toJsonValue(m_hardware_profile));
    }
    if (m_hw_revision_isSet) {
        obj.insert(QString("hwRevision"), ::OpenAPI::toJsonValue(m_hw_revision));
    }
    if (m_network_profile.isSet()) {
        obj.insert(QString("networkProfile"), ::OpenAPI::toJsonValue(m_network_profile));
    }
    if (m_os_profile.isSet()) {
        obj.insert(QString("osProfile"), ::OpenAPI::toJsonValue(m_os_profile));
    }
    if (m_partner_node_id_isSet) {
        obj.insert(QString("partnerNodeId"), ::OpenAPI::toJsonValue(m_partner_node_id));
    }
    if (m_power_state_isSet) {
        obj.insert(QString("powerState"), ::OpenAPI::toJsonValue(m_power_state));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_proximity_placement_group_isSet) {
        obj.insert(QString("proximityPlacementGroup"), ::OpenAPI::toJsonValue(m_proximity_placement_group));
    }
    if (m_storage_profile.isSet()) {
        obj.insert(QString("storageProfile"), ::OpenAPI::toJsonValue(m_storage_profile));
    }
    return obj;
}

QString OAIHanaInstanceProperties::getHanaInstanceId() const {
    return m_hana_instance_id;
}
void OAIHanaInstanceProperties::setHanaInstanceId(const QString &hana_instance_id) {
    m_hana_instance_id = hana_instance_id;
    m_hana_instance_id_isSet = true;
}

bool OAIHanaInstanceProperties::is_hana_instance_id_Set() const{
    return m_hana_instance_id_isSet;
}

bool OAIHanaInstanceProperties::is_hana_instance_id_Valid() const{
    return m_hana_instance_id_isValid;
}

OAIHardwareProfile OAIHanaInstanceProperties::getHardwareProfile() const {
    return m_hardware_profile;
}
void OAIHanaInstanceProperties::setHardwareProfile(const OAIHardwareProfile &hardware_profile) {
    m_hardware_profile = hardware_profile;
    m_hardware_profile_isSet = true;
}

bool OAIHanaInstanceProperties::is_hardware_profile_Set() const{
    return m_hardware_profile_isSet;
}

bool OAIHanaInstanceProperties::is_hardware_profile_Valid() const{
    return m_hardware_profile_isValid;
}

QString OAIHanaInstanceProperties::getHwRevision() const {
    return m_hw_revision;
}
void OAIHanaInstanceProperties::setHwRevision(const QString &hw_revision) {
    m_hw_revision = hw_revision;
    m_hw_revision_isSet = true;
}

bool OAIHanaInstanceProperties::is_hw_revision_Set() const{
    return m_hw_revision_isSet;
}

bool OAIHanaInstanceProperties::is_hw_revision_Valid() const{
    return m_hw_revision_isValid;
}

OAINetworkProfile OAIHanaInstanceProperties::getNetworkProfile() const {
    return m_network_profile;
}
void OAIHanaInstanceProperties::setNetworkProfile(const OAINetworkProfile &network_profile) {
    m_network_profile = network_profile;
    m_network_profile_isSet = true;
}

bool OAIHanaInstanceProperties::is_network_profile_Set() const{
    return m_network_profile_isSet;
}

bool OAIHanaInstanceProperties::is_network_profile_Valid() const{
    return m_network_profile_isValid;
}

OAIOSProfile OAIHanaInstanceProperties::getOsProfile() const {
    return m_os_profile;
}
void OAIHanaInstanceProperties::setOsProfile(const OAIOSProfile &os_profile) {
    m_os_profile = os_profile;
    m_os_profile_isSet = true;
}

bool OAIHanaInstanceProperties::is_os_profile_Set() const{
    return m_os_profile_isSet;
}

bool OAIHanaInstanceProperties::is_os_profile_Valid() const{
    return m_os_profile_isValid;
}

QString OAIHanaInstanceProperties::getPartnerNodeId() const {
    return m_partner_node_id;
}
void OAIHanaInstanceProperties::setPartnerNodeId(const QString &partner_node_id) {
    m_partner_node_id = partner_node_id;
    m_partner_node_id_isSet = true;
}

bool OAIHanaInstanceProperties::is_partner_node_id_Set() const{
    return m_partner_node_id_isSet;
}

bool OAIHanaInstanceProperties::is_partner_node_id_Valid() const{
    return m_partner_node_id_isValid;
}

QString OAIHanaInstanceProperties::getPowerState() const {
    return m_power_state;
}
void OAIHanaInstanceProperties::setPowerState(const QString &power_state) {
    m_power_state = power_state;
    m_power_state_isSet = true;
}

bool OAIHanaInstanceProperties::is_power_state_Set() const{
    return m_power_state_isSet;
}

bool OAIHanaInstanceProperties::is_power_state_Valid() const{
    return m_power_state_isValid;
}

QString OAIHanaInstanceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIHanaInstanceProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIHanaInstanceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIHanaInstanceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIHanaInstanceProperties::getProximityPlacementGroup() const {
    return m_proximity_placement_group;
}
void OAIHanaInstanceProperties::setProximityPlacementGroup(const QString &proximity_placement_group) {
    m_proximity_placement_group = proximity_placement_group;
    m_proximity_placement_group_isSet = true;
}

bool OAIHanaInstanceProperties::is_proximity_placement_group_Set() const{
    return m_proximity_placement_group_isSet;
}

bool OAIHanaInstanceProperties::is_proximity_placement_group_Valid() const{
    return m_proximity_placement_group_isValid;
}

OAIStorageProfile OAIHanaInstanceProperties::getStorageProfile() const {
    return m_storage_profile;
}
void OAIHanaInstanceProperties::setStorageProfile(const OAIStorageProfile &storage_profile) {
    m_storage_profile = storage_profile;
    m_storage_profile_isSet = true;
}

bool OAIHanaInstanceProperties::is_storage_profile_Set() const{
    return m_storage_profile_isSet;
}

bool OAIHanaInstanceProperties::is_storage_profile_Valid() const{
    return m_storage_profile_isValid;
}

bool OAIHanaInstanceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hana_instance_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_hardware_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hw_revision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_node_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_proximity_placement_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHanaInstanceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
