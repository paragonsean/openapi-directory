/**
 * HanaManagementClient
 * The SAP HANA on Azure Management Client.
 *
 * The version of the OpenAPI document: 2017-11-03-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStorageProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStorageProfile::OAIStorageProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStorageProfile::OAIStorageProfile() {
    this->initializeModel();
}

OAIStorageProfile::~OAIStorageProfile() {}

void OAIStorageProfile::initializeModel() {

    m_nfs_ip_address_isSet = false;
    m_nfs_ip_address_isValid = false;

    m_os_disks_isSet = false;
    m_os_disks_isValid = false;
}

void OAIStorageProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStorageProfile::fromJsonObject(QJsonObject json) {

    m_nfs_ip_address_isValid = ::OpenAPI::fromJsonValue(m_nfs_ip_address, json[QString("nfsIpAddress")]);
    m_nfs_ip_address_isSet = !json[QString("nfsIpAddress")].isNull() && m_nfs_ip_address_isValid;

    m_os_disks_isValid = ::OpenAPI::fromJsonValue(m_os_disks, json[QString("osDisks")]);
    m_os_disks_isSet = !json[QString("osDisks")].isNull() && m_os_disks_isValid;
}

QString OAIStorageProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStorageProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_nfs_ip_address_isSet) {
        obj.insert(QString("nfsIpAddress"), ::OpenAPI::toJsonValue(m_nfs_ip_address));
    }
    if (m_os_disks.size() > 0) {
        obj.insert(QString("osDisks"), ::OpenAPI::toJsonValue(m_os_disks));
    }
    return obj;
}

QString OAIStorageProfile::getNfsIpAddress() const {
    return m_nfs_ip_address;
}
void OAIStorageProfile::setNfsIpAddress(const QString &nfs_ip_address) {
    m_nfs_ip_address = nfs_ip_address;
    m_nfs_ip_address_isSet = true;
}

bool OAIStorageProfile::is_nfs_ip_address_Set() const{
    return m_nfs_ip_address_isSet;
}

bool OAIStorageProfile::is_nfs_ip_address_Valid() const{
    return m_nfs_ip_address_isValid;
}

QList<OAIDisk> OAIStorageProfile::getOsDisks() const {
    return m_os_disks;
}
void OAIStorageProfile::setOsDisks(const QList<OAIDisk> &os_disks) {
    m_os_disks = os_disks;
    m_os_disks_isSet = true;
}

bool OAIStorageProfile::is_os_disks_Set() const{
    return m_os_disks_isSet;
}

bool OAIStorageProfile::is_os_disks_Valid() const{
    return m_os_disks_isValid;
}

bool OAIStorageProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_nfs_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_os_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStorageProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
