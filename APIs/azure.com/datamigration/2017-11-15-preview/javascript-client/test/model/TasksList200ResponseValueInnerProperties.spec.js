/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureDataMigrationServiceResourceProvider);
  }
}(this, function(expect, AzureDataMigrationServiceResourceProvider) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureDataMigrationServiceResourceProvider.TasksList200ResponseValueInnerProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TasksList200ResponseValueInnerProperties', function() {
    it('should create an instance of TasksList200ResponseValueInnerProperties', function() {
      // uncomment below and update the code to test TasksList200ResponseValueInnerProperties
      //var instance = new AzureDataMigrationServiceResourceProvider.TasksList200ResponseValueInnerProperties();
      //expect(instance).to.be.a(AzureDataMigrationServiceResourceProvider.TasksList200ResponseValueInnerProperties);
    });

    it('should have the property errors (base name: "errors")', function() {
      // uncomment below and update the code to test the property errors
      //var instance = new AzureDataMigrationServiceResourceProvider.TasksList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new AzureDataMigrationServiceResourceProvider.TasksList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

    it('should have the property taskType (base name: "taskType")', function() {
      // uncomment below and update the code to test the property taskType
      //var instance = new AzureDataMigrationServiceResourceProvider.TasksList200ResponseValueInnerProperties();
      //expect(instance).to.be();
    });

  });

}));
