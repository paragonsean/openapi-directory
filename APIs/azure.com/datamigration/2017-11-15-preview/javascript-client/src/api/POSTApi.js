/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationsListDefaultResponse from '../model/OperationsListDefaultResponse';
import ServicesCheckNameAvailability200Response from '../model/ServicesCheckNameAvailability200Response';
import ServicesCheckNameAvailabilityRequest from '../model/ServicesCheckNameAvailabilityRequest';
import ServicesCheckStatus200Response from '../model/ServicesCheckStatus200Response';
import TasksGet200Response from '../model/TasksGet200Response';

/**
* POST service.
* @module api/POSTApi
* @version 2017-11-15-preview
*/
export default class POSTApi {

    /**
    * Constructs a new POSTApi. 
    * @alias module:api/POSTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the servicesCheckChildrenNameAvailability_0 operation.
     * @callback module:api/POSTApi~servicesCheckChildrenNameAvailability_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesCheckNameAvailability200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check nested resource name validity and availability
     * This method checks whether a proposed nested resource name is valid and available.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} apiVersion Version of the API
     * @param {String} serviceName Name of the service
     * @param {module:model/ServicesCheckNameAvailabilityRequest} parameters Requested name to validate
     * @param {module:api/POSTApi~servicesCheckChildrenNameAvailability_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesCheckNameAvailability200Response}
     */
    servicesCheckChildrenNameAvailability_0(subscriptionId, groupName, apiVersion, serviceName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCheckChildrenNameAvailability_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesCheckChildrenNameAvailability_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCheckChildrenNameAvailability_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesCheckChildrenNameAvailability_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesCheckChildrenNameAvailability_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServicesCheckNameAvailability200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCheckNameAvailability_0 operation.
     * @callback module:api/POSTApi~servicesCheckNameAvailability_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesCheckNameAvailability200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check name validity and availability
     * This method checks whether a proposed top-level resource name is valid and available.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} apiVersion Version of the API
     * @param {String} location The Azure region of the operation
     * @param {module:model/ServicesCheckNameAvailabilityRequest} parameters Requested name to validate
     * @param {module:api/POSTApi~servicesCheckNameAvailability_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesCheckNameAvailability200Response}
     */
    servicesCheckNameAvailability_0(subscriptionId, apiVersion, location, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCheckNameAvailability_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCheckNameAvailability_0");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling servicesCheckNameAvailability_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesCheckNameAvailability_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServicesCheckNameAvailability200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCheckStatus_1 operation.
     * @callback module:api/POSTApi~servicesCheckStatus_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesCheckStatus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check service health status
     * The services resource is the top-level resource that represents the Data Migration Service. This action performs a health check and returns the status of the service and virtual machine size.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:api/POSTApi~servicesCheckStatus_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesCheckStatus200Response}
     */
    servicesCheckStatus_1(subscriptionId, groupName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCheckStatus_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesCheckStatus_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesCheckStatus_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCheckStatus_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicesCheckStatus200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkStatus', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesStart_1 operation.
     * @callback module:api/POSTApi~servicesStart_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start service
     * The services resource is the top-level resource that represents the Data Migration Service. This action starts the service and the service can be used for data migration.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:api/POSTApi~servicesStart_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesStart_1(subscriptionId, groupName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesStart_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesStart_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesStart_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesStart_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesStop_1 operation.
     * @callback module:api/POSTApi~servicesStop_1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Stop service
     * The services resource is the top-level resource that represents the Data Migration Service. This action stops the service and the service cannot be used for data migration. The service owner won't be billed when the service is stopped.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:api/POSTApi~servicesStop_1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesStop_1(subscriptionId, groupName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesStop_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesStop_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesStop_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesStop_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksCancel_1 operation.
     * @callback module:api/POSTApi~tasksCancel_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it's currently queued or running.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} taskName Name of the Task
     * @param {String} apiVersion Version of the API
     * @param {module:api/POSTApi~tasksCancel_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksGet200Response}
     */
    tasksCancel_1(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksCancel_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksCancel_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksCancel_1");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksCancel_1");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksCancel_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksCancel_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
