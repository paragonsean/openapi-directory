/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationsListDefaultResponse from '../model/OperationsListDefaultResponse';
import ProjectsGet200Response from '../model/ProjectsGet200Response';
import ServicesGet200Response from '../model/ServicesGet200Response';
import TasksGet200Response from '../model/TasksGet200Response';

/**
* PUT service.
* @module api/PUTApi
* @version 2017-11-15-preview
*/
export default class PUTApi {

    /**
    * Constructs a new PUTApi. 
    * @alias module:api/PUTApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the projectsCreateOrUpdate_1 operation.
     * @callback module:api/PUTApi~projectsCreateOrUpdate_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update project
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} apiVersion Version of the API
     * @param {module:model/ProjectsGet200Response} parameters Information about the project
     * @param {module:api/PUTApi~projectsCreateOrUpdate_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsGet200Response}
     */
    projectsCreateOrUpdate_1(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsCreateOrUpdate_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling projectsCreateOrUpdate_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling projectsCreateOrUpdate_1");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsCreateOrUpdate_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsCreateOrUpdate_1");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling projectsCreateOrUpdate_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCreateOrUpdate_1 operation.
     * @callback module:api/PUTApi~servicesCreateOrUpdate_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update DMS Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \"vm\", which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\"ServiceIsBusy\"). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:model/ServicesGet200Response} parameters Information about the service
     * @param {module:api/PUTApi~servicesCreateOrUpdate_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesGet200Response}
     */
    servicesCreateOrUpdate_1(subscriptionId, groupName, serviceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCreateOrUpdate_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesCreateOrUpdate_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesCreateOrUpdate_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCreateOrUpdate_1");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesCreateOrUpdate_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServicesGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksCreateOrUpdate_1 operation.
     * @callback module:api/PUTApi~tasksCreateOrUpdate_1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} taskName Name of the Task
     * @param {String} apiVersion Version of the API
     * @param {module:model/TasksGet200Response} parameters Information about the task
     * @param {module:api/PUTApi~tasksCreateOrUpdate_1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksGet200Response}
     */
    tasksCreateOrUpdate_1(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksCreateOrUpdate_1");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksCreateOrUpdate_1");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksCreateOrUpdate_1");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksCreateOrUpdate_1");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksCreateOrUpdate_1");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksCreateOrUpdate_1");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling tasksCreateOrUpdate_1");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TasksGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
