/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OperationsList200Response;
import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ProjectsGet200Response;
import org.openapitools.client.model.ProjectsList200Response;
import org.openapitools.client.model.ResourceSkusListSkus200Response;
import org.openapitools.client.model.ServicesCheckNameAvailability200Response;
import org.openapitools.client.model.ServicesCheckNameAvailabilityRequest;
import org.openapitools.client.model.ServicesGet200Response;
import org.openapitools.client.model.ServicesList200Response;
import org.openapitools.client.model.ServicesListSkus200Response;
import org.openapitools.client.model.TasksGet200Response;
import org.openapitools.client.model.TasksList200Response;
import org.openapitools.client.model.UsagesList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StandardOperationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StandardOperationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StandardOperationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for operationsList
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.DataMigration/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * Get available resource provider actions (operations)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param apiVersion Version of the API (required)
     * @return OperationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OperationsList200Response operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationsList200Response> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get available resource provider actions (operations)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;OperationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsList200Response> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available resource provider actions (operations) (asynchronously)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsCreateOrUpdate_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateOrUpdate_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCreateOrUpdate_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling projectsCreateOrUpdate_0(Async)");
        }

        return projectsCreateOrUpdate_0Call(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update project
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @return ProjectsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsGet200Response projectsCreateOrUpdate_0(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters) throws ApiException {
        ApiResponse<ProjectsGet200Response> localVarResp = projectsCreateOrUpdate_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update project
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @return ApiResponse&lt;ProjectsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsGet200Response> projectsCreateOrUpdate_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = projectsCreateOrUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update project (asynchronously)
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateOrUpdate_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback<ProjectsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCreateOrUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsDelete_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDelete_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (deleteRunningTasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteRunningTasks", deleteRunningTasks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsDelete_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsDelete_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsDelete_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsDelete_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsDelete_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsDelete_0(Async)");
        }

        return projectsDelete_0Call(subscriptionId, groupName, serviceName, projectName, apiVersion, deleteRunningTasks, _callback);

    }

    /**
     * Delete project
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void projectsDelete_0(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        projectsDelete_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion, deleteRunningTasks);
    }

    /**
     * Delete project
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> projectsDelete_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        okhttp3.Call localVarCall = projectsDelete_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, deleteRunningTasks, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete project (asynchronously)
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsDelete_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsDelete_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, deleteRunningTasks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGet_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGet_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGet_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsGet_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsGet_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsGet_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsGet_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsGet_0(Async)");
        }

        return projectsGet_0Call(subscriptionId, groupName, serviceName, projectName, apiVersion, _callback);

    }

    /**
     * Get project information
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @return ProjectsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsGet200Response projectsGet_0(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion) throws ApiException {
        ApiResponse<ProjectsGet200Response> localVarResp = projectsGet_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get project information
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ProjectsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsGet200Response> projectsGet_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = projectsGet_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project information (asynchronously)
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGet_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, final ApiCallback<ProjectsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGet_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsList_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsList_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsList_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsList_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsList_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsList_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsList_0(Async)");
        }

        return projectsList_0Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Get projects in a service
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ProjectsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsList200Response projectsList_0(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ProjectsList200Response> localVarResp = projectsList_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get projects in a service
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ProjectsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsList200Response> projectsList_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = projectsList_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProjectsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projects in a service (asynchronously)
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsList_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ProjectsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsList_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProjectsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsUpdate_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdate_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsUpdate_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsUpdate_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsUpdate_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsUpdate_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling projectsUpdate_0(Async)");
        }

        return projectsUpdate_0Call(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, _callback);

    }

    /**
     * Update project
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @return ProjectsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsGet200Response projectsUpdate_0(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters) throws ApiException {
        ApiResponse<ProjectsGet200Response> localVarResp = projectsUpdate_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Update project
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @return ApiResponse&lt;ProjectsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsGet200Response> projectsUpdate_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = projectsUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update project (asynchronously)
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsUpdate_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback<ProjectsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceSkusListSkus
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceSkusListSkusCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/skus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceSkusListSkusValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourceSkusListSkus(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourceSkusListSkus(Async)");
        }

        return resourceSkusListSkusCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get supported SKUs
     * The skus action returns the list of SKUs that DMS supports.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ResourceSkusListSkus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceSkusListSkus200Response resourceSkusListSkus(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceSkusListSkus200Response> localVarResp = resourceSkusListSkusWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get supported SKUs
     * The skus action returns the list of SKUs that DMS supports.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ResourceSkusListSkus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceSkusListSkus200Response> resourceSkusListSkusWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = resourceSkusListSkusValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceSkusListSkus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get supported SKUs (asynchronously)
     * The skus action returns the list of SKUs that DMS supports.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceSkusListSkusAsync(String subscriptionId, String apiVersion, final ApiCallback<ResourceSkusListSkus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceSkusListSkusValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceSkusListSkus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCheckNameAvailability
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param location The Azure region of the operation (required)
     * @param parameters Requested name to validate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCheckNameAvailabilityCall(String subscriptionId, String apiVersion, String location, ServicesCheckNameAvailabilityRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCheckNameAvailabilityValidateBeforeCall(String subscriptionId, String apiVersion, String location, ServicesCheckNameAvailabilityRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling servicesCheckNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling servicesCheckNameAvailability(Async)");
        }

        return servicesCheckNameAvailabilityCall(subscriptionId, apiVersion, location, parameters, _callback);

    }

    /**
     * Check name validity and availability
     * This method checks whether a proposed top-level resource name is valid and available.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param location The Azure region of the operation (required)
     * @param parameters Requested name to validate (required)
     * @return ServicesCheckNameAvailability200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesCheckNameAvailability200Response servicesCheckNameAvailability(String subscriptionId, String apiVersion, String location, ServicesCheckNameAvailabilityRequest parameters) throws ApiException {
        ApiResponse<ServicesCheckNameAvailability200Response> localVarResp = servicesCheckNameAvailabilityWithHttpInfo(subscriptionId, apiVersion, location, parameters);
        return localVarResp.getData();
    }

    /**
     * Check name validity and availability
     * This method checks whether a proposed top-level resource name is valid and available.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param location The Azure region of the operation (required)
     * @param parameters Requested name to validate (required)
     * @return ApiResponse&lt;ServicesCheckNameAvailability200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesCheckNameAvailability200Response> servicesCheckNameAvailabilityWithHttpInfo(String subscriptionId, String apiVersion, String location, ServicesCheckNameAvailabilityRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = servicesCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, location, parameters, null);
        Type localVarReturnType = new TypeToken<ServicesCheckNameAvailability200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check name validity and availability (asynchronously)
     * This method checks whether a proposed top-level resource name is valid and available.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param location The Azure region of the operation (required)
     * @param parameters Requested name to validate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCheckNameAvailabilityAsync(String subscriptionId, String apiVersion, String location, ServicesCheckNameAvailabilityRequest parameters, final ApiCallback<ServicesCheckNameAvailability200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCheckNameAvailabilityValidateBeforeCall(subscriptionId, apiVersion, location, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServicesCheckNameAvailability200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCreateOrUpdate_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateOrUpdate_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCreateOrUpdate_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling servicesCreateOrUpdate_0(Async)");
        }

        return servicesCreateOrUpdate_0Call(subscriptionId, groupName, serviceName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update DMS Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @return ServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesGet200Response servicesCreateOrUpdate_0(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters) throws ApiException {
        ApiResponse<ServicesGet200Response> localVarResp = servicesCreateOrUpdate_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update DMS Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @return ApiResponse&lt;ServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesGet200Response> servicesCreateOrUpdate_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = servicesCreateOrUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update DMS Instance (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateOrUpdate_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback<ServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCreateOrUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesDelete_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deletion accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Service not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDelete_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (deleteRunningTasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteRunningTasks", deleteRunningTasks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesDelete_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesDelete_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesDelete_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesDelete_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesDelete_0(Async)");
        }

        return servicesDelete_0Call(subscriptionId, groupName, serviceName, apiVersion, deleteRunningTasks, _callback);

    }

    /**
     * Delete DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The DELETE method deletes a service. Any running tasks will be canceled.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deletion accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Service not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void servicesDelete_0(String subscriptionId, String groupName, String serviceName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        servicesDelete_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion, deleteRunningTasks);
    }

    /**
     * Delete DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The DELETE method deletes a service. Any running tasks will be canceled.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deletion accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Service not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesDelete_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        okhttp3.Call localVarCall = servicesDelete_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, deleteRunningTasks, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete DMS Service Instance (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The DELETE method deletes a service. Any running tasks will be canceled.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource deleted </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Deletion accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Service not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDelete_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesDelete_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, deleteRunningTasks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGet_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGet_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGet_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesGet_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesGet_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGet_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGet_0(Async)");
        }

        return servicesGet_0Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Get DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesGet200Response servicesGet_0(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServicesGet200Response> localVarResp = servicesGet_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesGet200Response> servicesGet_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesGet_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DMS Service Instance (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGet_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGet_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListByResourceGroup_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListByResourceGroup_0Call(String subscriptionId, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListByResourceGroup_0ValidateBeforeCall(String subscriptionId, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListByResourceGroup_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesListByResourceGroup_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListByResourceGroup_0(Async)");
        }

        return servicesListByResourceGroup_0Call(subscriptionId, groupName, apiVersion, _callback);

    }

    /**
     * Get services in resource group
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesList200Response servicesListByResourceGroup_0(String subscriptionId, String groupName, String apiVersion) throws ApiException {
        ApiResponse<ServicesList200Response> localVarResp = servicesListByResourceGroup_0WithHttpInfo(subscriptionId, groupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get services in resource group
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesList200Response> servicesListByResourceGroup_0WithHttpInfo(String subscriptionId, String groupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListByResourceGroup_0ValidateBeforeCall(subscriptionId, groupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get services in resource group (asynchronously)
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListByResourceGroup_0Async(String subscriptionId, String groupName, String apiVersion, final ApiCallback<ServicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListByResourceGroup_0ValidateBeforeCall(subscriptionId, groupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListSkus_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListSkus_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListSkus_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListSkus_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesListSkus_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListSkus_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListSkus_0(Async)");
        }

        return servicesListSkus_0Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Get compatible SKUs
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesListSkus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesListSkus200Response servicesListSkus_0(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServicesListSkus200Response> localVarResp = servicesListSkus_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get compatible SKUs
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesListSkus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesListSkus200Response> servicesListSkus_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListSkus_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesListSkus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get compatible SKUs (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListSkus_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ServicesListSkus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListSkus_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesListSkus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesList_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesList_0Call(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesList_0ValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesList_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesList_0(Async)");
        }

        return servicesList_0Call(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get services in subscription
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesList200Response servicesList_0(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServicesList200Response> localVarResp = servicesList_0WithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get services in subscription
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesList200Response> servicesList_0WithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesList_0ValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get services in subscription (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesList_0Async(String subscriptionId, String apiVersion, final ApiCallback<ServicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesList_0ValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesUpdate_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdate_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesUpdate_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesUpdate_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesUpdate_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling servicesUpdate_0(Async)");
        }

        return servicesUpdate_0Call(subscriptionId, groupName, serviceName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PATCH method updates an existing service. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;).
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @return ServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesGet200Response servicesUpdate_0(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters) throws ApiException {
        ApiResponse<ServicesGet200Response> localVarResp = servicesUpdate_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PATCH method updates an existing service. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;).
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @return ApiResponse&lt;ServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesGet200Response> servicesUpdate_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = servicesUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update DMS Service Instance (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The PATCH method updates an existing service. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;).
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service resource updated </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdate_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback<ServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksCreateOrUpdate_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateOrUpdate_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCreateOrUpdate_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksCreateOrUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tasksCreateOrUpdate_0(Async)");
        }

        return tasksCreateOrUpdate_0Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksCreateOrUpdate_0(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksCreateOrUpdate_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksCreateOrUpdate_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = tasksCreateOrUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateOrUpdate_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCreateOrUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksDelete_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDelete_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (deleteRunningTasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteRunningTasks", deleteRunningTasks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksDelete_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksDelete_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksDelete_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksDelete_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksDelete_0(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksDelete_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksDelete_0(Async)");
        }

        return tasksDelete_0Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks, _callback);

    }

    /**
     * Delete task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it&#39;s running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void tasksDelete_0(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        tasksDelete_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks);
    }

    /**
     * Delete task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it&#39;s running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksDelete_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        okhttp3.Call localVarCall = tasksDelete_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it&#39;s running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDelete_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksDelete_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGet_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGet_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGet_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGet_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksGet_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksGet_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksGet_0(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGet_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGet_0(Async)");
        }

        return tasksGet_0Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, _callback);

    }

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksGet_0(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksGet_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksGet_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = tasksGet_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task information (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGet_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGet_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksList_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksList_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (taskType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taskType", taskType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksList_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksList_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksList_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksList_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksList_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksList_0(Async)");
        }

        return tasksList_0Call(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType, _callback);

    }

    /**
     * Get tasks in a service
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @return TasksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksList200Response tasksList_0(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType) throws ApiException {
        ApiResponse<TasksList200Response> localVarResp = tasksList_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType);
        return localVarResp.getData();
    }

    /**
     * Get tasks in a service
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @return ApiResponse&lt;TasksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksList200Response> tasksList_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType) throws ApiException {
        okhttp3.Call localVarCall = tasksList_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType, null);
        Type localVarReturnType = new TypeToken<TasksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks in a service (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksList_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType, final ApiCallback<TasksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksList_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType, _callback);
        Type localVarReturnType = new TypeToken<TasksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdate_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdate_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdate_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksUpdate_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksUpdate_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksUpdate_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksUpdate_0(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksUpdate_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksUpdate_0(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tasksUpdate_0(Async)");
        }

        return tasksUpdate_0Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksUpdate_0(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksUpdate_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksUpdate_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdate_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdate_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usagesList
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usagesListCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usagesListValidateBeforeCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling usagesList(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling usagesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usagesList(Async)");
        }

        return usagesListCall(subscriptionId, location, apiVersion, _callback);

    }

    /**
     * Get resource quotas and usage information
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @return UsagesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsagesList200Response usagesList(String subscriptionId, String location, String apiVersion) throws ApiException {
        ApiResponse<UsagesList200Response> localVarResp = usagesListWithHttpInfo(subscriptionId, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get resource quotas and usage information
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;UsagesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesList200Response> usagesListWithHttpInfo(String subscriptionId, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = usagesListValidateBeforeCall(subscriptionId, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsagesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource quotas and usage information (asynchronously)
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usagesListAsync(String subscriptionId, String location, String apiVersion, final ApiCallback<UsagesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usagesListValidateBeforeCall(subscriptionId, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsagesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
