/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ServicesCheckNameAvailability200Response;
import org.openapitools.client.model.ServicesCheckNameAvailabilityRequest;
import org.openapitools.client.model.ServicesCheckStatus200Response;
import org.openapitools.client.model.TasksGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomOperationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomOperationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomOperationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicesCheckChildrenNameAvailability
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param serviceName Name of the service (required)
     * @param parameters Requested name to validate (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCheckChildrenNameAvailabilityCall(String subscriptionId, String groupName, String apiVersion, String serviceName, ServicesCheckNameAvailabilityRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkNameAvailability"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCheckChildrenNameAvailabilityValidateBeforeCall(String subscriptionId, String groupName, String apiVersion, String serviceName, ServicesCheckNameAvailabilityRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCheckChildrenNameAvailability(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesCheckChildrenNameAvailability(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCheckChildrenNameAvailability(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesCheckChildrenNameAvailability(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling servicesCheckChildrenNameAvailability(Async)");
        }

        return servicesCheckChildrenNameAvailabilityCall(subscriptionId, groupName, apiVersion, serviceName, parameters, _callback);

    }

    /**
     * Check nested resource name validity and availability
     * This method checks whether a proposed nested resource name is valid and available.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param serviceName Name of the service (required)
     * @param parameters Requested name to validate (required)
     * @return ServicesCheckNameAvailability200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesCheckNameAvailability200Response servicesCheckChildrenNameAvailability(String subscriptionId, String groupName, String apiVersion, String serviceName, ServicesCheckNameAvailabilityRequest parameters) throws ApiException {
        ApiResponse<ServicesCheckNameAvailability200Response> localVarResp = servicesCheckChildrenNameAvailabilityWithHttpInfo(subscriptionId, groupName, apiVersion, serviceName, parameters);
        return localVarResp.getData();
    }

    /**
     * Check nested resource name validity and availability
     * This method checks whether a proposed nested resource name is valid and available.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param serviceName Name of the service (required)
     * @param parameters Requested name to validate (required)
     * @return ApiResponse&lt;ServicesCheckNameAvailability200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesCheckNameAvailability200Response> servicesCheckChildrenNameAvailabilityWithHttpInfo(String subscriptionId, String groupName, String apiVersion, String serviceName, ServicesCheckNameAvailabilityRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = servicesCheckChildrenNameAvailabilityValidateBeforeCall(subscriptionId, groupName, apiVersion, serviceName, parameters, null);
        Type localVarReturnType = new TypeToken<ServicesCheckNameAvailability200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check nested resource name validity and availability (asynchronously)
     * This method checks whether a proposed nested resource name is valid and available.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param serviceName Name of the service (required)
     * @param parameters Requested name to validate (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Name checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCheckChildrenNameAvailabilityAsync(String subscriptionId, String groupName, String apiVersion, String serviceName, ServicesCheckNameAvailabilityRequest parameters, final ApiCallback<ServicesCheckNameAvailability200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCheckChildrenNameAvailabilityValidateBeforeCall(subscriptionId, groupName, apiVersion, serviceName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServicesCheckNameAvailability200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCheckStatus_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCheckStatus_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/checkStatus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCheckStatus_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCheckStatus_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesCheckStatus_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesCheckStatus_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCheckStatus_0(Async)");
        }

        return servicesCheckStatus_0Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Check service health status
     * The services resource is the top-level resource that represents the Data Migration Service. This action performs a health check and returns the status of the service and virtual machine size.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesCheckStatus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesCheckStatus200Response servicesCheckStatus_0(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServicesCheckStatus200Response> localVarResp = servicesCheckStatus_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Check service health status
     * The services resource is the top-level resource that represents the Data Migration Service. This action performs a health check and returns the status of the service and virtual machine size.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesCheckStatus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesCheckStatus200Response> servicesCheckStatus_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesCheckStatus_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesCheckStatus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check service health status (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This action performs a health check and returns the status of the service and virtual machine size.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Health checked </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCheckStatus_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ServicesCheckStatus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCheckStatus_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesCheckStatus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesStart_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to start service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesStart_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesStart_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesStart_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesStart_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesStart_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesStart_0(Async)");
        }

        return servicesStart_0Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Start service
     * The services resource is the top-level resource that represents the Data Migration Service. This action starts the service and the service can be used for data migration.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to start service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void servicesStart_0(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        servicesStart_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
    }

    /**
     * Start service
     * The services resource is the top-level resource that represents the Data Migration Service. This action starts the service and the service can be used for data migration.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to start service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesStart_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesStart_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Start service (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This action starts the service and the service can be used for data migration.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been started. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to start service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesStart_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesStart_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesStop_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been stopped. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to stop service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesStop_0Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesStop_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesStop_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesStop_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesStop_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesStop_0(Async)");
        }

        return servicesStop_0Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Stop service
     * The services resource is the top-level resource that represents the Data Migration Service. This action stops the service and the service cannot be used for data migration. The service owner won&#39;t be billed when the service is stopped.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been stopped. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to stop service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void servicesStop_0(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        servicesStop_0WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
    }

    /**
     * Stop service
     * The services resource is the top-level resource that represents the Data Migration Service. This action stops the service and the service cannot be used for data migration. The service owner won&#39;t be billed when the service is stopped.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been stopped. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to stop service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> servicesStop_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesStop_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Stop service (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This action stops the service and the service cannot be used for data migration. The service owner won&#39;t be billed when the service is stopped.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The service has already been stopped. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> The request to stop service is accepted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesStop_0Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesStop_0ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksCancel_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCancel_0Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCancel_0ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksCancel_0(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksCancel_0(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksCancel_0(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksCancel_0(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksCancel_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksCancel_0(Async)");
        }

        return tasksCancel_0Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, _callback);

    }

    /**
     * Cancel a task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it&#39;s currently queued or running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksCancel_0(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksCancel_0WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Cancel a task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it&#39;s currently queued or running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksCancel_0WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tasksCancel_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it&#39;s currently queued or running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCancel_0Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCancel_0ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
