/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Describes metadata for retrieving price info.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:12.119748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ResourceSkusListSkus200ResponseValueInnerCostsInner {
  public static final String SERIALIZED_NAME_EXTENDED_UNIT = "extendedUnit";
  @SerializedName(SERIALIZED_NAME_EXTENDED_UNIT)
  private String extendedUnit;

  public static final String SERIALIZED_NAME_METER_I_D = "meterID";
  @SerializedName(SERIALIZED_NAME_METER_I_D)
  private String meterID;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private Long quantity;

  public ResourceSkusListSkus200ResponseValueInnerCostsInner() {
  }

  public ResourceSkusListSkus200ResponseValueInnerCostsInner(
     String extendedUnit, 
     String meterID, 
     Long quantity
  ) {
    this();
    this.extendedUnit = extendedUnit;
    this.meterID = meterID;
    this.quantity = quantity;
  }

  /**
   * An invariant to show the extended unit.
   * @return extendedUnit
   */
  @javax.annotation.Nullable
  public String getExtendedUnit() {
    return extendedUnit;
  }



  /**
   * Used for querying price from commerce.
   * @return meterID
   */
  @javax.annotation.Nullable
  public String getMeterID() {
    return meterID;
  }



  /**
   * The multiplier is needed to extend the base metered cost.
   * @return quantity
   */
  @javax.annotation.Nullable
  public Long getQuantity() {
    return quantity;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ResourceSkusListSkus200ResponseValueInnerCostsInner resourceSkusListSkus200ResponseValueInnerCostsInner = (ResourceSkusListSkus200ResponseValueInnerCostsInner) o;
    return Objects.equals(this.extendedUnit, resourceSkusListSkus200ResponseValueInnerCostsInner.extendedUnit) &&
        Objects.equals(this.meterID, resourceSkusListSkus200ResponseValueInnerCostsInner.meterID) &&
        Objects.equals(this.quantity, resourceSkusListSkus200ResponseValueInnerCostsInner.quantity);
  }

  @Override
  public int hashCode() {
    return Objects.hash(extendedUnit, meterID, quantity);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ResourceSkusListSkus200ResponseValueInnerCostsInner {\n");
    sb.append("    extendedUnit: ").append(toIndentedString(extendedUnit)).append("\n");
    sb.append("    meterID: ").append(toIndentedString(meterID)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("extendedUnit");
    openapiFields.add("meterID");
    openapiFields.add("quantity");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ResourceSkusListSkus200ResponseValueInnerCostsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ResourceSkusListSkus200ResponseValueInnerCostsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ResourceSkusListSkus200ResponseValueInnerCostsInner is not found in the empty JSON string", ResourceSkusListSkus200ResponseValueInnerCostsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ResourceSkusListSkus200ResponseValueInnerCostsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ResourceSkusListSkus200ResponseValueInnerCostsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("extendedUnit") != null && !jsonObj.get("extendedUnit").isJsonNull()) && !jsonObj.get("extendedUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extendedUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extendedUnit").toString()));
      }
      if ((jsonObj.get("meterID") != null && !jsonObj.get("meterID").isJsonNull()) && !jsonObj.get("meterID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterID").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ResourceSkusListSkus200ResponseValueInnerCostsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ResourceSkusListSkus200ResponseValueInnerCostsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ResourceSkusListSkus200ResponseValueInnerCostsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ResourceSkusListSkus200ResponseValueInnerCostsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ResourceSkusListSkus200ResponseValueInnerCostsInner>() {
           @Override
           public void write(JsonWriter out, ResourceSkusListSkus200ResponseValueInnerCostsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ResourceSkusListSkus200ResponseValueInnerCostsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ResourceSkusListSkus200ResponseValueInnerCostsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ResourceSkusListSkus200ResponseValueInnerCostsInner
   * @throws IOException if the JSON string is invalid with respect to ResourceSkusListSkus200ResponseValueInnerCostsInner
   */
  public static ResourceSkusListSkus200ResponseValueInnerCostsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ResourceSkusListSkus200ResponseValueInnerCostsInner.class);
  }

  /**
   * Convert an instance of ResourceSkusListSkus200ResponseValueInnerCostsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

