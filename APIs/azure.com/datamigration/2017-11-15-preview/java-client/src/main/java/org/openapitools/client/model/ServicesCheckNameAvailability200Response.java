/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Indicates whether a proposed resource name is available
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:12.119748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicesCheckNameAvailability200Response {
  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME_AVAILABLE = "nameAvailable";
  @SerializedName(SERIALIZED_NAME_NAME_AVAILABLE)
  private Boolean nameAvailable;

  /**
   * The reason why the name is not available, if nameAvailable is false
   */
  @JsonAdapter(ReasonEnum.Adapter.class)
  public enum ReasonEnum {
    ALREADY_EXISTS("AlreadyExists"),
    
    INVALID("Invalid");

    private String value;

    ReasonEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReasonEnum fromValue(String value) {
      for (ReasonEnum b : ReasonEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReasonEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReasonEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReasonEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReasonEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ReasonEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private ReasonEnum reason;

  public ServicesCheckNameAvailability200Response() {
  }

  public ServicesCheckNameAvailability200Response message(String message) {
    this.message = message;
    return this;
  }

  /**
   * The localized reason why the name is not available, if nameAvailable is false
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }

  public void setMessage(String message) {
    this.message = message;
  }


  public ServicesCheckNameAvailability200Response nameAvailable(Boolean nameAvailable) {
    this.nameAvailable = nameAvailable;
    return this;
  }

  /**
   * If true, the name is valid and available. If false, &#39;reason&#39; describes why not.
   * @return nameAvailable
   */
  @javax.annotation.Nullable
  public Boolean getNameAvailable() {
    return nameAvailable;
  }

  public void setNameAvailable(Boolean nameAvailable) {
    this.nameAvailable = nameAvailable;
  }


  public ServicesCheckNameAvailability200Response reason(ReasonEnum reason) {
    this.reason = reason;
    return this;
  }

  /**
   * The reason why the name is not available, if nameAvailable is false
   * @return reason
   */
  @javax.annotation.Nullable
  public ReasonEnum getReason() {
    return reason;
  }

  public void setReason(ReasonEnum reason) {
    this.reason = reason;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicesCheckNameAvailability200Response servicesCheckNameAvailability200Response = (ServicesCheckNameAvailability200Response) o;
    return Objects.equals(this.message, servicesCheckNameAvailability200Response.message) &&
        Objects.equals(this.nameAvailable, servicesCheckNameAvailability200Response.nameAvailable) &&
        Objects.equals(this.reason, servicesCheckNameAvailability200Response.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(message, nameAvailable, reason);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicesCheckNameAvailability200Response {\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    nameAvailable: ").append(toIndentedString(nameAvailable)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("message");
    openapiFields.add("nameAvailable");
    openapiFields.add("reason");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicesCheckNameAvailability200Response
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicesCheckNameAvailability200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicesCheckNameAvailability200Response is not found in the empty JSON string", ServicesCheckNameAvailability200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicesCheckNameAvailability200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicesCheckNameAvailability200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) && !jsonObj.get("reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reason").toString()));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        ReasonEnum.validateJsonElement(jsonObj.get("reason"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicesCheckNameAvailability200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicesCheckNameAvailability200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicesCheckNameAvailability200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicesCheckNameAvailability200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicesCheckNameAvailability200Response>() {
           @Override
           public void write(JsonWriter out, ServicesCheckNameAvailability200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicesCheckNameAvailability200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicesCheckNameAvailability200Response given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicesCheckNameAvailability200Response
   * @throws IOException if the JSON string is invalid with respect to ServicesCheckNameAvailability200Response
   */
  public static ServicesCheckNameAvailability200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicesCheckNameAvailability200Response.class);
  }

  /**
   * Convert an instance of ServicesCheckNameAvailability200Response to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

