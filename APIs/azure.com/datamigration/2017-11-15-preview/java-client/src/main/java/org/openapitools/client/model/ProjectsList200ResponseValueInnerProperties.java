/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner;
import org.openapitools.client.model.ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Project-specific properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:12.119748-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectsList200ResponseValueInnerProperties {
  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private OffsetDateTime creationTime;

  public static final String SERIALIZED_NAME_DATABASES_INFO = "databasesInfo";
  @SerializedName(SERIALIZED_NAME_DATABASES_INFO)
  private List<ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner> databasesInfo = new ArrayList<>();

  /**
   * The project&#39;s provisioning state
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SOURCE_CONNECTION_INFO = "sourceConnectionInfo";
  @SerializedName(SERIALIZED_NAME_SOURCE_CONNECTION_INFO)
  private ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo sourceConnectionInfo;

  /**
   * Source platform of the project
   */
  @JsonAdapter(SourcePlatformEnum.Adapter.class)
  public enum SourcePlatformEnum {
    SQL("SQL"),
    
    UNKNOWN("Unknown");

    private String value;

    SourcePlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SourcePlatformEnum fromValue(String value) {
      for (SourcePlatformEnum b : SourcePlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SourcePlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SourcePlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SourcePlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SourcePlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SourcePlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SOURCE_PLATFORM = "sourcePlatform";
  @SerializedName(SERIALIZED_NAME_SOURCE_PLATFORM)
  private SourcePlatformEnum sourcePlatform;

  public static final String SERIALIZED_NAME_TARGET_CONNECTION_INFO = "targetConnectionInfo";
  @SerializedName(SERIALIZED_NAME_TARGET_CONNECTION_INFO)
  private ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo targetConnectionInfo;

  /**
   * Target platform of the project
   */
  @JsonAdapter(TargetPlatformEnum.Adapter.class)
  public enum TargetPlatformEnum {
    SQLDB("SQLDB"),
    
    UNKNOWN("Unknown");

    private String value;

    TargetPlatformEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TargetPlatformEnum fromValue(String value) {
      for (TargetPlatformEnum b : TargetPlatformEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TargetPlatformEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TargetPlatformEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TargetPlatformEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TargetPlatformEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TargetPlatformEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TARGET_PLATFORM = "targetPlatform";
  @SerializedName(SERIALIZED_NAME_TARGET_PLATFORM)
  private TargetPlatformEnum targetPlatform;

  public ProjectsList200ResponseValueInnerProperties() {
  }

  public ProjectsList200ResponseValueInnerProperties(
     OffsetDateTime creationTime, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.creationTime = creationTime;
    this.provisioningState = provisioningState;
  }

  /**
   * UTC Date and time when project was created
   * @return creationTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreationTime() {
    return creationTime;
  }



  public ProjectsList200ResponseValueInnerProperties databasesInfo(List<ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner> databasesInfo) {
    this.databasesInfo = databasesInfo;
    return this;
  }

  public ProjectsList200ResponseValueInnerProperties addDatabasesInfoItem(ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner databasesInfoItem) {
    if (this.databasesInfo == null) {
      this.databasesInfo = new ArrayList<>();
    }
    this.databasesInfo.add(databasesInfoItem);
    return this;
  }

  /**
   * List of DatabaseInfo
   * @return databasesInfo
   */
  @javax.annotation.Nullable
  public List<ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner> getDatabasesInfo() {
    return databasesInfo;
  }

  public void setDatabasesInfo(List<ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner> databasesInfo) {
    this.databasesInfo = databasesInfo;
  }


  /**
   * The project&#39;s provisioning state
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ProjectsList200ResponseValueInnerProperties sourceConnectionInfo(ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo sourceConnectionInfo) {
    this.sourceConnectionInfo = sourceConnectionInfo;
    return this;
  }

  /**
   * Get sourceConnectionInfo
   * @return sourceConnectionInfo
   */
  @javax.annotation.Nullable
  public ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo getSourceConnectionInfo() {
    return sourceConnectionInfo;
  }

  public void setSourceConnectionInfo(ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo sourceConnectionInfo) {
    this.sourceConnectionInfo = sourceConnectionInfo;
  }


  public ProjectsList200ResponseValueInnerProperties sourcePlatform(SourcePlatformEnum sourcePlatform) {
    this.sourcePlatform = sourcePlatform;
    return this;
  }

  /**
   * Source platform of the project
   * @return sourcePlatform
   */
  @javax.annotation.Nonnull
  public SourcePlatformEnum getSourcePlatform() {
    return sourcePlatform;
  }

  public void setSourcePlatform(SourcePlatformEnum sourcePlatform) {
    this.sourcePlatform = sourcePlatform;
  }


  public ProjectsList200ResponseValueInnerProperties targetConnectionInfo(ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo targetConnectionInfo) {
    this.targetConnectionInfo = targetConnectionInfo;
    return this;
  }

  /**
   * Get targetConnectionInfo
   * @return targetConnectionInfo
   */
  @javax.annotation.Nullable
  public ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo getTargetConnectionInfo() {
    return targetConnectionInfo;
  }

  public void setTargetConnectionInfo(ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo targetConnectionInfo) {
    this.targetConnectionInfo = targetConnectionInfo;
  }


  public ProjectsList200ResponseValueInnerProperties targetPlatform(TargetPlatformEnum targetPlatform) {
    this.targetPlatform = targetPlatform;
    return this;
  }

  /**
   * Target platform of the project
   * @return targetPlatform
   */
  @javax.annotation.Nonnull
  public TargetPlatformEnum getTargetPlatform() {
    return targetPlatform;
  }

  public void setTargetPlatform(TargetPlatformEnum targetPlatform) {
    this.targetPlatform = targetPlatform;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectsList200ResponseValueInnerProperties projectsList200ResponseValueInnerProperties = (ProjectsList200ResponseValueInnerProperties) o;
    return Objects.equals(this.creationTime, projectsList200ResponseValueInnerProperties.creationTime) &&
        Objects.equals(this.databasesInfo, projectsList200ResponseValueInnerProperties.databasesInfo) &&
        Objects.equals(this.provisioningState, projectsList200ResponseValueInnerProperties.provisioningState) &&
        Objects.equals(this.sourceConnectionInfo, projectsList200ResponseValueInnerProperties.sourceConnectionInfo) &&
        Objects.equals(this.sourcePlatform, projectsList200ResponseValueInnerProperties.sourcePlatform) &&
        Objects.equals(this.targetConnectionInfo, projectsList200ResponseValueInnerProperties.targetConnectionInfo) &&
        Objects.equals(this.targetPlatform, projectsList200ResponseValueInnerProperties.targetPlatform);
  }

  @Override
  public int hashCode() {
    return Objects.hash(creationTime, databasesInfo, provisioningState, sourceConnectionInfo, sourcePlatform, targetConnectionInfo, targetPlatform);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectsList200ResponseValueInnerProperties {\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    databasesInfo: ").append(toIndentedString(databasesInfo)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sourceConnectionInfo: ").append(toIndentedString(sourceConnectionInfo)).append("\n");
    sb.append("    sourcePlatform: ").append(toIndentedString(sourcePlatform)).append("\n");
    sb.append("    targetConnectionInfo: ").append(toIndentedString(targetConnectionInfo)).append("\n");
    sb.append("    targetPlatform: ").append(toIndentedString(targetPlatform)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("creationTime");
    openapiFields.add("databasesInfo");
    openapiFields.add("provisioningState");
    openapiFields.add("sourceConnectionInfo");
    openapiFields.add("sourcePlatform");
    openapiFields.add("targetConnectionInfo");
    openapiFields.add("targetPlatform");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sourcePlatform");
    openapiRequiredFields.add("targetPlatform");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectsList200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectsList200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectsList200ResponseValueInnerProperties is not found in the empty JSON string", ProjectsList200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectsList200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectsList200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectsList200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("databasesInfo") != null && !jsonObj.get("databasesInfo").isJsonNull()) {
        JsonArray jsonArraydatabasesInfo = jsonObj.getAsJsonArray("databasesInfo");
        if (jsonArraydatabasesInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("databasesInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `databasesInfo` to be an array in the JSON string but got `%s`", jsonObj.get("databasesInfo").toString()));
          }

          // validate the optional field `databasesInfo` (array)
          for (int i = 0; i < jsonArraydatabasesInfo.size(); i++) {
            ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner.validateJsonElement(jsonArraydatabasesInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `sourceConnectionInfo`
      if (jsonObj.get("sourceConnectionInfo") != null && !jsonObj.get("sourceConnectionInfo").isJsonNull()) {
        ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo.validateJsonElement(jsonObj.get("sourceConnectionInfo"));
      }
      if (!jsonObj.get("sourcePlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourcePlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourcePlatform").toString()));
      }
      // validate the required field `sourcePlatform`
      SourcePlatformEnum.validateJsonElement(jsonObj.get("sourcePlatform"));
      // validate the optional field `targetConnectionInfo`
      if (jsonObj.get("targetConnectionInfo") != null && !jsonObj.get("targetConnectionInfo").isJsonNull()) {
        ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo.validateJsonElement(jsonObj.get("targetConnectionInfo"));
      }
      if (!jsonObj.get("targetPlatform").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetPlatform` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetPlatform").toString()));
      }
      // validate the required field `targetPlatform`
      TargetPlatformEnum.validateJsonElement(jsonObj.get("targetPlatform"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectsList200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectsList200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectsList200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectsList200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectsList200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, ProjectsList200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectsList200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectsList200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectsList200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ProjectsList200ResponseValueInnerProperties
   */
  public static ProjectsList200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectsList200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of ProjectsList200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

