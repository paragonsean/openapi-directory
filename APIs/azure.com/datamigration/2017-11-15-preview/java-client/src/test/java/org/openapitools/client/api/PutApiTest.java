/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ProjectsGet200Response;
import org.openapitools.client.model.ServicesGet200Response;
import org.openapitools.client.model.TasksGet200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PutApi
 */
@Disabled
public class PutApiTest {

    private final PutApi api = new PutApi();

    /**
     * Create or update project
     *
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateOrUpdate_1Test() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String apiVersion = null;
        ProjectsGet200Response parameters = null;
        ProjectsGet200Response response = api.projectsCreateOrUpdate_1(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Create or update DMS Instance
     *
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesCreateOrUpdate_1Test() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ServicesGet200Response parameters = null;
        ServicesGet200Response response = api.servicesCreateOrUpdate_1(subscriptionId, groupName, serviceName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Create or update task
     *
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksCreateOrUpdate_1Test() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String taskName = null;
        String apiVersion = null;
        TasksGet200Response parameters = null;
        TasksGet200Response response = api.tasksCreateOrUpdate_1(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters);
        // TODO: test validations
    }

}
