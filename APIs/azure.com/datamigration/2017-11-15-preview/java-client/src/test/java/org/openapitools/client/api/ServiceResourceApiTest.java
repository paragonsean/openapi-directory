/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ServicesCheckStatus200Response;
import org.openapitools.client.model.ServicesGet200Response;
import org.openapitools.client.model.ServicesList200Response;
import org.openapitools.client.model.ServicesListSkus200Response;
import org.openapitools.client.model.TasksList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ServiceResourceApi
 */
@Disabled
public class ServiceResourceApiTest {

    private final ServiceResourceApi api = new ServiceResourceApi();

    /**
     * Check service health status
     *
     * The services resource is the top-level resource that represents the Data Migration Service. This action performs a health check and returns the status of the service and virtual machine size.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesCheckStatusTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ServicesCheckStatus200Response response = api.servicesCheckStatus(subscriptionId, groupName, serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Create or update DMS Instance
     *
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ServicesGet200Response parameters = null;
        ServicesGet200Response response = api.servicesCreateOrUpdate(subscriptionId, groupName, serviceName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Data Migration Service. The DELETE method deletes a service. Any running tasks will be canceled.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        Boolean deleteRunningTasks = null;
        api.servicesDelete(subscriptionId, groupName, serviceName, apiVersion, deleteRunningTasks);
        // TODO: test validations
    }

    /**
     * Get DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesGetTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ServicesGet200Response response = api.servicesGet(subscriptionId, groupName, serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get services in subscription
     *
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ServicesList200Response response = api.servicesList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get services in resource group
     *
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String apiVersion = null;
        ServicesList200Response response = api.servicesListByResourceGroup(subscriptionId, groupName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get compatible SKUs
     *
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesListSkusTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ServicesListSkus200Response response = api.servicesListSkus(subscriptionId, groupName, serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Start service
     *
     * The services resource is the top-level resource that represents the Data Migration Service. This action starts the service and the service can be used for data migration.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesStartTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        api.servicesStart(subscriptionId, groupName, serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Stop service
     *
     * The services resource is the top-level resource that represents the Data Migration Service. This action stops the service and the service cannot be used for data migration. The service owner won&#39;t be billed when the service is stopped.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesStopTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        api.servicesStop(subscriptionId, groupName, serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Create or update DMS Service Instance
     *
     * The services resource is the top-level resource that represents the Data Migration Service. The PATCH method updates an existing service. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void servicesUpdateTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ServicesGet200Response parameters = null;
        ServicesGet200Response response = api.servicesUpdate(subscriptionId, groupName, serviceName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Get tasks in a service
     *
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tasksListTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String apiVersion = null;
        String taskType = null;
        TasksList200Response response = api.tasksList(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType);
        // TODO: test validations
    }

}
