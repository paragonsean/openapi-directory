/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner() {
    this->initializeModel();
}

OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::~OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner() {}

void OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::initializeModel() {

    m_extended_unit_isSet = false;
    m_extended_unit_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;
}

void OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::fromJsonObject(QJsonObject json) {

    m_extended_unit_isValid = ::OpenAPI::fromJsonValue(m_extended_unit, json[QString("extendedUnit")]);
    m_extended_unit_isSet = !json[QString("extendedUnit")].isNull() && m_extended_unit_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterID")]);
    m_meter_id_isSet = !json[QString("meterID")].isNull() && m_meter_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_extended_unit_isSet) {
        obj.insert(QString("extendedUnit"), ::OpenAPI::toJsonValue(m_extended_unit));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterID"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    return obj;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::getExtendedUnit() const {
    return m_extended_unit;
}
void OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::setExtendedUnit(const QString &extended_unit) {
    m_extended_unit = extended_unit;
    m_extended_unit_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::is_extended_unit_Set() const{
    return m_extended_unit_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::is_extended_unit_Valid() const{
    return m_extended_unit_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::getMeterId() const {
    return m_meter_id;
}
void OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

qint64 OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::getQuantity() const {
    return m_quantity;
}
void OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_extended_unit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
