/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjects_Get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjects_Get_200_response::OAIProjects_Get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjects_Get_200_response::OAIProjects_Get_200_response() {
    this->initializeModel();
}

OAIProjects_Get_200_response::~OAIProjects_Get_200_response() {}

void OAIProjects_Get_200_response::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIProjects_Get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjects_Get_200_response::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIProjects_Get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjects_Get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIProjects_List_200_response_value_inner_properties OAIProjects_Get_200_response::getProperties() const {
    return m_properties;
}
void OAIProjects_Get_200_response::setProperties(const OAIProjects_List_200_response_value_inner_properties &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIProjects_Get_200_response::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIProjects_Get_200_response::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIProjects_Get_200_response::getLocation() const {
    return m_location;
}
void OAIProjects_Get_200_response::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIProjects_Get_200_response::is_location_Set() const{
    return m_location_isSet;
}

bool OAIProjects_Get_200_response::is_location_Valid() const{
    return m_location_isValid;
}

QMap<QString, QString> OAIProjects_Get_200_response::getTags() const {
    return m_tags;
}
void OAIProjects_Get_200_response::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIProjects_Get_200_response::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIProjects_Get_200_response::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIProjects_Get_200_response::getId() const {
    return m_id;
}
void OAIProjects_Get_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjects_Get_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjects_Get_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIProjects_Get_200_response::getName() const {
    return m_name;
}
void OAIProjects_Get_200_response::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjects_Get_200_response::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjects_Get_200_response::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIProjects_Get_200_response::getType() const {
    return m_type;
}
void OAIProjects_Get_200_response::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIProjects_Get_200_response::is_type_Set() const{
    return m_type_isSet;
}

bool OAIProjects_Get_200_response::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIProjects_Get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjects_Get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_location_isValid && true;
}

} // namespace OpenAPI
