/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServices_ListSkus_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServices_ListSkus_200_response_value_inner::OAIServices_ListSkus_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServices_ListSkus_200_response_value_inner::OAIServices_ListSkus_200_response_value_inner() {
    this->initializeModel();
}

OAIServices_ListSkus_200_response_value_inner::~OAIServices_ListSkus_200_response_value_inner() {}

void OAIServices_ListSkus_200_response_value_inner::initializeModel() {

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_sku_isSet = false;
    m_sku_isValid = false;
}

void OAIServices_ListSkus_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServices_ListSkus_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_sku_isValid = ::OpenAPI::fromJsonValue(m_sku, json[QString("sku")]);
    m_sku_isSet = !json[QString("sku")].isNull() && m_sku_isValid;
}

QString OAIServices_ListSkus_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServices_ListSkus_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_capacity.isSet()) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_sku.isSet()) {
        obj.insert(QString("sku"), ::OpenAPI::toJsonValue(m_sku));
    }
    return obj;
}

OAIServices_ListSkus_200_response_value_inner_capacity OAIServices_ListSkus_200_response_value_inner::getCapacity() const {
    return m_capacity;
}
void OAIServices_ListSkus_200_response_value_inner::setCapacity(const OAIServices_ListSkus_200_response_value_inner_capacity &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIServices_ListSkus_200_response_value_inner::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIServices_ListSkus_200_response_value_inner::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QString OAIServices_ListSkus_200_response_value_inner::getResourceType() const {
    return m_resource_type;
}
void OAIServices_ListSkus_200_response_value_inner::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIServices_ListSkus_200_response_value_inner::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIServices_ListSkus_200_response_value_inner::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAIServices_ListSkus_200_response_value_inner_sku OAIServices_ListSkus_200_response_value_inner::getSku() const {
    return m_sku;
}
void OAIServices_ListSkus_200_response_value_inner::setSku(const OAIServices_ListSkus_200_response_value_inner_sku &sku) {
    m_sku = sku;
    m_sku_isSet = true;
}

bool OAIServices_ListSkus_200_response_value_inner::is_sku_Set() const{
    return m_sku_isSet;
}

bool OAIServices_ListSkus_200_response_value_inner::is_sku_Valid() const{
    return m_sku_isValid;
}

bool OAIServices_ListSkus_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServices_ListSkus_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
