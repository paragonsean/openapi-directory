/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServices_CheckStatus_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServices_CheckStatus_200_response::OAIServices_CheckStatus_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServices_CheckStatus_200_response::OAIServices_CheckStatus_200_response() {
    this->initializeModel();
}

OAIServices_CheckStatus_200_response::~OAIServices_CheckStatus_200_response() {}

void OAIServices_CheckStatus_200_response::initializeModel() {

    m_agent_version_isSet = false;
    m_agent_version_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_supported_task_types_isSet = false;
    m_supported_task_types_isValid = false;

    m_vm_size_isSet = false;
    m_vm_size_isValid = false;
}

void OAIServices_CheckStatus_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServices_CheckStatus_200_response::fromJsonObject(QJsonObject json) {

    m_agent_version_isValid = ::OpenAPI::fromJsonValue(m_agent_version, json[QString("agentVersion")]);
    m_agent_version_isSet = !json[QString("agentVersion")].isNull() && m_agent_version_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_supported_task_types_isValid = ::OpenAPI::fromJsonValue(m_supported_task_types, json[QString("supportedTaskTypes")]);
    m_supported_task_types_isSet = !json[QString("supportedTaskTypes")].isNull() && m_supported_task_types_isValid;

    m_vm_size_isValid = ::OpenAPI::fromJsonValue(m_vm_size, json[QString("vmSize")]);
    m_vm_size_isSet = !json[QString("vmSize")].isNull() && m_vm_size_isValid;
}

QString OAIServices_CheckStatus_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServices_CheckStatus_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_agent_version_isSet) {
        obj.insert(QString("agentVersion"), ::OpenAPI::toJsonValue(m_agent_version));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_supported_task_types.size() > 0) {
        obj.insert(QString("supportedTaskTypes"), ::OpenAPI::toJsonValue(m_supported_task_types));
    }
    if (m_vm_size_isSet) {
        obj.insert(QString("vmSize"), ::OpenAPI::toJsonValue(m_vm_size));
    }
    return obj;
}

QString OAIServices_CheckStatus_200_response::getAgentVersion() const {
    return m_agent_version;
}
void OAIServices_CheckStatus_200_response::setAgentVersion(const QString &agent_version) {
    m_agent_version = agent_version;
    m_agent_version_isSet = true;
}

bool OAIServices_CheckStatus_200_response::is_agent_version_Set() const{
    return m_agent_version_isSet;
}

bool OAIServices_CheckStatus_200_response::is_agent_version_Valid() const{
    return m_agent_version_isValid;
}

QString OAIServices_CheckStatus_200_response::getStatus() const {
    return m_status;
}
void OAIServices_CheckStatus_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIServices_CheckStatus_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIServices_CheckStatus_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QList<QString> OAIServices_CheckStatus_200_response::getSupportedTaskTypes() const {
    return m_supported_task_types;
}
void OAIServices_CheckStatus_200_response::setSupportedTaskTypes(const QList<QString> &supported_task_types) {
    m_supported_task_types = supported_task_types;
    m_supported_task_types_isSet = true;
}

bool OAIServices_CheckStatus_200_response::is_supported_task_types_Set() const{
    return m_supported_task_types_isSet;
}

bool OAIServices_CheckStatus_200_response::is_supported_task_types_Valid() const{
    return m_supported_task_types_isValid;
}

QString OAIServices_CheckStatus_200_response::getVmSize() const {
    return m_vm_size;
}
void OAIServices_CheckStatus_200_response::setVmSize(const QString &vm_size) {
    m_vm_size = vm_size;
    m_vm_size_isSet = true;
}

bool OAIServices_CheckStatus_200_response::is_vm_size_Set() const{
    return m_vm_size_isSet;
}

bool OAIServices_CheckStatus_200_response::is_vm_size_Valid() const{
    return m_vm_size_isValid;
}

bool OAIServices_CheckStatus_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_agent_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_task_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServices_CheckStatus_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
