/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjects_List_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjects_List_200_response_value_inner_properties::OAIProjects_List_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjects_List_200_response_value_inner_properties::OAIProjects_List_200_response_value_inner_properties() {
    this->initializeModel();
}

OAIProjects_List_200_response_value_inner_properties::~OAIProjects_List_200_response_value_inner_properties() {}

void OAIProjects_List_200_response_value_inner_properties::initializeModel() {

    m_creation_time_isSet = false;
    m_creation_time_isValid = false;

    m_databases_info_isSet = false;
    m_databases_info_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_source_connection_info_isSet = false;
    m_source_connection_info_isValid = false;

    m_source_platform_isSet = false;
    m_source_platform_isValid = false;

    m_target_connection_info_isSet = false;
    m_target_connection_info_isValid = false;

    m_target_platform_isSet = false;
    m_target_platform_isValid = false;
}

void OAIProjects_List_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjects_List_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_creation_time_isValid = ::OpenAPI::fromJsonValue(m_creation_time, json[QString("creationTime")]);
    m_creation_time_isSet = !json[QString("creationTime")].isNull() && m_creation_time_isValid;

    m_databases_info_isValid = ::OpenAPI::fromJsonValue(m_databases_info, json[QString("databasesInfo")]);
    m_databases_info_isSet = !json[QString("databasesInfo")].isNull() && m_databases_info_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_source_connection_info_isValid = ::OpenAPI::fromJsonValue(m_source_connection_info, json[QString("sourceConnectionInfo")]);
    m_source_connection_info_isSet = !json[QString("sourceConnectionInfo")].isNull() && m_source_connection_info_isValid;

    m_source_platform_isValid = ::OpenAPI::fromJsonValue(m_source_platform, json[QString("sourcePlatform")]);
    m_source_platform_isSet = !json[QString("sourcePlatform")].isNull() && m_source_platform_isValid;

    m_target_connection_info_isValid = ::OpenAPI::fromJsonValue(m_target_connection_info, json[QString("targetConnectionInfo")]);
    m_target_connection_info_isSet = !json[QString("targetConnectionInfo")].isNull() && m_target_connection_info_isValid;

    m_target_platform_isValid = ::OpenAPI::fromJsonValue(m_target_platform, json[QString("targetPlatform")]);
    m_target_platform_isSet = !json[QString("targetPlatform")].isNull() && m_target_platform_isValid;
}

QString OAIProjects_List_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjects_List_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_creation_time_isSet) {
        obj.insert(QString("creationTime"), ::OpenAPI::toJsonValue(m_creation_time));
    }
    if (m_databases_info.size() > 0) {
        obj.insert(QString("databasesInfo"), ::OpenAPI::toJsonValue(m_databases_info));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_source_connection_info.isSet()) {
        obj.insert(QString("sourceConnectionInfo"), ::OpenAPI::toJsonValue(m_source_connection_info));
    }
    if (m_source_platform_isSet) {
        obj.insert(QString("sourcePlatform"), ::OpenAPI::toJsonValue(m_source_platform));
    }
    if (m_target_connection_info.isSet()) {
        obj.insert(QString("targetConnectionInfo"), ::OpenAPI::toJsonValue(m_target_connection_info));
    }
    if (m_target_platform_isSet) {
        obj.insert(QString("targetPlatform"), ::OpenAPI::toJsonValue(m_target_platform));
    }
    return obj;
}

QDateTime OAIProjects_List_200_response_value_inner_properties::getCreationTime() const {
    return m_creation_time;
}
void OAIProjects_List_200_response_value_inner_properties::setCreationTime(const QDateTime &creation_time) {
    m_creation_time = creation_time;
    m_creation_time_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_creation_time_Set() const{
    return m_creation_time_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_creation_time_Valid() const{
    return m_creation_time_isValid;
}

QList<OAIProjects_List_200_response_value_inner_properties_databasesInfo_inner> OAIProjects_List_200_response_value_inner_properties::getDatabasesInfo() const {
    return m_databases_info;
}
void OAIProjects_List_200_response_value_inner_properties::setDatabasesInfo(const QList<OAIProjects_List_200_response_value_inner_properties_databasesInfo_inner> &databases_info) {
    m_databases_info = databases_info;
    m_databases_info_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_databases_info_Set() const{
    return m_databases_info_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_databases_info_Valid() const{
    return m_databases_info_isValid;
}

QString OAIProjects_List_200_response_value_inner_properties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIProjects_List_200_response_value_inner_properties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

OAIProjects_List_200_response_value_inner_properties_sourceConnectionInfo OAIProjects_List_200_response_value_inner_properties::getSourceConnectionInfo() const {
    return m_source_connection_info;
}
void OAIProjects_List_200_response_value_inner_properties::setSourceConnectionInfo(const OAIProjects_List_200_response_value_inner_properties_sourceConnectionInfo &source_connection_info) {
    m_source_connection_info = source_connection_info;
    m_source_connection_info_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_source_connection_info_Set() const{
    return m_source_connection_info_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_source_connection_info_Valid() const{
    return m_source_connection_info_isValid;
}

QString OAIProjects_List_200_response_value_inner_properties::getSourcePlatform() const {
    return m_source_platform;
}
void OAIProjects_List_200_response_value_inner_properties::setSourcePlatform(const QString &source_platform) {
    m_source_platform = source_platform;
    m_source_platform_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_source_platform_Set() const{
    return m_source_platform_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_source_platform_Valid() const{
    return m_source_platform_isValid;
}

OAIProjects_List_200_response_value_inner_properties_sourceConnectionInfo OAIProjects_List_200_response_value_inner_properties::getTargetConnectionInfo() const {
    return m_target_connection_info;
}
void OAIProjects_List_200_response_value_inner_properties::setTargetConnectionInfo(const OAIProjects_List_200_response_value_inner_properties_sourceConnectionInfo &target_connection_info) {
    m_target_connection_info = target_connection_info;
    m_target_connection_info_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_target_connection_info_Set() const{
    return m_target_connection_info_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_target_connection_info_Valid() const{
    return m_target_connection_info_isValid;
}

QString OAIProjects_List_200_response_value_inner_properties::getTargetPlatform() const {
    return m_target_platform;
}
void OAIProjects_List_200_response_value_inner_properties::setTargetPlatform(const QString &target_platform) {
    m_target_platform = target_platform;
    m_target_platform_isSet = true;
}

bool OAIProjects_List_200_response_value_inner_properties::is_target_platform_Set() const{
    return m_target_platform_isSet;
}

bool OAIProjects_List_200_response_value_inner_properties::is_target_platform_Valid() const{
    return m_target_platform_isValid;
}

bool OAIProjects_List_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_creation_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_databases_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_connection_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_connection_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_platform_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjects_List_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_source_platform_isValid && m_target_platform_isValid && true;
}

} // namespace OpenAPI
