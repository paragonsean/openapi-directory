/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceSkus_ListSkus_200_response_value_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceSkus_ListSkus_200_response_value_inner::OAIResourceSkus_ListSkus_200_response_value_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceSkus_ListSkus_200_response_value_inner::OAIResourceSkus_ListSkus_200_response_value_inner() {
    this->initializeModel();
}

OAIResourceSkus_ListSkus_200_response_value_inner::~OAIResourceSkus_ListSkus_200_response_value_inner() {}

void OAIResourceSkus_ListSkus_200_response_value_inner::initializeModel() {

    m_api_versions_isSet = false;
    m_api_versions_isValid = false;

    m_capabilities_isSet = false;
    m_capabilities_isValid = false;

    m_capacity_isSet = false;
    m_capacity_isValid = false;

    m_costs_isSet = false;
    m_costs_isValid = false;

    m_family_isSet = false;
    m_family_isValid = false;

    m_kind_isSet = false;
    m_kind_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_restrictions_isSet = false;
    m_restrictions_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_tier_isSet = false;
    m_tier_isValid = false;
}

void OAIResourceSkus_ListSkus_200_response_value_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceSkus_ListSkus_200_response_value_inner::fromJsonObject(QJsonObject json) {

    m_api_versions_isValid = ::OpenAPI::fromJsonValue(m_api_versions, json[QString("apiVersions")]);
    m_api_versions_isSet = !json[QString("apiVersions")].isNull() && m_api_versions_isValid;

    m_capabilities_isValid = ::OpenAPI::fromJsonValue(m_capabilities, json[QString("capabilities")]);
    m_capabilities_isSet = !json[QString("capabilities")].isNull() && m_capabilities_isValid;

    m_capacity_isValid = ::OpenAPI::fromJsonValue(m_capacity, json[QString("capacity")]);
    m_capacity_isSet = !json[QString("capacity")].isNull() && m_capacity_isValid;

    m_costs_isValid = ::OpenAPI::fromJsonValue(m_costs, json[QString("costs")]);
    m_costs_isSet = !json[QString("costs")].isNull() && m_costs_isValid;

    m_family_isValid = ::OpenAPI::fromJsonValue(m_family, json[QString("family")]);
    m_family_isSet = !json[QString("family")].isNull() && m_family_isValid;

    m_kind_isValid = ::OpenAPI::fromJsonValue(m_kind, json[QString("kind")]);
    m_kind_isSet = !json[QString("kind")].isNull() && m_kind_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_restrictions_isValid = ::OpenAPI::fromJsonValue(m_restrictions, json[QString("restrictions")]);
    m_restrictions_isSet = !json[QString("restrictions")].isNull() && m_restrictions_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_tier_isValid = ::OpenAPI::fromJsonValue(m_tier, json[QString("tier")]);
    m_tier_isSet = !json[QString("tier")].isNull() && m_tier_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceSkus_ListSkus_200_response_value_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_api_versions.size() > 0) {
        obj.insert(QString("apiVersions"), ::OpenAPI::toJsonValue(m_api_versions));
    }
    if (m_capabilities.size() > 0) {
        obj.insert(QString("capabilities"), ::OpenAPI::toJsonValue(m_capabilities));
    }
    if (m_capacity.isSet()) {
        obj.insert(QString("capacity"), ::OpenAPI::toJsonValue(m_capacity));
    }
    if (m_costs.size() > 0) {
        obj.insert(QString("costs"), ::OpenAPI::toJsonValue(m_costs));
    }
    if (m_family_isSet) {
        obj.insert(QString("family"), ::OpenAPI::toJsonValue(m_family));
    }
    if (m_kind_isSet) {
        obj.insert(QString("kind"), ::OpenAPI::toJsonValue(m_kind));
    }
    if (m_locations.size() > 0) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_restrictions.size() > 0) {
        obj.insert(QString("restrictions"), ::OpenAPI::toJsonValue(m_restrictions));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_tier_isSet) {
        obj.insert(QString("tier"), ::OpenAPI::toJsonValue(m_tier));
    }
    return obj;
}

QList<QString> OAIResourceSkus_ListSkus_200_response_value_inner::getApiVersions() const {
    return m_api_versions;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setApiVersions(const QList<QString> &api_versions) {
    m_api_versions = api_versions;
    m_api_versions_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_api_versions_Set() const{
    return m_api_versions_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_api_versions_Valid() const{
    return m_api_versions_isValid;
}

QList<OAIResourceSkus_ListSkus_200_response_value_inner_capabilities_inner> OAIResourceSkus_ListSkus_200_response_value_inner::getCapabilities() const {
    return m_capabilities;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setCapabilities(const QList<OAIResourceSkus_ListSkus_200_response_value_inner_capabilities_inner> &capabilities) {
    m_capabilities = capabilities;
    m_capabilities_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_capabilities_Set() const{
    return m_capabilities_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_capabilities_Valid() const{
    return m_capabilities_isValid;
}

OAIResourceSkus_ListSkus_200_response_value_inner_capacity OAIResourceSkus_ListSkus_200_response_value_inner::getCapacity() const {
    return m_capacity;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setCapacity(const OAIResourceSkus_ListSkus_200_response_value_inner_capacity &capacity) {
    m_capacity = capacity;
    m_capacity_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_capacity_Set() const{
    return m_capacity_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_capacity_Valid() const{
    return m_capacity_isValid;
}

QList<OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner> OAIResourceSkus_ListSkus_200_response_value_inner::getCosts() const {
    return m_costs;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setCosts(const QList<OAIResourceSkus_ListSkus_200_response_value_inner_costs_inner> &costs) {
    m_costs = costs;
    m_costs_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_costs_Set() const{
    return m_costs_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_costs_Valid() const{
    return m_costs_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::getFamily() const {
    return m_family;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setFamily(const QString &family) {
    m_family = family;
    m_family_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_family_Set() const{
    return m_family_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_family_Valid() const{
    return m_family_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::getKind() const {
    return m_kind;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setKind(const QString &kind) {
    m_kind = kind;
    m_kind_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_kind_Set() const{
    return m_kind_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_kind_Valid() const{
    return m_kind_isValid;
}

QList<QString> OAIResourceSkus_ListSkus_200_response_value_inner::getLocations() const {
    return m_locations;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setLocations(const QList<QString> &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::getName() const {
    return m_name;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_name_Set() const{
    return m_name_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::getResourceType() const {
    return m_resource_type;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QList<OAIResourceSkus_ListSkus_200_response_value_inner_restrictions_inner> OAIResourceSkus_ListSkus_200_response_value_inner::getRestrictions() const {
    return m_restrictions;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setRestrictions(const QList<OAIResourceSkus_ListSkus_200_response_value_inner_restrictions_inner> &restrictions) {
    m_restrictions = restrictions;
    m_restrictions_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_restrictions_Set() const{
    return m_restrictions_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_restrictions_Valid() const{
    return m_restrictions_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::getSize() const {
    return m_size;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_size_Set() const{
    return m_size_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIResourceSkus_ListSkus_200_response_value_inner::getTier() const {
    return m_tier;
}
void OAIResourceSkus_ListSkus_200_response_value_inner::setTier(const QString &tier) {
    m_tier = tier;
    m_tier_isSet = true;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_tier_Set() const{
    return m_tier_isSet;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::is_tier_Valid() const{
    return m_tier_isValid;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_api_versions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capabilities.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_capacity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_costs.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_restrictions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceSkus_ListSkus_200_response_value_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
