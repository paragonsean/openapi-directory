/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomOperationApi_H
#define OAI_OAICustomOperationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperations_List_default_response.h"
#include "OAIServices_CheckNameAvailability_200_response.h"
#include "OAIServices_CheckNameAvailability_request.h"
#include "OAIServices_CheckStatus_200_response.h"
#include "OAITasks_Get_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomOperationApi : public QObject {
    Q_OBJECT

public:
    OAICustomOperationApi(const int timeOut = 0);
    ~OAICustomOperationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  parameters OAIServices_CheckNameAvailability_request [required]
    */
    virtual void servicesCheckChildrenNameAvailability(const QString &subscription_id, const QString &group_name, const QString &api_version, const QString &service_name, const OAIServices_CheckNameAvailability_request &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesCheckStatus(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesStart(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesStop(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  task_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void tasksCancel(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &project_name, const QString &task_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void servicesCheckChildrenNameAvailabilityCallback(OAIHttpRequestWorker *worker);
    void servicesCheckStatusCallback(OAIHttpRequestWorker *worker);
    void servicesStartCallback(OAIHttpRequestWorker *worker);
    void servicesStopCallback(OAIHttpRequestWorker *worker);
    void tasksCancelCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void servicesCheckChildrenNameAvailabilitySignal(OAIServices_CheckNameAvailability_200_response summary);
    void servicesCheckStatusSignal(OAIServices_CheckStatus_200_response summary);
    void servicesStartSignal();
    void servicesStopSignal();
    void tasksCancelSignal(OAITasks_Get_200_response summary);


    void servicesCheckChildrenNameAvailabilitySignalFull(OAIHttpRequestWorker *worker, OAIServices_CheckNameAvailability_200_response summary);
    void servicesCheckStatusSignalFull(OAIHttpRequestWorker *worker, OAIServices_CheckStatus_200_response summary);
    void servicesStartSignalFull(OAIHttpRequestWorker *worker);
    void servicesStopSignalFull(OAIHttpRequestWorker *worker);
    void tasksCancelSignalFull(OAIHttpRequestWorker *worker, OAITasks_Get_200_response summary);

    Q_DECL_DEPRECATED_X("Use servicesCheckChildrenNameAvailabilitySignalError() instead")
    void servicesCheckChildrenNameAvailabilitySignalE(OAIServices_CheckNameAvailability_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCheckChildrenNameAvailabilitySignalError(OAIServices_CheckNameAvailability_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCheckStatusSignalError() instead")
    void servicesCheckStatusSignalE(OAIServices_CheckStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCheckStatusSignalError(OAIServices_CheckStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStartSignalError() instead")
    void servicesStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStopSignalError() instead")
    void servicesStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksCancelSignalError() instead")
    void tasksCancelSignalE(OAITasks_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksCancelSignalError(OAITasks_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use servicesCheckChildrenNameAvailabilitySignalErrorFull() instead")
    void servicesCheckChildrenNameAvailabilitySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCheckChildrenNameAvailabilitySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCheckStatusSignalErrorFull() instead")
    void servicesCheckStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCheckStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStartSignalErrorFull() instead")
    void servicesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStopSignalErrorFull() instead")
    void servicesStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksCancelSignalErrorFull() instead")
    void tasksCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
