/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2017-11-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperations_List_200_response_value_inner_display.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperations_List_200_response_value_inner_display::OAIOperations_List_200_response_value_inner_display(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperations_List_200_response_value_inner_display::OAIOperations_List_200_response_value_inner_display() {
    this->initializeModel();
}

OAIOperations_List_200_response_value_inner_display::~OAIOperations_List_200_response_value_inner_display() {}

void OAIOperations_List_200_response_value_inner_display::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_operation_isSet = false;
    m_operation_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;

    m_resource_isSet = false;
    m_resource_isValid = false;
}

void OAIOperations_List_200_response_value_inner_display::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperations_List_200_response_value_inner_display::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_operation_isValid = ::OpenAPI::fromJsonValue(m_operation, json[QString("operation")]);
    m_operation_isSet = !json[QString("operation")].isNull() && m_operation_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;

    m_resource_isValid = ::OpenAPI::fromJsonValue(m_resource, json[QString("resource")]);
    m_resource_isSet = !json[QString("resource")].isNull() && m_resource_isValid;
}

QString OAIOperations_List_200_response_value_inner_display::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperations_List_200_response_value_inner_display::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_operation_isSet) {
        obj.insert(QString("operation"), ::OpenAPI::toJsonValue(m_operation));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    if (m_resource_isSet) {
        obj.insert(QString("resource"), ::OpenAPI::toJsonValue(m_resource));
    }
    return obj;
}

QString OAIOperations_List_200_response_value_inner_display::getDescription() const {
    return m_description;
}
void OAIOperations_List_200_response_value_inner_display::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIOperations_List_200_response_value_inner_display::is_description_Set() const{
    return m_description_isSet;
}

bool OAIOperations_List_200_response_value_inner_display::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIOperations_List_200_response_value_inner_display::getOperation() const {
    return m_operation;
}
void OAIOperations_List_200_response_value_inner_display::setOperation(const QString &operation) {
    m_operation = operation;
    m_operation_isSet = true;
}

bool OAIOperations_List_200_response_value_inner_display::is_operation_Set() const{
    return m_operation_isSet;
}

bool OAIOperations_List_200_response_value_inner_display::is_operation_Valid() const{
    return m_operation_isValid;
}

QString OAIOperations_List_200_response_value_inner_display::getProvider() const {
    return m_provider;
}
void OAIOperations_List_200_response_value_inner_display::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIOperations_List_200_response_value_inner_display::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIOperations_List_200_response_value_inner_display::is_provider_Valid() const{
    return m_provider_isValid;
}

QString OAIOperations_List_200_response_value_inner_display::getResource() const {
    return m_resource;
}
void OAIOperations_List_200_response_value_inner_display::setResource(const QString &resource) {
    m_resource = resource;
    m_resource_isSet = true;
}

bool OAIOperations_List_200_response_value_inner_display::is_resource_Set() const{
    return m_resource_isSet;
}

bool OAIOperations_List_200_response_value_inner_display::is_resource_Valid() const{
    return m_resource_isValid;
}

bool OAIOperations_List_200_response_value_inner_display::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperations_List_200_response_value_inner_display::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
