# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.operations_list_default_response_error import OperationsListDefaultResponseError
from openapi_server import util


class TasksList200ResponseValueInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[OperationsListDefaultResponseError]=None, state: str=None, task_type: str=None):
        """TasksList200ResponseValueInnerProperties - a model defined in OpenAPI

        :param errors: The errors of this TasksList200ResponseValueInnerProperties.
        :param state: The state of this TasksList200ResponseValueInnerProperties.
        :param task_type: The task_type of this TasksList200ResponseValueInnerProperties.
        """
        self.openapi_types = {
            'errors': List[OperationsListDefaultResponseError],
            'state': str,
            'task_type': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'state': 'state',
            'task_type': 'taskType'
        }

        self._errors = errors
        self._state = state
        self._task_type = task_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TasksList200ResponseValueInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Tasks_List_200_response_value_inner_properties of this TasksList200ResponseValueInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this TasksList200ResponseValueInnerProperties.

        Array of errors. This is ignored if submitted.

        :return: The errors of this TasksList200ResponseValueInnerProperties.
        :rtype: List[OperationsListDefaultResponseError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this TasksList200ResponseValueInnerProperties.

        Array of errors. This is ignored if submitted.

        :param errors: The errors of this TasksList200ResponseValueInnerProperties.
        :type errors: List[OperationsListDefaultResponseError]
        """

        self._errors = errors

    @property
    def state(self):
        """Gets the state of this TasksList200ResponseValueInnerProperties.

        The state of the task. This is ignored if submitted.

        :return: The state of this TasksList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this TasksList200ResponseValueInnerProperties.

        The state of the task. This is ignored if submitted.

        :param state: The state of this TasksList200ResponseValueInnerProperties.
        :type state: str
        """
        allowed_values = ["Unknown", "Queued", "Running", "Canceled", "Succeeded", "Failed", "FailedInputValidation", "Faulted"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def task_type(self):
        """Gets the task_type of this TasksList200ResponseValueInnerProperties.

        Task type.

        :return: The task_type of this TasksList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._task_type

    @task_type.setter
    def task_type(self, task_type):
        """Sets the task_type of this TasksList200ResponseValueInnerProperties.

        Task type.

        :param task_type: The task_type of this TasksList200ResponseValueInnerProperties.
        :type task_type: str
        """
        if task_type is None:
            raise ValueError("Invalid value for `task_type`, must not be `None`")

        self._task_type = task_type
