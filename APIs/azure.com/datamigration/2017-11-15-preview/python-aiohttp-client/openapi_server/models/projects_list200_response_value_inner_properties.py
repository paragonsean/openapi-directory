# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.projects_list200_response_value_inner_properties_databases_info_inner import ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner
from openapi_server.models.projects_list200_response_value_inner_properties_source_connection_info import ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo
from openapi_server import util


class ProjectsList200ResponseValueInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creation_time: datetime=None, databases_info: List[ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner]=None, provisioning_state: str=None, source_connection_info: ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo=None, source_platform: str=None, target_connection_info: ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo=None, target_platform: str=None):
        """ProjectsList200ResponseValueInnerProperties - a model defined in OpenAPI

        :param creation_time: The creation_time of this ProjectsList200ResponseValueInnerProperties.
        :param databases_info: The databases_info of this ProjectsList200ResponseValueInnerProperties.
        :param provisioning_state: The provisioning_state of this ProjectsList200ResponseValueInnerProperties.
        :param source_connection_info: The source_connection_info of this ProjectsList200ResponseValueInnerProperties.
        :param source_platform: The source_platform of this ProjectsList200ResponseValueInnerProperties.
        :param target_connection_info: The target_connection_info of this ProjectsList200ResponseValueInnerProperties.
        :param target_platform: The target_platform of this ProjectsList200ResponseValueInnerProperties.
        """
        self.openapi_types = {
            'creation_time': datetime,
            'databases_info': List[ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner],
            'provisioning_state': str,
            'source_connection_info': ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo,
            'source_platform': str,
            'target_connection_info': ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo,
            'target_platform': str
        }

        self.attribute_map = {
            'creation_time': 'creationTime',
            'databases_info': 'databasesInfo',
            'provisioning_state': 'provisioningState',
            'source_connection_info': 'sourceConnectionInfo',
            'source_platform': 'sourcePlatform',
            'target_connection_info': 'targetConnectionInfo',
            'target_platform': 'targetPlatform'
        }

        self._creation_time = creation_time
        self._databases_info = databases_info
        self._provisioning_state = provisioning_state
        self._source_connection_info = source_connection_info
        self._source_platform = source_platform
        self._target_connection_info = target_connection_info
        self._target_platform = target_platform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsList200ResponseValueInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Projects_List_200_response_value_inner_properties of this ProjectsList200ResponseValueInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creation_time(self):
        """Gets the creation_time of this ProjectsList200ResponseValueInnerProperties.

        UTC Date and time when project was created

        :return: The creation_time of this ProjectsList200ResponseValueInnerProperties.
        :rtype: datetime
        """
        return self._creation_time

    @creation_time.setter
    def creation_time(self, creation_time):
        """Sets the creation_time of this ProjectsList200ResponseValueInnerProperties.

        UTC Date and time when project was created

        :param creation_time: The creation_time of this ProjectsList200ResponseValueInnerProperties.
        :type creation_time: datetime
        """

        self._creation_time = creation_time

    @property
    def databases_info(self):
        """Gets the databases_info of this ProjectsList200ResponseValueInnerProperties.

        List of DatabaseInfo

        :return: The databases_info of this ProjectsList200ResponseValueInnerProperties.
        :rtype: List[ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner]
        """
        return self._databases_info

    @databases_info.setter
    def databases_info(self, databases_info):
        """Sets the databases_info of this ProjectsList200ResponseValueInnerProperties.

        List of DatabaseInfo

        :param databases_info: The databases_info of this ProjectsList200ResponseValueInnerProperties.
        :type databases_info: List[ProjectsList200ResponseValueInnerPropertiesDatabasesInfoInner]
        """

        self._databases_info = databases_info

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ProjectsList200ResponseValueInnerProperties.

        The project's provisioning state

        :return: The provisioning_state of this ProjectsList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ProjectsList200ResponseValueInnerProperties.

        The project's provisioning state

        :param provisioning_state: The provisioning_state of this ProjectsList200ResponseValueInnerProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Deleting", "Succeeded"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def source_connection_info(self):
        """Gets the source_connection_info of this ProjectsList200ResponseValueInnerProperties.


        :return: The source_connection_info of this ProjectsList200ResponseValueInnerProperties.
        :rtype: ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo
        """
        return self._source_connection_info

    @source_connection_info.setter
    def source_connection_info(self, source_connection_info):
        """Sets the source_connection_info of this ProjectsList200ResponseValueInnerProperties.


        :param source_connection_info: The source_connection_info of this ProjectsList200ResponseValueInnerProperties.
        :type source_connection_info: ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo
        """

        self._source_connection_info = source_connection_info

    @property
    def source_platform(self):
        """Gets the source_platform of this ProjectsList200ResponseValueInnerProperties.

        Source platform of the project

        :return: The source_platform of this ProjectsList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._source_platform

    @source_platform.setter
    def source_platform(self, source_platform):
        """Sets the source_platform of this ProjectsList200ResponseValueInnerProperties.

        Source platform of the project

        :param source_platform: The source_platform of this ProjectsList200ResponseValueInnerProperties.
        :type source_platform: str
        """
        allowed_values = ["SQL", "Unknown"]  # noqa: E501
        if source_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `source_platform` ({0}), must be one of {1}"
                .format(source_platform, allowed_values)
            )

        self._source_platform = source_platform

    @property
    def target_connection_info(self):
        """Gets the target_connection_info of this ProjectsList200ResponseValueInnerProperties.


        :return: The target_connection_info of this ProjectsList200ResponseValueInnerProperties.
        :rtype: ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo
        """
        return self._target_connection_info

    @target_connection_info.setter
    def target_connection_info(self, target_connection_info):
        """Sets the target_connection_info of this ProjectsList200ResponseValueInnerProperties.


        :param target_connection_info: The target_connection_info of this ProjectsList200ResponseValueInnerProperties.
        :type target_connection_info: ProjectsList200ResponseValueInnerPropertiesSourceConnectionInfo
        """

        self._target_connection_info = target_connection_info

    @property
    def target_platform(self):
        """Gets the target_platform of this ProjectsList200ResponseValueInnerProperties.

        Target platform of the project

        :return: The target_platform of this ProjectsList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._target_platform

    @target_platform.setter
    def target_platform(self, target_platform):
        """Sets the target_platform of this ProjectsList200ResponseValueInnerProperties.

        Target platform of the project

        :param target_platform: The target_platform of this ProjectsList200ResponseValueInnerProperties.
        :type target_platform: str
        """
        allowed_values = ["SQLDB", "Unknown"]  # noqa: E501
        if target_platform not in allowed_values:
            raise ValueError(
                "Invalid value for `target_platform` ({0}), must be one of {1}"
                .format(target_platform, allowed_values)
            )

        self._target_platform = target_platform
