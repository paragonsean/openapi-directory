# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServicesList200ResponseValueInnerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, provisioning_state: str=None, public_key: str=None, virtual_subnet_id: str=None):
        """ServicesList200ResponseValueInnerProperties - a model defined in OpenAPI

        :param provisioning_state: The provisioning_state of this ServicesList200ResponseValueInnerProperties.
        :param public_key: The public_key of this ServicesList200ResponseValueInnerProperties.
        :param virtual_subnet_id: The virtual_subnet_id of this ServicesList200ResponseValueInnerProperties.
        """
        self.openapi_types = {
            'provisioning_state': str,
            'public_key': str,
            'virtual_subnet_id': str
        }

        self.attribute_map = {
            'provisioning_state': 'provisioningState',
            'public_key': 'publicKey',
            'virtual_subnet_id': 'virtualSubnetId'
        }

        self._provisioning_state = provisioning_state
        self._public_key = public_key
        self._virtual_subnet_id = virtual_subnet_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesList200ResponseValueInnerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Services_List_200_response_value_inner_properties of this ServicesList200ResponseValueInnerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ServicesList200ResponseValueInnerProperties.

        The resource's provisioning state

        :return: The provisioning_state of this ServicesList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ServicesList200ResponseValueInnerProperties.

        The resource's provisioning state

        :param provisioning_state: The provisioning_state of this ServicesList200ResponseValueInnerProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Accepted", "Deleting", "Deploying", "Stopped", "Stopping", "Starting", "FailedToStart", "FailedToStop", "Succeeded", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def public_key(self):
        """Gets the public_key of this ServicesList200ResponseValueInnerProperties.

        The public key of the service, used to encrypt secrets sent to the service

        :return: The public_key of this ServicesList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._public_key

    @public_key.setter
    def public_key(self, public_key):
        """Sets the public_key of this ServicesList200ResponseValueInnerProperties.

        The public key of the service, used to encrypt secrets sent to the service

        :param public_key: The public_key of this ServicesList200ResponseValueInnerProperties.
        :type public_key: str
        """

        self._public_key = public_key

    @property
    def virtual_subnet_id(self):
        """Gets the virtual_subnet_id of this ServicesList200ResponseValueInnerProperties.

        The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined

        :return: The virtual_subnet_id of this ServicesList200ResponseValueInnerProperties.
        :rtype: str
        """
        return self._virtual_subnet_id

    @virtual_subnet_id.setter
    def virtual_subnet_id(self, virtual_subnet_id):
        """Sets the virtual_subnet_id of this ServicesList200ResponseValueInnerProperties.

        The ID of the Microsoft.Network/virtualNetworks/subnets resource to which the service should be joined

        :param virtual_subnet_id: The virtual_subnet_id of this ServicesList200ResponseValueInnerProperties.
        :type virtual_subnet_id: str
        """
        if virtual_subnet_id is None:
            raise ValueError("Invalid value for `virtual_subnet_id`, must not be `None`")

        self._virtual_subnet_id = virtual_subnet_id
