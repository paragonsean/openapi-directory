/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServiceResourceApi_H
#define OAI_OAIServiceResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIOperations_List_default_response.h"
#include "OAIServices_CheckStatus_200_response.h"
#include "OAIServices_Get_200_response.h"
#include "OAIServices_ListSkus_200_response.h"
#include "OAIServices_List_200_response.h"
#include "OAITasks_List_200_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServiceResourceApi : public QObject {
    Q_OBJECT

public:
    OAIServiceResourceApi(const int timeOut = 0);
    ~OAIServiceResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesCheckStatus(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIServices_Get_200_response [required]
    */
    virtual void servicesCreateOrUpdate(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version, const OAIServices_Get_200_response &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  delete_running_tasks bool [optional]
    */
    virtual void servicesDelete(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &delete_running_tasks = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesGet(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListByResourceGroup(const QString &subscription_id, const QString &group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesListSkus(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesStart(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void servicesStop(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIServices_Get_200_response [required]
    */
    virtual void servicesUpdate(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &api_version, const OAIServices_Get_200_response &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  project_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  task_type QString [optional]
    */
    virtual void tasksList(const QString &subscription_id, const QString &group_name, const QString &service_name, const QString &project_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &task_type = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void servicesCheckStatusCallback(OAIHttpRequestWorker *worker);
    void servicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void servicesDeleteCallback(OAIHttpRequestWorker *worker);
    void servicesGetCallback(OAIHttpRequestWorker *worker);
    void servicesListCallback(OAIHttpRequestWorker *worker);
    void servicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void servicesListSkusCallback(OAIHttpRequestWorker *worker);
    void servicesStartCallback(OAIHttpRequestWorker *worker);
    void servicesStopCallback(OAIHttpRequestWorker *worker);
    void servicesUpdateCallback(OAIHttpRequestWorker *worker);
    void tasksListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void servicesCheckStatusSignal(OAIServices_CheckStatus_200_response summary);
    void servicesCreateOrUpdateSignal(OAIServices_Get_200_response summary);
    void servicesDeleteSignal();
    void servicesGetSignal(OAIServices_Get_200_response summary);
    void servicesListSignal(OAIServices_List_200_response summary);
    void servicesListByResourceGroupSignal(OAIServices_List_200_response summary);
    void servicesListSkusSignal(OAIServices_ListSkus_200_response summary);
    void servicesStartSignal();
    void servicesStopSignal();
    void servicesUpdateSignal(OAIServices_Get_200_response summary);
    void tasksListSignal(OAITasks_List_200_response summary);


    void servicesCheckStatusSignalFull(OAIHttpRequestWorker *worker, OAIServices_CheckStatus_200_response summary);
    void servicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServices_Get_200_response summary);
    void servicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void servicesGetSignalFull(OAIHttpRequestWorker *worker, OAIServices_Get_200_response summary);
    void servicesListSignalFull(OAIHttpRequestWorker *worker, OAIServices_List_200_response summary);
    void servicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIServices_List_200_response summary);
    void servicesListSkusSignalFull(OAIHttpRequestWorker *worker, OAIServices_ListSkus_200_response summary);
    void servicesStartSignalFull(OAIHttpRequestWorker *worker);
    void servicesStopSignalFull(OAIHttpRequestWorker *worker);
    void servicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServices_Get_200_response summary);
    void tasksListSignalFull(OAIHttpRequestWorker *worker, OAITasks_List_200_response summary);

    Q_DECL_DEPRECATED_X("Use servicesCheckStatusSignalError() instead")
    void servicesCheckStatusSignalE(OAIServices_CheckStatus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCheckStatusSignalError(OAIServices_CheckStatus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCreateOrUpdateSignalError() instead")
    void servicesCreateOrUpdateSignalE(OAIServices_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateOrUpdateSignalError(OAIServices_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalError() instead")
    void servicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalError() instead")
    void servicesGetSignalE(OAIServices_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalError(OAIServices_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSignalError() instead")
    void servicesListSignalE(OAIServices_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSignalError(OAIServices_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListByResourceGroupSignalError() instead")
    void servicesListByResourceGroupSignalE(OAIServices_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListByResourceGroupSignalError(OAIServices_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSkusSignalError() instead")
    void servicesListSkusSignalE(OAIServices_ListSkus_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSkusSignalError(OAIServices_ListSkus_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStartSignalError() instead")
    void servicesStartSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStartSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStopSignalError() instead")
    void servicesStopSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStopSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalError() instead")
    void servicesUpdateSignalE(OAIServices_Get_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalError(OAIServices_Get_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListSignalError() instead")
    void tasksListSignalE(OAITasks_List_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListSignalError(OAITasks_List_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use servicesCheckStatusSignalErrorFull() instead")
    void servicesCheckStatusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCheckStatusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCreateOrUpdateSignalErrorFull() instead")
    void servicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalErrorFull() instead")
    void servicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalErrorFull() instead")
    void servicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSignalErrorFull() instead")
    void servicesListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListByResourceGroupSignalErrorFull() instead")
    void servicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesListSkusSignalErrorFull() instead")
    void servicesListSkusSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesListSkusSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStartSignalErrorFull() instead")
    void servicesStartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesStopSignalErrorFull() instead")
    void servicesStopSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesStopSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalErrorFull() instead")
    void servicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tasksListSignalErrorFull() instead")
    void tasksListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tasksListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
