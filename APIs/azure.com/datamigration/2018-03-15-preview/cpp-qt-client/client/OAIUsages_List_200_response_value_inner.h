/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsages_List_200_response_value_inner.h
 *
 * Describes a quota for or usage details about a resource
 */

#ifndef OAIUsages_List_200_response_value_inner_H
#define OAIUsages_List_200_response_value_inner_H

#include <QJsonObject>

#include "OAIUsages_List_200_response_value_inner_name.h"
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIUsages_List_200_response_value_inner_name;

class OAIUsages_List_200_response_value_inner : public OAIObject {
public:
    OAIUsages_List_200_response_value_inner();
    OAIUsages_List_200_response_value_inner(QString json);
    ~OAIUsages_List_200_response_value_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getCurrentValue() const;
    void setCurrentValue(const double &current_value);
    bool is_current_value_Set() const;
    bool is_current_value_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    double getLimit() const;
    void setLimit(const double &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    OAIUsages_List_200_response_value_inner_name getName() const;
    void setName(const OAIUsages_List_200_response_value_inner_name &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getUnit() const;
    void setUnit(const QString &unit);
    bool is_unit_Set() const;
    bool is_unit_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_current_value;
    bool m_current_value_isSet;
    bool m_current_value_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    double m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    OAIUsages_List_200_response_value_inner_name m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_unit;
    bool m_unit_isSet;
    bool m_unit_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsages_List_200_response_value_inner)

#endif // OAIUsages_List_200_response_value_inner_H
