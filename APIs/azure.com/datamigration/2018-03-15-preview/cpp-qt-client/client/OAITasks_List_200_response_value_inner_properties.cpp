/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITasks_List_200_response_value_inner_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITasks_List_200_response_value_inner_properties::OAITasks_List_200_response_value_inner_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITasks_List_200_response_value_inner_properties::OAITasks_List_200_response_value_inner_properties() {
    this->initializeModel();
}

OAITasks_List_200_response_value_inner_properties::~OAITasks_List_200_response_value_inner_properties() {}

void OAITasks_List_200_response_value_inner_properties::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_task_type_isSet = false;
    m_task_type_isValid = false;
}

void OAITasks_List_200_response_value_inner_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITasks_List_200_response_value_inner_properties::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_task_type_isValid = ::OpenAPI::fromJsonValue(m_task_type, json[QString("taskType")]);
    m_task_type_isSet = !json[QString("taskType")].isNull() && m_task_type_isValid;
}

QString OAITasks_List_200_response_value_inner_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITasks_List_200_response_value_inner_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_task_type_isSet) {
        obj.insert(QString("taskType"), ::OpenAPI::toJsonValue(m_task_type));
    }
    return obj;
}

QList<OAIOperations_List_default_response_error> OAITasks_List_200_response_value_inner_properties::getErrors() const {
    return m_errors;
}
void OAITasks_List_200_response_value_inner_properties::setErrors(const QList<OAIOperations_List_default_response_error> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAITasks_List_200_response_value_inner_properties::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAITasks_List_200_response_value_inner_properties::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAITasks_List_200_response_value_inner_properties::getState() const {
    return m_state;
}
void OAITasks_List_200_response_value_inner_properties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAITasks_List_200_response_value_inner_properties::is_state_Set() const{
    return m_state_isSet;
}

bool OAITasks_List_200_response_value_inner_properties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAITasks_List_200_response_value_inner_properties::getTaskType() const {
    return m_task_type;
}
void OAITasks_List_200_response_value_inner_properties::setTaskType(const QString &task_type) {
    m_task_type = task_type;
    m_task_type_isSet = true;
}

bool OAITasks_List_200_response_value_inner_properties::is_task_type_Set() const{
    return m_task_type_isSet;
}

bool OAITasks_List_200_response_value_inner_properties::is_task_type_Valid() const{
    return m_task_type_isValid;
}

bool OAITasks_List_200_response_value_inner_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_task_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITasks_List_200_response_value_inner_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_task_type_isValid && true;
}

} // namespace OpenAPI
