/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServices_CheckNameAvailability_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServices_CheckNameAvailability_200_response::OAIServices_CheckNameAvailability_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServices_CheckNameAvailability_200_response::OAIServices_CheckNameAvailability_200_response() {
    this->initializeModel();
}

OAIServices_CheckNameAvailability_200_response::~OAIServices_CheckNameAvailability_200_response() {}

void OAIServices_CheckNameAvailability_200_response::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_available_isSet = false;
    m_name_available_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAIServices_CheckNameAvailability_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServices_CheckNameAvailability_200_response::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_available_isValid = ::OpenAPI::fromJsonValue(m_name_available, json[QString("nameAvailable")]);
    m_name_available_isSet = !json[QString("nameAvailable")].isNull() && m_name_available_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAIServices_CheckNameAvailability_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServices_CheckNameAvailability_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_available_isSet) {
        obj.insert(QString("nameAvailable"), ::OpenAPI::toJsonValue(m_name_available));
    }
    if (m_reason_isSet) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAIServices_CheckNameAvailability_200_response::getMessage() const {
    return m_message;
}
void OAIServices_CheckNameAvailability_200_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIServices_CheckNameAvailability_200_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIServices_CheckNameAvailability_200_response::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIServices_CheckNameAvailability_200_response::isNameAvailable() const {
    return m_name_available;
}
void OAIServices_CheckNameAvailability_200_response::setNameAvailable(const bool &name_available) {
    m_name_available = name_available;
    m_name_available_isSet = true;
}

bool OAIServices_CheckNameAvailability_200_response::is_name_available_Set() const{
    return m_name_available_isSet;
}

bool OAIServices_CheckNameAvailability_200_response::is_name_available_Valid() const{
    return m_name_available_isValid;
}

QString OAIServices_CheckNameAvailability_200_response::getReason() const {
    return m_reason;
}
void OAIServices_CheckNameAvailability_200_response::setReason(const QString &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAIServices_CheckNameAvailability_200_response::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAIServices_CheckNameAvailability_200_response::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAIServices_CheckNameAvailability_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_available_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServices_CheckNameAvailability_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
