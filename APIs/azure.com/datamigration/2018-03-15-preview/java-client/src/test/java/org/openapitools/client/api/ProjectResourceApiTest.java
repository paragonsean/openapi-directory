/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ProjectsGet200Response;
import org.openapitools.client.model.ProjectsList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProjectResourceApi
 */
@Disabled
public class ProjectResourceApiTest {

    private final ProjectResourceApi api = new ProjectResourceApi();

    /**
     * Create or update project
     *
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String apiVersion = null;
        ProjectsGet200Response parameters = null;
        ProjectsGet200Response response = api.projectsCreateOrUpdate(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete project
     *
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String apiVersion = null;
        Boolean deleteRunningTasks = null;
        api.projectsDelete(subscriptionId, groupName, serviceName, projectName, apiVersion, deleteRunningTasks);
        // TODO: test validations
    }

    /**
     * Get project information
     *
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String apiVersion = null;
        ProjectsGet200Response response = api.projectsGet(subscriptionId, groupName, serviceName, projectName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get projects in a service
     *
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsListTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String apiVersion = null;
        ProjectsList200Response response = api.projectsList(subscriptionId, groupName, serviceName, apiVersion);
        // TODO: test validations
    }

    /**
     * Update project
     *
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String groupName = null;
        String serviceName = null;
        String projectName = null;
        String apiVersion = null;
        ProjectsGet200Response parameters = null;
        ProjectsGet200Response response = api.projectsUpdate(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters);
        // TODO: test validations
    }

}
