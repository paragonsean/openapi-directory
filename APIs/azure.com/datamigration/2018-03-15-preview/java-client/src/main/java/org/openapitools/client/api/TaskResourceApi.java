/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.TasksGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaskResourceApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaskResourceApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaskResourceApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tasksCancel
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCancelCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}/cancel"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCancelValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksCancel(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksCancel(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksCancel(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksCancel(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksCancel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksCancel(Async)");
        }

        return tasksCancelCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, _callback);

    }

    /**
     * Cancel a task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it&#39;s currently queued or running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksCancel(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksCancelWithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Cancel a task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it&#39;s currently queued or running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksCancelWithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = tasksCancelValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Cancel a task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. This method cancels a task if it&#39;s currently queued or running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task canceled </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCancelAsync(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCancelValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksCreateOrUpdate
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateOrUpdateCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCreateOrUpdateValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tasksCreateOrUpdate(Async)");
        }

        return tasksCreateOrUpdateCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksCreateOrUpdate(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksCreateOrUpdateWithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksCreateOrUpdateWithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = tasksCreateOrUpdateValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateOrUpdateAsync(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCreateOrUpdateValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksDelete
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDeleteCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (deleteRunningTasks != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deleteRunningTasks", deleteRunningTasks));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksDeleteValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksDelete(Async)");
        }

        return tasksDeleteCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks, _callback);

    }

    /**
     * Delete task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it&#39;s running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public void tasksDelete(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        tasksDeleteWithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks);
    }

    /**
     * Delete task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it&#39;s running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tasksDeleteWithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks) throws ApiException {
        okhttp3.Call localVarCall = tasksDeleteValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it&#39;s running.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param deleteRunningTasks Delete the resource even if it contains running tasks (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource deleted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksDeleteAsync(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, Boolean deleteRunningTasks, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksDeleteValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, deleteRunningTasks, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGet
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGetValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGet(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksGet(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksGet(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksGet(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGet(Async)");
        }

        return tasksGetCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, _callback);

    }

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksGet(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksGetWithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksGetWithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task information (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGetAsync(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGetValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksUpdate
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksUpdateValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tasksUpdate(Async)");
        }

        return tasksUpdateCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksUpdate(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksUpdateWithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksUpdateWithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = tasksUpdateValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task resource updated </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksUpdateAsync(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksUpdateValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
