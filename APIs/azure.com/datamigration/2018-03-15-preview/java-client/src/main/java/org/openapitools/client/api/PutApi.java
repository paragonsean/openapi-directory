/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ProjectsGet200Response;
import org.openapitools.client.model.ServicesGet200Response;
import org.openapitools.client.model.TasksGet200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PutApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PutApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for projectsCreateOrUpdate_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateOrUpdate_1Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsCreateOrUpdate_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling projectsCreateOrUpdate_1(Async)");
        }

        return projectsCreateOrUpdate_1Call(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update project
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @return ProjectsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsGet200Response projectsCreateOrUpdate_1(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters) throws ApiException {
        ApiResponse<ProjectsGet200Response> localVarResp = projectsCreateOrUpdate_1WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update project
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @return ApiResponse&lt;ProjectsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsGet200Response> projectsCreateOrUpdate_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = projectsCreateOrUpdate_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update project (asynchronously)
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the project (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Project updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Project created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsCreateOrUpdate_1Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, ProjectsGet200Response parameters, final ApiCallback<ProjectsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsCreateOrUpdate_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesCreateOrUpdate_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateOrUpdate_1Call(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCreateOrUpdate_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling servicesCreateOrUpdate_1(Async)");
        }

        return servicesCreateOrUpdate_1Call(subscriptionId, groupName, serviceName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update DMS Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @return ServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesGet200Response servicesCreateOrUpdate_1(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters) throws ApiException {
        ApiResponse<ServicesGet200Response> localVarResp = servicesCreateOrUpdate_1WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update DMS Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @return ApiResponse&lt;ServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesGet200Response> servicesCreateOrUpdate_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = servicesCreateOrUpdate_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update DMS Instance (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \&quot;vm\&quot;, which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\&quot;ServiceIsBusy\&quot;). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the service (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Service updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Service created (use provisioningState) </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Update accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateOrUpdate_1Async(String subscriptionId, String groupName, String serviceName, String apiVersion, ServicesGet200Response parameters, final ApiCallback<ServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCreateOrUpdate_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksCreateOrUpdate_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateOrUpdate_1Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksCreateOrUpdate_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksCreateOrUpdate_1(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tasksCreateOrUpdate_1(Async)");
        }

        return tasksCreateOrUpdate_1Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);

    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksCreateOrUpdate_1(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksCreateOrUpdate_1WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksCreateOrUpdate_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters) throws ApiException {
        okhttp3.Call localVarCall = tasksCreateOrUpdate_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update task (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param parameters Information about the task (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Task updated </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Task created </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksCreateOrUpdate_1Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, TasksGet200Response parameters, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksCreateOrUpdate_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
