/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.OperationsList200Response;
import org.openapitools.client.model.OperationsListDefaultResponse;
import org.openapitools.client.model.ProjectsGet200Response;
import org.openapitools.client.model.ProjectsList200Response;
import org.openapitools.client.model.ResourceSkusListSkus200Response;
import org.openapitools.client.model.ServicesGet200Response;
import org.openapitools.client.model.ServicesList200Response;
import org.openapitools.client.model.ServicesListSkus200Response;
import org.openapitools.client.model.TasksGet200Response;
import org.openapitools.client.model.TasksList200Response;
import org.openapitools.client.model.UsagesList200Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for operationsList_0
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsList_0Call(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.DataMigration/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsList_0ValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList_0(Async)");
        }

        return operationsList_0Call(apiVersion, _callback);

    }

    /**
     * Get available resource provider actions (operations)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param apiVersion Version of the API (required)
     * @return OperationsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public OperationsList200Response operationsList_0(String apiVersion) throws ApiException {
        ApiResponse<OperationsList200Response> localVarResp = operationsList_0WithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get available resource provider actions (operations)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;OperationsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsList200Response> operationsList_0WithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsList_0ValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get available resource provider actions (operations) (asynchronously)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got action list </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsList_0Async(String apiVersion, final ApiCallback<OperationsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsList_0ValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGet_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGet_1Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGet_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsGet_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsGet_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsGet_1(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling projectsGet_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsGet_1(Async)");
        }

        return projectsGet_1Call(subscriptionId, groupName, serviceName, projectName, apiVersion, _callback);

    }

    /**
     * Get project information
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @return ProjectsGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsGet200Response projectsGet_1(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion) throws ApiException {
        ApiResponse<ProjectsGet200Response> localVarResp = projectsGet_1WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get project information
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ProjectsGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsGet200Response> projectsGet_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = projectsGet_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get project information (asynchronously)
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A project resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGet_1Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, final ApiCallback<ProjectsGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGet_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProjectsGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsList_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsList_1Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsList_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling projectsList_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling projectsList_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling projectsList_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling projectsList_1(Async)");
        }

        return projectsList_1Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Get projects in a service
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ProjectsList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ProjectsList200Response projectsList_1(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ProjectsList200Response> localVarResp = projectsList_1WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get projects in a service
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ProjectsList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProjectsList200Response> projectsList_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = projectsList_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProjectsList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get projects in a service (asynchronously)
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of projects </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsList_1Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ProjectsList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsList_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProjectsList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for resourceSkusListSkus_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceSkusListSkus_0Call(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/skus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call resourceSkusListSkus_0ValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling resourceSkusListSkus_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling resourceSkusListSkus_0(Async)");
        }

        return resourceSkusListSkus_0Call(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get supported SKUs
     * The skus action returns the list of SKUs that DMS supports.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ResourceSkusListSkus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceSkusListSkus200Response resourceSkusListSkus_0(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ResourceSkusListSkus200Response> localVarResp = resourceSkusListSkus_0WithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get supported SKUs
     * The skus action returns the list of SKUs that DMS supports.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ResourceSkusListSkus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceSkusListSkus200Response> resourceSkusListSkus_0WithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = resourceSkusListSkus_0ValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ResourceSkusListSkus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get supported SKUs (asynchronously)
     * The skus action returns the list of SKUs that DMS supports.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call resourceSkusListSkus_0Async(String subscriptionId, String apiVersion, final ApiCallback<ResourceSkusListSkus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = resourceSkusListSkus_0ValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ResourceSkusListSkus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGet_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGet_1Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGet_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesGet_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesGet_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesGet_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGet_1(Async)");
        }

        return servicesGet_1Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Get DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesGet200Response servicesGet_1(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServicesGet200Response> localVarResp = servicesGet_1WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesGet200Response> servicesGet_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesGet_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DMS Service Instance (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A service instance resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGet_1Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ServicesGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGet_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListByResourceGroup_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListByResourceGroup_1Call(String subscriptionId, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListByResourceGroup_1ValidateBeforeCall(String subscriptionId, String groupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListByResourceGroup_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesListByResourceGroup_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListByResourceGroup_1(Async)");
        }

        return servicesListByResourceGroup_1Call(subscriptionId, groupName, apiVersion, _callback);

    }

    /**
     * Get services in resource group
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesList200Response servicesListByResourceGroup_1(String subscriptionId, String groupName, String apiVersion) throws ApiException {
        ApiResponse<ServicesList200Response> localVarResp = servicesListByResourceGroup_1WithHttpInfo(subscriptionId, groupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get services in resource group
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesList200Response> servicesListByResourceGroup_1WithHttpInfo(String subscriptionId, String groupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListByResourceGroup_1ValidateBeforeCall(subscriptionId, groupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get services in resource group (asynchronously)
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListByResourceGroup_1Async(String subscriptionId, String groupName, String apiVersion, final ApiCallback<ServicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListByResourceGroup_1ValidateBeforeCall(subscriptionId, groupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListSkus_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListSkus_1Call(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListSkus_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListSkus_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling servicesListSkus_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling servicesListSkus_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListSkus_1(Async)");
        }

        return servicesListSkus_1Call(subscriptionId, groupName, serviceName, apiVersion, _callback);

    }

    /**
     * Get compatible SKUs
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesListSkus200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesListSkus200Response servicesListSkus_1(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        ApiResponse<ServicesListSkus200Response> localVarResp = servicesListSkus_1WithHttpInfo(subscriptionId, groupName, serviceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get compatible SKUs
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesListSkus200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesListSkus200Response> servicesListSkus_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesListSkus_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesListSkus200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get compatible SKUs (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got SKUs </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListSkus_1Async(String subscriptionId, String groupName, String serviceName, String apiVersion, final ApiCallback<ServicesListSkus200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListSkus_1ValidateBeforeCall(subscriptionId, groupName, serviceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesListSkus200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesList_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesList_1Call(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesList_1ValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesList_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesList_1(Async)");
        }

        return servicesList_1Call(subscriptionId, apiVersion, _callback);

    }

    /**
     * Get services in subscription
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ServicesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ServicesList200Response servicesList_1(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ServicesList200Response> localVarResp = servicesList_1WithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get services in subscription
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;ServicesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ServicesList200Response> servicesList_1WithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = servicesList_1ValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get services in subscription (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param subscriptionId Identifier of the subscription (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got services </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesList_1Async(String subscriptionId, String apiVersion, final ApiCallback<ServicesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesList_1ValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ServicesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksGet_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGet_1Call(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()))
            .replace("{" + "taskName" + "}", localVarApiClient.escapeString(taskName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksGet_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksGet_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksGet_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksGet_1(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksGet_1(Async)");
        }

        // verify the required parameter 'taskName' is set
        if (taskName == null) {
            throw new ApiException("Missing the required parameter 'taskName' when calling tasksGet_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksGet_1(Async)");
        }

        return tasksGet_1Call(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, _callback);

    }

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @return TasksGet200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksGet200Response tasksGet_1(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<TasksGet200Response> localVarResp = tasksGet_1WithHttpInfo(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @return ApiResponse&lt;TasksGet200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksGet200Response> tasksGet_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = tasksGet_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get task information (asynchronously)
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param taskName Name of the Task (required)
     * @param apiVersion Version of the API (required)
     * @param $expand Expand the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A task resource </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksGet_1Async(String subscriptionId, String groupName, String serviceName, String projectName, String taskName, String apiVersion, String $expand, final ApiCallback<TasksGet200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksGet_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<TasksGet200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tasksList_1
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksList_1Call(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "groupName" + "}", localVarApiClient.escapeString(groupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "projectName" + "}", localVarApiClient.escapeString(projectName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (taskType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taskType", taskType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tasksList_1ValidateBeforeCall(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tasksList_1(Async)");
        }

        // verify the required parameter 'groupName' is set
        if (groupName == null) {
            throw new ApiException("Missing the required parameter 'groupName' when calling tasksList_1(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tasksList_1(Async)");
        }

        // verify the required parameter 'projectName' is set
        if (projectName == null) {
            throw new ApiException("Missing the required parameter 'projectName' when calling tasksList_1(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tasksList_1(Async)");
        }

        return tasksList_1Call(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType, _callback);

    }

    /**
     * Get tasks in a service
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @return TasksList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public TasksList200Response tasksList_1(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType) throws ApiException {
        ApiResponse<TasksList200Response> localVarResp = tasksList_1WithHttpInfo(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType);
        return localVarResp.getData();
    }

    /**
     * Get tasks in a service
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @return ApiResponse&lt;TasksList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TasksList200Response> tasksList_1WithHttpInfo(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType) throws ApiException {
        okhttp3.Call localVarCall = tasksList_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType, null);
        Type localVarReturnType = new TypeToken<TasksList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get tasks in a service (asynchronously)
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param subscriptionId Identifier of the subscription (required)
     * @param groupName Name of the resource group (required)
     * @param serviceName Name of the service (required)
     * @param projectName Name of the project (required)
     * @param apiVersion Version of the API (required)
     * @param taskType Filter tasks by task type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Got tasks </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tasksList_1Async(String subscriptionId, String groupName, String serviceName, String projectName, String apiVersion, String taskType, final ApiCallback<TasksList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tasksList_1ValidateBeforeCall(subscriptionId, groupName, serviceName, projectName, apiVersion, taskType, _callback);
        Type localVarReturnType = new TypeToken<TasksList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for usagesList_0
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usagesList_0Call(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/usages"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "location" + "}", localVarApiClient.escapeString(location.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call usagesList_0ValidateBeforeCall(String subscriptionId, String location, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling usagesList_0(Async)");
        }

        // verify the required parameter 'location' is set
        if (location == null) {
            throw new ApiException("Missing the required parameter 'location' when calling usagesList_0(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling usagesList_0(Async)");
        }

        return usagesList_0Call(subscriptionId, location, apiVersion, _callback);

    }

    /**
     * Get resource quotas and usage information
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @return UsagesList200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public UsagesList200Response usagesList_0(String subscriptionId, String location, String apiVersion) throws ApiException {
        ApiResponse<UsagesList200Response> localVarResp = usagesList_0WithHttpInfo(subscriptionId, location, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get resource quotas and usage information
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @return ApiResponse&lt;UsagesList200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UsagesList200Response> usagesList_0WithHttpInfo(String subscriptionId, String location, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = usagesList_0ValidateBeforeCall(subscriptionId, location, apiVersion, null);
        Type localVarReturnType = new TypeToken<UsagesList200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get resource quotas and usage information (asynchronously)
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param subscriptionId Identifier of the subscription (required)
     * @param location The Azure region of the operation (required)
     * @param apiVersion Version of the API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Quotas returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call usagesList_0Async(String subscriptionId, String location, String apiVersion, final ApiCallback<UsagesList200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = usagesList_0ValidateBeforeCall(subscriptionId, location, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<UsagesList200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
