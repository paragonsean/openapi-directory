/*
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The name of the quota
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:16:11.347572-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsagesList200ResponseValueInnerName {
  public static final String SERIALIZED_NAME_LOCALIZED_VALUE = "localizedValue";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_VALUE)
  private String localizedValue;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private String value;

  public UsagesList200ResponseValueInnerName() {
  }

  public UsagesList200ResponseValueInnerName localizedValue(String localizedValue) {
    this.localizedValue = localizedValue;
    return this;
  }

  /**
   * The localized name of the quota
   * @return localizedValue
   */
  @javax.annotation.Nullable
  public String getLocalizedValue() {
    return localizedValue;
  }

  public void setLocalizedValue(String localizedValue) {
    this.localizedValue = localizedValue;
  }


  public UsagesList200ResponseValueInnerName value(String value) {
    this.value = value;
    return this;
  }

  /**
   * The unlocalized name (or ID) of the quota
   * @return value
   */
  @javax.annotation.Nullable
  public String getValue() {
    return value;
  }

  public void setValue(String value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsagesList200ResponseValueInnerName usagesList200ResponseValueInnerName = (UsagesList200ResponseValueInnerName) o;
    return Objects.equals(this.localizedValue, usagesList200ResponseValueInnerName.localizedValue) &&
        Objects.equals(this.value, usagesList200ResponseValueInnerName.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(localizedValue, value);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsagesList200ResponseValueInnerName {\n");
    sb.append("    localizedValue: ").append(toIndentedString(localizedValue)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("localizedValue");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsagesList200ResponseValueInnerName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsagesList200ResponseValueInnerName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsagesList200ResponseValueInnerName is not found in the empty JSON string", UsagesList200ResponseValueInnerName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsagesList200ResponseValueInnerName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsagesList200ResponseValueInnerName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("localizedValue") != null && !jsonObj.get("localizedValue").isJsonNull()) && !jsonObj.get("localizedValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedValue").toString()));
      }
      if ((jsonObj.get("value") != null && !jsonObj.get("value").isJsonNull()) && !jsonObj.get("value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("value").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsagesList200ResponseValueInnerName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsagesList200ResponseValueInnerName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsagesList200ResponseValueInnerName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsagesList200ResponseValueInnerName.class));

       return (TypeAdapter<T>) new TypeAdapter<UsagesList200ResponseValueInnerName>() {
           @Override
           public void write(JsonWriter out, UsagesList200ResponseValueInnerName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsagesList200ResponseValueInnerName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsagesList200ResponseValueInnerName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsagesList200ResponseValueInnerName
   * @throws IOException if the JSON string is invalid with respect to UsagesList200ResponseValueInnerName
   */
  public static UsagesList200ResponseValueInnerName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsagesList200ResponseValueInnerName.class);
  }

  /**
   * Convert an instance of UsagesList200ResponseValueInnerName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

