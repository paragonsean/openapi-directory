/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import OperationsList200Response from '../model/OperationsList200Response';
import OperationsListDefaultResponse from '../model/OperationsListDefaultResponse';
import ProjectsGet200Response from '../model/ProjectsGet200Response';
import ProjectsList200Response from '../model/ProjectsList200Response';
import ResourceSkusListSkus200Response from '../model/ResourceSkusListSkus200Response';
import ServicesCheckNameAvailability200Response from '../model/ServicesCheckNameAvailability200Response';
import ServicesCheckNameAvailabilityRequest from '../model/ServicesCheckNameAvailabilityRequest';
import ServicesGet200Response from '../model/ServicesGet200Response';
import ServicesList200Response from '../model/ServicesList200Response';
import ServicesListSkus200Response from '../model/ServicesListSkus200Response';
import TasksGet200Response from '../model/TasksGet200Response';
import TasksList200Response from '../model/TasksList200Response';
import UsagesList200Response from '../model/UsagesList200Response';

/**
* StandardOperation service.
* @module api/StandardOperationApi
* @version 2018-03-15-preview
*/
export default class StandardOperationApi {

    /**
    * Constructs a new StandardOperationApi. 
    * @alias module:api/StandardOperationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/StandardOperationApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get available resource provider actions (operations)
     * Lists all available actions exposed by the Data Migration Service resource provider.
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsList200Response}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsList200Response;
      return this.apiClient.callApi(
        '/providers/Microsoft.DataMigration/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsCreateOrUpdate_0 operation.
     * @callback module:api/StandardOperationApi~projectsCreateOrUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update project
     * The project resource is a nested resource representing a stored migration project. The PUT method creates a new project or updates an existing one.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} apiVersion Version of the API
     * @param {module:model/ProjectsGet200Response} parameters Information about the project
     * @param {module:api/StandardOperationApi~projectsCreateOrUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsGet200Response}
     */
    projectsCreateOrUpdate_0(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsCreateOrUpdate_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling projectsCreateOrUpdate_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling projectsCreateOrUpdate_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsCreateOrUpdate_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsCreateOrUpdate_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling projectsCreateOrUpdate_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsDelete_0 operation.
     * @callback module:api/StandardOperationApi~projectsDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete project
     * The project resource is a nested resource representing a stored migration project. The DELETE method deletes a project.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} apiVersion Version of the API
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteRunningTasks] Delete the resource even if it contains running tasks
     * @param {module:api/StandardOperationApi~projectsDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    projectsDelete_0(subscriptionId, groupName, serviceName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsDelete_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling projectsDelete_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling projectsDelete_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsDelete_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsDelete_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion,
        'deleteRunningTasks': opts['deleteRunningTasks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGet_0 operation.
     * @callback module:api/StandardOperationApi~projectsGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get project information
     * The project resource is a nested resource representing a stored migration project. The GET method retrieves information about a project.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~projectsGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsGet200Response}
     */
    projectsGet_0(subscriptionId, groupName, serviceName, projectName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsGet_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling projectsGet_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling projectsGet_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsGet_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsGet_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsList_0 operation.
     * @callback module:api/StandardOperationApi~projectsList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get projects in a service
     * The project resource is a nested resource representing a stored migration project. This method returns a list of projects owned by a service resource.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~projectsList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsList200Response}
     */
    projectsList_0(subscriptionId, groupName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsList_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling projectsList_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling projectsList_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsList_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProjectsList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsUpdate_0 operation.
     * @callback module:api/StandardOperationApi~projectsUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ProjectsGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update project
     * The project resource is a nested resource representing a stored migration project. The PATCH method updates an existing project.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} apiVersion Version of the API
     * @param {module:model/ProjectsGet200Response} parameters Information about the project
     * @param {module:api/StandardOperationApi~projectsUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProjectsGet200Response}
     */
    projectsUpdate_0(subscriptionId, groupName, serviceName, projectName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling projectsUpdate_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling projectsUpdate_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling projectsUpdate_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling projectsUpdate_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling projectsUpdate_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling projectsUpdate_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ProjectsGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the resourceSkusListSkus operation.
     * @callback module:api/StandardOperationApi~resourceSkusListSkusCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ResourceSkusListSkus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get supported SKUs
     * The skus action returns the list of SKUs that DMS supports.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~resourceSkusListSkusCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ResourceSkusListSkus200Response}
     */
    resourceSkusListSkus(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling resourceSkusListSkus");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling resourceSkusListSkus");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResourceSkusListSkus200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCheckNameAvailability operation.
     * @callback module:api/StandardOperationApi~servicesCheckNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesCheckNameAvailability200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check name validity and availability
     * This method checks whether a proposed top-level resource name is valid and available.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} apiVersion Version of the API
     * @param {String} location The Azure region of the operation
     * @param {module:model/ServicesCheckNameAvailabilityRequest} parameters Requested name to validate
     * @param {module:api/StandardOperationApi~servicesCheckNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesCheckNameAvailability200Response}
     */
    servicesCheckNameAvailability(subscriptionId, apiVersion, location, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCheckNameAvailability");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCheckNameAvailability");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling servicesCheckNameAvailability");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesCheckNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServicesCheckNameAvailability200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/checkNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesCreateOrUpdate_0 operation.
     * @callback module:api/StandardOperationApi~servicesCreateOrUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update DMS Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PUT method creates a new service or updates an existing one. When a service is updated, existing child resources (i.e. tasks) are unaffected. Services currently support a single kind, \"vm\", which refers to a VM-based service, although other kinds may be added in the future. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\"ServiceIsBusy\"). The provider will reply when successful with 200 OK or 201 Created. Long-running operations use the provisioningState property.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:model/ServicesGet200Response} parameters Information about the service
     * @param {module:api/StandardOperationApi~servicesCreateOrUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesGet200Response}
     */
    servicesCreateOrUpdate_0(subscriptionId, groupName, serviceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCreateOrUpdate_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesCreateOrUpdate_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesCreateOrUpdate_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCreateOrUpdate_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesCreateOrUpdate_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServicesGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesDelete_0 operation.
     * @callback module:api/StandardOperationApi~servicesDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The DELETE method deletes a service. Any running tasks will be canceled.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteRunningTasks] Delete the resource even if it contains running tasks
     * @param {module:api/StandardOperationApi~servicesDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    servicesDelete_0(subscriptionId, groupName, serviceName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesDelete_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesDelete_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesDelete_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesDelete_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion,
        'deleteRunningTasks': opts['deleteRunningTasks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesGet_0 operation.
     * @callback module:api/StandardOperationApi~servicesGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The GET method retrieves information about a service instance.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~servicesGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesGet200Response}
     */
    servicesGet_0(subscriptionId, groupName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesGet_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesGet_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesGet_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesGet_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicesGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListByResourceGroup_0 operation.
     * @callback module:api/StandardOperationApi~servicesListByResourceGroup_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get services in resource group
     * The Services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a resource group.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~servicesListByResourceGroup_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesList200Response}
     */
    servicesListByResourceGroup_0(subscriptionId, groupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesListByResourceGroup_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesListByResourceGroup_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListByResourceGroup_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicesList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesListSkus_0 operation.
     * @callback module:api/StandardOperationApi~servicesListSkus_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesListSkus200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get compatible SKUs
     * The services resource is the top-level resource that represents the Data Migration Service. The skus action returns the list of SKUs that a service resource can be updated to.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~servicesListSkus_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesListSkus200Response}
     */
    servicesListSkus_0(subscriptionId, groupName, serviceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesListSkus_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesListSkus_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesListSkus_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesListSkus_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicesListSkus200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/skus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesList_0 operation.
     * @callback module:api/StandardOperationApi~servicesList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get services in subscription
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of service resources in a subscription.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~servicesList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesList200Response}
     */
    servicesList_0(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesList_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesList_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ServicesList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/services', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the servicesUpdate_0 operation.
     * @callback module:api/StandardOperationApi~servicesUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/ServicesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update DMS Service Instance
     * The services resource is the top-level resource that represents the Data Migration Service. The PATCH method updates an existing service. This method can change the kind, SKU, and network of the service, but if tasks are currently running (i.e. the service is busy), this will fail with 400 Bad Request (\"ServiceIsBusy\").
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} apiVersion Version of the API
     * @param {module:model/ServicesGet200Response} parameters Information about the service
     * @param {module:api/StandardOperationApi~servicesUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ServicesGet200Response}
     */
    servicesUpdate_0(subscriptionId, groupName, serviceName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesUpdate_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling servicesUpdate_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling servicesUpdate_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesUpdate_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling servicesUpdate_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ServicesGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksCreateOrUpdate_0 operation.
     * @callback module:api/StandardOperationApi~tasksCreateOrUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PUT method creates a new task or updates an existing one, although since tasks have no mutable custom properties, there is little reason to update an exising one.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} taskName Name of the Task
     * @param {String} apiVersion Version of the API
     * @param {module:model/TasksGet200Response} parameters Information about the task
     * @param {module:api/StandardOperationApi~tasksCreateOrUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksGet200Response}
     */
    tasksCreateOrUpdate_0(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksCreateOrUpdate_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksCreateOrUpdate_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksCreateOrUpdate_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksCreateOrUpdate_0");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksCreateOrUpdate_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksCreateOrUpdate_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling tasksCreateOrUpdate_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TasksGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksDelete_0 operation.
     * @callback module:api/StandardOperationApi~tasksDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The DELETE method deletes a task, canceling it first if it's running.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} taskName Name of the Task
     * @param {String} apiVersion Version of the API
     * @param {Object} opts Optional parameters
     * @param {Boolean} [deleteRunningTasks] Delete the resource even if it contains running tasks
     * @param {module:api/StandardOperationApi~tasksDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    tasksDelete_0(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksDelete_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksDelete_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksDelete_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksDelete_0");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksDelete_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksDelete_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion,
        'deleteRunningTasks': opts['deleteRunningTasks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksGet_0 operation.
     * @callback module:api/StandardOperationApi~tasksGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get task information
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The GET method retrieves information about a task.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} taskName Name of the Task
     * @param {String} apiVersion Version of the API
     * @param {Object} opts Optional parameters
     * @param {String} [expand] Expand the response
     * @param {module:api/StandardOperationApi~tasksGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksGet200Response}
     */
    tasksGet_0(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksGet_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksGet_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksGet_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksGet_0");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksGet_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksGet_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksList_0 operation.
     * @callback module:api/StandardOperationApi~tasksList_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get tasks in a service
     * The services resource is the top-level resource that represents the Data Migration Service. This method returns a list of tasks owned by a service resource. Some tasks may have a status of Unknown, which indicates that an error occurred while querying the status of that task.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} apiVersion Version of the API
     * @param {Object} opts Optional parameters
     * @param {String} [taskType] Filter tasks by task type
     * @param {module:api/StandardOperationApi~tasksList_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksList200Response}
     */
    tasksList_0(subscriptionId, groupName, serviceName, projectName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksList_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksList_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksList_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksList_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksList_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName
      };
      let queryParams = {
        'api-version': apiVersion,
        'taskType': opts['taskType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TasksList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tasksUpdate_0 operation.
     * @callback module:api/StandardOperationApi~tasksUpdate_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TasksGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update task
     * The tasks resource is a nested, proxy-only resource representing work performed by a DMS instance. The PATCH method updates an existing task, but since tasks have no mutable custom properties, there is little reason to do so.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} groupName Name of the resource group
     * @param {String} serviceName Name of the service
     * @param {String} projectName Name of the project
     * @param {String} taskName Name of the Task
     * @param {String} apiVersion Version of the API
     * @param {module:model/TasksGet200Response} parameters Information about the task
     * @param {module:api/StandardOperationApi~tasksUpdate_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TasksGet200Response}
     */
    tasksUpdate_0(subscriptionId, groupName, serviceName, projectName, taskName, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling tasksUpdate_0");
      }
      // verify the required parameter 'groupName' is set
      if (groupName === undefined || groupName === null) {
        throw new Error("Missing the required parameter 'groupName' when calling tasksUpdate_0");
      }
      // verify the required parameter 'serviceName' is set
      if (serviceName === undefined || serviceName === null) {
        throw new Error("Missing the required parameter 'serviceName' when calling tasksUpdate_0");
      }
      // verify the required parameter 'projectName' is set
      if (projectName === undefined || projectName === null) {
        throw new Error("Missing the required parameter 'projectName' when calling tasksUpdate_0");
      }
      // verify the required parameter 'taskName' is set
      if (taskName === undefined || taskName === null) {
        throw new Error("Missing the required parameter 'taskName' when calling tasksUpdate_0");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tasksUpdate_0");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling tasksUpdate_0");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'groupName': groupName,
        'serviceName': serviceName,
        'projectName': projectName,
        'taskName': taskName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TasksGet200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{groupName}/providers/Microsoft.DataMigration/services/{serviceName}/projects/{projectName}/tasks/{taskName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usagesList operation.
     * @callback module:api/StandardOperationApi~usagesListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UsagesList200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get resource quotas and usage information
     * This method returns region-specific quotas and resource usage information for the Data Migration Service.
     * @param {String} subscriptionId Identifier of the subscription
     * @param {String} location The Azure region of the operation
     * @param {String} apiVersion Version of the API
     * @param {module:api/StandardOperationApi~usagesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UsagesList200Response}
     */
    usagesList(subscriptionId, location, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling usagesList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling usagesList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling usagesList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UsagesList200Response;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.DataMigration/locations/{location}/usages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
