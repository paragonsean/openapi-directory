/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureDataMigrationServiceResourceProvider);
  }
}(this, function(expect, AzureDataMigrationServiceResourceProvider) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureDataMigrationServiceResourceProvider.StandardOperationApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('StandardOperationApi', function() {
    describe('operationsList', function() {
      it('should call operationsList successfully', function(done) {
        //uncomment below and update the code to test operationsList
        //instance.operationsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsCreateOrUpdate_0', function() {
      it('should call projectsCreateOrUpdate_0 successfully', function(done) {
        //uncomment below and update the code to test projectsCreateOrUpdate_0
        //instance.projectsCreateOrUpdate_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsDelete_0', function() {
      it('should call projectsDelete_0 successfully', function(done) {
        //uncomment below and update the code to test projectsDelete_0
        //instance.projectsDelete_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsGet_0', function() {
      it('should call projectsGet_0 successfully', function(done) {
        //uncomment below and update the code to test projectsGet_0
        //instance.projectsGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsList_0', function() {
      it('should call projectsList_0 successfully', function(done) {
        //uncomment below and update the code to test projectsList_0
        //instance.projectsList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('projectsUpdate_0', function() {
      it('should call projectsUpdate_0 successfully', function(done) {
        //uncomment below and update the code to test projectsUpdate_0
        //instance.projectsUpdate_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('resourceSkusListSkus', function() {
      it('should call resourceSkusListSkus successfully', function(done) {
        //uncomment below and update the code to test resourceSkusListSkus
        //instance.resourceSkusListSkus(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesCheckNameAvailability', function() {
      it('should call servicesCheckNameAvailability successfully', function(done) {
        //uncomment below and update the code to test servicesCheckNameAvailability
        //instance.servicesCheckNameAvailability(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesCreateOrUpdate_0', function() {
      it('should call servicesCreateOrUpdate_0 successfully', function(done) {
        //uncomment below and update the code to test servicesCreateOrUpdate_0
        //instance.servicesCreateOrUpdate_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesDelete_0', function() {
      it('should call servicesDelete_0 successfully', function(done) {
        //uncomment below and update the code to test servicesDelete_0
        //instance.servicesDelete_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesGet_0', function() {
      it('should call servicesGet_0 successfully', function(done) {
        //uncomment below and update the code to test servicesGet_0
        //instance.servicesGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesListByResourceGroup_0', function() {
      it('should call servicesListByResourceGroup_0 successfully', function(done) {
        //uncomment below and update the code to test servicesListByResourceGroup_0
        //instance.servicesListByResourceGroup_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesListSkus_0', function() {
      it('should call servicesListSkus_0 successfully', function(done) {
        //uncomment below and update the code to test servicesListSkus_0
        //instance.servicesListSkus_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesList_0', function() {
      it('should call servicesList_0 successfully', function(done) {
        //uncomment below and update the code to test servicesList_0
        //instance.servicesList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesUpdate_0', function() {
      it('should call servicesUpdate_0 successfully', function(done) {
        //uncomment below and update the code to test servicesUpdate_0
        //instance.servicesUpdate_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksCreateOrUpdate_0', function() {
      it('should call tasksCreateOrUpdate_0 successfully', function(done) {
        //uncomment below and update the code to test tasksCreateOrUpdate_0
        //instance.tasksCreateOrUpdate_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksDelete_0', function() {
      it('should call tasksDelete_0 successfully', function(done) {
        //uncomment below and update the code to test tasksDelete_0
        //instance.tasksDelete_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksGet_0', function() {
      it('should call tasksGet_0 successfully', function(done) {
        //uncomment below and update the code to test tasksGet_0
        //instance.tasksGet_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksList_0', function() {
      it('should call tasksList_0 successfully', function(done) {
        //uncomment below and update the code to test tasksList_0
        //instance.tasksList_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksUpdate_0', function() {
      it('should call tasksUpdate_0 successfully', function(done) {
        //uncomment below and update the code to test tasksUpdate_0
        //instance.tasksUpdate_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('usagesList', function() {
      it('should call usagesList successfully', function(done) {
        //uncomment below and update the code to test usagesList
        //instance.usagesList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
