/**
 * Azure Data Migration Service Resource Provider
 * The Data Migration Service helps people migrate their data from on-premise database servers to Azure, or from older database software to newer software. The service manages one or more workers that are joined to a customer's virtual network, which is assumed to provide connectivity to their databases. To avoid frequent updates to the resource provider, data migration tasks are implemented by the resource provider in a generic way as task resources, each of which has a task type (which identifies the type of work to run), input, and output. The client is responsible for providing appropriate task type and inputs, which will be passed through unexamined to the machines that implement the functionality, and for understanding the output, which is passed back unexamined to the client.
 *
 * The version of the OpenAPI document: 2018-03-15-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AzureDataMigrationServiceResourceProvider);
  }
}(this, function(expect, AzureDataMigrationServiceResourceProvider) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AzureDataMigrationServiceResourceProvider.POSTApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('POSTApi', function() {
    describe('servicesCheckChildrenNameAvailability_0', function() {
      it('should call servicesCheckChildrenNameAvailability_0 successfully', function(done) {
        //uncomment below and update the code to test servicesCheckChildrenNameAvailability_0
        //instance.servicesCheckChildrenNameAvailability_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesCheckNameAvailability_0', function() {
      it('should call servicesCheckNameAvailability_0 successfully', function(done) {
        //uncomment below and update the code to test servicesCheckNameAvailability_0
        //instance.servicesCheckNameAvailability_0(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesCheckStatus_1', function() {
      it('should call servicesCheckStatus_1 successfully', function(done) {
        //uncomment below and update the code to test servicesCheckStatus_1
        //instance.servicesCheckStatus_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesStart_1', function() {
      it('should call servicesStart_1 successfully', function(done) {
        //uncomment below and update the code to test servicesStart_1
        //instance.servicesStart_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('servicesStop_1', function() {
      it('should call servicesStop_1 successfully', function(done) {
        //uncomment below and update the code to test servicesStop_1
        //instance.servicesStop_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('tasksCancel_1', function() {
      it('should call tasksCancel_1 successfully', function(done) {
        //uncomment below and update the code to test tasksCancel_1
        //instance.tasksCancel_1(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
