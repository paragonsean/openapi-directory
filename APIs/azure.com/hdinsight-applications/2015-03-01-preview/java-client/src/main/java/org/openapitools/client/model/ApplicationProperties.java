/*
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ApplicationGetEndpoint;
import org.openapitools.client.model.ApplicationGetHttpsEndpoint;
import org.openapitools.client.model.ApplicationPropertiesComputeProfile;
import org.openapitools.client.model.ApplicationPropertiesErrorsInner;
import org.openapitools.client.model.ApplicationPropertiesInstallScriptActionsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The HDInsight cluster application GET response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:19:25.528717-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationProperties {
  public static final String SERIALIZED_NAME_APPLICATION_STATE = "applicationState";
  @SerializedName(SERIALIZED_NAME_APPLICATION_STATE)
  private String applicationState;

  public static final String SERIALIZED_NAME_APPLICATION_TYPE = "applicationType";
  @SerializedName(SERIALIZED_NAME_APPLICATION_TYPE)
  private String applicationType;

  public static final String SERIALIZED_NAME_COMPUTE_PROFILE = "computeProfile";
  @SerializedName(SERIALIZED_NAME_COMPUTE_PROFILE)
  private ApplicationPropertiesComputeProfile computeProfile;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private String createdDate;

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  private List<ApplicationPropertiesErrorsInner> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_HTTPS_ENDPOINTS = "httpsEndpoints";
  @SerializedName(SERIALIZED_NAME_HTTPS_ENDPOINTS)
  private List<ApplicationGetHttpsEndpoint> httpsEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_INSTALL_SCRIPT_ACTIONS = "installScriptActions";
  @SerializedName(SERIALIZED_NAME_INSTALL_SCRIPT_ACTIONS)
  private List<ApplicationPropertiesInstallScriptActionsInner> installScriptActions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MARKETPLACE_IDENTIFIER = "marketplaceIdentifier";
  @SerializedName(SERIALIZED_NAME_MARKETPLACE_IDENTIFIER)
  private String marketplaceIdentifier;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_SSH_ENDPOINTS = "sshEndpoints";
  @SerializedName(SERIALIZED_NAME_SSH_ENDPOINTS)
  private List<ApplicationGetEndpoint> sshEndpoints = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNINSTALL_SCRIPT_ACTIONS = "uninstallScriptActions";
  @SerializedName(SERIALIZED_NAME_UNINSTALL_SCRIPT_ACTIONS)
  private List<ApplicationPropertiesInstallScriptActionsInner> uninstallScriptActions = new ArrayList<>();

  public ApplicationProperties() {
  }

  public ApplicationProperties(
     String applicationState, 
     String createdDate, 
     String marketplaceIdentifier, 
     String provisioningState
  ) {
    this();
    this.applicationState = applicationState;
    this.createdDate = createdDate;
    this.marketplaceIdentifier = marketplaceIdentifier;
    this.provisioningState = provisioningState;
  }

  /**
   * The application state.
   * @return applicationState
   */
  @javax.annotation.Nullable
  public String getApplicationState() {
    return applicationState;
  }



  public ApplicationProperties applicationType(String applicationType) {
    this.applicationType = applicationType;
    return this;
  }

  /**
   * The application type.
   * @return applicationType
   */
  @javax.annotation.Nullable
  public String getApplicationType() {
    return applicationType;
  }

  public void setApplicationType(String applicationType) {
    this.applicationType = applicationType;
  }


  public ApplicationProperties computeProfile(ApplicationPropertiesComputeProfile computeProfile) {
    this.computeProfile = computeProfile;
    return this;
  }

  /**
   * Get computeProfile
   * @return computeProfile
   */
  @javax.annotation.Nullable
  public ApplicationPropertiesComputeProfile getComputeProfile() {
    return computeProfile;
  }

  public void setComputeProfile(ApplicationPropertiesComputeProfile computeProfile) {
    this.computeProfile = computeProfile;
  }


  /**
   * The application create date time.
   * @return createdDate
   */
  @javax.annotation.Nullable
  public String getCreatedDate() {
    return createdDate;
  }



  public ApplicationProperties errors(List<ApplicationPropertiesErrorsInner> errors) {
    this.errors = errors;
    return this;
  }

  public ApplicationProperties addErrorsItem(ApplicationPropertiesErrorsInner errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * The list of errors.
   * @return errors
   */
  @javax.annotation.Nullable
  public List<ApplicationPropertiesErrorsInner> getErrors() {
    return errors;
  }

  public void setErrors(List<ApplicationPropertiesErrorsInner> errors) {
    this.errors = errors;
  }


  public ApplicationProperties httpsEndpoints(List<ApplicationGetHttpsEndpoint> httpsEndpoints) {
    this.httpsEndpoints = httpsEndpoints;
    return this;
  }

  public ApplicationProperties addHttpsEndpointsItem(ApplicationGetHttpsEndpoint httpsEndpointsItem) {
    if (this.httpsEndpoints == null) {
      this.httpsEndpoints = new ArrayList<>();
    }
    this.httpsEndpoints.add(httpsEndpointsItem);
    return this;
  }

  /**
   * The list of application HTTPS endpoints.
   * @return httpsEndpoints
   */
  @javax.annotation.Nullable
  public List<ApplicationGetHttpsEndpoint> getHttpsEndpoints() {
    return httpsEndpoints;
  }

  public void setHttpsEndpoints(List<ApplicationGetHttpsEndpoint> httpsEndpoints) {
    this.httpsEndpoints = httpsEndpoints;
  }


  public ApplicationProperties installScriptActions(List<ApplicationPropertiesInstallScriptActionsInner> installScriptActions) {
    this.installScriptActions = installScriptActions;
    return this;
  }

  public ApplicationProperties addInstallScriptActionsItem(ApplicationPropertiesInstallScriptActionsInner installScriptActionsItem) {
    if (this.installScriptActions == null) {
      this.installScriptActions = new ArrayList<>();
    }
    this.installScriptActions.add(installScriptActionsItem);
    return this;
  }

  /**
   * The list of install script actions.
   * @return installScriptActions
   */
  @javax.annotation.Nullable
  public List<ApplicationPropertiesInstallScriptActionsInner> getInstallScriptActions() {
    return installScriptActions;
  }

  public void setInstallScriptActions(List<ApplicationPropertiesInstallScriptActionsInner> installScriptActions) {
    this.installScriptActions = installScriptActions;
  }


  /**
   * The marketplace identifier.
   * @return marketplaceIdentifier
   */
  @javax.annotation.Nullable
  public String getMarketplaceIdentifier() {
    return marketplaceIdentifier;
  }



  /**
   * The provisioning state of the application.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public ApplicationProperties sshEndpoints(List<ApplicationGetEndpoint> sshEndpoints) {
    this.sshEndpoints = sshEndpoints;
    return this;
  }

  public ApplicationProperties addSshEndpointsItem(ApplicationGetEndpoint sshEndpointsItem) {
    if (this.sshEndpoints == null) {
      this.sshEndpoints = new ArrayList<>();
    }
    this.sshEndpoints.add(sshEndpointsItem);
    return this;
  }

  /**
   * The list of application SSH endpoints.
   * @return sshEndpoints
   */
  @javax.annotation.Nullable
  public List<ApplicationGetEndpoint> getSshEndpoints() {
    return sshEndpoints;
  }

  public void setSshEndpoints(List<ApplicationGetEndpoint> sshEndpoints) {
    this.sshEndpoints = sshEndpoints;
  }


  public ApplicationProperties uninstallScriptActions(List<ApplicationPropertiesInstallScriptActionsInner> uninstallScriptActions) {
    this.uninstallScriptActions = uninstallScriptActions;
    return this;
  }

  public ApplicationProperties addUninstallScriptActionsItem(ApplicationPropertiesInstallScriptActionsInner uninstallScriptActionsItem) {
    if (this.uninstallScriptActions == null) {
      this.uninstallScriptActions = new ArrayList<>();
    }
    this.uninstallScriptActions.add(uninstallScriptActionsItem);
    return this;
  }

  /**
   * The list of uninstall script actions.
   * @return uninstallScriptActions
   */
  @javax.annotation.Nullable
  public List<ApplicationPropertiesInstallScriptActionsInner> getUninstallScriptActions() {
    return uninstallScriptActions;
  }

  public void setUninstallScriptActions(List<ApplicationPropertiesInstallScriptActionsInner> uninstallScriptActions) {
    this.uninstallScriptActions = uninstallScriptActions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationProperties applicationProperties = (ApplicationProperties) o;
    return Objects.equals(this.applicationState, applicationProperties.applicationState) &&
        Objects.equals(this.applicationType, applicationProperties.applicationType) &&
        Objects.equals(this.computeProfile, applicationProperties.computeProfile) &&
        Objects.equals(this.createdDate, applicationProperties.createdDate) &&
        Objects.equals(this.errors, applicationProperties.errors) &&
        Objects.equals(this.httpsEndpoints, applicationProperties.httpsEndpoints) &&
        Objects.equals(this.installScriptActions, applicationProperties.installScriptActions) &&
        Objects.equals(this.marketplaceIdentifier, applicationProperties.marketplaceIdentifier) &&
        Objects.equals(this.provisioningState, applicationProperties.provisioningState) &&
        Objects.equals(this.sshEndpoints, applicationProperties.sshEndpoints) &&
        Objects.equals(this.uninstallScriptActions, applicationProperties.uninstallScriptActions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(applicationState, applicationType, computeProfile, createdDate, errors, httpsEndpoints, installScriptActions, marketplaceIdentifier, provisioningState, sshEndpoints, uninstallScriptActions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationProperties {\n");
    sb.append("    applicationState: ").append(toIndentedString(applicationState)).append("\n");
    sb.append("    applicationType: ").append(toIndentedString(applicationType)).append("\n");
    sb.append("    computeProfile: ").append(toIndentedString(computeProfile)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    httpsEndpoints: ").append(toIndentedString(httpsEndpoints)).append("\n");
    sb.append("    installScriptActions: ").append(toIndentedString(installScriptActions)).append("\n");
    sb.append("    marketplaceIdentifier: ").append(toIndentedString(marketplaceIdentifier)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sshEndpoints: ").append(toIndentedString(sshEndpoints)).append("\n");
    sb.append("    uninstallScriptActions: ").append(toIndentedString(uninstallScriptActions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("applicationState");
    openapiFields.add("applicationType");
    openapiFields.add("computeProfile");
    openapiFields.add("createdDate");
    openapiFields.add("errors");
    openapiFields.add("httpsEndpoints");
    openapiFields.add("installScriptActions");
    openapiFields.add("marketplaceIdentifier");
    openapiFields.add("provisioningState");
    openapiFields.add("sshEndpoints");
    openapiFields.add("uninstallScriptActions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationProperties is not found in the empty JSON string", ApplicationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("applicationState") != null && !jsonObj.get("applicationState").isJsonNull()) && !jsonObj.get("applicationState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationState").toString()));
      }
      if ((jsonObj.get("applicationType") != null && !jsonObj.get("applicationType").isJsonNull()) && !jsonObj.get("applicationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applicationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applicationType").toString()));
      }
      // validate the optional field `computeProfile`
      if (jsonObj.get("computeProfile") != null && !jsonObj.get("computeProfile").isJsonNull()) {
        ApplicationPropertiesComputeProfile.validateJsonElement(jsonObj.get("computeProfile"));
      }
      if ((jsonObj.get("createdDate") != null && !jsonObj.get("createdDate").isJsonNull()) && !jsonObj.get("createdDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createdDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createdDate").toString()));
      }
      if (jsonObj.get("errors") != null && !jsonObj.get("errors").isJsonNull()) {
        JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
        if (jsonArrayerrors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
          }

          // validate the optional field `errors` (array)
          for (int i = 0; i < jsonArrayerrors.size(); i++) {
            ApplicationPropertiesErrorsInner.validateJsonElement(jsonArrayerrors.get(i));
          };
        }
      }
      if (jsonObj.get("httpsEndpoints") != null && !jsonObj.get("httpsEndpoints").isJsonNull()) {
        JsonArray jsonArrayhttpsEndpoints = jsonObj.getAsJsonArray("httpsEndpoints");
        if (jsonArrayhttpsEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("httpsEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `httpsEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("httpsEndpoints").toString()));
          }

          // validate the optional field `httpsEndpoints` (array)
          for (int i = 0; i < jsonArrayhttpsEndpoints.size(); i++) {
            ApplicationGetHttpsEndpoint.validateJsonElement(jsonArrayhttpsEndpoints.get(i));
          };
        }
      }
      if (jsonObj.get("installScriptActions") != null && !jsonObj.get("installScriptActions").isJsonNull()) {
        JsonArray jsonArrayinstallScriptActions = jsonObj.getAsJsonArray("installScriptActions");
        if (jsonArrayinstallScriptActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("installScriptActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `installScriptActions` to be an array in the JSON string but got `%s`", jsonObj.get("installScriptActions").toString()));
          }

          // validate the optional field `installScriptActions` (array)
          for (int i = 0; i < jsonArrayinstallScriptActions.size(); i++) {
            ApplicationPropertiesInstallScriptActionsInner.validateJsonElement(jsonArrayinstallScriptActions.get(i));
          };
        }
      }
      if ((jsonObj.get("marketplaceIdentifier") != null && !jsonObj.get("marketplaceIdentifier").isJsonNull()) && !jsonObj.get("marketplaceIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `marketplaceIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("marketplaceIdentifier").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (jsonObj.get("sshEndpoints") != null && !jsonObj.get("sshEndpoints").isJsonNull()) {
        JsonArray jsonArraysshEndpoints = jsonObj.getAsJsonArray("sshEndpoints");
        if (jsonArraysshEndpoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("sshEndpoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `sshEndpoints` to be an array in the JSON string but got `%s`", jsonObj.get("sshEndpoints").toString()));
          }

          // validate the optional field `sshEndpoints` (array)
          for (int i = 0; i < jsonArraysshEndpoints.size(); i++) {
            ApplicationGetEndpoint.validateJsonElement(jsonArraysshEndpoints.get(i));
          };
        }
      }
      if (jsonObj.get("uninstallScriptActions") != null && !jsonObj.get("uninstallScriptActions").isJsonNull()) {
        JsonArray jsonArrayuninstallScriptActions = jsonObj.getAsJsonArray("uninstallScriptActions");
        if (jsonArrayuninstallScriptActions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("uninstallScriptActions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `uninstallScriptActions` to be an array in the JSON string but got `%s`", jsonObj.get("uninstallScriptActions").toString()));
          }

          // validate the optional field `uninstallScriptActions` (array)
          for (int i = 0; i < jsonArrayuninstallScriptActions.size(); i++) {
            ApplicationPropertiesInstallScriptActionsInner.validateJsonElement(jsonArrayuninstallScriptActions.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationProperties>() {
           @Override
           public void write(JsonWriter out, ApplicationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationProperties
   * @throws IOException if the JSON string is invalid with respect to ApplicationProperties
   */
  public static ApplicationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationProperties.class);
  }

  /**
   * Convert an instance of ApplicationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

