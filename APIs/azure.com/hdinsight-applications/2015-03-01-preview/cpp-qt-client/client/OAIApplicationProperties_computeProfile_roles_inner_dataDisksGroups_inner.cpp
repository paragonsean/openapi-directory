/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner() {
    this->initializeModel();
}

OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::~OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner() {}

void OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::initializeModel() {

    m_disk_size_gb_isSet = false;
    m_disk_size_gb_isValid = false;

    m_disks_per_node_isSet = false;
    m_disks_per_node_isValid = false;

    m_storage_account_type_isSet = false;
    m_storage_account_type_isValid = false;
}

void OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::fromJsonObject(QJsonObject json) {

    m_disk_size_gb_isValid = ::OpenAPI::fromJsonValue(m_disk_size_gb, json[QString("diskSizeGB")]);
    m_disk_size_gb_isSet = !json[QString("diskSizeGB")].isNull() && m_disk_size_gb_isValid;

    m_disks_per_node_isValid = ::OpenAPI::fromJsonValue(m_disks_per_node, json[QString("disksPerNode")]);
    m_disks_per_node_isSet = !json[QString("disksPerNode")].isNull() && m_disks_per_node_isValid;

    m_storage_account_type_isValid = ::OpenAPI::fromJsonValue(m_storage_account_type, json[QString("storageAccountType")]);
    m_storage_account_type_isSet = !json[QString("storageAccountType")].isNull() && m_storage_account_type_isValid;
}

QString OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_disk_size_gb_isSet) {
        obj.insert(QString("diskSizeGB"), ::OpenAPI::toJsonValue(m_disk_size_gb));
    }
    if (m_disks_per_node_isSet) {
        obj.insert(QString("disksPerNode"), ::OpenAPI::toJsonValue(m_disks_per_node));
    }
    if (m_storage_account_type_isSet) {
        obj.insert(QString("storageAccountType"), ::OpenAPI::toJsonValue(m_storage_account_type));
    }
    return obj;
}

qint32 OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::getDiskSizeGb() const {
    return m_disk_size_gb;
}
void OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::setDiskSizeGb(const qint32 &disk_size_gb) {
    m_disk_size_gb = disk_size_gb;
    m_disk_size_gb_isSet = true;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::is_disk_size_gb_Set() const{
    return m_disk_size_gb_isSet;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::is_disk_size_gb_Valid() const{
    return m_disk_size_gb_isValid;
}

qint32 OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::getDisksPerNode() const {
    return m_disks_per_node;
}
void OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::setDisksPerNode(const qint32 &disks_per_node) {
    m_disks_per_node = disks_per_node;
    m_disks_per_node_isSet = true;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::is_disks_per_node_Set() const{
    return m_disks_per_node_isSet;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::is_disks_per_node_Valid() const{
    return m_disks_per_node_isValid;
}

QString OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::getStorageAccountType() const {
    return m_storage_account_type;
}
void OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::setStorageAccountType(const QString &storage_account_type) {
    m_storage_account_type = storage_account_type;
    m_storage_account_type_isSet = true;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::is_storage_account_type_Set() const{
    return m_storage_account_type_isSet;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::is_storage_account_type_Valid() const{
    return m_storage_account_type_isValid;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_disk_size_gb_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks_per_node_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperties_computeProfile_roles_inner_dataDisksGroups_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
