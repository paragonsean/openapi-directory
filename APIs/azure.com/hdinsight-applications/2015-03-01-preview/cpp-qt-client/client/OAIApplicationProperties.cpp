/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2015-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperties::OAIApplicationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperties::OAIApplicationProperties() {
    this->initializeModel();
}

OAIApplicationProperties::~OAIApplicationProperties() {}

void OAIApplicationProperties::initializeModel() {

    m_application_state_isSet = false;
    m_application_state_isValid = false;

    m_application_type_isSet = false;
    m_application_type_isValid = false;

    m_compute_profile_isSet = false;
    m_compute_profile_isValid = false;

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_https_endpoints_isSet = false;
    m_https_endpoints_isValid = false;

    m_install_script_actions_isSet = false;
    m_install_script_actions_isValid = false;

    m_marketplace_identifier_isSet = false;
    m_marketplace_identifier_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_ssh_endpoints_isSet = false;
    m_ssh_endpoints_isValid = false;

    m_uninstall_script_actions_isSet = false;
    m_uninstall_script_actions_isValid = false;
}

void OAIApplicationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperties::fromJsonObject(QJsonObject json) {

    m_application_state_isValid = ::OpenAPI::fromJsonValue(m_application_state, json[QString("applicationState")]);
    m_application_state_isSet = !json[QString("applicationState")].isNull() && m_application_state_isValid;

    m_application_type_isValid = ::OpenAPI::fromJsonValue(m_application_type, json[QString("applicationType")]);
    m_application_type_isSet = !json[QString("applicationType")].isNull() && m_application_type_isValid;

    m_compute_profile_isValid = ::OpenAPI::fromJsonValue(m_compute_profile, json[QString("computeProfile")]);
    m_compute_profile_isSet = !json[QString("computeProfile")].isNull() && m_compute_profile_isValid;

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("createdDate")]);
    m_created_date_isSet = !json[QString("createdDate")].isNull() && m_created_date_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_https_endpoints_isValid = ::OpenAPI::fromJsonValue(m_https_endpoints, json[QString("httpsEndpoints")]);
    m_https_endpoints_isSet = !json[QString("httpsEndpoints")].isNull() && m_https_endpoints_isValid;

    m_install_script_actions_isValid = ::OpenAPI::fromJsonValue(m_install_script_actions, json[QString("installScriptActions")]);
    m_install_script_actions_isSet = !json[QString("installScriptActions")].isNull() && m_install_script_actions_isValid;

    m_marketplace_identifier_isValid = ::OpenAPI::fromJsonValue(m_marketplace_identifier, json[QString("marketplaceIdentifier")]);
    m_marketplace_identifier_isSet = !json[QString("marketplaceIdentifier")].isNull() && m_marketplace_identifier_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_ssh_endpoints_isValid = ::OpenAPI::fromJsonValue(m_ssh_endpoints, json[QString("sshEndpoints")]);
    m_ssh_endpoints_isSet = !json[QString("sshEndpoints")].isNull() && m_ssh_endpoints_isValid;

    m_uninstall_script_actions_isValid = ::OpenAPI::fromJsonValue(m_uninstall_script_actions, json[QString("uninstallScriptActions")]);
    m_uninstall_script_actions_isSet = !json[QString("uninstallScriptActions")].isNull() && m_uninstall_script_actions_isValid;
}

QString OAIApplicationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_application_state_isSet) {
        obj.insert(QString("applicationState"), ::OpenAPI::toJsonValue(m_application_state));
    }
    if (m_application_type_isSet) {
        obj.insert(QString("applicationType"), ::OpenAPI::toJsonValue(m_application_type));
    }
    if (m_compute_profile.isSet()) {
        obj.insert(QString("computeProfile"), ::OpenAPI::toJsonValue(m_compute_profile));
    }
    if (m_created_date_isSet) {
        obj.insert(QString("createdDate"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_https_endpoints.size() > 0) {
        obj.insert(QString("httpsEndpoints"), ::OpenAPI::toJsonValue(m_https_endpoints));
    }
    if (m_install_script_actions.size() > 0) {
        obj.insert(QString("installScriptActions"), ::OpenAPI::toJsonValue(m_install_script_actions));
    }
    if (m_marketplace_identifier_isSet) {
        obj.insert(QString("marketplaceIdentifier"), ::OpenAPI::toJsonValue(m_marketplace_identifier));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_ssh_endpoints.size() > 0) {
        obj.insert(QString("sshEndpoints"), ::OpenAPI::toJsonValue(m_ssh_endpoints));
    }
    if (m_uninstall_script_actions.size() > 0) {
        obj.insert(QString("uninstallScriptActions"), ::OpenAPI::toJsonValue(m_uninstall_script_actions));
    }
    return obj;
}

QString OAIApplicationProperties::getApplicationState() const {
    return m_application_state;
}
void OAIApplicationProperties::setApplicationState(const QString &application_state) {
    m_application_state = application_state;
    m_application_state_isSet = true;
}

bool OAIApplicationProperties::is_application_state_Set() const{
    return m_application_state_isSet;
}

bool OAIApplicationProperties::is_application_state_Valid() const{
    return m_application_state_isValid;
}

QString OAIApplicationProperties::getApplicationType() const {
    return m_application_type;
}
void OAIApplicationProperties::setApplicationType(const QString &application_type) {
    m_application_type = application_type;
    m_application_type_isSet = true;
}

bool OAIApplicationProperties::is_application_type_Set() const{
    return m_application_type_isSet;
}

bool OAIApplicationProperties::is_application_type_Valid() const{
    return m_application_type_isValid;
}

OAIApplicationProperties_computeProfile OAIApplicationProperties::getComputeProfile() const {
    return m_compute_profile;
}
void OAIApplicationProperties::setComputeProfile(const OAIApplicationProperties_computeProfile &compute_profile) {
    m_compute_profile = compute_profile;
    m_compute_profile_isSet = true;
}

bool OAIApplicationProperties::is_compute_profile_Set() const{
    return m_compute_profile_isSet;
}

bool OAIApplicationProperties::is_compute_profile_Valid() const{
    return m_compute_profile_isValid;
}

QString OAIApplicationProperties::getCreatedDate() const {
    return m_created_date;
}
void OAIApplicationProperties::setCreatedDate(const QString &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIApplicationProperties::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIApplicationProperties::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAIApplicationProperties_errors_inner> OAIApplicationProperties::getErrors() const {
    return m_errors;
}
void OAIApplicationProperties::setErrors(const QList<OAIApplicationProperties_errors_inner> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIApplicationProperties::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIApplicationProperties::is_errors_Valid() const{
    return m_errors_isValid;
}

QList<OAIApplicationGetHttpsEndpoint> OAIApplicationProperties::getHttpsEndpoints() const {
    return m_https_endpoints;
}
void OAIApplicationProperties::setHttpsEndpoints(const QList<OAIApplicationGetHttpsEndpoint> &https_endpoints) {
    m_https_endpoints = https_endpoints;
    m_https_endpoints_isSet = true;
}

bool OAIApplicationProperties::is_https_endpoints_Set() const{
    return m_https_endpoints_isSet;
}

bool OAIApplicationProperties::is_https_endpoints_Valid() const{
    return m_https_endpoints_isValid;
}

QList<OAIApplicationProperties_installScriptActions_inner> OAIApplicationProperties::getInstallScriptActions() const {
    return m_install_script_actions;
}
void OAIApplicationProperties::setInstallScriptActions(const QList<OAIApplicationProperties_installScriptActions_inner> &install_script_actions) {
    m_install_script_actions = install_script_actions;
    m_install_script_actions_isSet = true;
}

bool OAIApplicationProperties::is_install_script_actions_Set() const{
    return m_install_script_actions_isSet;
}

bool OAIApplicationProperties::is_install_script_actions_Valid() const{
    return m_install_script_actions_isValid;
}

QString OAIApplicationProperties::getMarketplaceIdentifier() const {
    return m_marketplace_identifier;
}
void OAIApplicationProperties::setMarketplaceIdentifier(const QString &marketplace_identifier) {
    m_marketplace_identifier = marketplace_identifier;
    m_marketplace_identifier_isSet = true;
}

bool OAIApplicationProperties::is_marketplace_identifier_Set() const{
    return m_marketplace_identifier_isSet;
}

bool OAIApplicationProperties::is_marketplace_identifier_Valid() const{
    return m_marketplace_identifier_isValid;
}

QString OAIApplicationProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIApplicationProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIApplicationProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIApplicationProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QList<OAIApplicationGetEndpoint> OAIApplicationProperties::getSshEndpoints() const {
    return m_ssh_endpoints;
}
void OAIApplicationProperties::setSshEndpoints(const QList<OAIApplicationGetEndpoint> &ssh_endpoints) {
    m_ssh_endpoints = ssh_endpoints;
    m_ssh_endpoints_isSet = true;
}

bool OAIApplicationProperties::is_ssh_endpoints_Set() const{
    return m_ssh_endpoints_isSet;
}

bool OAIApplicationProperties::is_ssh_endpoints_Valid() const{
    return m_ssh_endpoints_isValid;
}

QList<OAIApplicationProperties_installScriptActions_inner> OAIApplicationProperties::getUninstallScriptActions() const {
    return m_uninstall_script_actions;
}
void OAIApplicationProperties::setUninstallScriptActions(const QList<OAIApplicationProperties_installScriptActions_inner> &uninstall_script_actions) {
    m_uninstall_script_actions = uninstall_script_actions;
    m_uninstall_script_actions_isSet = true;
}

bool OAIApplicationProperties::is_uninstall_script_actions_Set() const{
    return m_uninstall_script_actions_isSet;
}

bool OAIApplicationProperties::is_uninstall_script_actions_Valid() const{
    return m_uninstall_script_actions_isValid;
}

bool OAIApplicationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_application_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_compute_profile.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_https_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_install_script_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_marketplace_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssh_endpoints.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_uninstall_script_actions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
