/**
 * HDInsightManagementClient
 * The HDInsight Management Client.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence() {
    this->initializeModel();
}

OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::~OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence() {}

void OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::initializeModel() {

    m_schedule_isSet = false;
    m_schedule_isValid = false;

    m_time_zone_isSet = false;
    m_time_zone_isValid = false;
}

void OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::fromJsonObject(QJsonObject json) {

    m_schedule_isValid = ::OpenAPI::fromJsonValue(m_schedule, json[QString("schedule")]);
    m_schedule_isSet = !json[QString("schedule")].isNull() && m_schedule_isValid;

    m_time_zone_isValid = ::OpenAPI::fromJsonValue(m_time_zone, json[QString("timeZone")]);
    m_time_zone_isSet = !json[QString("timeZone")].isNull() && m_time_zone_isValid;
}

QString OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::asJsonObject() const {
    QJsonObject obj;
    if (m_schedule.size() > 0) {
        obj.insert(QString("schedule"), ::OpenAPI::toJsonValue(m_schedule));
    }
    if (m_time_zone_isSet) {
        obj.insert(QString("timeZone"), ::OpenAPI::toJsonValue(m_time_zone));
    }
    return obj;
}

QList<OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence_schedule_inner> OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::getSchedule() const {
    return m_schedule;
}
void OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::setSchedule(const QList<OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence_schedule_inner> &schedule) {
    m_schedule = schedule;
    m_schedule_isSet = true;
}

bool OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::is_schedule_Set() const{
    return m_schedule_isSet;
}

bool OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::is_schedule_Valid() const{
    return m_schedule_isValid;
}

QString OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::getTimeZone() const {
    return m_time_zone;
}
void OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::setTimeZone(const QString &time_zone) {
    m_time_zone = time_zone;
    m_time_zone_isSet = true;
}

bool OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::is_time_zone_Set() const{
    return m_time_zone_isSet;
}

bool OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::is_time_zone_Valid() const{
    return m_time_zone_isValid;
}

bool OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_schedule.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_zone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIApplicationProperties_computeProfile_roles_inner_autoscale_recurrence::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
