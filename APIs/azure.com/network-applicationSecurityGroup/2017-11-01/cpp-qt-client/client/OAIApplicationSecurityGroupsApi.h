/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2017-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIApplicationSecurityGroupsApi_H
#define OAI_OAIApplicationSecurityGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIApplicationSecurityGroup.h"
#include "OAIApplicationSecurityGroupListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIApplicationSecurityGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIApplicationSecurityGroupsApi(const int timeOut = 0);
    ~OAIApplicationSecurityGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIApplicationSecurityGroup [required]
    */
    virtual void applicationSecurityGroupsCreateOrUpdate(const QString &resource_group_name, const QString &application_security_group_name, const QString &api_version, const QString &subscription_id, const OAIApplicationSecurityGroup &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applicationSecurityGroupsDelete(const QString &resource_group_name, const QString &application_security_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  application_security_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applicationSecurityGroupsGet(const QString &resource_group_name, const QString &application_security_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applicationSecurityGroupsList(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void applicationSecurityGroupsListAll(const QString &api_version, const QString &subscription_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void applicationSecurityGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void applicationSecurityGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void applicationSecurityGroupsGetCallback(OAIHttpRequestWorker *worker);
    void applicationSecurityGroupsListCallback(OAIHttpRequestWorker *worker);
    void applicationSecurityGroupsListAllCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void applicationSecurityGroupsCreateOrUpdateSignal(OAIApplicationSecurityGroup summary);
    void applicationSecurityGroupsDeleteSignal();
    void applicationSecurityGroupsGetSignal(OAIApplicationSecurityGroup summary);
    void applicationSecurityGroupsListSignal(OAIApplicationSecurityGroupListResult summary);
    void applicationSecurityGroupsListAllSignal(OAIApplicationSecurityGroupListResult summary);


    void applicationSecurityGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIApplicationSecurityGroup summary);
    void applicationSecurityGroupsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void applicationSecurityGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIApplicationSecurityGroup summary);
    void applicationSecurityGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIApplicationSecurityGroupListResult summary);
    void applicationSecurityGroupsListAllSignalFull(OAIHttpRequestWorker *worker, OAIApplicationSecurityGroupListResult summary);

    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsCreateOrUpdateSignalError() instead")
    void applicationSecurityGroupsCreateOrUpdateSignalE(OAIApplicationSecurityGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsCreateOrUpdateSignalError(OAIApplicationSecurityGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsDeleteSignalError() instead")
    void applicationSecurityGroupsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsGetSignalError() instead")
    void applicationSecurityGroupsGetSignalE(OAIApplicationSecurityGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsGetSignalError(OAIApplicationSecurityGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsListSignalError() instead")
    void applicationSecurityGroupsListSignalE(OAIApplicationSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsListSignalError(OAIApplicationSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsListAllSignalError() instead")
    void applicationSecurityGroupsListAllSignalE(OAIApplicationSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsListAllSignalError(OAIApplicationSecurityGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsCreateOrUpdateSignalErrorFull() instead")
    void applicationSecurityGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsDeleteSignalErrorFull() instead")
    void applicationSecurityGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsGetSignalErrorFull() instead")
    void applicationSecurityGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsListSignalErrorFull() instead")
    void applicationSecurityGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use applicationSecurityGroupsListAllSignalErrorFull() instead")
    void applicationSecurityGroupsListAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void applicationSecurityGroupsListAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
