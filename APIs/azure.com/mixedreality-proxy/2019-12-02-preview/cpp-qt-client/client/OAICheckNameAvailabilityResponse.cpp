/**
 * Mixed Reality
 * Mixed Reality Resource Provider Proxy API
 *
 * The version of the OpenAPI document: 2019-12-02-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICheckNameAvailabilityResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICheckNameAvailabilityResponse::OAICheckNameAvailabilityResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICheckNameAvailabilityResponse::OAICheckNameAvailabilityResponse() {
    this->initializeModel();
}

OAICheckNameAvailabilityResponse::~OAICheckNameAvailabilityResponse() {}

void OAICheckNameAvailabilityResponse::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_available_isSet = false;
    m_name_available_isValid = false;

    m_reason_isSet = false;
    m_reason_isValid = false;
}

void OAICheckNameAvailabilityResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICheckNameAvailabilityResponse::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_available_isValid = ::OpenAPI::fromJsonValue(m_name_available, json[QString("nameAvailable")]);
    m_name_available_isSet = !json[QString("nameAvailable")].isNull() && m_name_available_isValid;

    m_reason_isValid = ::OpenAPI::fromJsonValue(m_reason, json[QString("reason")]);
    m_reason_isSet = !json[QString("reason")].isNull() && m_reason_isValid;
}

QString OAICheckNameAvailabilityResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICheckNameAvailabilityResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_available.isSet()) {
        obj.insert(QString("nameAvailable"), ::OpenAPI::toJsonValue(m_name_available));
    }
    if (m_reason.isSet()) {
        obj.insert(QString("reason"), ::OpenAPI::toJsonValue(m_reason));
    }
    return obj;
}

QString OAICheckNameAvailabilityResponse::getMessage() const {
    return m_message;
}
void OAICheckNameAvailabilityResponse::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICheckNameAvailabilityResponse::is_message_Set() const{
    return m_message_isSet;
}

bool OAICheckNameAvailabilityResponse::is_message_Valid() const{
    return m_message_isValid;
}

OAINameAvailability OAICheckNameAvailabilityResponse::getNameAvailable() const {
    return m_name_available;
}
void OAICheckNameAvailabilityResponse::setNameAvailable(const OAINameAvailability &name_available) {
    m_name_available = name_available;
    m_name_available_isSet = true;
}

bool OAICheckNameAvailabilityResponse::is_name_available_Set() const{
    return m_name_available_isSet;
}

bool OAICheckNameAvailabilityResponse::is_name_available_Valid() const{
    return m_name_available_isValid;
}

OAINameUnavailableReason OAICheckNameAvailabilityResponse::getReason() const {
    return m_reason;
}
void OAICheckNameAvailabilityResponse::setReason(const OAINameUnavailableReason &reason) {
    m_reason = reason;
    m_reason_isSet = true;
}

bool OAICheckNameAvailabilityResponse::is_reason_Set() const{
    return m_reason_isSet;
}

bool OAICheckNameAvailabilityResponse::is_reason_Valid() const{
    return m_reason_isValid;
}

bool OAICheckNameAvailabilityResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_available.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICheckNameAvailabilityResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_name_available_isValid && true;
}

} // namespace OpenAPI
