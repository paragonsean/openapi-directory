/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files, encryption keys, active directory administrator and configurations.
 *
 * The version of the OpenAPI document: 2020-01-01-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import CloudError from './model/CloudError';
import CloudErrorBody from './model/CloudErrorBody';
import ProxyResource from './model/ProxyResource';
import ServerKey from './model/ServerKey';
import ServerKeyListResult from './model/ServerKeyListResult';
import ServerKeyProperties from './model/ServerKeyProperties';
import ServerKeysApi from './api/ServerKeysApi';


/**
* The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files, encryption keys, active directory administrator and configurations..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var MySqlManagementClient = require('index'); // See note below*.
* var xxxSvc = new MySqlManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new MySqlManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new MySqlManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new MySqlManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2020-01-01-privatepreview
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The CloudError model constructor.
     * @property {module:model/CloudError}
     */
    CloudError,

    /**
     * The CloudErrorBody model constructor.
     * @property {module:model/CloudErrorBody}
     */
    CloudErrorBody,

    /**
     * The ProxyResource model constructor.
     * @property {module:model/ProxyResource}
     */
    ProxyResource,

    /**
     * The ServerKey model constructor.
     * @property {module:model/ServerKey}
     */
    ServerKey,

    /**
     * The ServerKeyListResult model constructor.
     * @property {module:model/ServerKeyListResult}
     */
    ServerKeyListResult,

    /**
     * The ServerKeyProperties model constructor.
     * @property {module:model/ServerKeyProperties}
     */
    ServerKeyProperties,

    /**
    * The ServerKeysApi service constructor.
    * @property {module:api/ServerKeysApi}
    */
    ServerKeysApi
};
