/**
 * MySQLManagementClient
 * The Microsoft Azure management API provides create, read, update, and delete functionality for Azure MySQL resources including servers, databases, firewall rules, VNET rules, security alert policies, log files, encryption keys, active directory administrator and configurations.
 *
 * The version of the OpenAPI document: 2020-01-01-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIServerKeysApi_H
#define OAI_OAIServerKeysApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICloudError.h"
#include "OAIServerKey.h"
#include "OAIServerKeyListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIServerKeysApi : public QObject {
    Q_OBJECT

public:
    OAIServerKeysApi(const int timeOut = 0);
    ~OAIServerKeysApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIServerKey [required]
    */
    virtual void serverKeysCreateOrUpdate(const QString &resource_group_name, const QString &server_name, const QString &key_name, const QString &subscription_id, const QString &api_version, const OAIServerKey &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverKeysDelete(const QString &resource_group_name, const QString &server_name, const QString &key_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  key_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverKeysGet(const QString &resource_group_name, const QString &server_name, const QString &key_name, const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void serverKeysListByInstance(const QString &resource_group_name, const QString &server_name, const QString &subscription_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void serverKeysCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void serverKeysDeleteCallback(OAIHttpRequestWorker *worker);
    void serverKeysGetCallback(OAIHttpRequestWorker *worker);
    void serverKeysListByInstanceCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void serverKeysCreateOrUpdateSignal(OAIServerKey summary);
    void serverKeysDeleteSignal();
    void serverKeysGetSignal(OAIServerKey summary);
    void serverKeysListByInstanceSignal(OAIServerKeyListResult summary);


    void serverKeysCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServerKey summary);
    void serverKeysDeleteSignalFull(OAIHttpRequestWorker *worker);
    void serverKeysGetSignalFull(OAIHttpRequestWorker *worker, OAIServerKey summary);
    void serverKeysListByInstanceSignalFull(OAIHttpRequestWorker *worker, OAIServerKeyListResult summary);

    Q_DECL_DEPRECATED_X("Use serverKeysCreateOrUpdateSignalError() instead")
    void serverKeysCreateOrUpdateSignalE(OAIServerKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysCreateOrUpdateSignalError(OAIServerKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverKeysDeleteSignalError() instead")
    void serverKeysDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverKeysGetSignalError() instead")
    void serverKeysGetSignalE(OAIServerKey summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysGetSignalError(OAIServerKey summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverKeysListByInstanceSignalError() instead")
    void serverKeysListByInstanceSignalE(OAIServerKeyListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysListByInstanceSignalError(OAIServerKeyListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use serverKeysCreateOrUpdateSignalErrorFull() instead")
    void serverKeysCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverKeysDeleteSignalErrorFull() instead")
    void serverKeysDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverKeysGetSignalErrorFull() instead")
    void serverKeysGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use serverKeysListByInstanceSignalErrorFull() instead")
    void serverKeysListByInstanceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void serverKeysListByInstanceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
