# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiListByTags200ResponseValueInnerApi(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, path: str=None, protocols: List[str]=None, service_url: str=None):
        """ApiListByTags200ResponseValueInnerApi - a model defined in OpenAPI

        :param id: The id of this ApiListByTags200ResponseValueInnerApi.
        :param name: The name of this ApiListByTags200ResponseValueInnerApi.
        :param path: The path of this ApiListByTags200ResponseValueInnerApi.
        :param protocols: The protocols of this ApiListByTags200ResponseValueInnerApi.
        :param service_url: The service_url of this ApiListByTags200ResponseValueInnerApi.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'path': str,
            'protocols': List[str],
            'service_url': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'protocols': 'protocols',
            'service_url': 'serviceUrl'
        }

        self._id = id
        self._name = name
        self._path = path
        self._protocols = protocols
        self._service_url = service_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ApiListByTags200ResponseValueInnerApi':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Api_ListByTags_200_response_value_inner_api of this ApiListByTags200ResponseValueInnerApi.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ApiListByTags200ResponseValueInnerApi.

        API identifier in the form /apis/{apiId}.

        :return: The id of this ApiListByTags200ResponseValueInnerApi.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ApiListByTags200ResponseValueInnerApi.

        API identifier in the form /apis/{apiId}.

        :param id: The id of this ApiListByTags200ResponseValueInnerApi.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ApiListByTags200ResponseValueInnerApi.

        API name.

        :return: The name of this ApiListByTags200ResponseValueInnerApi.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApiListByTags200ResponseValueInnerApi.

        API name.

        :param name: The name of this ApiListByTags200ResponseValueInnerApi.
        :type name: str
        """
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this ApiListByTags200ResponseValueInnerApi.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :return: The path of this ApiListByTags200ResponseValueInnerApi.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ApiListByTags200ResponseValueInnerApi.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :param path: The path of this ApiListByTags200ResponseValueInnerApi.
        :type path: str
        """
        if path is not None and len(path) > 400:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `400`")
        if path is not None and len(path) < 0:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `0`")

        self._path = path

    @property
    def protocols(self):
        """Gets the protocols of this ApiListByTags200ResponseValueInnerApi.

        Describes on which protocols the operations in this API can be invoked.

        :return: The protocols of this ApiListByTags200ResponseValueInnerApi.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ApiListByTags200ResponseValueInnerApi.

        Describes on which protocols the operations in this API can be invoked.

        :param protocols: The protocols of this ApiListByTags200ResponseValueInnerApi.
        :type protocols: List[str]
        """
        allowed_values = ["http", "https"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def service_url(self):
        """Gets the service_url of this ApiListByTags200ResponseValueInnerApi.

        Absolute URL of the backend service implementing this API.

        :return: The service_url of this ApiListByTags200ResponseValueInnerApi.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this ApiListByTags200ResponseValueInnerApi.

        Absolute URL of the backend service implementing this API.

        :param service_url: The service_url of this ApiListByTags200ResponseValueInnerApi.
        :type service_url: str
        """
        if service_url is not None and len(service_url) > 2000:
            raise ValueError("Invalid value for `service_url`, length must be less than or equal to `2000`")
        if service_url is not None and len(service_url) < 1:
            raise ValueError("Invalid value for `service_url`, length must be greater than or equal to `1`")

        self._service_url = service_url
