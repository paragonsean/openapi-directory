# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.essentials import Essentials
from openapi_server import util


class AlertProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context: object=None, egress_config: object=None, essentials: Essentials=None):
        """AlertProperties - a model defined in OpenAPI

        :param context: The context of this AlertProperties.
        :param egress_config: The egress_config of this AlertProperties.
        :param essentials: The essentials of this AlertProperties.
        """
        self.openapi_types = {
            'context': object,
            'egress_config': object,
            'essentials': Essentials
        }

        self.attribute_map = {
            'context': 'context',
            'egress_config': 'egressConfig',
            'essentials': 'essentials'
        }

        self._context = context
        self._egress_config = egress_config
        self._essentials = essentials

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertProperties of this AlertProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self):
        """Gets the context of this AlertProperties.

        Information specific to the monitor service that gives more contextual details about the alert.

        :return: The context of this AlertProperties.
        :rtype: object
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this AlertProperties.

        Information specific to the monitor service that gives more contextual details about the alert.

        :param context: The context of this AlertProperties.
        :type context: object
        """

        self._context = context

    @property
    def egress_config(self):
        """Gets the egress_config of this AlertProperties.

        Config which would be used for displaying the data in portal.

        :return: The egress_config of this AlertProperties.
        :rtype: object
        """
        return self._egress_config

    @egress_config.setter
    def egress_config(self, egress_config):
        """Sets the egress_config of this AlertProperties.

        Config which would be used for displaying the data in portal.

        :param egress_config: The egress_config of this AlertProperties.
        :type egress_config: object
        """

        self._egress_config = egress_config

    @property
    def essentials(self):
        """Gets the essentials of this AlertProperties.


        :return: The essentials of this AlertProperties.
        :rtype: Essentials
        """
        return self._essentials

    @essentials.setter
    def essentials(self, essentials):
        """Sets the essentials of this AlertProperties.


        :param essentials: The essentials of this AlertProperties.
        :type essentials: Essentials
        """

        self._essentials = essentials
