# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.alerts_summary_group_item import AlertsSummaryGroupItem
from openapi_server import util


class AlertsSummaryGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groupedby: str=None, smart_groups_count: int=None, total: int=None, values: List[AlertsSummaryGroupItem]=None):
        """AlertsSummaryGroup - a model defined in OpenAPI

        :param groupedby: The groupedby of this AlertsSummaryGroup.
        :param smart_groups_count: The smart_groups_count of this AlertsSummaryGroup.
        :param total: The total of this AlertsSummaryGroup.
        :param values: The values of this AlertsSummaryGroup.
        """
        self.openapi_types = {
            'groupedby': str,
            'smart_groups_count': int,
            'total': int,
            'values': List[AlertsSummaryGroupItem]
        }

        self.attribute_map = {
            'groupedby': 'groupedby',
            'smart_groups_count': 'smartGroupsCount',
            'total': 'total',
            'values': 'values'
        }

        self._groupedby = groupedby
        self._smart_groups_count = smart_groups_count
        self._total = total
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertsSummaryGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertsSummaryGroup of this AlertsSummaryGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groupedby(self):
        """Gets the groupedby of this AlertsSummaryGroup.

        Name of the field aggregated

        :return: The groupedby of this AlertsSummaryGroup.
        :rtype: str
        """
        return self._groupedby

    @groupedby.setter
    def groupedby(self, groupedby):
        """Sets the groupedby of this AlertsSummaryGroup.

        Name of the field aggregated

        :param groupedby: The groupedby of this AlertsSummaryGroup.
        :type groupedby: str
        """

        self._groupedby = groupedby

    @property
    def smart_groups_count(self):
        """Gets the smart_groups_count of this AlertsSummaryGroup.

        Total count of the smart groups.

        :return: The smart_groups_count of this AlertsSummaryGroup.
        :rtype: int
        """
        return self._smart_groups_count

    @smart_groups_count.setter
    def smart_groups_count(self, smart_groups_count):
        """Sets the smart_groups_count of this AlertsSummaryGroup.

        Total count of the smart groups.

        :param smart_groups_count: The smart_groups_count of this AlertsSummaryGroup.
        :type smart_groups_count: int
        """

        self._smart_groups_count = smart_groups_count

    @property
    def total(self):
        """Gets the total of this AlertsSummaryGroup.

        Total count of the result set.

        :return: The total of this AlertsSummaryGroup.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this AlertsSummaryGroup.

        Total count of the result set.

        :param total: The total of this AlertsSummaryGroup.
        :type total: int
        """

        self._total = total

    @property
    def values(self):
        """Gets the values of this AlertsSummaryGroup.

        List of the items

        :return: The values of this AlertsSummaryGroup.
        :rtype: List[AlertsSummaryGroupItem]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AlertsSummaryGroup.

        List of the items

        :param values: The values of this AlertsSummaryGroup.
        :type values: List[AlertsSummaryGroupItem]
        """

        self._values = values
