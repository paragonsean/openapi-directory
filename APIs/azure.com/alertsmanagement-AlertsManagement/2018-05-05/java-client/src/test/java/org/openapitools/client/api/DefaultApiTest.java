/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2018-05-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertModification;
import org.openapitools.client.model.AlertsList;
import org.openapitools.client.model.AlertsSummary;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationsList;
import org.openapitools.client.model.SmartGroup;
import org.openapitools.client.model.SmartGroupModification;
import org.openapitools.client.model.SmartGroupsList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Change the state of an alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsChangeStateTest() throws ApiException {
        String subscriptionId = null;
        String alertId = null;
        String apiVersion = null;
        String newState = null;
        Alert response = api.alertsChangeState(subscriptionId, alertId, apiVersion, newState);
        // TODO: test validations
    }

    /**
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetAllTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String targetResource = null;
        String targetResourceType = null;
        String targetResourceGroup = null;
        String monitorService = null;
        String monitorCondition = null;
        String severity = null;
        String alertState = null;
        String alertRule = null;
        String smartGroupId = null;
        Boolean includeContext = null;
        Boolean includeEgressConfig = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        String select = null;
        String timeRange = null;
        String customTimeRange = null;
        AlertsList response = api.alertsGetAll(subscriptionId, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange);
        // TODO: test validations
    }

    /**
     * Get a specific alert.
     *
     * Get information related to a specific alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetByIdTest() throws ApiException {
        String subscriptionId = null;
        String alertId = null;
        String apiVersion = null;
        Alert response = api.alertsGetById(subscriptionId, alertId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetHistoryTest() throws ApiException {
        String subscriptionId = null;
        String alertId = null;
        String apiVersion = null;
        AlertModification response = api.alertsGetHistory(subscriptionId, alertId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetSummaryTest() throws ApiException {
        String subscriptionId = null;
        String groupby = null;
        String apiVersion = null;
        Boolean includeSmartGroupsCount = null;
        String targetResource = null;
        String targetResourceType = null;
        String targetResourceGroup = null;
        String monitorService = null;
        String monitorCondition = null;
        String severity = null;
        String alertState = null;
        String alertRule = null;
        String timeRange = null;
        String customTimeRange = null;
        AlertsSummary response = api.alertsGetSummary(subscriptionId, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange);
        // TODO: test validations
    }

    /**
     * List all operations available through Azure Alerts Management Resource Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        OperationsList response = api.operationsList(apiVersion);
        // TODO: test validations
    }

    /**
     * Change the state of a Smart Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsChangeStateTest() throws ApiException {
        String subscriptionId = null;
        String smartGroupId = null;
        String apiVersion = null;
        String newState = null;
        SmartGroup response = api.smartGroupsChangeState(subscriptionId, smartGroupId, apiVersion, newState);
        // TODO: test validations
    }

    /**
     * Get all Smart Groups within a specified subscription
     *
     * List all the Smart Groups within a specified subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsGetAllTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String targetResource = null;
        String targetResourceGroup = null;
        String targetResourceType = null;
        String monitorService = null;
        String monitorCondition = null;
        String severity = null;
        String smartGroupState = null;
        String timeRange = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        SmartGroupsList response = api.smartGroupsGetAll(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder);
        // TODO: test validations
    }

    /**
     * Get information related to a specific Smart Group.
     *
     * Get information related to a specific Smart Group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsGetByIdTest() throws ApiException {
        String subscriptionId = null;
        String smartGroupId = null;
        String apiVersion = null;
        SmartGroup response = api.smartGroupsGetById(subscriptionId, smartGroupId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsGetHistoryTest() throws ApiException {
        String subscriptionId = null;
        String smartGroupId = null;
        String apiVersion = null;
        SmartGroupModification response = api.smartGroupsGetHistory(subscriptionId, smartGroupId, apiVersion);
        // TODO: test validations
    }

}
