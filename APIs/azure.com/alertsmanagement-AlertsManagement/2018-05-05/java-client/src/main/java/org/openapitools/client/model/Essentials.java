/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2018-05-05
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * This object contains consistent fields across different monitor services.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:16.543715-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Essentials {
  public static final String SERIALIZED_NAME_ALERT_RULE = "alertRule";
  @SerializedName(SERIALIZED_NAME_ALERT_RULE)
  private String alertRule;

  /**
   * Alert object state, which can be modified by the user.
   */
  @JsonAdapter(AlertStateEnum.Adapter.class)
  public enum AlertStateEnum {
    NEW("New"),
    
    ACKNOWLEDGED("Acknowledged"),
    
    CLOSED("Closed");

    private String value;

    AlertStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AlertStateEnum fromValue(String value) {
      for (AlertStateEnum b : AlertStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AlertStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AlertStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AlertStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AlertStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AlertStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALERT_STATE = "alertState";
  @SerializedName(SERIALIZED_NAME_ALERT_STATE)
  private AlertStateEnum alertState;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME)
  private OffsetDateTime lastModifiedDateTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_USER_NAME = "lastModifiedUserName";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_USER_NAME)
  private String lastModifiedUserName;

  /**
   * Can be &#39;Fired&#39; or &#39;Resolved&#39;, which represents whether the underlying conditions have crossed the defined alert rule thresholds.
   */
  @JsonAdapter(MonitorConditionEnum.Adapter.class)
  public enum MonitorConditionEnum {
    FIRED("Fired"),
    
    RESOLVED("Resolved");

    private String value;

    MonitorConditionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonitorConditionEnum fromValue(String value) {
      for (MonitorConditionEnum b : MonitorConditionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonitorConditionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitorConditionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitorConditionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonitorConditionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonitorConditionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONITOR_CONDITION = "monitorCondition";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONDITION)
  private MonitorConditionEnum monitorCondition;

  public static final String SERIALIZED_NAME_MONITOR_CONDITION_RESOLVED_DATE_TIME = "monitorConditionResolvedDateTime";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONDITION_RESOLVED_DATE_TIME)
  private OffsetDateTime monitorConditionResolvedDateTime;

  /**
   * Monitor service on which the rule(monitor) is set.
   */
  @JsonAdapter(MonitorServiceEnum.Adapter.class)
  public enum MonitorServiceEnum {
    APPLICATION_INSIGHTS("Application Insights"),
    
    ACTIVITY_LOG_ADMINISTRATIVE("ActivityLog Administrative"),
    
    ACTIVITY_LOG_SECURITY("ActivityLog Security"),
    
    ACTIVITY_LOG_RECOMMENDATION("ActivityLog Recommendation"),
    
    ACTIVITY_LOG_POLICY("ActivityLog Policy"),
    
    ACTIVITY_LOG_AUTOSCALE("ActivityLog Autoscale"),
    
    LOG_ANALYTICS("Log Analytics"),
    
    NAGIOS("Nagios"),
    
    PLATFORM("Platform"),
    
    SCOM("SCOM"),
    
    SERVICE_HEALTH("ServiceHealth"),
    
    SMART_DETECTOR("SmartDetector"),
    
    VM_INSIGHTS("VM Insights"),
    
    ZABBIX("Zabbix");

    private String value;

    MonitorServiceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MonitorServiceEnum fromValue(String value) {
      for (MonitorServiceEnum b : MonitorServiceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MonitorServiceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MonitorServiceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MonitorServiceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MonitorServiceEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MonitorServiceEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MONITOR_SERVICE = "monitorService";
  @SerializedName(SERIALIZED_NAME_MONITOR_SERVICE)
  private MonitorServiceEnum monitorService;

  /**
   * Severity of alert Sev0 being highest and Sev4 being lowest.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEV0("Sev0"),
    
    SEV1("Sev1"),
    
    SEV2("Sev2"),
    
    SEV3("Sev3"),
    
    SEV4("Sev4");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * The type of signal the alert is based on, which could be metrics, logs or activity logs.
   */
  @JsonAdapter(SignalTypeEnum.Adapter.class)
  public enum SignalTypeEnum {
    METRIC("Metric"),
    
    LOG("Log"),
    
    UNKNOWN("Unknown");

    private String value;

    SignalTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SignalTypeEnum fromValue(String value) {
      for (SignalTypeEnum b : SignalTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SignalTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SignalTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SignalTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SignalTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SignalTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIGNAL_TYPE = "signalType";
  @SerializedName(SERIALIZED_NAME_SIGNAL_TYPE)
  private SignalTypeEnum signalType;

  public static final String SERIALIZED_NAME_SMART_GROUP_ID = "smartGroupId";
  @SerializedName(SERIALIZED_NAME_SMART_GROUP_ID)
  private String smartGroupId;

  public static final String SERIALIZED_NAME_SMART_GROUPING_REASON = "smartGroupingReason";
  @SerializedName(SERIALIZED_NAME_SMART_GROUPING_REASON)
  private String smartGroupingReason;

  public static final String SERIALIZED_NAME_SOURCE_CREATED_ID = "sourceCreatedId";
  @SerializedName(SERIALIZED_NAME_SOURCE_CREATED_ID)
  private String sourceCreatedId;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private OffsetDateTime startDateTime;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE = "targetResource";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE)
  private String targetResource;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_GROUP = "targetResourceGroup";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_GROUP)
  private String targetResourceGroup;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_NAME = "targetResourceName";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_NAME)
  private String targetResourceName;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_TYPE = "targetResourceType";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_TYPE)
  private String targetResourceType;

  public Essentials() {
  }

  public Essentials(
     String alertRule, 
     AlertStateEnum alertState, 
     OffsetDateTime lastModifiedDateTime, 
     String lastModifiedUserName, 
     MonitorConditionEnum monitorCondition, 
     OffsetDateTime monitorConditionResolvedDateTime, 
     MonitorServiceEnum monitorService, 
     SeverityEnum severity, 
     SignalTypeEnum signalType, 
     String smartGroupId, 
     String smartGroupingReason, 
     String sourceCreatedId, 
     OffsetDateTime startDateTime
  ) {
    this();
    this.alertRule = alertRule;
    this.alertState = alertState;
    this.lastModifiedDateTime = lastModifiedDateTime;
    this.lastModifiedUserName = lastModifiedUserName;
    this.monitorCondition = monitorCondition;
    this.monitorConditionResolvedDateTime = monitorConditionResolvedDateTime;
    this.monitorService = monitorService;
    this.severity = severity;
    this.signalType = signalType;
    this.smartGroupId = smartGroupId;
    this.smartGroupingReason = smartGroupingReason;
    this.sourceCreatedId = sourceCreatedId;
    this.startDateTime = startDateTime;
  }

  /**
   * Rule(monitor) which fired alert instance. Depending on the monitor service,  this would be ARM id or name of the rule.
   * @return alertRule
   */
  @javax.annotation.Nullable
  public String getAlertRule() {
    return alertRule;
  }



  /**
   * Alert object state, which can be modified by the user.
   * @return alertState
   */
  @javax.annotation.Nullable
  public AlertStateEnum getAlertState() {
    return alertState;
  }



  /**
   * Last modification time(ISO-8601 format) of alert instance.
   * @return lastModifiedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }



  /**
   * User who last modified the alert, in case of monitor service updates user would be &#39;system&#39;, otherwise name of the user.
   * @return lastModifiedUserName
   */
  @javax.annotation.Nullable
  public String getLastModifiedUserName() {
    return lastModifiedUserName;
  }



  /**
   * Can be &#39;Fired&#39; or &#39;Resolved&#39;, which represents whether the underlying conditions have crossed the defined alert rule thresholds.
   * @return monitorCondition
   */
  @javax.annotation.Nullable
  public MonitorConditionEnum getMonitorCondition() {
    return monitorCondition;
  }



  /**
   * Resolved time(ISO-8601 format) of alert instance. This will be updated when monitor service resolves the alert instance because the rule condition is no longer met.
   * @return monitorConditionResolvedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getMonitorConditionResolvedDateTime() {
    return monitorConditionResolvedDateTime;
  }



  /**
   * Monitor service on which the rule(monitor) is set.
   * @return monitorService
   */
  @javax.annotation.Nullable
  public MonitorServiceEnum getMonitorService() {
    return monitorService;
  }



  /**
   * Severity of alert Sev0 being highest and Sev4 being lowest.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }



  /**
   * The type of signal the alert is based on, which could be metrics, logs or activity logs.
   * @return signalType
   */
  @javax.annotation.Nullable
  public SignalTypeEnum getSignalType() {
    return signalType;
  }



  /**
   * Unique Id of the smart group
   * @return smartGroupId
   */
  @javax.annotation.Nullable
  public String getSmartGroupId() {
    return smartGroupId;
  }



  /**
   * Verbose reason describing the reason why this alert instance is added to a smart group
   * @return smartGroupingReason
   */
  @javax.annotation.Nullable
  public String getSmartGroupingReason() {
    return smartGroupingReason;
  }



  /**
   * Unique Id created by monitor service for each alert instance. This could be used to track the issue at the monitor service, in case of Nagios, Zabbix, SCOM etc.
   * @return sourceCreatedId
   */
  @javax.annotation.Nullable
  public String getSourceCreatedId() {
    return sourceCreatedId;
  }



  /**
   * Creation time(ISO-8601 format) of alert instance.
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }



  public Essentials targetResource(String targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Target ARM resource, on which alert got created.
   * @return targetResource
   */
  @javax.annotation.Nullable
  public String getTargetResource() {
    return targetResource;
  }

  public void setTargetResource(String targetResource) {
    this.targetResource = targetResource;
  }


  public Essentials targetResourceGroup(String targetResourceGroup) {
    this.targetResourceGroup = targetResourceGroup;
    return this;
  }

  /**
   * Resource group of target ARM resource, on which alert got created.
   * @return targetResourceGroup
   */
  @javax.annotation.Nullable
  public String getTargetResourceGroup() {
    return targetResourceGroup;
  }

  public void setTargetResourceGroup(String targetResourceGroup) {
    this.targetResourceGroup = targetResourceGroup;
  }


  public Essentials targetResourceName(String targetResourceName) {
    this.targetResourceName = targetResourceName;
    return this;
  }

  /**
   * Name of the target ARM resource name, on which alert got created.
   * @return targetResourceName
   */
  @javax.annotation.Nullable
  public String getTargetResourceName() {
    return targetResourceName;
  }

  public void setTargetResourceName(String targetResourceName) {
    this.targetResourceName = targetResourceName;
  }


  public Essentials targetResourceType(String targetResourceType) {
    this.targetResourceType = targetResourceType;
    return this;
  }

  /**
   * Resource type of target ARM resource, on which alert got created.
   * @return targetResourceType
   */
  @javax.annotation.Nullable
  public String getTargetResourceType() {
    return targetResourceType;
  }

  public void setTargetResourceType(String targetResourceType) {
    this.targetResourceType = targetResourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Essentials essentials = (Essentials) o;
    return Objects.equals(this.alertRule, essentials.alertRule) &&
        Objects.equals(this.alertState, essentials.alertState) &&
        Objects.equals(this.lastModifiedDateTime, essentials.lastModifiedDateTime) &&
        Objects.equals(this.lastModifiedUserName, essentials.lastModifiedUserName) &&
        Objects.equals(this.monitorCondition, essentials.monitorCondition) &&
        Objects.equals(this.monitorConditionResolvedDateTime, essentials.monitorConditionResolvedDateTime) &&
        Objects.equals(this.monitorService, essentials.monitorService) &&
        Objects.equals(this.severity, essentials.severity) &&
        Objects.equals(this.signalType, essentials.signalType) &&
        Objects.equals(this.smartGroupId, essentials.smartGroupId) &&
        Objects.equals(this.smartGroupingReason, essentials.smartGroupingReason) &&
        Objects.equals(this.sourceCreatedId, essentials.sourceCreatedId) &&
        Objects.equals(this.startDateTime, essentials.startDateTime) &&
        Objects.equals(this.targetResource, essentials.targetResource) &&
        Objects.equals(this.targetResourceGroup, essentials.targetResourceGroup) &&
        Objects.equals(this.targetResourceName, essentials.targetResourceName) &&
        Objects.equals(this.targetResourceType, essentials.targetResourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertRule, alertState, lastModifiedDateTime, lastModifiedUserName, monitorCondition, monitorConditionResolvedDateTime, monitorService, severity, signalType, smartGroupId, smartGroupingReason, sourceCreatedId, startDateTime, targetResource, targetResourceGroup, targetResourceName, targetResourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Essentials {\n");
    sb.append("    alertRule: ").append(toIndentedString(alertRule)).append("\n");
    sb.append("    alertState: ").append(toIndentedString(alertState)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    lastModifiedUserName: ").append(toIndentedString(lastModifiedUserName)).append("\n");
    sb.append("    monitorCondition: ").append(toIndentedString(monitorCondition)).append("\n");
    sb.append("    monitorConditionResolvedDateTime: ").append(toIndentedString(monitorConditionResolvedDateTime)).append("\n");
    sb.append("    monitorService: ").append(toIndentedString(monitorService)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    signalType: ").append(toIndentedString(signalType)).append("\n");
    sb.append("    smartGroupId: ").append(toIndentedString(smartGroupId)).append("\n");
    sb.append("    smartGroupingReason: ").append(toIndentedString(smartGroupingReason)).append("\n");
    sb.append("    sourceCreatedId: ").append(toIndentedString(sourceCreatedId)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("    targetResource: ").append(toIndentedString(targetResource)).append("\n");
    sb.append("    targetResourceGroup: ").append(toIndentedString(targetResourceGroup)).append("\n");
    sb.append("    targetResourceName: ").append(toIndentedString(targetResourceName)).append("\n");
    sb.append("    targetResourceType: ").append(toIndentedString(targetResourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertRule");
    openapiFields.add("alertState");
    openapiFields.add("lastModifiedDateTime");
    openapiFields.add("lastModifiedUserName");
    openapiFields.add("monitorCondition");
    openapiFields.add("monitorConditionResolvedDateTime");
    openapiFields.add("monitorService");
    openapiFields.add("severity");
    openapiFields.add("signalType");
    openapiFields.add("smartGroupId");
    openapiFields.add("smartGroupingReason");
    openapiFields.add("sourceCreatedId");
    openapiFields.add("startDateTime");
    openapiFields.add("targetResource");
    openapiFields.add("targetResourceGroup");
    openapiFields.add("targetResourceName");
    openapiFields.add("targetResourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Essentials
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Essentials.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Essentials is not found in the empty JSON string", Essentials.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Essentials.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Essentials` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alertRule") != null && !jsonObj.get("alertRule").isJsonNull()) && !jsonObj.get("alertRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertRule").toString()));
      }
      if ((jsonObj.get("alertState") != null && !jsonObj.get("alertState").isJsonNull()) && !jsonObj.get("alertState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alertState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alertState").toString()));
      }
      // validate the optional field `alertState`
      if (jsonObj.get("alertState") != null && !jsonObj.get("alertState").isJsonNull()) {
        AlertStateEnum.validateJsonElement(jsonObj.get("alertState"));
      }
      if ((jsonObj.get("lastModifiedUserName") != null && !jsonObj.get("lastModifiedUserName").isJsonNull()) && !jsonObj.get("lastModifiedUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedUserName").toString()));
      }
      if ((jsonObj.get("monitorCondition") != null && !jsonObj.get("monitorCondition").isJsonNull()) && !jsonObj.get("monitorCondition").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitorCondition` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitorCondition").toString()));
      }
      // validate the optional field `monitorCondition`
      if (jsonObj.get("monitorCondition") != null && !jsonObj.get("monitorCondition").isJsonNull()) {
        MonitorConditionEnum.validateJsonElement(jsonObj.get("monitorCondition"));
      }
      if ((jsonObj.get("monitorService") != null && !jsonObj.get("monitorService").isJsonNull()) && !jsonObj.get("monitorService").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `monitorService` to be a primitive type in the JSON string but got `%s`", jsonObj.get("monitorService").toString()));
      }
      // validate the optional field `monitorService`
      if (jsonObj.get("monitorService") != null && !jsonObj.get("monitorService").isJsonNull()) {
        MonitorServiceEnum.validateJsonElement(jsonObj.get("monitorService"));
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) && !jsonObj.get("signalType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `signalType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("signalType").toString()));
      }
      // validate the optional field `signalType`
      if (jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) {
        SignalTypeEnum.validateJsonElement(jsonObj.get("signalType"));
      }
      if ((jsonObj.get("smartGroupId") != null && !jsonObj.get("smartGroupId").isJsonNull()) && !jsonObj.get("smartGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartGroupId").toString()));
      }
      if ((jsonObj.get("smartGroupingReason") != null && !jsonObj.get("smartGroupingReason").isJsonNull()) && !jsonObj.get("smartGroupingReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartGroupingReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartGroupingReason").toString()));
      }
      if ((jsonObj.get("sourceCreatedId") != null && !jsonObj.get("sourceCreatedId").isJsonNull()) && !jsonObj.get("sourceCreatedId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceCreatedId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceCreatedId").toString()));
      }
      if ((jsonObj.get("targetResource") != null && !jsonObj.get("targetResource").isJsonNull()) && !jsonObj.get("targetResource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResource").toString()));
      }
      if ((jsonObj.get("targetResourceGroup") != null && !jsonObj.get("targetResourceGroup").isJsonNull()) && !jsonObj.get("targetResourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceGroup").toString()));
      }
      if ((jsonObj.get("targetResourceName") != null && !jsonObj.get("targetResourceName").isJsonNull()) && !jsonObj.get("targetResourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceName").toString()));
      }
      if ((jsonObj.get("targetResourceType") != null && !jsonObj.get("targetResourceType").isJsonNull()) && !jsonObj.get("targetResourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetResourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetResourceType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Essentials.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Essentials' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Essentials> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Essentials.class));

       return (TypeAdapter<T>) new TypeAdapter<Essentials>() {
           @Override
           public void write(JsonWriter out, Essentials value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Essentials read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Essentials given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Essentials
   * @throws IOException if the JSON string is invalid with respect to Essentials
   */
  public static Essentials fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Essentials.class);
  }

  /**
   * Convert an instance of Essentials to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

