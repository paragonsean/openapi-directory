/**
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-11-02-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertsSummaryByMonitorService.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertsSummaryByMonitorService::OAIAlertsSummaryByMonitorService(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertsSummaryByMonitorService::OAIAlertsSummaryByMonitorService() {
    this->initializeModel();
}

OAIAlertsSummaryByMonitorService::~OAIAlertsSummaryByMonitorService() {}

void OAIAlertsSummaryByMonitorService::initializeModel() {

    m_activity_log_administrative_isSet = false;
    m_activity_log_administrative_isValid = false;

    m_activity_log_autoscale_isSet = false;
    m_activity_log_autoscale_isValid = false;

    m_activity_log_policy_isSet = false;
    m_activity_log_policy_isValid = false;

    m_activity_log_recommendation_isSet = false;
    m_activity_log_recommendation_isValid = false;

    m_activity_log_security_isSet = false;
    m_activity_log_security_isValid = false;

    m_application_insights_isSet = false;
    m_application_insights_isValid = false;

    m_infrastructure_insights_isSet = false;
    m_infrastructure_insights_isValid = false;

    m_log_analytics_isSet = false;
    m_log_analytics_isValid = false;

    m_nagios_isSet = false;
    m_nagios_isValid = false;

    m_platform_isSet = false;
    m_platform_isValid = false;

    m_scom_isSet = false;
    m_scom_isValid = false;

    m_service_health_isSet = false;
    m_service_health_isValid = false;

    m_smart_detector_isSet = false;
    m_smart_detector_isValid = false;

    m_zabbix_isSet = false;
    m_zabbix_isValid = false;
}

void OAIAlertsSummaryByMonitorService::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertsSummaryByMonitorService::fromJsonObject(QJsonObject json) {

    m_activity_log_administrative_isValid = ::OpenAPI::fromJsonValue(m_activity_log_administrative, json[QString("activityLog Administrative")]);
    m_activity_log_administrative_isSet = !json[QString("activityLog Administrative")].isNull() && m_activity_log_administrative_isValid;

    m_activity_log_autoscale_isValid = ::OpenAPI::fromJsonValue(m_activity_log_autoscale, json[QString("activityLog Autoscale")]);
    m_activity_log_autoscale_isSet = !json[QString("activityLog Autoscale")].isNull() && m_activity_log_autoscale_isValid;

    m_activity_log_policy_isValid = ::OpenAPI::fromJsonValue(m_activity_log_policy, json[QString("activityLog Policy")]);
    m_activity_log_policy_isSet = !json[QString("activityLog Policy")].isNull() && m_activity_log_policy_isValid;

    m_activity_log_recommendation_isValid = ::OpenAPI::fromJsonValue(m_activity_log_recommendation, json[QString("activityLog Recommendation")]);
    m_activity_log_recommendation_isSet = !json[QString("activityLog Recommendation")].isNull() && m_activity_log_recommendation_isValid;

    m_activity_log_security_isValid = ::OpenAPI::fromJsonValue(m_activity_log_security, json[QString("activityLog Security")]);
    m_activity_log_security_isSet = !json[QString("activityLog Security")].isNull() && m_activity_log_security_isValid;

    m_application_insights_isValid = ::OpenAPI::fromJsonValue(m_application_insights, json[QString("application Insights")]);
    m_application_insights_isSet = !json[QString("application Insights")].isNull() && m_application_insights_isValid;

    m_infrastructure_insights_isValid = ::OpenAPI::fromJsonValue(m_infrastructure_insights, json[QString("infrastructure Insights")]);
    m_infrastructure_insights_isSet = !json[QString("infrastructure Insights")].isNull() && m_infrastructure_insights_isValid;

    m_log_analytics_isValid = ::OpenAPI::fromJsonValue(m_log_analytics, json[QString("log Analytics")]);
    m_log_analytics_isSet = !json[QString("log Analytics")].isNull() && m_log_analytics_isValid;

    m_nagios_isValid = ::OpenAPI::fromJsonValue(m_nagios, json[QString("nagios")]);
    m_nagios_isSet = !json[QString("nagios")].isNull() && m_nagios_isValid;

    m_platform_isValid = ::OpenAPI::fromJsonValue(m_platform, json[QString("platform")]);
    m_platform_isSet = !json[QString("platform")].isNull() && m_platform_isValid;

    m_scom_isValid = ::OpenAPI::fromJsonValue(m_scom, json[QString("scom")]);
    m_scom_isSet = !json[QString("scom")].isNull() && m_scom_isValid;

    m_service_health_isValid = ::OpenAPI::fromJsonValue(m_service_health, json[QString("serviceHealth")]);
    m_service_health_isSet = !json[QString("serviceHealth")].isNull() && m_service_health_isValid;

    m_smart_detector_isValid = ::OpenAPI::fromJsonValue(m_smart_detector, json[QString("smartDetector")]);
    m_smart_detector_isSet = !json[QString("smartDetector")].isNull() && m_smart_detector_isValid;

    m_zabbix_isValid = ::OpenAPI::fromJsonValue(m_zabbix, json[QString("zabbix")]);
    m_zabbix_isSet = !json[QString("zabbix")].isNull() && m_zabbix_isValid;
}

QString OAIAlertsSummaryByMonitorService::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertsSummaryByMonitorService::asJsonObject() const {
    QJsonObject obj;
    if (m_activity_log_administrative_isSet) {
        obj.insert(QString("activityLog Administrative"), ::OpenAPI::toJsonValue(m_activity_log_administrative));
    }
    if (m_activity_log_autoscale_isSet) {
        obj.insert(QString("activityLog Autoscale"), ::OpenAPI::toJsonValue(m_activity_log_autoscale));
    }
    if (m_activity_log_policy_isSet) {
        obj.insert(QString("activityLog Policy"), ::OpenAPI::toJsonValue(m_activity_log_policy));
    }
    if (m_activity_log_recommendation_isSet) {
        obj.insert(QString("activityLog Recommendation"), ::OpenAPI::toJsonValue(m_activity_log_recommendation));
    }
    if (m_activity_log_security_isSet) {
        obj.insert(QString("activityLog Security"), ::OpenAPI::toJsonValue(m_activity_log_security));
    }
    if (m_application_insights_isSet) {
        obj.insert(QString("application Insights"), ::OpenAPI::toJsonValue(m_application_insights));
    }
    if (m_infrastructure_insights_isSet) {
        obj.insert(QString("infrastructure Insights"), ::OpenAPI::toJsonValue(m_infrastructure_insights));
    }
    if (m_log_analytics_isSet) {
        obj.insert(QString("log Analytics"), ::OpenAPI::toJsonValue(m_log_analytics));
    }
    if (m_nagios_isSet) {
        obj.insert(QString("nagios"), ::OpenAPI::toJsonValue(m_nagios));
    }
    if (m_platform_isSet) {
        obj.insert(QString("platform"), ::OpenAPI::toJsonValue(m_platform));
    }
    if (m_scom_isSet) {
        obj.insert(QString("scom"), ::OpenAPI::toJsonValue(m_scom));
    }
    if (m_service_health_isSet) {
        obj.insert(QString("serviceHealth"), ::OpenAPI::toJsonValue(m_service_health));
    }
    if (m_smart_detector_isSet) {
        obj.insert(QString("smartDetector"), ::OpenAPI::toJsonValue(m_smart_detector));
    }
    if (m_zabbix_isSet) {
        obj.insert(QString("zabbix"), ::OpenAPI::toJsonValue(m_zabbix));
    }
    return obj;
}

qint32 OAIAlertsSummaryByMonitorService::getActivityLogAdministrative() const {
    return m_activity_log_administrative;
}
void OAIAlertsSummaryByMonitorService::setActivityLogAdministrative(const qint32 &activity_log_administrative) {
    m_activity_log_administrative = activity_log_administrative;
    m_activity_log_administrative_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_administrative_Set() const{
    return m_activity_log_administrative_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_administrative_Valid() const{
    return m_activity_log_administrative_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getActivityLogAutoscale() const {
    return m_activity_log_autoscale;
}
void OAIAlertsSummaryByMonitorService::setActivityLogAutoscale(const qint32 &activity_log_autoscale) {
    m_activity_log_autoscale = activity_log_autoscale;
    m_activity_log_autoscale_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_autoscale_Set() const{
    return m_activity_log_autoscale_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_autoscale_Valid() const{
    return m_activity_log_autoscale_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getActivityLogPolicy() const {
    return m_activity_log_policy;
}
void OAIAlertsSummaryByMonitorService::setActivityLogPolicy(const qint32 &activity_log_policy) {
    m_activity_log_policy = activity_log_policy;
    m_activity_log_policy_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_policy_Set() const{
    return m_activity_log_policy_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_policy_Valid() const{
    return m_activity_log_policy_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getActivityLogRecommendation() const {
    return m_activity_log_recommendation;
}
void OAIAlertsSummaryByMonitorService::setActivityLogRecommendation(const qint32 &activity_log_recommendation) {
    m_activity_log_recommendation = activity_log_recommendation;
    m_activity_log_recommendation_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_recommendation_Set() const{
    return m_activity_log_recommendation_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_recommendation_Valid() const{
    return m_activity_log_recommendation_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getActivityLogSecurity() const {
    return m_activity_log_security;
}
void OAIAlertsSummaryByMonitorService::setActivityLogSecurity(const qint32 &activity_log_security) {
    m_activity_log_security = activity_log_security;
    m_activity_log_security_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_security_Set() const{
    return m_activity_log_security_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_activity_log_security_Valid() const{
    return m_activity_log_security_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getApplicationInsights() const {
    return m_application_insights;
}
void OAIAlertsSummaryByMonitorService::setApplicationInsights(const qint32 &application_insights) {
    m_application_insights = application_insights;
    m_application_insights_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_application_insights_Set() const{
    return m_application_insights_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_application_insights_Valid() const{
    return m_application_insights_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getInfrastructureInsights() const {
    return m_infrastructure_insights;
}
void OAIAlertsSummaryByMonitorService::setInfrastructureInsights(const qint32 &infrastructure_insights) {
    m_infrastructure_insights = infrastructure_insights;
    m_infrastructure_insights_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_infrastructure_insights_Set() const{
    return m_infrastructure_insights_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_infrastructure_insights_Valid() const{
    return m_infrastructure_insights_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getLogAnalytics() const {
    return m_log_analytics;
}
void OAIAlertsSummaryByMonitorService::setLogAnalytics(const qint32 &log_analytics) {
    m_log_analytics = log_analytics;
    m_log_analytics_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_log_analytics_Set() const{
    return m_log_analytics_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_log_analytics_Valid() const{
    return m_log_analytics_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getNagios() const {
    return m_nagios;
}
void OAIAlertsSummaryByMonitorService::setNagios(const qint32 &nagios) {
    m_nagios = nagios;
    m_nagios_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_nagios_Set() const{
    return m_nagios_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_nagios_Valid() const{
    return m_nagios_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getPlatform() const {
    return m_platform;
}
void OAIAlertsSummaryByMonitorService::setPlatform(const qint32 &platform) {
    m_platform = platform;
    m_platform_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_platform_Set() const{
    return m_platform_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_platform_Valid() const{
    return m_platform_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getScom() const {
    return m_scom;
}
void OAIAlertsSummaryByMonitorService::setScom(const qint32 &scom) {
    m_scom = scom;
    m_scom_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_scom_Set() const{
    return m_scom_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_scom_Valid() const{
    return m_scom_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getServiceHealth() const {
    return m_service_health;
}
void OAIAlertsSummaryByMonitorService::setServiceHealth(const qint32 &service_health) {
    m_service_health = service_health;
    m_service_health_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_service_health_Set() const{
    return m_service_health_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_service_health_Valid() const{
    return m_service_health_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getSmartDetector() const {
    return m_smart_detector;
}
void OAIAlertsSummaryByMonitorService::setSmartDetector(const qint32 &smart_detector) {
    m_smart_detector = smart_detector;
    m_smart_detector_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_smart_detector_Set() const{
    return m_smart_detector_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_smart_detector_Valid() const{
    return m_smart_detector_isValid;
}

qint32 OAIAlertsSummaryByMonitorService::getZabbix() const {
    return m_zabbix;
}
void OAIAlertsSummaryByMonitorService::setZabbix(const qint32 &zabbix) {
    m_zabbix = zabbix;
    m_zabbix_isSet = true;
}

bool OAIAlertsSummaryByMonitorService::is_zabbix_Set() const{
    return m_zabbix_isSet;
}

bool OAIAlertsSummaryByMonitorService::is_zabbix_Valid() const{
    return m_zabbix_isValid;
}

bool OAIAlertsSummaryByMonitorService::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_activity_log_administrative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_log_autoscale_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_log_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_log_recommendation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_log_security_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_application_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_infrastructure_insights_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_log_analytics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nagios_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_platform_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_health_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_detector_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_zabbix_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertsSummaryByMonitorService::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
