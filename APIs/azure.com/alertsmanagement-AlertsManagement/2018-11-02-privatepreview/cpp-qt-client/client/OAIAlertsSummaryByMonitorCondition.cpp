/**
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-11-02-privatepreview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertsSummaryByMonitorCondition.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertsSummaryByMonitorCondition::OAIAlertsSummaryByMonitorCondition(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertsSummaryByMonitorCondition::OAIAlertsSummaryByMonitorCondition() {
    this->initializeModel();
}

OAIAlertsSummaryByMonitorCondition::~OAIAlertsSummaryByMonitorCondition() {}

void OAIAlertsSummaryByMonitorCondition::initializeModel() {

    m_fired_isSet = false;
    m_fired_isValid = false;

    m_resolved_isSet = false;
    m_resolved_isValid = false;
}

void OAIAlertsSummaryByMonitorCondition::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertsSummaryByMonitorCondition::fromJsonObject(QJsonObject json) {

    m_fired_isValid = ::OpenAPI::fromJsonValue(m_fired, json[QString("fired")]);
    m_fired_isSet = !json[QString("fired")].isNull() && m_fired_isValid;

    m_resolved_isValid = ::OpenAPI::fromJsonValue(m_resolved, json[QString("resolved")]);
    m_resolved_isSet = !json[QString("resolved")].isNull() && m_resolved_isValid;
}

QString OAIAlertsSummaryByMonitorCondition::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertsSummaryByMonitorCondition::asJsonObject() const {
    QJsonObject obj;
    if (m_fired_isSet) {
        obj.insert(QString("fired"), ::OpenAPI::toJsonValue(m_fired));
    }
    if (m_resolved_isSet) {
        obj.insert(QString("resolved"), ::OpenAPI::toJsonValue(m_resolved));
    }
    return obj;
}

qint32 OAIAlertsSummaryByMonitorCondition::getFired() const {
    return m_fired;
}
void OAIAlertsSummaryByMonitorCondition::setFired(const qint32 &fired) {
    m_fired = fired;
    m_fired_isSet = true;
}

bool OAIAlertsSummaryByMonitorCondition::is_fired_Set() const{
    return m_fired_isSet;
}

bool OAIAlertsSummaryByMonitorCondition::is_fired_Valid() const{
    return m_fired_isValid;
}

qint32 OAIAlertsSummaryByMonitorCondition::getResolved() const {
    return m_resolved;
}
void OAIAlertsSummaryByMonitorCondition::setResolved(const qint32 &resolved) {
    m_resolved = resolved;
    m_resolved_isSet = true;
}

bool OAIAlertsSummaryByMonitorCondition::is_resolved_Set() const{
    return m_resolved_isSet;
}

bool OAIAlertsSummaryByMonitorCondition::is_resolved_Valid() const{
    return m_resolved_isValid;
}

bool OAIAlertsSummaryByMonitorCondition::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_fired_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertsSummaryByMonitorCondition::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
