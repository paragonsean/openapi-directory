# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertsSummaryByMonitorCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fired: int=None, resolved: int=None):
        """AlertsSummaryByMonitorCondition - a model defined in OpenAPI

        :param fired: The fired of this AlertsSummaryByMonitorCondition.
        :param resolved: The resolved of this AlertsSummaryByMonitorCondition.
        """
        self.openapi_types = {
            'fired': int,
            'resolved': int
        }

        self.attribute_map = {
            'fired': 'fired',
            'resolved': 'resolved'
        }

        self._fired = fired
        self._resolved = resolved

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertsSummaryByMonitorCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertsSummaryByMonitorCondition of this AlertsSummaryByMonitorCondition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fired(self):
        """Gets the fired of this AlertsSummaryByMonitorCondition.

        Count of alerts with monitorCondition 'Fired'

        :return: The fired of this AlertsSummaryByMonitorCondition.
        :rtype: int
        """
        return self._fired

    @fired.setter
    def fired(self, fired):
        """Sets the fired of this AlertsSummaryByMonitorCondition.

        Count of alerts with monitorCondition 'Fired'

        :param fired: The fired of this AlertsSummaryByMonitorCondition.
        :type fired: int
        """

        self._fired = fired

    @property
    def resolved(self):
        """Gets the resolved of this AlertsSummaryByMonitorCondition.

        Count of alerts with monitorCondition 'Resolved'

        :return: The resolved of this AlertsSummaryByMonitorCondition.
        :rtype: int
        """
        return self._resolved

    @resolved.setter
    def resolved(self, resolved):
        """Sets the resolved of this AlertsSummaryByMonitorCondition.

        Count of alerts with monitorCondition 'Resolved'

        :param resolved: The resolved of this AlertsSummaryByMonitorCondition.
        :type resolved: int
        """

        self._resolved = resolved
