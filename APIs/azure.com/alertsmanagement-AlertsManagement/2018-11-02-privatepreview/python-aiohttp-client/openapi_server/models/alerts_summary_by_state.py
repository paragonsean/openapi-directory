# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertsSummaryByState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acknowledged: int=None, closed: int=None, new: int=None):
        """AlertsSummaryByState - a model defined in OpenAPI

        :param acknowledged: The acknowledged of this AlertsSummaryByState.
        :param closed: The closed of this AlertsSummaryByState.
        :param new: The new of this AlertsSummaryByState.
        """
        self.openapi_types = {
            'acknowledged': int,
            'closed': int,
            'new': int
        }

        self.attribute_map = {
            'acknowledged': 'acknowledged',
            'closed': 'closed',
            'new': 'new'
        }

        self._acknowledged = acknowledged
        self._closed = closed
        self._new = new

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertsSummaryByState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertsSummaryByState of this AlertsSummaryByState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acknowledged(self):
        """Gets the acknowledged of this AlertsSummaryByState.

        Count of alerts with state 'Acknowledged'

        :return: The acknowledged of this AlertsSummaryByState.
        :rtype: int
        """
        return self._acknowledged

    @acknowledged.setter
    def acknowledged(self, acknowledged):
        """Sets the acknowledged of this AlertsSummaryByState.

        Count of alerts with state 'Acknowledged'

        :param acknowledged: The acknowledged of this AlertsSummaryByState.
        :type acknowledged: int
        """

        self._acknowledged = acknowledged

    @property
    def closed(self):
        """Gets the closed of this AlertsSummaryByState.

        Count of alerts with state 'Closed'

        :return: The closed of this AlertsSummaryByState.
        :rtype: int
        """
        return self._closed

    @closed.setter
    def closed(self, closed):
        """Sets the closed of this AlertsSummaryByState.

        Count of alerts with state 'Closed'

        :param closed: The closed of this AlertsSummaryByState.
        :type closed: int
        """

        self._closed = closed

    @property
    def new(self):
        """Gets the new of this AlertsSummaryByState.

        Count of alerts with state 'New'

        :return: The new of this AlertsSummaryByState.
        :rtype: int
        """
        return self._new

    @new.setter
    def new(self, new):
        """Sets the new of this AlertsSummaryByState.

        Count of alerts with state 'New'

        :param new: The new of this AlertsSummaryByState.
        :type new: int
        """

        self._new = new
