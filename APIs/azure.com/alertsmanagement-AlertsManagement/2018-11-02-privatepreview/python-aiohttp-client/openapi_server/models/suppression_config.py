# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.suppression_schedule import SuppressionSchedule
from openapi_server import util


class SuppressionConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, recurrence_type: str=None, schedule: SuppressionSchedule=None):
        """SuppressionConfig - a model defined in OpenAPI

        :param recurrence_type: The recurrence_type of this SuppressionConfig.
        :param schedule: The schedule of this SuppressionConfig.
        """
        self.openapi_types = {
            'recurrence_type': str,
            'schedule': SuppressionSchedule
        }

        self.attribute_map = {
            'recurrence_type': 'recurrenceType',
            'schedule': 'schedule'
        }

        self._recurrence_type = recurrence_type
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuppressionConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The suppressionConfig of this SuppressionConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def recurrence_type(self):
        """Gets the recurrence_type of this SuppressionConfig.

        Specifies when the suppression should be applied

        :return: The recurrence_type of this SuppressionConfig.
        :rtype: str
        """
        return self._recurrence_type

    @recurrence_type.setter
    def recurrence_type(self, recurrence_type):
        """Sets the recurrence_type of this SuppressionConfig.

        Specifies when the suppression should be applied

        :param recurrence_type: The recurrence_type of this SuppressionConfig.
        :type recurrence_type: str
        """
        allowed_values = ["Always", "Once", "Daily", "Weekly", "Monthly"]  # noqa: E501
        if recurrence_type not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_type` ({0}), must be one of {1}"
                .format(recurrence_type, allowed_values)
            )

        self._recurrence_type = recurrence_type

    @property
    def schedule(self):
        """Gets the schedule of this SuppressionConfig.


        :return: The schedule of this SuppressionConfig.
        :rtype: SuppressionSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule):
        """Sets the schedule of this SuppressionConfig.


        :param schedule: The schedule of this SuppressionConfig.
        :type schedule: SuppressionSchedule
        """

        self._schedule = schedule
