# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertsSummaryByMonitorService(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity_log_administrative: int=None, activity_log_autoscale: int=None, activity_log_policy: int=None, activity_log_recommendation: int=None, activity_log_security: int=None, application_insights: int=None, infrastructure_insights: int=None, log_analytics: int=None, nagios: int=None, platform: int=None, scom: int=None, service_health: int=None, smart_detector: int=None, zabbix: int=None):
        """AlertsSummaryByMonitorService - a model defined in OpenAPI

        :param activity_log_administrative: The activity_log_administrative of this AlertsSummaryByMonitorService.
        :param activity_log_autoscale: The activity_log_autoscale of this AlertsSummaryByMonitorService.
        :param activity_log_policy: The activity_log_policy of this AlertsSummaryByMonitorService.
        :param activity_log_recommendation: The activity_log_recommendation of this AlertsSummaryByMonitorService.
        :param activity_log_security: The activity_log_security of this AlertsSummaryByMonitorService.
        :param application_insights: The application_insights of this AlertsSummaryByMonitorService.
        :param infrastructure_insights: The infrastructure_insights of this AlertsSummaryByMonitorService.
        :param log_analytics: The log_analytics of this AlertsSummaryByMonitorService.
        :param nagios: The nagios of this AlertsSummaryByMonitorService.
        :param platform: The platform of this AlertsSummaryByMonitorService.
        :param scom: The scom of this AlertsSummaryByMonitorService.
        :param service_health: The service_health of this AlertsSummaryByMonitorService.
        :param smart_detector: The smart_detector of this AlertsSummaryByMonitorService.
        :param zabbix: The zabbix of this AlertsSummaryByMonitorService.
        """
        self.openapi_types = {
            'activity_log_administrative': int,
            'activity_log_autoscale': int,
            'activity_log_policy': int,
            'activity_log_recommendation': int,
            'activity_log_security': int,
            'application_insights': int,
            'infrastructure_insights': int,
            'log_analytics': int,
            'nagios': int,
            'platform': int,
            'scom': int,
            'service_health': int,
            'smart_detector': int,
            'zabbix': int
        }

        self.attribute_map = {
            'activity_log_administrative': 'activityLog Administrative',
            'activity_log_autoscale': 'activityLog Autoscale',
            'activity_log_policy': 'activityLog Policy',
            'activity_log_recommendation': 'activityLog Recommendation',
            'activity_log_security': 'activityLog Security',
            'application_insights': 'application Insights',
            'infrastructure_insights': 'infrastructure Insights',
            'log_analytics': 'log Analytics',
            'nagios': 'nagios',
            'platform': 'platform',
            'scom': 'scom',
            'service_health': 'serviceHealth',
            'smart_detector': 'smartDetector',
            'zabbix': 'zabbix'
        }

        self._activity_log_administrative = activity_log_administrative
        self._activity_log_autoscale = activity_log_autoscale
        self._activity_log_policy = activity_log_policy
        self._activity_log_recommendation = activity_log_recommendation
        self._activity_log_security = activity_log_security
        self._application_insights = application_insights
        self._infrastructure_insights = infrastructure_insights
        self._log_analytics = log_analytics
        self._nagios = nagios
        self._platform = platform
        self._scom = scom
        self._service_health = service_health
        self._smart_detector = smart_detector
        self._zabbix = zabbix

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertsSummaryByMonitorService':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertsSummaryByMonitorService of this AlertsSummaryByMonitorService.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity_log_administrative(self):
        """Gets the activity_log_administrative of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Administrative\"

        :return: The activity_log_administrative of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._activity_log_administrative

    @activity_log_administrative.setter
    def activity_log_administrative(self, activity_log_administrative):
        """Sets the activity_log_administrative of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Administrative\"

        :param activity_log_administrative: The activity_log_administrative of this AlertsSummaryByMonitorService.
        :type activity_log_administrative: int
        """

        self._activity_log_administrative = activity_log_administrative

    @property
    def activity_log_autoscale(self):
        """Gets the activity_log_autoscale of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Autoscale\"

        :return: The activity_log_autoscale of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._activity_log_autoscale

    @activity_log_autoscale.setter
    def activity_log_autoscale(self, activity_log_autoscale):
        """Sets the activity_log_autoscale of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Autoscale\"

        :param activity_log_autoscale: The activity_log_autoscale of this AlertsSummaryByMonitorService.
        :type activity_log_autoscale: int
        """

        self._activity_log_autoscale = activity_log_autoscale

    @property
    def activity_log_policy(self):
        """Gets the activity_log_policy of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Policy\"

        :return: The activity_log_policy of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._activity_log_policy

    @activity_log_policy.setter
    def activity_log_policy(self, activity_log_policy):
        """Sets the activity_log_policy of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Policy\"

        :param activity_log_policy: The activity_log_policy of this AlertsSummaryByMonitorService.
        :type activity_log_policy: int
        """

        self._activity_log_policy = activity_log_policy

    @property
    def activity_log_recommendation(self):
        """Gets the activity_log_recommendation of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Recommendation\"

        :return: The activity_log_recommendation of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._activity_log_recommendation

    @activity_log_recommendation.setter
    def activity_log_recommendation(self, activity_log_recommendation):
        """Sets the activity_log_recommendation of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Recommendation\"

        :param activity_log_recommendation: The activity_log_recommendation of this AlertsSummaryByMonitorService.
        :type activity_log_recommendation: int
        """

        self._activity_log_recommendation = activity_log_recommendation

    @property
    def activity_log_security(self):
        """Gets the activity_log_security of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Security\"

        :return: The activity_log_security of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._activity_log_security

    @activity_log_security.setter
    def activity_log_security(self, activity_log_security):
        """Sets the activity_log_security of this AlertsSummaryByMonitorService.

        Count of alerts of \"ActivityLog Security\"

        :param activity_log_security: The activity_log_security of this AlertsSummaryByMonitorService.
        :type activity_log_security: int
        """

        self._activity_log_security = activity_log_security

    @property
    def application_insights(self):
        """Gets the application_insights of this AlertsSummaryByMonitorService.

        Count of alerts of \"Application Insights\"

        :return: The application_insights of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._application_insights

    @application_insights.setter
    def application_insights(self, application_insights):
        """Sets the application_insights of this AlertsSummaryByMonitorService.

        Count of alerts of \"Application Insights\"

        :param application_insights: The application_insights of this AlertsSummaryByMonitorService.
        :type application_insights: int
        """

        self._application_insights = application_insights

    @property
    def infrastructure_insights(self):
        """Gets the infrastructure_insights of this AlertsSummaryByMonitorService.

        Count of alerts of \"Infrastructure Insights\"

        :return: The infrastructure_insights of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._infrastructure_insights

    @infrastructure_insights.setter
    def infrastructure_insights(self, infrastructure_insights):
        """Sets the infrastructure_insights of this AlertsSummaryByMonitorService.

        Count of alerts of \"Infrastructure Insights\"

        :param infrastructure_insights: The infrastructure_insights of this AlertsSummaryByMonitorService.
        :type infrastructure_insights: int
        """

        self._infrastructure_insights = infrastructure_insights

    @property
    def log_analytics(self):
        """Gets the log_analytics of this AlertsSummaryByMonitorService.

        Count of alerts of \"Log Analytics\"

        :return: The log_analytics of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._log_analytics

    @log_analytics.setter
    def log_analytics(self, log_analytics):
        """Sets the log_analytics of this AlertsSummaryByMonitorService.

        Count of alerts of \"Log Analytics\"

        :param log_analytics: The log_analytics of this AlertsSummaryByMonitorService.
        :type log_analytics: int
        """

        self._log_analytics = log_analytics

    @property
    def nagios(self):
        """Gets the nagios of this AlertsSummaryByMonitorService.

        Count of alerts of \"Nagios\"

        :return: The nagios of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._nagios

    @nagios.setter
    def nagios(self, nagios):
        """Sets the nagios of this AlertsSummaryByMonitorService.

        Count of alerts of \"Nagios\"

        :param nagios: The nagios of this AlertsSummaryByMonitorService.
        :type nagios: int
        """

        self._nagios = nagios

    @property
    def platform(self):
        """Gets the platform of this AlertsSummaryByMonitorService.

        Count of alerts of \"Platform\"

        :return: The platform of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._platform

    @platform.setter
    def platform(self, platform):
        """Sets the platform of this AlertsSummaryByMonitorService.

        Count of alerts of \"Platform\"

        :param platform: The platform of this AlertsSummaryByMonitorService.
        :type platform: int
        """

        self._platform = platform

    @property
    def scom(self):
        """Gets the scom of this AlertsSummaryByMonitorService.

        Count of alerts of \"SCOM\"

        :return: The scom of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._scom

    @scom.setter
    def scom(self, scom):
        """Sets the scom of this AlertsSummaryByMonitorService.

        Count of alerts of \"SCOM\"

        :param scom: The scom of this AlertsSummaryByMonitorService.
        :type scom: int
        """

        self._scom = scom

    @property
    def service_health(self):
        """Gets the service_health of this AlertsSummaryByMonitorService.

        Count of alerts of \"ServiceHealth\"

        :return: The service_health of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._service_health

    @service_health.setter
    def service_health(self, service_health):
        """Sets the service_health of this AlertsSummaryByMonitorService.

        Count of alerts of \"ServiceHealth\"

        :param service_health: The service_health of this AlertsSummaryByMonitorService.
        :type service_health: int
        """

        self._service_health = service_health

    @property
    def smart_detector(self):
        """Gets the smart_detector of this AlertsSummaryByMonitorService.

        Count of alerts of \"Smart Detector\"

        :return: The smart_detector of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._smart_detector

    @smart_detector.setter
    def smart_detector(self, smart_detector):
        """Sets the smart_detector of this AlertsSummaryByMonitorService.

        Count of alerts of \"Smart Detector\"

        :param smart_detector: The smart_detector of this AlertsSummaryByMonitorService.
        :type smart_detector: int
        """

        self._smart_detector = smart_detector

    @property
    def zabbix(self):
        """Gets the zabbix of this AlertsSummaryByMonitorService.

        Count of alerts of \"Zabbix\"

        :return: The zabbix of this AlertsSummaryByMonitorService.
        :rtype: int
        """
        return self._zabbix

    @zabbix.setter
    def zabbix(self, zabbix):
        """Sets the zabbix of this AlertsSummaryByMonitorService.

        Count of alerts of \"Zabbix\"

        :param zabbix: The zabbix of this AlertsSummaryByMonitorService.
        :type zabbix: int
        """

        self._zabbix = zabbix
