# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Condition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operator: str=None, values: List[str]=None):
        """Condition - a model defined in OpenAPI

        :param operator: The operator of this Condition.
        :param values: The values of this Condition.
        """
        self.openapi_types = {
            'operator': str,
            'values': List[str]
        }

        self.attribute_map = {
            'operator': 'operator',
            'values': 'values'
        }

        self._operator = operator
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Condition':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The condition of this Condition.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operator(self):
        """Gets the operator of this Condition.

        operator for a given condition

        :return: The operator of this Condition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this Condition.

        operator for a given condition

        :param operator: The operator of this Condition.
        :type operator: str
        """
        allowed_values = ["Equals", "NotEquals", "Contains", "DoesNotContain"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def values(self):
        """Gets the values of this Condition.

        list of values to match for a given condition.

        :return: The values of this Condition.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Condition.

        list of values to match for a given condition.

        :param values: The values of this Condition.
        :type values: List[str]
        """

        self._values = values
