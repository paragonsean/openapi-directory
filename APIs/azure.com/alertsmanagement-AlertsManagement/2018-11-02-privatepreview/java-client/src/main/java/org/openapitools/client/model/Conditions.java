/*
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-11-02-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Condition;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Conditions in alert instance to be matched for a given action rule. Default value is all. Multiple values could be provided with comma separation.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:29.686007-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Conditions {
  public static final String SERIALIZED_NAME_ALERT_RULE_ID = "alertRuleId";
  @SerializedName(SERIALIZED_NAME_ALERT_RULE_ID)
  private Condition alertRuleId;

  public static final String SERIALIZED_NAME_APPLICATION_INSIGHTS_SEARCH_RESULTS = "applicationInsightsSearchResults";
  @SerializedName(SERIALIZED_NAME_APPLICATION_INSIGHTS_SEARCH_RESULTS)
  private Condition applicationInsightsSearchResults;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private Condition description;

  public static final String SERIALIZED_NAME_LOG_ANALYTICS_SEARCH_RESULTS = "logAnalyticsSearchResults";
  @SerializedName(SERIALIZED_NAME_LOG_ANALYTICS_SEARCH_RESULTS)
  private Condition logAnalyticsSearchResults;

  public static final String SERIALIZED_NAME_MONITOR_CONDITION = "monitorCondition";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONDITION)
  private Condition monitorCondition;

  public static final String SERIALIZED_NAME_MONITOR_SERVICE = "monitorService";
  @SerializedName(SERIALIZED_NAME_MONITOR_SERVICE)
  private Condition monitorService;

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private Condition severity;

  public static final String SERIALIZED_NAME_SIGNAL_TYPE = "signalType";
  @SerializedName(SERIALIZED_NAME_SIGNAL_TYPE)
  private Condition signalType;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE = "targetResource";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE)
  private Condition targetResource;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_GROUP = "targetResourceGroup";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_GROUP)
  private Condition targetResourceGroup;

  public static final String SERIALIZED_NAME_TARGET_RESOURCE_TYPE = "targetResourceType";
  @SerializedName(SERIALIZED_NAME_TARGET_RESOURCE_TYPE)
  private Condition targetResourceType;

  public Conditions() {
  }

  public Conditions alertRuleId(Condition alertRuleId) {
    this.alertRuleId = alertRuleId;
    return this;
  }

  /**
   * Get alertRuleId
   * @return alertRuleId
   */
  @javax.annotation.Nullable
  public Condition getAlertRuleId() {
    return alertRuleId;
  }

  public void setAlertRuleId(Condition alertRuleId) {
    this.alertRuleId = alertRuleId;
  }


  public Conditions applicationInsightsSearchResults(Condition applicationInsightsSearchResults) {
    this.applicationInsightsSearchResults = applicationInsightsSearchResults;
    return this;
  }

  /**
   * Get applicationInsightsSearchResults
   * @return applicationInsightsSearchResults
   */
  @javax.annotation.Nullable
  public Condition getApplicationInsightsSearchResults() {
    return applicationInsightsSearchResults;
  }

  public void setApplicationInsightsSearchResults(Condition applicationInsightsSearchResults) {
    this.applicationInsightsSearchResults = applicationInsightsSearchResults;
  }


  public Conditions description(Condition description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public Condition getDescription() {
    return description;
  }

  public void setDescription(Condition description) {
    this.description = description;
  }


  public Conditions logAnalyticsSearchResults(Condition logAnalyticsSearchResults) {
    this.logAnalyticsSearchResults = logAnalyticsSearchResults;
    return this;
  }

  /**
   * Get logAnalyticsSearchResults
   * @return logAnalyticsSearchResults
   */
  @javax.annotation.Nullable
  public Condition getLogAnalyticsSearchResults() {
    return logAnalyticsSearchResults;
  }

  public void setLogAnalyticsSearchResults(Condition logAnalyticsSearchResults) {
    this.logAnalyticsSearchResults = logAnalyticsSearchResults;
  }


  public Conditions monitorCondition(Condition monitorCondition) {
    this.monitorCondition = monitorCondition;
    return this;
  }

  /**
   * Get monitorCondition
   * @return monitorCondition
   */
  @javax.annotation.Nullable
  public Condition getMonitorCondition() {
    return monitorCondition;
  }

  public void setMonitorCondition(Condition monitorCondition) {
    this.monitorCondition = monitorCondition;
  }


  public Conditions monitorService(Condition monitorService) {
    this.monitorService = monitorService;
    return this;
  }

  /**
   * Get monitorService
   * @return monitorService
   */
  @javax.annotation.Nullable
  public Condition getMonitorService() {
    return monitorService;
  }

  public void setMonitorService(Condition monitorService) {
    this.monitorService = monitorService;
  }


  public Conditions severity(Condition severity) {
    this.severity = severity;
    return this;
  }

  /**
   * Get severity
   * @return severity
   */
  @javax.annotation.Nullable
  public Condition getSeverity() {
    return severity;
  }

  public void setSeverity(Condition severity) {
    this.severity = severity;
  }


  public Conditions signalType(Condition signalType) {
    this.signalType = signalType;
    return this;
  }

  /**
   * Get signalType
   * @return signalType
   */
  @javax.annotation.Nullable
  public Condition getSignalType() {
    return signalType;
  }

  public void setSignalType(Condition signalType) {
    this.signalType = signalType;
  }


  public Conditions targetResource(Condition targetResource) {
    this.targetResource = targetResource;
    return this;
  }

  /**
   * Get targetResource
   * @return targetResource
   */
  @javax.annotation.Nullable
  public Condition getTargetResource() {
    return targetResource;
  }

  public void setTargetResource(Condition targetResource) {
    this.targetResource = targetResource;
  }


  public Conditions targetResourceGroup(Condition targetResourceGroup) {
    this.targetResourceGroup = targetResourceGroup;
    return this;
  }

  /**
   * Get targetResourceGroup
   * @return targetResourceGroup
   */
  @javax.annotation.Nullable
  public Condition getTargetResourceGroup() {
    return targetResourceGroup;
  }

  public void setTargetResourceGroup(Condition targetResourceGroup) {
    this.targetResourceGroup = targetResourceGroup;
  }


  public Conditions targetResourceType(Condition targetResourceType) {
    this.targetResourceType = targetResourceType;
    return this;
  }

  /**
   * Get targetResourceType
   * @return targetResourceType
   */
  @javax.annotation.Nullable
  public Condition getTargetResourceType() {
    return targetResourceType;
  }

  public void setTargetResourceType(Condition targetResourceType) {
    this.targetResourceType = targetResourceType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Conditions conditions = (Conditions) o;
    return Objects.equals(this.alertRuleId, conditions.alertRuleId) &&
        Objects.equals(this.applicationInsightsSearchResults, conditions.applicationInsightsSearchResults) &&
        Objects.equals(this.description, conditions.description) &&
        Objects.equals(this.logAnalyticsSearchResults, conditions.logAnalyticsSearchResults) &&
        Objects.equals(this.monitorCondition, conditions.monitorCondition) &&
        Objects.equals(this.monitorService, conditions.monitorService) &&
        Objects.equals(this.severity, conditions.severity) &&
        Objects.equals(this.signalType, conditions.signalType) &&
        Objects.equals(this.targetResource, conditions.targetResource) &&
        Objects.equals(this.targetResourceGroup, conditions.targetResourceGroup) &&
        Objects.equals(this.targetResourceType, conditions.targetResourceType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertRuleId, applicationInsightsSearchResults, description, logAnalyticsSearchResults, monitorCondition, monitorService, severity, signalType, targetResource, targetResourceGroup, targetResourceType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Conditions {\n");
    sb.append("    alertRuleId: ").append(toIndentedString(alertRuleId)).append("\n");
    sb.append("    applicationInsightsSearchResults: ").append(toIndentedString(applicationInsightsSearchResults)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    logAnalyticsSearchResults: ").append(toIndentedString(logAnalyticsSearchResults)).append("\n");
    sb.append("    monitorCondition: ").append(toIndentedString(monitorCondition)).append("\n");
    sb.append("    monitorService: ").append(toIndentedString(monitorService)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    signalType: ").append(toIndentedString(signalType)).append("\n");
    sb.append("    targetResource: ").append(toIndentedString(targetResource)).append("\n");
    sb.append("    targetResourceGroup: ").append(toIndentedString(targetResourceGroup)).append("\n");
    sb.append("    targetResourceType: ").append(toIndentedString(targetResourceType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertRuleId");
    openapiFields.add("applicationInsightsSearchResults");
    openapiFields.add("description");
    openapiFields.add("logAnalyticsSearchResults");
    openapiFields.add("monitorCondition");
    openapiFields.add("monitorService");
    openapiFields.add("severity");
    openapiFields.add("signalType");
    openapiFields.add("targetResource");
    openapiFields.add("targetResourceGroup");
    openapiFields.add("targetResourceType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Conditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Conditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Conditions is not found in the empty JSON string", Conditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Conditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Conditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `alertRuleId`
      if (jsonObj.get("alertRuleId") != null && !jsonObj.get("alertRuleId").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("alertRuleId"));
      }
      // validate the optional field `applicationInsightsSearchResults`
      if (jsonObj.get("applicationInsightsSearchResults") != null && !jsonObj.get("applicationInsightsSearchResults").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("applicationInsightsSearchResults"));
      }
      // validate the optional field `description`
      if (jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("description"));
      }
      // validate the optional field `logAnalyticsSearchResults`
      if (jsonObj.get("logAnalyticsSearchResults") != null && !jsonObj.get("logAnalyticsSearchResults").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("logAnalyticsSearchResults"));
      }
      // validate the optional field `monitorCondition`
      if (jsonObj.get("monitorCondition") != null && !jsonObj.get("monitorCondition").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("monitorCondition"));
      }
      // validate the optional field `monitorService`
      if (jsonObj.get("monitorService") != null && !jsonObj.get("monitorService").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("monitorService"));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("severity"));
      }
      // validate the optional field `signalType`
      if (jsonObj.get("signalType") != null && !jsonObj.get("signalType").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("signalType"));
      }
      // validate the optional field `targetResource`
      if (jsonObj.get("targetResource") != null && !jsonObj.get("targetResource").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("targetResource"));
      }
      // validate the optional field `targetResourceGroup`
      if (jsonObj.get("targetResourceGroup") != null && !jsonObj.get("targetResourceGroup").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("targetResourceGroup"));
      }
      // validate the optional field `targetResourceType`
      if (jsonObj.get("targetResourceType") != null && !jsonObj.get("targetResourceType").isJsonNull()) {
        Condition.validateJsonElement(jsonObj.get("targetResourceType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Conditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Conditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Conditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Conditions.class));

       return (TypeAdapter<T>) new TypeAdapter<Conditions>() {
           @Override
           public void write(JsonWriter out, Conditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Conditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Conditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Conditions
   * @throws IOException if the JSON string is invalid with respect to Conditions
   */
  public static Conditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Conditions.class);
  }

  /**
   * Convert an instance of Conditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

