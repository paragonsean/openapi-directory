/*
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-11-02-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionRule;
import org.openapitools.client.model.ActionRulesList;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertModification;
import org.openapitools.client.model.AlertsList;
import org.openapitools.client.model.AlertsSummary;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationsList;
import org.openapitools.client.model.PatchObject;
import org.openapitools.client.model.SmartGroup;
import org.openapitools.client.model.SmartGroupModification;
import org.openapitools.client.model.SmartGroupsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionRulesCreateUpdate
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param actionRule action rule to be created/updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesCreateUpdateCall(String subscriptionId, String resourceGroup, String actionRuleName, ActionRule actionRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionRule;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesCreateUpdateValidateBeforeCall(String subscriptionId, String resourceGroup, String actionRuleName, ActionRule actionRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'actionRule' is set
        if (actionRule == null) {
            throw new ApiException("Missing the required parameter 'actionRule' when calling actionRulesCreateUpdate(Async)");
        }

        return actionRulesCreateUpdateCall(subscriptionId, resourceGroup, actionRuleName, actionRule, _callback);

    }

    /**
     * Create/update an action rule
     * Creates/Updates a specific action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param actionRule action rule to be created/updated (required)
     * @return ActionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRule actionRulesCreateUpdate(String subscriptionId, String resourceGroup, String actionRuleName, ActionRule actionRule) throws ApiException {
        ApiResponse<ActionRule> localVarResp = actionRulesCreateUpdateWithHttpInfo(subscriptionId, resourceGroup, actionRuleName, actionRule);
        return localVarResp.getData();
    }

    /**
     * Create/update an action rule
     * Creates/Updates a specific action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param actionRule action rule to be created/updated (required)
     * @return ApiResponse&lt;ActionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRule> actionRulesCreateUpdateWithHttpInfo(String subscriptionId, String resourceGroup, String actionRuleName, ActionRule actionRule) throws ApiException {
        okhttp3.Call localVarCall = actionRulesCreateUpdateValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, actionRule, null);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/update an action rule (asynchronously)
     * Creates/Updates a specific action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param actionRule action rule to be created/updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesCreateUpdateAsync(String subscriptionId, String resourceGroup, String actionRuleName, ActionRule actionRule, final ApiCallback<ActionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesCreateUpdateValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, actionRule, _callback);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesDelete
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesDeleteCall(String subscriptionId, String resourceGroup, String actionRuleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesDeleteValidateBeforeCall(String subscriptionId, String resourceGroup, String actionRuleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesDelete(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling actionRulesDelete(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesDelete(Async)");
        }

        return actionRulesDeleteCall(subscriptionId, resourceGroup, actionRuleName, _callback);

    }

    /**
     * Delete action rule
     * Deletes a given action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void actionRulesDelete(String subscriptionId, String resourceGroup, String actionRuleName) throws ApiException {
        actionRulesDeleteWithHttpInfo(subscriptionId, resourceGroup, actionRuleName);
    }

    /**
     * Delete action rule
     * Deletes a given action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionRulesDeleteWithHttpInfo(String subscriptionId, String resourceGroup, String actionRuleName) throws ApiException {
        okhttp3.Call localVarCall = actionRulesDeleteValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete action rule (asynchronously)
     * Deletes a given action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesDeleteAsync(String subscriptionId, String resourceGroup, String actionRuleName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesDeleteValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesGetAllResourceGroup
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetAllResourceGroupCall(String subscriptionId, String resourceGroup, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/actionRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesGetAllResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroup, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesGetAllResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling actionRulesGetAllResourceGroup(Async)");
        }

        return actionRulesGetAllResourceGroupCall(subscriptionId, resourceGroup, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, _callback);

    }

    /**
     * Get all action rules created in a resource group
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @return ActionRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRulesList actionRulesGetAllResourceGroup(String subscriptionId, String resourceGroup, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService) throws ApiException {
        ApiResponse<ActionRulesList> localVarResp = actionRulesGetAllResourceGroupWithHttpInfo(subscriptionId, resourceGroup, targetResourceGroup, targetResourceType, targetResource, severity, monitorService);
        return localVarResp.getData();
    }

    /**
     * Get all action rules created in a resource group
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @return ApiResponse&lt;ActionRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRulesList> actionRulesGetAllResourceGroupWithHttpInfo(String subscriptionId, String resourceGroup, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService) throws ApiException {
        okhttp3.Call localVarCall = actionRulesGetAllResourceGroupValidateBeforeCall(subscriptionId, resourceGroup, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, null);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all action rules created in a resource group (asynchronously)
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetAllResourceGroupAsync(String subscriptionId, String resourceGroup, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, final ApiCallback<ActionRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesGetAllResourceGroupValidateBeforeCall(subscriptionId, resourceGroup, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, _callback);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesGetAllSubscription
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetAllSubscriptionCall(String subscriptionId, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/actionRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesGetAllSubscriptionValidateBeforeCall(String subscriptionId, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesGetAllSubscription(Async)");
        }

        return actionRulesGetAllSubscriptionCall(subscriptionId, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, _callback);

    }

    /**
     * Get all action rule in a given subscription
     * List all action rules of the subscription and given input filters
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @return ActionRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRulesList actionRulesGetAllSubscription(String subscriptionId, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService) throws ApiException {
        ApiResponse<ActionRulesList> localVarResp = actionRulesGetAllSubscriptionWithHttpInfo(subscriptionId, targetResourceGroup, targetResourceType, targetResource, severity, monitorService);
        return localVarResp.getData();
    }

    /**
     * Get all action rule in a given subscription
     * List all action rules of the subscription and given input filters
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @return ApiResponse&lt;ActionRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRulesList> actionRulesGetAllSubscriptionWithHttpInfo(String subscriptionId, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService) throws ApiException {
        okhttp3.Call localVarCall = actionRulesGetAllSubscriptionValidateBeforeCall(subscriptionId, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, null);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all action rule in a given subscription (asynchronously)
     * List all action rules of the subscription and given input filters
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param targetResource filter by target resource (optional)
     * @param severity filter by severity (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetAllSubscriptionAsync(String subscriptionId, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, final ApiCallback<ActionRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesGetAllSubscriptionValidateBeforeCall(subscriptionId, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, _callback);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesGetByName
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetByNameCall(String subscriptionId, String resourceGroup, String actionRuleName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesGetByNameValidateBeforeCall(String subscriptionId, String resourceGroup, String actionRuleName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesGetByName(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling actionRulesGetByName(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesGetByName(Async)");
        }

        return actionRulesGetByNameCall(subscriptionId, resourceGroup, actionRuleName, _callback);

    }

    /**
     * Get action rule by name
     * Get a specific action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @return ActionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRule actionRulesGetByName(String subscriptionId, String resourceGroup, String actionRuleName) throws ApiException {
        ApiResponse<ActionRule> localVarResp = actionRulesGetByNameWithHttpInfo(subscriptionId, resourceGroup, actionRuleName);
        return localVarResp.getData();
    }

    /**
     * Get action rule by name
     * Get a specific action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @return ApiResponse&lt;ActionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRule> actionRulesGetByNameWithHttpInfo(String subscriptionId, String resourceGroup, String actionRuleName) throws ApiException {
        okhttp3.Call localVarCall = actionRulesGetByNameValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, null);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get action rule by name (asynchronously)
     * Get a specific action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetByNameAsync(String subscriptionId, String resourceGroup, String actionRuleName, final ApiCallback<ActionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesGetByNameValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, _callback);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesPatch
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesPatchCall(String subscriptionId, String resourceGroup, String actionRuleName, PatchObject actionRulePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionRulePatch;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroup" + "}", localVarApiClient.escapeString(resourceGroup.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesPatchValidateBeforeCall(String subscriptionId, String resourceGroup, String actionRuleName, PatchObject actionRulePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesPatch(Async)");
        }

        // verify the required parameter 'resourceGroup' is set
        if (resourceGroup == null) {
            throw new ApiException("Missing the required parameter 'resourceGroup' when calling actionRulesPatch(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesPatch(Async)");
        }

        // verify the required parameter 'actionRulePatch' is set
        if (actionRulePatch == null) {
            throw new ApiException("Missing the required parameter 'actionRulePatch' when calling actionRulesPatch(Async)");
        }

        return actionRulesPatchCall(subscriptionId, resourceGroup, actionRuleName, actionRulePatch, _callback);

    }

    /**
     * Patch action rule
     * Update enabled flag and/or tags for the given action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void actionRulesPatch(String subscriptionId, String resourceGroup, String actionRuleName, PatchObject actionRulePatch) throws ApiException {
        actionRulesPatchWithHttpInfo(subscriptionId, resourceGroup, actionRuleName, actionRulePatch);
    }

    /**
     * Patch action rule
     * Update enabled flag and/or tags for the given action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> actionRulesPatchWithHttpInfo(String subscriptionId, String resourceGroup, String actionRuleName, PatchObject actionRulePatch) throws ApiException {
        okhttp3.Call localVarCall = actionRulesPatchValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, actionRulePatch, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Patch action rule (asynchronously)
     * Update enabled flag and/or tags for the given action rule
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroup Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesPatchAsync(String subscriptionId, String resourceGroup, String actionRuleName, PatchObject actionRulePatch, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesPatchValidateBeforeCall(subscriptionId, resourceGroup, actionRuleName, actionRulePatch, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsChangeState
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsChangeStateCall(String subscriptionId, String alertId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (newState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newState", newState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsChangeStateValidateBeforeCall(String subscriptionId, String alertId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'newState' is set
        if (newState == null) {
            throw new ApiException("Missing the required parameter 'newState' when calling alertsChangeState(Async)");
        }

        return alertsChangeStateCall(subscriptionId, alertId, apiVersion, newState, _callback);

    }

    /**
     * 
     * Change the state of the alert.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsChangeState(String subscriptionId, String alertId, String apiVersion, String newState) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsChangeStateWithHttpInfo(subscriptionId, alertId, apiVersion, newState);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the state of the alert.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsChangeStateWithHttpInfo(String subscriptionId, String alertId, String apiVersion, String newState) throws ApiException {
        okhttp3.Call localVarCall = alertsChangeStateValidateBeforeCall(subscriptionId, alertId, apiVersion, newState, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the state of the alert.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsChangeStateAsync(String subscriptionId, String alertId, String apiVersion, String newState, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsChangeStateValidateBeforeCall(subscriptionId, alertId, apiVersion, newState, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetAll
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param alertState filter by state (optional)
     * @param smartGroupId filter by smart Group Id (optional)
     * @param includePayload include payload field content, default value is &#39;false&#39;. (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetAllCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String alertState, String smartGroupId, Boolean includePayload, Integer pageCount, String sortBy, String sortOrder, String timeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (alertState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertState", alertState));
        }

        if (smartGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartGroupId", smartGroupId));
        }

        if (includePayload != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includePayload", includePayload));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetAllValidateBeforeCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String alertState, String smartGroupId, Boolean includePayload, Integer pageCount, String sortBy, String sortOrder, String timeRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetAll(Async)");
        }

        return alertsGetAllCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange, _callback);

    }

    /**
     * 
     * List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param alertState filter by state (optional)
     * @param smartGroupId filter by smart Group Id (optional)
     * @param includePayload include payload field content, default value is &#39;false&#39;. (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @return AlertsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsList alertsGetAll(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String alertState, String smartGroupId, Boolean includePayload, Integer pageCount, String sortBy, String sortOrder, String timeRange) throws ApiException {
        ApiResponse<AlertsList> localVarResp = alertsGetAllWithHttpInfo(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param alertState filter by state (optional)
     * @param smartGroupId filter by smart Group Id (optional)
     * @param includePayload include payload field content, default value is &#39;false&#39;. (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @return ApiResponse&lt;AlertsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsList> alertsGetAllWithHttpInfo(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String alertState, String smartGroupId, Boolean includePayload, Integer pageCount, String sortBy, String sortOrder, String timeRange) throws ApiException {
        okhttp3.Call localVarCall = alertsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange, null);
        Type localVarReturnType = new TypeToken<AlertsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param alertState filter by state (optional)
     * @param smartGroupId filter by smart Group Id (optional)
     * @param includePayload include payload field content, default value is &#39;false&#39;. (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetAllAsync(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String alertState, String smartGroupId, Boolean includePayload, Integer pageCount, String sortBy, String sortOrder, String timeRange, final ApiCallback<AlertsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange, _callback);
        Type localVarReturnType = new TypeToken<AlertsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetById
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetByIdCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByIdValidateBeforeCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetById(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetById(Async)");
        }

        return alertsGetByIdCall(subscriptionId, alertId, apiVersion, _callback);

    }

    /**
     * Get a specific alert.
     * Get information related to a specific alert
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsGetById(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByIdWithHttpInfo(subscriptionId, alertId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a specific alert.
     * Get information related to a specific alert
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsGetByIdWithHttpInfo(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByIdValidateBeforeCall(subscriptionId, alertId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific alert. (asynchronously)
     * Get information related to a specific alert
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetByIdAsync(String subscriptionId, String alertId, String apiVersion, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByIdValidateBeforeCall(subscriptionId, alertId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetHistory
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetHistoryCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetHistoryValidateBeforeCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetHistory(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetHistory(Async)");
        }

        return alertsGetHistoryCall(subscriptionId, alertId, apiVersion, _callback);

    }

    /**
     * 
     * Get the history of the changes of an alert.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @return AlertModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertModification alertsGetHistory(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        ApiResponse<AlertModification> localVarResp = alertsGetHistoryWithHttpInfo(subscriptionId, alertId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the history of the changes of an alert.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;AlertModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertModification> alertsGetHistoryWithHttpInfo(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = alertsGetHistoryValidateBeforeCall(subscriptionId, alertId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AlertModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the history of the changes of an alert.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param alertId Unique ID of an alert object. (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetHistoryAsync(String subscriptionId, String alertId, String apiVersion, final ApiCallback<AlertModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetHistoryValidateBeforeCall(subscriptionId, alertId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AlertModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetSummary
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSummaryCall(String subscriptionId, String apiVersion, String targetResourceGroup, String timeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetSummaryValidateBeforeCall(String subscriptionId, String apiVersion, String targetResourceGroup, String timeRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetSummary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetSummary(Async)");
        }

        return alertsGetSummaryCall(subscriptionId, apiVersion, targetResourceGroup, timeRange, _callback);

    }

    /**
     * 
     * Summary of alerts with the count each severity.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @return AlertsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsSummary alertsGetSummary(String subscriptionId, String apiVersion, String targetResourceGroup, String timeRange) throws ApiException {
        ApiResponse<AlertsSummary> localVarResp = alertsGetSummaryWithHttpInfo(subscriptionId, apiVersion, targetResourceGroup, timeRange);
        return localVarResp.getData();
    }

    /**
     * 
     * Summary of alerts with the count each severity.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @return ApiResponse&lt;AlertsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsSummary> alertsGetSummaryWithHttpInfo(String subscriptionId, String apiVersion, String targetResourceGroup, String timeRange) throws ApiException {
        okhttp3.Call localVarCall = alertsGetSummaryValidateBeforeCall(subscriptionId, apiVersion, targetResourceGroup, timeRange, null);
        Type localVarReturnType = new TypeToken<AlertsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Summary of alerts with the count each severity.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSummaryAsync(String subscriptionId, String apiVersion, String targetResourceGroup, String timeRange, final ApiCallback<AlertsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetSummaryValidateBeforeCall(subscriptionId, apiVersion, targetResourceGroup, timeRange, _callback);
        Type localVarReturnType = new TypeToken<AlertsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.AlertsManagement/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion client API version (required)
     * @return OperationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public OperationsList operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationsList> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;OperationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsList> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsChangeState
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsChangeStateCall(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (newState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newState", newState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsChangeStateValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'newState' is set
        if (newState == null) {
            throw new ApiException("Missing the required parameter 'newState' when calling smartGroupsChangeState(Async)");
        }

        return smartGroupsChangeStateCall(subscriptionId, smartGroupId, apiVersion, newState, _callback);

    }

    /**
     * 
     * Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @return SmartGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroup smartGroupsChangeState(String subscriptionId, String smartGroupId, String apiVersion, String newState) throws ApiException {
        ApiResponse<SmartGroup> localVarResp = smartGroupsChangeStateWithHttpInfo(subscriptionId, smartGroupId, apiVersion, newState);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @return ApiResponse&lt;SmartGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroup> smartGroupsChangeStateWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion, String newState) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsChangeStateValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, newState, null);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param newState filter by state (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsChangeStateAsync(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback<SmartGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsChangeStateValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, newState, _callback);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetAll
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param smartGroupState filter by state (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetAllCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (smartGroupState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartGroupState", smartGroupState));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetAllValidateBeforeCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetAll(Async)");
        }

        return smartGroupsGetAllCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, _callback);

    }

    /**
     * Get all smartGroups within the subscription
     * List all the smartGroups within the specified subscription. 
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param smartGroupState filter by state (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @return SmartGroupsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroupsList smartGroupsGetAll(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<SmartGroupsList> localVarResp = smartGroupsGetAllWithHttpInfo(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get all smartGroups within the subscription
     * List all the smartGroups within the specified subscription. 
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param smartGroupState filter by state (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @return ApiResponse&lt;SmartGroupsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroupsList> smartGroupsGetAllWithHttpInfo(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<SmartGroupsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all smartGroups within the subscription (asynchronously)
     * List all the smartGroups within the specified subscription. 
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion client API version (required)
     * @param targetResource filter by target resource (optional)
     * @param targetResourceGroup filter by target resource group name (optional)
     * @param targetResourceType filter by target resource type (optional)
     * @param monitorService filter by monitor service which is the source of the alert object. (optional)
     * @param monitorCondition filter by monitor condition which is the state of the alert at monitor service (optional)
     * @param severity filter by severity (optional)
     * @param smartGroupState filter by state (optional)
     * @param timeRange filter by time range, default value is 1 day (optional)
     * @param pageCount number of items per page, default value is &#39;25&#39;. (optional)
     * @param sortBy sort the query results by input field, default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder sort the query results order in either ascending or descending, default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetAllAsync(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback<SmartGroupsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<SmartGroupsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetById
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetByIdCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetByIdValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetById(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetById(Async)");
        }

        return smartGroupsGetByIdCall(subscriptionId, smartGroupId, apiVersion, _callback);

    }

    /**
     * Get information of smart alerts group.
     * Get details of smart group.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @return SmartGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroup smartGroupsGetById(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        ApiResponse<SmartGroup> localVarResp = smartGroupsGetByIdWithHttpInfo(subscriptionId, smartGroupId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get information of smart alerts group.
     * Get details of smart group.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;SmartGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroup> smartGroupsGetByIdWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetByIdValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information of smart alerts group. (asynchronously)
     * Get details of smart group.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetByIdAsync(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback<SmartGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetByIdValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetHistory
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetHistoryCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetHistoryValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetHistory(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsGetHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetHistory(Async)");
        }

        return smartGroupsGetHistoryCall(subscriptionId, smartGroupId, apiVersion, _callback);

    }

    /**
     * 
     * Get the history of the changes of smart group.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @return SmartGroupModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroupModification smartGroupsGetHistory(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        ApiResponse<SmartGroupModification> localVarResp = smartGroupsGetHistoryWithHttpInfo(subscriptionId, smartGroupId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the history of the changes of smart group.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;SmartGroupModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroupModification> smartGroupsGetHistoryWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetHistoryValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SmartGroupModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the history of the changes of smart group.
     * @param subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart Group Id (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetHistoryAsync(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback<SmartGroupModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetHistoryValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SmartGroupModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
