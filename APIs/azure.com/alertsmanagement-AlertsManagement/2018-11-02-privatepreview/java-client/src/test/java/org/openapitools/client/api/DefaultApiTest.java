/*
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-11-02-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ActionRule;
import org.openapitools.client.model.ActionRulesList;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertModification;
import org.openapitools.client.model.AlertsList;
import org.openapitools.client.model.AlertsSummary;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationsList;
import org.openapitools.client.model.PatchObject;
import org.openapitools.client.model.SmartGroup;
import org.openapitools.client.model.SmartGroupModification;
import org.openapitools.client.model.SmartGroupsList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create/update an action rule
     *
     * Creates/Updates a specific action rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRulesCreateUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroup = null;
        String actionRuleName = null;
        ActionRule actionRule = null;
        ActionRule response = api.actionRulesCreateUpdate(subscriptionId, resourceGroup, actionRuleName, actionRule);
        // TODO: test validations
    }

    /**
     * Delete action rule
     *
     * Deletes a given action rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRulesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroup = null;
        String actionRuleName = null;
        api.actionRulesDelete(subscriptionId, resourceGroup, actionRuleName);
        // TODO: test validations
    }

    /**
     * Get all action rules created in a resource group
     *
     * List all action rules of the subscription, created in given resource group and given input filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRulesGetAllResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroup = null;
        String targetResourceGroup = null;
        String targetResourceType = null;
        String targetResource = null;
        String severity = null;
        String monitorService = null;
        ActionRulesList response = api.actionRulesGetAllResourceGroup(subscriptionId, resourceGroup, targetResourceGroup, targetResourceType, targetResource, severity, monitorService);
        // TODO: test validations
    }

    /**
     * Get all action rule in a given subscription
     *
     * List all action rules of the subscription and given input filters
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRulesGetAllSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String targetResourceGroup = null;
        String targetResourceType = null;
        String targetResource = null;
        String severity = null;
        String monitorService = null;
        ActionRulesList response = api.actionRulesGetAllSubscription(subscriptionId, targetResourceGroup, targetResourceType, targetResource, severity, monitorService);
        // TODO: test validations
    }

    /**
     * Get action rule by name
     *
     * Get a specific action rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRulesGetByNameTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroup = null;
        String actionRuleName = null;
        ActionRule response = api.actionRulesGetByName(subscriptionId, resourceGroup, actionRuleName);
        // TODO: test validations
    }

    /**
     * Patch action rule
     *
     * Update enabled flag and/or tags for the given action rule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void actionRulesPatchTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroup = null;
        String actionRuleName = null;
        PatchObject actionRulePatch = null;
        api.actionRulesPatch(subscriptionId, resourceGroup, actionRuleName, actionRulePatch);
        // TODO: test validations
    }

    /**
     * Change the state of the alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsChangeStateTest() throws ApiException {
        String subscriptionId = null;
        String alertId = null;
        String apiVersion = null;
        String newState = null;
        Alert response = api.alertsChangeState(subscriptionId, alertId, apiVersion, newState);
        // TODO: test validations
    }

    /**
     * List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetAllTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String targetResource = null;
        String targetResourceGroup = null;
        String targetResourceType = null;
        String monitorService = null;
        String monitorCondition = null;
        String severity = null;
        String alertState = null;
        String smartGroupId = null;
        Boolean includePayload = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        String timeRange = null;
        AlertsList response = api.alertsGetAll(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, alertState, smartGroupId, includePayload, pageCount, sortBy, sortOrder, timeRange);
        // TODO: test validations
    }

    /**
     * Get a specific alert.
     *
     * Get information related to a specific alert
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetByIdTest() throws ApiException {
        String subscriptionId = null;
        String alertId = null;
        String apiVersion = null;
        Alert response = api.alertsGetById(subscriptionId, alertId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the history of the changes of an alert.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetHistoryTest() throws ApiException {
        String subscriptionId = null;
        String alertId = null;
        String apiVersion = null;
        AlertModification response = api.alertsGetHistory(subscriptionId, alertId, apiVersion);
        // TODO: test validations
    }

    /**
     * Summary of alerts with the count each severity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void alertsGetSummaryTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String targetResourceGroup = null;
        String timeRange = null;
        AlertsSummary response = api.alertsGetSummary(subscriptionId, apiVersion, targetResourceGroup, timeRange);
        // TODO: test validations
    }

    /**
     * List all operations available through Azure Alerts Management Resource Provider.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void operationsListTest() throws ApiException {
        String apiVersion = null;
        OperationsList response = api.operationsList(apiVersion);
        // TODO: test validations
    }

    /**
     * Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsChangeStateTest() throws ApiException {
        String subscriptionId = null;
        String smartGroupId = null;
        String apiVersion = null;
        String newState = null;
        SmartGroup response = api.smartGroupsChangeState(subscriptionId, smartGroupId, apiVersion, newState);
        // TODO: test validations
    }

    /**
     * Get all smartGroups within the subscription
     *
     * List all the smartGroups within the specified subscription. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsGetAllTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String targetResource = null;
        String targetResourceGroup = null;
        String targetResourceType = null;
        String monitorService = null;
        String monitorCondition = null;
        String severity = null;
        String smartGroupState = null;
        String timeRange = null;
        Integer pageCount = null;
        String sortBy = null;
        String sortOrder = null;
        SmartGroupsList response = api.smartGroupsGetAll(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder);
        // TODO: test validations
    }

    /**
     * Get information of smart alerts group.
     *
     * Get details of smart group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsGetByIdTest() throws ApiException {
        String subscriptionId = null;
        String smartGroupId = null;
        String apiVersion = null;
        SmartGroup response = api.smartGroupsGetById(subscriptionId, smartGroupId, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the history of the changes of smart group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void smartGroupsGetHistoryTest() throws ApiException {
        String subscriptionId = null;
        String smartGroupId = null;
        String apiVersion = null;
        SmartGroupModification response = api.smartGroupsGetHistory(subscriptionId, smartGroupId, apiVersion);
        // TODO: test validations
    }

}
