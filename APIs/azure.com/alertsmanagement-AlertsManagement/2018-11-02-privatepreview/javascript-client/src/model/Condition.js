/**
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-11-02-privatepreview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Condition model module.
 * @module model/Condition
 * @version 2018-11-02-privatepreview
 */
class Condition {
    /**
     * Constructs a new <code>Condition</code>.
     * condition to trigger an action rule
     * @alias module:model/Condition
     */
    constructor() { 
        
        Condition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Condition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Condition} obj Optional instance to populate.
     * @return {module:model/Condition} The populated <code>Condition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Condition();

            if (data.hasOwnProperty('operator')) {
                obj['operator'] = ApiClient.convertToType(data['operator'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Condition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Condition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['operator'] && !(typeof data['operator'] === 'string' || data['operator'] instanceof String)) {
            throw new Error("Expected the field `operator` to be a primitive type in the JSON string but got " + data['operator']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * operator for a given condition
 * @member {module:model/Condition.OperatorEnum} operator
 */
Condition.prototype['operator'] = undefined;

/**
 * list of values to match for a given condition.
 * @member {Array.<String>} values
 */
Condition.prototype['values'] = undefined;





/**
 * Allowed values for the <code>operator</code> property.
 * @enum {String}
 * @readonly
 */
Condition['OperatorEnum'] = {

    /**
     * value: "Equals"
     * @const
     */
    "Equals": "Equals",

    /**
     * value: "NotEquals"
     * @const
     */
    "NotEquals": "NotEquals",

    /**
     * value: "Contains"
     * @const
     */
    "Contains": "Contains",

    /**
     * value: "DoesNotContain"
     * @const
     */
    "DoesNotContain": "DoesNotContain"
};



export default Condition;

