# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.condition import Condition
from openapi_server import util


class Conditions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alert_context: Condition=None, alert_rule_id: Condition=None, description: Condition=None, monitor_condition: Condition=None, monitor_service: Condition=None, severity: Condition=None, target_resource_type: Condition=None):
        """Conditions - a model defined in OpenAPI

        :param alert_context: The alert_context of this Conditions.
        :param alert_rule_id: The alert_rule_id of this Conditions.
        :param description: The description of this Conditions.
        :param monitor_condition: The monitor_condition of this Conditions.
        :param monitor_service: The monitor_service of this Conditions.
        :param severity: The severity of this Conditions.
        :param target_resource_type: The target_resource_type of this Conditions.
        """
        self.openapi_types = {
            'alert_context': Condition,
            'alert_rule_id': Condition,
            'description': Condition,
            'monitor_condition': Condition,
            'monitor_service': Condition,
            'severity': Condition,
            'target_resource_type': Condition
        }

        self.attribute_map = {
            'alert_context': 'alertContext',
            'alert_rule_id': 'alertRuleId',
            'description': 'description',
            'monitor_condition': 'monitorCondition',
            'monitor_service': 'monitorService',
            'severity': 'severity',
            'target_resource_type': 'targetResourceType'
        }

        self._alert_context = alert_context
        self._alert_rule_id = alert_rule_id
        self._description = description
        self._monitor_condition = monitor_condition
        self._monitor_service = monitor_service
        self._severity = severity
        self._target_resource_type = target_resource_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Conditions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Conditions of this Conditions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alert_context(self):
        """Gets the alert_context of this Conditions.


        :return: The alert_context of this Conditions.
        :rtype: Condition
        """
        return self._alert_context

    @alert_context.setter
    def alert_context(self, alert_context):
        """Sets the alert_context of this Conditions.


        :param alert_context: The alert_context of this Conditions.
        :type alert_context: Condition
        """

        self._alert_context = alert_context

    @property
    def alert_rule_id(self):
        """Gets the alert_rule_id of this Conditions.


        :return: The alert_rule_id of this Conditions.
        :rtype: Condition
        """
        return self._alert_rule_id

    @alert_rule_id.setter
    def alert_rule_id(self, alert_rule_id):
        """Sets the alert_rule_id of this Conditions.


        :param alert_rule_id: The alert_rule_id of this Conditions.
        :type alert_rule_id: Condition
        """

        self._alert_rule_id = alert_rule_id

    @property
    def description(self):
        """Gets the description of this Conditions.


        :return: The description of this Conditions.
        :rtype: Condition
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Conditions.


        :param description: The description of this Conditions.
        :type description: Condition
        """

        self._description = description

    @property
    def monitor_condition(self):
        """Gets the monitor_condition of this Conditions.


        :return: The monitor_condition of this Conditions.
        :rtype: Condition
        """
        return self._monitor_condition

    @monitor_condition.setter
    def monitor_condition(self, monitor_condition):
        """Sets the monitor_condition of this Conditions.


        :param monitor_condition: The monitor_condition of this Conditions.
        :type monitor_condition: Condition
        """

        self._monitor_condition = monitor_condition

    @property
    def monitor_service(self):
        """Gets the monitor_service of this Conditions.


        :return: The monitor_service of this Conditions.
        :rtype: Condition
        """
        return self._monitor_service

    @monitor_service.setter
    def monitor_service(self, monitor_service):
        """Sets the monitor_service of this Conditions.


        :param monitor_service: The monitor_service of this Conditions.
        :type monitor_service: Condition
        """

        self._monitor_service = monitor_service

    @property
    def severity(self):
        """Gets the severity of this Conditions.


        :return: The severity of this Conditions.
        :rtype: Condition
        """
        return self._severity

    @severity.setter
    def severity(self, severity):
        """Sets the severity of this Conditions.


        :param severity: The severity of this Conditions.
        :type severity: Condition
        """

        self._severity = severity

    @property
    def target_resource_type(self):
        """Gets the target_resource_type of this Conditions.


        :return: The target_resource_type of this Conditions.
        :rtype: Condition
        """
        return self._target_resource_type

    @target_resource_type.setter
    def target_resource_type(self, target_resource_type):
        """Sets the target_resource_type of this Conditions.


        :param target_resource_type: The target_resource_type of this Conditions.
        :type target_resource_type: Condition
        """

        self._target_resource_type = target_resource_type
