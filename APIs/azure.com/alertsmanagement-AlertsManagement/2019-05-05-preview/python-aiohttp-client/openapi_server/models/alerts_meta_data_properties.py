# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertsMetaDataProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_identifier: str=None):
        """AlertsMetaDataProperties - a model defined in OpenAPI

        :param metadata_identifier: The metadata_identifier of this AlertsMetaDataProperties.
        """
        self.openapi_types = {
            'metadata_identifier': str
        }

        self.attribute_map = {
            'metadata_identifier': 'metadataIdentifier'
        }

        self._metadata_identifier = metadata_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertsMetaDataProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertsMetaDataProperties of this AlertsMetaDataProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_identifier(self):
        """Gets the metadata_identifier of this AlertsMetaDataProperties.

        Identification of the information to be retrieved by API call

        :return: The metadata_identifier of this AlertsMetaDataProperties.
        :rtype: str
        """
        return self._metadata_identifier

    @metadata_identifier.setter
    def metadata_identifier(self, metadata_identifier):
        """Sets the metadata_identifier of this AlertsMetaDataProperties.

        Identification of the information to be retrieved by API call

        :param metadata_identifier: The metadata_identifier of this AlertsMetaDataProperties.
        :type metadata_identifier: str
        """
        allowed_values = ["MonitorServiceList"]  # noqa: E501
        if metadata_identifier not in allowed_values:
            raise ValueError(
                "Invalid value for `metadata_identifier` ({0}), must be one of {1}"
                .format(metadata_identifier, allowed_values)
            )

        self._metadata_identifier = metadata_identifier
