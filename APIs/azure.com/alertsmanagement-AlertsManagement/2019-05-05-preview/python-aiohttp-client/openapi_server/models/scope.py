# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Scope(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope_type: str=None, values: List[str]=None):
        """Scope - a model defined in OpenAPI

        :param scope_type: The scope_type of this Scope.
        :param values: The values of this Scope.
        """
        self.openapi_types = {
            'scope_type': str,
            'values': List[str]
        }

        self.attribute_map = {
            'scope_type': 'scopeType',
            'values': 'values'
        }

        self._scope_type = scope_type
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Scope':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Scope of this Scope.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope_type(self):
        """Gets the scope_type of this Scope.

        type of target scope

        :return: The scope_type of this Scope.
        :rtype: str
        """
        return self._scope_type

    @scope_type.setter
    def scope_type(self, scope_type):
        """Sets the scope_type of this Scope.

        type of target scope

        :param scope_type: The scope_type of this Scope.
        :type scope_type: str
        """
        allowed_values = ["ResourceGroup", "Resource"]  # noqa: E501
        if scope_type not in allowed_values:
            raise ValueError(
                "Invalid value for `scope_type` ({0}), must be one of {1}"
                .format(scope_type, allowed_values)
            )

        self._scope_type = scope_type

    @property
    def values(self):
        """Gets the values of this Scope.

        list of ARM IDs of the given scope type which will be the target of the given action rule.

        :return: The values of this Scope.
        :rtype: List[str]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this Scope.

        list of ARM IDs of the given scope type which will be the target of the given action rule.

        :param values: The values of this Scope.
        :type values: List[str]
        """

        self._values = values
