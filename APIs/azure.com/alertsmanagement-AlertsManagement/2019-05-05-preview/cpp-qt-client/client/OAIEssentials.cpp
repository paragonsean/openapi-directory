/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEssentials.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEssentials::OAIEssentials(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEssentials::OAIEssentials() {
    this->initializeModel();
}

OAIEssentials::~OAIEssentials() {}

void OAIEssentials::initializeModel() {

    m_alert_rule_isSet = false;
    m_alert_rule_isValid = false;

    m_alert_state_isSet = false;
    m_alert_state_isValid = false;

    m_last_modified_date_time_isSet = false;
    m_last_modified_date_time_isValid = false;

    m_last_modified_user_name_isSet = false;
    m_last_modified_user_name_isValid = false;

    m_monitor_condition_isSet = false;
    m_monitor_condition_isValid = false;

    m_monitor_condition_resolved_date_time_isSet = false;
    m_monitor_condition_resolved_date_time_isValid = false;

    m_monitor_service_isSet = false;
    m_monitor_service_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_signal_type_isSet = false;
    m_signal_type_isValid = false;

    m_smart_group_id_isSet = false;
    m_smart_group_id_isValid = false;

    m_smart_grouping_reason_isSet = false;
    m_smart_grouping_reason_isValid = false;

    m_source_created_id_isSet = false;
    m_source_created_id_isValid = false;

    m_start_date_time_isSet = false;
    m_start_date_time_isValid = false;

    m_target_resource_isSet = false;
    m_target_resource_isValid = false;

    m_target_resource_group_isSet = false;
    m_target_resource_group_isValid = false;

    m_target_resource_name_isSet = false;
    m_target_resource_name_isValid = false;

    m_target_resource_type_isSet = false;
    m_target_resource_type_isValid = false;
}

void OAIEssentials::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEssentials::fromJsonObject(QJsonObject json) {

    m_alert_rule_isValid = ::OpenAPI::fromJsonValue(m_alert_rule, json[QString("alertRule")]);
    m_alert_rule_isSet = !json[QString("alertRule")].isNull() && m_alert_rule_isValid;

    m_alert_state_isValid = ::OpenAPI::fromJsonValue(m_alert_state, json[QString("alertState")]);
    m_alert_state_isSet = !json[QString("alertState")].isNull() && m_alert_state_isValid;

    m_last_modified_date_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_date_time, json[QString("lastModifiedDateTime")]);
    m_last_modified_date_time_isSet = !json[QString("lastModifiedDateTime")].isNull() && m_last_modified_date_time_isValid;

    m_last_modified_user_name_isValid = ::OpenAPI::fromJsonValue(m_last_modified_user_name, json[QString("lastModifiedUserName")]);
    m_last_modified_user_name_isSet = !json[QString("lastModifiedUserName")].isNull() && m_last_modified_user_name_isValid;

    m_monitor_condition_isValid = ::OpenAPI::fromJsonValue(m_monitor_condition, json[QString("monitorCondition")]);
    m_monitor_condition_isSet = !json[QString("monitorCondition")].isNull() && m_monitor_condition_isValid;

    m_monitor_condition_resolved_date_time_isValid = ::OpenAPI::fromJsonValue(m_monitor_condition_resolved_date_time, json[QString("monitorConditionResolvedDateTime")]);
    m_monitor_condition_resolved_date_time_isSet = !json[QString("monitorConditionResolvedDateTime")].isNull() && m_monitor_condition_resolved_date_time_isValid;

    m_monitor_service_isValid = ::OpenAPI::fromJsonValue(m_monitor_service, json[QString("monitorService")]);
    m_monitor_service_isSet = !json[QString("monitorService")].isNull() && m_monitor_service_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_signal_type_isValid = ::OpenAPI::fromJsonValue(m_signal_type, json[QString("signalType")]);
    m_signal_type_isSet = !json[QString("signalType")].isNull() && m_signal_type_isValid;

    m_smart_group_id_isValid = ::OpenAPI::fromJsonValue(m_smart_group_id, json[QString("smartGroupId")]);
    m_smart_group_id_isSet = !json[QString("smartGroupId")].isNull() && m_smart_group_id_isValid;

    m_smart_grouping_reason_isValid = ::OpenAPI::fromJsonValue(m_smart_grouping_reason, json[QString("smartGroupingReason")]);
    m_smart_grouping_reason_isSet = !json[QString("smartGroupingReason")].isNull() && m_smart_grouping_reason_isValid;

    m_source_created_id_isValid = ::OpenAPI::fromJsonValue(m_source_created_id, json[QString("sourceCreatedId")]);
    m_source_created_id_isSet = !json[QString("sourceCreatedId")].isNull() && m_source_created_id_isValid;

    m_start_date_time_isValid = ::OpenAPI::fromJsonValue(m_start_date_time, json[QString("startDateTime")]);
    m_start_date_time_isSet = !json[QString("startDateTime")].isNull() && m_start_date_time_isValid;

    m_target_resource_isValid = ::OpenAPI::fromJsonValue(m_target_resource, json[QString("targetResource")]);
    m_target_resource_isSet = !json[QString("targetResource")].isNull() && m_target_resource_isValid;

    m_target_resource_group_isValid = ::OpenAPI::fromJsonValue(m_target_resource_group, json[QString("targetResourceGroup")]);
    m_target_resource_group_isSet = !json[QString("targetResourceGroup")].isNull() && m_target_resource_group_isValid;

    m_target_resource_name_isValid = ::OpenAPI::fromJsonValue(m_target_resource_name, json[QString("targetResourceName")]);
    m_target_resource_name_isSet = !json[QString("targetResourceName")].isNull() && m_target_resource_name_isValid;

    m_target_resource_type_isValid = ::OpenAPI::fromJsonValue(m_target_resource_type, json[QString("targetResourceType")]);
    m_target_resource_type_isSet = !json[QString("targetResourceType")].isNull() && m_target_resource_type_isValid;
}

QString OAIEssentials::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEssentials::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_rule_isSet) {
        obj.insert(QString("alertRule"), ::OpenAPI::toJsonValue(m_alert_rule));
    }
    if (m_alert_state_isSet) {
        obj.insert(QString("alertState"), ::OpenAPI::toJsonValue(m_alert_state));
    }
    if (m_last_modified_date_time_isSet) {
        obj.insert(QString("lastModifiedDateTime"), ::OpenAPI::toJsonValue(m_last_modified_date_time));
    }
    if (m_last_modified_user_name_isSet) {
        obj.insert(QString("lastModifiedUserName"), ::OpenAPI::toJsonValue(m_last_modified_user_name));
    }
    if (m_monitor_condition_isSet) {
        obj.insert(QString("monitorCondition"), ::OpenAPI::toJsonValue(m_monitor_condition));
    }
    if (m_monitor_condition_resolved_date_time_isSet) {
        obj.insert(QString("monitorConditionResolvedDateTime"), ::OpenAPI::toJsonValue(m_monitor_condition_resolved_date_time));
    }
    if (m_monitor_service_isSet) {
        obj.insert(QString("monitorService"), ::OpenAPI::toJsonValue(m_monitor_service));
    }
    if (m_severity_isSet) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_signal_type_isSet) {
        obj.insert(QString("signalType"), ::OpenAPI::toJsonValue(m_signal_type));
    }
    if (m_smart_group_id_isSet) {
        obj.insert(QString("smartGroupId"), ::OpenAPI::toJsonValue(m_smart_group_id));
    }
    if (m_smart_grouping_reason_isSet) {
        obj.insert(QString("smartGroupingReason"), ::OpenAPI::toJsonValue(m_smart_grouping_reason));
    }
    if (m_source_created_id_isSet) {
        obj.insert(QString("sourceCreatedId"), ::OpenAPI::toJsonValue(m_source_created_id));
    }
    if (m_start_date_time_isSet) {
        obj.insert(QString("startDateTime"), ::OpenAPI::toJsonValue(m_start_date_time));
    }
    if (m_target_resource_isSet) {
        obj.insert(QString("targetResource"), ::OpenAPI::toJsonValue(m_target_resource));
    }
    if (m_target_resource_group_isSet) {
        obj.insert(QString("targetResourceGroup"), ::OpenAPI::toJsonValue(m_target_resource_group));
    }
    if (m_target_resource_name_isSet) {
        obj.insert(QString("targetResourceName"), ::OpenAPI::toJsonValue(m_target_resource_name));
    }
    if (m_target_resource_type_isSet) {
        obj.insert(QString("targetResourceType"), ::OpenAPI::toJsonValue(m_target_resource_type));
    }
    return obj;
}

QString OAIEssentials::getAlertRule() const {
    return m_alert_rule;
}
void OAIEssentials::setAlertRule(const QString &alert_rule) {
    m_alert_rule = alert_rule;
    m_alert_rule_isSet = true;
}

bool OAIEssentials::is_alert_rule_Set() const{
    return m_alert_rule_isSet;
}

bool OAIEssentials::is_alert_rule_Valid() const{
    return m_alert_rule_isValid;
}

QString OAIEssentials::getAlertState() const {
    return m_alert_state;
}
void OAIEssentials::setAlertState(const QString &alert_state) {
    m_alert_state = alert_state;
    m_alert_state_isSet = true;
}

bool OAIEssentials::is_alert_state_Set() const{
    return m_alert_state_isSet;
}

bool OAIEssentials::is_alert_state_Valid() const{
    return m_alert_state_isValid;
}

QDateTime OAIEssentials::getLastModifiedDateTime() const {
    return m_last_modified_date_time;
}
void OAIEssentials::setLastModifiedDateTime(const QDateTime &last_modified_date_time) {
    m_last_modified_date_time = last_modified_date_time;
    m_last_modified_date_time_isSet = true;
}

bool OAIEssentials::is_last_modified_date_time_Set() const{
    return m_last_modified_date_time_isSet;
}

bool OAIEssentials::is_last_modified_date_time_Valid() const{
    return m_last_modified_date_time_isValid;
}

QString OAIEssentials::getLastModifiedUserName() const {
    return m_last_modified_user_name;
}
void OAIEssentials::setLastModifiedUserName(const QString &last_modified_user_name) {
    m_last_modified_user_name = last_modified_user_name;
    m_last_modified_user_name_isSet = true;
}

bool OAIEssentials::is_last_modified_user_name_Set() const{
    return m_last_modified_user_name_isSet;
}

bool OAIEssentials::is_last_modified_user_name_Valid() const{
    return m_last_modified_user_name_isValid;
}

QString OAIEssentials::getMonitorCondition() const {
    return m_monitor_condition;
}
void OAIEssentials::setMonitorCondition(const QString &monitor_condition) {
    m_monitor_condition = monitor_condition;
    m_monitor_condition_isSet = true;
}

bool OAIEssentials::is_monitor_condition_Set() const{
    return m_monitor_condition_isSet;
}

bool OAIEssentials::is_monitor_condition_Valid() const{
    return m_monitor_condition_isValid;
}

QDateTime OAIEssentials::getMonitorConditionResolvedDateTime() const {
    return m_monitor_condition_resolved_date_time;
}
void OAIEssentials::setMonitorConditionResolvedDateTime(const QDateTime &monitor_condition_resolved_date_time) {
    m_monitor_condition_resolved_date_time = monitor_condition_resolved_date_time;
    m_monitor_condition_resolved_date_time_isSet = true;
}

bool OAIEssentials::is_monitor_condition_resolved_date_time_Set() const{
    return m_monitor_condition_resolved_date_time_isSet;
}

bool OAIEssentials::is_monitor_condition_resolved_date_time_Valid() const{
    return m_monitor_condition_resolved_date_time_isValid;
}

QString OAIEssentials::getMonitorService() const {
    return m_monitor_service;
}
void OAIEssentials::setMonitorService(const QString &monitor_service) {
    m_monitor_service = monitor_service;
    m_monitor_service_isSet = true;
}

bool OAIEssentials::is_monitor_service_Set() const{
    return m_monitor_service_isSet;
}

bool OAIEssentials::is_monitor_service_Valid() const{
    return m_monitor_service_isValid;
}

QString OAIEssentials::getSeverity() const {
    return m_severity;
}
void OAIEssentials::setSeverity(const QString &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIEssentials::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIEssentials::is_severity_Valid() const{
    return m_severity_isValid;
}

QString OAIEssentials::getSignalType() const {
    return m_signal_type;
}
void OAIEssentials::setSignalType(const QString &signal_type) {
    m_signal_type = signal_type;
    m_signal_type_isSet = true;
}

bool OAIEssentials::is_signal_type_Set() const{
    return m_signal_type_isSet;
}

bool OAIEssentials::is_signal_type_Valid() const{
    return m_signal_type_isValid;
}

QString OAIEssentials::getSmartGroupId() const {
    return m_smart_group_id;
}
void OAIEssentials::setSmartGroupId(const QString &smart_group_id) {
    m_smart_group_id = smart_group_id;
    m_smart_group_id_isSet = true;
}

bool OAIEssentials::is_smart_group_id_Set() const{
    return m_smart_group_id_isSet;
}

bool OAIEssentials::is_smart_group_id_Valid() const{
    return m_smart_group_id_isValid;
}

QString OAIEssentials::getSmartGroupingReason() const {
    return m_smart_grouping_reason;
}
void OAIEssentials::setSmartGroupingReason(const QString &smart_grouping_reason) {
    m_smart_grouping_reason = smart_grouping_reason;
    m_smart_grouping_reason_isSet = true;
}

bool OAIEssentials::is_smart_grouping_reason_Set() const{
    return m_smart_grouping_reason_isSet;
}

bool OAIEssentials::is_smart_grouping_reason_Valid() const{
    return m_smart_grouping_reason_isValid;
}

QString OAIEssentials::getSourceCreatedId() const {
    return m_source_created_id;
}
void OAIEssentials::setSourceCreatedId(const QString &source_created_id) {
    m_source_created_id = source_created_id;
    m_source_created_id_isSet = true;
}

bool OAIEssentials::is_source_created_id_Set() const{
    return m_source_created_id_isSet;
}

bool OAIEssentials::is_source_created_id_Valid() const{
    return m_source_created_id_isValid;
}

QDateTime OAIEssentials::getStartDateTime() const {
    return m_start_date_time;
}
void OAIEssentials::setStartDateTime(const QDateTime &start_date_time) {
    m_start_date_time = start_date_time;
    m_start_date_time_isSet = true;
}

bool OAIEssentials::is_start_date_time_Set() const{
    return m_start_date_time_isSet;
}

bool OAIEssentials::is_start_date_time_Valid() const{
    return m_start_date_time_isValid;
}

QString OAIEssentials::getTargetResource() const {
    return m_target_resource;
}
void OAIEssentials::setTargetResource(const QString &target_resource) {
    m_target_resource = target_resource;
    m_target_resource_isSet = true;
}

bool OAIEssentials::is_target_resource_Set() const{
    return m_target_resource_isSet;
}

bool OAIEssentials::is_target_resource_Valid() const{
    return m_target_resource_isValid;
}

QString OAIEssentials::getTargetResourceGroup() const {
    return m_target_resource_group;
}
void OAIEssentials::setTargetResourceGroup(const QString &target_resource_group) {
    m_target_resource_group = target_resource_group;
    m_target_resource_group_isSet = true;
}

bool OAIEssentials::is_target_resource_group_Set() const{
    return m_target_resource_group_isSet;
}

bool OAIEssentials::is_target_resource_group_Valid() const{
    return m_target_resource_group_isValid;
}

QString OAIEssentials::getTargetResourceName() const {
    return m_target_resource_name;
}
void OAIEssentials::setTargetResourceName(const QString &target_resource_name) {
    m_target_resource_name = target_resource_name;
    m_target_resource_name_isSet = true;
}

bool OAIEssentials::is_target_resource_name_Set() const{
    return m_target_resource_name_isSet;
}

bool OAIEssentials::is_target_resource_name_Valid() const{
    return m_target_resource_name_isValid;
}

QString OAIEssentials::getTargetResourceType() const {
    return m_target_resource_type;
}
void OAIEssentials::setTargetResourceType(const QString &target_resource_type) {
    m_target_resource_type = target_resource_type;
    m_target_resource_type_isSet = true;
}

bool OAIEssentials::is_target_resource_type_Set() const{
    return m_target_resource_type_isSet;
}

bool OAIEssentials::is_target_resource_type_Valid() const{
    return m_target_resource_type_isValid;
}

bool OAIEssentials::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_rule_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_condition_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_condition_resolved_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_signal_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_grouping_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_created_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEssentials::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
