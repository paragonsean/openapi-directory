/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConditions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConditions::OAIConditions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConditions::OAIConditions() {
    this->initializeModel();
}

OAIConditions::~OAIConditions() {}

void OAIConditions::initializeModel() {

    m_alert_context_isSet = false;
    m_alert_context_isValid = false;

    m_alert_rule_id_isSet = false;
    m_alert_rule_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_monitor_condition_isSet = false;
    m_monitor_condition_isValid = false;

    m_monitor_service_isSet = false;
    m_monitor_service_isValid = false;

    m_severity_isSet = false;
    m_severity_isValid = false;

    m_target_resource_type_isSet = false;
    m_target_resource_type_isValid = false;
}

void OAIConditions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConditions::fromJsonObject(QJsonObject json) {

    m_alert_context_isValid = ::OpenAPI::fromJsonValue(m_alert_context, json[QString("alertContext")]);
    m_alert_context_isSet = !json[QString("alertContext")].isNull() && m_alert_context_isValid;

    m_alert_rule_id_isValid = ::OpenAPI::fromJsonValue(m_alert_rule_id, json[QString("alertRuleId")]);
    m_alert_rule_id_isSet = !json[QString("alertRuleId")].isNull() && m_alert_rule_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_monitor_condition_isValid = ::OpenAPI::fromJsonValue(m_monitor_condition, json[QString("monitorCondition")]);
    m_monitor_condition_isSet = !json[QString("monitorCondition")].isNull() && m_monitor_condition_isValid;

    m_monitor_service_isValid = ::OpenAPI::fromJsonValue(m_monitor_service, json[QString("monitorService")]);
    m_monitor_service_isSet = !json[QString("monitorService")].isNull() && m_monitor_service_isValid;

    m_severity_isValid = ::OpenAPI::fromJsonValue(m_severity, json[QString("severity")]);
    m_severity_isSet = !json[QString("severity")].isNull() && m_severity_isValid;

    m_target_resource_type_isValid = ::OpenAPI::fromJsonValue(m_target_resource_type, json[QString("targetResourceType")]);
    m_target_resource_type_isSet = !json[QString("targetResourceType")].isNull() && m_target_resource_type_isValid;
}

QString OAIConditions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConditions::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_context.isSet()) {
        obj.insert(QString("alertContext"), ::OpenAPI::toJsonValue(m_alert_context));
    }
    if (m_alert_rule_id.isSet()) {
        obj.insert(QString("alertRuleId"), ::OpenAPI::toJsonValue(m_alert_rule_id));
    }
    if (m_description.isSet()) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_monitor_condition.isSet()) {
        obj.insert(QString("monitorCondition"), ::OpenAPI::toJsonValue(m_monitor_condition));
    }
    if (m_monitor_service.isSet()) {
        obj.insert(QString("monitorService"), ::OpenAPI::toJsonValue(m_monitor_service));
    }
    if (m_severity.isSet()) {
        obj.insert(QString("severity"), ::OpenAPI::toJsonValue(m_severity));
    }
    if (m_target_resource_type.isSet()) {
        obj.insert(QString("targetResourceType"), ::OpenAPI::toJsonValue(m_target_resource_type));
    }
    return obj;
}

OAICondition OAIConditions::getAlertContext() const {
    return m_alert_context;
}
void OAIConditions::setAlertContext(const OAICondition &alert_context) {
    m_alert_context = alert_context;
    m_alert_context_isSet = true;
}

bool OAIConditions::is_alert_context_Set() const{
    return m_alert_context_isSet;
}

bool OAIConditions::is_alert_context_Valid() const{
    return m_alert_context_isValid;
}

OAICondition OAIConditions::getAlertRuleId() const {
    return m_alert_rule_id;
}
void OAIConditions::setAlertRuleId(const OAICondition &alert_rule_id) {
    m_alert_rule_id = alert_rule_id;
    m_alert_rule_id_isSet = true;
}

bool OAIConditions::is_alert_rule_id_Set() const{
    return m_alert_rule_id_isSet;
}

bool OAIConditions::is_alert_rule_id_Valid() const{
    return m_alert_rule_id_isValid;
}

OAICondition OAIConditions::getDescription() const {
    return m_description;
}
void OAIConditions::setDescription(const OAICondition &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConditions::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConditions::is_description_Valid() const{
    return m_description_isValid;
}

OAICondition OAIConditions::getMonitorCondition() const {
    return m_monitor_condition;
}
void OAIConditions::setMonitorCondition(const OAICondition &monitor_condition) {
    m_monitor_condition = monitor_condition;
    m_monitor_condition_isSet = true;
}

bool OAIConditions::is_monitor_condition_Set() const{
    return m_monitor_condition_isSet;
}

bool OAIConditions::is_monitor_condition_Valid() const{
    return m_monitor_condition_isValid;
}

OAICondition OAIConditions::getMonitorService() const {
    return m_monitor_service;
}
void OAIConditions::setMonitorService(const OAICondition &monitor_service) {
    m_monitor_service = monitor_service;
    m_monitor_service_isSet = true;
}

bool OAIConditions::is_monitor_service_Set() const{
    return m_monitor_service_isSet;
}

bool OAIConditions::is_monitor_service_Valid() const{
    return m_monitor_service_isValid;
}

OAICondition OAIConditions::getSeverity() const {
    return m_severity;
}
void OAIConditions::setSeverity(const OAICondition &severity) {
    m_severity = severity;
    m_severity_isSet = true;
}

bool OAIConditions::is_severity_Set() const{
    return m_severity_isSet;
}

bool OAIConditions::is_severity_Valid() const{
    return m_severity_isValid;
}

OAICondition OAIConditions::getTargetResourceType() const {
    return m_target_resource_type;
}
void OAIConditions::setTargetResourceType(const OAICondition &target_resource_type) {
    m_target_resource_type = target_resource_type;
    m_target_resource_type_isSet = true;
}

bool OAIConditions::is_target_resource_type_Set() const{
    return m_target_resource_type_isSet;
}

bool OAIConditions::is_target_resource_type_Valid() const{
    return m_target_resource_type_isValid;
}

bool OAIConditions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_context.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_alert_rule_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_monitor_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConditions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
