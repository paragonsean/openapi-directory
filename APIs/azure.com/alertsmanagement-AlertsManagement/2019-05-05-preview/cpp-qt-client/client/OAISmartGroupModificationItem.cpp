/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISmartGroupModificationItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISmartGroupModificationItem::OAISmartGroupModificationItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISmartGroupModificationItem::OAISmartGroupModificationItem() {
    this->initializeModel();
}

OAISmartGroupModificationItem::~OAISmartGroupModificationItem() {}

void OAISmartGroupModificationItem::initializeModel() {

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_modification_event_isSet = false;
    m_modification_event_isValid = false;

    m_modified_at_isSet = false;
    m_modified_at_isValid = false;

    m_modified_by_isSet = false;
    m_modified_by_isValid = false;

    m_new_value_isSet = false;
    m_new_value_isValid = false;

    m_old_value_isSet = false;
    m_old_value_isValid = false;
}

void OAISmartGroupModificationItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISmartGroupModificationItem::fromJsonObject(QJsonObject json) {

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_modification_event_isValid = ::OpenAPI::fromJsonValue(m_modification_event, json[QString("modificationEvent")]);
    m_modification_event_isSet = !json[QString("modificationEvent")].isNull() && m_modification_event_isValid;

    m_modified_at_isValid = ::OpenAPI::fromJsonValue(m_modified_at, json[QString("modifiedAt")]);
    m_modified_at_isSet = !json[QString("modifiedAt")].isNull() && m_modified_at_isValid;

    m_modified_by_isValid = ::OpenAPI::fromJsonValue(m_modified_by, json[QString("modifiedBy")]);
    m_modified_by_isSet = !json[QString("modifiedBy")].isNull() && m_modified_by_isValid;

    m_new_value_isValid = ::OpenAPI::fromJsonValue(m_new_value, json[QString("newValue")]);
    m_new_value_isSet = !json[QString("newValue")].isNull() && m_new_value_isValid;

    m_old_value_isValid = ::OpenAPI::fromJsonValue(m_old_value, json[QString("oldValue")]);
    m_old_value_isSet = !json[QString("oldValue")].isNull() && m_old_value_isValid;
}

QString OAISmartGroupModificationItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISmartGroupModificationItem::asJsonObject() const {
    QJsonObject obj;
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_modification_event_isSet) {
        obj.insert(QString("modificationEvent"), ::OpenAPI::toJsonValue(m_modification_event));
    }
    if (m_modified_at_isSet) {
        obj.insert(QString("modifiedAt"), ::OpenAPI::toJsonValue(m_modified_at));
    }
    if (m_modified_by_isSet) {
        obj.insert(QString("modifiedBy"), ::OpenAPI::toJsonValue(m_modified_by));
    }
    if (m_new_value_isSet) {
        obj.insert(QString("newValue"), ::OpenAPI::toJsonValue(m_new_value));
    }
    if (m_old_value_isSet) {
        obj.insert(QString("oldValue"), ::OpenAPI::toJsonValue(m_old_value));
    }
    return obj;
}

QString OAISmartGroupModificationItem::getComments() const {
    return m_comments;
}
void OAISmartGroupModificationItem::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAISmartGroupModificationItem::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAISmartGroupModificationItem::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAISmartGroupModificationItem::getDescription() const {
    return m_description;
}
void OAISmartGroupModificationItem::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISmartGroupModificationItem::is_description_Set() const{
    return m_description_isSet;
}

bool OAISmartGroupModificationItem::is_description_Valid() const{
    return m_description_isValid;
}

QString OAISmartGroupModificationItem::getModificationEvent() const {
    return m_modification_event;
}
void OAISmartGroupModificationItem::setModificationEvent(const QString &modification_event) {
    m_modification_event = modification_event;
    m_modification_event_isSet = true;
}

bool OAISmartGroupModificationItem::is_modification_event_Set() const{
    return m_modification_event_isSet;
}

bool OAISmartGroupModificationItem::is_modification_event_Valid() const{
    return m_modification_event_isValid;
}

QString OAISmartGroupModificationItem::getModifiedAt() const {
    return m_modified_at;
}
void OAISmartGroupModificationItem::setModifiedAt(const QString &modified_at) {
    m_modified_at = modified_at;
    m_modified_at_isSet = true;
}

bool OAISmartGroupModificationItem::is_modified_at_Set() const{
    return m_modified_at_isSet;
}

bool OAISmartGroupModificationItem::is_modified_at_Valid() const{
    return m_modified_at_isValid;
}

QString OAISmartGroupModificationItem::getModifiedBy() const {
    return m_modified_by;
}
void OAISmartGroupModificationItem::setModifiedBy(const QString &modified_by) {
    m_modified_by = modified_by;
    m_modified_by_isSet = true;
}

bool OAISmartGroupModificationItem::is_modified_by_Set() const{
    return m_modified_by_isSet;
}

bool OAISmartGroupModificationItem::is_modified_by_Valid() const{
    return m_modified_by_isValid;
}

QString OAISmartGroupModificationItem::getNewValue() const {
    return m_new_value;
}
void OAISmartGroupModificationItem::setNewValue(const QString &new_value) {
    m_new_value = new_value;
    m_new_value_isSet = true;
}

bool OAISmartGroupModificationItem::is_new_value_Set() const{
    return m_new_value_isSet;
}

bool OAISmartGroupModificationItem::is_new_value_Valid() const{
    return m_new_value_isValid;
}

QString OAISmartGroupModificationItem::getOldValue() const {
    return m_old_value;
}
void OAISmartGroupModificationItem::setOldValue(const QString &old_value) {
    m_old_value = old_value;
    m_old_value_isSet = true;
}

bool OAISmartGroupModificationItem::is_old_value_Set() const{
    return m_old_value_isSet;
}

bool OAISmartGroupModificationItem::is_old_value_Valid() const{
    return m_old_value_isValid;
}

bool OAISmartGroupModificationItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modification_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_modified_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_old_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISmartGroupModificationItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
