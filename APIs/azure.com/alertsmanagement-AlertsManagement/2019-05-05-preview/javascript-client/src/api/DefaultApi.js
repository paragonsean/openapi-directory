/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ActionRule from '../model/ActionRule';
import ActionRulesList from '../model/ActionRulesList';
import Alert from '../model/Alert';
import AlertModification from '../model/AlertModification';
import AlertsList from '../model/AlertsList';
import AlertsMetaData from '../model/AlertsMetaData';
import AlertsSummary from '../model/AlertsSummary';
import ErrorResponse from '../model/ErrorResponse';
import OperationsList from '../model/OperationsList';
import PatchObject from '../model/PatchObject';
import SmartGroup from '../model/SmartGroup';
import SmartGroupModification from '../model/SmartGroupModification';
import SmartGroupsList from '../model/SmartGroupsList';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-05-05-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the actionRulesCreateUpdate operation.
     * @callback module:api/DefaultApi~actionRulesCreateUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create/update an action rule
     * Creates/Updates a specific action rule
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName Resource group name where the resource is created.
     * @param {String} actionRuleName The name of action rule that needs to be created/updated
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/ActionRule} actionRule action rule to be created/updated
     * @param {module:api/DefaultApi~actionRulesCreateUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionRule}
     */
    actionRulesCreateUpdate(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRule, callback) {
      let postBody = actionRule;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionRulesCreateUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionRulesCreateUpdate");
      }
      // verify the required parameter 'actionRuleName' is set
      if (actionRuleName === undefined || actionRuleName === null) {
        throw new Error("Missing the required parameter 'actionRuleName' when calling actionRulesCreateUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionRulesCreateUpdate");
      }
      // verify the required parameter 'actionRule' is set
      if (actionRule === undefined || actionRule === null) {
        throw new Error("Missing the required parameter 'actionRule' when calling actionRulesCreateUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'actionRuleName': actionRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionRulesDelete operation.
     * @callback module:api/DefaultApi~actionRulesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {Boolean} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete action rule
     * Deletes a given action rule
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName Resource group name where the resource is created.
     * @param {String} actionRuleName The name that needs to be deleted
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~actionRulesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Boolean}
     */
    actionRulesDelete(subscriptionId, resourceGroupName, actionRuleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionRulesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionRulesDelete");
      }
      // verify the required parameter 'actionRuleName' is set
      if (actionRuleName === undefined || actionRuleName === null) {
        throw new Error("Missing the required parameter 'actionRuleName' when calling actionRulesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionRulesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'actionRuleName': actionRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionRulesGetByName operation.
     * @callback module:api/DefaultApi~actionRulesGetByNameCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get action rule by name
     * Get a specific action rule
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName Resource group name where the resource is created.
     * @param {String} actionRuleName The name of action rule that needs to be fetched
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~actionRulesGetByNameCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionRule}
     */
    actionRulesGetByName(subscriptionId, resourceGroupName, actionRuleName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionRulesGetByName");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionRulesGetByName");
      }
      // verify the required parameter 'actionRuleName' is set
      if (actionRuleName === undefined || actionRuleName === null) {
        throw new Error("Missing the required parameter 'actionRuleName' when calling actionRulesGetByName");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionRulesGetByName");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'actionRuleName': actionRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionRulesListByResourceGroup operation.
     * @callback module:api/DefaultApi~actionRulesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionRulesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all action rules created in a resource group
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName Resource group name where the resource is created.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {String} [impactedScope] filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope.
     * @param {String} [description] filter by alert rule description
     * @param {String} [alertRuleId] filter by alert rule id
     * @param {String} [actionGroup] filter by action group configured as part of action rule
     * @param {String} [name] filter by action rule name
     * @param {module:api/DefaultApi~actionRulesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionRulesList}
     */
    actionRulesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionRulesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionRulesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionRulesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'targetResourceGroup': opts['targetResourceGroup'],
        'targetResourceType': opts['targetResourceType'],
        'targetResource': opts['targetResource'],
        'severity': opts['severity'],
        'monitorService': opts['monitorService'],
        'impactedScope': opts['impactedScope'],
        'description': opts['description'],
        'alertRuleId': opts['alertRuleId'],
        'actionGroup': opts['actionGroup'],
        'name': opts['name'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionRulesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionRulesListBySubscription operation.
     * @callback module:api/DefaultApi~actionRulesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionRulesList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all action rule in a given subscription
     * List all action rules of the subscription and given input filters
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {String} [impactedScope] filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope.
     * @param {String} [description] filter by alert rule description
     * @param {String} [alertRuleId] filter by alert rule id
     * @param {String} [actionGroup] filter by action group configured as part of action rule
     * @param {String} [name] filter by action rule name
     * @param {module:api/DefaultApi~actionRulesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionRulesList}
     */
    actionRulesListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionRulesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionRulesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResourceGroup': opts['targetResourceGroup'],
        'targetResourceType': opts['targetResourceType'],
        'targetResource': opts['targetResource'],
        'severity': opts['severity'],
        'monitorService': opts['monitorService'],
        'impactedScope': opts['impactedScope'],
        'description': opts['description'],
        'alertRuleId': opts['alertRuleId'],
        'actionGroup': opts['actionGroup'],
        'name': opts['name'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ActionRulesList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/actionRules', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the actionRulesUpdate operation.
     * @callback module:api/DefaultApi~actionRulesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ActionRule} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Patch action rule
     * Update enabled flag and/or tags for the given action rule
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} resourceGroupName Resource group name where the resource is created.
     * @param {String} actionRuleName The name that needs to be updated
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/PatchObject} actionRulePatch Parameters supplied to the operation.
     * @param {module:api/DefaultApi~actionRulesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ActionRule}
     */
    actionRulesUpdate(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRulePatch, callback) {
      let postBody = actionRulePatch;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling actionRulesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling actionRulesUpdate");
      }
      // verify the required parameter 'actionRuleName' is set
      if (actionRuleName === undefined || actionRuleName === null) {
        throw new Error("Missing the required parameter 'actionRuleName' when calling actionRulesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling actionRulesUpdate");
      }
      // verify the required parameter 'actionRulePatch' is set
      if (actionRulePatch === undefined || actionRulePatch === null) {
        throw new Error("Missing the required parameter 'actionRulePatch' when calling actionRulesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'actionRuleName': actionRuleName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ActionRule;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsChangeState operation.
     * @callback module:api/DefaultApi~alertsChangeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of an alert.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} alertId Unique ID of an alert instance.
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/String} newState New state of the alert.
     * @param {module:api/DefaultApi~alertsChangeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsChangeState(subscriptionId, alertId, apiVersion, newState, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsChangeState");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsChangeState");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsChangeState");
      }
      // verify the required parameter 'newState' is set
      if (newState === undefined || newState === null) {
        throw new Error("Missing the required parameter 'newState' when calling alertsChangeState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion,
        'newState': newState
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetAll operation.
     * @callback module:api/DefaultApi~alertsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {module:model/String} [monitorCondition] Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [alertState] Filter by state of the alert instance. Default value is to select all.
     * @param {String} [alertRule] Filter by specific alert rule.  Default value is to select all.
     * @param {String} [smartGroupId] Filter the alerts list by the Smart Group Id. Default value is none.
     * @param {Boolean} [includeContext] Include context which has contextual data specific to the monitor service. Default value is false'
     * @param {Boolean} [includeEgressConfig] Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
     * @param {Number} [pageCount] Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
     * @param {module:model/String} [sortBy] Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
     * @param {module:model/String} [sortOrder] Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
     * @param {String} [select] This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
     * @param {module:model/String} [timeRange] Filter by time range by below listed values. Default value is 1 day.
     * @param {String} [customTimeRange] Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
     * @param {module:api/DefaultApi~alertsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsList}
     */
    alertsGetAll(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResource': opts['targetResource'],
        'targetResourceType': opts['targetResourceType'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'alertState': opts['alertState'],
        'alertRule': opts['alertRule'],
        'smartGroupId': opts['smartGroupId'],
        'includeContext': opts['includeContext'],
        'includeEgressConfig': opts['includeEgressConfig'],
        'pageCount': opts['pageCount'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'select': opts['select'],
        'timeRange': opts['timeRange'],
        'customTimeRange': opts['customTimeRange'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetById operation.
     * @callback module:api/DefaultApi~alertsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific alert.
     * Get information related to a specific alert
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} alertId Unique ID of an alert instance.
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~alertsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsGetById(subscriptionId, alertId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetById");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetHistory operation.
     * @callback module:api/DefaultApi~alertsGetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertModification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} alertId Unique ID of an alert instance.
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~alertsGetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertModification}
     */
    alertsGetHistory(subscriptionId, alertId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetHistory");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsGetHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetHistory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertModification;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetSummary operation.
     * @callback module:api/DefaultApi~alertsGetSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} groupby This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby=severity or groupby=severity,alertstate.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeSmartGroupsCount] Include count of the SmartGroups as part of the summary. Default value is 'false'.
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {module:model/String} [monitorCondition] Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [alertState] Filter by state of the alert instance. Default value is to select all.
     * @param {String} [alertRule] Filter by specific alert rule.  Default value is to select all.
     * @param {module:model/String} [timeRange] Filter by time range by below listed values. Default value is 1 day.
     * @param {String} [customTimeRange] Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
     * @param {module:api/DefaultApi~alertsGetSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsSummary}
     */
    alertsGetSummary(subscriptionId, groupby, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetSummary");
      }
      // verify the required parameter 'groupby' is set
      if (groupby === undefined || groupby === null) {
        throw new Error("Missing the required parameter 'groupby' when calling alertsGetSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetSummary");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'groupby': groupby,
        'includeSmartGroupsCount': opts['includeSmartGroupsCount'],
        'targetResource': opts['targetResource'],
        'targetResourceType': opts['targetResourceType'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'alertState': opts['alertState'],
        'alertRule': opts['alertRule'],
        'timeRange': opts['timeRange'],
        'customTimeRange': opts['customTimeRange'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsSummary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsMetaData operation.
     * @callback module:api/DefaultApi~alertsMetaDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List alerts meta data information based on value of identifier parameter.
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/String} identifier Identification of the information to be retrieved by API call.
     * @param {module:api/DefaultApi~alertsMetaDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsMetaData}
     */
    alertsMetaData(apiVersion, identifier, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsMetaData");
      }
      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling alertsMetaData");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        'identifier': identifier
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsMetaData;
      return this.apiClient.callApi(
        '/providers/Microsoft.AlertsManagement/alertsMetaData', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsList}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsList;
      return this.apiClient.callApi(
        '/providers/Microsoft.AlertsManagement/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsChangeState operation.
     * @callback module:api/DefaultApi~smartGroupsChangeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of a Smart Group.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} smartGroupId Smart group unique id. 
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/String} newState New state of the alert.
     * @param {module:api/DefaultApi~smartGroupsChangeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroup}
     */
    smartGroupsChangeState(subscriptionId, smartGroupId, apiVersion, newState, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'newState' is set
      if (newState === undefined || newState === null) {
        throw new Error("Missing the required parameter 'newState' when calling smartGroupsChangeState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion,
        'newState': newState
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetAll operation.
     * @callback module:api/DefaultApi~smartGroupsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroupsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Smart Groups within a specified subscription
     * List all the Smart Groups within a specified subscription. 
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {module:model/String} [monitorCondition] Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [smartGroupState] Filter by state of the smart group. Default value is to select all.
     * @param {module:model/String} [timeRange] Filter by time range by below listed values. Default value is 1 day.
     * @param {Number} [pageCount] Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
     * @param {module:model/String} [sortBy] Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
     * @param {module:model/String} [sortOrder] Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
     * @param {module:api/DefaultApi~smartGroupsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroupsList}
     */
    smartGroupsGetAll(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResource': opts['targetResource'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'targetResourceType': opts['targetResourceType'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'smartGroupState': opts['smartGroupState'],
        'timeRange': opts['timeRange'],
        'pageCount': opts['pageCount'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroupsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetById operation.
     * @callback module:api/DefaultApi~smartGroupsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information related to a specific Smart Group.
     * Get information related to a specific Smart Group.
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} smartGroupId Smart group unique id. 
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~smartGroupsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroup}
     */
    smartGroupsGetById(subscriptionId, smartGroupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetById");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetHistory operation.
     * @callback module:api/DefaultApi~smartGroupsGetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroupModification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param {String} subscriptionId The ID of the target subscription.
     * @param {String} smartGroupId Smart group unique id. 
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~smartGroupsGetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroupModification}
     */
    smartGroupsGetHistory(subscriptionId, smartGroupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetHistory");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsGetHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetHistory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroupModification;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
