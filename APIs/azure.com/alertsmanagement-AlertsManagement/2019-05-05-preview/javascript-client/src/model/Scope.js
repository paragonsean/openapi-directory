/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Scope model module.
 * @module model/Scope
 * @version 2019-05-05-preview
 */
class Scope {
    /**
     * Constructs a new <code>Scope</code>.
     * Target scope for a given action rule. By default scope will be the subscription. User can also provide list of resource groups or list of resources from the scope subscription as well.
     * @alias module:model/Scope
     */
    constructor() { 
        
        Scope.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Scope</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Scope} obj Optional instance to populate.
     * @return {module:model/Scope} The populated <code>Scope</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Scope();

            if (data.hasOwnProperty('scopeType')) {
                obj['scopeType'] = ApiClient.convertToType(data['scopeType'], 'String');
            }
            if (data.hasOwnProperty('values')) {
                obj['values'] = ApiClient.convertToType(data['values'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Scope</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Scope</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['scopeType'] && !(typeof data['scopeType'] === 'string' || data['scopeType'] instanceof String)) {
            throw new Error("Expected the field `scopeType` to be a primitive type in the JSON string but got " + data['scopeType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['values'])) {
            throw new Error("Expected the field `values` to be an array in the JSON data but got " + data['values']);
        }

        return true;
    }


}



/**
 * type of target scope
 * @member {module:model/Scope.ScopeTypeEnum} scopeType
 */
Scope.prototype['scopeType'] = undefined;

/**
 * list of ARM IDs of the given scope type which will be the target of the given action rule.
 * @member {Array.<String>} values
 */
Scope.prototype['values'] = undefined;





/**
 * Allowed values for the <code>scopeType</code> property.
 * @enum {String}
 * @readonly
 */
Scope['ScopeTypeEnum'] = {

    /**
     * value: "ResourceGroup"
     * @const
     */
    "ResourceGroup": "ResourceGroup",

    /**
     * value: "Resource"
     * @const
     */
    "Resource": "Resource"
};



export default Scope;

