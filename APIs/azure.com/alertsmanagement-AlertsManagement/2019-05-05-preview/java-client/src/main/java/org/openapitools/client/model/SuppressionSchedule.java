/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schedule for a given suppression configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:10.723258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SuppressionSchedule {
  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private String endTime;

  public static final String SERIALIZED_NAME_RECURRENCE_VALUES = "recurrenceValues";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_VALUES)
  private List<Integer> recurrenceValues = new ArrayList<>();

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private String startTime;

  public SuppressionSchedule() {
  }

  public SuppressionSchedule endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * End date for suppression
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public SuppressionSchedule endTime(String endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * End date for suppression
   * @return endTime
   */
  @javax.annotation.Nullable
  public String getEndTime() {
    return endTime;
  }

  public void setEndTime(String endTime) {
    this.endTime = endTime;
  }


  public SuppressionSchedule recurrenceValues(List<Integer> recurrenceValues) {
    this.recurrenceValues = recurrenceValues;
    return this;
  }

  public SuppressionSchedule addRecurrenceValuesItem(Integer recurrenceValuesItem) {
    if (this.recurrenceValues == null) {
      this.recurrenceValues = new ArrayList<>();
    }
    this.recurrenceValues.add(recurrenceValuesItem);
    return this;
  }

  /**
   * Specifies the values for recurrence pattern
   * @return recurrenceValues
   */
  @javax.annotation.Nullable
  public List<Integer> getRecurrenceValues() {
    return recurrenceValues;
  }

  public void setRecurrenceValues(List<Integer> recurrenceValues) {
    this.recurrenceValues = recurrenceValues;
  }


  public SuppressionSchedule startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Start date for suppression
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public SuppressionSchedule startTime(String startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * Start time for suppression
   * @return startTime
   */
  @javax.annotation.Nullable
  public String getStartTime() {
    return startTime;
  }

  public void setStartTime(String startTime) {
    this.startTime = startTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SuppressionSchedule suppressionSchedule = (SuppressionSchedule) o;
    return Objects.equals(this.endDate, suppressionSchedule.endDate) &&
        Objects.equals(this.endTime, suppressionSchedule.endTime) &&
        Objects.equals(this.recurrenceValues, suppressionSchedule.recurrenceValues) &&
        Objects.equals(this.startDate, suppressionSchedule.startDate) &&
        Objects.equals(this.startTime, suppressionSchedule.startTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endDate, endTime, recurrenceValues, startDate, startTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SuppressionSchedule {\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    recurrenceValues: ").append(toIndentedString(recurrenceValues)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("endDate");
    openapiFields.add("endTime");
    openapiFields.add("recurrenceValues");
    openapiFields.add("startDate");
    openapiFields.add("startTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SuppressionSchedule
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SuppressionSchedule.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SuppressionSchedule is not found in the empty JSON string", SuppressionSchedule.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SuppressionSchedule.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SuppressionSchedule` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("endDate") != null && !jsonObj.get("endDate").isJsonNull()) && !jsonObj.get("endDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endDate").toString()));
      }
      if ((jsonObj.get("endTime") != null && !jsonObj.get("endTime").isJsonNull()) && !jsonObj.get("endTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `endTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("endTime").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recurrenceValues") != null && !jsonObj.get("recurrenceValues").isJsonNull() && !jsonObj.get("recurrenceValues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrenceValues` to be an array in the JSON string but got `%s`", jsonObj.get("recurrenceValues").toString()));
      }
      if ((jsonObj.get("startDate") != null && !jsonObj.get("startDate").isJsonNull()) && !jsonObj.get("startDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startDate").toString()));
      }
      if ((jsonObj.get("startTime") != null && !jsonObj.get("startTime").isJsonNull()) && !jsonObj.get("startTime").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `startTime` to be a primitive type in the JSON string but got `%s`", jsonObj.get("startTime").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SuppressionSchedule.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SuppressionSchedule' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SuppressionSchedule> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SuppressionSchedule.class));

       return (TypeAdapter<T>) new TypeAdapter<SuppressionSchedule>() {
           @Override
           public void write(JsonWriter out, SuppressionSchedule value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SuppressionSchedule read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SuppressionSchedule given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SuppressionSchedule
   * @throws IOException if the JSON string is invalid with respect to SuppressionSchedule
   */
  public static SuppressionSchedule fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SuppressionSchedule.class);
  }

  /**
   * Convert an instance of SuppressionSchedule to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

