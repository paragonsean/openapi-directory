/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * alert meta data property bag
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:10.723258-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AlertsMetaDataProperties {
  /**
   * Identification of the information to be retrieved by API call
   */
  @JsonAdapter(MetadataIdentifierEnum.Adapter.class)
  public enum MetadataIdentifierEnum {
    MONITOR_SERVICE_LIST("MonitorServiceList");

    private String value;

    MetadataIdentifierEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MetadataIdentifierEnum fromValue(String value) {
      for (MetadataIdentifierEnum b : MetadataIdentifierEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MetadataIdentifierEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MetadataIdentifierEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MetadataIdentifierEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MetadataIdentifierEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      MetadataIdentifierEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METADATA_IDENTIFIER = "metadataIdentifier";
  @SerializedName(SERIALIZED_NAME_METADATA_IDENTIFIER)
  protected MetadataIdentifierEnum metadataIdentifier;

  public AlertsMetaDataProperties() {
  }

  public AlertsMetaDataProperties metadataIdentifier(MetadataIdentifierEnum metadataIdentifier) {
    this.metadataIdentifier = metadataIdentifier;
    return this;
  }

  /**
   * Identification of the information to be retrieved by API call
   * @return metadataIdentifier
   */
  @javax.annotation.Nonnull
  public MetadataIdentifierEnum getMetadataIdentifier() {
    return metadataIdentifier;
  }

  public void setMetadataIdentifier(MetadataIdentifierEnum metadataIdentifier) {
    this.metadataIdentifier = metadataIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AlertsMetaDataProperties alertsMetaDataProperties = (AlertsMetaDataProperties) o;
    return Objects.equals(this.metadataIdentifier, alertsMetaDataProperties.metadataIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(metadataIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AlertsMetaDataProperties {\n");
    sb.append("    metadataIdentifier: ").append(toIndentedString(metadataIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("metadataIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("metadataIdentifier");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AlertsMetaDataProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AlertsMetaDataProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AlertsMetaDataProperties is not found in the empty JSON string", AlertsMetaDataProperties.openapiRequiredFields.toString()));
        }
      }

      String discriminatorValue = jsonElement.getAsJsonObject().get("metadataIdentifier").getAsString();
      switch (discriminatorValue) {
        case "MonitorServiceList":
          MonitorServiceList.validateJsonElement(jsonElement);
          break;
        default:
          throw new IllegalArgumentException(String.format("The value of the `metadataIdentifier` field `%s` does not match any key defined in the discriminator's mapping.", discriminatorValue));
      }
  }


  /**
   * Create an instance of AlertsMetaDataProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AlertsMetaDataProperties
   * @throws IOException if the JSON string is invalid with respect to AlertsMetaDataProperties
   */
  public static AlertsMetaDataProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AlertsMetaDataProperties.class);
  }

  /**
   * Convert an instance of AlertsMetaDataProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

