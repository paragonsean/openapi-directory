/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-05-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ActionRule;
import org.openapitools.client.model.ActionRulesList;
import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertModification;
import org.openapitools.client.model.AlertsList;
import org.openapitools.client.model.AlertsMetaData;
import org.openapitools.client.model.AlertsSummary;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationsList;
import org.openapitools.client.model.PatchObject;
import org.openapitools.client.model.SmartGroup;
import org.openapitools.client.model.SmartGroupModification;
import org.openapitools.client.model.SmartGroupsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for actionRulesCreateUpdate
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param apiVersion client API version (required)
     * @param actionRule action rule to be created/updated (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesCreateUpdateCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, ActionRule actionRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionRule;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesCreateUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, ActionRule actionRule, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionRulesCreateUpdate(Async)");
        }

        // verify the required parameter 'actionRule' is set
        if (actionRule == null) {
            throw new ApiException("Missing the required parameter 'actionRule' when calling actionRulesCreateUpdate(Async)");
        }

        return actionRulesCreateUpdateCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRule, _callback);

    }

    /**
     * Create/update an action rule
     * Creates/Updates a specific action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param apiVersion client API version (required)
     * @param actionRule action rule to be created/updated (required)
     * @return ActionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRule actionRulesCreateUpdate(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, ActionRule actionRule) throws ApiException {
        ApiResponse<ActionRule> localVarResp = actionRulesCreateUpdateWithHttpInfo(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRule);
        return localVarResp.getData();
    }

    /**
     * Create/update an action rule
     * Creates/Updates a specific action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param apiVersion client API version (required)
     * @param actionRule action rule to be created/updated (required)
     * @return ApiResponse&lt;ActionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRule> actionRulesCreateUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, ActionRule actionRule) throws ApiException {
        okhttp3.Call localVarCall = actionRulesCreateUpdateValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRule, null);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/update an action rule (asynchronously)
     * Creates/Updates a specific action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be created/updated (required)
     * @param apiVersion client API version (required)
     * @param actionRule action rule to be created/updated (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesCreateUpdateAsync(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, ActionRule actionRule, final ApiCallback<ActionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesCreateUpdateValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRule, _callback);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesDelete
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesDeleteCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionRulesDelete(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionRulesDelete(Async)");
        }

        return actionRulesDeleteCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, _callback);

    }

    /**
     * Delete action rule
     * Deletes a given action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @param apiVersion client API version (required)
     * @return Boolean
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Boolean actionRulesDelete(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion) throws ApiException {
        ApiResponse<Boolean> localVarResp = actionRulesDeleteWithHttpInfo(subscriptionId, resourceGroupName, actionRuleName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete action rule
     * Deletes a given action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;Boolean&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Boolean> actionRulesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = actionRulesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete action rule (asynchronously)
     * Deletes a given action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be deleted (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns true if deleted successfully </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesDeleteAsync(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, final ApiCallback<Boolean> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Boolean>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesGetByName
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetByNameCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesGetByNameValidateBeforeCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesGetByName(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionRulesGetByName(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesGetByName(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionRulesGetByName(Async)");
        }

        return actionRulesGetByNameCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, _callback);

    }

    /**
     * Get action rule by name
     * Get a specific action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @param apiVersion client API version (required)
     * @return ActionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRule actionRulesGetByName(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion) throws ApiException {
        ApiResponse<ActionRule> localVarResp = actionRulesGetByNameWithHttpInfo(subscriptionId, resourceGroupName, actionRuleName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get action rule by name
     * Get a specific action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;ActionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRule> actionRulesGetByNameWithHttpInfo(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = actionRulesGetByNameValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get action rule by name (asynchronously)
     * Get a specific action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name of action rule that needs to be fetched (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the specific action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesGetByNameAsync(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, final ApiCallback<ActionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesGetByNameValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesListByResourceGroup
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (impactedScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("impactedScope", impactedScope));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (alertRuleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertRuleId", alertRuleId));
        }

        if (actionGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionGroup", actionGroup));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionRulesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionRulesListByResourceGroup(Async)");
        }

        return actionRulesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name, _callback);

    }

    /**
     * Get all action rules created in a resource group
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @return ActionRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRulesList actionRulesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name) throws ApiException {
        ApiResponse<ActionRulesList> localVarResp = actionRulesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name);
        return localVarResp.getData();
    }

    /**
     * Get all action rules created in a resource group
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @return ApiResponse&lt;ActionRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRulesList> actionRulesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name) throws ApiException {
        okhttp3.Call localVarCall = actionRulesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name, null);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all action rules created in a resource group (asynchronously)
     * List all action rules of the subscription, created in given resource group and given input filters
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name, final ApiCallback<ActionRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name, _callback);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesListBySubscription
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesListBySubscriptionCall(String subscriptionId, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/actionRules"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (impactedScope != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("impactedScope", impactedScope));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (alertRuleId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertRuleId", alertRuleId));
        }

        if (actionGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("actionGroup", actionGroup));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionRulesListBySubscription(Async)");
        }

        return actionRulesListBySubscriptionCall(subscriptionId, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name, _callback);

    }

    /**
     * Get all action rule in a given subscription
     * List all action rules of the subscription and given input filters
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @return ActionRulesList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRulesList actionRulesListBySubscription(String subscriptionId, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name) throws ApiException {
        ApiResponse<ActionRulesList> localVarResp = actionRulesListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name);
        return localVarResp.getData();
    }

    /**
     * Get all action rule in a given subscription
     * List all action rules of the subscription and given input filters
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @return ApiResponse&lt;ActionRulesList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRulesList> actionRulesListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name) throws ApiException {
        okhttp3.Call localVarCall = actionRulesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name, null);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all action rule in a given subscription (asynchronously)
     * List all action rules of the subscription and given input filters
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param impactedScope filter by impacted/target scope (provide comma separated list for multiple scopes). The value should be an well constructed ARM id of the scope. (optional)
     * @param description filter by alert rule description (optional)
     * @param alertRuleId filter by alert rule id (optional)
     * @param actionGroup filter by action group configured as part of action rule (optional)
     * @param name filter by action rule name (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Return the list of action rules </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesListBySubscriptionAsync(String subscriptionId, String apiVersion, String targetResourceGroup, String targetResourceType, String targetResource, String severity, String monitorService, String impactedScope, String description, String alertRuleId, String actionGroup, String name, final ApiCallback<ActionRulesList> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, targetResourceGroup, targetResourceType, targetResource, severity, monitorService, impactedScope, description, alertRuleId, actionGroup, name, _callback);
        Type localVarReturnType = new TypeToken<ActionRulesList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for actionRulesUpdate
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param apiVersion client API version (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesUpdateCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, PatchObject actionRulePatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = actionRulePatch;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AlertsManagement/actionRules/{actionRuleName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "actionRuleName" + "}", localVarApiClient.escapeString(actionRuleName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call actionRulesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, PatchObject actionRulePatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling actionRulesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling actionRulesUpdate(Async)");
        }

        // verify the required parameter 'actionRuleName' is set
        if (actionRuleName == null) {
            throw new ApiException("Missing the required parameter 'actionRuleName' when calling actionRulesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling actionRulesUpdate(Async)");
        }

        // verify the required parameter 'actionRulePatch' is set
        if (actionRulePatch == null) {
            throw new ApiException("Missing the required parameter 'actionRulePatch' when calling actionRulesUpdate(Async)");
        }

        return actionRulesUpdateCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRulePatch, _callback);

    }

    /**
     * Patch action rule
     * Update enabled flag and/or tags for the given action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param apiVersion client API version (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @return ActionRule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ActionRule actionRulesUpdate(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, PatchObject actionRulePatch) throws ApiException {
        ApiResponse<ActionRule> localVarResp = actionRulesUpdateWithHttpInfo(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRulePatch);
        return localVarResp.getData();
    }

    /**
     * Patch action rule
     * Update enabled flag and/or tags for the given action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param apiVersion client API version (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @return ApiResponse&lt;ActionRule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ActionRule> actionRulesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, PatchObject actionRulePatch) throws ApiException {
        okhttp3.Call localVarCall = actionRulesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRulePatch, null);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Patch action rule (asynchronously)
     * Update enabled flag and/or tags for the given action rule
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceGroupName Resource group name where the resource is created. (required)
     * @param actionRuleName The name that needs to be updated (required)
     * @param apiVersion client API version (required)
     * @param actionRulePatch Parameters supplied to the operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the created/updated action rule </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call actionRulesUpdateAsync(String subscriptionId, String resourceGroupName, String actionRuleName, String apiVersion, PatchObject actionRulePatch, final ApiCallback<ActionRule> _callback) throws ApiException {

        okhttp3.Call localVarCall = actionRulesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, actionRuleName, apiVersion, actionRulePatch, _callback);
        Type localVarReturnType = new TypeToken<ActionRule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsChangeState
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsChangeStateCall(String subscriptionId, String alertId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (newState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newState", newState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsChangeStateValidateBeforeCall(String subscriptionId, String alertId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'newState' is set
        if (newState == null) {
            throw new ApiException("Missing the required parameter 'newState' when calling alertsChangeState(Async)");
        }

        return alertsChangeStateCall(subscriptionId, alertId, apiVersion, newState, _callback);

    }

    /**
     * 
     * Change the state of an alert.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsChangeState(String subscriptionId, String alertId, String apiVersion, String newState) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsChangeStateWithHttpInfo(subscriptionId, alertId, apiVersion, newState);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the state of an alert.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsChangeStateWithHttpInfo(String subscriptionId, String alertId, String apiVersion, String newState) throws ApiException {
        okhttp3.Call localVarCall = alertsChangeStateValidateBeforeCall(subscriptionId, alertId, apiVersion, newState, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the state of an alert.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsChangeStateAsync(String subscriptionId, String alertId, String apiVersion, String newState, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsChangeStateValidateBeforeCall(subscriptionId, alertId, apiVersion, newState, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetAll
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetAllCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (alertState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertState", alertState));
        }

        if (alertRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertRule", alertRule));
        }

        if (smartGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartGroupId", smartGroupId));
        }

        if (includeContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeContext", includeContext));
        }

        if (includeEgressConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEgressConfig", includeEgressConfig));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("select", select));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (customTimeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customTimeRange", customTimeRange));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetAllValidateBeforeCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetAll(Async)");
        }

        return alertsGetAllCall(subscriptionId, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, _callback);

    }

    /**
     * 
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return AlertsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsList alertsGetAll(String subscriptionId, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange) throws ApiException {
        ApiResponse<AlertsList> localVarResp = alertsGetAllWithHttpInfo(subscriptionId, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange);
        return localVarResp.getData();
    }

    /**
     * 
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return ApiResponse&lt;AlertsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsList> alertsGetAllWithHttpInfo(String subscriptionId, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange) throws ApiException {
        okhttp3.Call localVarCall = alertsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, null);
        Type localVarReturnType = new TypeToken<AlertsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetAllAsync(String subscriptionId, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange, final ApiCallback<AlertsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, _callback);
        Type localVarReturnType = new TypeToken<AlertsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetById
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetByIdCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByIdValidateBeforeCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetById(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetById(Async)");
        }

        return alertsGetByIdCall(subscriptionId, alertId, apiVersion, _callback);

    }

    /**
     * Get a specific alert.
     * Get information related to a specific alert
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsGetById(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByIdWithHttpInfo(subscriptionId, alertId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a specific alert.
     * Get information related to a specific alert
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsGetByIdWithHttpInfo(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByIdValidateBeforeCall(subscriptionId, alertId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific alert. (asynchronously)
     * Get information related to a specific alert
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetByIdAsync(String subscriptionId, String alertId, String apiVersion, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByIdValidateBeforeCall(subscriptionId, alertId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetHistory
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetHistoryCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetHistoryValidateBeforeCall(String subscriptionId, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetHistory(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetHistory(Async)");
        }

        return alertsGetHistoryCall(subscriptionId, alertId, apiVersion, _callback);

    }

    /**
     * 
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @return AlertModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertModification alertsGetHistory(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        ApiResponse<AlertModification> localVarResp = alertsGetHistoryWithHttpInfo(subscriptionId, alertId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;AlertModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertModification> alertsGetHistoryWithHttpInfo(String subscriptionId, String alertId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = alertsGetHistoryValidateBeforeCall(subscriptionId, alertId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AlertModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved) and alert state changes (New/Acknowledged/Closed).
     * @param subscriptionId The ID of the target subscription. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetHistoryAsync(String subscriptionId, String alertId, String apiVersion, final ApiCallback<AlertModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetHistoryValidateBeforeCall(subscriptionId, alertId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AlertModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetSummary
     * @param subscriptionId The ID of the target subscription. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby&#x3D;severity or groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion client API version (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSummaryCall(String subscriptionId, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupby", groupby));
        }

        if (includeSmartGroupsCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSmartGroupsCount", includeSmartGroupsCount));
        }

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (alertState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertState", alertState));
        }

        if (alertRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertRule", alertRule));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (customTimeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customTimeRange", customTimeRange));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetSummaryValidateBeforeCall(String subscriptionId, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling alertsGetSummary(Async)");
        }

        // verify the required parameter 'groupby' is set
        if (groupby == null) {
            throw new ApiException("Missing the required parameter 'groupby' when calling alertsGetSummary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetSummary(Async)");
        }

        return alertsGetSummaryCall(subscriptionId, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, _callback);

    }

    /**
     * 
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     * @param subscriptionId The ID of the target subscription. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby&#x3D;severity or groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion client API version (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return AlertsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsSummary alertsGetSummary(String subscriptionId, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange) throws ApiException {
        ApiResponse<AlertsSummary> localVarResp = alertsGetSummaryWithHttpInfo(subscriptionId, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     * @param subscriptionId The ID of the target subscription. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby&#x3D;severity or groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion client API version (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return ApiResponse&lt;AlertsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsSummary> alertsGetSummaryWithHttpInfo(String subscriptionId, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange) throws ApiException {
        okhttp3.Call localVarCall = alertsGetSummaryValidateBeforeCall(subscriptionId, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, null);
        Type localVarReturnType = new TypeToken<AlertsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     * @param subscriptionId The ID of the target subscription. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields (Maximum 2 comma separated fields supported). For example, groupby&#x3D;severity or groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion client API version (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSummaryAsync(String subscriptionId, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange, final ApiCallback<AlertsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetSummaryValidateBeforeCall(subscriptionId, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, _callback);
        Type localVarReturnType = new TypeToken<AlertsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsMetaData
     * @param apiVersion client API version (required)
     * @param identifier Identification of the information to be retrieved by API call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert meta data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsMetaDataCall(String apiVersion, String identifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.AlertsManagement/alertsMetaData";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (identifier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("identifier", identifier));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsMetaDataValidateBeforeCall(String apiVersion, String identifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsMetaData(Async)");
        }

        // verify the required parameter 'identifier' is set
        if (identifier == null) {
            throw new ApiException("Missing the required parameter 'identifier' when calling alertsMetaData(Async)");
        }

        return alertsMetaDataCall(apiVersion, identifier, _callback);

    }

    /**
     * 
     * List alerts meta data information based on value of identifier parameter.
     * @param apiVersion client API version (required)
     * @param identifier Identification of the information to be retrieved by API call. (required)
     * @return AlertsMetaData
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert meta data. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsMetaData alertsMetaData(String apiVersion, String identifier) throws ApiException {
        ApiResponse<AlertsMetaData> localVarResp = alertsMetaDataWithHttpInfo(apiVersion, identifier);
        return localVarResp.getData();
    }

    /**
     * 
     * List alerts meta data information based on value of identifier parameter.
     * @param apiVersion client API version (required)
     * @param identifier Identification of the information to be retrieved by API call. (required)
     * @return ApiResponse&lt;AlertsMetaData&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert meta data. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsMetaData> alertsMetaDataWithHttpInfo(String apiVersion, String identifier) throws ApiException {
        okhttp3.Call localVarCall = alertsMetaDataValidateBeforeCall(apiVersion, identifier, null);
        Type localVarReturnType = new TypeToken<AlertsMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List alerts meta data information based on value of identifier parameter.
     * @param apiVersion client API version (required)
     * @param identifier Identification of the information to be retrieved by API call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert meta data. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsMetaDataAsync(String apiVersion, String identifier, final ApiCallback<AlertsMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsMetaDataValidateBeforeCall(apiVersion, identifier, _callback);
        Type localVarReturnType = new TypeToken<AlertsMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.AlertsManagement/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion client API version (required)
     * @return OperationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public OperationsList operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationsList> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;OperationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsList> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsChangeState
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsChangeStateCall(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (newState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newState", newState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsChangeStateValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'newState' is set
        if (newState == null) {
            throw new ApiException("Missing the required parameter 'newState' when calling smartGroupsChangeState(Async)");
        }

        return smartGroupsChangeStateCall(subscriptionId, smartGroupId, apiVersion, newState, _callback);

    }

    /**
     * 
     * Change the state of a Smart Group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @return SmartGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroup smartGroupsChangeState(String subscriptionId, String smartGroupId, String apiVersion, String newState) throws ApiException {
        ApiResponse<SmartGroup> localVarResp = smartGroupsChangeStateWithHttpInfo(subscriptionId, smartGroupId, apiVersion, newState);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the state of a Smart Group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @return ApiResponse&lt;SmartGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroup> smartGroupsChangeStateWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion, String newState) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsChangeStateValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, newState, null);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the state of a Smart Group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param newState New state of the alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsChangeStateAsync(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback<SmartGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsChangeStateValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, newState, _callback);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetAll
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetAllCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (smartGroupState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartGroupState", smartGroupState));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetAllValidateBeforeCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetAll(Async)");
        }

        return smartGroupsGetAllCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, _callback);

    }

    /**
     * Get all Smart Groups within a specified subscription
     * List all the Smart Groups within a specified subscription. 
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @return SmartGroupsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroupsList smartGroupsGetAll(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<SmartGroupsList> localVarResp = smartGroupsGetAllWithHttpInfo(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get all Smart Groups within a specified subscription
     * List all the Smart Groups within a specified subscription. 
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @return ApiResponse&lt;SmartGroupsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroupsList> smartGroupsGetAllWithHttpInfo(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<SmartGroupsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Smart Groups within a specified subscription (asynchronously)
     * List all the Smart Groups within a specified subscription. 
     * @param subscriptionId The ID of the target subscription. (required)
     * @param apiVersion client API version (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetAllAsync(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback<SmartGroupsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<SmartGroupsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetById
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetByIdCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetByIdValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetById(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetById(Async)");
        }

        return smartGroupsGetByIdCall(subscriptionId, smartGroupId, apiVersion, _callback);

    }

    /**
     * Get information related to a specific Smart Group.
     * Get information related to a specific Smart Group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @return SmartGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroup smartGroupsGetById(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        ApiResponse<SmartGroup> localVarResp = smartGroupsGetByIdWithHttpInfo(subscriptionId, smartGroupId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get information related to a specific Smart Group.
     * Get information related to a specific Smart Group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;SmartGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroup> smartGroupsGetByIdWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetByIdValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information related to a specific Smart Group. (asynchronously)
     * Get information related to a specific Smart Group.
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetByIdAsync(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback<SmartGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetByIdValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetHistory
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetHistoryCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetHistoryValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetHistory(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsGetHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetHistory(Async)");
        }

        return smartGroupsGetHistoryCall(subscriptionId, smartGroupId, apiVersion, _callback);

    }

    /**
     * 
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @return SmartGroupModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroupModification smartGroupsGetHistory(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        ApiResponse<SmartGroupModification> localVarResp = smartGroupsGetHistoryWithHttpInfo(subscriptionId, smartGroupId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @return ApiResponse&lt;SmartGroupModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroupModification> smartGroupsGetHistoryWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetHistoryValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SmartGroupModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param subscriptionId The ID of the target subscription. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion client API version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetHistoryAsync(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback<SmartGroupModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetHistoryValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SmartGroupModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
