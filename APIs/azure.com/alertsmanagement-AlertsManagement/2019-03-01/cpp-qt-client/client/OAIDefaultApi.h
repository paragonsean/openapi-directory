/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAlert.h"
#include "OAIAlertModification.h"
#include "OAIAlertsList.h"
#include "OAIAlertsSummary.h"
#include "OAIErrorResponse.h"
#include "OAIOperationsList.h"
#include "OAISmartGroup.h"
#include "OAISmartGroupModification.h"
#include "OAISmartGroupsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  new_state QString [required]
    */
    virtual void alertsChangeState(const QString &scope, const QString &alert_id, const QString &api_version, const QString &new_state);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  target_resource QString [optional]
    * @param[in]  target_resource_type QString [optional]
    * @param[in]  target_resource_group QString [optional]
    * @param[in]  monitor_service QString [optional]
    * @param[in]  monitor_condition QString [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  alert_state QString [optional]
    * @param[in]  alert_rule QString [optional]
    * @param[in]  smart_group_id QString [optional]
    * @param[in]  include_context bool [optional]
    * @param[in]  include_egress_config bool [optional]
    * @param[in]  page_count qint32 [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  select QString [optional]
    * @param[in]  time_range QString [optional]
    * @param[in]  custom_time_range QString [optional]
    */
    virtual void alertsGetAll(const QString &scope, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &target_resource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_resource_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_resource_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monitor_service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monitor_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alert_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alert_rule = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &smart_group_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &include_context = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_egress_config = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &page_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &select = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_time_range = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  scope QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void alertsGetById(const QString &scope, const QString &alert_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  alert_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void alertsGetHistory(const QString &scope, const QString &alert_id, const QString &api_version);

    /**
    * @param[in]  scope QString [required]
    * @param[in]  groupby QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  include_smart_groups_count bool [optional]
    * @param[in]  target_resource QString [optional]
    * @param[in]  target_resource_type QString [optional]
    * @param[in]  target_resource_group QString [optional]
    * @param[in]  monitor_service QString [optional]
    * @param[in]  monitor_condition QString [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  alert_state QString [optional]
    * @param[in]  alert_rule QString [optional]
    * @param[in]  time_range QString [optional]
    * @param[in]  custom_time_range QString [optional]
    */
    virtual void alertsGetSummary(const QString &scope, const QString &groupby, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &include_smart_groups_count = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &target_resource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_resource_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_resource_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monitor_service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monitor_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alert_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &alert_rule = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &custom_time_range = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    */
    virtual void operationsList(const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  smart_group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  new_state QString [required]
    */
    virtual void smartGroupsChangeState(const QString &subscription_id, const QString &smart_group_id, const QString &api_version, const QString &new_state);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  target_resource QString [optional]
    * @param[in]  target_resource_group QString [optional]
    * @param[in]  target_resource_type QString [optional]
    * @param[in]  monitor_service QString [optional]
    * @param[in]  monitor_condition QString [optional]
    * @param[in]  severity QString [optional]
    * @param[in]  smart_group_state QString [optional]
    * @param[in]  time_range QString [optional]
    * @param[in]  page_count qint32 [optional]
    * @param[in]  sort_by QString [optional]
    * @param[in]  sort_order QString [optional]
    */
    virtual void smartGroupsGetAll(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &target_resource = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_resource_group = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &target_resource_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monitor_service = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &monitor_condition = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &severity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &smart_group_state = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &time_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page_count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort_by = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  smart_group_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void smartGroupsGetById(const QString &subscription_id, const QString &smart_group_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  smart_group_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void smartGroupsGetHistory(const QString &subscription_id, const QString &smart_group_id, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void alertsChangeStateCallback(OAIHttpRequestWorker *worker);
    void alertsGetAllCallback(OAIHttpRequestWorker *worker);
    void alertsGetByIdCallback(OAIHttpRequestWorker *worker);
    void alertsGetHistoryCallback(OAIHttpRequestWorker *worker);
    void alertsGetSummaryCallback(OAIHttpRequestWorker *worker);
    void operationsListCallback(OAIHttpRequestWorker *worker);
    void smartGroupsChangeStateCallback(OAIHttpRequestWorker *worker);
    void smartGroupsGetAllCallback(OAIHttpRequestWorker *worker);
    void smartGroupsGetByIdCallback(OAIHttpRequestWorker *worker);
    void smartGroupsGetHistoryCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void alertsChangeStateSignal(OAIAlert summary);
    void alertsGetAllSignal(OAIAlertsList summary);
    void alertsGetByIdSignal(OAIAlert summary);
    void alertsGetHistorySignal(OAIAlertModification summary);
    void alertsGetSummarySignal(OAIAlertsSummary summary);
    void operationsListSignal(OAIOperationsList summary);
    void smartGroupsChangeStateSignal(OAISmartGroup summary);
    void smartGroupsGetAllSignal(OAISmartGroupsList summary);
    void smartGroupsGetByIdSignal(OAISmartGroup summary);
    void smartGroupsGetHistorySignal(OAISmartGroupModification summary);


    void alertsChangeStateSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetAllSignalFull(OAIHttpRequestWorker *worker, OAIAlertsList summary);
    void alertsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAIAlert summary);
    void alertsGetHistorySignalFull(OAIHttpRequestWorker *worker, OAIAlertModification summary);
    void alertsGetSummarySignalFull(OAIHttpRequestWorker *worker, OAIAlertsSummary summary);
    void operationsListSignalFull(OAIHttpRequestWorker *worker, OAIOperationsList summary);
    void smartGroupsChangeStateSignalFull(OAIHttpRequestWorker *worker, OAISmartGroup summary);
    void smartGroupsGetAllSignalFull(OAIHttpRequestWorker *worker, OAISmartGroupsList summary);
    void smartGroupsGetByIdSignalFull(OAIHttpRequestWorker *worker, OAISmartGroup summary);
    void smartGroupsGetHistorySignalFull(OAIHttpRequestWorker *worker, OAISmartGroupModification summary);

    Q_DECL_DEPRECATED_X("Use alertsChangeStateSignalError() instead")
    void alertsChangeStateSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsChangeStateSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetAllSignalError() instead")
    void alertsGetAllSignalE(OAIAlertsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetAllSignalError(OAIAlertsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByIdSignalError() instead")
    void alertsGetByIdSignalE(OAIAlert summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByIdSignalError(OAIAlert summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetHistorySignalError() instead")
    void alertsGetHistorySignalE(OAIAlertModification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetHistorySignalError(OAIAlertModification summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetSummarySignalError() instead")
    void alertsGetSummarySignalE(OAIAlertsSummary summary, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetSummarySignalError(OAIAlertsSummary summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalError() instead")
    void operationsListSignalE(OAIOperationsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalError(OAIOperationsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsChangeStateSignalError() instead")
    void smartGroupsChangeStateSignalE(OAISmartGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsChangeStateSignalError(OAISmartGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsGetAllSignalError() instead")
    void smartGroupsGetAllSignalE(OAISmartGroupsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsGetAllSignalError(OAISmartGroupsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsGetByIdSignalError() instead")
    void smartGroupsGetByIdSignalE(OAISmartGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsGetByIdSignalError(OAISmartGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsGetHistorySignalError() instead")
    void smartGroupsGetHistorySignalE(OAISmartGroupModification summary, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsGetHistorySignalError(OAISmartGroupModification summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use alertsChangeStateSignalErrorFull() instead")
    void alertsChangeStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsChangeStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetAllSignalErrorFull() instead")
    void alertsGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetByIdSignalErrorFull() instead")
    void alertsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetHistorySignalErrorFull() instead")
    void alertsGetHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use alertsGetSummarySignalErrorFull() instead")
    void alertsGetSummarySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void alertsGetSummarySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use operationsListSignalErrorFull() instead")
    void operationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsChangeStateSignalErrorFull() instead")
    void smartGroupsChangeStateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsChangeStateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsGetAllSignalErrorFull() instead")
    void smartGroupsGetAllSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsGetAllSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsGetByIdSignalErrorFull() instead")
    void smartGroupsGetByIdSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsGetByIdSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use smartGroupsGetHistorySignalErrorFull() instead")
    void smartGroupsGetHistorySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void smartGroupsGetHistorySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
