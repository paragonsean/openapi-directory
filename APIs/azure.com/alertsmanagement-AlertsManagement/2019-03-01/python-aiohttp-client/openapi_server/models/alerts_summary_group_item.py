# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertsSummaryGroupItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, groupedby: str=None, name: str=None, values: List[AlertsSummaryGroupItem]=None):
        """AlertsSummaryGroupItem - a model defined in OpenAPI

        :param count: The count of this AlertsSummaryGroupItem.
        :param groupedby: The groupedby of this AlertsSummaryGroupItem.
        :param name: The name of this AlertsSummaryGroupItem.
        :param values: The values of this AlertsSummaryGroupItem.
        """
        self.openapi_types = {
            'count': int,
            'groupedby': str,
            'name': str,
            'values': List[AlertsSummaryGroupItem]
        }

        self.attribute_map = {
            'count': 'count',
            'groupedby': 'groupedby',
            'name': 'name',
            'values': 'values'
        }

        self._count = count
        self._groupedby = groupedby
        self._name = name
        self._values = values

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertsSummaryGroupItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertsSummaryGroupItem of this AlertsSummaryGroupItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this AlertsSummaryGroupItem.

        Count of the aggregated field

        :return: The count of this AlertsSummaryGroupItem.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this AlertsSummaryGroupItem.

        Count of the aggregated field

        :param count: The count of this AlertsSummaryGroupItem.
        :type count: int
        """

        self._count = count

    @property
    def groupedby(self):
        """Gets the groupedby of this AlertsSummaryGroupItem.

        Name of the field aggregated

        :return: The groupedby of this AlertsSummaryGroupItem.
        :rtype: str
        """
        return self._groupedby

    @groupedby.setter
    def groupedby(self, groupedby):
        """Sets the groupedby of this AlertsSummaryGroupItem.

        Name of the field aggregated

        :param groupedby: The groupedby of this AlertsSummaryGroupItem.
        :type groupedby: str
        """

        self._groupedby = groupedby

    @property
    def name(self):
        """Gets the name of this AlertsSummaryGroupItem.

        Value of the aggregated field

        :return: The name of this AlertsSummaryGroupItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AlertsSummaryGroupItem.

        Value of the aggregated field

        :param name: The name of this AlertsSummaryGroupItem.
        :type name: str
        """

        self._name = name

    @property
    def values(self):
        """Gets the values of this AlertsSummaryGroupItem.

        List of the items

        :return: The values of this AlertsSummaryGroupItem.
        :rtype: List[AlertsSummaryGroupItem]
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this AlertsSummaryGroupItem.

        List of the items

        :param values: The values of this AlertsSummaryGroupItem.
        :type values: List[AlertsSummaryGroupItem]
        """

        self._values = values
