# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AlertModificationItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comments: str=None, description: str=None, modification_event: str=None, modified_at: str=None, modified_by: str=None, new_value: str=None, old_value: str=None):
        """AlertModificationItem - a model defined in OpenAPI

        :param comments: The comments of this AlertModificationItem.
        :param description: The description of this AlertModificationItem.
        :param modification_event: The modification_event of this AlertModificationItem.
        :param modified_at: The modified_at of this AlertModificationItem.
        :param modified_by: The modified_by of this AlertModificationItem.
        :param new_value: The new_value of this AlertModificationItem.
        :param old_value: The old_value of this AlertModificationItem.
        """
        self.openapi_types = {
            'comments': str,
            'description': str,
            'modification_event': str,
            'modified_at': str,
            'modified_by': str,
            'new_value': str,
            'old_value': str
        }

        self.attribute_map = {
            'comments': 'comments',
            'description': 'description',
            'modification_event': 'modificationEvent',
            'modified_at': 'modifiedAt',
            'modified_by': 'modifiedBy',
            'new_value': 'newValue',
            'old_value': 'oldValue'
        }

        self._comments = comments
        self._description = description
        self._modification_event = modification_event
        self._modified_at = modified_at
        self._modified_by = modified_by
        self._new_value = new_value
        self._old_value = old_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AlertModificationItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The alertModificationItem of this AlertModificationItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comments(self):
        """Gets the comments of this AlertModificationItem.

        Modification comments

        :return: The comments of this AlertModificationItem.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AlertModificationItem.

        Modification comments

        :param comments: The comments of this AlertModificationItem.
        :type comments: str
        """

        self._comments = comments

    @property
    def description(self):
        """Gets the description of this AlertModificationItem.

        Description of the modification

        :return: The description of this AlertModificationItem.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AlertModificationItem.

        Description of the modification

        :param description: The description of this AlertModificationItem.
        :type description: str
        """

        self._description = description

    @property
    def modification_event(self):
        """Gets the modification_event of this AlertModificationItem.

        Reason for the modification

        :return: The modification_event of this AlertModificationItem.
        :rtype: str
        """
        return self._modification_event

    @modification_event.setter
    def modification_event(self, modification_event):
        """Sets the modification_event of this AlertModificationItem.

        Reason for the modification

        :param modification_event: The modification_event of this AlertModificationItem.
        :type modification_event: str
        """
        allowed_values = ["AlertCreated", "StateChange", "MonitorConditionChange"]  # noqa: E501
        if modification_event not in allowed_values:
            raise ValueError(
                "Invalid value for `modification_event` ({0}), must be one of {1}"
                .format(modification_event, allowed_values)
            )

        self._modification_event = modification_event

    @property
    def modified_at(self):
        """Gets the modified_at of this AlertModificationItem.

        Modified date and time

        :return: The modified_at of this AlertModificationItem.
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this AlertModificationItem.

        Modified date and time

        :param modified_at: The modified_at of this AlertModificationItem.
        :type modified_at: str
        """

        self._modified_at = modified_at

    @property
    def modified_by(self):
        """Gets the modified_by of this AlertModificationItem.

        Modified user details (Principal client name)

        :return: The modified_by of this AlertModificationItem.
        :rtype: str
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """Sets the modified_by of this AlertModificationItem.

        Modified user details (Principal client name)

        :param modified_by: The modified_by of this AlertModificationItem.
        :type modified_by: str
        """

        self._modified_by = modified_by

    @property
    def new_value(self):
        """Gets the new_value of this AlertModificationItem.

        New value

        :return: The new_value of this AlertModificationItem.
        :rtype: str
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value):
        """Sets the new_value of this AlertModificationItem.

        New value

        :param new_value: The new_value of this AlertModificationItem.
        :type new_value: str
        """

        self._new_value = new_value

    @property
    def old_value(self):
        """Gets the old_value of this AlertModificationItem.

        Old value

        :return: The old_value of this AlertModificationItem.
        :rtype: str
        """
        return self._old_value

    @old_value.setter
    def old_value(self, old_value):
        """Sets the old_value of this AlertModificationItem.

        Old value

        :param old_value: The old_value of this AlertModificationItem.
        :type old_value: str
        """

        self._old_value = old_value
