/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Alert;
import org.openapitools.client.model.AlertModification;
import org.openapitools.client.model.AlertsList;
import org.openapitools.client.model.AlertsSummary;
import org.openapitools.client.model.ErrorResponse;
import org.openapitools.client.model.OperationsList;
import org.openapitools.client.model.SmartGroup;
import org.openapitools.client.model.SmartGroupModification;
import org.openapitools.client.model.SmartGroupsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for alertsChangeState
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsChangeStateCall(String scope, String alertId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (newState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newState", newState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsChangeStateValidateBeforeCall(String scope, String alertId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsChangeState(Async)");
        }

        // verify the required parameter 'newState' is set
        if (newState == null) {
            throw new ApiException("Missing the required parameter 'newState' when calling alertsChangeState(Async)");
        }

        return alertsChangeStateCall(scope, alertId, apiVersion, newState, _callback);

    }

    /**
     * 
     * Change the state of an alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to change state of this particular alert then use parent resource of scope. So in this example change state call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsChangeState(String scope, String alertId, String apiVersion, String newState) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsChangeStateWithHttpInfo(scope, alertId, apiVersion, newState);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the state of an alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to change state of this particular alert then use parent resource of scope. So in this example change state call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsChangeStateWithHttpInfo(String scope, String alertId, String apiVersion, String newState) throws ApiException {
        okhttp3.Call localVarCall = alertsChangeStateValidateBeforeCall(scope, alertId, apiVersion, newState, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the state of an alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to change state of this particular alert then use parent resource of scope. So in this example change state call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert state updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsChangeStateAsync(String scope, String alertId, String apiVersion, String newState, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsChangeStateValidateBeforeCall(scope, alertId, apiVersion, newState, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetAll
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetAllCall(String scope, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.AlertsManagement/alerts"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (alertState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertState", alertState));
        }

        if (alertRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertRule", alertRule));
        }

        if (smartGroupId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartGroupId", smartGroupId));
        }

        if (includeContext != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeContext", includeContext));
        }

        if (includeEgressConfig != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeEgressConfig", includeEgressConfig));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (select != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("select", select));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (customTimeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customTimeRange", customTimeRange));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetAllValidateBeforeCall(String scope, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling alertsGetAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetAll(Async)");
        }

        return alertsGetAllCall(scope, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, _callback);

    }

    /**
     * 
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return AlertsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsList alertsGetAll(String scope, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange) throws ApiException {
        ApiResponse<AlertsList> localVarResp = alertsGetAllWithHttpInfo(scope, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange);
        return localVarResp.getData();
    }

    /**
     * 
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return ApiResponse&lt;AlertsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsList> alertsGetAllWithHttpInfo(String scope, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange) throws ApiException {
        okhttp3.Call localVarCall = alertsGetAllValidateBeforeCall(scope, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, null);
        Type localVarReturnType = new TypeToken<AlertsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param smartGroupId Filter the alerts list by the Smart Group Id. Default value is none. (optional)
     * @param includeContext Include context which has contextual data specific to the monitor service. Default value is false&#39; (optional)
     * @param includeEgressConfig Include egress config which would be used for displaying the content in portal.  Default value is &#39;false&#39;. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field,  Default value is &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param select This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully listed alert objects. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetAllAsync(String scope, String apiVersion, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String smartGroupId, Boolean includeContext, Boolean includeEgressConfig, Integer pageCount, String sortBy, String sortOrder, String select, String timeRange, String customTimeRange, final ApiCallback<AlertsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetAllValidateBeforeCall(scope, apiVersion, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, smartGroupId, includeContext, includeEgressConfig, pageCount, sortBy, sortOrder, select, timeRange, customTimeRange, _callback);
        Type localVarReturnType = new TypeToken<AlertsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetById
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetByIdCall(String scope, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetByIdValidateBeforeCall(String scope, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling alertsGetById(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetById(Async)");
        }

        return alertsGetByIdCall(scope, alertId, apiVersion, _callback);

    }

    /**
     * Get a specific alert.
     * Get information related to a specific alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to get alert by id then use parent resource of scope. So in this example get alert by id call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @return Alert
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public Alert alertsGetById(String scope, String alertId, String apiVersion) throws ApiException {
        ApiResponse<Alert> localVarResp = alertsGetByIdWithHttpInfo(scope, alertId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a specific alert.
     * Get information related to a specific alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to get alert by id then use parent resource of scope. So in this example get alert by id call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @return ApiResponse&lt;Alert&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Alert> alertsGetByIdWithHttpInfo(String scope, String alertId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = alertsGetByIdValidateBeforeCall(scope, alertId, apiVersion, null);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specific alert. (asynchronously)
     * Get information related to a specific alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to get alert by id then use parent resource of scope. So in this example get alert by id call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the alert with the specified ID. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetByIdAsync(String scope, String alertId, String apiVersion, final ApiCallback<Alert> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetByIdValidateBeforeCall(scope, alertId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Alert>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetHistory
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetHistoryCall(String scope, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()))
            .replace("{" + "alertId" + "}", localVarApiClient.escapeString(alertId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetHistoryValidateBeforeCall(String scope, String alertId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling alertsGetHistory(Async)");
        }

        // verify the required parameter 'alertId' is set
        if (alertId == null) {
            throw new ApiException("Missing the required parameter 'alertId' when calling alertsGetHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetHistory(Async)");
        }

        return alertsGetHistoryCall(scope, alertId, apiVersion, _callback);

    }

    /**
     * 
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved), alert state changes (New/Acknowledged/Closed) and applied action rules for that particular alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to get history of this particular alert then use parent resource of scope. So in this example get history call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @return AlertModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertModification alertsGetHistory(String scope, String alertId, String apiVersion) throws ApiException {
        ApiResponse<AlertModification> localVarResp = alertsGetHistoryWithHttpInfo(scope, alertId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved), alert state changes (New/Acknowledged/Closed) and applied action rules for that particular alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to get history of this particular alert then use parent resource of scope. So in this example get history call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @return ApiResponse&lt;AlertModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertModification> alertsGetHistoryWithHttpInfo(String scope, String alertId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = alertsGetHistoryValidateBeforeCall(scope, alertId, apiVersion, null);
        Type localVarReturnType = new TypeToken<AlertModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved), alert state changes (New/Acknowledged/Closed) and applied action rules for that particular alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}&#39; and &#39;vm1&#39; is deleted then if you want to get history of this particular alert then use parent resource of scope. So in this example get history call will look like this: &#39;/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history&#39;.
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param alertId Unique ID of an alert instance. (required)
     * @param apiVersion API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the history of the specified alert. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetHistoryAsync(String scope, String alertId, String apiVersion, final ApiCallback<AlertModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetHistoryValidateBeforeCall(scope, alertId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<AlertModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for alertsGetSummary
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields. For example, groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion API version. (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSummaryCall(String scope, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/{scope}/providers/Microsoft.AlertsManagement/alertsSummary"
            .replace("{" + "scope" + "}", localVarApiClient.escapeString(scope.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (groupby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("groupby", groupby));
        }

        if (includeSmartGroupsCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeSmartGroupsCount", includeSmartGroupsCount));
        }

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (alertState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertState", alertState));
        }

        if (alertRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alertRule", alertRule));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (customTimeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("customTimeRange", customTimeRange));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call alertsGetSummaryValidateBeforeCall(String scope, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling alertsGetSummary(Async)");
        }

        // verify the required parameter 'groupby' is set
        if (groupby == null) {
            throw new ApiException("Missing the required parameter 'groupby' when calling alertsGetSummary(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling alertsGetSummary(Async)");
        }

        return alertsGetSummaryCall(scope, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, _callback);

    }

    /**
     * 
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields. For example, groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion API version. (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return AlertsSummary
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AlertsSummary alertsGetSummary(String scope, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange) throws ApiException {
        ApiResponse<AlertsSummary> localVarResp = alertsGetSummaryWithHttpInfo(scope, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields. For example, groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion API version. (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @return ApiResponse&lt;AlertsSummary&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AlertsSummary> alertsGetSummaryWithHttpInfo(String scope, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange) throws ApiException {
        okhttp3.Call localVarCall = alertsGetSummaryValidateBeforeCall(scope, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, null);
        Type localVarReturnType = new TypeToken<AlertsSummary>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by &#39;Severity&#39; returns the count of alerts for each severity).
     * @param scope scope here is resourceId for which alert is created. (required)
     * @param groupby This parameter allows the result set to be grouped by input fields. For example, groupby&#x3D;severity,alertstate. (required)
     * @param apiVersion API version. (required)
     * @param includeSmartGroupsCount Include count of the SmartGroups as part of the summary. Default value is &#39;false&#39;. (optional)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param alertState Filter by state of the alert instance. Default value is to select all. (optional)
     * @param alertRule Filter by specific alert rule.  Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param customTimeRange Filter by custom time range in the format &lt;start-time&gt;/&lt;end-time&gt;  where time is in (ISO-8601 format)&#39;. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Alert summary returned. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call alertsGetSummaryAsync(String scope, String groupby, String apiVersion, Boolean includeSmartGroupsCount, String targetResource, String targetResourceType, String targetResourceGroup, String monitorService, String monitorCondition, String severity, String alertState, String alertRule, String timeRange, String customTimeRange, final ApiCallback<AlertsSummary> _callback) throws ApiException {

        okhttp3.Call localVarCall = alertsGetSummaryValidateBeforeCall(scope, groupby, apiVersion, includeSmartGroupsCount, targetResource, targetResourceType, targetResourceGroup, monitorService, monitorCondition, severity, alertState, alertRule, timeRange, customTimeRange, _callback);
        Type localVarReturnType = new TypeToken<AlertsSummary>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationsList
     * @param apiVersion API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.AlertsManagement/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationsListValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling operationsList(Async)");
        }

        return operationsListCall(apiVersion, _callback);

    }

    /**
     * 
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion API version. (required)
     * @return OperationsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public OperationsList operationsList(String apiVersion) throws ApiException {
        ApiResponse<OperationsList> localVarResp = operationsListWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion API version. (required)
     * @return ApiResponse&lt;OperationsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationsList> operationsListWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param apiVersion API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Successfully retrieved operations list. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationsListAsync(String apiVersion, final ApiCallback<OperationsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationsListValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsChangeState
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsChangeStateCall(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (newState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("newState", newState));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsChangeStateValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsChangeState(Async)");
        }

        // verify the required parameter 'newState' is set
        if (newState == null) {
            throw new ApiException("Missing the required parameter 'newState' when calling smartGroupsChangeState(Async)");
        }

        return smartGroupsChangeStateCall(subscriptionId, smartGroupId, apiVersion, newState, _callback);

    }

    /**
     * 
     * Change the state of a Smart Group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @return SmartGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroup smartGroupsChangeState(String subscriptionId, String smartGroupId, String apiVersion, String newState) throws ApiException {
        ApiResponse<SmartGroup> localVarResp = smartGroupsChangeStateWithHttpInfo(subscriptionId, smartGroupId, apiVersion, newState);
        return localVarResp.getData();
    }

    /**
     * 
     * Change the state of a Smart Group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @return ApiResponse&lt;SmartGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroup> smartGroupsChangeStateWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion, String newState) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsChangeStateValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, newState, null);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Change the state of a Smart Group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param newState New state of the alert. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Smart Group state updated. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsChangeStateAsync(String subscriptionId, String smartGroupId, String apiVersion, String newState, final ApiCallback<SmartGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsChangeStateValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, newState, _callback);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetAll
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetAllCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (targetResource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResource", targetResource));
        }

        if (targetResourceGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceGroup", targetResourceGroup));
        }

        if (targetResourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("targetResourceType", targetResourceType));
        }

        if (monitorService != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorService", monitorService));
        }

        if (monitorCondition != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("monitorCondition", monitorCondition));
        }

        if (severity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("severity", severity));
        }

        if (smartGroupState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smartGroupState", smartGroupState));
        }

        if (timeRange != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeRange", timeRange));
        }

        if (pageCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageCount", pageCount));
        }

        if (sortBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortBy", sortBy));
        }

        if (sortOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sortOrder", sortOrder));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetAllValidateBeforeCall(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetAll(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetAll(Async)");
        }

        return smartGroupsGetAllCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, _callback);

    }

    /**
     * Get all Smart Groups within a specified subscription
     * List all the Smart Groups within a specified subscription. 
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @return SmartGroupsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroupsList smartGroupsGetAll(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        ApiResponse<SmartGroupsList> localVarResp = smartGroupsGetAllWithHttpInfo(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder);
        return localVarResp.getData();
    }

    /**
     * Get all Smart Groups within a specified subscription
     * List all the Smart Groups within a specified subscription. 
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @return ApiResponse&lt;SmartGroupsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroupsList> smartGroupsGetAllWithHttpInfo(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, null);
        Type localVarReturnType = new TypeToken<SmartGroupsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get all Smart Groups within a specified subscription (asynchronously)
     * List all the Smart Groups within a specified subscription. 
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion API version. (required)
     * @param targetResource Filter by target resource( which is full ARM ID) Default value is select all. (optional)
     * @param targetResourceGroup Filter by target resource group name. Default value is select all. (optional)
     * @param targetResourceType Filter by target resource type. Default value is select all. (optional)
     * @param monitorService Filter by monitor service which generates the alert instance. Default value is select all. (optional)
     * @param monitorCondition Filter by monitor condition which is either &#39;Fired&#39; or &#39;Resolved&#39;. Default value is to select all. (optional)
     * @param severity Filter by severity.  Default value is select all. (optional)
     * @param smartGroupState Filter by state of the smart group. Default value is to select all. (optional)
     * @param timeRange Filter by time range by below listed values. Default value is 1 day. (optional)
     * @param pageCount Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \&quot;includeContent\&quot;  filter is selected, maximum value allowed is 25. Default value is 25. (optional)
     * @param sortBy Sort the query results by input field. Default value is sort by &#39;lastModifiedDateTime&#39;. (optional)
     * @param sortOrder Sort the query results order in either ascending or descending.  Default value is &#39;desc&#39; for time fields and &#39;asc&#39; for others. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns list of all smartGroups. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetAllAsync(String subscriptionId, String apiVersion, String targetResource, String targetResourceGroup, String targetResourceType, String monitorService, String monitorCondition, String severity, String smartGroupState, String timeRange, Integer pageCount, String sortBy, String sortOrder, final ApiCallback<SmartGroupsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetAllValidateBeforeCall(subscriptionId, apiVersion, targetResource, targetResourceGroup, targetResourceType, monitorService, monitorCondition, severity, smartGroupState, timeRange, pageCount, sortBy, sortOrder, _callback);
        Type localVarReturnType = new TypeToken<SmartGroupsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetById
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetByIdCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetByIdValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetById(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsGetById(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetById(Async)");
        }

        return smartGroupsGetByIdCall(subscriptionId, smartGroupId, apiVersion, _callback);

    }

    /**
     * Get information related to a specific Smart Group.
     * Get information related to a specific Smart Group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @return SmartGroup
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroup smartGroupsGetById(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        ApiResponse<SmartGroup> localVarResp = smartGroupsGetByIdWithHttpInfo(subscriptionId, smartGroupId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get information related to a specific Smart Group.
     * Get information related to a specific Smart Group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @return ApiResponse&lt;SmartGroup&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroup> smartGroupsGetByIdWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetByIdValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get information related to a specific Smart Group. (asynchronously)
     * Get information related to a specific Smart Group.
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the group with the specified smart group Id. </td><td>  * x-ms-request-id - Service generated Request ID. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetByIdAsync(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback<SmartGroup> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetByIdValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SmartGroup>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for smartGroupsGetHistory
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetHistoryCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "smartGroupId" + "}", localVarApiClient.escapeString(smartGroupId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call smartGroupsGetHistoryValidateBeforeCall(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling smartGroupsGetHistory(Async)");
        }

        // verify the required parameter 'smartGroupId' is set
        if (smartGroupId == null) {
            throw new ApiException("Missing the required parameter 'smartGroupId' when calling smartGroupsGetHistory(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling smartGroupsGetHistory(Async)");
        }

        return smartGroupsGetHistoryCall(subscriptionId, smartGroupId, apiVersion, _callback);

    }

    /**
     * 
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @return SmartGroupModification
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public SmartGroupModification smartGroupsGetHistory(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        ApiResponse<SmartGroupModification> localVarResp = smartGroupsGetHistoryWithHttpInfo(subscriptionId, smartGroupId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @return ApiResponse&lt;SmartGroupModification&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmartGroupModification> smartGroupsGetHistoryWithHttpInfo(String subscriptionId, String smartGroupId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = smartGroupsGetHistoryValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, null);
        Type localVarReturnType = new TypeToken<SmartGroupModification>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param smartGroupId Smart group unique id.  (required)
     * @param apiVersion API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. Returns the list of changes of smart group. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call smartGroupsGetHistoryAsync(String subscriptionId, String smartGroupId, String apiVersion, final ApiCallback<SmartGroupModification> _callback) throws ApiException {

        okhttp3.Call localVarCall = smartGroupsGetHistoryValidateBeforeCall(subscriptionId, smartGroupId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SmartGroupModification>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
