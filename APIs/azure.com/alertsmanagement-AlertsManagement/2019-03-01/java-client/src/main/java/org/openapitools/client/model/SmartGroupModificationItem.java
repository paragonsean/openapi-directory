/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * smartGroup modification item.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:21.048550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmartGroupModificationItem {
  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  /**
   * Reason for the modification
   */
  @JsonAdapter(ModificationEventEnum.Adapter.class)
  public enum ModificationEventEnum {
    SMART_GROUP_CREATED("SmartGroupCreated"),
    
    STATE_CHANGE("StateChange"),
    
    ALERT_ADDED("AlertAdded"),
    
    ALERT_REMOVED("AlertRemoved");

    private String value;

    ModificationEventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModificationEventEnum fromValue(String value) {
      for (ModificationEventEnum b : ModificationEventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModificationEventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModificationEventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModificationEventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModificationEventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ModificationEventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODIFICATION_EVENT = "modificationEvent";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_EVENT)
  private ModificationEventEnum modificationEvent;

  public static final String SERIALIZED_NAME_MODIFIED_AT = "modifiedAt";
  @SerializedName(SERIALIZED_NAME_MODIFIED_AT)
  private String modifiedAt;

  public static final String SERIALIZED_NAME_MODIFIED_BY = "modifiedBy";
  @SerializedName(SERIALIZED_NAME_MODIFIED_BY)
  private String modifiedBy;

  public static final String SERIALIZED_NAME_NEW_VALUE = "newValue";
  @SerializedName(SERIALIZED_NAME_NEW_VALUE)
  private String newValue;

  public static final String SERIALIZED_NAME_OLD_VALUE = "oldValue";
  @SerializedName(SERIALIZED_NAME_OLD_VALUE)
  private String oldValue;

  public SmartGroupModificationItem() {
  }

  public SmartGroupModificationItem comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Modification comments
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public SmartGroupModificationItem description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the modification
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SmartGroupModificationItem modificationEvent(ModificationEventEnum modificationEvent) {
    this.modificationEvent = modificationEvent;
    return this;
  }

  /**
   * Reason for the modification
   * @return modificationEvent
   */
  @javax.annotation.Nullable
  public ModificationEventEnum getModificationEvent() {
    return modificationEvent;
  }

  public void setModificationEvent(ModificationEventEnum modificationEvent) {
    this.modificationEvent = modificationEvent;
  }


  public SmartGroupModificationItem modifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
    return this;
  }

  /**
   * Modified date and time
   * @return modifiedAt
   */
  @javax.annotation.Nullable
  public String getModifiedAt() {
    return modifiedAt;
  }

  public void setModifiedAt(String modifiedAt) {
    this.modifiedAt = modifiedAt;
  }


  public SmartGroupModificationItem modifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
    return this;
  }

  /**
   * Modified user details (Principal client name)
   * @return modifiedBy
   */
  @javax.annotation.Nullable
  public String getModifiedBy() {
    return modifiedBy;
  }

  public void setModifiedBy(String modifiedBy) {
    this.modifiedBy = modifiedBy;
  }


  public SmartGroupModificationItem newValue(String newValue) {
    this.newValue = newValue;
    return this;
  }

  /**
   * New value
   * @return newValue
   */
  @javax.annotation.Nullable
  public String getNewValue() {
    return newValue;
  }

  public void setNewValue(String newValue) {
    this.newValue = newValue;
  }


  public SmartGroupModificationItem oldValue(String oldValue) {
    this.oldValue = oldValue;
    return this;
  }

  /**
   * Old value
   * @return oldValue
   */
  @javax.annotation.Nullable
  public String getOldValue() {
    return oldValue;
  }

  public void setOldValue(String oldValue) {
    this.oldValue = oldValue;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartGroupModificationItem smartGroupModificationItem = (SmartGroupModificationItem) o;
    return Objects.equals(this.comments, smartGroupModificationItem.comments) &&
        Objects.equals(this.description, smartGroupModificationItem.description) &&
        Objects.equals(this.modificationEvent, smartGroupModificationItem.modificationEvent) &&
        Objects.equals(this.modifiedAt, smartGroupModificationItem.modifiedAt) &&
        Objects.equals(this.modifiedBy, smartGroupModificationItem.modifiedBy) &&
        Objects.equals(this.newValue, smartGroupModificationItem.newValue) &&
        Objects.equals(this.oldValue, smartGroupModificationItem.oldValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(comments, description, modificationEvent, modifiedAt, modifiedBy, newValue, oldValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartGroupModificationItem {\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    modificationEvent: ").append(toIndentedString(modificationEvent)).append("\n");
    sb.append("    modifiedAt: ").append(toIndentedString(modifiedAt)).append("\n");
    sb.append("    modifiedBy: ").append(toIndentedString(modifiedBy)).append("\n");
    sb.append("    newValue: ").append(toIndentedString(newValue)).append("\n");
    sb.append("    oldValue: ").append(toIndentedString(oldValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("comments");
    openapiFields.add("description");
    openapiFields.add("modificationEvent");
    openapiFields.add("modifiedAt");
    openapiFields.add("modifiedBy");
    openapiFields.add("newValue");
    openapiFields.add("oldValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmartGroupModificationItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmartGroupModificationItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmartGroupModificationItem is not found in the empty JSON string", SmartGroupModificationItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmartGroupModificationItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmartGroupModificationItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("modificationEvent") != null && !jsonObj.get("modificationEvent").isJsonNull()) && !jsonObj.get("modificationEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modificationEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modificationEvent").toString()));
      }
      // validate the optional field `modificationEvent`
      if (jsonObj.get("modificationEvent") != null && !jsonObj.get("modificationEvent").isJsonNull()) {
        ModificationEventEnum.validateJsonElement(jsonObj.get("modificationEvent"));
      }
      if ((jsonObj.get("modifiedAt") != null && !jsonObj.get("modifiedAt").isJsonNull()) && !jsonObj.get("modifiedAt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedAt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedAt").toString()));
      }
      if ((jsonObj.get("modifiedBy") != null && !jsonObj.get("modifiedBy").isJsonNull()) && !jsonObj.get("modifiedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `modifiedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("modifiedBy").toString()));
      }
      if ((jsonObj.get("newValue") != null && !jsonObj.get("newValue").isJsonNull()) && !jsonObj.get("newValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `newValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("newValue").toString()));
      }
      if ((jsonObj.get("oldValue") != null && !jsonObj.get("oldValue").isJsonNull()) && !jsonObj.get("oldValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `oldValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("oldValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmartGroupModificationItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmartGroupModificationItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmartGroupModificationItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmartGroupModificationItem.class));

       return (TypeAdapter<T>) new TypeAdapter<SmartGroupModificationItem>() {
           @Override
           public void write(JsonWriter out, SmartGroupModificationItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmartGroupModificationItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmartGroupModificationItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmartGroupModificationItem
   * @throws IOException if the JSON string is invalid with respect to SmartGroupModificationItem
   */
  public static SmartGroupModificationItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmartGroupModificationItem.class);
  }

  /**
   * Convert an instance of SmartGroupModificationItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

