/*
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.SmartGroupAggregatedProperty;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of smart group.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:05:21.048550-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SmartGroupProperties {
  public static final String SERIALIZED_NAME_ALERT_SEVERITIES = "alertSeverities";
  @SerializedName(SERIALIZED_NAME_ALERT_SEVERITIES)
  private List<SmartGroupAggregatedProperty> alertSeverities = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERT_STATES = "alertStates";
  @SerializedName(SERIALIZED_NAME_ALERT_STATES)
  private List<SmartGroupAggregatedProperty> alertStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_ALERTS_COUNT = "alertsCount";
  @SerializedName(SERIALIZED_NAME_ALERTS_COUNT)
  private Integer alertsCount;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME = "lastModifiedDateTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_DATE_TIME)
  private OffsetDateTime lastModifiedDateTime;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_USER_NAME = "lastModifiedUserName";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_USER_NAME)
  private String lastModifiedUserName;

  public static final String SERIALIZED_NAME_MONITOR_CONDITIONS = "monitorConditions";
  @SerializedName(SERIALIZED_NAME_MONITOR_CONDITIONS)
  private List<SmartGroupAggregatedProperty> monitorConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_MONITOR_SERVICES = "monitorServices";
  @SerializedName(SERIALIZED_NAME_MONITOR_SERVICES)
  private List<SmartGroupAggregatedProperty> monitorServices = new ArrayList<>();

  public static final String SERIALIZED_NAME_NEXT_LINK = "nextLink";
  @SerializedName(SERIALIZED_NAME_NEXT_LINK)
  private String nextLink;

  public static final String SERIALIZED_NAME_RESOURCE_GROUPS = "resourceGroups";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUPS)
  private List<SmartGroupAggregatedProperty> resourceGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCE_TYPES = "resourceTypes";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPES)
  private List<SmartGroupAggregatedProperty> resourceTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESOURCES = "resources";
  @SerializedName(SERIALIZED_NAME_RESOURCES)
  private List<SmartGroupAggregatedProperty> resources = new ArrayList<>();

  /**
   * Severity of smart group is the highest(Sev0 &gt;... &gt; Sev4) severity of all the alerts in the group.
   */
  @JsonAdapter(SeverityEnum.Adapter.class)
  public enum SeverityEnum {
    SEV0("Sev0"),
    
    SEV1("Sev1"),
    
    SEV2("Sev2"),
    
    SEV3("Sev3"),
    
    SEV4("Sev4");

    private String value;

    SeverityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SeverityEnum fromValue(String value) {
      for (SeverityEnum b : SeverityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SeverityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SeverityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SeverityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SeverityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SeverityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEVERITY = "severity";
  @SerializedName(SERIALIZED_NAME_SEVERITY)
  private SeverityEnum severity;

  /**
   * Smart group state
   */
  @JsonAdapter(SmartGroupStateEnum.Adapter.class)
  public enum SmartGroupStateEnum {
    NEW("New"),
    
    ACKNOWLEDGED("Acknowledged"),
    
    CLOSED("Closed");

    private String value;

    SmartGroupStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SmartGroupStateEnum fromValue(String value) {
      for (SmartGroupStateEnum b : SmartGroupStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SmartGroupStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SmartGroupStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SmartGroupStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SmartGroupStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SmartGroupStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SMART_GROUP_STATE = "smartGroupState";
  @SerializedName(SERIALIZED_NAME_SMART_GROUP_STATE)
  private SmartGroupStateEnum smartGroupState;

  public static final String SERIALIZED_NAME_START_DATE_TIME = "startDateTime";
  @SerializedName(SERIALIZED_NAME_START_DATE_TIME)
  private OffsetDateTime startDateTime;

  public SmartGroupProperties() {
  }

  public SmartGroupProperties(
     OffsetDateTime lastModifiedDateTime, 
     String lastModifiedUserName, 
     SeverityEnum severity, 
     SmartGroupStateEnum smartGroupState, 
     OffsetDateTime startDateTime
  ) {
    this();
    this.lastModifiedDateTime = lastModifiedDateTime;
    this.lastModifiedUserName = lastModifiedUserName;
    this.severity = severity;
    this.smartGroupState = smartGroupState;
    this.startDateTime = startDateTime;
  }

  public SmartGroupProperties alertSeverities(List<SmartGroupAggregatedProperty> alertSeverities) {
    this.alertSeverities = alertSeverities;
    return this;
  }

  public SmartGroupProperties addAlertSeveritiesItem(SmartGroupAggregatedProperty alertSeveritiesItem) {
    if (this.alertSeverities == null) {
      this.alertSeverities = new ArrayList<>();
    }
    this.alertSeverities.add(alertSeveritiesItem);
    return this;
  }

  /**
   * Summary of alertSeverities in the smart group
   * @return alertSeverities
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getAlertSeverities() {
    return alertSeverities;
  }

  public void setAlertSeverities(List<SmartGroupAggregatedProperty> alertSeverities) {
    this.alertSeverities = alertSeverities;
  }


  public SmartGroupProperties alertStates(List<SmartGroupAggregatedProperty> alertStates) {
    this.alertStates = alertStates;
    return this;
  }

  public SmartGroupProperties addAlertStatesItem(SmartGroupAggregatedProperty alertStatesItem) {
    if (this.alertStates == null) {
      this.alertStates = new ArrayList<>();
    }
    this.alertStates.add(alertStatesItem);
    return this;
  }

  /**
   * Summary of alertStates in the smart group
   * @return alertStates
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getAlertStates() {
    return alertStates;
  }

  public void setAlertStates(List<SmartGroupAggregatedProperty> alertStates) {
    this.alertStates = alertStates;
  }


  public SmartGroupProperties alertsCount(Integer alertsCount) {
    this.alertsCount = alertsCount;
    return this;
  }

  /**
   * Total number of alerts in smart group
   * @return alertsCount
   */
  @javax.annotation.Nullable
  public Integer getAlertsCount() {
    return alertsCount;
  }

  public void setAlertsCount(Integer alertsCount) {
    this.alertsCount = alertsCount;
  }


  /**
   * Last updated time of smart group. Date-Time in ISO-8601 format.
   * @return lastModifiedDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedDateTime() {
    return lastModifiedDateTime;
  }



  /**
   * Last modified by user name.
   * @return lastModifiedUserName
   */
  @javax.annotation.Nullable
  public String getLastModifiedUserName() {
    return lastModifiedUserName;
  }



  public SmartGroupProperties monitorConditions(List<SmartGroupAggregatedProperty> monitorConditions) {
    this.monitorConditions = monitorConditions;
    return this;
  }

  public SmartGroupProperties addMonitorConditionsItem(SmartGroupAggregatedProperty monitorConditionsItem) {
    if (this.monitorConditions == null) {
      this.monitorConditions = new ArrayList<>();
    }
    this.monitorConditions.add(monitorConditionsItem);
    return this;
  }

  /**
   * Summary of monitorConditions in the smart group
   * @return monitorConditions
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getMonitorConditions() {
    return monitorConditions;
  }

  public void setMonitorConditions(List<SmartGroupAggregatedProperty> monitorConditions) {
    this.monitorConditions = monitorConditions;
  }


  public SmartGroupProperties monitorServices(List<SmartGroupAggregatedProperty> monitorServices) {
    this.monitorServices = monitorServices;
    return this;
  }

  public SmartGroupProperties addMonitorServicesItem(SmartGroupAggregatedProperty monitorServicesItem) {
    if (this.monitorServices == null) {
      this.monitorServices = new ArrayList<>();
    }
    this.monitorServices.add(monitorServicesItem);
    return this;
  }

  /**
   * Summary of monitorServices in the smart group
   * @return monitorServices
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getMonitorServices() {
    return monitorServices;
  }

  public void setMonitorServices(List<SmartGroupAggregatedProperty> monitorServices) {
    this.monitorServices = monitorServices;
  }


  public SmartGroupProperties nextLink(String nextLink) {
    this.nextLink = nextLink;
    return this;
  }

  /**
   * The URI to fetch the next page of alerts. Call ListNext() with this URI to fetch the next page alerts.
   * @return nextLink
   */
  @javax.annotation.Nullable
  public String getNextLink() {
    return nextLink;
  }

  public void setNextLink(String nextLink) {
    this.nextLink = nextLink;
  }


  public SmartGroupProperties resourceGroups(List<SmartGroupAggregatedProperty> resourceGroups) {
    this.resourceGroups = resourceGroups;
    return this;
  }

  public SmartGroupProperties addResourceGroupsItem(SmartGroupAggregatedProperty resourceGroupsItem) {
    if (this.resourceGroups == null) {
      this.resourceGroups = new ArrayList<>();
    }
    this.resourceGroups.add(resourceGroupsItem);
    return this;
  }

  /**
   * Summary of target resource groups in the smart group
   * @return resourceGroups
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getResourceGroups() {
    return resourceGroups;
  }

  public void setResourceGroups(List<SmartGroupAggregatedProperty> resourceGroups) {
    this.resourceGroups = resourceGroups;
  }


  public SmartGroupProperties resourceTypes(List<SmartGroupAggregatedProperty> resourceTypes) {
    this.resourceTypes = resourceTypes;
    return this;
  }

  public SmartGroupProperties addResourceTypesItem(SmartGroupAggregatedProperty resourceTypesItem) {
    if (this.resourceTypes == null) {
      this.resourceTypes = new ArrayList<>();
    }
    this.resourceTypes.add(resourceTypesItem);
    return this;
  }

  /**
   * Summary of target resource types in the smart group
   * @return resourceTypes
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getResourceTypes() {
    return resourceTypes;
  }

  public void setResourceTypes(List<SmartGroupAggregatedProperty> resourceTypes) {
    this.resourceTypes = resourceTypes;
  }


  public SmartGroupProperties resources(List<SmartGroupAggregatedProperty> resources) {
    this.resources = resources;
    return this;
  }

  public SmartGroupProperties addResourcesItem(SmartGroupAggregatedProperty resourcesItem) {
    if (this.resources == null) {
      this.resources = new ArrayList<>();
    }
    this.resources.add(resourcesItem);
    return this;
  }

  /**
   * Summary of target resources in the smart group
   * @return resources
   */
  @javax.annotation.Nullable
  public List<SmartGroupAggregatedProperty> getResources() {
    return resources;
  }

  public void setResources(List<SmartGroupAggregatedProperty> resources) {
    this.resources = resources;
  }


  /**
   * Severity of smart group is the highest(Sev0 &gt;... &gt; Sev4) severity of all the alerts in the group.
   * @return severity
   */
  @javax.annotation.Nullable
  public SeverityEnum getSeverity() {
    return severity;
  }



  /**
   * Smart group state
   * @return smartGroupState
   */
  @javax.annotation.Nullable
  public SmartGroupStateEnum getSmartGroupState() {
    return smartGroupState;
  }



  /**
   * Creation time of smart group. Date-Time in ISO-8601 format.
   * @return startDateTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDateTime() {
    return startDateTime;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmartGroupProperties smartGroupProperties = (SmartGroupProperties) o;
    return Objects.equals(this.alertSeverities, smartGroupProperties.alertSeverities) &&
        Objects.equals(this.alertStates, smartGroupProperties.alertStates) &&
        Objects.equals(this.alertsCount, smartGroupProperties.alertsCount) &&
        Objects.equals(this.lastModifiedDateTime, smartGroupProperties.lastModifiedDateTime) &&
        Objects.equals(this.lastModifiedUserName, smartGroupProperties.lastModifiedUserName) &&
        Objects.equals(this.monitorConditions, smartGroupProperties.monitorConditions) &&
        Objects.equals(this.monitorServices, smartGroupProperties.monitorServices) &&
        Objects.equals(this.nextLink, smartGroupProperties.nextLink) &&
        Objects.equals(this.resourceGroups, smartGroupProperties.resourceGroups) &&
        Objects.equals(this.resourceTypes, smartGroupProperties.resourceTypes) &&
        Objects.equals(this.resources, smartGroupProperties.resources) &&
        Objects.equals(this.severity, smartGroupProperties.severity) &&
        Objects.equals(this.smartGroupState, smartGroupProperties.smartGroupState) &&
        Objects.equals(this.startDateTime, smartGroupProperties.startDateTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alertSeverities, alertStates, alertsCount, lastModifiedDateTime, lastModifiedUserName, monitorConditions, monitorServices, nextLink, resourceGroups, resourceTypes, resources, severity, smartGroupState, startDateTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmartGroupProperties {\n");
    sb.append("    alertSeverities: ").append(toIndentedString(alertSeverities)).append("\n");
    sb.append("    alertStates: ").append(toIndentedString(alertStates)).append("\n");
    sb.append("    alertsCount: ").append(toIndentedString(alertsCount)).append("\n");
    sb.append("    lastModifiedDateTime: ").append(toIndentedString(lastModifiedDateTime)).append("\n");
    sb.append("    lastModifiedUserName: ").append(toIndentedString(lastModifiedUserName)).append("\n");
    sb.append("    monitorConditions: ").append(toIndentedString(monitorConditions)).append("\n");
    sb.append("    monitorServices: ").append(toIndentedString(monitorServices)).append("\n");
    sb.append("    nextLink: ").append(toIndentedString(nextLink)).append("\n");
    sb.append("    resourceGroups: ").append(toIndentedString(resourceGroups)).append("\n");
    sb.append("    resourceTypes: ").append(toIndentedString(resourceTypes)).append("\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("    severity: ").append(toIndentedString(severity)).append("\n");
    sb.append("    smartGroupState: ").append(toIndentedString(smartGroupState)).append("\n");
    sb.append("    startDateTime: ").append(toIndentedString(startDateTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alertSeverities");
    openapiFields.add("alertStates");
    openapiFields.add("alertsCount");
    openapiFields.add("lastModifiedDateTime");
    openapiFields.add("lastModifiedUserName");
    openapiFields.add("monitorConditions");
    openapiFields.add("monitorServices");
    openapiFields.add("nextLink");
    openapiFields.add("resourceGroups");
    openapiFields.add("resourceTypes");
    openapiFields.add("resources");
    openapiFields.add("severity");
    openapiFields.add("smartGroupState");
    openapiFields.add("startDateTime");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmartGroupProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SmartGroupProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmartGroupProperties is not found in the empty JSON string", SmartGroupProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmartGroupProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmartGroupProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("alertSeverities") != null && !jsonObj.get("alertSeverities").isJsonNull()) {
        JsonArray jsonArrayalertSeverities = jsonObj.getAsJsonArray("alertSeverities");
        if (jsonArrayalertSeverities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alertSeverities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alertSeverities` to be an array in the JSON string but got `%s`", jsonObj.get("alertSeverities").toString()));
          }

          // validate the optional field `alertSeverities` (array)
          for (int i = 0; i < jsonArrayalertSeverities.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArrayalertSeverities.get(i));
          };
        }
      }
      if (jsonObj.get("alertStates") != null && !jsonObj.get("alertStates").isJsonNull()) {
        JsonArray jsonArrayalertStates = jsonObj.getAsJsonArray("alertStates");
        if (jsonArrayalertStates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("alertStates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `alertStates` to be an array in the JSON string but got `%s`", jsonObj.get("alertStates").toString()));
          }

          // validate the optional field `alertStates` (array)
          for (int i = 0; i < jsonArrayalertStates.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArrayalertStates.get(i));
          };
        }
      }
      if ((jsonObj.get("lastModifiedUserName") != null && !jsonObj.get("lastModifiedUserName").isJsonNull()) && !jsonObj.get("lastModifiedUserName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastModifiedUserName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastModifiedUserName").toString()));
      }
      if (jsonObj.get("monitorConditions") != null && !jsonObj.get("monitorConditions").isJsonNull()) {
        JsonArray jsonArraymonitorConditions = jsonObj.getAsJsonArray("monitorConditions");
        if (jsonArraymonitorConditions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monitorConditions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monitorConditions` to be an array in the JSON string but got `%s`", jsonObj.get("monitorConditions").toString()));
          }

          // validate the optional field `monitorConditions` (array)
          for (int i = 0; i < jsonArraymonitorConditions.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArraymonitorConditions.get(i));
          };
        }
      }
      if (jsonObj.get("monitorServices") != null && !jsonObj.get("monitorServices").isJsonNull()) {
        JsonArray jsonArraymonitorServices = jsonObj.getAsJsonArray("monitorServices");
        if (jsonArraymonitorServices != null) {
          // ensure the json data is an array
          if (!jsonObj.get("monitorServices").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `monitorServices` to be an array in the JSON string but got `%s`", jsonObj.get("monitorServices").toString()));
          }

          // validate the optional field `monitorServices` (array)
          for (int i = 0; i < jsonArraymonitorServices.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArraymonitorServices.get(i));
          };
        }
      }
      if ((jsonObj.get("nextLink") != null && !jsonObj.get("nextLink").isJsonNull()) && !jsonObj.get("nextLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nextLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nextLink").toString()));
      }
      if (jsonObj.get("resourceGroups") != null && !jsonObj.get("resourceGroups").isJsonNull()) {
        JsonArray jsonArrayresourceGroups = jsonObj.getAsJsonArray("resourceGroups");
        if (jsonArrayresourceGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceGroups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceGroups` to be an array in the JSON string but got `%s`", jsonObj.get("resourceGroups").toString()));
          }

          // validate the optional field `resourceGroups` (array)
          for (int i = 0; i < jsonArrayresourceGroups.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArrayresourceGroups.get(i));
          };
        }
      }
      if (jsonObj.get("resourceTypes") != null && !jsonObj.get("resourceTypes").isJsonNull()) {
        JsonArray jsonArrayresourceTypes = jsonObj.getAsJsonArray("resourceTypes");
        if (jsonArrayresourceTypes != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resourceTypes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("resourceTypes").toString()));
          }

          // validate the optional field `resourceTypes` (array)
          for (int i = 0; i < jsonArrayresourceTypes.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArrayresourceTypes.get(i));
          };
        }
      }
      if (jsonObj.get("resources") != null && !jsonObj.get("resources").isJsonNull()) {
        JsonArray jsonArrayresources = jsonObj.getAsJsonArray("resources");
        if (jsonArrayresources != null) {
          // ensure the json data is an array
          if (!jsonObj.get("resources").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `resources` to be an array in the JSON string but got `%s`", jsonObj.get("resources").toString()));
          }

          // validate the optional field `resources` (array)
          for (int i = 0; i < jsonArrayresources.size(); i++) {
            SmartGroupAggregatedProperty.validateJsonElement(jsonArrayresources.get(i));
          };
        }
      }
      if ((jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) && !jsonObj.get("severity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `severity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("severity").toString()));
      }
      // validate the optional field `severity`
      if (jsonObj.get("severity") != null && !jsonObj.get("severity").isJsonNull()) {
        SeverityEnum.validateJsonElement(jsonObj.get("severity"));
      }
      if ((jsonObj.get("smartGroupState") != null && !jsonObj.get("smartGroupState").isJsonNull()) && !jsonObj.get("smartGroupState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smartGroupState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smartGroupState").toString()));
      }
      // validate the optional field `smartGroupState`
      if (jsonObj.get("smartGroupState") != null && !jsonObj.get("smartGroupState").isJsonNull()) {
        SmartGroupStateEnum.validateJsonElement(jsonObj.get("smartGroupState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmartGroupProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmartGroupProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmartGroupProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmartGroupProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SmartGroupProperties>() {
           @Override
           public void write(JsonWriter out, SmartGroupProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmartGroupProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmartGroupProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmartGroupProperties
   * @throws IOException if the JSON string is invalid with respect to SmartGroupProperties
   */
  public static SmartGroupProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmartGroupProperties.class);
  }

  /**
   * Convert an instance of SmartGroupProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

