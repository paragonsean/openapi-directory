/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SmartGroupAggregatedProperty from './SmartGroupAggregatedProperty';

/**
 * The SmartGroupProperties model module.
 * @module model/SmartGroupProperties
 * @version 2019-03-01
 */
class SmartGroupProperties {
    /**
     * Constructs a new <code>SmartGroupProperties</code>.
     * Properties of smart group.
     * @alias module:model/SmartGroupProperties
     */
    constructor() { 
        
        SmartGroupProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SmartGroupProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SmartGroupProperties} obj Optional instance to populate.
     * @return {module:model/SmartGroupProperties} The populated <code>SmartGroupProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SmartGroupProperties();

            if (data.hasOwnProperty('alertSeverities')) {
                obj['alertSeverities'] = ApiClient.convertToType(data['alertSeverities'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('alertStates')) {
                obj['alertStates'] = ApiClient.convertToType(data['alertStates'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('alertsCount')) {
                obj['alertsCount'] = ApiClient.convertToType(data['alertsCount'], 'Number');
            }
            if (data.hasOwnProperty('lastModifiedDateTime')) {
                obj['lastModifiedDateTime'] = ApiClient.convertToType(data['lastModifiedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastModifiedUserName')) {
                obj['lastModifiedUserName'] = ApiClient.convertToType(data['lastModifiedUserName'], 'String');
            }
            if (data.hasOwnProperty('monitorConditions')) {
                obj['monitorConditions'] = ApiClient.convertToType(data['monitorConditions'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('monitorServices')) {
                obj['monitorServices'] = ApiClient.convertToType(data['monitorServices'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('nextLink')) {
                obj['nextLink'] = ApiClient.convertToType(data['nextLink'], 'String');
            }
            if (data.hasOwnProperty('resourceGroups')) {
                obj['resourceGroups'] = ApiClient.convertToType(data['resourceGroups'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('resourceTypes')) {
                obj['resourceTypes'] = ApiClient.convertToType(data['resourceTypes'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('resources')) {
                obj['resources'] = ApiClient.convertToType(data['resources'], [SmartGroupAggregatedProperty]);
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('smartGroupState')) {
                obj['smartGroupState'] = ApiClient.convertToType(data['smartGroupState'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SmartGroupProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SmartGroupProperties</code>.
     */
    static validateJSON(data) {
        if (data['alertSeverities']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['alertSeverities'])) {
                throw new Error("Expected the field `alertSeverities` to be an array in the JSON data but got " + data['alertSeverities']);
            }
            // validate the optional field `alertSeverities` (array)
            for (const item of data['alertSeverities']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        if (data['alertStates']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['alertStates'])) {
                throw new Error("Expected the field `alertStates` to be an array in the JSON data but got " + data['alertStates']);
            }
            // validate the optional field `alertStates` (array)
            for (const item of data['alertStates']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['lastModifiedUserName'] && !(typeof data['lastModifiedUserName'] === 'string' || data['lastModifiedUserName'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedUserName` to be a primitive type in the JSON string but got " + data['lastModifiedUserName']);
        }
        if (data['monitorConditions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitorConditions'])) {
                throw new Error("Expected the field `monitorConditions` to be an array in the JSON data but got " + data['monitorConditions']);
            }
            // validate the optional field `monitorConditions` (array)
            for (const item of data['monitorConditions']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        if (data['monitorServices']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['monitorServices'])) {
                throw new Error("Expected the field `monitorServices` to be an array in the JSON data but got " + data['monitorServices']);
            }
            // validate the optional field `monitorServices` (array)
            for (const item of data['monitorServices']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['nextLink'] && !(typeof data['nextLink'] === 'string' || data['nextLink'] instanceof String)) {
            throw new Error("Expected the field `nextLink` to be a primitive type in the JSON string but got " + data['nextLink']);
        }
        if (data['resourceGroups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceGroups'])) {
                throw new Error("Expected the field `resourceGroups` to be an array in the JSON data but got " + data['resourceGroups']);
            }
            // validate the optional field `resourceGroups` (array)
            for (const item of data['resourceGroups']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        if (data['resourceTypes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resourceTypes'])) {
                throw new Error("Expected the field `resourceTypes` to be an array in the JSON data but got " + data['resourceTypes']);
            }
            // validate the optional field `resourceTypes` (array)
            for (const item of data['resourceTypes']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        if (data['resources']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['resources'])) {
                throw new Error("Expected the field `resources` to be an array in the JSON data but got " + data['resources']);
            }
            // validate the optional field `resources` (array)
            for (const item of data['resources']) {
                SmartGroupAggregatedProperty.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['smartGroupState'] && !(typeof data['smartGroupState'] === 'string' || data['smartGroupState'] instanceof String)) {
            throw new Error("Expected the field `smartGroupState` to be a primitive type in the JSON string but got " + data['smartGroupState']);
        }

        return true;
    }


}



/**
 * Summary of alertSeverities in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} alertSeverities
 */
SmartGroupProperties.prototype['alertSeverities'] = undefined;

/**
 * Summary of alertStates in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} alertStates
 */
SmartGroupProperties.prototype['alertStates'] = undefined;

/**
 * Total number of alerts in smart group
 * @member {Number} alertsCount
 */
SmartGroupProperties.prototype['alertsCount'] = undefined;

/**
 * Last updated time of smart group. Date-Time in ISO-8601 format.
 * @member {Date} lastModifiedDateTime
 */
SmartGroupProperties.prototype['lastModifiedDateTime'] = undefined;

/**
 * Last modified by user name.
 * @member {String} lastModifiedUserName
 */
SmartGroupProperties.prototype['lastModifiedUserName'] = undefined;

/**
 * Summary of monitorConditions in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} monitorConditions
 */
SmartGroupProperties.prototype['monitorConditions'] = undefined;

/**
 * Summary of monitorServices in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} monitorServices
 */
SmartGroupProperties.prototype['monitorServices'] = undefined;

/**
 * The URI to fetch the next page of alerts. Call ListNext() with this URI to fetch the next page alerts.
 * @member {String} nextLink
 */
SmartGroupProperties.prototype['nextLink'] = undefined;

/**
 * Summary of target resource groups in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} resourceGroups
 */
SmartGroupProperties.prototype['resourceGroups'] = undefined;

/**
 * Summary of target resource types in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} resourceTypes
 */
SmartGroupProperties.prototype['resourceTypes'] = undefined;

/**
 * Summary of target resources in the smart group
 * @member {Array.<module:model/SmartGroupAggregatedProperty>} resources
 */
SmartGroupProperties.prototype['resources'] = undefined;

/**
 * Severity of smart group is the highest(Sev0 >... > Sev4) severity of all the alerts in the group.
 * @member {module:model/SmartGroupProperties.SeverityEnum} severity
 */
SmartGroupProperties.prototype['severity'] = undefined;

/**
 * Smart group state
 * @member {module:model/SmartGroupProperties.SmartGroupStateEnum} smartGroupState
 */
SmartGroupProperties.prototype['smartGroupState'] = undefined;

/**
 * Creation time of smart group. Date-Time in ISO-8601 format.
 * @member {Date} startDateTime
 */
SmartGroupProperties.prototype['startDateTime'] = undefined;





/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
SmartGroupProperties['SeverityEnum'] = {

    /**
     * value: "Sev0"
     * @const
     */
    "Sev0": "Sev0",

    /**
     * value: "Sev1"
     * @const
     */
    "Sev1": "Sev1",

    /**
     * value: "Sev2"
     * @const
     */
    "Sev2": "Sev2",

    /**
     * value: "Sev3"
     * @const
     */
    "Sev3": "Sev3",

    /**
     * value: "Sev4"
     * @const
     */
    "Sev4": "Sev4"
};


/**
 * Allowed values for the <code>smartGroupState</code> property.
 * @enum {String}
 * @readonly
 */
SmartGroupProperties['SmartGroupStateEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "Acknowledged"
     * @const
     */
    "Acknowledged": "Acknowledged",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed"
};



export default SmartGroupProperties;

