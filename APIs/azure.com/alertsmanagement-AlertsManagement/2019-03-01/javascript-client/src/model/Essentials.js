/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Essentials model module.
 * @module model/Essentials
 * @version 2019-03-01
 */
class Essentials {
    /**
     * Constructs a new <code>Essentials</code>.
     * This object contains consistent fields across different monitor services.
     * @alias module:model/Essentials
     */
    constructor() { 
        
        Essentials.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Essentials</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Essentials} obj Optional instance to populate.
     * @return {module:model/Essentials} The populated <code>Essentials</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Essentials();

            if (data.hasOwnProperty('alertRule')) {
                obj['alertRule'] = ApiClient.convertToType(data['alertRule'], 'String');
            }
            if (data.hasOwnProperty('alertState')) {
                obj['alertState'] = ApiClient.convertToType(data['alertState'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedDateTime')) {
                obj['lastModifiedDateTime'] = ApiClient.convertToType(data['lastModifiedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('lastModifiedUserName')) {
                obj['lastModifiedUserName'] = ApiClient.convertToType(data['lastModifiedUserName'], 'String');
            }
            if (data.hasOwnProperty('monitorCondition')) {
                obj['monitorCondition'] = ApiClient.convertToType(data['monitorCondition'], 'String');
            }
            if (data.hasOwnProperty('monitorConditionResolvedDateTime')) {
                obj['monitorConditionResolvedDateTime'] = ApiClient.convertToType(data['monitorConditionResolvedDateTime'], 'Date');
            }
            if (data.hasOwnProperty('monitorService')) {
                obj['monitorService'] = ApiClient.convertToType(data['monitorService'], 'String');
            }
            if (data.hasOwnProperty('severity')) {
                obj['severity'] = ApiClient.convertToType(data['severity'], 'String');
            }
            if (data.hasOwnProperty('signalType')) {
                obj['signalType'] = ApiClient.convertToType(data['signalType'], 'String');
            }
            if (data.hasOwnProperty('smartGroupId')) {
                obj['smartGroupId'] = ApiClient.convertToType(data['smartGroupId'], 'String');
            }
            if (data.hasOwnProperty('smartGroupingReason')) {
                obj['smartGroupingReason'] = ApiClient.convertToType(data['smartGroupingReason'], 'String');
            }
            if (data.hasOwnProperty('sourceCreatedId')) {
                obj['sourceCreatedId'] = ApiClient.convertToType(data['sourceCreatedId'], 'String');
            }
            if (data.hasOwnProperty('startDateTime')) {
                obj['startDateTime'] = ApiClient.convertToType(data['startDateTime'], 'Date');
            }
            if (data.hasOwnProperty('targetResource')) {
                obj['targetResource'] = ApiClient.convertToType(data['targetResource'], 'String');
            }
            if (data.hasOwnProperty('targetResourceGroup')) {
                obj['targetResourceGroup'] = ApiClient.convertToType(data['targetResourceGroup'], 'String');
            }
            if (data.hasOwnProperty('targetResourceName')) {
                obj['targetResourceName'] = ApiClient.convertToType(data['targetResourceName'], 'String');
            }
            if (data.hasOwnProperty('targetResourceType')) {
                obj['targetResourceType'] = ApiClient.convertToType(data['targetResourceType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Essentials</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Essentials</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alertRule'] && !(typeof data['alertRule'] === 'string' || data['alertRule'] instanceof String)) {
            throw new Error("Expected the field `alertRule` to be a primitive type in the JSON string but got " + data['alertRule']);
        }
        // ensure the json data is a string
        if (data['alertState'] && !(typeof data['alertState'] === 'string' || data['alertState'] instanceof String)) {
            throw new Error("Expected the field `alertState` to be a primitive type in the JSON string but got " + data['alertState']);
        }
        // ensure the json data is a string
        if (data['lastModifiedUserName'] && !(typeof data['lastModifiedUserName'] === 'string' || data['lastModifiedUserName'] instanceof String)) {
            throw new Error("Expected the field `lastModifiedUserName` to be a primitive type in the JSON string but got " + data['lastModifiedUserName']);
        }
        // ensure the json data is a string
        if (data['monitorCondition'] && !(typeof data['monitorCondition'] === 'string' || data['monitorCondition'] instanceof String)) {
            throw new Error("Expected the field `monitorCondition` to be a primitive type in the JSON string but got " + data['monitorCondition']);
        }
        // ensure the json data is a string
        if (data['monitorService'] && !(typeof data['monitorService'] === 'string' || data['monitorService'] instanceof String)) {
            throw new Error("Expected the field `monitorService` to be a primitive type in the JSON string but got " + data['monitorService']);
        }
        // ensure the json data is a string
        if (data['severity'] && !(typeof data['severity'] === 'string' || data['severity'] instanceof String)) {
            throw new Error("Expected the field `severity` to be a primitive type in the JSON string but got " + data['severity']);
        }
        // ensure the json data is a string
        if (data['signalType'] && !(typeof data['signalType'] === 'string' || data['signalType'] instanceof String)) {
            throw new Error("Expected the field `signalType` to be a primitive type in the JSON string but got " + data['signalType']);
        }
        // ensure the json data is a string
        if (data['smartGroupId'] && !(typeof data['smartGroupId'] === 'string' || data['smartGroupId'] instanceof String)) {
            throw new Error("Expected the field `smartGroupId` to be a primitive type in the JSON string but got " + data['smartGroupId']);
        }
        // ensure the json data is a string
        if (data['smartGroupingReason'] && !(typeof data['smartGroupingReason'] === 'string' || data['smartGroupingReason'] instanceof String)) {
            throw new Error("Expected the field `smartGroupingReason` to be a primitive type in the JSON string but got " + data['smartGroupingReason']);
        }
        // ensure the json data is a string
        if (data['sourceCreatedId'] && !(typeof data['sourceCreatedId'] === 'string' || data['sourceCreatedId'] instanceof String)) {
            throw new Error("Expected the field `sourceCreatedId` to be a primitive type in the JSON string but got " + data['sourceCreatedId']);
        }
        // ensure the json data is a string
        if (data['targetResource'] && !(typeof data['targetResource'] === 'string' || data['targetResource'] instanceof String)) {
            throw new Error("Expected the field `targetResource` to be a primitive type in the JSON string but got " + data['targetResource']);
        }
        // ensure the json data is a string
        if (data['targetResourceGroup'] && !(typeof data['targetResourceGroup'] === 'string' || data['targetResourceGroup'] instanceof String)) {
            throw new Error("Expected the field `targetResourceGroup` to be a primitive type in the JSON string but got " + data['targetResourceGroup']);
        }
        // ensure the json data is a string
        if (data['targetResourceName'] && !(typeof data['targetResourceName'] === 'string' || data['targetResourceName'] instanceof String)) {
            throw new Error("Expected the field `targetResourceName` to be a primitive type in the JSON string but got " + data['targetResourceName']);
        }
        // ensure the json data is a string
        if (data['targetResourceType'] && !(typeof data['targetResourceType'] === 'string' || data['targetResourceType'] instanceof String)) {
            throw new Error("Expected the field `targetResourceType` to be a primitive type in the JSON string but got " + data['targetResourceType']);
        }

        return true;
    }


}



/**
 * Rule(monitor) which fired alert instance. Depending on the monitor service,  this would be ARM id or name of the rule.
 * @member {String} alertRule
 */
Essentials.prototype['alertRule'] = undefined;

/**
 * Alert object state, which can be modified by the user.
 * @member {module:model/Essentials.AlertStateEnum} alertState
 */
Essentials.prototype['alertState'] = undefined;

/**
 * Last modification time(ISO-8601 format) of alert instance.
 * @member {Date} lastModifiedDateTime
 */
Essentials.prototype['lastModifiedDateTime'] = undefined;

/**
 * User who last modified the alert, in case of monitor service updates user would be 'system', otherwise name of the user.
 * @member {String} lastModifiedUserName
 */
Essentials.prototype['lastModifiedUserName'] = undefined;

/**
 * Can be 'Fired' or 'Resolved', which represents whether the underlying conditions have crossed the defined alert rule thresholds.
 * @member {module:model/Essentials.MonitorConditionEnum} monitorCondition
 */
Essentials.prototype['monitorCondition'] = undefined;

/**
 * Resolved time(ISO-8601 format) of alert instance. This will be updated when monitor service resolves the alert instance because the rule condition is no longer met.
 * @member {Date} monitorConditionResolvedDateTime
 */
Essentials.prototype['monitorConditionResolvedDateTime'] = undefined;

/**
 * Monitor service on which the rule(monitor) is set.
 * @member {module:model/Essentials.MonitorServiceEnum} monitorService
 */
Essentials.prototype['monitorService'] = undefined;

/**
 * Severity of alert Sev0 being highest and Sev4 being lowest.
 * @member {module:model/Essentials.SeverityEnum} severity
 */
Essentials.prototype['severity'] = undefined;

/**
 * The type of signal the alert is based on, which could be metrics, logs or activity logs.
 * @member {module:model/Essentials.SignalTypeEnum} signalType
 */
Essentials.prototype['signalType'] = undefined;

/**
 * Unique Id of the smart group
 * @member {String} smartGroupId
 */
Essentials.prototype['smartGroupId'] = undefined;

/**
 * Verbose reason describing the reason why this alert instance is added to a smart group
 * @member {String} smartGroupingReason
 */
Essentials.prototype['smartGroupingReason'] = undefined;

/**
 * Unique Id created by monitor service for each alert instance. This could be used to track the issue at the monitor service, in case of Nagios, Zabbix, SCOM etc.
 * @member {String} sourceCreatedId
 */
Essentials.prototype['sourceCreatedId'] = undefined;

/**
 * Creation time(ISO-8601 format) of alert instance.
 * @member {Date} startDateTime
 */
Essentials.prototype['startDateTime'] = undefined;

/**
 * Target ARM resource, on which alert got created.
 * @member {String} targetResource
 */
Essentials.prototype['targetResource'] = undefined;

/**
 * Resource group of target ARM resource, on which alert got created.
 * @member {String} targetResourceGroup
 */
Essentials.prototype['targetResourceGroup'] = undefined;

/**
 * Name of the target ARM resource name, on which alert got created.
 * @member {String} targetResourceName
 */
Essentials.prototype['targetResourceName'] = undefined;

/**
 * Resource type of target ARM resource, on which alert got created.
 * @member {String} targetResourceType
 */
Essentials.prototype['targetResourceType'] = undefined;





/**
 * Allowed values for the <code>alertState</code> property.
 * @enum {String}
 * @readonly
 */
Essentials['AlertStateEnum'] = {

    /**
     * value: "New"
     * @const
     */
    "New": "New",

    /**
     * value: "Acknowledged"
     * @const
     */
    "Acknowledged": "Acknowledged",

    /**
     * value: "Closed"
     * @const
     */
    "Closed": "Closed"
};


/**
 * Allowed values for the <code>monitorCondition</code> property.
 * @enum {String}
 * @readonly
 */
Essentials['MonitorConditionEnum'] = {

    /**
     * value: "Fired"
     * @const
     */
    "Fired": "Fired",

    /**
     * value: "Resolved"
     * @const
     */
    "Resolved": "Resolved"
};


/**
 * Allowed values for the <code>monitorService</code> property.
 * @enum {String}
 * @readonly
 */
Essentials['MonitorServiceEnum'] = {

    /**
     * value: "Application Insights"
     * @const
     */
    "Application Insights": "Application Insights",

    /**
     * value: "ActivityLog Administrative"
     * @const
     */
    "ActivityLog Administrative": "ActivityLog Administrative",

    /**
     * value: "ActivityLog Security"
     * @const
     */
    "ActivityLog Security": "ActivityLog Security",

    /**
     * value: "ActivityLog Recommendation"
     * @const
     */
    "ActivityLog Recommendation": "ActivityLog Recommendation",

    /**
     * value: "ActivityLog Policy"
     * @const
     */
    "ActivityLog Policy": "ActivityLog Policy",

    /**
     * value: "ActivityLog Autoscale"
     * @const
     */
    "ActivityLog Autoscale": "ActivityLog Autoscale",

    /**
     * value: "Log Analytics"
     * @const
     */
    "Log Analytics": "Log Analytics",

    /**
     * value: "Nagios"
     * @const
     */
    "Nagios": "Nagios",

    /**
     * value: "Platform"
     * @const
     */
    "Platform": "Platform",

    /**
     * value: "SCOM"
     * @const
     */
    "SCOM": "SCOM",

    /**
     * value: "ServiceHealth"
     * @const
     */
    "ServiceHealth": "ServiceHealth",

    /**
     * value: "SmartDetector"
     * @const
     */
    "SmartDetector": "SmartDetector",

    /**
     * value: "VM Insights"
     * @const
     */
    "VM Insights": "VM Insights",

    /**
     * value: "Zabbix"
     * @const
     */
    "Zabbix": "Zabbix",

    /**
     * value: "Resource Health"
     * @const
     */
    "Resource Health": "Resource Health"
};


/**
 * Allowed values for the <code>severity</code> property.
 * @enum {String}
 * @readonly
 */
Essentials['SeverityEnum'] = {

    /**
     * value: "Sev0"
     * @const
     */
    "Sev0": "Sev0",

    /**
     * value: "Sev1"
     * @const
     */
    "Sev1": "Sev1",

    /**
     * value: "Sev2"
     * @const
     */
    "Sev2": "Sev2",

    /**
     * value: "Sev3"
     * @const
     */
    "Sev3": "Sev3",

    /**
     * value: "Sev4"
     * @const
     */
    "Sev4": "Sev4"
};


/**
 * Allowed values for the <code>signalType</code> property.
 * @enum {String}
 * @readonly
 */
Essentials['SignalTypeEnum'] = {

    /**
     * value: "Metric"
     * @const
     */
    "Metric": "Metric",

    /**
     * value: "Log"
     * @const
     */
    "Log": "Log",

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown"
};



export default Essentials;

