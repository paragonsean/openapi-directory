/**
 * Azure Alerts Management Service Resource Provider
 * Azure Alerts Management Service provides a single pane of glass of alerts across Azure Monitor.
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alert from '../model/Alert';
import AlertModification from '../model/AlertModification';
import AlertsList from '../model/AlertsList';
import AlertsSummary from '../model/AlertsSummary';
import ErrorResponse from '../model/ErrorResponse';
import OperationsList from '../model/OperationsList';
import SmartGroup from '../model/SmartGroup';
import SmartGroupModification from '../model/SmartGroupModification';
import SmartGroupsList from '../model/SmartGroupsList';

/**
* Default service.
* @module api/DefaultApi
* @version 2019-03-01
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alertsChangeState operation.
     * @callback module:api/DefaultApi~alertsChangeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of an alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}' and 'vm1' is deleted then if you want to change state of this particular alert then use parent resource of scope. So in this example change state call will look like this: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}'.
     * @param {String} scope scope here is resourceId for which alert is created.
     * @param {String} alertId Unique ID of an alert instance.
     * @param {module:model/String} apiVersion API version.
     * @param {module:model/String} newState New state of the alert.
     * @param {module:api/DefaultApi~alertsChangeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsChangeState(scope, alertId, apiVersion, newState, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling alertsChangeState");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsChangeState");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsChangeState");
      }
      // verify the required parameter 'newState' is set
      if (newState === undefined || newState === null) {
        throw new Error("Missing the required parameter 'newState' when calling alertsChangeState");
      }

      let pathParams = {
        'scope': scope,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion,
        'newState': newState
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetAll operation.
     * @callback module:api/DefaultApi~alertsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all existing alerts, where the results can be filtered on the basis of multiple parameters (e.g. time range). The results can then be sorted on the basis specific fields, with the default being lastModifiedDateTime. 
     * @param {String} scope scope here is resourceId for which alert is created.
     * @param {module:model/String} apiVersion API version.
     * @param {Object} opts Optional parameters
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {module:model/String} [monitorCondition] Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [alertState] Filter by state of the alert instance. Default value is to select all.
     * @param {String} [alertRule] Filter by specific alert rule.  Default value is to select all.
     * @param {String} [smartGroupId] Filter the alerts list by the Smart Group Id. Default value is none.
     * @param {Boolean} [includeContext] Include context which has contextual data specific to the monitor service. Default value is false'
     * @param {Boolean} [includeEgressConfig] Include egress config which would be used for displaying the content in portal.  Default value is 'false'.
     * @param {Number} [pageCount] Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
     * @param {module:model/String} [sortBy] Sort the query results by input field,  Default value is 'lastModifiedDateTime'.
     * @param {module:model/String} [sortOrder] Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
     * @param {String} [select] This filter allows to selection of the fields(comma separated) which would  be part of the essential section. This would allow to project only the  required fields rather than getting entire content.  Default is to fetch all the fields in the essentials section.
     * @param {module:model/String} [timeRange] Filter by time range by below listed values. Default value is 1 day.
     * @param {String} [customTimeRange] Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
     * @param {module:api/DefaultApi~alertsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsList}
     */
    alertsGetAll(scope, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling alertsGetAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetAll");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'targetResource': opts['targetResource'],
        'targetResourceType': opts['targetResourceType'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'alertState': opts['alertState'],
        'alertRule': opts['alertRule'],
        'smartGroupId': opts['smartGroupId'],
        'includeContext': opts['includeContext'],
        'includeEgressConfig': opts['includeEgressConfig'],
        'pageCount': opts['pageCount'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'select': opts['select'],
        'timeRange': opts['timeRange'],
        'customTimeRange': opts['customTimeRange'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsList;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.AlertsManagement/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetById operation.
     * @callback module:api/DefaultApi~alertsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific alert.
     * Get information related to a specific alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}' and 'vm1' is deleted then if you want to get alert by id then use parent resource of scope. So in this example get alert by id call will look like this: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}'.
     * @param {String} scope scope here is resourceId for which alert is created.
     * @param {String} alertId Unique ID of an alert instance.
     * @param {module:model/String} apiVersion API version.
     * @param {module:api/DefaultApi~alertsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsGetById(scope, alertId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling alertsGetById");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetById");
      }

      let pathParams = {
        'scope': scope,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetHistory operation.
     * @callback module:api/DefaultApi~alertsGetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertModification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of an alert, which captures any monitor condition changes (Fired/Resolved), alert state changes (New/Acknowledged/Closed) and applied action rules for that particular alert. If scope is a deleted resource then please use scope as parent resource of the delete resource. For example if my alert id is '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/virtualMachines/vm1/providers/Microsoft.AlertsManagement/alerts/{alertId}' and 'vm1' is deleted then if you want to get history of this particular alert then use parent resource of scope. So in this example get history call will look like this: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history'.
     * @param {String} scope scope here is resourceId for which alert is created.
     * @param {String} alertId Unique ID of an alert instance.
     * @param {module:model/String} apiVersion API version.
     * @param {module:api/DefaultApi~alertsGetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertModification}
     */
    alertsGetHistory(scope, alertId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling alertsGetHistory");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsGetHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetHistory");
      }

      let pathParams = {
        'scope': scope,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertModification;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetSummary operation.
     * @callback module:api/DefaultApi~alertsGetSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a summarized count of your alerts grouped by various parameters (e.g. grouping by 'Severity' returns the count of alerts for each severity).
     * @param {String} scope scope here is resourceId for which alert is created.
     * @param {module:model/String} groupby This parameter allows the result set to be grouped by input fields. For example, groupby=severity,alertstate.
     * @param {module:model/String} apiVersion API version.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [includeSmartGroupsCount] Include count of the SmartGroups as part of the summary. Default value is 'false'.
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {module:model/String} [monitorCondition] Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [alertState] Filter by state of the alert instance. Default value is to select all.
     * @param {String} [alertRule] Filter by specific alert rule.  Default value is to select all.
     * @param {module:model/String} [timeRange] Filter by time range by below listed values. Default value is 1 day.
     * @param {String} [customTimeRange] Filter by custom time range in the format <start-time>/<end-time>  where time is in (ISO-8601 format)'. Permissible values is within 30 days from  query time. Either timeRange or customTimeRange could be used but not both. Default is none.
     * @param {module:api/DefaultApi~alertsGetSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsSummary}
     */
    alertsGetSummary(scope, groupby, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling alertsGetSummary");
      }
      // verify the required parameter 'groupby' is set
      if (groupby === undefined || groupby === null) {
        throw new Error("Missing the required parameter 'groupby' when calling alertsGetSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetSummary");
      }

      let pathParams = {
        'scope': scope
      };
      let queryParams = {
        'groupby': groupby,
        'includeSmartGroupsCount': opts['includeSmartGroupsCount'],
        'targetResource': opts['targetResource'],
        'targetResourceType': opts['targetResourceType'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'alertState': opts['alertState'],
        'alertRule': opts['alertRule'],
        'timeRange': opts['timeRange'],
        'customTimeRange': opts['customTimeRange'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsSummary;
      return this.apiClient.callApi(
        '/{scope}/providers/Microsoft.AlertsManagement/alertsSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param {module:model/String} apiVersion API version.
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsList}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsList;
      return this.apiClient.callApi(
        '/providers/Microsoft.AlertsManagement/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsChangeState operation.
     * @callback module:api/DefaultApi~smartGroupsChangeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of a Smart Group.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} smartGroupId Smart group unique id. 
     * @param {module:model/String} apiVersion API version.
     * @param {module:model/String} newState New state of the alert.
     * @param {module:api/DefaultApi~smartGroupsChangeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroup}
     */
    smartGroupsChangeState(subscriptionId, smartGroupId, apiVersion, newState, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'newState' is set
      if (newState === undefined || newState === null) {
        throw new Error("Missing the required parameter 'newState' when calling smartGroupsChangeState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion,
        'newState': newState
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetAll operation.
     * @callback module:api/DefaultApi~smartGroupsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroupsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all Smart Groups within a specified subscription
     * List all the Smart Groups within a specified subscription. 
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/String} apiVersion API version.
     * @param {Object} opts Optional parameters
     * @param {String} [targetResource] Filter by target resource( which is full ARM ID) Default value is select all.
     * @param {String} [targetResourceGroup] Filter by target resource group name. Default value is select all.
     * @param {String} [targetResourceType] Filter by target resource type. Default value is select all.
     * @param {module:model/String} [monitorService] Filter by monitor service which generates the alert instance. Default value is select all.
     * @param {module:model/String} [monitorCondition] Filter by monitor condition which is either 'Fired' or 'Resolved'. Default value is to select all.
     * @param {module:model/String} [severity] Filter by severity.  Default value is select all.
     * @param {module:model/String} [smartGroupState] Filter by state of the smart group. Default value is to select all.
     * @param {module:model/String} [timeRange] Filter by time range by below listed values. Default value is 1 day.
     * @param {Number} [pageCount] Determines number of alerts returned per page in response. Permissible value is between 1 to 250. When the \"includeContent\"  filter is selected, maximum value allowed is 25. Default value is 25.
     * @param {module:model/String} [sortBy] Sort the query results by input field. Default value is sort by 'lastModifiedDateTime'.
     * @param {module:model/String} [sortOrder] Sort the query results order in either ascending or descending.  Default value is 'desc' for time fields and 'asc' for others.
     * @param {module:api/DefaultApi~smartGroupsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroupsList}
     */
    smartGroupsGetAll(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResource': opts['targetResource'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'targetResourceType': opts['targetResourceType'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'smartGroupState': opts['smartGroupState'],
        'timeRange': opts['timeRange'],
        'pageCount': opts['pageCount'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroupsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetById operation.
     * @callback module:api/DefaultApi~smartGroupsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information related to a specific Smart Group.
     * Get information related to a specific Smart Group.
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} smartGroupId Smart group unique id. 
     * @param {module:model/String} apiVersion API version.
     * @param {module:api/DefaultApi~smartGroupsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroup}
     */
    smartGroupsGetById(subscriptionId, smartGroupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetById");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetHistory operation.
     * @callback module:api/DefaultApi~smartGroupsGetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroupModification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history a smart group, which captures any Smart Group state changes (New/Acknowledged/Closed) .
     * @param {String} subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} smartGroupId Smart group unique id. 
     * @param {module:model/String} apiVersion API version.
     * @param {module:api/DefaultApi~smartGroupsGetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroupModification}
     */
    smartGroupsGetHistory(subscriptionId, smartGroupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetHistory");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsGetHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetHistory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroupModification;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
