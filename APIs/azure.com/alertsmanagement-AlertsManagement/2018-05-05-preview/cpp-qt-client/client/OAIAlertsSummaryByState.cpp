/**
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-05-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertsSummaryByState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertsSummaryByState::OAIAlertsSummaryByState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertsSummaryByState::OAIAlertsSummaryByState() {
    this->initializeModel();
}

OAIAlertsSummaryByState::~OAIAlertsSummaryByState() {}

void OAIAlertsSummaryByState::initializeModel() {

    m_acknowledged_isSet = false;
    m_acknowledged_isValid = false;

    m_closed_isSet = false;
    m_closed_isValid = false;

    m_r_new_isSet = false;
    m_r_new_isValid = false;
}

void OAIAlertsSummaryByState::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertsSummaryByState::fromJsonObject(QJsonObject json) {

    m_acknowledged_isValid = ::OpenAPI::fromJsonValue(m_acknowledged, json[QString("acknowledged")]);
    m_acknowledged_isSet = !json[QString("acknowledged")].isNull() && m_acknowledged_isValid;

    m_closed_isValid = ::OpenAPI::fromJsonValue(m_closed, json[QString("closed")]);
    m_closed_isSet = !json[QString("closed")].isNull() && m_closed_isValid;

    m_r_new_isValid = ::OpenAPI::fromJsonValue(m_r_new, json[QString("new")]);
    m_r_new_isSet = !json[QString("new")].isNull() && m_r_new_isValid;
}

QString OAIAlertsSummaryByState::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertsSummaryByState::asJsonObject() const {
    QJsonObject obj;
    if (m_acknowledged_isSet) {
        obj.insert(QString("acknowledged"), ::OpenAPI::toJsonValue(m_acknowledged));
    }
    if (m_closed_isSet) {
        obj.insert(QString("closed"), ::OpenAPI::toJsonValue(m_closed));
    }
    if (m_r_new_isSet) {
        obj.insert(QString("new"), ::OpenAPI::toJsonValue(m_r_new));
    }
    return obj;
}

qint32 OAIAlertsSummaryByState::getAcknowledged() const {
    return m_acknowledged;
}
void OAIAlertsSummaryByState::setAcknowledged(const qint32 &acknowledged) {
    m_acknowledged = acknowledged;
    m_acknowledged_isSet = true;
}

bool OAIAlertsSummaryByState::is_acknowledged_Set() const{
    return m_acknowledged_isSet;
}

bool OAIAlertsSummaryByState::is_acknowledged_Valid() const{
    return m_acknowledged_isValid;
}

qint32 OAIAlertsSummaryByState::getClosed() const {
    return m_closed;
}
void OAIAlertsSummaryByState::setClosed(const qint32 &closed) {
    m_closed = closed;
    m_closed_isSet = true;
}

bool OAIAlertsSummaryByState::is_closed_Set() const{
    return m_closed_isSet;
}

bool OAIAlertsSummaryByState::is_closed_Valid() const{
    return m_closed_isValid;
}

qint32 OAIAlertsSummaryByState::getRNew() const {
    return m_r_new;
}
void OAIAlertsSummaryByState::setRNew(const qint32 &r_new) {
    m_r_new = r_new;
    m_r_new_isSet = true;
}

bool OAIAlertsSummaryByState::is_r_new_Set() const{
    return m_r_new_isSet;
}

bool OAIAlertsSummaryByState::is_r_new_Valid() const{
    return m_r_new_isValid;
}

bool OAIAlertsSummaryByState::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_acknowledged_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_new_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertsSummaryByState::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
