/**
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-05-05-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAlertsSummaryProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAlertsSummaryProperties::OAIAlertsSummaryProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAlertsSummaryProperties::OAIAlertsSummaryProperties() {
    this->initializeModel();
}

OAIAlertsSummaryProperties::~OAIAlertsSummaryProperties() {}

void OAIAlertsSummaryProperties::initializeModel() {

    m_next_link_isSet = false;
    m_next_link_isValid = false;

    m_smart_groups_count_isSet = false;
    m_smart_groups_count_isValid = false;

    m_summary_by_monitor_service_isSet = false;
    m_summary_by_monitor_service_isValid = false;

    m_summary_by_severity_isSet = false;
    m_summary_by_severity_isValid = false;

    m_summary_by_severity_and_monitor_condition_isSet = false;
    m_summary_by_severity_and_monitor_condition_isValid = false;

    m_summary_by_state_isSet = false;
    m_summary_by_state_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAIAlertsSummaryProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAlertsSummaryProperties::fromJsonObject(QJsonObject json) {

    m_next_link_isValid = ::OpenAPI::fromJsonValue(m_next_link, json[QString("nextLink")]);
    m_next_link_isSet = !json[QString("nextLink")].isNull() && m_next_link_isValid;

    m_smart_groups_count_isValid = ::OpenAPI::fromJsonValue(m_smart_groups_count, json[QString("smartGroupsCount")]);
    m_smart_groups_count_isSet = !json[QString("smartGroupsCount")].isNull() && m_smart_groups_count_isValid;

    m_summary_by_monitor_service_isValid = ::OpenAPI::fromJsonValue(m_summary_by_monitor_service, json[QString("summaryByMonitorService")]);
    m_summary_by_monitor_service_isSet = !json[QString("summaryByMonitorService")].isNull() && m_summary_by_monitor_service_isValid;

    m_summary_by_severity_isValid = ::OpenAPI::fromJsonValue(m_summary_by_severity, json[QString("summaryBySeverity")]);
    m_summary_by_severity_isSet = !json[QString("summaryBySeverity")].isNull() && m_summary_by_severity_isValid;

    m_summary_by_severity_and_monitor_condition_isValid = ::OpenAPI::fromJsonValue(m_summary_by_severity_and_monitor_condition, json[QString("summaryBySeverityAndMonitorCondition")]);
    m_summary_by_severity_and_monitor_condition_isSet = !json[QString("summaryBySeverityAndMonitorCondition")].isNull() && m_summary_by_severity_and_monitor_condition_isValid;

    m_summary_by_state_isValid = ::OpenAPI::fromJsonValue(m_summary_by_state, json[QString("summaryByState")]);
    m_summary_by_state_isSet = !json[QString("summaryByState")].isNull() && m_summary_by_state_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("total")]);
    m_total_isSet = !json[QString("total")].isNull() && m_total_isValid;
}

QString OAIAlertsSummaryProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAlertsSummaryProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_next_link_isSet) {
        obj.insert(QString("nextLink"), ::OpenAPI::toJsonValue(m_next_link));
    }
    if (m_smart_groups_count_isSet) {
        obj.insert(QString("smartGroupsCount"), ::OpenAPI::toJsonValue(m_smart_groups_count));
    }
    if (m_summary_by_monitor_service.isSet()) {
        obj.insert(QString("summaryByMonitorService"), ::OpenAPI::toJsonValue(m_summary_by_monitor_service));
    }
    if (m_summary_by_severity.isSet()) {
        obj.insert(QString("summaryBySeverity"), ::OpenAPI::toJsonValue(m_summary_by_severity));
    }
    if (m_summary_by_severity_and_monitor_condition.isSet()) {
        obj.insert(QString("summaryBySeverityAndMonitorCondition"), ::OpenAPI::toJsonValue(m_summary_by_severity_and_monitor_condition));
    }
    if (m_summary_by_state.isSet()) {
        obj.insert(QString("summaryByState"), ::OpenAPI::toJsonValue(m_summary_by_state));
    }
    if (m_total_isSet) {
        obj.insert(QString("total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

QString OAIAlertsSummaryProperties::getNextLink() const {
    return m_next_link;
}
void OAIAlertsSummaryProperties::setNextLink(const QString &next_link) {
    m_next_link = next_link;
    m_next_link_isSet = true;
}

bool OAIAlertsSummaryProperties::is_next_link_Set() const{
    return m_next_link_isSet;
}

bool OAIAlertsSummaryProperties::is_next_link_Valid() const{
    return m_next_link_isValid;
}

qint32 OAIAlertsSummaryProperties::getSmartGroupsCount() const {
    return m_smart_groups_count;
}
void OAIAlertsSummaryProperties::setSmartGroupsCount(const qint32 &smart_groups_count) {
    m_smart_groups_count = smart_groups_count;
    m_smart_groups_count_isSet = true;
}

bool OAIAlertsSummaryProperties::is_smart_groups_count_Set() const{
    return m_smart_groups_count_isSet;
}

bool OAIAlertsSummaryProperties::is_smart_groups_count_Valid() const{
    return m_smart_groups_count_isValid;
}

OAIAlertsSummaryByMonitorService OAIAlertsSummaryProperties::getSummaryByMonitorService() const {
    return m_summary_by_monitor_service;
}
void OAIAlertsSummaryProperties::setSummaryByMonitorService(const OAIAlertsSummaryByMonitorService &summary_by_monitor_service) {
    m_summary_by_monitor_service = summary_by_monitor_service;
    m_summary_by_monitor_service_isSet = true;
}

bool OAIAlertsSummaryProperties::is_summary_by_monitor_service_Set() const{
    return m_summary_by_monitor_service_isSet;
}

bool OAIAlertsSummaryProperties::is_summary_by_monitor_service_Valid() const{
    return m_summary_by_monitor_service_isValid;
}

OAIAlertsSummaryProperties_summaryBySeverity OAIAlertsSummaryProperties::getSummaryBySeverity() const {
    return m_summary_by_severity;
}
void OAIAlertsSummaryProperties::setSummaryBySeverity(const OAIAlertsSummaryProperties_summaryBySeverity &summary_by_severity) {
    m_summary_by_severity = summary_by_severity;
    m_summary_by_severity_isSet = true;
}

bool OAIAlertsSummaryProperties::is_summary_by_severity_Set() const{
    return m_summary_by_severity_isSet;
}

bool OAIAlertsSummaryProperties::is_summary_by_severity_Valid() const{
    return m_summary_by_severity_isValid;
}

OAIAlertsSummaryBySeverityAndMonitorCondition OAIAlertsSummaryProperties::getSummaryBySeverityAndMonitorCondition() const {
    return m_summary_by_severity_and_monitor_condition;
}
void OAIAlertsSummaryProperties::setSummaryBySeverityAndMonitorCondition(const OAIAlertsSummaryBySeverityAndMonitorCondition &summary_by_severity_and_monitor_condition) {
    m_summary_by_severity_and_monitor_condition = summary_by_severity_and_monitor_condition;
    m_summary_by_severity_and_monitor_condition_isSet = true;
}

bool OAIAlertsSummaryProperties::is_summary_by_severity_and_monitor_condition_Set() const{
    return m_summary_by_severity_and_monitor_condition_isSet;
}

bool OAIAlertsSummaryProperties::is_summary_by_severity_and_monitor_condition_Valid() const{
    return m_summary_by_severity_and_monitor_condition_isValid;
}

OAIAlertsSummaryByState OAIAlertsSummaryProperties::getSummaryByState() const {
    return m_summary_by_state;
}
void OAIAlertsSummaryProperties::setSummaryByState(const OAIAlertsSummaryByState &summary_by_state) {
    m_summary_by_state = summary_by_state;
    m_summary_by_state_isSet = true;
}

bool OAIAlertsSummaryProperties::is_summary_by_state_Set() const{
    return m_summary_by_state_isSet;
}

bool OAIAlertsSummaryProperties::is_summary_by_state_Valid() const{
    return m_summary_by_state_isValid;
}

qint32 OAIAlertsSummaryProperties::getTotal() const {
    return m_total;
}
void OAIAlertsSummaryProperties::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAIAlertsSummaryProperties::is_total_Set() const{
    return m_total_isSet;
}

bool OAIAlertsSummaryProperties::is_total_Valid() const{
    return m_total_isValid;
}

bool OAIAlertsSummaryProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_next_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_groups_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_by_monitor_service.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_by_severity.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_by_severity_and_monitor_condition.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_by_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAlertsSummaryProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
