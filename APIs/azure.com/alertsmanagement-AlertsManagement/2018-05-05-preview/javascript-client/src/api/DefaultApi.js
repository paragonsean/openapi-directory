/**
 * Azure Alerts Management Service Resource Provider
 * REST APIs for Azure Alerts Management Service.
 *
 * The version of the OpenAPI document: 2018-05-05-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Alert from '../model/Alert';
import AlertModification from '../model/AlertModification';
import AlertsList from '../model/AlertsList';
import AlertsSummary from '../model/AlertsSummary';
import ErrorResponse from '../model/ErrorResponse';
import OperationsList from '../model/OperationsList';
import SmartGroup from '../model/SmartGroup';
import SmartGroupModification from '../model/SmartGroupModification';
import SmartGroupsList from '../model/SmartGroupsList';

/**
* Default service.
* @module api/DefaultApi
* @version 2018-05-05-preview
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the alertsChangeState operation.
     * @callback module:api/DefaultApi~alertsChangeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state of the alert.
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} alertId Unique ID of an alert object.
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/String} newState filter by state
     * @param {module:api/DefaultApi~alertsChangeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsChangeState(subscriptionId, alertId, apiVersion, newState, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsChangeState");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsChangeState");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsChangeState");
      }
      // verify the required parameter 'newState' is set
      if (newState === undefined || newState === null) {
        throw new Error("Missing the required parameter 'newState' when calling alertsChangeState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion,
        'newState': newState
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/changestate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetAll operation.
     * @callback module:api/DefaultApi~alertsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the existing alerts, where the results can be selective by passing multiple filter parameters including time range and sorted on specific fields. 
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResource] filter by target resource
     * @param {String} [targetResourceGroup] filter by target resource group name
     * @param {String} [targetResourceType] filter by target resource type
     * @param {module:model/String} [monitorService] filter by monitor service which is the source of the alert object.
     * @param {module:model/String} [monitorCondition] filter by monitor condition which is the state of the alert at monitor service
     * @param {module:model/String} [severity] filter by severity
     * @param {module:model/String} [alertState] filter by state
     * @param {String} [smartGroupId] filter by smart Group Id
     * @param {Boolean} [includePayload] include payload field content, default value is 'false'.
     * @param {Number} [pageCount] number of items per page, default value is '25'.
     * @param {module:model/String} [sortBy] sort the query results by input field, default value is 'lastModifiedDateTime'.
     * @param {module:model/String} [sortOrder] sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
     * @param {module:model/String} [timeRange] filter by time range, default value is 1 day
     * @param {module:api/DefaultApi~alertsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsList}
     */
    alertsGetAll(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResource': opts['targetResource'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'targetResourceType': opts['targetResourceType'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'alertState': opts['alertState'],
        'smartGroupId': opts['smartGroupId'],
        'includePayload': opts['includePayload'],
        'pageCount': opts['pageCount'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'timeRange': opts['timeRange'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetById operation.
     * @callback module:api/DefaultApi~alertsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Alert} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specific alert.
     * Get information related to a specific alert
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} alertId Unique ID of an alert object.
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~alertsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Alert}
     */
    alertsGetById(subscriptionId, alertId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetById");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Alert;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetHistory operation.
     * @callback module:api/DefaultApi~alertsGetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertModification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of the changes of an alert.
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} alertId Unique ID of an alert object.
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~alertsGetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertModification}
     */
    alertsGetHistory(subscriptionId, alertId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetHistory");
      }
      // verify the required parameter 'alertId' is set
      if (alertId === undefined || alertId === null) {
        throw new Error("Missing the required parameter 'alertId' when calling alertsGetHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetHistory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'alertId': alertId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertModification;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alerts/{alertId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the alertsGetSummary operation.
     * @callback module:api/DefaultApi~alertsGetSummaryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AlertsSummary} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summary of alerts with the count each severity.
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResourceGroup] filter by target resource group name
     * @param {module:model/String} [timeRange] filter by time range, default value is 1 day
     * @param {module:api/DefaultApi~alertsGetSummaryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AlertsSummary}
     */
    alertsGetSummary(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling alertsGetSummary");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling alertsGetSummary");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResourceGroup': opts['targetResourceGroup'],
        'timeRange': opts['timeRange'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AlertsSummary;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/alertsSummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the operationsList operation.
     * @callback module:api/DefaultApi~operationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all operations available through Azure Alerts Management Resource Provider.
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~operationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationsList}
     */
    operationsList(apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling operationsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationsList;
      return this.apiClient.callApi(
        '/providers/Microsoft.AlertsManagement/operations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsChangeState operation.
     * @callback module:api/DefaultApi~smartGroupsChangeStateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Change the state from unresolved to resolved and all the alerts within the smart group will also be resolved.
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} smartGroupId Smart Group Id
     * @param {module:model/String} apiVersion client API version
     * @param {module:model/String} newState filter by state
     * @param {module:api/DefaultApi~smartGroupsChangeStateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroup}
     */
    smartGroupsChangeState(subscriptionId, smartGroupId, apiVersion, newState, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsChangeState");
      }
      // verify the required parameter 'newState' is set
      if (newState === undefined || newState === null) {
        throw new Error("Missing the required parameter 'newState' when calling smartGroupsChangeState");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion,
        'newState': newState
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/changeState', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetAll operation.
     * @callback module:api/DefaultApi~smartGroupsGetAllCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroupsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all smartGroups within the subscription
     * List all the smartGroups within the specified subscription. 
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {module:model/String} apiVersion client API version
     * @param {Object} opts Optional parameters
     * @param {String} [targetResource] filter by target resource
     * @param {String} [targetResourceGroup] filter by target resource group name
     * @param {String} [targetResourceType] filter by target resource type
     * @param {module:model/String} [monitorService] filter by monitor service which is the source of the alert object.
     * @param {module:model/String} [monitorCondition] filter by monitor condition which is the state of the alert at monitor service
     * @param {module:model/String} [severity] filter by severity
     * @param {module:model/String} [smartGroupState] filter by state
     * @param {module:model/String} [timeRange] filter by time range, default value is 1 day
     * @param {Number} [pageCount] number of items per page, default value is '25'.
     * @param {module:model/String} [sortBy] sort the query results by input field, default value is 'lastModifiedDateTime'.
     * @param {module:model/String} [sortOrder] sort the query results order in either ascending or descending, default value is 'desc' for time fields and 'asc' for others.
     * @param {module:api/DefaultApi~smartGroupsGetAllCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroupsList}
     */
    smartGroupsGetAll(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetAll");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetAll");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'targetResource': opts['targetResource'],
        'targetResourceGroup': opts['targetResourceGroup'],
        'targetResourceType': opts['targetResourceType'],
        'monitorService': opts['monitorService'],
        'monitorCondition': opts['monitorCondition'],
        'severity': opts['severity'],
        'smartGroupState': opts['smartGroupState'],
        'timeRange': opts['timeRange'],
        'pageCount': opts['pageCount'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroupsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetById operation.
     * @callback module:api/DefaultApi~smartGroupsGetByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information of smart alerts group.
     * Get details of smart group.
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} smartGroupId Smart Group Id
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~smartGroupsGetByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroup}
     */
    smartGroupsGetById(subscriptionId, smartGroupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetById");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsGetById");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetById");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroup;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the smartGroupsGetHistory operation.
     * @callback module:api/DefaultApi~smartGroupsGetHistoryCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SmartGroupModification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the history of the changes of smart group.
     * @param {String} subscriptionId subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} smartGroupId Smart Group Id
     * @param {module:model/String} apiVersion client API version
     * @param {module:api/DefaultApi~smartGroupsGetHistoryCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SmartGroupModification}
     */
    smartGroupsGetHistory(subscriptionId, smartGroupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling smartGroupsGetHistory");
      }
      // verify the required parameter 'smartGroupId' is set
      if (smartGroupId === undefined || smartGroupId === null) {
        throw new Error("Missing the required parameter 'smartGroupId' when calling smartGroupsGetHistory");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling smartGroupsGetHistory");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'smartGroupId': smartGroupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SmartGroupModification;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.AlertsManagement/smartGroups/{smartGroupId}/history', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
