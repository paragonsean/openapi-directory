/**
 * SqlManagementClient
 * The Azure SQL Database management API provides a RESTful set of web APIs that interact with Azure SQL Database services to manage your databases. The API enables users to create, retrieve, update, and delete databases, servers, and other entities.
 *
 * The version of the OpenAPI document: 2015-05-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNetworkRuleProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNetworkRuleProperties::OAIVirtualNetworkRuleProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNetworkRuleProperties::OAIVirtualNetworkRuleProperties() {
    this->initializeModel();
}

OAIVirtualNetworkRuleProperties::~OAIVirtualNetworkRuleProperties() {}

void OAIVirtualNetworkRuleProperties::initializeModel() {

    m_ignore_missing_vnet_service_endpoint_isSet = false;
    m_ignore_missing_vnet_service_endpoint_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_virtual_network_subnet_id_isSet = false;
    m_virtual_network_subnet_id_isValid = false;
}

void OAIVirtualNetworkRuleProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNetworkRuleProperties::fromJsonObject(QJsonObject json) {

    m_ignore_missing_vnet_service_endpoint_isValid = ::OpenAPI::fromJsonValue(m_ignore_missing_vnet_service_endpoint, json[QString("ignoreMissingVnetServiceEndpoint")]);
    m_ignore_missing_vnet_service_endpoint_isSet = !json[QString("ignoreMissingVnetServiceEndpoint")].isNull() && m_ignore_missing_vnet_service_endpoint_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_virtual_network_subnet_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_network_subnet_id, json[QString("virtualNetworkSubnetId")]);
    m_virtual_network_subnet_id_isSet = !json[QString("virtualNetworkSubnetId")].isNull() && m_virtual_network_subnet_id_isValid;
}

QString OAIVirtualNetworkRuleProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNetworkRuleProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_ignore_missing_vnet_service_endpoint_isSet) {
        obj.insert(QString("ignoreMissingVnetServiceEndpoint"), ::OpenAPI::toJsonValue(m_ignore_missing_vnet_service_endpoint));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_virtual_network_subnet_id_isSet) {
        obj.insert(QString("virtualNetworkSubnetId"), ::OpenAPI::toJsonValue(m_virtual_network_subnet_id));
    }
    return obj;
}

bool OAIVirtualNetworkRuleProperties::isIgnoreMissingVnetServiceEndpoint() const {
    return m_ignore_missing_vnet_service_endpoint;
}
void OAIVirtualNetworkRuleProperties::setIgnoreMissingVnetServiceEndpoint(const bool &ignore_missing_vnet_service_endpoint) {
    m_ignore_missing_vnet_service_endpoint = ignore_missing_vnet_service_endpoint;
    m_ignore_missing_vnet_service_endpoint_isSet = true;
}

bool OAIVirtualNetworkRuleProperties::is_ignore_missing_vnet_service_endpoint_Set() const{
    return m_ignore_missing_vnet_service_endpoint_isSet;
}

bool OAIVirtualNetworkRuleProperties::is_ignore_missing_vnet_service_endpoint_Valid() const{
    return m_ignore_missing_vnet_service_endpoint_isValid;
}

QString OAIVirtualNetworkRuleProperties::getState() const {
    return m_state;
}
void OAIVirtualNetworkRuleProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIVirtualNetworkRuleProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIVirtualNetworkRuleProperties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIVirtualNetworkRuleProperties::getVirtualNetworkSubnetId() const {
    return m_virtual_network_subnet_id;
}
void OAIVirtualNetworkRuleProperties::setVirtualNetworkSubnetId(const QString &virtual_network_subnet_id) {
    m_virtual_network_subnet_id = virtual_network_subnet_id;
    m_virtual_network_subnet_id_isSet = true;
}

bool OAIVirtualNetworkRuleProperties::is_virtual_network_subnet_id_Set() const{
    return m_virtual_network_subnet_id_isSet;
}

bool OAIVirtualNetworkRuleProperties::is_virtual_network_subnet_id_Valid() const{
    return m_virtual_network_subnet_id_isValid;
}

bool OAIVirtualNetworkRuleProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_ignore_missing_vnet_service_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_network_subnet_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNetworkRuleProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_virtual_network_subnet_id_isValid && true;
}

} // namespace OpenAPI
