/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.VMwareCloudSimple);
  }
}(this, function(expect, VMwareCloudSimple) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new VMwareCloudSimple.PrivateCloudProperties();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('PrivateCloudProperties', function() {
    it('should create an instance of PrivateCloudProperties', function() {
      // uncomment below and update the code to test PrivateCloudProperties
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be.a(VMwareCloudSimple.PrivateCloudProperties);
    });

    it('should have the property availabilityZoneId (base name: "availabilityZoneId")', function() {
      // uncomment below and update the code to test the property availabilityZoneId
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property availabilityZoneName (base name: "availabilityZoneName")', function() {
      // uncomment below and update the code to test the property availabilityZoneName
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property clustersNumber (base name: "clustersNumber")', function() {
      // uncomment below and update the code to test the property clustersNumber
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property createdBy (base name: "createdBy")', function() {
      // uncomment below and update the code to test the property createdBy
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property createdOn (base name: "createdOn")', function() {
      // uncomment below and update the code to test the property createdOn
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property dnsServers (base name: "dnsServers")', function() {
      // uncomment below and update the code to test the property dnsServers
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property expires (base name: "expires")', function() {
      // uncomment below and update the code to test the property expires
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property nsxType (base name: "nsxType")', function() {
      // uncomment below and update the code to test the property nsxType
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property placementGroupId (base name: "placementGroupId")', function() {
      // uncomment below and update the code to test the property placementGroupId
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property placementGroupName (base name: "placementGroupName")', function() {
      // uncomment below and update the code to test the property placementGroupName
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property privateCloudId (base name: "privateCloudId")', function() {
      // uncomment below and update the code to test the property privateCloudId
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property resourcePools (base name: "resourcePools")', function() {
      // uncomment below and update the code to test the property resourcePools
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property state (base name: "state")', function() {
      // uncomment below and update the code to test the property state
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property totalCpuCores (base name: "totalCpuCores")', function() {
      // uncomment below and update the code to test the property totalCpuCores
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property totalNodes (base name: "totalNodes")', function() {
      // uncomment below and update the code to test the property totalNodes
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property totalRam (base name: "totalRam")', function() {
      // uncomment below and update the code to test the property totalRam
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property totalStorage (base name: "totalStorage")', function() {
      // uncomment below and update the code to test the property totalStorage
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property vSphereVersion (base name: "vSphereVersion")', function() {
      // uncomment below and update the code to test the property vSphereVersion
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property vcenterFqdn (base name: "vcenterFqdn")', function() {
      // uncomment below and update the code to test the property vcenterFqdn
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property vcenterRefid (base name: "vcenterRefid")', function() {
      // uncomment below and update the code to test the property vcenterRefid
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property virtualMachineTemplates (base name: "virtualMachineTemplates")', function() {
      // uncomment below and update the code to test the property virtualMachineTemplates
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property virtualNetworks (base name: "virtualNetworks")', function() {
      // uncomment below and update the code to test the property virtualNetworks
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

    it('should have the property vrOpsEnabled (base name: "vrOpsEnabled")', function() {
      // uncomment below and update the code to test the property vrOpsEnabled
      //var instance = new VMwareCloudSimple.PrivateCloudProperties();
      //expect(instance).to.be();
    });

  });

}));
