/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CSRPError from '../model/CSRPError';
import DedicatedCloudService from '../model/DedicatedCloudService';
import DedicatedCloudServiceListResponse from '../model/DedicatedCloudServiceListResponse';
import PatchPayload from '../model/PatchPayload';

/**
* DedicatedCloudServices service.
* @module api/DedicatedCloudServicesApi
* @version 2019-04-01
*/
export default class DedicatedCloudServicesApi {

    /**
    * Constructs a new DedicatedCloudServicesApi. 
    * @alias module:api/DedicatedCloudServicesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dedicatedCloudServicesCreateOrUpdate operation.
     * @callback module:api/DedicatedCloudServicesApi~dedicatedCloudServicesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicated cloud service PUT method
     * Create dedicate cloud service
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudServiceName dedicated cloud Service name
     * @param {String} apiVersion Client API version.
     * @param {module:model/DedicatedCloudService} dedicatedCloudServiceRequest Create Dedicated Cloud Service request
     * @param {module:api/DedicatedCloudServicesApi~dedicatedCloudServicesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudService}
     */
    dedicatedCloudServicesCreateOrUpdate(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, callback) {
      let postBody = dedicatedCloudServiceRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesCreateOrUpdate");
      }
      // verify the required parameter 'dedicatedCloudServiceName' is set
      if (dedicatedCloudServiceName === undefined || dedicatedCloudServiceName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesCreateOrUpdate");
      }
      // verify the required parameter 'dedicatedCloudServiceRequest' is set
      if (dedicatedCloudServiceRequest === undefined || dedicatedCloudServiceRequest === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudServiceRequest' when calling dedicatedCloudServicesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudServiceName': dedicatedCloudServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudServicesDelete operation.
     * @callback module:api/DedicatedCloudServicesApi~dedicatedCloudServicesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicatedCloudService DELETE method
     * Delete dedicate cloud service
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudServiceName dedicated cloud service name
     * @param {String} apiVersion Client API version.
     * @param {module:api/DedicatedCloudServicesApi~dedicatedCloudServicesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dedicatedCloudServicesDelete(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesDelete");
      }
      // verify the required parameter 'dedicatedCloudServiceName' is set
      if (dedicatedCloudServiceName === undefined || dedicatedCloudServiceName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudServiceName': dedicatedCloudServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudServicesGet operation.
     * @callback module:api/DedicatedCloudServicesApi~dedicatedCloudServicesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicatedCloudService GET method
     * Returns Dedicate Cloud Service
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudServiceName dedicated cloud Service name
     * @param {String} apiVersion Client API version.
     * @param {module:api/DedicatedCloudServicesApi~dedicatedCloudServicesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudService}
     */
    dedicatedCloudServicesGet(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesGet");
      }
      // verify the required parameter 'dedicatedCloudServiceName' is set
      if (dedicatedCloudServiceName === undefined || dedicatedCloudServiceName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudServiceName': dedicatedCloudServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudServicesListByResourceGroup operation.
     * @callback module:api/DedicatedCloudServicesApi~dedicatedCloudServicesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudServiceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements list of dedicatedCloudService objects within RG method
     * Returns list of dedicated cloud services within a resource group
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the list operation
     * @param {Number} [top] The maximum number of record sets to return
     * @param {String} [skipToken] to be used by nextLink implementation
     * @param {module:api/DedicatedCloudServicesApi~dedicatedCloudServicesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudServiceListResponse}
     */
    dedicatedCloudServicesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudServiceListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudServicesListBySubscription operation.
     * @callback module:api/DedicatedCloudServicesApi~dedicatedCloudServicesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudServiceListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements list of dedicatedCloudService objects within subscription method
     * Returns list of dedicated cloud services within a subscription
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the list operation
     * @param {Number} [top] The maximum number of record sets to return
     * @param {String} [skipToken] to be used by nextLink implementation
     * @param {module:api/DedicatedCloudServicesApi~dedicatedCloudServicesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudServiceListResponse}
     */
    dedicatedCloudServicesListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudServiceListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudServicesUpdate operation.
     * @callback module:api/DedicatedCloudServicesApi~dedicatedCloudServicesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudService} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicatedCloudService PATCH method
     * Patch dedicated cloud service's properties
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudServiceName dedicated cloud service name
     * @param {String} apiVersion Client API version.
     * @param {module:model/PatchPayload} dedicatedCloudServiceRequest Patch Dedicated Cloud Service request
     * @param {module:api/DedicatedCloudServicesApi~dedicatedCloudServicesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudService}
     */
    dedicatedCloudServicesUpdate(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, callback) {
      let postBody = dedicatedCloudServiceRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesUpdate");
      }
      // verify the required parameter 'dedicatedCloudServiceName' is set
      if (dedicatedCloudServiceName === undefined || dedicatedCloudServiceName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesUpdate");
      }
      // verify the required parameter 'dedicatedCloudServiceRequest' is set
      if (dedicatedCloudServiceRequest === undefined || dedicatedCloudServiceRequest === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudServiceRequest' when calling dedicatedCloudServicesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudServiceName': dedicatedCloudServiceName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudService;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
