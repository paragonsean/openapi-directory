/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CSRPError from '../model/CSRPError';
import DedicatedCloudNode from '../model/DedicatedCloudNode';
import DedicatedCloudNodeListResponse from '../model/DedicatedCloudNodeListResponse';
import PatchPayload from '../model/PatchPayload';

/**
* DedicatedCloudNodes service.
* @module api/DedicatedCloudNodesApi
* @version 2019-04-01
*/
export default class DedicatedCloudNodesApi {

    /**
    * Constructs a new DedicatedCloudNodesApi. 
    * @alias module:api/DedicatedCloudNodesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dedicatedCloudNodesCreateOrUpdate operation.
     * @callback module:api/DedicatedCloudNodesApi~dedicatedCloudNodesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicated cloud node PUT method
     * Returns dedicated cloud node by its name
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} referer referer url
     * @param {String} dedicatedCloudNodeName dedicated cloud node name
     * @param {String} apiVersion Client API version.
     * @param {module:model/DedicatedCloudNode} dedicatedCloudNodeRequest Create Dedicated Cloud Node request
     * @param {module:api/DedicatedCloudNodesApi~dedicatedCloudNodesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudNode}
     */
    dedicatedCloudNodesCreateOrUpdate(subscriptionId, resourceGroupName, referer, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, callback) {
      let postBody = dedicatedCloudNodeRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesCreateOrUpdate");
      }
      // verify the required parameter 'referer' is set
      if (referer === undefined || referer === null) {
        throw new Error("Missing the required parameter 'referer' when calling dedicatedCloudNodesCreateOrUpdate");
      }
      // verify the required parameter 'dedicatedCloudNodeName' is set
      if (dedicatedCloudNodeName === undefined || dedicatedCloudNodeName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesCreateOrUpdate");
      }
      // verify the required parameter 'dedicatedCloudNodeRequest' is set
      if (dedicatedCloudNodeRequest === undefined || dedicatedCloudNodeRequest === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudNodeRequest' when calling dedicatedCloudNodesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudNodeName': dedicatedCloudNodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Referer': referer
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudNode;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudNodesDelete operation.
     * @callback module:api/DedicatedCloudNodesApi~dedicatedCloudNodesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicated cloud node DELETE method
     * Delete dedicated cloud node
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudNodeName dedicated cloud node name
     * @param {String} apiVersion Client API version.
     * @param {module:api/DedicatedCloudNodesApi~dedicatedCloudNodesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dedicatedCloudNodesDelete(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesDelete");
      }
      // verify the required parameter 'dedicatedCloudNodeName' is set
      if (dedicatedCloudNodeName === undefined || dedicatedCloudNodeName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudNodeName': dedicatedCloudNodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudNodesGet operation.
     * @callback module:api/DedicatedCloudNodesApi~dedicatedCloudNodesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicated cloud node GET method
     * Returns dedicated cloud node
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudNodeName dedicated cloud node name
     * @param {String} apiVersion Client API version.
     * @param {module:api/DedicatedCloudNodesApi~dedicatedCloudNodesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudNode}
     */
    dedicatedCloudNodesGet(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesGet");
      }
      // verify the required parameter 'dedicatedCloudNodeName' is set
      if (dedicatedCloudNodeName === undefined || dedicatedCloudNodeName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudNodeName': dedicatedCloudNodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudNode;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudNodesListByResourceGroup operation.
     * @callback module:api/DedicatedCloudNodesApi~dedicatedCloudNodesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudNodeListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements list of dedicated cloud nodes within RG method
     * Returns list of dedicate cloud nodes within resource group
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the list operation
     * @param {Number} [top] The maximum number of record sets to return
     * @param {String} [skipToken] to be used by nextLink implementation
     * @param {module:api/DedicatedCloudNodesApi~dedicatedCloudNodesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudNodeListResponse}
     */
    dedicatedCloudNodesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudNodeListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudNodesListBySubscription operation.
     * @callback module:api/DedicatedCloudNodesApi~dedicatedCloudNodesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudNodeListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements list of dedicated cloud nodes within subscription method
     * Returns list of dedicate cloud nodes within subscription
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the list operation
     * @param {Number} [top] The maximum number of record sets to return
     * @param {String} [skipToken] to be used by nextLink implementation
     * @param {module:api/DedicatedCloudNodesApi~dedicatedCloudNodesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudNodeListResponse}
     */
    dedicatedCloudNodesListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudNodeListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dedicatedCloudNodesUpdate operation.
     * @callback module:api/DedicatedCloudNodesApi~dedicatedCloudNodesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DedicatedCloudNode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements dedicated cloud node PATCH method
     * Patches dedicated node properties
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} dedicatedCloudNodeName dedicated cloud node name
     * @param {String} apiVersion Client API version.
     * @param {module:model/PatchPayload} dedicatedCloudNodeRequest Patch Dedicated Cloud Node request
     * @param {module:api/DedicatedCloudNodesApi~dedicatedCloudNodesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DedicatedCloudNode}
     */
    dedicatedCloudNodesUpdate(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, callback) {
      let postBody = dedicatedCloudNodeRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesUpdate");
      }
      // verify the required parameter 'dedicatedCloudNodeName' is set
      if (dedicatedCloudNodeName === undefined || dedicatedCloudNodeName === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesUpdate");
      }
      // verify the required parameter 'dedicatedCloudNodeRequest' is set
      if (dedicatedCloudNodeRequest === undefined || dedicatedCloudNodeRequest === null) {
        throw new Error("Missing the required parameter 'dedicatedCloudNodeRequest' when calling dedicatedCloudNodesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dedicatedCloudNodeName': dedicatedCloudNodeName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DedicatedCloudNode;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
