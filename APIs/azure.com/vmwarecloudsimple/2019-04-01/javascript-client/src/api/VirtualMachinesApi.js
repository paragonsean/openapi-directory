/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CSRPError from '../model/CSRPError';
import PatchPayload from '../model/PatchPayload';
import VirtualMachine from '../model/VirtualMachine';
import VirtualMachineListResponse from '../model/VirtualMachineListResponse';
import VirtualMachineStopMode from '../model/VirtualMachineStopMode';

/**
* VirtualMachines service.
* @module api/VirtualMachinesApi
* @version 2019-04-01
*/
export default class VirtualMachinesApi {

    /**
    * Constructs a new VirtualMachinesApi. 
    * @alias module:api/VirtualMachinesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the virtualMachinesCreateOrUpdate operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements virtual machine PUT method
     * Create Or Update Virtual Machine
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} referer referer url
     * @param {String} virtualMachineName virtual machine name
     * @param {String} apiVersion Client API version.
     * @param {module:model/VirtualMachine} virtualMachineRequest Create or Update Virtual Machine request
     * @param {module:api/VirtualMachinesApi~virtualMachinesCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachine}
     */
    virtualMachinesCreateOrUpdate(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, virtualMachineRequest, callback) {
      let postBody = virtualMachineRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'referer' is set
      if (referer === undefined || referer === null) {
        throw new Error("Missing the required parameter 'referer' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'virtualMachineName' is set
      if (virtualMachineName === undefined || virtualMachineName === null) {
        throw new Error("Missing the required parameter 'virtualMachineName' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesCreateOrUpdate");
      }
      // verify the required parameter 'virtualMachineRequest' is set
      if (virtualMachineRequest === undefined || virtualMachineRequest === null) {
        throw new Error("Missing the required parameter 'virtualMachineRequest' when calling virtualMachinesCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualMachineName': virtualMachineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Referer': referer
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesDelete operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements virtual machine DELETE method
     * Delete virtual machine
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} referer referer url
     * @param {String} virtualMachineName virtual machine name
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesDelete(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'referer' is set
      if (referer === undefined || referer === null) {
        throw new Error("Missing the required parameter 'referer' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'virtualMachineName' is set
      if (virtualMachineName === undefined || virtualMachineName === null) {
        throw new Error("Missing the required parameter 'virtualMachineName' when calling virtualMachinesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualMachineName': virtualMachineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Referer': referer
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesGet operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements virtual machine GET method
     * Get virtual machine
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} virtualMachineName virtual machine name
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachine}
     */
    virtualMachinesGet(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesGet");
      }
      // verify the required parameter 'virtualMachineName' is set
      if (virtualMachineName === undefined || virtualMachineName === null) {
        throw new Error("Missing the required parameter 'virtualMachineName' when calling virtualMachinesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualMachineName': virtualMachineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesListByResourceGroup operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements list virtual machine within RG method
     * Returns list of virtual machine within resource group
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the list operation
     * @param {Number} [top] The maximum number of record sets to return
     * @param {String} [skipToken] to be used by nextLink implementation
     * @param {module:api/VirtualMachinesApi~virtualMachinesListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineListResponse}
     */
    virtualMachinesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualMachineListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesListBySubscription operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesListBySubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachineListResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements list virtual machine within subscription method
     * Returns list virtual machine within subscription
     * @param {String} subscriptionId The subscription ID.
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] The filter to apply on the list operation
     * @param {Number} [top] The maximum number of record sets to return
     * @param {String} [skipToken] to be used by nextLink implementation
     * @param {module:api/VirtualMachinesApi~virtualMachinesListBySubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachineListResponse}
     */
    virtualMachinesListBySubscription(subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesListBySubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesListBySubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VirtualMachineListResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/virtualMachines', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesStart operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesStartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements a start method for a virtual machine
     * Power on virtual machine
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} referer referer url
     * @param {String} virtualMachineName virtual machine name
     * @param {String} apiVersion Client API version.
     * @param {module:api/VirtualMachinesApi~virtualMachinesStartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesStart(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesStart");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesStart");
      }
      // verify the required parameter 'referer' is set
      if (referer === undefined || referer === null) {
        throw new Error("Missing the required parameter 'referer' when calling virtualMachinesStart");
      }
      // verify the required parameter 'virtualMachineName' is set
      if (virtualMachineName === undefined || virtualMachineName === null) {
        throw new Error("Missing the required parameter 'virtualMachineName' when calling virtualMachinesStart");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesStart");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualMachineName': virtualMachineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Referer': referer
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/start', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesStop operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesStopCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine
     * Power off virtual machine, options: shutdown, poweroff, and suspend
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} referer referer url
     * @param {String} virtualMachineName virtual machine name
     * @param {String} apiVersion Client API version.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [mode] query stop mode parameter (reboot, shutdown, etc...)
     * @param {module:model/VirtualMachineStopMode} [m] body stop mode parameter (reboot, shutdown, etc...)
     * @param {module:api/VirtualMachinesApi~virtualMachinesStopCallback} callback The callback function, accepting three arguments: error, data, response
     */
    virtualMachinesStop(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = opts['m'];
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesStop");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesStop");
      }
      // verify the required parameter 'referer' is set
      if (referer === undefined || referer === null) {
        throw new Error("Missing the required parameter 'referer' when calling virtualMachinesStop");
      }
      // verify the required parameter 'virtualMachineName' is set
      if (virtualMachineName === undefined || virtualMachineName === null) {
        throw new Error("Missing the required parameter 'virtualMachineName' when calling virtualMachinesStop");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesStop");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualMachineName': virtualMachineName
      };
      let queryParams = {
        'mode': opts['mode'],
        'api-version': apiVersion
      };
      let headerParams = {
        'Referer': referer
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/stop', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the virtualMachinesUpdate operation.
     * @callback module:api/VirtualMachinesApi~virtualMachinesUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VirtualMachine} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Implements virtual machine PATCH method
     * Patch virtual machine properties
     * @param {String} subscriptionId The subscription ID.
     * @param {String} resourceGroupName The name of the resource group
     * @param {String} virtualMachineName virtual machine name
     * @param {String} apiVersion Client API version.
     * @param {module:model/PatchPayload} virtualMachineRequest Patch virtual machine request
     * @param {module:api/VirtualMachinesApi~virtualMachinesUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VirtualMachine}
     */
    virtualMachinesUpdate(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, virtualMachineRequest, callback) {
      let postBody = virtualMachineRequest;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'virtualMachineName' is set
      if (virtualMachineName === undefined || virtualMachineName === null) {
        throw new Error("Missing the required parameter 'virtualMachineName' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling virtualMachinesUpdate");
      }
      // verify the required parameter 'virtualMachineRequest' is set
      if (virtualMachineRequest === undefined || virtualMachineRequest === null) {
        throw new Error("Missing the required parameter 'virtualMachineRequest' when calling virtualMachinesUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'virtualMachineName': virtualMachineName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VirtualMachine;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
