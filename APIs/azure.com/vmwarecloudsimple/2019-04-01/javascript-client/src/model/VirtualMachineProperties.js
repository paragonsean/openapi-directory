/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GuestOSCustomization from './GuestOSCustomization';
import ResourcePool from './ResourcePool';
import VirtualDisk from './VirtualDisk';
import VirtualDiskController from './VirtualDiskController';
import VirtualNic from './VirtualNic';

/**
 * The VirtualMachineProperties model module.
 * @module model/VirtualMachineProperties
 * @version 2019-04-01
 */
class VirtualMachineProperties {
    /**
     * Constructs a new <code>VirtualMachineProperties</code>.
     * Properties of virtual machine
     * @alias module:model/VirtualMachineProperties
     * @param amountOfRam {Number} The amount of memory
     * @param numberOfCores {Number} The number of CPU cores
     * @param privateCloudId {String} Private Cloud Id
     */
    constructor(amountOfRam, numberOfCores, privateCloudId) { 
        
        VirtualMachineProperties.initialize(this, amountOfRam, numberOfCores, privateCloudId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amountOfRam, numberOfCores, privateCloudId) { 
        obj['amountOfRam'] = amountOfRam;
        obj['numberOfCores'] = numberOfCores;
        obj['privateCloudId'] = privateCloudId;
    }

    /**
     * Constructs a <code>VirtualMachineProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineProperties} The populated <code>VirtualMachineProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineProperties();

            if (data.hasOwnProperty('amountOfRam')) {
                obj['amountOfRam'] = ApiClient.convertToType(data['amountOfRam'], 'Number');
            }
            if (data.hasOwnProperty('controllers')) {
                obj['controllers'] = ApiClient.convertToType(data['controllers'], [VirtualDiskController]);
            }
            if (data.hasOwnProperty('customization')) {
                obj['customization'] = GuestOSCustomization.constructFromObject(data['customization']);
            }
            if (data.hasOwnProperty('disks')) {
                obj['disks'] = ApiClient.convertToType(data['disks'], [VirtualDisk]);
            }
            if (data.hasOwnProperty('dnsname')) {
                obj['dnsname'] = ApiClient.convertToType(data['dnsname'], 'String');
            }
            if (data.hasOwnProperty('exposeToGuestVM')) {
                obj['exposeToGuestVM'] = ApiClient.convertToType(data['exposeToGuestVM'], 'Boolean');
            }
            if (data.hasOwnProperty('folder')) {
                obj['folder'] = ApiClient.convertToType(data['folder'], 'String');
            }
            if (data.hasOwnProperty('guestOS')) {
                obj['guestOS'] = ApiClient.convertToType(data['guestOS'], 'String');
            }
            if (data.hasOwnProperty('guestOSType')) {
                obj['guestOSType'] = ApiClient.convertToType(data['guestOSType'], 'String');
            }
            if (data.hasOwnProperty('nics')) {
                obj['nics'] = ApiClient.convertToType(data['nics'], [VirtualNic]);
            }
            if (data.hasOwnProperty('numberOfCores')) {
                obj['numberOfCores'] = ApiClient.convertToType(data['numberOfCores'], 'Number');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('privateCloudId')) {
                obj['privateCloudId'] = ApiClient.convertToType(data['privateCloudId'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('publicIP')) {
                obj['publicIP'] = ApiClient.convertToType(data['publicIP'], 'String');
            }
            if (data.hasOwnProperty('resourcePool')) {
                obj['resourcePool'] = ResourcePool.constructFromObject(data['resourcePool']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('templateId')) {
                obj['templateId'] = ApiClient.convertToType(data['templateId'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('vSphereNetworks')) {
                obj['vSphereNetworks'] = ApiClient.convertToType(data['vSphereNetworks'], ['String']);
            }
            if (data.hasOwnProperty('vmId')) {
                obj['vmId'] = ApiClient.convertToType(data['vmId'], 'String');
            }
            if (data.hasOwnProperty('vmwaretools')) {
                obj['vmwaretools'] = ApiClient.convertToType(data['vmwaretools'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['controllers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['controllers'])) {
                throw new Error("Expected the field `controllers` to be an array in the JSON data but got " + data['controllers']);
            }
            // validate the optional field `controllers` (array)
            for (const item of data['controllers']) {
                VirtualDiskController.validateJSON(item);
            };
        }
        // validate the optional field `customization`
        if (data['customization']) { // data not null
          GuestOSCustomization.validateJSON(data['customization']);
        }
        if (data['disks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disks'])) {
                throw new Error("Expected the field `disks` to be an array in the JSON data but got " + data['disks']);
            }
            // validate the optional field `disks` (array)
            for (const item of data['disks']) {
                VirtualDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dnsname'] && !(typeof data['dnsname'] === 'string' || data['dnsname'] instanceof String)) {
            throw new Error("Expected the field `dnsname` to be a primitive type in the JSON string but got " + data['dnsname']);
        }
        // ensure the json data is a string
        if (data['folder'] && !(typeof data['folder'] === 'string' || data['folder'] instanceof String)) {
            throw new Error("Expected the field `folder` to be a primitive type in the JSON string but got " + data['folder']);
        }
        // ensure the json data is a string
        if (data['guestOS'] && !(typeof data['guestOS'] === 'string' || data['guestOS'] instanceof String)) {
            throw new Error("Expected the field `guestOS` to be a primitive type in the JSON string but got " + data['guestOS']);
        }
        // ensure the json data is a string
        if (data['guestOSType'] && !(typeof data['guestOSType'] === 'string' || data['guestOSType'] instanceof String)) {
            throw new Error("Expected the field `guestOSType` to be a primitive type in the JSON string but got " + data['guestOSType']);
        }
        if (data['nics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nics'])) {
                throw new Error("Expected the field `nics` to be an array in the JSON data but got " + data['nics']);
            }
            // validate the optional field `nics` (array)
            for (const item of data['nics']) {
                VirtualNic.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['privateCloudId'] && !(typeof data['privateCloudId'] === 'string' || data['privateCloudId'] instanceof String)) {
            throw new Error("Expected the field `privateCloudId` to be a primitive type in the JSON string but got " + data['privateCloudId']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['publicIP'] && !(typeof data['publicIP'] === 'string' || data['publicIP'] instanceof String)) {
            throw new Error("Expected the field `publicIP` to be a primitive type in the JSON string but got " + data['publicIP']);
        }
        // validate the optional field `resourcePool`
        if (data['resourcePool']) { // data not null
          ResourcePool.validateJSON(data['resourcePool']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['templateId'] && !(typeof data['templateId'] === 'string' || data['templateId'] instanceof String)) {
            throw new Error("Expected the field `templateId` to be a primitive type in the JSON string but got " + data['templateId']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vSphereNetworks'])) {
            throw new Error("Expected the field `vSphereNetworks` to be an array in the JSON data but got " + data['vSphereNetworks']);
        }
        // ensure the json data is a string
        if (data['vmId'] && !(typeof data['vmId'] === 'string' || data['vmId'] instanceof String)) {
            throw new Error("Expected the field `vmId` to be a primitive type in the JSON string but got " + data['vmId']);
        }
        // ensure the json data is a string
        if (data['vmwaretools'] && !(typeof data['vmwaretools'] === 'string' || data['vmwaretools'] instanceof String)) {
            throw new Error("Expected the field `vmwaretools` to be a primitive type in the JSON string but got " + data['vmwaretools']);
        }

        return true;
    }


}

VirtualMachineProperties.RequiredProperties = ["amountOfRam", "numberOfCores", "privateCloudId"];

/**
 * The amount of memory
 * @member {Number} amountOfRam
 */
VirtualMachineProperties.prototype['amountOfRam'] = undefined;

/**
 * The list of Virtual Disks' Controllers
 * @member {Array.<module:model/VirtualDiskController>} controllers
 */
VirtualMachineProperties.prototype['controllers'] = undefined;

/**
 * @member {module:model/GuestOSCustomization} customization
 */
VirtualMachineProperties.prototype['customization'] = undefined;

/**
 * The list of Virtual Disks
 * @member {Array.<module:model/VirtualDisk>} disks
 */
VirtualMachineProperties.prototype['disks'] = undefined;

/**
 * The DNS name of Virtual Machine in VCenter
 * @member {String} dnsname
 */
VirtualMachineProperties.prototype['dnsname'] = undefined;

/**
 * Expose Guest OS or not
 * @member {Boolean} exposeToGuestVM
 */
VirtualMachineProperties.prototype['exposeToGuestVM'] = undefined;

/**
 * The path to virtual machine folder in VCenter
 * @member {String} folder
 */
VirtualMachineProperties.prototype['folder'] = undefined;

/**
 * The name of Guest OS
 * @member {String} guestOS
 */
VirtualMachineProperties.prototype['guestOS'] = undefined;

/**
 * The Guest OS type
 * @member {module:model/VirtualMachineProperties.GuestOSTypeEnum} guestOSType
 */
VirtualMachineProperties.prototype['guestOSType'] = undefined;

/**
 * The list of Virtual NICs
 * @member {Array.<module:model/VirtualNic>} nics
 */
VirtualMachineProperties.prototype['nics'] = undefined;

/**
 * The number of CPU cores
 * @member {Number} numberOfCores
 */
VirtualMachineProperties.prototype['numberOfCores'] = undefined;

/**
 * Password for login. Deprecated - use customization property
 * @member {String} password
 */
VirtualMachineProperties.prototype['password'] = undefined;

/**
 * Private Cloud Id
 * @member {String} privateCloudId
 */
VirtualMachineProperties.prototype['privateCloudId'] = undefined;

/**
 * The provisioning status of the resource
 * @member {String} provisioningState
 */
VirtualMachineProperties.prototype['provisioningState'] = undefined;

/**
 * The public ip of Virtual Machine
 * @member {String} publicIP
 */
VirtualMachineProperties.prototype['publicIP'] = undefined;

/**
 * @member {module:model/ResourcePool} resourcePool
 */
VirtualMachineProperties.prototype['resourcePool'] = undefined;

/**
 * The status of Virtual machine
 * @member {module:model/VirtualMachineProperties.StatusEnum} status
 */
VirtualMachineProperties.prototype['status'] = undefined;

/**
 * Virtual Machine Template Id
 * @member {String} templateId
 */
VirtualMachineProperties.prototype['templateId'] = undefined;

/**
 * Username for login. Deprecated - use customization property
 * @member {String} username
 */
VirtualMachineProperties.prototype['username'] = undefined;

/**
 * The list of Virtual VSphere Networks
 * @member {Array.<String>} vSphereNetworks
 */
VirtualMachineProperties.prototype['vSphereNetworks'] = undefined;

/**
 * The internal id of Virtual Machine in VCenter
 * @member {String} vmId
 */
VirtualMachineProperties.prototype['vmId'] = undefined;

/**
 * VMware tools version
 * @member {String} vmwaretools
 */
VirtualMachineProperties.prototype['vmwaretools'] = undefined;





/**
 * Allowed values for the <code>guestOSType</code> property.
 * @enum {String}
 * @readonly
 */
VirtualMachineProperties['GuestOSTypeEnum'] = {

    /**
     * value: "linux"
     * @const
     */
    "linux": "linux",

    /**
     * value: "windows"
     * @const
     */
    "windows": "windows",

    /**
     * value: "other"
     * @const
     */
    "other": "other"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
VirtualMachineProperties['StatusEnum'] = {

    /**
     * value: "running"
     * @const
     */
    "running": "running",

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended",

    /**
     * value: "poweredoff"
     * @const
     */
    "poweredoff": "poweredoff",

    /**
     * value: "updating"
     * @const
     */
    "updating": "updating",

    /**
     * value: "deallocating"
     * @const
     */
    "deallocating": "deallocating",

    /**
     * value: "deleting"
     * @const
     */
    "deleting": "deleting"
};



export default VirtualMachineProperties;

