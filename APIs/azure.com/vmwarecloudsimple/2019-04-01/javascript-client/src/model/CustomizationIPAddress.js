/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CustomizationIPAddress model module.
 * @module model/CustomizationIPAddress
 * @version 2019-04-01
 */
class CustomizationIPAddress {
    /**
     * Constructs a new <code>CustomizationIPAddress</code>.
     * @alias module:model/CustomizationIPAddress
     */
    constructor() { 
        
        CustomizationIPAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CustomizationIPAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CustomizationIPAddress} obj Optional instance to populate.
     * @return {module:model/CustomizationIPAddress} The populated <code>CustomizationIPAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CustomizationIPAddress();

            if (data.hasOwnProperty('argument')) {
                obj['argument'] = ApiClient.convertToType(data['argument'], 'String');
            }
            if (data.hasOwnProperty('ipAddress')) {
                obj['ipAddress'] = ApiClient.convertToType(data['ipAddress'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CustomizationIPAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CustomizationIPAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['argument'] && !(typeof data['argument'] === 'string' || data['argument'] instanceof String)) {
            throw new Error("Expected the field `argument` to be a primitive type in the JSON string but got " + data['argument']);
        }
        // ensure the json data is a string
        if (data['ipAddress'] && !(typeof data['ipAddress'] === 'string' || data['ipAddress'] instanceof String)) {
            throw new Error("Expected the field `ipAddress` to be a primitive type in the JSON string but got " + data['ipAddress']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}



/**
 * Argument when Custom ip type is selected
 * @member {String} argument
 */
CustomizationIPAddress.prototype['argument'] = undefined;

/**
 * Defined Ip Address when Fixed ip type is selected
 * @member {String} ipAddress
 */
CustomizationIPAddress.prototype['ipAddress'] = undefined;

/**
 * Customization Specification ip type
 * @member {module:model/CustomizationIPAddress.TypeEnum} type
 */
CustomizationIPAddress.prototype['type'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
CustomizationIPAddress['TypeEnum'] = {

    /**
     * value: "CUSTOM"
     * @const
     */
    "CUSTOM": "CUSTOM",

    /**
     * value: "DHCP_IP"
     * @const
     */
    "DHCP_IP": "DHCP_IP",

    /**
     * value: "FIXED_IP"
     * @const
     */
    "FIXED_IP": "FIXED_IP",

    /**
     * value: "USER_DEFINED"
     * @const
     */
    "USER_DEFINED": "USER_DEFINED"
};



export default CustomizationIPAddress;

