/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsageName from './UsageName';

/**
 * The Usage model module.
 * @module model/Usage
 * @version 2019-04-01
 */
class Usage {
    /**
     * Constructs a new <code>Usage</code>.
     * Usage model
     * @alias module:model/Usage
     * @param currentValue {Number} The current usage value
     * @param limit {Number} limit of a given sku in a region for a subscription. The maximum permitted value for the usage quota. If there is no limit, this value will be -1
     */
    constructor(currentValue, limit) { 
        
        Usage.initialize(this, currentValue, limit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currentValue, limit) { 
        obj['currentValue'] = currentValue;
        obj['limit'] = limit;
    }

    /**
     * Constructs a <code>Usage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Usage} obj Optional instance to populate.
     * @return {module:model/Usage} The populated <code>Usage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Usage();

            if (data.hasOwnProperty('currentValue')) {
                obj['currentValue'] = ApiClient.convertToType(data['currentValue'], 'Number');
            }
            if (data.hasOwnProperty('limit')) {
                obj['limit'] = ApiClient.convertToType(data['limit'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = UsageName.constructFromObject(data['name']);
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Usage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Usage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Usage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `name`
        if (data['name']) { // data not null
          UsageName.validateJSON(data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

Usage.RequiredProperties = ["currentValue", "limit"];

/**
 * The current usage value
 * @member {Number} currentValue
 */
Usage.prototype['currentValue'] = undefined;

/**
 * limit of a given sku in a region for a subscription. The maximum permitted value for the usage quota. If there is no limit, this value will be -1
 * @member {Number} limit
 */
Usage.prototype['limit'] = undefined;

/**
 * @member {module:model/UsageName} name
 */
Usage.prototype['name'] = undefined;

/**
 * The usages' unit
 * @member {module:model/Usage.UnitEnum} unit
 */
Usage.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>unit</code> property.
 * @enum {String}
 * @readonly
 */
Usage['UnitEnum'] = {

    /**
     * value: "Count"
     * @const
     */
    "Count": "Count",

    /**
     * value: "Bytes"
     * @const
     */
    "Bytes": "Bytes",

    /**
     * value: "Seconds"
     * @const
     */
    "Seconds": "Seconds",

    /**
     * value: "Percent"
     * @const
     */
    "Percent": "Percent",

    /**
     * value: "CountPerSecond"
     * @const
     */
    "CountPerSecond": "CountPerSecond",

    /**
     * value: "BytesPerSecond"
     * @const
     */
    "BytesPerSecond": "BytesPerSecond"
};



export default Usage;

