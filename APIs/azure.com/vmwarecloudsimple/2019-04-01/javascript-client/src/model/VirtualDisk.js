/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The VirtualDisk model module.
 * @module model/VirtualDisk
 * @version 2019-04-01
 */
class VirtualDisk {
    /**
     * Constructs a new <code>VirtualDisk</code>.
     * Virtual disk model
     * @alias module:model/VirtualDisk
     * @param controllerId {String} Disk's Controller id
     * @param independenceMode {module:model/VirtualDisk.IndependenceModeEnum} Disk's independence mode type
     * @param totalSize {Number} Disk's total size
     */
    constructor(controllerId, independenceMode, totalSize) { 
        
        VirtualDisk.initialize(this, controllerId, independenceMode, totalSize);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, controllerId, independenceMode, totalSize) { 
        obj['controllerId'] = controllerId;
        obj['independenceMode'] = independenceMode;
        obj['totalSize'] = totalSize;
    }

    /**
     * Constructs a <code>VirtualDisk</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualDisk} obj Optional instance to populate.
     * @return {module:model/VirtualDisk} The populated <code>VirtualDisk</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualDisk();

            if (data.hasOwnProperty('controllerId')) {
                obj['controllerId'] = ApiClient.convertToType(data['controllerId'], 'String');
            }
            if (data.hasOwnProperty('independenceMode')) {
                obj['independenceMode'] = ApiClient.convertToType(data['independenceMode'], 'String');
            }
            if (data.hasOwnProperty('totalSize')) {
                obj['totalSize'] = ApiClient.convertToType(data['totalSize'], 'Number');
            }
            if (data.hasOwnProperty('virtualDiskId')) {
                obj['virtualDiskId'] = ApiClient.convertToType(data['virtualDiskId'], 'String');
            }
            if (data.hasOwnProperty('virtualDiskName')) {
                obj['virtualDiskName'] = ApiClient.convertToType(data['virtualDiskName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualDisk</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualDisk</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualDisk.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['controllerId'] && !(typeof data['controllerId'] === 'string' || data['controllerId'] instanceof String)) {
            throw new Error("Expected the field `controllerId` to be a primitive type in the JSON string but got " + data['controllerId']);
        }
        // ensure the json data is a string
        if (data['independenceMode'] && !(typeof data['independenceMode'] === 'string' || data['independenceMode'] instanceof String)) {
            throw new Error("Expected the field `independenceMode` to be a primitive type in the JSON string but got " + data['independenceMode']);
        }
        // ensure the json data is a string
        if (data['virtualDiskId'] && !(typeof data['virtualDiskId'] === 'string' || data['virtualDiskId'] instanceof String)) {
            throw new Error("Expected the field `virtualDiskId` to be a primitive type in the JSON string but got " + data['virtualDiskId']);
        }
        // ensure the json data is a string
        if (data['virtualDiskName'] && !(typeof data['virtualDiskName'] === 'string' || data['virtualDiskName'] instanceof String)) {
            throw new Error("Expected the field `virtualDiskName` to be a primitive type in the JSON string but got " + data['virtualDiskName']);
        }

        return true;
    }


}

VirtualDisk.RequiredProperties = ["controllerId", "independenceMode", "totalSize"];

/**
 * Disk's Controller id
 * @member {String} controllerId
 */
VirtualDisk.prototype['controllerId'] = undefined;

/**
 * Disk's independence mode type
 * @member {module:model/VirtualDisk.IndependenceModeEnum} independenceMode
 */
VirtualDisk.prototype['independenceMode'] = undefined;

/**
 * Disk's total size
 * @member {Number} totalSize
 */
VirtualDisk.prototype['totalSize'] = undefined;

/**
 * Disk's id
 * @member {String} virtualDiskId
 */
VirtualDisk.prototype['virtualDiskId'] = undefined;

/**
 * Disk's display name
 * @member {String} virtualDiskName
 */
VirtualDisk.prototype['virtualDiskName'] = undefined;





/**
 * Allowed values for the <code>independenceMode</code> property.
 * @enum {String}
 * @readonly
 */
VirtualDisk['IndependenceModeEnum'] = {

    /**
     * value: "persistent"
     * @const
     */
    "persistent": "persistent",

    /**
     * value: "independent_persistent"
     * @const
     */
    "independent_persistent": "independent_persistent",

    /**
     * value: "independent_nonpersistent"
     * @const
     */
    "independent_nonpersistent": "independent_nonpersistent"
};



export default VirtualDisk;

