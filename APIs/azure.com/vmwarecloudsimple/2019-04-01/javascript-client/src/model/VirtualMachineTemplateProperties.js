/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VirtualDisk from './VirtualDisk';
import VirtualDiskController from './VirtualDiskController';
import VirtualNic from './VirtualNic';

/**
 * The VirtualMachineTemplateProperties model module.
 * @module model/VirtualMachineTemplateProperties
 * @version 2019-04-01
 */
class VirtualMachineTemplateProperties {
    /**
     * Constructs a new <code>VirtualMachineTemplateProperties</code>.
     * Properties of virtual machine template
     * @alias module:model/VirtualMachineTemplateProperties
     * @param privateCloudId {String} The Private Cloud Id
     */
    constructor(privateCloudId) { 
        
        VirtualMachineTemplateProperties.initialize(this, privateCloudId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, privateCloudId) { 
        obj['privateCloudId'] = privateCloudId;
    }

    /**
     * Constructs a <code>VirtualMachineTemplateProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualMachineTemplateProperties} obj Optional instance to populate.
     * @return {module:model/VirtualMachineTemplateProperties} The populated <code>VirtualMachineTemplateProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualMachineTemplateProperties();

            if (data.hasOwnProperty('amountOfRam')) {
                obj['amountOfRam'] = ApiClient.convertToType(data['amountOfRam'], 'Number');
            }
            if (data.hasOwnProperty('controllers')) {
                obj['controllers'] = ApiClient.convertToType(data['controllers'], [VirtualDiskController]);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('disks')) {
                obj['disks'] = ApiClient.convertToType(data['disks'], [VirtualDisk]);
            }
            if (data.hasOwnProperty('exposeToGuestVM')) {
                obj['exposeToGuestVM'] = ApiClient.convertToType(data['exposeToGuestVM'], 'Boolean');
            }
            if (data.hasOwnProperty('guestOS')) {
                obj['guestOS'] = ApiClient.convertToType(data['guestOS'], 'String');
            }
            if (data.hasOwnProperty('guestOSType')) {
                obj['guestOSType'] = ApiClient.convertToType(data['guestOSType'], 'String');
            }
            if (data.hasOwnProperty('nics')) {
                obj['nics'] = ApiClient.convertToType(data['nics'], [VirtualNic]);
            }
            if (data.hasOwnProperty('numberOfCores')) {
                obj['numberOfCores'] = ApiClient.convertToType(data['numberOfCores'], 'Number');
            }
            if (data.hasOwnProperty('path')) {
                obj['path'] = ApiClient.convertToType(data['path'], 'String');
            }
            if (data.hasOwnProperty('privateCloudId')) {
                obj['privateCloudId'] = ApiClient.convertToType(data['privateCloudId'], 'String');
            }
            if (data.hasOwnProperty('vSphereNetworks')) {
                obj['vSphereNetworks'] = ApiClient.convertToType(data['vSphereNetworks'], ['String']);
            }
            if (data.hasOwnProperty('vSphereTags')) {
                obj['vSphereTags'] = ApiClient.convertToType(data['vSphereTags'], ['String']);
            }
            if (data.hasOwnProperty('vmwaretools')) {
                obj['vmwaretools'] = ApiClient.convertToType(data['vmwaretools'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualMachineTemplateProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualMachineTemplateProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualMachineTemplateProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['controllers']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['controllers'])) {
                throw new Error("Expected the field `controllers` to be an array in the JSON data but got " + data['controllers']);
            }
            // validate the optional field `controllers` (array)
            for (const item of data['controllers']) {
                VirtualDiskController.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['disks']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['disks'])) {
                throw new Error("Expected the field `disks` to be an array in the JSON data but got " + data['disks']);
            }
            // validate the optional field `disks` (array)
            for (const item of data['disks']) {
                VirtualDisk.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['guestOS'] && !(typeof data['guestOS'] === 'string' || data['guestOS'] instanceof String)) {
            throw new Error("Expected the field `guestOS` to be a primitive type in the JSON string but got " + data['guestOS']);
        }
        // ensure the json data is a string
        if (data['guestOSType'] && !(typeof data['guestOSType'] === 'string' || data['guestOSType'] instanceof String)) {
            throw new Error("Expected the field `guestOSType` to be a primitive type in the JSON string but got " + data['guestOSType']);
        }
        if (data['nics']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['nics'])) {
                throw new Error("Expected the field `nics` to be an array in the JSON data but got " + data['nics']);
            }
            // validate the optional field `nics` (array)
            for (const item of data['nics']) {
                VirtualNic.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['path'] && !(typeof data['path'] === 'string' || data['path'] instanceof String)) {
            throw new Error("Expected the field `path` to be a primitive type in the JSON string but got " + data['path']);
        }
        // ensure the json data is a string
        if (data['privateCloudId'] && !(typeof data['privateCloudId'] === 'string' || data['privateCloudId'] instanceof String)) {
            throw new Error("Expected the field `privateCloudId` to be a primitive type in the JSON string but got " + data['privateCloudId']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vSphereNetworks'])) {
            throw new Error("Expected the field `vSphereNetworks` to be an array in the JSON data but got " + data['vSphereNetworks']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vSphereTags'])) {
            throw new Error("Expected the field `vSphereTags` to be an array in the JSON data but got " + data['vSphereTags']);
        }
        // ensure the json data is a string
        if (data['vmwaretools'] && !(typeof data['vmwaretools'] === 'string' || data['vmwaretools'] instanceof String)) {
            throw new Error("Expected the field `vmwaretools` to be a primitive type in the JSON string but got " + data['vmwaretools']);
        }

        return true;
    }


}

VirtualMachineTemplateProperties.RequiredProperties = ["privateCloudId"];

/**
 * The amount of memory
 * @member {Number} amountOfRam
 */
VirtualMachineTemplateProperties.prototype['amountOfRam'] = undefined;

/**
 * The list of Virtual Disk Controllers
 * @member {Array.<module:model/VirtualDiskController>} controllers
 */
VirtualMachineTemplateProperties.prototype['controllers'] = undefined;

/**
 * The description of Virtual Machine Template
 * @member {String} description
 */
VirtualMachineTemplateProperties.prototype['description'] = undefined;

/**
 * The list of Virtual Disks
 * @member {Array.<module:model/VirtualDisk>} disks
 */
VirtualMachineTemplateProperties.prototype['disks'] = undefined;

/**
 * Expose Guest OS or not
 * @member {Boolean} exposeToGuestVM
 */
VirtualMachineTemplateProperties.prototype['exposeToGuestVM'] = undefined;

/**
 * The Guest OS
 * @member {String} guestOS
 */
VirtualMachineTemplateProperties.prototype['guestOS'] = undefined;

/**
 * The Guest OS types
 * @member {String} guestOSType
 */
VirtualMachineTemplateProperties.prototype['guestOSType'] = undefined;

/**
 * The list of Virtual NICs
 * @member {Array.<module:model/VirtualNic>} nics
 */
VirtualMachineTemplateProperties.prototype['nics'] = undefined;

/**
 * The number of CPU cores
 * @member {Number} numberOfCores
 */
VirtualMachineTemplateProperties.prototype['numberOfCores'] = undefined;

/**
 * path to folder
 * @member {String} path
 */
VirtualMachineTemplateProperties.prototype['path'] = undefined;

/**
 * The Private Cloud Id
 * @member {String} privateCloudId
 */
VirtualMachineTemplateProperties.prototype['privateCloudId'] = undefined;

/**
 * The list of VSphere networks
 * @member {Array.<String>} vSphereNetworks
 */
VirtualMachineTemplateProperties.prototype['vSphereNetworks'] = undefined;

/**
 * The tags from VSphere
 * @member {Array.<String>} vSphereTags
 */
VirtualMachineTemplateProperties.prototype['vSphereTags'] = undefined;

/**
 * The VMware tools version
 * @member {String} vmwaretools
 */
VirtualMachineTemplateProperties.prototype['vmwaretools'] = undefined;






export default VirtualMachineTemplateProperties;

