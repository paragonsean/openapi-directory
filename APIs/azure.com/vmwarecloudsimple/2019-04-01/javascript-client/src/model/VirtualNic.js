/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import GuestOSNICCustomization from './GuestOSNICCustomization';
import VirtualNetwork from './VirtualNetwork';

/**
 * The VirtualNic model module.
 * @module model/VirtualNic
 * @version 2019-04-01
 */
class VirtualNic {
    /**
     * Constructs a new <code>VirtualNic</code>.
     * Virtual NIC model
     * @alias module:model/VirtualNic
     * @param network {module:model/VirtualNetwork} 
     * @param nicType {module:model/VirtualNic.NicTypeEnum} NIC type
     */
    constructor(network, nicType) { 
        
        VirtualNic.initialize(this, network, nicType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, network, nicType) { 
        obj['network'] = network;
        obj['nicType'] = nicType;
    }

    /**
     * Constructs a <code>VirtualNic</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VirtualNic} obj Optional instance to populate.
     * @return {module:model/VirtualNic} The populated <code>VirtualNic</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VirtualNic();

            if (data.hasOwnProperty('customization')) {
                obj['customization'] = GuestOSNICCustomization.constructFromObject(data['customization']);
            }
            if (data.hasOwnProperty('ipAddresses')) {
                obj['ipAddresses'] = ApiClient.convertToType(data['ipAddresses'], ['String']);
            }
            if (data.hasOwnProperty('macAddress')) {
                obj['macAddress'] = ApiClient.convertToType(data['macAddress'], 'String');
            }
            if (data.hasOwnProperty('network')) {
                obj['network'] = VirtualNetwork.constructFromObject(data['network']);
            }
            if (data.hasOwnProperty('nicType')) {
                obj['nicType'] = ApiClient.convertToType(data['nicType'], 'String');
            }
            if (data.hasOwnProperty('powerOnBoot')) {
                obj['powerOnBoot'] = ApiClient.convertToType(data['powerOnBoot'], 'Boolean');
            }
            if (data.hasOwnProperty('virtualNicId')) {
                obj['virtualNicId'] = ApiClient.convertToType(data['virtualNicId'], 'String');
            }
            if (data.hasOwnProperty('virtualNicName')) {
                obj['virtualNicName'] = ApiClient.convertToType(data['virtualNicName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VirtualNic</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VirtualNic</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VirtualNic.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `customization`
        if (data['customization']) { // data not null
          GuestOSNICCustomization.validateJSON(data['customization']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ipAddresses'])) {
            throw new Error("Expected the field `ipAddresses` to be an array in the JSON data but got " + data['ipAddresses']);
        }
        // ensure the json data is a string
        if (data['macAddress'] && !(typeof data['macAddress'] === 'string' || data['macAddress'] instanceof String)) {
            throw new Error("Expected the field `macAddress` to be a primitive type in the JSON string but got " + data['macAddress']);
        }
        // validate the optional field `network`
        if (data['network']) { // data not null
          VirtualNetwork.validateJSON(data['network']);
        }
        // ensure the json data is a string
        if (data['nicType'] && !(typeof data['nicType'] === 'string' || data['nicType'] instanceof String)) {
            throw new Error("Expected the field `nicType` to be a primitive type in the JSON string but got " + data['nicType']);
        }
        // ensure the json data is a string
        if (data['virtualNicId'] && !(typeof data['virtualNicId'] === 'string' || data['virtualNicId'] instanceof String)) {
            throw new Error("Expected the field `virtualNicId` to be a primitive type in the JSON string but got " + data['virtualNicId']);
        }
        // ensure the json data is a string
        if (data['virtualNicName'] && !(typeof data['virtualNicName'] === 'string' || data['virtualNicName'] instanceof String)) {
            throw new Error("Expected the field `virtualNicName` to be a primitive type in the JSON string but got " + data['virtualNicName']);
        }

        return true;
    }


}

VirtualNic.RequiredProperties = ["network", "nicType"];

/**
 * @member {module:model/GuestOSNICCustomization} customization
 */
VirtualNic.prototype['customization'] = undefined;

/**
 * NIC ip address
 * @member {Array.<String>} ipAddresses
 */
VirtualNic.prototype['ipAddresses'] = undefined;

/**
 * NIC MAC address
 * @member {String} macAddress
 */
VirtualNic.prototype['macAddress'] = undefined;

/**
 * @member {module:model/VirtualNetwork} network
 */
VirtualNic.prototype['network'] = undefined;

/**
 * NIC type
 * @member {module:model/VirtualNic.NicTypeEnum} nicType
 */
VirtualNic.prototype['nicType'] = undefined;

/**
 * Is NIC powered on/off on boot
 * @member {Boolean} powerOnBoot
 */
VirtualNic.prototype['powerOnBoot'] = undefined;

/**
 * NIC id
 * @member {String} virtualNicId
 */
VirtualNic.prototype['virtualNicId'] = undefined;

/**
 * NIC name
 * @member {String} virtualNicName
 */
VirtualNic.prototype['virtualNicName'] = undefined;





/**
 * Allowed values for the <code>nicType</code> property.
 * @enum {String}
 * @readonly
 */
VirtualNic['NicTypeEnum'] = {

    /**
     * value: "E1000"
     * @const
     */
    "E1000": "E1000",

    /**
     * value: "E1000E"
     * @const
     */
    "E1000E": "E1000E",

    /**
     * value: "PCNET32"
     * @const
     */
    "PCNET32": "PCNET32",

    /**
     * value: "VMXNET"
     * @const
     */
    "VMXNET": "VMXNET",

    /**
     * value: "VMXNET2"
     * @const
     */
    "VMXNET2": "VMXNET2",

    /**
     * value: "VMXNET3"
     * @const
     */
    "VMXNET3": "VMXNET3"
};



export default VirtualNic;

