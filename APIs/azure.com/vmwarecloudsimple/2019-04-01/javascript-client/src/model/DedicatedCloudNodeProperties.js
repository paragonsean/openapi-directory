/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import SkuDescription from './SkuDescription';

/**
 * The DedicatedCloudNodeProperties model module.
 * @module model/DedicatedCloudNodeProperties
 * @version 2019-04-01
 */
class DedicatedCloudNodeProperties {
    /**
     * Constructs a new <code>DedicatedCloudNodeProperties</code>.
     * Properties of dedicated cloud node
     * @alias module:model/DedicatedCloudNodeProperties
     * @param availabilityZoneId {String} Availability Zone id, e.g. \"az1\"
     * @param nodesCount {Number} count of nodes to create
     * @param placementGroupId {String} Placement Group id, e.g. \"n1\"
     * @param purchaseId {String} purchase id
     */
    constructor(availabilityZoneId, nodesCount, placementGroupId, purchaseId) { 
        
        DedicatedCloudNodeProperties.initialize(this, availabilityZoneId, nodesCount, placementGroupId, purchaseId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, availabilityZoneId, nodesCount, placementGroupId, purchaseId) { 
        obj['availabilityZoneId'] = availabilityZoneId;
        obj['nodesCount'] = nodesCount;
        obj['placementGroupId'] = placementGroupId;
        obj['purchaseId'] = purchaseId;
    }

    /**
     * Constructs a <code>DedicatedCloudNodeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DedicatedCloudNodeProperties} obj Optional instance to populate.
     * @return {module:model/DedicatedCloudNodeProperties} The populated <code>DedicatedCloudNodeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DedicatedCloudNodeProperties();

            if (data.hasOwnProperty('availabilityZoneId')) {
                obj['availabilityZoneId'] = ApiClient.convertToType(data['availabilityZoneId'], 'String');
            }
            if (data.hasOwnProperty('availabilityZoneName')) {
                obj['availabilityZoneName'] = ApiClient.convertToType(data['availabilityZoneName'], 'String');
            }
            if (data.hasOwnProperty('cloudRackName')) {
                obj['cloudRackName'] = ApiClient.convertToType(data['cloudRackName'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], Object);
            }
            if (data.hasOwnProperty('nodesCount')) {
                obj['nodesCount'] = ApiClient.convertToType(data['nodesCount'], 'Number');
            }
            if (data.hasOwnProperty('placementGroupId')) {
                obj['placementGroupId'] = ApiClient.convertToType(data['placementGroupId'], 'String');
            }
            if (data.hasOwnProperty('placementGroupName')) {
                obj['placementGroupName'] = ApiClient.convertToType(data['placementGroupName'], 'String');
            }
            if (data.hasOwnProperty('privateCloudId')) {
                obj['privateCloudId'] = ApiClient.convertToType(data['privateCloudId'], 'String');
            }
            if (data.hasOwnProperty('privateCloudName')) {
                obj['privateCloudName'] = ApiClient.convertToType(data['privateCloudName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('purchaseId')) {
                obj['purchaseId'] = ApiClient.convertToType(data['purchaseId'], 'String');
            }
            if (data.hasOwnProperty('skuDescription')) {
                obj['skuDescription'] = SkuDescription.constructFromObject(data['skuDescription']);
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('vmwareClusterName')) {
                obj['vmwareClusterName'] = ApiClient.convertToType(data['vmwareClusterName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DedicatedCloudNodeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DedicatedCloudNodeProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DedicatedCloudNodeProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['availabilityZoneId'] && !(typeof data['availabilityZoneId'] === 'string' || data['availabilityZoneId'] instanceof String)) {
            throw new Error("Expected the field `availabilityZoneId` to be a primitive type in the JSON string but got " + data['availabilityZoneId']);
        }
        // ensure the json data is a string
        if (data['availabilityZoneName'] && !(typeof data['availabilityZoneName'] === 'string' || data['availabilityZoneName'] instanceof String)) {
            throw new Error("Expected the field `availabilityZoneName` to be a primitive type in the JSON string but got " + data['availabilityZoneName']);
        }
        // ensure the json data is a string
        if (data['cloudRackName'] && !(typeof data['cloudRackName'] === 'string' || data['cloudRackName'] instanceof String)) {
            throw new Error("Expected the field `cloudRackName` to be a primitive type in the JSON string but got " + data['cloudRackName']);
        }
        // ensure the json data is a string
        if (data['placementGroupId'] && !(typeof data['placementGroupId'] === 'string' || data['placementGroupId'] instanceof String)) {
            throw new Error("Expected the field `placementGroupId` to be a primitive type in the JSON string but got " + data['placementGroupId']);
        }
        // ensure the json data is a string
        if (data['placementGroupName'] && !(typeof data['placementGroupName'] === 'string' || data['placementGroupName'] instanceof String)) {
            throw new Error("Expected the field `placementGroupName` to be a primitive type in the JSON string but got " + data['placementGroupName']);
        }
        // ensure the json data is a string
        if (data['privateCloudId'] && !(typeof data['privateCloudId'] === 'string' || data['privateCloudId'] instanceof String)) {
            throw new Error("Expected the field `privateCloudId` to be a primitive type in the JSON string but got " + data['privateCloudId']);
        }
        // ensure the json data is a string
        if (data['privateCloudName'] && !(typeof data['privateCloudName'] === 'string' || data['privateCloudName'] instanceof String)) {
            throw new Error("Expected the field `privateCloudName` to be a primitive type in the JSON string but got " + data['privateCloudName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['purchaseId'] && !(typeof data['purchaseId'] === 'string' || data['purchaseId'] instanceof String)) {
            throw new Error("Expected the field `purchaseId` to be a primitive type in the JSON string but got " + data['purchaseId']);
        }
        // validate the optional field `skuDescription`
        if (data['skuDescription']) { // data not null
          SkuDescription.validateJSON(data['skuDescription']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['vmwareClusterName'] && !(typeof data['vmwareClusterName'] === 'string' || data['vmwareClusterName'] instanceof String)) {
            throw new Error("Expected the field `vmwareClusterName` to be a primitive type in the JSON string but got " + data['vmwareClusterName']);
        }

        return true;
    }


}

DedicatedCloudNodeProperties.RequiredProperties = ["availabilityZoneId", "nodesCount", "placementGroupId", "purchaseId"];

/**
 * Availability Zone id, e.g. \"az1\"
 * @member {String} availabilityZoneId
 */
DedicatedCloudNodeProperties.prototype['availabilityZoneId'] = undefined;

/**
 * Availability Zone name, e.g. \"Availability Zone 1\"
 * @member {String} availabilityZoneName
 */
DedicatedCloudNodeProperties.prototype['availabilityZoneName'] = undefined;

/**
 * VMWare Cloud Rack Name
 * @member {String} cloudRackName
 */
DedicatedCloudNodeProperties.prototype['cloudRackName'] = undefined;

/**
 * date time the resource was created
 * @member {Object} created
 */
DedicatedCloudNodeProperties.prototype['created'] = undefined;

/**
 * count of nodes to create
 * @member {Number} nodesCount
 */
DedicatedCloudNodeProperties.prototype['nodesCount'] = undefined;

/**
 * Placement Group id, e.g. \"n1\"
 * @member {String} placementGroupId
 */
DedicatedCloudNodeProperties.prototype['placementGroupId'] = undefined;

/**
 * Placement Name, e.g. \"Placement Group 1\"
 * @member {String} placementGroupName
 */
DedicatedCloudNodeProperties.prototype['placementGroupName'] = undefined;

/**
 * Private Cloud Id
 * @member {String} privateCloudId
 */
DedicatedCloudNodeProperties.prototype['privateCloudId'] = undefined;

/**
 * Resource Pool Name
 * @member {String} privateCloudName
 */
DedicatedCloudNodeProperties.prototype['privateCloudName'] = undefined;

/**
 * The provisioning status of the resource
 * @member {String} provisioningState
 */
DedicatedCloudNodeProperties.prototype['provisioningState'] = undefined;

/**
 * purchase id
 * @member {String} purchaseId
 */
DedicatedCloudNodeProperties.prototype['purchaseId'] = undefined;

/**
 * @member {module:model/SkuDescription} skuDescription
 */
DedicatedCloudNodeProperties.prototype['skuDescription'] = undefined;

/**
 * Node status, indicates is private cloud set up on this node or not
 * @member {module:model/DedicatedCloudNodeProperties.StatusEnum} status
 */
DedicatedCloudNodeProperties.prototype['status'] = undefined;

/**
 * VMWare Cluster Name
 * @member {String} vmwareClusterName
 */
DedicatedCloudNodeProperties.prototype['vmwareClusterName'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DedicatedCloudNodeProperties['StatusEnum'] = {

    /**
     * value: "unused"
     * @const
     */
    "unused": "unused",

    /**
     * value: "used"
     * @const
     */
    "used": "used"
};



export default DedicatedCloudNodeProperties;

