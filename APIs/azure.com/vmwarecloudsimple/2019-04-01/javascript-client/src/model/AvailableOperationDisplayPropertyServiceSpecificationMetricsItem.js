/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AvailableOperationDisplayPropertyServiceSpecificationMetricsItem model module.
 * @module model/AvailableOperationDisplayPropertyServiceSpecificationMetricsItem
 * @version 2019-04-01
 */
class AvailableOperationDisplayPropertyServiceSpecificationMetricsItem {
    /**
     * Constructs a new <code>AvailableOperationDisplayPropertyServiceSpecificationMetricsItem</code>.
     * Available operation display property service specification metrics item
     * @alias module:model/AvailableOperationDisplayPropertyServiceSpecificationMetricsItem
     * @param aggregationType {module:model/AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.AggregationTypeEnum} Metric's aggregation type for e.g. (Average, Total)
     * @param displayDescription {String} Metric's description
     * @param displayName {String} Human readable metric's name
     * @param name {String} Metric's name/id
     * @param unit {String} Metric's unit
     */
    constructor(aggregationType, displayDescription, displayName, name, unit) { 
        
        AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.initialize(this, aggregationType, displayDescription, displayName, name, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aggregationType, displayDescription, displayName, name, unit) { 
        obj['aggregationType'] = aggregationType;
        obj['displayDescription'] = displayDescription;
        obj['displayName'] = displayName;
        obj['name'] = name;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>AvailableOperationDisplayPropertyServiceSpecificationMetricsItem</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AvailableOperationDisplayPropertyServiceSpecificationMetricsItem} obj Optional instance to populate.
     * @return {module:model/AvailableOperationDisplayPropertyServiceSpecificationMetricsItem} The populated <code>AvailableOperationDisplayPropertyServiceSpecificationMetricsItem</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AvailableOperationDisplayPropertyServiceSpecificationMetricsItem();

            if (data.hasOwnProperty('aggregationType')) {
                obj['aggregationType'] = ApiClient.convertToType(data['aggregationType'], 'String');
            }
            if (data.hasOwnProperty('displayDescription')) {
                obj['displayDescription'] = ApiClient.convertToType(data['displayDescription'], 'String');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AvailableOperationDisplayPropertyServiceSpecificationMetricsItem</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AvailableOperationDisplayPropertyServiceSpecificationMetricsItem</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aggregationType'] && !(typeof data['aggregationType'] === 'string' || data['aggregationType'] instanceof String)) {
            throw new Error("Expected the field `aggregationType` to be a primitive type in the JSON string but got " + data['aggregationType']);
        }
        // ensure the json data is a string
        if (data['displayDescription'] && !(typeof data['displayDescription'] === 'string' || data['displayDescription'] instanceof String)) {
            throw new Error("Expected the field `displayDescription` to be a primitive type in the JSON string but got " + data['displayDescription']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.RequiredProperties = ["aggregationType", "displayDescription", "displayName", "name", "unit"];

/**
 * Metric's aggregation type for e.g. (Average, Total)
 * @member {module:model/AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.AggregationTypeEnum} aggregationType
 */
AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.prototype['aggregationType'] = undefined;

/**
 * Metric's description
 * @member {String} displayDescription
 */
AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.prototype['displayDescription'] = undefined;

/**
 * Human readable metric's name
 * @member {String} displayName
 */
AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.prototype['displayName'] = undefined;

/**
 * Metric's name/id
 * @member {String} name
 */
AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.prototype['name'] = undefined;

/**
 * Metric's unit
 * @member {String} unit
 */
AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.prototype['unit'] = undefined;





/**
 * Allowed values for the <code>aggregationType</code> property.
 * @enum {String}
 * @readonly
 */
AvailableOperationDisplayPropertyServiceSpecificationMetricsItem['AggregationTypeEnum'] = {

    /**
     * value: "Average"
     * @const
     */
    "Average": "Average",

    /**
     * value: "Total"
     * @const
     */
    "Total": "Total"
};



export default AvailableOperationDisplayPropertyServiceSpecificationMetricsItem;

