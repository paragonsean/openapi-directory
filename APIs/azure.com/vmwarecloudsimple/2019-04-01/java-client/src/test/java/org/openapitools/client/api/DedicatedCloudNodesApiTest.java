/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CSRPError;
import org.openapitools.client.model.DedicatedCloudNode;
import org.openapitools.client.model.DedicatedCloudNodeListResponse;
import org.openapitools.client.model.PatchPayload;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DedicatedCloudNodesApi
 */
@Disabled
public class DedicatedCloudNodesApiTest {

    private final DedicatedCloudNodesApi api = new DedicatedCloudNodesApi();

    /**
     * Implements dedicated cloud node PUT method
     *
     * Returns dedicated cloud node by its name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dedicatedCloudNodesCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String referer = null;
        String dedicatedCloudNodeName = null;
        String apiVersion = null;
        DedicatedCloudNode dedicatedCloudNodeRequest = null;
        DedicatedCloudNode response = api.dedicatedCloudNodesCreateOrUpdate(subscriptionId, resourceGroupName, referer, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest);
        // TODO: test validations
    }

    /**
     * Implements dedicated cloud node DELETE method
     *
     * Delete dedicated cloud node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dedicatedCloudNodesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String dedicatedCloudNodeName = null;
        String apiVersion = null;
        api.dedicatedCloudNodesDelete(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Implements dedicated cloud node GET method
     *
     * Returns dedicated cloud node
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dedicatedCloudNodesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String dedicatedCloudNodeName = null;
        String apiVersion = null;
        DedicatedCloudNode response = api.dedicatedCloudNodesGet(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion);
        // TODO: test validations
    }

    /**
     * Implements list of dedicated cloud nodes within RG method
     *
     * Returns list of dedicate cloud nodes within resource group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dedicatedCloudNodesListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $skipToken = null;
        DedicatedCloudNodeListResponse response = api.dedicatedCloudNodesListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken);
        // TODO: test validations
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method
     *
     * Returns list of dedicate cloud nodes within subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dedicatedCloudNodesListBySubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $skipToken = null;
        DedicatedCloudNodeListResponse response = api.dedicatedCloudNodesListBySubscription(subscriptionId, apiVersion, $filter, $top, $skipToken);
        // TODO: test validations
    }

    /**
     * Implements dedicated cloud node PATCH method
     *
     * Patches dedicated node properties
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void dedicatedCloudNodesUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String dedicatedCloudNodeName = null;
        String apiVersion = null;
        PatchPayload dedicatedCloudNodeRequest = null;
        DedicatedCloudNode response = api.dedicatedCloudNodesUpdate(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest);
        // TODO: test validations
    }

}
