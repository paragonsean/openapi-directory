/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CSRPError;
import org.openapitools.client.model.PatchPayload;
import org.openapitools.client.model.VirtualMachine;
import org.openapitools.client.model.VirtualMachineListResponse;
import org.openapitools.client.model.VirtualMachineStopMode;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VirtualMachinesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VirtualMachinesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VirtualMachinesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for virtualMachinesCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Create or Update Virtual Machine request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 201 </td><td> If resource is created or updated successfully, 201 should be returned. provisionedState would of VirtualMachineProperties object would reflect the state of the resource </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, VirtualMachine virtualMachineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = virtualMachineRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualMachineName" + "}", localVarApiClient.escapeString(virtualMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, VirtualMachine virtualMachineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling virtualMachinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualMachineName' is set
        if (virtualMachineName == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineName' when calling virtualMachinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'virtualMachineRequest' is set
        if (virtualMachineRequest == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineRequest' when calling virtualMachinesCreateOrUpdate(Async)");
        }

        return virtualMachinesCreateOrUpdateCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, virtualMachineRequest, _callback);

    }

    /**
     * Implements virtual machine PUT method
     * Create Or Update Virtual Machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Create or Update Virtual Machine request (required)
     * @return VirtualMachine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 201 </td><td> If resource is created or updated successfully, 201 should be returned. provisionedState would of VirtualMachineProperties object would reflect the state of the resource </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachine virtualMachinesCreateOrUpdate(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, VirtualMachine virtualMachineRequest) throws ApiException {
        ApiResponse<VirtualMachine> localVarResp = virtualMachinesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, virtualMachineRequest);
        return localVarResp.getData();
    }

    /**
     * Implements virtual machine PUT method
     * Create Or Update Virtual Machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Create or Update Virtual Machine request (required)
     * @return ApiResponse&lt;VirtualMachine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 201 </td><td> If resource is created or updated successfully, 201 should be returned. provisionedState would of VirtualMachineProperties object would reflect the state of the resource </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachine> virtualMachinesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, VirtualMachine virtualMachineRequest) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, virtualMachineRequest, null);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements virtual machine PUT method (asynchronously)
     * Create Or Update Virtual Machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Create or Update Virtual Machine request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 201 </td><td> If resource is created or updated successfully, 201 should be returned. provisionedState would of VirtualMachineProperties object would reflect the state of the resource </td><td>  * Azure-AsyncOperation -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, VirtualMachine virtualMachineRequest, final ApiCallback<VirtualMachine> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, virtualMachineRequest, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesDeleteCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualMachineName" + "}", localVarApiClient.escapeString(virtualMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesDelete(Async)");
        }

        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling virtualMachinesDelete(Async)");
        }

        // verify the required parameter 'virtualMachineName' is set
        if (virtualMachineName == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineName' when calling virtualMachinesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesDelete(Async)");
        }

        return virtualMachinesDeleteCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, _callback);

    }

    /**
     * Implements virtual machine DELETE method
     * Delete virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public void virtualMachinesDelete(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion) throws ApiException {
        virtualMachinesDeleteWithHttpInfo(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion);
    }

    /**
     * Implements virtual machine DELETE method
     * Delete virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualMachinesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Implements virtual machine DELETE method (asynchronously)
     * Delete virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesDeleteAsync(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesGetCall(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualMachineName" + "}", localVarApiClient.escapeString(virtualMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesGet(Async)");
        }

        // verify the required parameter 'virtualMachineName' is set
        if (virtualMachineName == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineName' when calling virtualMachinesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesGet(Async)");
        }

        return virtualMachinesGetCall(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, _callback);

    }

    /**
     * Implements virtual machine GET method
     * Get virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @return VirtualMachine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachine virtualMachinesGet(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion) throws ApiException {
        ApiResponse<VirtualMachine> localVarResp = virtualMachinesGetWithHttpInfo(subscriptionId, resourceGroupName, virtualMachineName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Implements virtual machine GET method
     * Get virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;VirtualMachine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachine> virtualMachinesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, null);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements virtual machine GET method (asynchronously)
     * Get virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesGetAsync(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, final ApiCallback<VirtualMachine> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesGetValidateBeforeCall(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesListByResourceGroup
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesListByResourceGroup(Async)");
        }

        return virtualMachinesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * Implements list virtual machine within RG method
     * Returns list of virtual machine within resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return VirtualMachineListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachineListResponse virtualMachinesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<VirtualMachineListResponse> localVarResp = virtualMachinesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Implements list virtual machine within RG method
     * Returns list of virtual machine within resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return ApiResponse&lt;VirtualMachineListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachineListResponse> virtualMachinesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<VirtualMachineListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements list virtual machine within RG method (asynchronously)
     * Returns list of virtual machine within resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<VirtualMachineListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesListBySubscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesListBySubscriptionCall(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/virtualMachines"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesListBySubscription(Async)");
        }

        return virtualMachinesListBySubscriptionCall(subscriptionId, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * Implements list virtual machine within subscription method
     * Returns list virtual machine within subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return VirtualMachineListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachineListResponse virtualMachinesListBySubscription(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<VirtualMachineListResponse> localVarResp = virtualMachinesListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Implements list virtual machine within subscription method
     * Returns list virtual machine within subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return ApiResponse&lt;VirtualMachineListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachineListResponse> virtualMachinesListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<VirtualMachineListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements list virtual machine within subscription method (asynchronously)
     * Returns list virtual machine within subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesListBySubscriptionAsync(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<VirtualMachineListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachineListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesStart
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesStartCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/start"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualMachineName" + "}", localVarApiClient.escapeString(virtualMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesStartValidateBeforeCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesStart(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesStart(Async)");
        }

        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling virtualMachinesStart(Async)");
        }

        // verify the required parameter 'virtualMachineName' is set
        if (virtualMachineName == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineName' when calling virtualMachinesStart(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesStart(Async)");
        }

        return virtualMachinesStartCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, _callback);

    }

    /**
     * Implements a start method for a virtual machine
     * Power on virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public void virtualMachinesStart(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion) throws ApiException {
        virtualMachinesStartWithHttpInfo(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion);
    }

    /**
     * Implements a start method for a virtual machine
     * Power on virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualMachinesStartWithHttpInfo(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesStartValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Implements a start method for a virtual machine (asynchronously)
     * Power on virtual machine
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesStartAsync(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesStartValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesStop
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param mode query stop mode parameter (reboot, shutdown, etc...) (optional)
     * @param m body stop mode parameter (reboot, shutdown, etc...) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesStopCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, String mode, VirtualMachineStopMode m, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = m;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}/stop"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualMachineName" + "}", localVarApiClient.escapeString(virtualMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mode", mode));
        }

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesStopValidateBeforeCall(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, String mode, VirtualMachineStopMode m, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesStop(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesStop(Async)");
        }

        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling virtualMachinesStop(Async)");
        }

        // verify the required parameter 'virtualMachineName' is set
        if (virtualMachineName == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineName' when calling virtualMachinesStop(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesStop(Async)");
        }

        return virtualMachinesStopCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, mode, m, _callback);

    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine
     * Power off virtual machine, options: shutdown, poweroff, and suspend
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param mode query stop mode parameter (reboot, shutdown, etc...) (optional)
     * @param m body stop mode parameter (reboot, shutdown, etc...) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public void virtualMachinesStop(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, String mode, VirtualMachineStopMode m) throws ApiException {
        virtualMachinesStopWithHttpInfo(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, mode, m);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine
     * Power off virtual machine, options: shutdown, poweroff, and suspend
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param mode query stop mode parameter (reboot, shutdown, etc...) (optional)
     * @param m body stop mode parameter (reboot, shutdown, etc...) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> virtualMachinesStopWithHttpInfo(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, String mode, VirtualMachineStopMode m) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesStopValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, mode, m, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Implements shutdown, poweroff, and suspend method for a virtual machine (asynchronously)
     * Power off virtual machine, options: shutdown, poweroff, and suspend
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param mode query stop mode parameter (reboot, shutdown, etc...) (optional)
     * @param m body stop mode parameter (reboot, shutdown, etc...) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted. the operation will complete asynchronously </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesStopAsync(String subscriptionId, String resourceGroupName, String referer, String virtualMachineName, String apiVersion, String mode, VirtualMachineStopMode m, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesStopValidateBeforeCall(subscriptionId, resourceGroupName, referer, virtualMachineName, apiVersion, mode, m, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for virtualMachinesUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Patch virtual machine request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesUpdateCall(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, PatchPayload virtualMachineRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = virtualMachineRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/virtualMachines/{virtualMachineName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "virtualMachineName" + "}", localVarApiClient.escapeString(virtualMachineName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call virtualMachinesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, PatchPayload virtualMachineRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling virtualMachinesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling virtualMachinesUpdate(Async)");
        }

        // verify the required parameter 'virtualMachineName' is set
        if (virtualMachineName == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineName' when calling virtualMachinesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling virtualMachinesUpdate(Async)");
        }

        // verify the required parameter 'virtualMachineRequest' is set
        if (virtualMachineRequest == null) {
            throw new ApiException("Missing the required parameter 'virtualMachineRequest' when calling virtualMachinesUpdate(Async)");
        }

        return virtualMachinesUpdateCall(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, virtualMachineRequest, _callback);

    }

    /**
     * Implements virtual machine PATCH method
     * Patch virtual machine properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Patch virtual machine request (required)
     * @return VirtualMachine
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public VirtualMachine virtualMachinesUpdate(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, PatchPayload virtualMachineRequest) throws ApiException {
        ApiResponse<VirtualMachine> localVarResp = virtualMachinesUpdateWithHttpInfo(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, virtualMachineRequest);
        return localVarResp.getData();
    }

    /**
     * Implements virtual machine PATCH method
     * Patch virtual machine properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Patch virtual machine request (required)
     * @return ApiResponse&lt;VirtualMachine&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VirtualMachine> virtualMachinesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, PatchPayload virtualMachineRequest) throws ApiException {
        okhttp3.Call localVarCall = virtualMachinesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, virtualMachineRequest, null);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements virtual machine PATCH method (asynchronously)
     * Patch virtual machine properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param virtualMachineName virtual machine name (required)
     * @param apiVersion Client API version. (required)
     * @param virtualMachineRequest Patch virtual machine request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call virtualMachinesUpdateAsync(String subscriptionId, String resourceGroupName, String virtualMachineName, String apiVersion, PatchPayload virtualMachineRequest, final ApiCallback<VirtualMachine> _callback) throws ApiException {

        okhttp3.Call localVarCall = virtualMachinesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, virtualMachineName, apiVersion, virtualMachineRequest, _callback);
        Type localVarReturnType = new TypeToken<VirtualMachine>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
