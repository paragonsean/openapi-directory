/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomizationIPAddress;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CustomizationIPSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CustomizationIPSettings {
  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private List<String> gateway = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP = "ip";
  @SerializedName(SERIALIZED_NAME_IP)
  private CustomizationIPAddress ip;

  public static final String SERIALIZED_NAME_SUBNET_MASK = "subnetMask";
  @SerializedName(SERIALIZED_NAME_SUBNET_MASK)
  private String subnetMask;

  public CustomizationIPSettings() {
  }

  public CustomizationIPSettings gateway(List<String> gateway) {
    this.gateway = gateway;
    return this;
  }

  public CustomizationIPSettings addGatewayItem(String gatewayItem) {
    if (this.gateway == null) {
      this.gateway = new ArrayList<>();
    }
    this.gateway.add(gatewayItem);
    return this;
  }

  /**
   * The list of gateways
   * @return gateway
   */
  @javax.annotation.Nullable
  public List<String> getGateway() {
    return gateway;
  }

  public void setGateway(List<String> gateway) {
    this.gateway = gateway;
  }


  public CustomizationIPSettings ip(CustomizationIPAddress ip) {
    this.ip = ip;
    return this;
  }

  /**
   * Get ip
   * @return ip
   */
  @javax.annotation.Nullable
  public CustomizationIPAddress getIp() {
    return ip;
  }

  public void setIp(CustomizationIPAddress ip) {
    this.ip = ip;
  }


  public CustomizationIPSettings subnetMask(String subnetMask) {
    this.subnetMask = subnetMask;
    return this;
  }

  /**
   * Adapter subnet mask
   * @return subnetMask
   */
  @javax.annotation.Nullable
  public String getSubnetMask() {
    return subnetMask;
  }

  public void setSubnetMask(String subnetMask) {
    this.subnetMask = subnetMask;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CustomizationIPSettings customizationIPSettings = (CustomizationIPSettings) o;
    return Objects.equals(this.gateway, customizationIPSettings.gateway) &&
        Objects.equals(this.ip, customizationIPSettings.ip) &&
        Objects.equals(this.subnetMask, customizationIPSettings.subnetMask);
  }

  @Override
  public int hashCode() {
    return Objects.hash(gateway, ip, subnetMask);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CustomizationIPSettings {\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    ip: ").append(toIndentedString(ip)).append("\n");
    sb.append("    subnetMask: ").append(toIndentedString(subnetMask)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("gateway");
    openapiFields.add("ip");
    openapiFields.add("subnetMask");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CustomizationIPSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CustomizationIPSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CustomizationIPSettings is not found in the empty JSON string", CustomizationIPSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CustomizationIPSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CustomizationIPSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull() && !jsonObj.get("gateway").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway` to be an array in the JSON string but got `%s`", jsonObj.get("gateway").toString()));
      }
      // validate the optional field `ip`
      if (jsonObj.get("ip") != null && !jsonObj.get("ip").isJsonNull()) {
        CustomizationIPAddress.validateJsonElement(jsonObj.get("ip"));
      }
      if ((jsonObj.get("subnetMask") != null && !jsonObj.get("subnetMask").isJsonNull()) && !jsonObj.get("subnetMask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subnetMask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subnetMask").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CustomizationIPSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CustomizationIPSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CustomizationIPSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CustomizationIPSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<CustomizationIPSettings>() {
           @Override
           public void write(JsonWriter out, CustomizationIPSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CustomizationIPSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CustomizationIPSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CustomizationIPSettings
   * @throws IOException if the JSON string is invalid with respect to CustomizationIPSettings
   */
  public static CustomizationIPSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CustomizationIPSettings.class);
  }

  /**
   * Convert an instance of CustomizationIPSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

