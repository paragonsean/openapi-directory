/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VirtualDisk;
import org.openapitools.client.model.VirtualDiskController;
import org.openapitools.client.model.VirtualNic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of virtual machine template
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineTemplateProperties {
  public static final String SERIALIZED_NAME_AMOUNT_OF_RAM = "amountOfRam";
  @SerializedName(SERIALIZED_NAME_AMOUNT_OF_RAM)
  private Integer amountOfRam;

  public static final String SERIALIZED_NAME_CONTROLLERS = "controllers";
  @SerializedName(SERIALIZED_NAME_CONTROLLERS)
  private List<VirtualDiskController> controllers = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private List<VirtualDisk> disks = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPOSE_TO_GUEST_V_M = "exposeToGuestVM";
  @SerializedName(SERIALIZED_NAME_EXPOSE_TO_GUEST_V_M)
  private Boolean exposeToGuestVM;

  public static final String SERIALIZED_NAME_GUEST_O_S = "guestOS";
  @SerializedName(SERIALIZED_NAME_GUEST_O_S)
  private String guestOS;

  public static final String SERIALIZED_NAME_GUEST_O_S_TYPE = "guestOSType";
  @SerializedName(SERIALIZED_NAME_GUEST_O_S_TYPE)
  private String guestOSType;

  public static final String SERIALIZED_NAME_NICS = "nics";
  @SerializedName(SERIALIZED_NAME_NICS)
  private List<VirtualNic> nics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_CORES = "numberOfCores";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORES)
  private Integer numberOfCores;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_PRIVATE_CLOUD_ID = "privateCloudId";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CLOUD_ID)
  private String privateCloudId;

  public static final String SERIALIZED_NAME_V_SPHERE_NETWORKS = "vSphereNetworks";
  @SerializedName(SERIALIZED_NAME_V_SPHERE_NETWORKS)
  private List<String> vSphereNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_V_SPHERE_TAGS = "vSphereTags";
  @SerializedName(SERIALIZED_NAME_V_SPHERE_TAGS)
  private List<String> vSphereTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_VMWARETOOLS = "vmwaretools";
  @SerializedName(SERIALIZED_NAME_VMWARETOOLS)
  private String vmwaretools;

  public VirtualMachineTemplateProperties() {
  }

  public VirtualMachineTemplateProperties(
     String guestOS, 
     String guestOSType, 
     String vmwaretools
  ) {
    this();
    this.guestOS = guestOS;
    this.guestOSType = guestOSType;
    this.vmwaretools = vmwaretools;
  }

  public VirtualMachineTemplateProperties amountOfRam(Integer amountOfRam) {
    this.amountOfRam = amountOfRam;
    return this;
  }

  /**
   * The amount of memory
   * @return amountOfRam
   */
  @javax.annotation.Nullable
  public Integer getAmountOfRam() {
    return amountOfRam;
  }

  public void setAmountOfRam(Integer amountOfRam) {
    this.amountOfRam = amountOfRam;
  }


  public VirtualMachineTemplateProperties controllers(List<VirtualDiskController> controllers) {
    this.controllers = controllers;
    return this;
  }

  public VirtualMachineTemplateProperties addControllersItem(VirtualDiskController controllersItem) {
    if (this.controllers == null) {
      this.controllers = new ArrayList<>();
    }
    this.controllers.add(controllersItem);
    return this;
  }

  /**
   * The list of Virtual Disk Controllers
   * @return controllers
   */
  @javax.annotation.Nullable
  public List<VirtualDiskController> getControllers() {
    return controllers;
  }

  public void setControllers(List<VirtualDiskController> controllers) {
    this.controllers = controllers;
  }


  public VirtualMachineTemplateProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The description of Virtual Machine Template
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public VirtualMachineTemplateProperties disks(List<VirtualDisk> disks) {
    this.disks = disks;
    return this;
  }

  public VirtualMachineTemplateProperties addDisksItem(VirtualDisk disksItem) {
    if (this.disks == null) {
      this.disks = new ArrayList<>();
    }
    this.disks.add(disksItem);
    return this;
  }

  /**
   * The list of Virtual Disks
   * @return disks
   */
  @javax.annotation.Nullable
  public List<VirtualDisk> getDisks() {
    return disks;
  }

  public void setDisks(List<VirtualDisk> disks) {
    this.disks = disks;
  }


  public VirtualMachineTemplateProperties exposeToGuestVM(Boolean exposeToGuestVM) {
    this.exposeToGuestVM = exposeToGuestVM;
    return this;
  }

  /**
   * Expose Guest OS or not
   * @return exposeToGuestVM
   */
  @javax.annotation.Nullable
  public Boolean getExposeToGuestVM() {
    return exposeToGuestVM;
  }

  public void setExposeToGuestVM(Boolean exposeToGuestVM) {
    this.exposeToGuestVM = exposeToGuestVM;
  }


  /**
   * The Guest OS
   * @return guestOS
   */
  @javax.annotation.Nullable
  public String getGuestOS() {
    return guestOS;
  }



  /**
   * The Guest OS types
   * @return guestOSType
   */
  @javax.annotation.Nullable
  public String getGuestOSType() {
    return guestOSType;
  }



  public VirtualMachineTemplateProperties nics(List<VirtualNic> nics) {
    this.nics = nics;
    return this;
  }

  public VirtualMachineTemplateProperties addNicsItem(VirtualNic nicsItem) {
    if (this.nics == null) {
      this.nics = new ArrayList<>();
    }
    this.nics.add(nicsItem);
    return this;
  }

  /**
   * The list of Virtual NICs
   * @return nics
   */
  @javax.annotation.Nullable
  public List<VirtualNic> getNics() {
    return nics;
  }

  public void setNics(List<VirtualNic> nics) {
    this.nics = nics;
  }


  public VirtualMachineTemplateProperties numberOfCores(Integer numberOfCores) {
    this.numberOfCores = numberOfCores;
    return this;
  }

  /**
   * The number of CPU cores
   * @return numberOfCores
   */
  @javax.annotation.Nullable
  public Integer getNumberOfCores() {
    return numberOfCores;
  }

  public void setNumberOfCores(Integer numberOfCores) {
    this.numberOfCores = numberOfCores;
  }


  public VirtualMachineTemplateProperties path(String path) {
    this.path = path;
    return this;
  }

  /**
   * path to folder
   * @return path
   */
  @javax.annotation.Nullable
  public String getPath() {
    return path;
  }

  public void setPath(String path) {
    this.path = path;
  }


  public VirtualMachineTemplateProperties privateCloudId(String privateCloudId) {
    this.privateCloudId = privateCloudId;
    return this;
  }

  /**
   * The Private Cloud Id
   * @return privateCloudId
   */
  @javax.annotation.Nonnull
  public String getPrivateCloudId() {
    return privateCloudId;
  }

  public void setPrivateCloudId(String privateCloudId) {
    this.privateCloudId = privateCloudId;
  }


  public VirtualMachineTemplateProperties vSphereNetworks(List<String> vSphereNetworks) {
    this.vSphereNetworks = vSphereNetworks;
    return this;
  }

  public VirtualMachineTemplateProperties addVSphereNetworksItem(String vSphereNetworksItem) {
    if (this.vSphereNetworks == null) {
      this.vSphereNetworks = new ArrayList<>();
    }
    this.vSphereNetworks.add(vSphereNetworksItem);
    return this;
  }

  /**
   * The list of VSphere networks
   * @return vSphereNetworks
   */
  @javax.annotation.Nullable
  public List<String> getvSphereNetworks() {
    return vSphereNetworks;
  }

  public void setvSphereNetworks(List<String> vSphereNetworks) {
    this.vSphereNetworks = vSphereNetworks;
  }


  public VirtualMachineTemplateProperties vSphereTags(List<String> vSphereTags) {
    this.vSphereTags = vSphereTags;
    return this;
  }

  public VirtualMachineTemplateProperties addVSphereTagsItem(String vSphereTagsItem) {
    if (this.vSphereTags == null) {
      this.vSphereTags = new ArrayList<>();
    }
    this.vSphereTags.add(vSphereTagsItem);
    return this;
  }

  /**
   * The tags from VSphere
   * @return vSphereTags
   */
  @javax.annotation.Nullable
  public List<String> getvSphereTags() {
    return vSphereTags;
  }

  public void setvSphereTags(List<String> vSphereTags) {
    this.vSphereTags = vSphereTags;
  }


  /**
   * The VMware tools version
   * @return vmwaretools
   */
  @javax.annotation.Nullable
  public String getVmwaretools() {
    return vmwaretools;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineTemplateProperties virtualMachineTemplateProperties = (VirtualMachineTemplateProperties) o;
    return Objects.equals(this.amountOfRam, virtualMachineTemplateProperties.amountOfRam) &&
        Objects.equals(this.controllers, virtualMachineTemplateProperties.controllers) &&
        Objects.equals(this.description, virtualMachineTemplateProperties.description) &&
        Objects.equals(this.disks, virtualMachineTemplateProperties.disks) &&
        Objects.equals(this.exposeToGuestVM, virtualMachineTemplateProperties.exposeToGuestVM) &&
        Objects.equals(this.guestOS, virtualMachineTemplateProperties.guestOS) &&
        Objects.equals(this.guestOSType, virtualMachineTemplateProperties.guestOSType) &&
        Objects.equals(this.nics, virtualMachineTemplateProperties.nics) &&
        Objects.equals(this.numberOfCores, virtualMachineTemplateProperties.numberOfCores) &&
        Objects.equals(this.path, virtualMachineTemplateProperties.path) &&
        Objects.equals(this.privateCloudId, virtualMachineTemplateProperties.privateCloudId) &&
        Objects.equals(this.vSphereNetworks, virtualMachineTemplateProperties.vSphereNetworks) &&
        Objects.equals(this.vSphereTags, virtualMachineTemplateProperties.vSphereTags) &&
        Objects.equals(this.vmwaretools, virtualMachineTemplateProperties.vmwaretools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountOfRam, controllers, description, disks, exposeToGuestVM, guestOS, guestOSType, nics, numberOfCores, path, privateCloudId, vSphereNetworks, vSphereTags, vmwaretools);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineTemplateProperties {\n");
    sb.append("    amountOfRam: ").append(toIndentedString(amountOfRam)).append("\n");
    sb.append("    controllers: ").append(toIndentedString(controllers)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    exposeToGuestVM: ").append(toIndentedString(exposeToGuestVM)).append("\n");
    sb.append("    guestOS: ").append(toIndentedString(guestOS)).append("\n");
    sb.append("    guestOSType: ").append(toIndentedString(guestOSType)).append("\n");
    sb.append("    nics: ").append(toIndentedString(nics)).append("\n");
    sb.append("    numberOfCores: ").append(toIndentedString(numberOfCores)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    privateCloudId: ").append(toIndentedString(privateCloudId)).append("\n");
    sb.append("    vSphereNetworks: ").append(toIndentedString(vSphereNetworks)).append("\n");
    sb.append("    vSphereTags: ").append(toIndentedString(vSphereTags)).append("\n");
    sb.append("    vmwaretools: ").append(toIndentedString(vmwaretools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountOfRam");
    openapiFields.add("controllers");
    openapiFields.add("description");
    openapiFields.add("disks");
    openapiFields.add("exposeToGuestVM");
    openapiFields.add("guestOS");
    openapiFields.add("guestOSType");
    openapiFields.add("nics");
    openapiFields.add("numberOfCores");
    openapiFields.add("path");
    openapiFields.add("privateCloudId");
    openapiFields.add("vSphereNetworks");
    openapiFields.add("vSphereTags");
    openapiFields.add("vmwaretools");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("privateCloudId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineTemplateProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineTemplateProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineTemplateProperties is not found in the empty JSON string", VirtualMachineTemplateProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineTemplateProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineTemplateProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualMachineTemplateProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("controllers") != null && !jsonObj.get("controllers").isJsonNull()) {
        JsonArray jsonArraycontrollers = jsonObj.getAsJsonArray("controllers");
        if (jsonArraycontrollers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("controllers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `controllers` to be an array in the JSON string but got `%s`", jsonObj.get("controllers").toString()));
          }

          // validate the optional field `controllers` (array)
          for (int i = 0; i < jsonArraycontrollers.size(); i++) {
            VirtualDiskController.validateJsonElement(jsonArraycontrollers.get(i));
          };
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (jsonObj.get("disks") != null && !jsonObj.get("disks").isJsonNull()) {
        JsonArray jsonArraydisks = jsonObj.getAsJsonArray("disks");
        if (jsonArraydisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disks` to be an array in the JSON string but got `%s`", jsonObj.get("disks").toString()));
          }

          // validate the optional field `disks` (array)
          for (int i = 0; i < jsonArraydisks.size(); i++) {
            VirtualDisk.validateJsonElement(jsonArraydisks.get(i));
          };
        }
      }
      if ((jsonObj.get("guestOS") != null && !jsonObj.get("guestOS").isJsonNull()) && !jsonObj.get("guestOS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestOS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestOS").toString()));
      }
      if ((jsonObj.get("guestOSType") != null && !jsonObj.get("guestOSType").isJsonNull()) && !jsonObj.get("guestOSType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestOSType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestOSType").toString()));
      }
      if (jsonObj.get("nics") != null && !jsonObj.get("nics").isJsonNull()) {
        JsonArray jsonArraynics = jsonObj.getAsJsonArray("nics");
        if (jsonArraynics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nics` to be an array in the JSON string but got `%s`", jsonObj.get("nics").toString()));
          }

          // validate the optional field `nics` (array)
          for (int i = 0; i < jsonArraynics.size(); i++) {
            VirtualNic.validateJsonElement(jsonArraynics.get(i));
          };
        }
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      if (!jsonObj.get("privateCloudId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCloudId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCloudId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vSphereNetworks") != null && !jsonObj.get("vSphereNetworks").isJsonNull() && !jsonObj.get("vSphereNetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vSphereNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("vSphereNetworks").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vSphereTags") != null && !jsonObj.get("vSphereTags").isJsonNull() && !jsonObj.get("vSphereTags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vSphereTags` to be an array in the JSON string but got `%s`", jsonObj.get("vSphereTags").toString()));
      }
      if ((jsonObj.get("vmwaretools") != null && !jsonObj.get("vmwaretools").isJsonNull()) && !jsonObj.get("vmwaretools").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwaretools` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwaretools").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineTemplateProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineTemplateProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineTemplateProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineTemplateProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineTemplateProperties>() {
           @Override
           public void write(JsonWriter out, VirtualMachineTemplateProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineTemplateProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineTemplateProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineTemplateProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineTemplateProperties
   */
  public static VirtualMachineTemplateProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineTemplateProperties.class);
  }

  /**
   * Convert an instance of VirtualMachineTemplateProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

