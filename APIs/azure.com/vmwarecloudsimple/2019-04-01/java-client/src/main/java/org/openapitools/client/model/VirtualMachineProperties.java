/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GuestOSCustomization;
import org.openapitools.client.model.ResourcePool;
import org.openapitools.client.model.VirtualDisk;
import org.openapitools.client.model.VirtualDiskController;
import org.openapitools.client.model.VirtualNic;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of virtual machine
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualMachineProperties {
  public static final String SERIALIZED_NAME_AMOUNT_OF_RAM = "amountOfRam";
  @SerializedName(SERIALIZED_NAME_AMOUNT_OF_RAM)
  private Integer amountOfRam;

  public static final String SERIALIZED_NAME_CONTROLLERS = "controllers";
  @SerializedName(SERIALIZED_NAME_CONTROLLERS)
  private List<VirtualDiskController> controllers = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOMIZATION = "customization";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZATION)
  private GuestOSCustomization customization;

  public static final String SERIALIZED_NAME_DISKS = "disks";
  @SerializedName(SERIALIZED_NAME_DISKS)
  private List<VirtualDisk> disks = new ArrayList<>();

  public static final String SERIALIZED_NAME_DNSNAME = "dnsname";
  @SerializedName(SERIALIZED_NAME_DNSNAME)
  private String dnsname;

  public static final String SERIALIZED_NAME_EXPOSE_TO_GUEST_V_M = "exposeToGuestVM";
  @SerializedName(SERIALIZED_NAME_EXPOSE_TO_GUEST_V_M)
  private Boolean exposeToGuestVM;

  public static final String SERIALIZED_NAME_FOLDER = "folder";
  @SerializedName(SERIALIZED_NAME_FOLDER)
  private String folder;

  public static final String SERIALIZED_NAME_GUEST_O_S = "guestOS";
  @SerializedName(SERIALIZED_NAME_GUEST_O_S)
  private String guestOS;

  /**
   * The Guest OS type
   */
  @JsonAdapter(GuestOSTypeEnum.Adapter.class)
  public enum GuestOSTypeEnum {
    LINUX("linux"),
    
    WINDOWS("windows"),
    
    OTHER("other");

    private String value;

    GuestOSTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GuestOSTypeEnum fromValue(String value) {
      for (GuestOSTypeEnum b : GuestOSTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GuestOSTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GuestOSTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GuestOSTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GuestOSTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GuestOSTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GUEST_O_S_TYPE = "guestOSType";
  @SerializedName(SERIALIZED_NAME_GUEST_O_S_TYPE)
  private GuestOSTypeEnum guestOSType;

  public static final String SERIALIZED_NAME_NICS = "nics";
  @SerializedName(SERIALIZED_NAME_NICS)
  private List<VirtualNic> nics = new ArrayList<>();

  public static final String SERIALIZED_NAME_NUMBER_OF_CORES = "numberOfCores";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CORES)
  private Integer numberOfCores;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_PRIVATE_CLOUD_ID = "privateCloudId";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CLOUD_ID)
  private String privateCloudId;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PUBLIC_I_P = "publicIP";
  @SerializedName(SERIALIZED_NAME_PUBLIC_I_P)
  private String publicIP;

  public static final String SERIALIZED_NAME_RESOURCE_POOL = "resourcePool";
  @SerializedName(SERIALIZED_NAME_RESOURCE_POOL)
  private ResourcePool resourcePool;

  /**
   * The status of Virtual machine
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    RUNNING("running"),
    
    SUSPENDED("suspended"),
    
    POWEREDOFF("poweredoff"),
    
    UPDATING("updating"),
    
    DEALLOCATING("deallocating"),
    
    DELETING("deleting");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  private String templateId;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public static final String SERIALIZED_NAME_V_SPHERE_NETWORKS = "vSphereNetworks";
  @SerializedName(SERIALIZED_NAME_V_SPHERE_NETWORKS)
  private List<String> vSphereNetworks = new ArrayList<>();

  public static final String SERIALIZED_NAME_VM_ID = "vmId";
  @SerializedName(SERIALIZED_NAME_VM_ID)
  private String vmId;

  public static final String SERIALIZED_NAME_VMWARETOOLS = "vmwaretools";
  @SerializedName(SERIALIZED_NAME_VMWARETOOLS)
  private String vmwaretools;

  public VirtualMachineProperties() {
  }

  public VirtualMachineProperties(
     List<VirtualDiskController> controllers, 
     String dnsname, 
     String folder, 
     String guestOS, 
     GuestOSTypeEnum guestOSType, 
     String provisioningState, 
     String publicIP, 
     StatusEnum status, 
     String vmId, 
     String vmwaretools
  ) {
    this();
    this.controllers = controllers;
    this.dnsname = dnsname;
    this.folder = folder;
    this.guestOS = guestOS;
    this.guestOSType = guestOSType;
    this.provisioningState = provisioningState;
    this.publicIP = publicIP;
    this.status = status;
    this.vmId = vmId;
    this.vmwaretools = vmwaretools;
  }

  public VirtualMachineProperties amountOfRam(Integer amountOfRam) {
    this.amountOfRam = amountOfRam;
    return this;
  }

  /**
   * The amount of memory
   * @return amountOfRam
   */
  @javax.annotation.Nonnull
  public Integer getAmountOfRam() {
    return amountOfRam;
  }

  public void setAmountOfRam(Integer amountOfRam) {
    this.amountOfRam = amountOfRam;
  }


  /**
   * The list of Virtual Disks&#39; Controllers
   * @return controllers
   */
  @javax.annotation.Nullable
  public List<VirtualDiskController> getControllers() {
    return controllers;
  }



  public VirtualMachineProperties customization(GuestOSCustomization customization) {
    this.customization = customization;
    return this;
  }

  /**
   * Get customization
   * @return customization
   */
  @javax.annotation.Nullable
  public GuestOSCustomization getCustomization() {
    return customization;
  }

  public void setCustomization(GuestOSCustomization customization) {
    this.customization = customization;
  }


  public VirtualMachineProperties disks(List<VirtualDisk> disks) {
    this.disks = disks;
    return this;
  }

  public VirtualMachineProperties addDisksItem(VirtualDisk disksItem) {
    if (this.disks == null) {
      this.disks = new ArrayList<>();
    }
    this.disks.add(disksItem);
    return this;
  }

  /**
   * The list of Virtual Disks
   * @return disks
   */
  @javax.annotation.Nullable
  public List<VirtualDisk> getDisks() {
    return disks;
  }

  public void setDisks(List<VirtualDisk> disks) {
    this.disks = disks;
  }


  /**
   * The DNS name of Virtual Machine in VCenter
   * @return dnsname
   */
  @javax.annotation.Nullable
  public String getDnsname() {
    return dnsname;
  }



  public VirtualMachineProperties exposeToGuestVM(Boolean exposeToGuestVM) {
    this.exposeToGuestVM = exposeToGuestVM;
    return this;
  }

  /**
   * Expose Guest OS or not
   * @return exposeToGuestVM
   */
  @javax.annotation.Nullable
  public Boolean getExposeToGuestVM() {
    return exposeToGuestVM;
  }

  public void setExposeToGuestVM(Boolean exposeToGuestVM) {
    this.exposeToGuestVM = exposeToGuestVM;
  }


  /**
   * The path to virtual machine folder in VCenter
   * @return folder
   */
  @javax.annotation.Nullable
  public String getFolder() {
    return folder;
  }



  /**
   * The name of Guest OS
   * @return guestOS
   */
  @javax.annotation.Nullable
  public String getGuestOS() {
    return guestOS;
  }



  /**
   * The Guest OS type
   * @return guestOSType
   */
  @javax.annotation.Nullable
  public GuestOSTypeEnum getGuestOSType() {
    return guestOSType;
  }



  public VirtualMachineProperties nics(List<VirtualNic> nics) {
    this.nics = nics;
    return this;
  }

  public VirtualMachineProperties addNicsItem(VirtualNic nicsItem) {
    if (this.nics == null) {
      this.nics = new ArrayList<>();
    }
    this.nics.add(nicsItem);
    return this;
  }

  /**
   * The list of Virtual NICs
   * @return nics
   */
  @javax.annotation.Nullable
  public List<VirtualNic> getNics() {
    return nics;
  }

  public void setNics(List<VirtualNic> nics) {
    this.nics = nics;
  }


  public VirtualMachineProperties numberOfCores(Integer numberOfCores) {
    this.numberOfCores = numberOfCores;
    return this;
  }

  /**
   * The number of CPU cores
   * @return numberOfCores
   */
  @javax.annotation.Nonnull
  public Integer getNumberOfCores() {
    return numberOfCores;
  }

  public void setNumberOfCores(Integer numberOfCores) {
    this.numberOfCores = numberOfCores;
  }


  public VirtualMachineProperties password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Password for login. Deprecated - use customization property
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public VirtualMachineProperties privateCloudId(String privateCloudId) {
    this.privateCloudId = privateCloudId;
    return this;
  }

  /**
   * Private Cloud Id
   * @return privateCloudId
   */
  @javax.annotation.Nonnull
  public String getPrivateCloudId() {
    return privateCloudId;
  }

  public void setPrivateCloudId(String privateCloudId) {
    this.privateCloudId = privateCloudId;
  }


  /**
   * The provisioning status of the resource
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * The public ip of Virtual Machine
   * @return publicIP
   */
  @javax.annotation.Nullable
  public String getPublicIP() {
    return publicIP;
  }



  public VirtualMachineProperties resourcePool(ResourcePool resourcePool) {
    this.resourcePool = resourcePool;
    return this;
  }

  /**
   * Get resourcePool
   * @return resourcePool
   */
  @javax.annotation.Nullable
  public ResourcePool getResourcePool() {
    return resourcePool;
  }

  public void setResourcePool(ResourcePool resourcePool) {
    this.resourcePool = resourcePool;
  }


  /**
   * The status of Virtual machine
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  public VirtualMachineProperties templateId(String templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Virtual Machine Template Id
   * @return templateId
   */
  @javax.annotation.Nullable
  public String getTemplateId() {
    return templateId;
  }

  public void setTemplateId(String templateId) {
    this.templateId = templateId;
  }


  public VirtualMachineProperties username(String username) {
    this.username = username;
    return this;
  }

  /**
   * Username for login. Deprecated - use customization property
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }


  public VirtualMachineProperties vSphereNetworks(List<String> vSphereNetworks) {
    this.vSphereNetworks = vSphereNetworks;
    return this;
  }

  public VirtualMachineProperties addVSphereNetworksItem(String vSphereNetworksItem) {
    if (this.vSphereNetworks == null) {
      this.vSphereNetworks = new ArrayList<>();
    }
    this.vSphereNetworks.add(vSphereNetworksItem);
    return this;
  }

  /**
   * The list of Virtual VSphere Networks
   * @return vSphereNetworks
   */
  @javax.annotation.Nullable
  public List<String> getvSphereNetworks() {
    return vSphereNetworks;
  }

  public void setvSphereNetworks(List<String> vSphereNetworks) {
    this.vSphereNetworks = vSphereNetworks;
  }


  /**
   * The internal id of Virtual Machine in VCenter
   * @return vmId
   */
  @javax.annotation.Nullable
  public String getVmId() {
    return vmId;
  }



  /**
   * VMware tools version
   * @return vmwaretools
   */
  @javax.annotation.Nullable
  public String getVmwaretools() {
    return vmwaretools;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualMachineProperties virtualMachineProperties = (VirtualMachineProperties) o;
    return Objects.equals(this.amountOfRam, virtualMachineProperties.amountOfRam) &&
        Objects.equals(this.controllers, virtualMachineProperties.controllers) &&
        Objects.equals(this.customization, virtualMachineProperties.customization) &&
        Objects.equals(this.disks, virtualMachineProperties.disks) &&
        Objects.equals(this.dnsname, virtualMachineProperties.dnsname) &&
        Objects.equals(this.exposeToGuestVM, virtualMachineProperties.exposeToGuestVM) &&
        Objects.equals(this.folder, virtualMachineProperties.folder) &&
        Objects.equals(this.guestOS, virtualMachineProperties.guestOS) &&
        Objects.equals(this.guestOSType, virtualMachineProperties.guestOSType) &&
        Objects.equals(this.nics, virtualMachineProperties.nics) &&
        Objects.equals(this.numberOfCores, virtualMachineProperties.numberOfCores) &&
        Objects.equals(this.password, virtualMachineProperties.password) &&
        Objects.equals(this.privateCloudId, virtualMachineProperties.privateCloudId) &&
        Objects.equals(this.provisioningState, virtualMachineProperties.provisioningState) &&
        Objects.equals(this.publicIP, virtualMachineProperties.publicIP) &&
        Objects.equals(this.resourcePool, virtualMachineProperties.resourcePool) &&
        Objects.equals(this.status, virtualMachineProperties.status) &&
        Objects.equals(this.templateId, virtualMachineProperties.templateId) &&
        Objects.equals(this.username, virtualMachineProperties.username) &&
        Objects.equals(this.vSphereNetworks, virtualMachineProperties.vSphereNetworks) &&
        Objects.equals(this.vmId, virtualMachineProperties.vmId) &&
        Objects.equals(this.vmwaretools, virtualMachineProperties.vmwaretools);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amountOfRam, controllers, customization, disks, dnsname, exposeToGuestVM, folder, guestOS, guestOSType, nics, numberOfCores, password, privateCloudId, provisioningState, publicIP, resourcePool, status, templateId, username, vSphereNetworks, vmId, vmwaretools);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualMachineProperties {\n");
    sb.append("    amountOfRam: ").append(toIndentedString(amountOfRam)).append("\n");
    sb.append("    controllers: ").append(toIndentedString(controllers)).append("\n");
    sb.append("    customization: ").append(toIndentedString(customization)).append("\n");
    sb.append("    disks: ").append(toIndentedString(disks)).append("\n");
    sb.append("    dnsname: ").append(toIndentedString(dnsname)).append("\n");
    sb.append("    exposeToGuestVM: ").append(toIndentedString(exposeToGuestVM)).append("\n");
    sb.append("    folder: ").append(toIndentedString(folder)).append("\n");
    sb.append("    guestOS: ").append(toIndentedString(guestOS)).append("\n");
    sb.append("    guestOSType: ").append(toIndentedString(guestOSType)).append("\n");
    sb.append("    nics: ").append(toIndentedString(nics)).append("\n");
    sb.append("    numberOfCores: ").append(toIndentedString(numberOfCores)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    privateCloudId: ").append(toIndentedString(privateCloudId)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    publicIP: ").append(toIndentedString(publicIP)).append("\n");
    sb.append("    resourcePool: ").append(toIndentedString(resourcePool)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    vSphereNetworks: ").append(toIndentedString(vSphereNetworks)).append("\n");
    sb.append("    vmId: ").append(toIndentedString(vmId)).append("\n");
    sb.append("    vmwaretools: ").append(toIndentedString(vmwaretools)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amountOfRam");
    openapiFields.add("controllers");
    openapiFields.add("customization");
    openapiFields.add("disks");
    openapiFields.add("dnsname");
    openapiFields.add("exposeToGuestVM");
    openapiFields.add("folder");
    openapiFields.add("guestOS");
    openapiFields.add("guestOSType");
    openapiFields.add("nics");
    openapiFields.add("numberOfCores");
    openapiFields.add("password");
    openapiFields.add("privateCloudId");
    openapiFields.add("provisioningState");
    openapiFields.add("publicIP");
    openapiFields.add("resourcePool");
    openapiFields.add("status");
    openapiFields.add("templateId");
    openapiFields.add("username");
    openapiFields.add("vSphereNetworks");
    openapiFields.add("vmId");
    openapiFields.add("vmwaretools");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("amountOfRam");
    openapiRequiredFields.add("numberOfCores");
    openapiRequiredFields.add("privateCloudId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualMachineProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualMachineProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualMachineProperties is not found in the empty JSON string", VirtualMachineProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualMachineProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualMachineProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualMachineProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("controllers") != null && !jsonObj.get("controllers").isJsonNull()) {
        JsonArray jsonArraycontrollers = jsonObj.getAsJsonArray("controllers");
        if (jsonArraycontrollers != null) {
          // ensure the json data is an array
          if (!jsonObj.get("controllers").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `controllers` to be an array in the JSON string but got `%s`", jsonObj.get("controllers").toString()));
          }

          // validate the optional field `controllers` (array)
          for (int i = 0; i < jsonArraycontrollers.size(); i++) {
            VirtualDiskController.validateJsonElement(jsonArraycontrollers.get(i));
          };
        }
      }
      // validate the optional field `customization`
      if (jsonObj.get("customization") != null && !jsonObj.get("customization").isJsonNull()) {
        GuestOSCustomization.validateJsonElement(jsonObj.get("customization"));
      }
      if (jsonObj.get("disks") != null && !jsonObj.get("disks").isJsonNull()) {
        JsonArray jsonArraydisks = jsonObj.getAsJsonArray("disks");
        if (jsonArraydisks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("disks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `disks` to be an array in the JSON string but got `%s`", jsonObj.get("disks").toString()));
          }

          // validate the optional field `disks` (array)
          for (int i = 0; i < jsonArraydisks.size(); i++) {
            VirtualDisk.validateJsonElement(jsonArraydisks.get(i));
          };
        }
      }
      if ((jsonObj.get("dnsname") != null && !jsonObj.get("dnsname").isJsonNull()) && !jsonObj.get("dnsname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dnsname").toString()));
      }
      if ((jsonObj.get("folder") != null && !jsonObj.get("folder").isJsonNull()) && !jsonObj.get("folder").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `folder` to be a primitive type in the JSON string but got `%s`", jsonObj.get("folder").toString()));
      }
      if ((jsonObj.get("guestOS") != null && !jsonObj.get("guestOS").isJsonNull()) && !jsonObj.get("guestOS").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestOS` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestOS").toString()));
      }
      if ((jsonObj.get("guestOSType") != null && !jsonObj.get("guestOSType").isJsonNull()) && !jsonObj.get("guestOSType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `guestOSType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("guestOSType").toString()));
      }
      // validate the optional field `guestOSType`
      if (jsonObj.get("guestOSType") != null && !jsonObj.get("guestOSType").isJsonNull()) {
        GuestOSTypeEnum.validateJsonElement(jsonObj.get("guestOSType"));
      }
      if (jsonObj.get("nics") != null && !jsonObj.get("nics").isJsonNull()) {
        JsonArray jsonArraynics = jsonObj.getAsJsonArray("nics");
        if (jsonArraynics != null) {
          // ensure the json data is an array
          if (!jsonObj.get("nics").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `nics` to be an array in the JSON string but got `%s`", jsonObj.get("nics").toString()));
          }

          // validate the optional field `nics` (array)
          for (int i = 0; i < jsonArraynics.size(); i++) {
            VirtualNic.validateJsonElement(jsonArraynics.get(i));
          };
        }
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if (!jsonObj.get("privateCloudId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCloudId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCloudId").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("publicIP") != null && !jsonObj.get("publicIP").isJsonNull()) && !jsonObj.get("publicIP").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `publicIP` to be a primitive type in the JSON string but got `%s`", jsonObj.get("publicIP").toString()));
      }
      // validate the optional field `resourcePool`
      if (jsonObj.get("resourcePool") != null && !jsonObj.get("resourcePool").isJsonNull()) {
        ResourcePool.validateJsonElement(jsonObj.get("resourcePool"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("vSphereNetworks") != null && !jsonObj.get("vSphereNetworks").isJsonNull() && !jsonObj.get("vSphereNetworks").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `vSphereNetworks` to be an array in the JSON string but got `%s`", jsonObj.get("vSphereNetworks").toString()));
      }
      if ((jsonObj.get("vmId") != null && !jsonObj.get("vmId").isJsonNull()) && !jsonObj.get("vmId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmId").toString()));
      }
      if ((jsonObj.get("vmwaretools") != null && !jsonObj.get("vmwaretools").isJsonNull()) && !jsonObj.get("vmwaretools").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwaretools` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwaretools").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualMachineProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualMachineProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualMachineProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualMachineProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualMachineProperties>() {
           @Override
           public void write(JsonWriter out, VirtualMachineProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualMachineProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualMachineProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualMachineProperties
   * @throws IOException if the JSON string is invalid with respect to VirtualMachineProperties
   */
  public static VirtualMachineProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualMachineProperties.class);
  }

  /**
   * Convert an instance of VirtualMachineProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

