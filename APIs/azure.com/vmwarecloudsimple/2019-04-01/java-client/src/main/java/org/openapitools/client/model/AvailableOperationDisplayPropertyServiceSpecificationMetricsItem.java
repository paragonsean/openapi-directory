/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Available operation display property service specification metrics item
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AvailableOperationDisplayPropertyServiceSpecificationMetricsItem {
  /**
   * Metric&#39;s aggregation type for e.g. (Average, Total)
   */
  @JsonAdapter(AggregationTypeEnum.Adapter.class)
  public enum AggregationTypeEnum {
    AVERAGE("Average"),
    
    TOTAL("Total");

    private String value;

    AggregationTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AggregationTypeEnum fromValue(String value) {
      for (AggregationTypeEnum b : AggregationTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AggregationTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AggregationTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AggregationTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AggregationTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AggregationTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AGGREGATION_TYPE = "aggregationType";
  @SerializedName(SERIALIZED_NAME_AGGREGATION_TYPE)
  private AggregationTypeEnum aggregationType;

  public static final String SERIALIZED_NAME_DISPLAY_DESCRIPTION = "displayDescription";
  @SerializedName(SERIALIZED_NAME_DISPLAY_DESCRIPTION)
  private String displayDescription;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem() {
  }

  public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem aggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
    return this;
  }

  /**
   * Metric&#39;s aggregation type for e.g. (Average, Total)
   * @return aggregationType
   */
  @javax.annotation.Nonnull
  public AggregationTypeEnum getAggregationType() {
    return aggregationType;
  }

  public void setAggregationType(AggregationTypeEnum aggregationType) {
    this.aggregationType = aggregationType;
  }


  public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem displayDescription(String displayDescription) {
    this.displayDescription = displayDescription;
    return this;
  }

  /**
   * Metric&#39;s description
   * @return displayDescription
   */
  @javax.annotation.Nonnull
  public String getDisplayDescription() {
    return displayDescription;
  }

  public void setDisplayDescription(String displayDescription) {
    this.displayDescription = displayDescription;
  }


  public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Human readable metric&#39;s name
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Metric&#39;s name/id
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Metric&#39;s unit
   * @return unit
   */
  @javax.annotation.Nonnull
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AvailableOperationDisplayPropertyServiceSpecificationMetricsItem availableOperationDisplayPropertyServiceSpecificationMetricsItem = (AvailableOperationDisplayPropertyServiceSpecificationMetricsItem) o;
    return Objects.equals(this.aggregationType, availableOperationDisplayPropertyServiceSpecificationMetricsItem.aggregationType) &&
        Objects.equals(this.displayDescription, availableOperationDisplayPropertyServiceSpecificationMetricsItem.displayDescription) &&
        Objects.equals(this.displayName, availableOperationDisplayPropertyServiceSpecificationMetricsItem.displayName) &&
        Objects.equals(this.name, availableOperationDisplayPropertyServiceSpecificationMetricsItem.name) &&
        Objects.equals(this.unit, availableOperationDisplayPropertyServiceSpecificationMetricsItem.unit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aggregationType, displayDescription, displayName, name, unit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AvailableOperationDisplayPropertyServiceSpecificationMetricsItem {\n");
    sb.append("    aggregationType: ").append(toIndentedString(aggregationType)).append("\n");
    sb.append("    displayDescription: ").append(toIndentedString(displayDescription)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aggregationType");
    openapiFields.add("displayDescription");
    openapiFields.add("displayName");
    openapiFields.add("name");
    openapiFields.add("unit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("aggregationType");
    openapiRequiredFields.add("displayDescription");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("unit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AvailableOperationDisplayPropertyServiceSpecificationMetricsItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AvailableOperationDisplayPropertyServiceSpecificationMetricsItem is not found in the empty JSON string", AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AvailableOperationDisplayPropertyServiceSpecificationMetricsItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("aggregationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aggregationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aggregationType").toString()));
      }
      // validate the required field `aggregationType`
      AggregationTypeEnum.validateJsonElement(jsonObj.get("aggregationType"));
      if (!jsonObj.get("displayDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayDescription").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AvailableOperationDisplayPropertyServiceSpecificationMetricsItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AvailableOperationDisplayPropertyServiceSpecificationMetricsItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.class));

       return (TypeAdapter<T>) new TypeAdapter<AvailableOperationDisplayPropertyServiceSpecificationMetricsItem>() {
           @Override
           public void write(JsonWriter out, AvailableOperationDisplayPropertyServiceSpecificationMetricsItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AvailableOperationDisplayPropertyServiceSpecificationMetricsItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AvailableOperationDisplayPropertyServiceSpecificationMetricsItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AvailableOperationDisplayPropertyServiceSpecificationMetricsItem
   * @throws IOException if the JSON string is invalid with respect to AvailableOperationDisplayPropertyServiceSpecificationMetricsItem
   */
  public static AvailableOperationDisplayPropertyServiceSpecificationMetricsItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.class);
  }

  /**
   * Convert an instance of AvailableOperationDisplayPropertyServiceSpecificationMetricsItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

