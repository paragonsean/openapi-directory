/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CSRPError;
import org.openapitools.client.model.DedicatedCloudService;
import org.openapitools.client.model.DedicatedCloudServiceListResponse;
import org.openapitools.client.model.PatchPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DedicatedCloudServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DedicatedCloudServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DedicatedCloudServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dedicatedCloudServicesCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Create Dedicated Cloud Service request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, DedicatedCloudService dedicatedCloudServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dedicatedCloudServiceRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudServiceName" + "}", localVarApiClient.escapeString(dedicatedCloudServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudServicesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, DedicatedCloudService dedicatedCloudServiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudServiceName' is set
        if (dedicatedCloudServiceName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudServiceRequest' is set
        if (dedicatedCloudServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudServiceRequest' when calling dedicatedCloudServicesCreateOrUpdate(Async)");
        }

        return dedicatedCloudServicesCreateOrUpdateCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, _callback);

    }

    /**
     * Implements dedicated cloud service PUT method
     * Create dedicate cloud service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Create Dedicated Cloud Service request (required)
     * @return DedicatedCloudService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudService dedicatedCloudServicesCreateOrUpdate(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, DedicatedCloudService dedicatedCloudServiceRequest) throws ApiException {
        ApiResponse<DedicatedCloudService> localVarResp = dedicatedCloudServicesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest);
        return localVarResp.getData();
    }

    /**
     * Implements dedicated cloud service PUT method
     * Create dedicate cloud service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Create Dedicated Cloud Service request (required)
     * @return ApiResponse&lt;DedicatedCloudService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudService> dedicatedCloudServicesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, DedicatedCloudService dedicatedCloudServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudServicesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements dedicated cloud service PUT method (asynchronously)
     * Create dedicate cloud service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Create Dedicated Cloud Service request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, DedicatedCloudService dedicatedCloudServiceRequest, final ApiCallback<DedicatedCloudService> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudServicesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudServicesDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesDeleteCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudServiceName" + "}", localVarApiClient.escapeString(dedicatedCloudServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudServicesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesDelete(Async)");
        }

        // verify the required parameter 'dedicatedCloudServiceName' is set
        if (dedicatedCloudServiceName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesDelete(Async)");
        }

        return dedicatedCloudServicesDeleteCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, _callback);

    }

    /**
     * Implements dedicatedCloudService DELETE method
     * Delete dedicate cloud service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public void dedicatedCloudServicesDelete(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion) throws ApiException {
        dedicatedCloudServicesDeleteWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion);
    }

    /**
     * Implements dedicatedCloudService DELETE method
     * Delete dedicate cloud service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> dedicatedCloudServicesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudServicesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Implements dedicatedCloudService DELETE method (asynchronously)
     * Delete dedicate cloud service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesDeleteAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudServicesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudServicesGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesGetCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudServiceName" + "}", localVarApiClient.escapeString(dedicatedCloudServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudServicesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesGet(Async)");
        }

        // verify the required parameter 'dedicatedCloudServiceName' is set
        if (dedicatedCloudServiceName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesGet(Async)");
        }

        return dedicatedCloudServicesGetCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, _callback);

    }

    /**
     * Implements dedicatedCloudService GET method
     * Returns Dedicate Cloud Service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @return DedicatedCloudService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudService dedicatedCloudServicesGet(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion) throws ApiException {
        ApiResponse<DedicatedCloudService> localVarResp = dedicatedCloudServicesGetWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Implements dedicatedCloudService GET method
     * Returns Dedicate Cloud Service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DedicatedCloudService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudService> dedicatedCloudServicesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudServicesGetValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements dedicatedCloudService GET method (asynchronously)
     * Returns Dedicate Cloud Service
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud Service name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesGetAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, final ApiCallback<DedicatedCloudService> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudServicesGetValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudServicesListByResourceGroup
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudServicesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesListByResourceGroup(Async)");
        }

        return dedicatedCloudServicesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * Implements list of dedicatedCloudService objects within RG method
     * Returns list of dedicated cloud services within a resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return DedicatedCloudServiceListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudServiceListResponse dedicatedCloudServicesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<DedicatedCloudServiceListResponse> localVarResp = dedicatedCloudServicesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Implements list of dedicatedCloudService objects within RG method
     * Returns list of dedicated cloud services within a resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return ApiResponse&lt;DedicatedCloudServiceListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudServiceListResponse> dedicatedCloudServicesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudServicesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudServiceListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements list of dedicatedCloudService objects within RG method (asynchronously)
     * Returns list of dedicated cloud services within a resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<DedicatedCloudServiceListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudServicesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudServiceListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudServicesListBySubscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesListBySubscriptionCall(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudServicesListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesListBySubscription(Async)");
        }

        return dedicatedCloudServicesListBySubscriptionCall(subscriptionId, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * Implements list of dedicatedCloudService objects within subscription method
     * Returns list of dedicated cloud services within a subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return DedicatedCloudServiceListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudServiceListResponse dedicatedCloudServicesListBySubscription(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<DedicatedCloudServiceListResponse> localVarResp = dedicatedCloudServicesListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Implements list of dedicatedCloudService objects within subscription method
     * Returns list of dedicated cloud services within a subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return ApiResponse&lt;DedicatedCloudServiceListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudServiceListResponse> dedicatedCloudServicesListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudServicesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudServiceListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements list of dedicatedCloudService objects within subscription method (asynchronously)
     * Returns list of dedicated cloud services within a subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesListBySubscriptionAsync(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<DedicatedCloudServiceListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudServicesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudServiceListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudServicesUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Patch Dedicated Cloud Service request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesUpdateCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, PatchPayload dedicatedCloudServiceRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dedicatedCloudServiceRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudServices/{dedicatedCloudServiceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudServiceName" + "}", localVarApiClient.escapeString(dedicatedCloudServiceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudServicesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, PatchPayload dedicatedCloudServiceRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudServicesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudServicesUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudServiceName' is set
        if (dedicatedCloudServiceName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudServiceName' when calling dedicatedCloudServicesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudServicesUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudServiceRequest' is set
        if (dedicatedCloudServiceRequest == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudServiceRequest' when calling dedicatedCloudServicesUpdate(Async)");
        }

        return dedicatedCloudServicesUpdateCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, _callback);

    }

    /**
     * Implements dedicatedCloudService PATCH method
     * Patch dedicated cloud service&#39;s properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Patch Dedicated Cloud Service request (required)
     * @return DedicatedCloudService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudService dedicatedCloudServicesUpdate(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, PatchPayload dedicatedCloudServiceRequest) throws ApiException {
        ApiResponse<DedicatedCloudService> localVarResp = dedicatedCloudServicesUpdateWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest);
        return localVarResp.getData();
    }

    /**
     * Implements dedicatedCloudService PATCH method
     * Patch dedicated cloud service&#39;s properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Patch Dedicated Cloud Service request (required)
     * @return ApiResponse&lt;DedicatedCloudService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudService> dedicatedCloudServicesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, PatchPayload dedicatedCloudServiceRequest) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudServicesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements dedicatedCloudService PATCH method (asynchronously)
     * Patch dedicated cloud service&#39;s properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudServiceName dedicated cloud service name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudServiceRequest Patch Dedicated Cloud Service request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudServicesUpdateAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudServiceName, String apiVersion, PatchPayload dedicatedCloudServiceRequest, final ApiCallback<DedicatedCloudService> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudServicesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudServiceName, apiVersion, dedicatedCloudServiceRequest, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
