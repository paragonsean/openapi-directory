/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Guest OS nic customization
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GuestOSNICCustomization {
  /**
   * IP address allocation method
   */
  @JsonAdapter(AllocationEnum.Adapter.class)
  public enum AllocationEnum {
    STATIC("static"),
    
    DYNAMIC("dynamic");

    private String value;

    AllocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AllocationEnum fromValue(String value) {
      for (AllocationEnum b : AllocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AllocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AllocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AllocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AllocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AllocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ALLOCATION = "allocation";
  @SerializedName(SERIALIZED_NAME_ALLOCATION)
  private AllocationEnum allocation;

  public static final String SERIALIZED_NAME_DNS_SERVERS = "dnsServers";
  @SerializedName(SERIALIZED_NAME_DNS_SERVERS)
  private List<String> dnsServers = new ArrayList<>();

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private List<String> gateway = new ArrayList<>();

  public static final String SERIALIZED_NAME_IP_ADDRESS = "ipAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_MASK = "mask";
  @SerializedName(SERIALIZED_NAME_MASK)
  private String mask;

  public static final String SERIALIZED_NAME_PRIMARY_WINS_SERVER = "primaryWinsServer";
  @SerializedName(SERIALIZED_NAME_PRIMARY_WINS_SERVER)
  private String primaryWinsServer;

  public static final String SERIALIZED_NAME_SECONDARY_WINS_SERVER = "secondaryWinsServer";
  @SerializedName(SERIALIZED_NAME_SECONDARY_WINS_SERVER)
  private String secondaryWinsServer;

  public GuestOSNICCustomization() {
  }

  public GuestOSNICCustomization allocation(AllocationEnum allocation) {
    this.allocation = allocation;
    return this;
  }

  /**
   * IP address allocation method
   * @return allocation
   */
  @javax.annotation.Nullable
  public AllocationEnum getAllocation() {
    return allocation;
  }

  public void setAllocation(AllocationEnum allocation) {
    this.allocation = allocation;
  }


  public GuestOSNICCustomization dnsServers(List<String> dnsServers) {
    this.dnsServers = dnsServers;
    return this;
  }

  public GuestOSNICCustomization addDnsServersItem(String dnsServersItem) {
    if (this.dnsServers == null) {
      this.dnsServers = new ArrayList<>();
    }
    this.dnsServers.add(dnsServersItem);
    return this;
  }

  /**
   * List of dns servers to use
   * @return dnsServers
   */
  @javax.annotation.Nullable
  public List<String> getDnsServers() {
    return dnsServers;
  }

  public void setDnsServers(List<String> dnsServers) {
    this.dnsServers = dnsServers;
  }


  public GuestOSNICCustomization gateway(List<String> gateway) {
    this.gateway = gateway;
    return this;
  }

  public GuestOSNICCustomization addGatewayItem(String gatewayItem) {
    if (this.gateway == null) {
      this.gateway = new ArrayList<>();
    }
    this.gateway.add(gatewayItem);
    return this;
  }

  /**
   * Gateway addresses assigned to nic
   * @return gateway
   */
  @javax.annotation.Nullable
  public List<String> getGateway() {
    return gateway;
  }

  public void setGateway(List<String> gateway) {
    this.gateway = gateway;
  }


  public GuestOSNICCustomization ipAddress(String ipAddress) {
    this.ipAddress = ipAddress;
    return this;
  }

  /**
   * Get ipAddress
   * @return ipAddress
   */
  @javax.annotation.Nullable
  public String getIpAddress() {
    return ipAddress;
  }

  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public GuestOSNICCustomization mask(String mask) {
    this.mask = mask;
    return this;
  }

  /**
   * Get mask
   * @return mask
   */
  @javax.annotation.Nullable
  public String getMask() {
    return mask;
  }

  public void setMask(String mask) {
    this.mask = mask;
  }


  public GuestOSNICCustomization primaryWinsServer(String primaryWinsServer) {
    this.primaryWinsServer = primaryWinsServer;
    return this;
  }

  /**
   * Get primaryWinsServer
   * @return primaryWinsServer
   */
  @javax.annotation.Nullable
  public String getPrimaryWinsServer() {
    return primaryWinsServer;
  }

  public void setPrimaryWinsServer(String primaryWinsServer) {
    this.primaryWinsServer = primaryWinsServer;
  }


  public GuestOSNICCustomization secondaryWinsServer(String secondaryWinsServer) {
    this.secondaryWinsServer = secondaryWinsServer;
    return this;
  }

  /**
   * Get secondaryWinsServer
   * @return secondaryWinsServer
   */
  @javax.annotation.Nullable
  public String getSecondaryWinsServer() {
    return secondaryWinsServer;
  }

  public void setSecondaryWinsServer(String secondaryWinsServer) {
    this.secondaryWinsServer = secondaryWinsServer;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GuestOSNICCustomization guestOSNICCustomization = (GuestOSNICCustomization) o;
    return Objects.equals(this.allocation, guestOSNICCustomization.allocation) &&
        Objects.equals(this.dnsServers, guestOSNICCustomization.dnsServers) &&
        Objects.equals(this.gateway, guestOSNICCustomization.gateway) &&
        Objects.equals(this.ipAddress, guestOSNICCustomization.ipAddress) &&
        Objects.equals(this.mask, guestOSNICCustomization.mask) &&
        Objects.equals(this.primaryWinsServer, guestOSNICCustomization.primaryWinsServer) &&
        Objects.equals(this.secondaryWinsServer, guestOSNICCustomization.secondaryWinsServer);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allocation, dnsServers, gateway, ipAddress, mask, primaryWinsServer, secondaryWinsServer);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GuestOSNICCustomization {\n");
    sb.append("    allocation: ").append(toIndentedString(allocation)).append("\n");
    sb.append("    dnsServers: ").append(toIndentedString(dnsServers)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    mask: ").append(toIndentedString(mask)).append("\n");
    sb.append("    primaryWinsServer: ").append(toIndentedString(primaryWinsServer)).append("\n");
    sb.append("    secondaryWinsServer: ").append(toIndentedString(secondaryWinsServer)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allocation");
    openapiFields.add("dnsServers");
    openapiFields.add("gateway");
    openapiFields.add("ipAddress");
    openapiFields.add("mask");
    openapiFields.add("primaryWinsServer");
    openapiFields.add("secondaryWinsServer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GuestOSNICCustomization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GuestOSNICCustomization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GuestOSNICCustomization is not found in the empty JSON string", GuestOSNICCustomization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GuestOSNICCustomization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GuestOSNICCustomization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("allocation") != null && !jsonObj.get("allocation").isJsonNull()) && !jsonObj.get("allocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `allocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("allocation").toString()));
      }
      // validate the optional field `allocation`
      if (jsonObj.get("allocation") != null && !jsonObj.get("allocation").isJsonNull()) {
        AllocationEnum.validateJsonElement(jsonObj.get("allocation"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("dnsServers") != null && !jsonObj.get("dnsServers").isJsonNull() && !jsonObj.get("dnsServers").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dnsServers` to be an array in the JSON string but got `%s`", jsonObj.get("dnsServers").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("gateway") != null && !jsonObj.get("gateway").isJsonNull() && !jsonObj.get("gateway").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `gateway` to be an array in the JSON string but got `%s`", jsonObj.get("gateway").toString()));
      }
      if ((jsonObj.get("ipAddress") != null && !jsonObj.get("ipAddress").isJsonNull()) && !jsonObj.get("ipAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ipAddress").toString()));
      }
      if ((jsonObj.get("mask") != null && !jsonObj.get("mask").isJsonNull()) && !jsonObj.get("mask").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mask` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mask").toString()));
      }
      if ((jsonObj.get("primaryWinsServer") != null && !jsonObj.get("primaryWinsServer").isJsonNull()) && !jsonObj.get("primaryWinsServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryWinsServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryWinsServer").toString()));
      }
      if ((jsonObj.get("secondaryWinsServer") != null && !jsonObj.get("secondaryWinsServer").isJsonNull()) && !jsonObj.get("secondaryWinsServer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryWinsServer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryWinsServer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GuestOSNICCustomization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GuestOSNICCustomization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GuestOSNICCustomization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GuestOSNICCustomization.class));

       return (TypeAdapter<T>) new TypeAdapter<GuestOSNICCustomization>() {
           @Override
           public void write(JsonWriter out, GuestOSNICCustomization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GuestOSNICCustomization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GuestOSNICCustomization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GuestOSNICCustomization
   * @throws IOException if the JSON string is invalid with respect to GuestOSNICCustomization
   */
  public static GuestOSNICCustomization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GuestOSNICCustomization.class);
  }

  /**
   * Convert an instance of GuestOSNICCustomization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

