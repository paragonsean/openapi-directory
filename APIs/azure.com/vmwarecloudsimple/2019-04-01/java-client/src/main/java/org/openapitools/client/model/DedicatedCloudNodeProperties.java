/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.client.model.SkuDescription;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of dedicated cloud node
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DedicatedCloudNodeProperties {
  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_ID = "availabilityZoneId";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_ID)
  private String availabilityZoneId;

  public static final String SERIALIZED_NAME_AVAILABILITY_ZONE_NAME = "availabilityZoneName";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_ZONE_NAME)
  private String availabilityZoneName;

  public static final String SERIALIZED_NAME_CLOUD_RACK_NAME = "cloudRackName";
  @SerializedName(SERIALIZED_NAME_CLOUD_RACK_NAME)
  private String cloudRackName;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private Object created;

  public static final String SERIALIZED_NAME_NODES_COUNT = "nodesCount";
  @SerializedName(SERIALIZED_NAME_NODES_COUNT)
  private Integer nodesCount;

  public static final String SERIALIZED_NAME_PLACEMENT_GROUP_ID = "placementGroupId";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_GROUP_ID)
  private String placementGroupId;

  public static final String SERIALIZED_NAME_PLACEMENT_GROUP_NAME = "placementGroupName";
  @SerializedName(SERIALIZED_NAME_PLACEMENT_GROUP_NAME)
  private String placementGroupName;

  public static final String SERIALIZED_NAME_PRIVATE_CLOUD_ID = "privateCloudId";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CLOUD_ID)
  private String privateCloudId;

  public static final String SERIALIZED_NAME_PRIVATE_CLOUD_NAME = "privateCloudName";
  @SerializedName(SERIALIZED_NAME_PRIVATE_CLOUD_NAME)
  private String privateCloudName;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_PURCHASE_ID = "purchaseId";
  @SerializedName(SERIALIZED_NAME_PURCHASE_ID)
  private UUID purchaseId;

  public static final String SERIALIZED_NAME_SKU_DESCRIPTION = "skuDescription";
  @SerializedName(SERIALIZED_NAME_SKU_DESCRIPTION)
  private SkuDescription skuDescription;

  /**
   * Node status, indicates is private cloud set up on this node or not
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    UNUSED("unused"),
    
    USED("used");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_VMWARE_CLUSTER_NAME = "vmwareClusterName";
  @SerializedName(SERIALIZED_NAME_VMWARE_CLUSTER_NAME)
  private String vmwareClusterName;

  public DedicatedCloudNodeProperties() {
  }

  public DedicatedCloudNodeProperties(
     String availabilityZoneName, 
     String cloudRackName, 
     Object created, 
     String placementGroupName, 
     String privateCloudId, 
     String privateCloudName, 
     String provisioningState, 
     StatusEnum status, 
     String vmwareClusterName
  ) {
    this();
    this.availabilityZoneName = availabilityZoneName;
    this.cloudRackName = cloudRackName;
    this.created = created;
    this.placementGroupName = placementGroupName;
    this.privateCloudId = privateCloudId;
    this.privateCloudName = privateCloudName;
    this.provisioningState = provisioningState;
    this.status = status;
    this.vmwareClusterName = vmwareClusterName;
  }

  public DedicatedCloudNodeProperties availabilityZoneId(String availabilityZoneId) {
    this.availabilityZoneId = availabilityZoneId;
    return this;
  }

  /**
   * Availability Zone id, e.g. \&quot;az1\&quot;
   * @return availabilityZoneId
   */
  @javax.annotation.Nonnull
  public String getAvailabilityZoneId() {
    return availabilityZoneId;
  }

  public void setAvailabilityZoneId(String availabilityZoneId) {
    this.availabilityZoneId = availabilityZoneId;
  }


  /**
   * Availability Zone name, e.g. \&quot;Availability Zone 1\&quot;
   * @return availabilityZoneName
   */
  @javax.annotation.Nullable
  public String getAvailabilityZoneName() {
    return availabilityZoneName;
  }



  /**
   * VMWare Cloud Rack Name
   * @return cloudRackName
   */
  @javax.annotation.Nullable
  public String getCloudRackName() {
    return cloudRackName;
  }



  /**
   * date time the resource was created
   * @return created
   */
  @javax.annotation.Nullable
  public Object getCreated() {
    return created;
  }



  public DedicatedCloudNodeProperties nodesCount(Integer nodesCount) {
    this.nodesCount = nodesCount;
    return this;
  }

  /**
   * count of nodes to create
   * @return nodesCount
   */
  @javax.annotation.Nonnull
  public Integer getNodesCount() {
    return nodesCount;
  }

  public void setNodesCount(Integer nodesCount) {
    this.nodesCount = nodesCount;
  }


  public DedicatedCloudNodeProperties placementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
    return this;
  }

  /**
   * Placement Group id, e.g. \&quot;n1\&quot;
   * @return placementGroupId
   */
  @javax.annotation.Nonnull
  public String getPlacementGroupId() {
    return placementGroupId;
  }

  public void setPlacementGroupId(String placementGroupId) {
    this.placementGroupId = placementGroupId;
  }


  /**
   * Placement Name, e.g. \&quot;Placement Group 1\&quot;
   * @return placementGroupName
   */
  @javax.annotation.Nullable
  public String getPlacementGroupName() {
    return placementGroupName;
  }



  /**
   * Private Cloud Id
   * @return privateCloudId
   */
  @javax.annotation.Nullable
  public String getPrivateCloudId() {
    return privateCloudId;
  }



  /**
   * Resource Pool Name
   * @return privateCloudName
   */
  @javax.annotation.Nullable
  public String getPrivateCloudName() {
    return privateCloudName;
  }



  /**
   * The provisioning status of the resource
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  public DedicatedCloudNodeProperties purchaseId(UUID purchaseId) {
    this.purchaseId = purchaseId;
    return this;
  }

  /**
   * purchase id
   * @return purchaseId
   */
  @javax.annotation.Nonnull
  public UUID getPurchaseId() {
    return purchaseId;
  }

  public void setPurchaseId(UUID purchaseId) {
    this.purchaseId = purchaseId;
  }


  public DedicatedCloudNodeProperties skuDescription(SkuDescription skuDescription) {
    this.skuDescription = skuDescription;
    return this;
  }

  /**
   * Get skuDescription
   * @return skuDescription
   */
  @javax.annotation.Nullable
  public SkuDescription getSkuDescription() {
    return skuDescription;
  }

  public void setSkuDescription(SkuDescription skuDescription) {
    this.skuDescription = skuDescription;
  }


  /**
   * Node status, indicates is private cloud set up on this node or not
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }



  /**
   * VMWare Cluster Name
   * @return vmwareClusterName
   */
  @javax.annotation.Nullable
  public String getVmwareClusterName() {
    return vmwareClusterName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DedicatedCloudNodeProperties dedicatedCloudNodeProperties = (DedicatedCloudNodeProperties) o;
    return Objects.equals(this.availabilityZoneId, dedicatedCloudNodeProperties.availabilityZoneId) &&
        Objects.equals(this.availabilityZoneName, dedicatedCloudNodeProperties.availabilityZoneName) &&
        Objects.equals(this.cloudRackName, dedicatedCloudNodeProperties.cloudRackName) &&
        Objects.equals(this.created, dedicatedCloudNodeProperties.created) &&
        Objects.equals(this.nodesCount, dedicatedCloudNodeProperties.nodesCount) &&
        Objects.equals(this.placementGroupId, dedicatedCloudNodeProperties.placementGroupId) &&
        Objects.equals(this.placementGroupName, dedicatedCloudNodeProperties.placementGroupName) &&
        Objects.equals(this.privateCloudId, dedicatedCloudNodeProperties.privateCloudId) &&
        Objects.equals(this.privateCloudName, dedicatedCloudNodeProperties.privateCloudName) &&
        Objects.equals(this.provisioningState, dedicatedCloudNodeProperties.provisioningState) &&
        Objects.equals(this.purchaseId, dedicatedCloudNodeProperties.purchaseId) &&
        Objects.equals(this.skuDescription, dedicatedCloudNodeProperties.skuDescription) &&
        Objects.equals(this.status, dedicatedCloudNodeProperties.status) &&
        Objects.equals(this.vmwareClusterName, dedicatedCloudNodeProperties.vmwareClusterName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(availabilityZoneId, availabilityZoneName, cloudRackName, created, nodesCount, placementGroupId, placementGroupName, privateCloudId, privateCloudName, provisioningState, purchaseId, skuDescription, status, vmwareClusterName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DedicatedCloudNodeProperties {\n");
    sb.append("    availabilityZoneId: ").append(toIndentedString(availabilityZoneId)).append("\n");
    sb.append("    availabilityZoneName: ").append(toIndentedString(availabilityZoneName)).append("\n");
    sb.append("    cloudRackName: ").append(toIndentedString(cloudRackName)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    nodesCount: ").append(toIndentedString(nodesCount)).append("\n");
    sb.append("    placementGroupId: ").append(toIndentedString(placementGroupId)).append("\n");
    sb.append("    placementGroupName: ").append(toIndentedString(placementGroupName)).append("\n");
    sb.append("    privateCloudId: ").append(toIndentedString(privateCloudId)).append("\n");
    sb.append("    privateCloudName: ").append(toIndentedString(privateCloudName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    purchaseId: ").append(toIndentedString(purchaseId)).append("\n");
    sb.append("    skuDescription: ").append(toIndentedString(skuDescription)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vmwareClusterName: ").append(toIndentedString(vmwareClusterName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("availabilityZoneId");
    openapiFields.add("availabilityZoneName");
    openapiFields.add("cloudRackName");
    openapiFields.add("created");
    openapiFields.add("nodesCount");
    openapiFields.add("placementGroupId");
    openapiFields.add("placementGroupName");
    openapiFields.add("privateCloudId");
    openapiFields.add("privateCloudName");
    openapiFields.add("provisioningState");
    openapiFields.add("purchaseId");
    openapiFields.add("skuDescription");
    openapiFields.add("status");
    openapiFields.add("vmwareClusterName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("availabilityZoneId");
    openapiRequiredFields.add("nodesCount");
    openapiRequiredFields.add("placementGroupId");
    openapiRequiredFields.add("purchaseId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DedicatedCloudNodeProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DedicatedCloudNodeProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DedicatedCloudNodeProperties is not found in the empty JSON string", DedicatedCloudNodeProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DedicatedCloudNodeProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DedicatedCloudNodeProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DedicatedCloudNodeProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("availabilityZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityZoneId").toString()));
      }
      if ((jsonObj.get("availabilityZoneName") != null && !jsonObj.get("availabilityZoneName").isJsonNull()) && !jsonObj.get("availabilityZoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityZoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityZoneName").toString()));
      }
      if ((jsonObj.get("cloudRackName") != null && !jsonObj.get("cloudRackName").isJsonNull()) && !jsonObj.get("cloudRackName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cloudRackName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cloudRackName").toString()));
      }
      if (!jsonObj.get("placementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementGroupId").toString()));
      }
      if ((jsonObj.get("placementGroupName") != null && !jsonObj.get("placementGroupName").isJsonNull()) && !jsonObj.get("placementGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `placementGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("placementGroupName").toString()));
      }
      if ((jsonObj.get("privateCloudId") != null && !jsonObj.get("privateCloudId").isJsonNull()) && !jsonObj.get("privateCloudId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCloudId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCloudId").toString()));
      }
      if ((jsonObj.get("privateCloudName") != null && !jsonObj.get("privateCloudName").isJsonNull()) && !jsonObj.get("privateCloudName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `privateCloudName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("privateCloudName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if (!jsonObj.get("purchaseId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaseId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaseId").toString()));
      }
      // validate the optional field `skuDescription`
      if (jsonObj.get("skuDescription") != null && !jsonObj.get("skuDescription").isJsonNull()) {
        SkuDescription.validateJsonElement(jsonObj.get("skuDescription"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
      if ((jsonObj.get("vmwareClusterName") != null && !jsonObj.get("vmwareClusterName").isJsonNull()) && !jsonObj.get("vmwareClusterName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmwareClusterName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmwareClusterName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DedicatedCloudNodeProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DedicatedCloudNodeProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DedicatedCloudNodeProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DedicatedCloudNodeProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DedicatedCloudNodeProperties>() {
           @Override
           public void write(JsonWriter out, DedicatedCloudNodeProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DedicatedCloudNodeProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DedicatedCloudNodeProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DedicatedCloudNodeProperties
   * @throws IOException if the JSON string is invalid with respect to DedicatedCloudNodeProperties
   */
  public static DedicatedCloudNodeProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DedicatedCloudNodeProperties.class);
  }

  /**
   * Convert an instance of DedicatedCloudNodeProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

