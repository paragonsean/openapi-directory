/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GuestOSNICCustomization;
import org.openapitools.client.model.VirtualNetwork;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Virtual NIC model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualNic {
  public static final String SERIALIZED_NAME_CUSTOMIZATION = "customization";
  @SerializedName(SERIALIZED_NAME_CUSTOMIZATION)
  private GuestOSNICCustomization customization;

  public static final String SERIALIZED_NAME_IP_ADDRESSES = "ipAddresses";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESSES)
  private List<String> ipAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAC_ADDRESS = "macAddress";
  @SerializedName(SERIALIZED_NAME_MAC_ADDRESS)
  private String macAddress;

  public static final String SERIALIZED_NAME_NETWORK = "network";
  @SerializedName(SERIALIZED_NAME_NETWORK)
  private VirtualNetwork network;

  /**
   * NIC type
   */
  @JsonAdapter(NicTypeEnum.Adapter.class)
  public enum NicTypeEnum {
    E1000("E1000"),
    
    E1000_E("E1000E"),
    
    PCNET32("PCNET32"),
    
    VMXNET("VMXNET"),
    
    VMXNET2("VMXNET2"),
    
    VMXNET3("VMXNET3");

    private String value;

    NicTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static NicTypeEnum fromValue(String value) {
      for (NicTypeEnum b : NicTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<NicTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final NicTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public NicTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return NicTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      NicTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_NIC_TYPE = "nicType";
  @SerializedName(SERIALIZED_NAME_NIC_TYPE)
  private NicTypeEnum nicType;

  public static final String SERIALIZED_NAME_POWER_ON_BOOT = "powerOnBoot";
  @SerializedName(SERIALIZED_NAME_POWER_ON_BOOT)
  private Boolean powerOnBoot;

  public static final String SERIALIZED_NAME_VIRTUAL_NIC_ID = "virtualNicId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NIC_ID)
  private String virtualNicId;

  public static final String SERIALIZED_NAME_VIRTUAL_NIC_NAME = "virtualNicName";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_NIC_NAME)
  private String virtualNicName;

  public VirtualNic() {
  }

  public VirtualNic(
     String virtualNicName
  ) {
    this();
    this.virtualNicName = virtualNicName;
  }

  public VirtualNic customization(GuestOSNICCustomization customization) {
    this.customization = customization;
    return this;
  }

  /**
   * Get customization
   * @return customization
   */
  @javax.annotation.Nullable
  public GuestOSNICCustomization getCustomization() {
    return customization;
  }

  public void setCustomization(GuestOSNICCustomization customization) {
    this.customization = customization;
  }


  public VirtualNic ipAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
    return this;
  }

  public VirtualNic addIpAddressesItem(String ipAddressesItem) {
    if (this.ipAddresses == null) {
      this.ipAddresses = new ArrayList<>();
    }
    this.ipAddresses.add(ipAddressesItem);
    return this;
  }

  /**
   * NIC ip address
   * @return ipAddresses
   */
  @javax.annotation.Nullable
  public List<String> getIpAddresses() {
    return ipAddresses;
  }

  public void setIpAddresses(List<String> ipAddresses) {
    this.ipAddresses = ipAddresses;
  }


  public VirtualNic macAddress(String macAddress) {
    this.macAddress = macAddress;
    return this;
  }

  /**
   * NIC MAC address
   * @return macAddress
   */
  @javax.annotation.Nullable
  public String getMacAddress() {
    return macAddress;
  }

  public void setMacAddress(String macAddress) {
    this.macAddress = macAddress;
  }


  public VirtualNic network(VirtualNetwork network) {
    this.network = network;
    return this;
  }

  /**
   * Get network
   * @return network
   */
  @javax.annotation.Nonnull
  public VirtualNetwork getNetwork() {
    return network;
  }

  public void setNetwork(VirtualNetwork network) {
    this.network = network;
  }


  public VirtualNic nicType(NicTypeEnum nicType) {
    this.nicType = nicType;
    return this;
  }

  /**
   * NIC type
   * @return nicType
   */
  @javax.annotation.Nonnull
  public NicTypeEnum getNicType() {
    return nicType;
  }

  public void setNicType(NicTypeEnum nicType) {
    this.nicType = nicType;
  }


  public VirtualNic powerOnBoot(Boolean powerOnBoot) {
    this.powerOnBoot = powerOnBoot;
    return this;
  }

  /**
   * Is NIC powered on/off on boot
   * @return powerOnBoot
   */
  @javax.annotation.Nullable
  public Boolean getPowerOnBoot() {
    return powerOnBoot;
  }

  public void setPowerOnBoot(Boolean powerOnBoot) {
    this.powerOnBoot = powerOnBoot;
  }


  public VirtualNic virtualNicId(String virtualNicId) {
    this.virtualNicId = virtualNicId;
    return this;
  }

  /**
   * NIC id
   * @return virtualNicId
   */
  @javax.annotation.Nullable
  public String getVirtualNicId() {
    return virtualNicId;
  }

  public void setVirtualNicId(String virtualNicId) {
    this.virtualNicId = virtualNicId;
  }


  /**
   * NIC name
   * @return virtualNicName
   */
  @javax.annotation.Nullable
  public String getVirtualNicName() {
    return virtualNicName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualNic virtualNic = (VirtualNic) o;
    return Objects.equals(this.customization, virtualNic.customization) &&
        Objects.equals(this.ipAddresses, virtualNic.ipAddresses) &&
        Objects.equals(this.macAddress, virtualNic.macAddress) &&
        Objects.equals(this.network, virtualNic.network) &&
        Objects.equals(this.nicType, virtualNic.nicType) &&
        Objects.equals(this.powerOnBoot, virtualNic.powerOnBoot) &&
        Objects.equals(this.virtualNicId, virtualNic.virtualNicId) &&
        Objects.equals(this.virtualNicName, virtualNic.virtualNicName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customization, ipAddresses, macAddress, network, nicType, powerOnBoot, virtualNicId, virtualNicName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualNic {\n");
    sb.append("    customization: ").append(toIndentedString(customization)).append("\n");
    sb.append("    ipAddresses: ").append(toIndentedString(ipAddresses)).append("\n");
    sb.append("    macAddress: ").append(toIndentedString(macAddress)).append("\n");
    sb.append("    network: ").append(toIndentedString(network)).append("\n");
    sb.append("    nicType: ").append(toIndentedString(nicType)).append("\n");
    sb.append("    powerOnBoot: ").append(toIndentedString(powerOnBoot)).append("\n");
    sb.append("    virtualNicId: ").append(toIndentedString(virtualNicId)).append("\n");
    sb.append("    virtualNicName: ").append(toIndentedString(virtualNicName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customization");
    openapiFields.add("ipAddresses");
    openapiFields.add("macAddress");
    openapiFields.add("network");
    openapiFields.add("nicType");
    openapiFields.add("powerOnBoot");
    openapiFields.add("virtualNicId");
    openapiFields.add("virtualNicName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("network");
    openapiRequiredFields.add("nicType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualNic
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualNic.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualNic is not found in the empty JSON string", VirtualNic.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualNic.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualNic` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualNic.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `customization`
      if (jsonObj.get("customization") != null && !jsonObj.get("customization").isJsonNull()) {
        GuestOSNICCustomization.validateJsonElement(jsonObj.get("customization"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("ipAddresses") != null && !jsonObj.get("ipAddresses").isJsonNull() && !jsonObj.get("ipAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `ipAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("ipAddresses").toString()));
      }
      if ((jsonObj.get("macAddress") != null && !jsonObj.get("macAddress").isJsonNull()) && !jsonObj.get("macAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `macAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("macAddress").toString()));
      }
      // validate the required field `network`
      VirtualNetwork.validateJsonElement(jsonObj.get("network"));
      if (!jsonObj.get("nicType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nicType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nicType").toString()));
      }
      // validate the required field `nicType`
      NicTypeEnum.validateJsonElement(jsonObj.get("nicType"));
      if ((jsonObj.get("virtualNicId") != null && !jsonObj.get("virtualNicId").isJsonNull()) && !jsonObj.get("virtualNicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNicId").toString()));
      }
      if ((jsonObj.get("virtualNicName") != null && !jsonObj.get("virtualNicName").isJsonNull()) && !jsonObj.get("virtualNicName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualNicName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualNicName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualNic.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualNic' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualNic> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualNic.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualNic>() {
           @Override
           public void write(JsonWriter out, VirtualNic value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualNic read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualNic given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualNic
   * @throws IOException if the JSON string is invalid with respect to VirtualNic
   */
  public static VirtualNic fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualNic.class);
  }

  /**
   * Convert an instance of VirtualNic to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

