/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SKU availability model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SkuAvailability {
  public static final String SERIALIZED_NAME_DEDICATED_AVAILABILITY_ZONE_ID = "dedicatedAvailabilityZoneId";
  @SerializedName(SERIALIZED_NAME_DEDICATED_AVAILABILITY_ZONE_ID)
  private String dedicatedAvailabilityZoneId;

  public static final String SERIALIZED_NAME_DEDICATED_AVAILABILITY_ZONE_NAME = "dedicatedAvailabilityZoneName";
  @SerializedName(SERIALIZED_NAME_DEDICATED_AVAILABILITY_ZONE_NAME)
  private String dedicatedAvailabilityZoneName;

  public static final String SERIALIZED_NAME_DEDICATED_PLACEMENT_GROUP_ID = "dedicatedPlacementGroupId";
  @SerializedName(SERIALIZED_NAME_DEDICATED_PLACEMENT_GROUP_ID)
  private String dedicatedPlacementGroupId;

  public static final String SERIALIZED_NAME_DEDICATED_PLACEMENT_GROUP_NAME = "dedicatedPlacementGroupName";
  @SerializedName(SERIALIZED_NAME_DEDICATED_PLACEMENT_GROUP_NAME)
  private String dedicatedPlacementGroupName;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_RESOURCE_TYPE = "resourceType";
  @SerializedName(SERIALIZED_NAME_RESOURCE_TYPE)
  private String resourceType;

  public static final String SERIALIZED_NAME_SKU_ID = "skuId";
  @SerializedName(SERIALIZED_NAME_SKU_ID)
  private String skuId;

  public static final String SERIALIZED_NAME_SKU_NAME = "skuName";
  @SerializedName(SERIALIZED_NAME_SKU_NAME)
  private String skuName;

  public SkuAvailability() {
  }

  public SkuAvailability dedicatedAvailabilityZoneId(String dedicatedAvailabilityZoneId) {
    this.dedicatedAvailabilityZoneId = dedicatedAvailabilityZoneId;
    return this;
  }

  /**
   * CloudSimple Availability Zone id
   * @return dedicatedAvailabilityZoneId
   */
  @javax.annotation.Nullable
  public String getDedicatedAvailabilityZoneId() {
    return dedicatedAvailabilityZoneId;
  }

  public void setDedicatedAvailabilityZoneId(String dedicatedAvailabilityZoneId) {
    this.dedicatedAvailabilityZoneId = dedicatedAvailabilityZoneId;
  }


  public SkuAvailability dedicatedAvailabilityZoneName(String dedicatedAvailabilityZoneName) {
    this.dedicatedAvailabilityZoneName = dedicatedAvailabilityZoneName;
    return this;
  }

  /**
   * CloudSimple Availability Zone Name
   * @return dedicatedAvailabilityZoneName
   */
  @javax.annotation.Nullable
  public String getDedicatedAvailabilityZoneName() {
    return dedicatedAvailabilityZoneName;
  }

  public void setDedicatedAvailabilityZoneName(String dedicatedAvailabilityZoneName) {
    this.dedicatedAvailabilityZoneName = dedicatedAvailabilityZoneName;
  }


  public SkuAvailability dedicatedPlacementGroupId(String dedicatedPlacementGroupId) {
    this.dedicatedPlacementGroupId = dedicatedPlacementGroupId;
    return this;
  }

  /**
   * CloudSimple Placement Group Id
   * @return dedicatedPlacementGroupId
   */
  @javax.annotation.Nullable
  public String getDedicatedPlacementGroupId() {
    return dedicatedPlacementGroupId;
  }

  public void setDedicatedPlacementGroupId(String dedicatedPlacementGroupId) {
    this.dedicatedPlacementGroupId = dedicatedPlacementGroupId;
  }


  public SkuAvailability dedicatedPlacementGroupName(String dedicatedPlacementGroupName) {
    this.dedicatedPlacementGroupName = dedicatedPlacementGroupName;
    return this;
  }

  /**
   * CloudSimple Placement Group name
   * @return dedicatedPlacementGroupName
   */
  @javax.annotation.Nullable
  public String getDedicatedPlacementGroupName() {
    return dedicatedPlacementGroupName;
  }

  public void setDedicatedPlacementGroupName(String dedicatedPlacementGroupName) {
    this.dedicatedPlacementGroupName = dedicatedPlacementGroupName;
  }


  public SkuAvailability limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * indicates how many resources of a given SKU is available in a AZ-&gt;PG
   * @return limit
   */
  @javax.annotation.Nonnull
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public SkuAvailability resourceType(String resourceType) {
    this.resourceType = resourceType;
    return this;
  }

  /**
   * resource type e.g. DedicatedCloudNodes
   * @return resourceType
   */
  @javax.annotation.Nullable
  public String getResourceType() {
    return resourceType;
  }

  public void setResourceType(String resourceType) {
    this.resourceType = resourceType;
  }


  public SkuAvailability skuId(String skuId) {
    this.skuId = skuId;
    return this;
  }

  /**
   * sku id
   * @return skuId
   */
  @javax.annotation.Nullable
  public String getSkuId() {
    return skuId;
  }

  public void setSkuId(String skuId) {
    this.skuId = skuId;
  }


  public SkuAvailability skuName(String skuName) {
    this.skuName = skuName;
    return this;
  }

  /**
   * sku name
   * @return skuName
   */
  @javax.annotation.Nullable
  public String getSkuName() {
    return skuName;
  }

  public void setSkuName(String skuName) {
    this.skuName = skuName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SkuAvailability skuAvailability = (SkuAvailability) o;
    return Objects.equals(this.dedicatedAvailabilityZoneId, skuAvailability.dedicatedAvailabilityZoneId) &&
        Objects.equals(this.dedicatedAvailabilityZoneName, skuAvailability.dedicatedAvailabilityZoneName) &&
        Objects.equals(this.dedicatedPlacementGroupId, skuAvailability.dedicatedPlacementGroupId) &&
        Objects.equals(this.dedicatedPlacementGroupName, skuAvailability.dedicatedPlacementGroupName) &&
        Objects.equals(this.limit, skuAvailability.limit) &&
        Objects.equals(this.resourceType, skuAvailability.resourceType) &&
        Objects.equals(this.skuId, skuAvailability.skuId) &&
        Objects.equals(this.skuName, skuAvailability.skuName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dedicatedAvailabilityZoneId, dedicatedAvailabilityZoneName, dedicatedPlacementGroupId, dedicatedPlacementGroupName, limit, resourceType, skuId, skuName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SkuAvailability {\n");
    sb.append("    dedicatedAvailabilityZoneId: ").append(toIndentedString(dedicatedAvailabilityZoneId)).append("\n");
    sb.append("    dedicatedAvailabilityZoneName: ").append(toIndentedString(dedicatedAvailabilityZoneName)).append("\n");
    sb.append("    dedicatedPlacementGroupId: ").append(toIndentedString(dedicatedPlacementGroupId)).append("\n");
    sb.append("    dedicatedPlacementGroupName: ").append(toIndentedString(dedicatedPlacementGroupName)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    resourceType: ").append(toIndentedString(resourceType)).append("\n");
    sb.append("    skuId: ").append(toIndentedString(skuId)).append("\n");
    sb.append("    skuName: ").append(toIndentedString(skuName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dedicatedAvailabilityZoneId");
    openapiFields.add("dedicatedAvailabilityZoneName");
    openapiFields.add("dedicatedPlacementGroupId");
    openapiFields.add("dedicatedPlacementGroupName");
    openapiFields.add("limit");
    openapiFields.add("resourceType");
    openapiFields.add("skuId");
    openapiFields.add("skuName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("limit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SkuAvailability
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SkuAvailability.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SkuAvailability is not found in the empty JSON string", SkuAvailability.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SkuAvailability.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SkuAvailability` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SkuAvailability.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dedicatedAvailabilityZoneId") != null && !jsonObj.get("dedicatedAvailabilityZoneId").isJsonNull()) && !jsonObj.get("dedicatedAvailabilityZoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dedicatedAvailabilityZoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dedicatedAvailabilityZoneId").toString()));
      }
      if ((jsonObj.get("dedicatedAvailabilityZoneName") != null && !jsonObj.get("dedicatedAvailabilityZoneName").isJsonNull()) && !jsonObj.get("dedicatedAvailabilityZoneName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dedicatedAvailabilityZoneName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dedicatedAvailabilityZoneName").toString()));
      }
      if ((jsonObj.get("dedicatedPlacementGroupId") != null && !jsonObj.get("dedicatedPlacementGroupId").isJsonNull()) && !jsonObj.get("dedicatedPlacementGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dedicatedPlacementGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dedicatedPlacementGroupId").toString()));
      }
      if ((jsonObj.get("dedicatedPlacementGroupName") != null && !jsonObj.get("dedicatedPlacementGroupName").isJsonNull()) && !jsonObj.get("dedicatedPlacementGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dedicatedPlacementGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dedicatedPlacementGroupName").toString()));
      }
      if ((jsonObj.get("resourceType") != null && !jsonObj.get("resourceType").isJsonNull()) && !jsonObj.get("resourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceType").toString()));
      }
      if ((jsonObj.get("skuId") != null && !jsonObj.get("skuId").isJsonNull()) && !jsonObj.get("skuId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuId").toString()));
      }
      if ((jsonObj.get("skuName") != null && !jsonObj.get("skuName").isJsonNull()) && !jsonObj.get("skuName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `skuName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("skuName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SkuAvailability.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SkuAvailability' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SkuAvailability> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SkuAvailability.class));

       return (TypeAdapter<T>) new TypeAdapter<SkuAvailability>() {
           @Override
           public void write(JsonWriter out, SkuAvailability value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SkuAvailability read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SkuAvailability given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SkuAvailability
   * @throws IOException if the JSON string is invalid with respect to SkuAvailability
   */
  public static SkuAvailability fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SkuAvailability.class);
  }

  /**
   * Convert an instance of SkuAvailability to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

