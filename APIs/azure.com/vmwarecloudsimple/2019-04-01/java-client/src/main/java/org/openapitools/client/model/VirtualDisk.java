/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Virtual disk model
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:00:07.139333-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualDisk {
  public static final String SERIALIZED_NAME_CONTROLLER_ID = "controllerId";
  @SerializedName(SERIALIZED_NAME_CONTROLLER_ID)
  private String controllerId;

  /**
   * Disk&#39;s independence mode type
   */
  @JsonAdapter(IndependenceModeEnum.Adapter.class)
  public enum IndependenceModeEnum {
    PERSISTENT("persistent"),
    
    INDEPENDENT_PERSISTENT("independent_persistent"),
    
    INDEPENDENT_NONPERSISTENT("independent_nonpersistent");

    private String value;

    IndependenceModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IndependenceModeEnum fromValue(String value) {
      for (IndependenceModeEnum b : IndependenceModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IndependenceModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IndependenceModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IndependenceModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IndependenceModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IndependenceModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INDEPENDENCE_MODE = "independenceMode";
  @SerializedName(SERIALIZED_NAME_INDEPENDENCE_MODE)
  private IndependenceModeEnum independenceMode;

  public static final String SERIALIZED_NAME_TOTAL_SIZE = "totalSize";
  @SerializedName(SERIALIZED_NAME_TOTAL_SIZE)
  private Integer totalSize;

  public static final String SERIALIZED_NAME_VIRTUAL_DISK_ID = "virtualDiskId";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_DISK_ID)
  private String virtualDiskId;

  public static final String SERIALIZED_NAME_VIRTUAL_DISK_NAME = "virtualDiskName";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_DISK_NAME)
  private String virtualDiskName;

  public VirtualDisk() {
  }

  public VirtualDisk(
     String virtualDiskName
  ) {
    this();
    this.virtualDiskName = virtualDiskName;
  }

  public VirtualDisk controllerId(String controllerId) {
    this.controllerId = controllerId;
    return this;
  }

  /**
   * Disk&#39;s Controller id
   * @return controllerId
   */
  @javax.annotation.Nonnull
  public String getControllerId() {
    return controllerId;
  }

  public void setControllerId(String controllerId) {
    this.controllerId = controllerId;
  }


  public VirtualDisk independenceMode(IndependenceModeEnum independenceMode) {
    this.independenceMode = independenceMode;
    return this;
  }

  /**
   * Disk&#39;s independence mode type
   * @return independenceMode
   */
  @javax.annotation.Nonnull
  public IndependenceModeEnum getIndependenceMode() {
    return independenceMode;
  }

  public void setIndependenceMode(IndependenceModeEnum independenceMode) {
    this.independenceMode = independenceMode;
  }


  public VirtualDisk totalSize(Integer totalSize) {
    this.totalSize = totalSize;
    return this;
  }

  /**
   * Disk&#39;s total size
   * @return totalSize
   */
  @javax.annotation.Nonnull
  public Integer getTotalSize() {
    return totalSize;
  }

  public void setTotalSize(Integer totalSize) {
    this.totalSize = totalSize;
  }


  public VirtualDisk virtualDiskId(String virtualDiskId) {
    this.virtualDiskId = virtualDiskId;
    return this;
  }

  /**
   * Disk&#39;s id
   * @return virtualDiskId
   */
  @javax.annotation.Nullable
  public String getVirtualDiskId() {
    return virtualDiskId;
  }

  public void setVirtualDiskId(String virtualDiskId) {
    this.virtualDiskId = virtualDiskId;
  }


  /**
   * Disk&#39;s display name
   * @return virtualDiskName
   */
  @javax.annotation.Nullable
  public String getVirtualDiskName() {
    return virtualDiskName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualDisk virtualDisk = (VirtualDisk) o;
    return Objects.equals(this.controllerId, virtualDisk.controllerId) &&
        Objects.equals(this.independenceMode, virtualDisk.independenceMode) &&
        Objects.equals(this.totalSize, virtualDisk.totalSize) &&
        Objects.equals(this.virtualDiskId, virtualDisk.virtualDiskId) &&
        Objects.equals(this.virtualDiskName, virtualDisk.virtualDiskName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(controllerId, independenceMode, totalSize, virtualDiskId, virtualDiskName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualDisk {\n");
    sb.append("    controllerId: ").append(toIndentedString(controllerId)).append("\n");
    sb.append("    independenceMode: ").append(toIndentedString(independenceMode)).append("\n");
    sb.append("    totalSize: ").append(toIndentedString(totalSize)).append("\n");
    sb.append("    virtualDiskId: ").append(toIndentedString(virtualDiskId)).append("\n");
    sb.append("    virtualDiskName: ").append(toIndentedString(virtualDiskName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("controllerId");
    openapiFields.add("independenceMode");
    openapiFields.add("totalSize");
    openapiFields.add("virtualDiskId");
    openapiFields.add("virtualDiskName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("controllerId");
    openapiRequiredFields.add("independenceMode");
    openapiRequiredFields.add("totalSize");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualDisk
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualDisk.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualDisk is not found in the empty JSON string", VirtualDisk.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualDisk.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualDisk` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VirtualDisk.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("controllerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `controllerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("controllerId").toString()));
      }
      if (!jsonObj.get("independenceMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `independenceMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("independenceMode").toString()));
      }
      // validate the required field `independenceMode`
      IndependenceModeEnum.validateJsonElement(jsonObj.get("independenceMode"));
      if ((jsonObj.get("virtualDiskId") != null && !jsonObj.get("virtualDiskId").isJsonNull()) && !jsonObj.get("virtualDiskId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualDiskId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualDiskId").toString()));
      }
      if ((jsonObj.get("virtualDiskName") != null && !jsonObj.get("virtualDiskName").isJsonNull()) && !jsonObj.get("virtualDiskName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualDiskName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virtualDiskName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualDisk.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualDisk' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualDisk> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualDisk.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualDisk>() {
           @Override
           public void write(JsonWriter out, VirtualDisk value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualDisk read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualDisk given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualDisk
   * @throws IOException if the JSON string is invalid with respect to VirtualDisk
   */
  public static VirtualDisk fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualDisk.class);
  }

  /**
   * Convert an instance of VirtualDisk to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

