/*
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CSRPError;
import org.openapitools.client.model.DedicatedCloudNode;
import org.openapitools.client.model.DedicatedCloudNodeListResponse;
import org.openapitools.client.model.PatchPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DedicatedCloudNodesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DedicatedCloudNodesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DedicatedCloudNodesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dedicatedCloudNodesCreateOrUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesCreateOrUpdateCall(String subscriptionId, String resourceGroupName, String referer, String dedicatedCloudNodeName, String apiVersion, DedicatedCloudNode dedicatedCloudNodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dedicatedCloudNodeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudNodeName" + "}", localVarApiClient.escapeString(dedicatedCloudNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (referer != null) {
            localVarHeaderParams.put("Referer", localVarApiClient.parameterToString(referer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudNodesCreateOrUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String referer, String dedicatedCloudNodeName, String apiVersion, DedicatedCloudNode dedicatedCloudNodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'referer' is set
        if (referer == null) {
            throw new ApiException("Missing the required parameter 'referer' when calling dedicatedCloudNodesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudNodeName' is set
        if (dedicatedCloudNodeName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudNodeRequest' is set
        if (dedicatedCloudNodeRequest == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudNodeRequest' when calling dedicatedCloudNodesCreateOrUpdate(Async)");
        }

        return dedicatedCloudNodesCreateOrUpdateCall(subscriptionId, resourceGroupName, referer, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, _callback);

    }

    /**
     * Implements dedicated cloud node PUT method
     * Returns dedicated cloud node by its name
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request (required)
     * @return DedicatedCloudNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudNode dedicatedCloudNodesCreateOrUpdate(String subscriptionId, String resourceGroupName, String referer, String dedicatedCloudNodeName, String apiVersion, DedicatedCloudNode dedicatedCloudNodeRequest) throws ApiException {
        ApiResponse<DedicatedCloudNode> localVarResp = dedicatedCloudNodesCreateOrUpdateWithHttpInfo(subscriptionId, resourceGroupName, referer, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest);
        return localVarResp.getData();
    }

    /**
     * Implements dedicated cloud node PUT method
     * Returns dedicated cloud node by its name
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request (required)
     * @return ApiResponse&lt;DedicatedCloudNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudNode> dedicatedCloudNodesCreateOrUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String referer, String dedicatedCloudNodeName, String apiVersion, DedicatedCloudNode dedicatedCloudNodeRequest) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudNodesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, referer, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements dedicated cloud node PUT method (asynchronously)
     * Returns dedicated cloud node by its name
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param referer referer url (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Create Dedicated Cloud Node request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  * Retry-After -  <br>  * Azure-AsyncOperation -  <br>  * Location -  <br>  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesCreateOrUpdateAsync(String subscriptionId, String resourceGroupName, String referer, String dedicatedCloudNodeName, String apiVersion, DedicatedCloudNode dedicatedCloudNodeRequest, final ApiCallback<DedicatedCloudNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudNodesCreateOrUpdateValidateBeforeCall(subscriptionId, resourceGroupName, referer, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudNodesDelete
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesDeleteCall(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudNodeName" + "}", localVarApiClient.escapeString(dedicatedCloudNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudNodesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesDelete(Async)");
        }

        // verify the required parameter 'dedicatedCloudNodeName' is set
        if (dedicatedCloudNodeName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesDelete(Async)");
        }

        return dedicatedCloudNodesDeleteCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, _callback);

    }

    /**
     * Implements dedicated cloud node DELETE method
     * Delete dedicated cloud node
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public void dedicatedCloudNodesDelete(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion) throws ApiException {
        dedicatedCloudNodesDeleteWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion);
    }

    /**
     * Implements dedicated cloud node DELETE method
     * Delete dedicated cloud node
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public ApiResponse<Void> dedicatedCloudNodesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudNodesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Implements dedicated cloud node DELETE method (asynchronously)
     * Delete dedicated cloud node
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> no content. resource does not exist and the request is well formed </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  * Content-Type -  <br>  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesDeleteAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudNodesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudNodesGet
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesGetCall(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudNodeName" + "}", localVarApiClient.escapeString(dedicatedCloudNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudNodesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesGet(Async)");
        }

        // verify the required parameter 'dedicatedCloudNodeName' is set
        if (dedicatedCloudNodeName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesGet(Async)");
        }

        return dedicatedCloudNodesGetCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, _callback);

    }

    /**
     * Implements dedicated cloud node GET method
     * Returns dedicated cloud node
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @return DedicatedCloudNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudNode dedicatedCloudNodesGet(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion) throws ApiException {
        ApiResponse<DedicatedCloudNode> localVarResp = dedicatedCloudNodesGetWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Implements dedicated cloud node GET method
     * Returns dedicated cloud node
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;DedicatedCloudNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudNode> dedicatedCloudNodesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudNodesGetValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements dedicated cloud node GET method (asynchronously)
     * Returns dedicated cloud node
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesGetAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, final ApiCallback<DedicatedCloudNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudNodesGetValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudNodesListByResourceGroup
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudNodesListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesListByResourceGroup(Async)");
        }

        return dedicatedCloudNodesListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * Implements list of dedicated cloud nodes within RG method
     * Returns list of dedicate cloud nodes within resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return DedicatedCloudNodeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudNodeListResponse dedicatedCloudNodesListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<DedicatedCloudNodeListResponse> localVarResp = dedicatedCloudNodesListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Implements list of dedicated cloud nodes within RG method
     * Returns list of dedicate cloud nodes within resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return ApiResponse&lt;DedicatedCloudNodeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudNodeListResponse> dedicatedCloudNodesListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudNodesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudNodeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements list of dedicated cloud nodes within RG method (asynchronously)
     * Returns list of dedicate cloud nodes within resource group
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<DedicatedCloudNodeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudNodesListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudNodeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudNodesListBySubscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesListBySubscriptionCall(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        if ($top != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$top", $top));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudNodesListBySubscriptionValidateBeforeCall(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesListBySubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesListBySubscription(Async)");
        }

        return dedicatedCloudNodesListBySubscriptionCall(subscriptionId, apiVersion, $filter, $top, $skipToken, _callback);

    }

    /**
     * Implements list of dedicated cloud nodes within subscription method
     * Returns list of dedicate cloud nodes within subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return DedicatedCloudNodeListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudNodeListResponse dedicatedCloudNodesListBySubscription(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        ApiResponse<DedicatedCloudNodeListResponse> localVarResp = dedicatedCloudNodesListBySubscriptionWithHttpInfo(subscriptionId, apiVersion, $filter, $top, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method
     * Returns list of dedicate cloud nodes within subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @return ApiResponse&lt;DedicatedCloudNodeListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudNodeListResponse> dedicatedCloudNodesListBySubscriptionWithHttpInfo(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudNodesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skipToken, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudNodeListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements list of dedicated cloud nodes within subscription method (asynchronously)
     * Returns list of dedicate cloud nodes within subscription
     * @param subscriptionId The subscription ID. (required)
     * @param apiVersion Client API version. (required)
     * @param $filter The filter to apply on the list operation (optional)
     * @param $top The maximum number of record sets to return (optional)
     * @param $skipToken to be used by nextLink implementation (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesListBySubscriptionAsync(String subscriptionId, String apiVersion, String $filter, Integer $top, String $skipToken, final ApiCallback<DedicatedCloudNodeListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudNodesListBySubscriptionValidateBeforeCall(subscriptionId, apiVersion, $filter, $top, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudNodeListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dedicatedCloudNodesUpdate
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Patch Dedicated Cloud Node request (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesUpdateCall(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, PatchPayload dedicatedCloudNodeRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dedicatedCloudNodeRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareCloudSimple/dedicatedCloudNodes/{dedicatedCloudNodeName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dedicatedCloudNodeName" + "}", localVarApiClient.escapeString(dedicatedCloudNodeName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dedicatedCloudNodesUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, PatchPayload dedicatedCloudNodeRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dedicatedCloudNodesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dedicatedCloudNodesUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudNodeName' is set
        if (dedicatedCloudNodeName == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudNodeName' when calling dedicatedCloudNodesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dedicatedCloudNodesUpdate(Async)");
        }

        // verify the required parameter 'dedicatedCloudNodeRequest' is set
        if (dedicatedCloudNodeRequest == null) {
            throw new ApiException("Missing the required parameter 'dedicatedCloudNodeRequest' when calling dedicatedCloudNodesUpdate(Async)");
        }

        return dedicatedCloudNodesUpdateCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, _callback);

    }

    /**
     * Implements dedicated cloud node PATCH method
     * Patches dedicated node properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Patch Dedicated Cloud Node request (required)
     * @return DedicatedCloudNode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public DedicatedCloudNode dedicatedCloudNodesUpdate(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, PatchPayload dedicatedCloudNodeRequest) throws ApiException {
        ApiResponse<DedicatedCloudNode> localVarResp = dedicatedCloudNodesUpdateWithHttpInfo(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest);
        return localVarResp.getData();
    }

    /**
     * Implements dedicated cloud node PATCH method
     * Patches dedicated node properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Patch Dedicated Cloud Node request (required)
     * @return ApiResponse&lt;DedicatedCloudNode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DedicatedCloudNode> dedicatedCloudNodesUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, PatchPayload dedicatedCloudNodeRequest) throws ApiException {
        okhttp3.Call localVarCall = dedicatedCloudNodesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, null);
        Type localVarReturnType = new TypeToken<DedicatedCloudNode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Implements dedicated cloud node PATCH method (asynchronously)
     * Patches dedicated node properties
     * @param subscriptionId The subscription ID. (required)
     * @param resourceGroupName The name of the resource group (required)
     * @param dedicatedCloudNodeName dedicated cloud node name (required)
     * @param apiVersion Client API version. (required)
     * @param dedicatedCloudNodeRequest Patch Dedicated Cloud Node request (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If resource is created or updated successfully, 200 should be returned </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> General Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dedicatedCloudNodesUpdateAsync(String subscriptionId, String resourceGroupName, String dedicatedCloudNodeName, String apiVersion, PatchPayload dedicatedCloudNodeRequest, final ApiCallback<DedicatedCloudNode> _callback) throws ApiException {

        okhttp3.Call localVarCall = dedicatedCloudNodesUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dedicatedCloudNodeName, apiVersion, dedicatedCloudNodeRequest, _callback);
        Type localVarReturnType = new TypeToken<DedicatedCloudNode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
