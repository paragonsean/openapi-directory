/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestOSNICCustomization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestOSNICCustomization::OAIGuestOSNICCustomization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestOSNICCustomization::OAIGuestOSNICCustomization() {
    this->initializeModel();
}

OAIGuestOSNICCustomization::~OAIGuestOSNICCustomization() {}

void OAIGuestOSNICCustomization::initializeModel() {

    m_allocation_isSet = false;
    m_allocation_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_address_isSet = false;
    m_ip_address_isValid = false;

    m_mask_isSet = false;
    m_mask_isValid = false;

    m_primary_wins_server_isSet = false;
    m_primary_wins_server_isValid = false;

    m_secondary_wins_server_isSet = false;
    m_secondary_wins_server_isValid = false;
}

void OAIGuestOSNICCustomization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestOSNICCustomization::fromJsonObject(QJsonObject json) {

    m_allocation_isValid = ::OpenAPI::fromJsonValue(m_allocation, json[QString("allocation")]);
    m_allocation_isSet = !json[QString("allocation")].isNull() && m_allocation_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ip_address_isValid = ::OpenAPI::fromJsonValue(m_ip_address, json[QString("ipAddress")]);
    m_ip_address_isSet = !json[QString("ipAddress")].isNull() && m_ip_address_isValid;

    m_mask_isValid = ::OpenAPI::fromJsonValue(m_mask, json[QString("mask")]);
    m_mask_isSet = !json[QString("mask")].isNull() && m_mask_isValid;

    m_primary_wins_server_isValid = ::OpenAPI::fromJsonValue(m_primary_wins_server, json[QString("primaryWinsServer")]);
    m_primary_wins_server_isSet = !json[QString("primaryWinsServer")].isNull() && m_primary_wins_server_isValid;

    m_secondary_wins_server_isValid = ::OpenAPI::fromJsonValue(m_secondary_wins_server, json[QString("secondaryWinsServer")]);
    m_secondary_wins_server_isSet = !json[QString("secondaryWinsServer")].isNull() && m_secondary_wins_server_isValid;
}

QString OAIGuestOSNICCustomization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestOSNICCustomization::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_isSet) {
        obj.insert(QString("allocation"), ::OpenAPI::toJsonValue(m_allocation));
    }
    if (m_dns_servers.size() > 0) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_gateway.size() > 0) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip_address_isSet) {
        obj.insert(QString("ipAddress"), ::OpenAPI::toJsonValue(m_ip_address));
    }
    if (m_mask_isSet) {
        obj.insert(QString("mask"), ::OpenAPI::toJsonValue(m_mask));
    }
    if (m_primary_wins_server_isSet) {
        obj.insert(QString("primaryWinsServer"), ::OpenAPI::toJsonValue(m_primary_wins_server));
    }
    if (m_secondary_wins_server_isSet) {
        obj.insert(QString("secondaryWinsServer"), ::OpenAPI::toJsonValue(m_secondary_wins_server));
    }
    return obj;
}

QString OAIGuestOSNICCustomization::getAllocation() const {
    return m_allocation;
}
void OAIGuestOSNICCustomization::setAllocation(const QString &allocation) {
    m_allocation = allocation;
    m_allocation_isSet = true;
}

bool OAIGuestOSNICCustomization::is_allocation_Set() const{
    return m_allocation_isSet;
}

bool OAIGuestOSNICCustomization::is_allocation_Valid() const{
    return m_allocation_isValid;
}

QList<QString> OAIGuestOSNICCustomization::getDnsServers() const {
    return m_dns_servers;
}
void OAIGuestOSNICCustomization::setDnsServers(const QList<QString> &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIGuestOSNICCustomization::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIGuestOSNICCustomization::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

QList<QString> OAIGuestOSNICCustomization::getGateway() const {
    return m_gateway;
}
void OAIGuestOSNICCustomization::setGateway(const QList<QString> &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAIGuestOSNICCustomization::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAIGuestOSNICCustomization::is_gateway_Valid() const{
    return m_gateway_isValid;
}

QString OAIGuestOSNICCustomization::getIpAddress() const {
    return m_ip_address;
}
void OAIGuestOSNICCustomization::setIpAddress(const QString &ip_address) {
    m_ip_address = ip_address;
    m_ip_address_isSet = true;
}

bool OAIGuestOSNICCustomization::is_ip_address_Set() const{
    return m_ip_address_isSet;
}

bool OAIGuestOSNICCustomization::is_ip_address_Valid() const{
    return m_ip_address_isValid;
}

QString OAIGuestOSNICCustomization::getMask() const {
    return m_mask;
}
void OAIGuestOSNICCustomization::setMask(const QString &mask) {
    m_mask = mask;
    m_mask_isSet = true;
}

bool OAIGuestOSNICCustomization::is_mask_Set() const{
    return m_mask_isSet;
}

bool OAIGuestOSNICCustomization::is_mask_Valid() const{
    return m_mask_isValid;
}

QString OAIGuestOSNICCustomization::getPrimaryWinsServer() const {
    return m_primary_wins_server;
}
void OAIGuestOSNICCustomization::setPrimaryWinsServer(const QString &primary_wins_server) {
    m_primary_wins_server = primary_wins_server;
    m_primary_wins_server_isSet = true;
}

bool OAIGuestOSNICCustomization::is_primary_wins_server_Set() const{
    return m_primary_wins_server_isSet;
}

bool OAIGuestOSNICCustomization::is_primary_wins_server_Valid() const{
    return m_primary_wins_server_isValid;
}

QString OAIGuestOSNICCustomization::getSecondaryWinsServer() const {
    return m_secondary_wins_server;
}
void OAIGuestOSNICCustomization::setSecondaryWinsServer(const QString &secondary_wins_server) {
    m_secondary_wins_server = secondary_wins_server;
    m_secondary_wins_server_isSet = true;
}

bool OAIGuestOSNICCustomization::is_secondary_wins_server_Set() const{
    return m_secondary_wins_server_isSet;
}

bool OAIGuestOSNICCustomization::is_secondary_wins_server_Valid() const{
    return m_secondary_wins_server_isValid;
}

bool OAIGuestOSNICCustomization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_gateway.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mask_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_wins_server_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_wins_server_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestOSNICCustomization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
