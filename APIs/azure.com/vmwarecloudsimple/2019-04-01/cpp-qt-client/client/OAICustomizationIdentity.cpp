/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomizationIdentity.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomizationIdentity::OAICustomizationIdentity(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomizationIdentity::OAICustomizationIdentity() {
    this->initializeModel();
}

OAICustomizationIdentity::~OAICustomizationIdentity() {}

void OAICustomizationIdentity::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_user_data_isSet = false;
    m_user_data_isValid = false;
}

void OAICustomizationIdentity::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomizationIdentity::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_user_data_isValid = ::OpenAPI::fromJsonValue(m_user_data, json[QString("userData")]);
    m_user_data_isSet = !json[QString("userData")].isNull() && m_user_data_isValid;
}

QString OAICustomizationIdentity::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomizationIdentity::asJsonObject() const {
    QJsonObject obj;
    if (m_data_isSet) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_host_name.isSet()) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_user_data.isSet()) {
        obj.insert(QString("userData"), ::OpenAPI::toJsonValue(m_user_data));
    }
    return obj;
}

QString OAICustomizationIdentity::getData() const {
    return m_data;
}
void OAICustomizationIdentity::setData(const QString &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICustomizationIdentity::is_data_Set() const{
    return m_data_isSet;
}

bool OAICustomizationIdentity::is_data_Valid() const{
    return m_data_isValid;
}

OAICustomizationHostName OAICustomizationIdentity::getHostName() const {
    return m_host_name;
}
void OAICustomizationIdentity::setHostName(const OAICustomizationHostName &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAICustomizationIdentity::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAICustomizationIdentity::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAICustomizationIdentity::getType() const {
    return m_type;
}
void OAICustomizationIdentity::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAICustomizationIdentity::is_type_Set() const{
    return m_type_isSet;
}

bool OAICustomizationIdentity::is_type_Valid() const{
    return m_type_isValid;
}

OAICustomizationIdentity_userData OAICustomizationIdentity::getUserData() const {
    return m_user_data;
}
void OAICustomizationIdentity::setUserData(const OAICustomizationIdentity_userData &user_data) {
    m_user_data = user_data;
    m_user_data_isSet = true;
}

bool OAICustomizationIdentity::is_user_data_Set() const{
    return m_user_data_isSet;
}

bool OAICustomizationIdentity::is_user_data_Valid() const{
    return m_user_data_isValid;
}

bool OAICustomizationIdentity::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_data.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomizationIdentity::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
