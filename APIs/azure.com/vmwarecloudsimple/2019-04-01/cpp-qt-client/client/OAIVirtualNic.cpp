/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualNic.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualNic::OAIVirtualNic(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualNic::OAIVirtualNic() {
    this->initializeModel();
}

OAIVirtualNic::~OAIVirtualNic() {}

void OAIVirtualNic::initializeModel() {

    m_customization_isSet = false;
    m_customization_isValid = false;

    m_ip_addresses_isSet = false;
    m_ip_addresses_isValid = false;

    m_mac_address_isSet = false;
    m_mac_address_isValid = false;

    m_network_isSet = false;
    m_network_isValid = false;

    m_nic_type_isSet = false;
    m_nic_type_isValid = false;

    m_power_on_boot_isSet = false;
    m_power_on_boot_isValid = false;

    m_virtual_nic_id_isSet = false;
    m_virtual_nic_id_isValid = false;

    m_virtual_nic_name_isSet = false;
    m_virtual_nic_name_isValid = false;
}

void OAIVirtualNic::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualNic::fromJsonObject(QJsonObject json) {

    m_customization_isValid = ::OpenAPI::fromJsonValue(m_customization, json[QString("customization")]);
    m_customization_isSet = !json[QString("customization")].isNull() && m_customization_isValid;

    m_ip_addresses_isValid = ::OpenAPI::fromJsonValue(m_ip_addresses, json[QString("ipAddresses")]);
    m_ip_addresses_isSet = !json[QString("ipAddresses")].isNull() && m_ip_addresses_isValid;

    m_mac_address_isValid = ::OpenAPI::fromJsonValue(m_mac_address, json[QString("macAddress")]);
    m_mac_address_isSet = !json[QString("macAddress")].isNull() && m_mac_address_isValid;

    m_network_isValid = ::OpenAPI::fromJsonValue(m_network, json[QString("network")]);
    m_network_isSet = !json[QString("network")].isNull() && m_network_isValid;

    m_nic_type_isValid = ::OpenAPI::fromJsonValue(m_nic_type, json[QString("nicType")]);
    m_nic_type_isSet = !json[QString("nicType")].isNull() && m_nic_type_isValid;

    m_power_on_boot_isValid = ::OpenAPI::fromJsonValue(m_power_on_boot, json[QString("powerOnBoot")]);
    m_power_on_boot_isSet = !json[QString("powerOnBoot")].isNull() && m_power_on_boot_isValid;

    m_virtual_nic_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_nic_id, json[QString("virtualNicId")]);
    m_virtual_nic_id_isSet = !json[QString("virtualNicId")].isNull() && m_virtual_nic_id_isValid;

    m_virtual_nic_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_nic_name, json[QString("virtualNicName")]);
    m_virtual_nic_name_isSet = !json[QString("virtualNicName")].isNull() && m_virtual_nic_name_isValid;
}

QString OAIVirtualNic::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualNic::asJsonObject() const {
    QJsonObject obj;
    if (m_customization.isSet()) {
        obj.insert(QString("customization"), ::OpenAPI::toJsonValue(m_customization));
    }
    if (m_ip_addresses.size() > 0) {
        obj.insert(QString("ipAddresses"), ::OpenAPI::toJsonValue(m_ip_addresses));
    }
    if (m_mac_address_isSet) {
        obj.insert(QString("macAddress"), ::OpenAPI::toJsonValue(m_mac_address));
    }
    if (m_network.isSet()) {
        obj.insert(QString("network"), ::OpenAPI::toJsonValue(m_network));
    }
    if (m_nic_type_isSet) {
        obj.insert(QString("nicType"), ::OpenAPI::toJsonValue(m_nic_type));
    }
    if (m_power_on_boot_isSet) {
        obj.insert(QString("powerOnBoot"), ::OpenAPI::toJsonValue(m_power_on_boot));
    }
    if (m_virtual_nic_id_isSet) {
        obj.insert(QString("virtualNicId"), ::OpenAPI::toJsonValue(m_virtual_nic_id));
    }
    if (m_virtual_nic_name_isSet) {
        obj.insert(QString("virtualNicName"), ::OpenAPI::toJsonValue(m_virtual_nic_name));
    }
    return obj;
}

OAIGuestOSNICCustomization OAIVirtualNic::getCustomization() const {
    return m_customization;
}
void OAIVirtualNic::setCustomization(const OAIGuestOSNICCustomization &customization) {
    m_customization = customization;
    m_customization_isSet = true;
}

bool OAIVirtualNic::is_customization_Set() const{
    return m_customization_isSet;
}

bool OAIVirtualNic::is_customization_Valid() const{
    return m_customization_isValid;
}

QList<QString> OAIVirtualNic::getIpAddresses() const {
    return m_ip_addresses;
}
void OAIVirtualNic::setIpAddresses(const QList<QString> &ip_addresses) {
    m_ip_addresses = ip_addresses;
    m_ip_addresses_isSet = true;
}

bool OAIVirtualNic::is_ip_addresses_Set() const{
    return m_ip_addresses_isSet;
}

bool OAIVirtualNic::is_ip_addresses_Valid() const{
    return m_ip_addresses_isValid;
}

QString OAIVirtualNic::getMacAddress() const {
    return m_mac_address;
}
void OAIVirtualNic::setMacAddress(const QString &mac_address) {
    m_mac_address = mac_address;
    m_mac_address_isSet = true;
}

bool OAIVirtualNic::is_mac_address_Set() const{
    return m_mac_address_isSet;
}

bool OAIVirtualNic::is_mac_address_Valid() const{
    return m_mac_address_isValid;
}

OAIVirtualNetwork OAIVirtualNic::getNetwork() const {
    return m_network;
}
void OAIVirtualNic::setNetwork(const OAIVirtualNetwork &network) {
    m_network = network;
    m_network_isSet = true;
}

bool OAIVirtualNic::is_network_Set() const{
    return m_network_isSet;
}

bool OAIVirtualNic::is_network_Valid() const{
    return m_network_isValid;
}

QString OAIVirtualNic::getNicType() const {
    return m_nic_type;
}
void OAIVirtualNic::setNicType(const QString &nic_type) {
    m_nic_type = nic_type;
    m_nic_type_isSet = true;
}

bool OAIVirtualNic::is_nic_type_Set() const{
    return m_nic_type_isSet;
}

bool OAIVirtualNic::is_nic_type_Valid() const{
    return m_nic_type_isValid;
}

bool OAIVirtualNic::isPowerOnBoot() const {
    return m_power_on_boot;
}
void OAIVirtualNic::setPowerOnBoot(const bool &power_on_boot) {
    m_power_on_boot = power_on_boot;
    m_power_on_boot_isSet = true;
}

bool OAIVirtualNic::is_power_on_boot_Set() const{
    return m_power_on_boot_isSet;
}

bool OAIVirtualNic::is_power_on_boot_Valid() const{
    return m_power_on_boot_isValid;
}

QString OAIVirtualNic::getVirtualNicId() const {
    return m_virtual_nic_id;
}
void OAIVirtualNic::setVirtualNicId(const QString &virtual_nic_id) {
    m_virtual_nic_id = virtual_nic_id;
    m_virtual_nic_id_isSet = true;
}

bool OAIVirtualNic::is_virtual_nic_id_Set() const{
    return m_virtual_nic_id_isSet;
}

bool OAIVirtualNic::is_virtual_nic_id_Valid() const{
    return m_virtual_nic_id_isValid;
}

QString OAIVirtualNic::getVirtualNicName() const {
    return m_virtual_nic_name;
}
void OAIVirtualNic::setVirtualNicName(const QString &virtual_nic_name) {
    m_virtual_nic_name = virtual_nic_name;
    m_virtual_nic_name_isSet = true;
}

bool OAIVirtualNic::is_virtual_nic_name_Set() const{
    return m_virtual_nic_name_isSet;
}

bool OAIVirtualNic::is_virtual_nic_name_Valid() const{
    return m_virtual_nic_name_isValid;
}

bool OAIVirtualNic::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip_addresses.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_network.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_nic_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_power_on_boot_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_nic_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_nic_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualNic::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_network_isValid && m_nic_type_isValid && true;
}

} // namespace OpenAPI
