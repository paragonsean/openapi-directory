/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineProperties::OAIVirtualMachineProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineProperties::OAIVirtualMachineProperties() {
    this->initializeModel();
}

OAIVirtualMachineProperties::~OAIVirtualMachineProperties() {}

void OAIVirtualMachineProperties::initializeModel() {

    m_amount_of_ram_isSet = false;
    m_amount_of_ram_isValid = false;

    m_controllers_isSet = false;
    m_controllers_isValid = false;

    m_customization_isSet = false;
    m_customization_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_dnsname_isSet = false;
    m_dnsname_isValid = false;

    m_expose_to_guest_vm_isSet = false;
    m_expose_to_guest_vm_isValid = false;

    m_folder_isSet = false;
    m_folder_isValid = false;

    m_guest_os_isSet = false;
    m_guest_os_isValid = false;

    m_guest_os_type_isSet = false;
    m_guest_os_type_isValid = false;

    m_nics_isSet = false;
    m_nics_isValid = false;

    m_number_of_cores_isSet = false;
    m_number_of_cores_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_private_cloud_id_isSet = false;
    m_private_cloud_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_public_ip_isSet = false;
    m_public_ip_isValid = false;

    m_resource_pool_isSet = false;
    m_resource_pool_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_template_id_isSet = false;
    m_template_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;

    m_v_sphere_networks_isSet = false;
    m_v_sphere_networks_isValid = false;

    m_vm_id_isSet = false;
    m_vm_id_isValid = false;

    m_vmwaretools_isSet = false;
    m_vmwaretools_isValid = false;
}

void OAIVirtualMachineProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineProperties::fromJsonObject(QJsonObject json) {

    m_amount_of_ram_isValid = ::OpenAPI::fromJsonValue(m_amount_of_ram, json[QString("amountOfRam")]);
    m_amount_of_ram_isSet = !json[QString("amountOfRam")].isNull() && m_amount_of_ram_isValid;

    m_controllers_isValid = ::OpenAPI::fromJsonValue(m_controllers, json[QString("controllers")]);
    m_controllers_isSet = !json[QString("controllers")].isNull() && m_controllers_isValid;

    m_customization_isValid = ::OpenAPI::fromJsonValue(m_customization, json[QString("customization")]);
    m_customization_isSet = !json[QString("customization")].isNull() && m_customization_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_dnsname_isValid = ::OpenAPI::fromJsonValue(m_dnsname, json[QString("dnsname")]);
    m_dnsname_isSet = !json[QString("dnsname")].isNull() && m_dnsname_isValid;

    m_expose_to_guest_vm_isValid = ::OpenAPI::fromJsonValue(m_expose_to_guest_vm, json[QString("exposeToGuestVM")]);
    m_expose_to_guest_vm_isSet = !json[QString("exposeToGuestVM")].isNull() && m_expose_to_guest_vm_isValid;

    m_folder_isValid = ::OpenAPI::fromJsonValue(m_folder, json[QString("folder")]);
    m_folder_isSet = !json[QString("folder")].isNull() && m_folder_isValid;

    m_guest_os_isValid = ::OpenAPI::fromJsonValue(m_guest_os, json[QString("guestOS")]);
    m_guest_os_isSet = !json[QString("guestOS")].isNull() && m_guest_os_isValid;

    m_guest_os_type_isValid = ::OpenAPI::fromJsonValue(m_guest_os_type, json[QString("guestOSType")]);
    m_guest_os_type_isSet = !json[QString("guestOSType")].isNull() && m_guest_os_type_isValid;

    m_nics_isValid = ::OpenAPI::fromJsonValue(m_nics, json[QString("nics")]);
    m_nics_isSet = !json[QString("nics")].isNull() && m_nics_isValid;

    m_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores, json[QString("numberOfCores")]);
    m_number_of_cores_isSet = !json[QString("numberOfCores")].isNull() && m_number_of_cores_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_private_cloud_id_isValid = ::OpenAPI::fromJsonValue(m_private_cloud_id, json[QString("privateCloudId")]);
    m_private_cloud_id_isSet = !json[QString("privateCloudId")].isNull() && m_private_cloud_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_public_ip_isValid = ::OpenAPI::fromJsonValue(m_public_ip, json[QString("publicIP")]);
    m_public_ip_isSet = !json[QString("publicIP")].isNull() && m_public_ip_isValid;

    m_resource_pool_isValid = ::OpenAPI::fromJsonValue(m_resource_pool, json[QString("resourcePool")]);
    m_resource_pool_isSet = !json[QString("resourcePool")].isNull() && m_resource_pool_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_template_id_isValid = ::OpenAPI::fromJsonValue(m_template_id, json[QString("templateId")]);
    m_template_id_isSet = !json[QString("templateId")].isNull() && m_template_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;

    m_v_sphere_networks_isValid = ::OpenAPI::fromJsonValue(m_v_sphere_networks, json[QString("vSphereNetworks")]);
    m_v_sphere_networks_isSet = !json[QString("vSphereNetworks")].isNull() && m_v_sphere_networks_isValid;

    m_vm_id_isValid = ::OpenAPI::fromJsonValue(m_vm_id, json[QString("vmId")]);
    m_vm_id_isSet = !json[QString("vmId")].isNull() && m_vm_id_isValid;

    m_vmwaretools_isValid = ::OpenAPI::fromJsonValue(m_vmwaretools, json[QString("vmwaretools")]);
    m_vmwaretools_isSet = !json[QString("vmwaretools")].isNull() && m_vmwaretools_isValid;
}

QString OAIVirtualMachineProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_of_ram_isSet) {
        obj.insert(QString("amountOfRam"), ::OpenAPI::toJsonValue(m_amount_of_ram));
    }
    if (m_controllers.size() > 0) {
        obj.insert(QString("controllers"), ::OpenAPI::toJsonValue(m_controllers));
    }
    if (m_customization.isSet()) {
        obj.insert(QString("customization"), ::OpenAPI::toJsonValue(m_customization));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_dnsname_isSet) {
        obj.insert(QString("dnsname"), ::OpenAPI::toJsonValue(m_dnsname));
    }
    if (m_expose_to_guest_vm_isSet) {
        obj.insert(QString("exposeToGuestVM"), ::OpenAPI::toJsonValue(m_expose_to_guest_vm));
    }
    if (m_folder_isSet) {
        obj.insert(QString("folder"), ::OpenAPI::toJsonValue(m_folder));
    }
    if (m_guest_os_isSet) {
        obj.insert(QString("guestOS"), ::OpenAPI::toJsonValue(m_guest_os));
    }
    if (m_guest_os_type_isSet) {
        obj.insert(QString("guestOSType"), ::OpenAPI::toJsonValue(m_guest_os_type));
    }
    if (m_nics.size() > 0) {
        obj.insert(QString("nics"), ::OpenAPI::toJsonValue(m_nics));
    }
    if (m_number_of_cores_isSet) {
        obj.insert(QString("numberOfCores"), ::OpenAPI::toJsonValue(m_number_of_cores));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_private_cloud_id_isSet) {
        obj.insert(QString("privateCloudId"), ::OpenAPI::toJsonValue(m_private_cloud_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_public_ip_isSet) {
        obj.insert(QString("publicIP"), ::OpenAPI::toJsonValue(m_public_ip));
    }
    if (m_resource_pool.isSet()) {
        obj.insert(QString("resourcePool"), ::OpenAPI::toJsonValue(m_resource_pool));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_template_id_isSet) {
        obj.insert(QString("templateId"), ::OpenAPI::toJsonValue(m_template_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    if (m_v_sphere_networks.size() > 0) {
        obj.insert(QString("vSphereNetworks"), ::OpenAPI::toJsonValue(m_v_sphere_networks));
    }
    if (m_vm_id_isSet) {
        obj.insert(QString("vmId"), ::OpenAPI::toJsonValue(m_vm_id));
    }
    if (m_vmwaretools_isSet) {
        obj.insert(QString("vmwaretools"), ::OpenAPI::toJsonValue(m_vmwaretools));
    }
    return obj;
}

qint32 OAIVirtualMachineProperties::getAmountOfRam() const {
    return m_amount_of_ram;
}
void OAIVirtualMachineProperties::setAmountOfRam(const qint32 &amount_of_ram) {
    m_amount_of_ram = amount_of_ram;
    m_amount_of_ram_isSet = true;
}

bool OAIVirtualMachineProperties::is_amount_of_ram_Set() const{
    return m_amount_of_ram_isSet;
}

bool OAIVirtualMachineProperties::is_amount_of_ram_Valid() const{
    return m_amount_of_ram_isValid;
}

QList<OAIVirtualDiskController> OAIVirtualMachineProperties::getControllers() const {
    return m_controllers;
}
void OAIVirtualMachineProperties::setControllers(const QList<OAIVirtualDiskController> &controllers) {
    m_controllers = controllers;
    m_controllers_isSet = true;
}

bool OAIVirtualMachineProperties::is_controllers_Set() const{
    return m_controllers_isSet;
}

bool OAIVirtualMachineProperties::is_controllers_Valid() const{
    return m_controllers_isValid;
}

OAIGuestOSCustomization OAIVirtualMachineProperties::getCustomization() const {
    return m_customization;
}
void OAIVirtualMachineProperties::setCustomization(const OAIGuestOSCustomization &customization) {
    m_customization = customization;
    m_customization_isSet = true;
}

bool OAIVirtualMachineProperties::is_customization_Set() const{
    return m_customization_isSet;
}

bool OAIVirtualMachineProperties::is_customization_Valid() const{
    return m_customization_isValid;
}

QList<OAIVirtualDisk> OAIVirtualMachineProperties::getDisks() const {
    return m_disks;
}
void OAIVirtualMachineProperties::setDisks(const QList<OAIVirtualDisk> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIVirtualMachineProperties::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIVirtualMachineProperties::is_disks_Valid() const{
    return m_disks_isValid;
}

QString OAIVirtualMachineProperties::getDnsname() const {
    return m_dnsname;
}
void OAIVirtualMachineProperties::setDnsname(const QString &dnsname) {
    m_dnsname = dnsname;
    m_dnsname_isSet = true;
}

bool OAIVirtualMachineProperties::is_dnsname_Set() const{
    return m_dnsname_isSet;
}

bool OAIVirtualMachineProperties::is_dnsname_Valid() const{
    return m_dnsname_isValid;
}

bool OAIVirtualMachineProperties::isExposeToGuestVm() const {
    return m_expose_to_guest_vm;
}
void OAIVirtualMachineProperties::setExposeToGuestVm(const bool &expose_to_guest_vm) {
    m_expose_to_guest_vm = expose_to_guest_vm;
    m_expose_to_guest_vm_isSet = true;
}

bool OAIVirtualMachineProperties::is_expose_to_guest_vm_Set() const{
    return m_expose_to_guest_vm_isSet;
}

bool OAIVirtualMachineProperties::is_expose_to_guest_vm_Valid() const{
    return m_expose_to_guest_vm_isValid;
}

QString OAIVirtualMachineProperties::getFolder() const {
    return m_folder;
}
void OAIVirtualMachineProperties::setFolder(const QString &folder) {
    m_folder = folder;
    m_folder_isSet = true;
}

bool OAIVirtualMachineProperties::is_folder_Set() const{
    return m_folder_isSet;
}

bool OAIVirtualMachineProperties::is_folder_Valid() const{
    return m_folder_isValid;
}

QString OAIVirtualMachineProperties::getGuestOs() const {
    return m_guest_os;
}
void OAIVirtualMachineProperties::setGuestOs(const QString &guest_os) {
    m_guest_os = guest_os;
    m_guest_os_isSet = true;
}

bool OAIVirtualMachineProperties::is_guest_os_Set() const{
    return m_guest_os_isSet;
}

bool OAIVirtualMachineProperties::is_guest_os_Valid() const{
    return m_guest_os_isValid;
}

QString OAIVirtualMachineProperties::getGuestOsType() const {
    return m_guest_os_type;
}
void OAIVirtualMachineProperties::setGuestOsType(const QString &guest_os_type) {
    m_guest_os_type = guest_os_type;
    m_guest_os_type_isSet = true;
}

bool OAIVirtualMachineProperties::is_guest_os_type_Set() const{
    return m_guest_os_type_isSet;
}

bool OAIVirtualMachineProperties::is_guest_os_type_Valid() const{
    return m_guest_os_type_isValid;
}

QList<OAIVirtualNic> OAIVirtualMachineProperties::getNics() const {
    return m_nics;
}
void OAIVirtualMachineProperties::setNics(const QList<OAIVirtualNic> &nics) {
    m_nics = nics;
    m_nics_isSet = true;
}

bool OAIVirtualMachineProperties::is_nics_Set() const{
    return m_nics_isSet;
}

bool OAIVirtualMachineProperties::is_nics_Valid() const{
    return m_nics_isValid;
}

qint32 OAIVirtualMachineProperties::getNumberOfCores() const {
    return m_number_of_cores;
}
void OAIVirtualMachineProperties::setNumberOfCores(const qint32 &number_of_cores) {
    m_number_of_cores = number_of_cores;
    m_number_of_cores_isSet = true;
}

bool OAIVirtualMachineProperties::is_number_of_cores_Set() const{
    return m_number_of_cores_isSet;
}

bool OAIVirtualMachineProperties::is_number_of_cores_Valid() const{
    return m_number_of_cores_isValid;
}

QString OAIVirtualMachineProperties::getPassword() const {
    return m_password;
}
void OAIVirtualMachineProperties::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIVirtualMachineProperties::is_password_Set() const{
    return m_password_isSet;
}

bool OAIVirtualMachineProperties::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIVirtualMachineProperties::getPrivateCloudId() const {
    return m_private_cloud_id;
}
void OAIVirtualMachineProperties::setPrivateCloudId(const QString &private_cloud_id) {
    m_private_cloud_id = private_cloud_id;
    m_private_cloud_id_isSet = true;
}

bool OAIVirtualMachineProperties::is_private_cloud_id_Set() const{
    return m_private_cloud_id_isSet;
}

bool OAIVirtualMachineProperties::is_private_cloud_id_Valid() const{
    return m_private_cloud_id_isValid;
}

QString OAIVirtualMachineProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualMachineProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualMachineProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualMachineProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIVirtualMachineProperties::getPublicIp() const {
    return m_public_ip;
}
void OAIVirtualMachineProperties::setPublicIp(const QString &public_ip) {
    m_public_ip = public_ip;
    m_public_ip_isSet = true;
}

bool OAIVirtualMachineProperties::is_public_ip_Set() const{
    return m_public_ip_isSet;
}

bool OAIVirtualMachineProperties::is_public_ip_Valid() const{
    return m_public_ip_isValid;
}

OAIResourcePool OAIVirtualMachineProperties::getResourcePool() const {
    return m_resource_pool;
}
void OAIVirtualMachineProperties::setResourcePool(const OAIResourcePool &resource_pool) {
    m_resource_pool = resource_pool;
    m_resource_pool_isSet = true;
}

bool OAIVirtualMachineProperties::is_resource_pool_Set() const{
    return m_resource_pool_isSet;
}

bool OAIVirtualMachineProperties::is_resource_pool_Valid() const{
    return m_resource_pool_isValid;
}

QString OAIVirtualMachineProperties::getStatus() const {
    return m_status;
}
void OAIVirtualMachineProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIVirtualMachineProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIVirtualMachineProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIVirtualMachineProperties::getTemplateId() const {
    return m_template_id;
}
void OAIVirtualMachineProperties::setTemplateId(const QString &template_id) {
    m_template_id = template_id;
    m_template_id_isSet = true;
}

bool OAIVirtualMachineProperties::is_template_id_Set() const{
    return m_template_id_isSet;
}

bool OAIVirtualMachineProperties::is_template_id_Valid() const{
    return m_template_id_isValid;
}

QString OAIVirtualMachineProperties::getUsername() const {
    return m_username;
}
void OAIVirtualMachineProperties::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIVirtualMachineProperties::is_username_Set() const{
    return m_username_isSet;
}

bool OAIVirtualMachineProperties::is_username_Valid() const{
    return m_username_isValid;
}

QList<QString> OAIVirtualMachineProperties::getVSphereNetworks() const {
    return m_v_sphere_networks;
}
void OAIVirtualMachineProperties::setVSphereNetworks(const QList<QString> &v_sphere_networks) {
    m_v_sphere_networks = v_sphere_networks;
    m_v_sphere_networks_isSet = true;
}

bool OAIVirtualMachineProperties::is_v_sphere_networks_Set() const{
    return m_v_sphere_networks_isSet;
}

bool OAIVirtualMachineProperties::is_v_sphere_networks_Valid() const{
    return m_v_sphere_networks_isValid;
}

QString OAIVirtualMachineProperties::getVmId() const {
    return m_vm_id;
}
void OAIVirtualMachineProperties::setVmId(const QString &vm_id) {
    m_vm_id = vm_id;
    m_vm_id_isSet = true;
}

bool OAIVirtualMachineProperties::is_vm_id_Set() const{
    return m_vm_id_isSet;
}

bool OAIVirtualMachineProperties::is_vm_id_Valid() const{
    return m_vm_id_isValid;
}

QString OAIVirtualMachineProperties::getVmwaretools() const {
    return m_vmwaretools;
}
void OAIVirtualMachineProperties::setVmwaretools(const QString &vmwaretools) {
    m_vmwaretools = vmwaretools;
    m_vmwaretools_isSet = true;
}

bool OAIVirtualMachineProperties::is_vmwaretools_Set() const{
    return m_vmwaretools_isSet;
}

bool OAIVirtualMachineProperties::is_vmwaretools_Valid() const{
    return m_vmwaretools_isValid;
}

bool OAIVirtualMachineProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_of_ram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controllers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_customization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dnsname_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_to_guest_vm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cloud_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_public_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_pool.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_template_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_sphere_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vm_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmwaretools_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_of_ram_isValid && m_number_of_cores_isValid && m_private_cloud_id_isValid && true;
}

} // namespace OpenAPI
