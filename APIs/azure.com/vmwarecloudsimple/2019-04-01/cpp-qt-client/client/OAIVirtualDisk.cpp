/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualDisk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualDisk::OAIVirtualDisk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualDisk::OAIVirtualDisk() {
    this->initializeModel();
}

OAIVirtualDisk::~OAIVirtualDisk() {}

void OAIVirtualDisk::initializeModel() {

    m_controller_id_isSet = false;
    m_controller_id_isValid = false;

    m_independence_mode_isSet = false;
    m_independence_mode_isValid = false;

    m_total_size_isSet = false;
    m_total_size_isValid = false;

    m_virtual_disk_id_isSet = false;
    m_virtual_disk_id_isValid = false;

    m_virtual_disk_name_isSet = false;
    m_virtual_disk_name_isValid = false;
}

void OAIVirtualDisk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualDisk::fromJsonObject(QJsonObject json) {

    m_controller_id_isValid = ::OpenAPI::fromJsonValue(m_controller_id, json[QString("controllerId")]);
    m_controller_id_isSet = !json[QString("controllerId")].isNull() && m_controller_id_isValid;

    m_independence_mode_isValid = ::OpenAPI::fromJsonValue(m_independence_mode, json[QString("independenceMode")]);
    m_independence_mode_isSet = !json[QString("independenceMode")].isNull() && m_independence_mode_isValid;

    m_total_size_isValid = ::OpenAPI::fromJsonValue(m_total_size, json[QString("totalSize")]);
    m_total_size_isSet = !json[QString("totalSize")].isNull() && m_total_size_isValid;

    m_virtual_disk_id_isValid = ::OpenAPI::fromJsonValue(m_virtual_disk_id, json[QString("virtualDiskId")]);
    m_virtual_disk_id_isSet = !json[QString("virtualDiskId")].isNull() && m_virtual_disk_id_isValid;

    m_virtual_disk_name_isValid = ::OpenAPI::fromJsonValue(m_virtual_disk_name, json[QString("virtualDiskName")]);
    m_virtual_disk_name_isSet = !json[QString("virtualDiskName")].isNull() && m_virtual_disk_name_isValid;
}

QString OAIVirtualDisk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualDisk::asJsonObject() const {
    QJsonObject obj;
    if (m_controller_id_isSet) {
        obj.insert(QString("controllerId"), ::OpenAPI::toJsonValue(m_controller_id));
    }
    if (m_independence_mode_isSet) {
        obj.insert(QString("independenceMode"), ::OpenAPI::toJsonValue(m_independence_mode));
    }
    if (m_total_size_isSet) {
        obj.insert(QString("totalSize"), ::OpenAPI::toJsonValue(m_total_size));
    }
    if (m_virtual_disk_id_isSet) {
        obj.insert(QString("virtualDiskId"), ::OpenAPI::toJsonValue(m_virtual_disk_id));
    }
    if (m_virtual_disk_name_isSet) {
        obj.insert(QString("virtualDiskName"), ::OpenAPI::toJsonValue(m_virtual_disk_name));
    }
    return obj;
}

QString OAIVirtualDisk::getControllerId() const {
    return m_controller_id;
}
void OAIVirtualDisk::setControllerId(const QString &controller_id) {
    m_controller_id = controller_id;
    m_controller_id_isSet = true;
}

bool OAIVirtualDisk::is_controller_id_Set() const{
    return m_controller_id_isSet;
}

bool OAIVirtualDisk::is_controller_id_Valid() const{
    return m_controller_id_isValid;
}

QString OAIVirtualDisk::getIndependenceMode() const {
    return m_independence_mode;
}
void OAIVirtualDisk::setIndependenceMode(const QString &independence_mode) {
    m_independence_mode = independence_mode;
    m_independence_mode_isSet = true;
}

bool OAIVirtualDisk::is_independence_mode_Set() const{
    return m_independence_mode_isSet;
}

bool OAIVirtualDisk::is_independence_mode_Valid() const{
    return m_independence_mode_isValid;
}

qint32 OAIVirtualDisk::getTotalSize() const {
    return m_total_size;
}
void OAIVirtualDisk::setTotalSize(const qint32 &total_size) {
    m_total_size = total_size;
    m_total_size_isSet = true;
}

bool OAIVirtualDisk::is_total_size_Set() const{
    return m_total_size_isSet;
}

bool OAIVirtualDisk::is_total_size_Valid() const{
    return m_total_size_isValid;
}

QString OAIVirtualDisk::getVirtualDiskId() const {
    return m_virtual_disk_id;
}
void OAIVirtualDisk::setVirtualDiskId(const QString &virtual_disk_id) {
    m_virtual_disk_id = virtual_disk_id;
    m_virtual_disk_id_isSet = true;
}

bool OAIVirtualDisk::is_virtual_disk_id_Set() const{
    return m_virtual_disk_id_isSet;
}

bool OAIVirtualDisk::is_virtual_disk_id_Valid() const{
    return m_virtual_disk_id_isValid;
}

QString OAIVirtualDisk::getVirtualDiskName() const {
    return m_virtual_disk_name;
}
void OAIVirtualDisk::setVirtualDiskName(const QString &virtual_disk_name) {
    m_virtual_disk_name = virtual_disk_name;
    m_virtual_disk_name_isSet = true;
}

bool OAIVirtualDisk::is_virtual_disk_name_Set() const{
    return m_virtual_disk_name_isSet;
}

bool OAIVirtualDisk::is_virtual_disk_name_Valid() const{
    return m_virtual_disk_name_isValid;
}

bool OAIVirtualDisk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_controller_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_independence_mode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_disk_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_disk_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualDisk::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_controller_id_isValid && m_independence_mode_isValid && m_total_size_isValid && true;
}

} // namespace OpenAPI
