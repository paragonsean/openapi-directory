/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPrivateCloudProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPrivateCloudProperties::OAIPrivateCloudProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPrivateCloudProperties::OAIPrivateCloudProperties() {
    this->initializeModel();
}

OAIPrivateCloudProperties::~OAIPrivateCloudProperties() {}

void OAIPrivateCloudProperties::initializeModel() {

    m_availability_zone_id_isSet = false;
    m_availability_zone_id_isValid = false;

    m_availability_zone_name_isSet = false;
    m_availability_zone_name_isValid = false;

    m_clusters_number_isSet = false;
    m_clusters_number_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_created_on_isSet = false;
    m_created_on_isValid = false;

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_nsx_type_isSet = false;
    m_nsx_type_isValid = false;

    m_placement_group_id_isSet = false;
    m_placement_group_id_isValid = false;

    m_placement_group_name_isSet = false;
    m_placement_group_name_isValid = false;

    m_private_cloud_id_isSet = false;
    m_private_cloud_id_isValid = false;

    m_resource_pools_isSet = false;
    m_resource_pools_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_total_cpu_cores_isSet = false;
    m_total_cpu_cores_isValid = false;

    m_total_nodes_isSet = false;
    m_total_nodes_isValid = false;

    m_total_ram_isSet = false;
    m_total_ram_isValid = false;

    m_total_storage_isSet = false;
    m_total_storage_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_v_sphere_version_isSet = false;
    m_v_sphere_version_isValid = false;

    m_vcenter_fqdn_isSet = false;
    m_vcenter_fqdn_isValid = false;

    m_vcenter_refid_isSet = false;
    m_vcenter_refid_isValid = false;

    m_virtual_machine_templates_isSet = false;
    m_virtual_machine_templates_isValid = false;

    m_virtual_networks_isSet = false;
    m_virtual_networks_isValid = false;

    m_vr_ops_enabled_isSet = false;
    m_vr_ops_enabled_isValid = false;
}

void OAIPrivateCloudProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPrivateCloudProperties::fromJsonObject(QJsonObject json) {

    m_availability_zone_id_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_id, json[QString("availabilityZoneId")]);
    m_availability_zone_id_isSet = !json[QString("availabilityZoneId")].isNull() && m_availability_zone_id_isValid;

    m_availability_zone_name_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_name, json[QString("availabilityZoneName")]);
    m_availability_zone_name_isSet = !json[QString("availabilityZoneName")].isNull() && m_availability_zone_name_isValid;

    m_clusters_number_isValid = ::OpenAPI::fromJsonValue(m_clusters_number, json[QString("clustersNumber")]);
    m_clusters_number_isSet = !json[QString("clustersNumber")].isNull() && m_clusters_number_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("createdBy")]);
    m_created_by_isSet = !json[QString("createdBy")].isNull() && m_created_by_isValid;

    m_created_on_isValid = ::OpenAPI::fromJsonValue(m_created_on, json[QString("createdOn")]);
    m_created_on_isSet = !json[QString("createdOn")].isNull() && m_created_on_isValid;

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_nsx_type_isValid = ::OpenAPI::fromJsonValue(m_nsx_type, json[QString("nsxType")]);
    m_nsx_type_isSet = !json[QString("nsxType")].isNull() && m_nsx_type_isValid;

    m_placement_group_id_isValid = ::OpenAPI::fromJsonValue(m_placement_group_id, json[QString("placementGroupId")]);
    m_placement_group_id_isSet = !json[QString("placementGroupId")].isNull() && m_placement_group_id_isValid;

    m_placement_group_name_isValid = ::OpenAPI::fromJsonValue(m_placement_group_name, json[QString("placementGroupName")]);
    m_placement_group_name_isSet = !json[QString("placementGroupName")].isNull() && m_placement_group_name_isValid;

    m_private_cloud_id_isValid = ::OpenAPI::fromJsonValue(m_private_cloud_id, json[QString("privateCloudId")]);
    m_private_cloud_id_isSet = !json[QString("privateCloudId")].isNull() && m_private_cloud_id_isValid;

    m_resource_pools_isValid = ::OpenAPI::fromJsonValue(m_resource_pools, json[QString("resourcePools")]);
    m_resource_pools_isSet = !json[QString("resourcePools")].isNull() && m_resource_pools_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_total_cpu_cores_isValid = ::OpenAPI::fromJsonValue(m_total_cpu_cores, json[QString("totalCpuCores")]);
    m_total_cpu_cores_isSet = !json[QString("totalCpuCores")].isNull() && m_total_cpu_cores_isValid;

    m_total_nodes_isValid = ::OpenAPI::fromJsonValue(m_total_nodes, json[QString("totalNodes")]);
    m_total_nodes_isSet = !json[QString("totalNodes")].isNull() && m_total_nodes_isValid;

    m_total_ram_isValid = ::OpenAPI::fromJsonValue(m_total_ram, json[QString("totalRam")]);
    m_total_ram_isSet = !json[QString("totalRam")].isNull() && m_total_ram_isValid;

    m_total_storage_isValid = ::OpenAPI::fromJsonValue(m_total_storage, json[QString("totalStorage")]);
    m_total_storage_isSet = !json[QString("totalStorage")].isNull() && m_total_storage_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_v_sphere_version_isValid = ::OpenAPI::fromJsonValue(m_v_sphere_version, json[QString("vSphereVersion")]);
    m_v_sphere_version_isSet = !json[QString("vSphereVersion")].isNull() && m_v_sphere_version_isValid;

    m_vcenter_fqdn_isValid = ::OpenAPI::fromJsonValue(m_vcenter_fqdn, json[QString("vcenterFqdn")]);
    m_vcenter_fqdn_isSet = !json[QString("vcenterFqdn")].isNull() && m_vcenter_fqdn_isValid;

    m_vcenter_refid_isValid = ::OpenAPI::fromJsonValue(m_vcenter_refid, json[QString("vcenterRefid")]);
    m_vcenter_refid_isSet = !json[QString("vcenterRefid")].isNull() && m_vcenter_refid_isValid;

    m_virtual_machine_templates_isValid = ::OpenAPI::fromJsonValue(m_virtual_machine_templates, json[QString("virtualMachineTemplates")]);
    m_virtual_machine_templates_isSet = !json[QString("virtualMachineTemplates")].isNull() && m_virtual_machine_templates_isValid;

    m_virtual_networks_isValid = ::OpenAPI::fromJsonValue(m_virtual_networks, json[QString("virtualNetworks")]);
    m_virtual_networks_isSet = !json[QString("virtualNetworks")].isNull() && m_virtual_networks_isValid;

    m_vr_ops_enabled_isValid = ::OpenAPI::fromJsonValue(m_vr_ops_enabled, json[QString("vrOpsEnabled")]);
    m_vr_ops_enabled_isSet = !json[QString("vrOpsEnabled")].isNull() && m_vr_ops_enabled_isValid;
}

QString OAIPrivateCloudProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPrivateCloudProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zone_id_isSet) {
        obj.insert(QString("availabilityZoneId"), ::OpenAPI::toJsonValue(m_availability_zone_id));
    }
    if (m_availability_zone_name_isSet) {
        obj.insert(QString("availabilityZoneName"), ::OpenAPI::toJsonValue(m_availability_zone_name));
    }
    if (m_clusters_number_isSet) {
        obj.insert(QString("clustersNumber"), ::OpenAPI::toJsonValue(m_clusters_number));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("createdBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_created_on_isSet) {
        obj.insert(QString("createdOn"), ::OpenAPI::toJsonValue(m_created_on));
    }
    if (m_dns_servers.size() > 0) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_nsx_type_isSet) {
        obj.insert(QString("nsxType"), ::OpenAPI::toJsonValue(m_nsx_type));
    }
    if (m_placement_group_id_isSet) {
        obj.insert(QString("placementGroupId"), ::OpenAPI::toJsonValue(m_placement_group_id));
    }
    if (m_placement_group_name_isSet) {
        obj.insert(QString("placementGroupName"), ::OpenAPI::toJsonValue(m_placement_group_name));
    }
    if (m_private_cloud_id_isSet) {
        obj.insert(QString("privateCloudId"), ::OpenAPI::toJsonValue(m_private_cloud_id));
    }
    if (m_resource_pools.size() > 0) {
        obj.insert(QString("resourcePools"), ::OpenAPI::toJsonValue(m_resource_pools));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_total_cpu_cores_isSet) {
        obj.insert(QString("totalCpuCores"), ::OpenAPI::toJsonValue(m_total_cpu_cores));
    }
    if (m_total_nodes_isSet) {
        obj.insert(QString("totalNodes"), ::OpenAPI::toJsonValue(m_total_nodes));
    }
    if (m_total_ram_isSet) {
        obj.insert(QString("totalRam"), ::OpenAPI::toJsonValue(m_total_ram));
    }
    if (m_total_storage_isSet) {
        obj.insert(QString("totalStorage"), ::OpenAPI::toJsonValue(m_total_storage));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_v_sphere_version_isSet) {
        obj.insert(QString("vSphereVersion"), ::OpenAPI::toJsonValue(m_v_sphere_version));
    }
    if (m_vcenter_fqdn_isSet) {
        obj.insert(QString("vcenterFqdn"), ::OpenAPI::toJsonValue(m_vcenter_fqdn));
    }
    if (m_vcenter_refid_isSet) {
        obj.insert(QString("vcenterRefid"), ::OpenAPI::toJsonValue(m_vcenter_refid));
    }
    if (m_virtual_machine_templates.size() > 0) {
        obj.insert(QString("virtualMachineTemplates"), ::OpenAPI::toJsonValue(m_virtual_machine_templates));
    }
    if (m_virtual_networks.size() > 0) {
        obj.insert(QString("virtualNetworks"), ::OpenAPI::toJsonValue(m_virtual_networks));
    }
    if (m_vr_ops_enabled_isSet) {
        obj.insert(QString("vrOpsEnabled"), ::OpenAPI::toJsonValue(m_vr_ops_enabled));
    }
    return obj;
}

QString OAIPrivateCloudProperties::getAvailabilityZoneId() const {
    return m_availability_zone_id;
}
void OAIPrivateCloudProperties::setAvailabilityZoneId(const QString &availability_zone_id) {
    m_availability_zone_id = availability_zone_id;
    m_availability_zone_id_isSet = true;
}

bool OAIPrivateCloudProperties::is_availability_zone_id_Set() const{
    return m_availability_zone_id_isSet;
}

bool OAIPrivateCloudProperties::is_availability_zone_id_Valid() const{
    return m_availability_zone_id_isValid;
}

QString OAIPrivateCloudProperties::getAvailabilityZoneName() const {
    return m_availability_zone_name;
}
void OAIPrivateCloudProperties::setAvailabilityZoneName(const QString &availability_zone_name) {
    m_availability_zone_name = availability_zone_name;
    m_availability_zone_name_isSet = true;
}

bool OAIPrivateCloudProperties::is_availability_zone_name_Set() const{
    return m_availability_zone_name_isSet;
}

bool OAIPrivateCloudProperties::is_availability_zone_name_Valid() const{
    return m_availability_zone_name_isValid;
}

qint32 OAIPrivateCloudProperties::getClustersNumber() const {
    return m_clusters_number;
}
void OAIPrivateCloudProperties::setClustersNumber(const qint32 &clusters_number) {
    m_clusters_number = clusters_number;
    m_clusters_number_isSet = true;
}

bool OAIPrivateCloudProperties::is_clusters_number_Set() const{
    return m_clusters_number_isSet;
}

bool OAIPrivateCloudProperties::is_clusters_number_Valid() const{
    return m_clusters_number_isValid;
}

QString OAIPrivateCloudProperties::getCreatedBy() const {
    return m_created_by;
}
void OAIPrivateCloudProperties::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIPrivateCloudProperties::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIPrivateCloudProperties::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QDateTime OAIPrivateCloudProperties::getCreatedOn() const {
    return m_created_on;
}
void OAIPrivateCloudProperties::setCreatedOn(const QDateTime &created_on) {
    m_created_on = created_on;
    m_created_on_isSet = true;
}

bool OAIPrivateCloudProperties::is_created_on_Set() const{
    return m_created_on_isSet;
}

bool OAIPrivateCloudProperties::is_created_on_Valid() const{
    return m_created_on_isValid;
}

QList<QString> OAIPrivateCloudProperties::getDnsServers() const {
    return m_dns_servers;
}
void OAIPrivateCloudProperties::setDnsServers(const QList<QString> &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIPrivateCloudProperties::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIPrivateCloudProperties::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

QString OAIPrivateCloudProperties::getExpires() const {
    return m_expires;
}
void OAIPrivateCloudProperties::setExpires(const QString &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAIPrivateCloudProperties::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAIPrivateCloudProperties::is_expires_Valid() const{
    return m_expires_isValid;
}

QString OAIPrivateCloudProperties::getNsxType() const {
    return m_nsx_type;
}
void OAIPrivateCloudProperties::setNsxType(const QString &nsx_type) {
    m_nsx_type = nsx_type;
    m_nsx_type_isSet = true;
}

bool OAIPrivateCloudProperties::is_nsx_type_Set() const{
    return m_nsx_type_isSet;
}

bool OAIPrivateCloudProperties::is_nsx_type_Valid() const{
    return m_nsx_type_isValid;
}

QString OAIPrivateCloudProperties::getPlacementGroupId() const {
    return m_placement_group_id;
}
void OAIPrivateCloudProperties::setPlacementGroupId(const QString &placement_group_id) {
    m_placement_group_id = placement_group_id;
    m_placement_group_id_isSet = true;
}

bool OAIPrivateCloudProperties::is_placement_group_id_Set() const{
    return m_placement_group_id_isSet;
}

bool OAIPrivateCloudProperties::is_placement_group_id_Valid() const{
    return m_placement_group_id_isValid;
}

QString OAIPrivateCloudProperties::getPlacementGroupName() const {
    return m_placement_group_name;
}
void OAIPrivateCloudProperties::setPlacementGroupName(const QString &placement_group_name) {
    m_placement_group_name = placement_group_name;
    m_placement_group_name_isSet = true;
}

bool OAIPrivateCloudProperties::is_placement_group_name_Set() const{
    return m_placement_group_name_isSet;
}

bool OAIPrivateCloudProperties::is_placement_group_name_Valid() const{
    return m_placement_group_name_isValid;
}

QString OAIPrivateCloudProperties::getPrivateCloudId() const {
    return m_private_cloud_id;
}
void OAIPrivateCloudProperties::setPrivateCloudId(const QString &private_cloud_id) {
    m_private_cloud_id = private_cloud_id;
    m_private_cloud_id_isSet = true;
}

bool OAIPrivateCloudProperties::is_private_cloud_id_Set() const{
    return m_private_cloud_id_isSet;
}

bool OAIPrivateCloudProperties::is_private_cloud_id_Valid() const{
    return m_private_cloud_id_isValid;
}

QList<OAIResourcePool> OAIPrivateCloudProperties::getResourcePools() const {
    return m_resource_pools;
}
void OAIPrivateCloudProperties::setResourcePools(const QList<OAIResourcePool> &resource_pools) {
    m_resource_pools = resource_pools;
    m_resource_pools_isSet = true;
}

bool OAIPrivateCloudProperties::is_resource_pools_Set() const{
    return m_resource_pools_isSet;
}

bool OAIPrivateCloudProperties::is_resource_pools_Valid() const{
    return m_resource_pools_isValid;
}

QString OAIPrivateCloudProperties::getState() const {
    return m_state;
}
void OAIPrivateCloudProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIPrivateCloudProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIPrivateCloudProperties::is_state_Valid() const{
    return m_state_isValid;
}

qint32 OAIPrivateCloudProperties::getTotalCpuCores() const {
    return m_total_cpu_cores;
}
void OAIPrivateCloudProperties::setTotalCpuCores(const qint32 &total_cpu_cores) {
    m_total_cpu_cores = total_cpu_cores;
    m_total_cpu_cores_isSet = true;
}

bool OAIPrivateCloudProperties::is_total_cpu_cores_Set() const{
    return m_total_cpu_cores_isSet;
}

bool OAIPrivateCloudProperties::is_total_cpu_cores_Valid() const{
    return m_total_cpu_cores_isValid;
}

qint32 OAIPrivateCloudProperties::getTotalNodes() const {
    return m_total_nodes;
}
void OAIPrivateCloudProperties::setTotalNodes(const qint32 &total_nodes) {
    m_total_nodes = total_nodes;
    m_total_nodes_isSet = true;
}

bool OAIPrivateCloudProperties::is_total_nodes_Set() const{
    return m_total_nodes_isSet;
}

bool OAIPrivateCloudProperties::is_total_nodes_Valid() const{
    return m_total_nodes_isValid;
}

qint32 OAIPrivateCloudProperties::getTotalRam() const {
    return m_total_ram;
}
void OAIPrivateCloudProperties::setTotalRam(const qint32 &total_ram) {
    m_total_ram = total_ram;
    m_total_ram_isSet = true;
}

bool OAIPrivateCloudProperties::is_total_ram_Set() const{
    return m_total_ram_isSet;
}

bool OAIPrivateCloudProperties::is_total_ram_Valid() const{
    return m_total_ram_isValid;
}

double OAIPrivateCloudProperties::getTotalStorage() const {
    return m_total_storage;
}
void OAIPrivateCloudProperties::setTotalStorage(const double &total_storage) {
    m_total_storage = total_storage;
    m_total_storage_isSet = true;
}

bool OAIPrivateCloudProperties::is_total_storage_Set() const{
    return m_total_storage_isSet;
}

bool OAIPrivateCloudProperties::is_total_storage_Valid() const{
    return m_total_storage_isValid;
}

QString OAIPrivateCloudProperties::getType() const {
    return m_type;
}
void OAIPrivateCloudProperties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIPrivateCloudProperties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIPrivateCloudProperties::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIPrivateCloudProperties::getVSphereVersion() const {
    return m_v_sphere_version;
}
void OAIPrivateCloudProperties::setVSphereVersion(const QString &v_sphere_version) {
    m_v_sphere_version = v_sphere_version;
    m_v_sphere_version_isSet = true;
}

bool OAIPrivateCloudProperties::is_v_sphere_version_Set() const{
    return m_v_sphere_version_isSet;
}

bool OAIPrivateCloudProperties::is_v_sphere_version_Valid() const{
    return m_v_sphere_version_isValid;
}

QString OAIPrivateCloudProperties::getVcenterFqdn() const {
    return m_vcenter_fqdn;
}
void OAIPrivateCloudProperties::setVcenterFqdn(const QString &vcenter_fqdn) {
    m_vcenter_fqdn = vcenter_fqdn;
    m_vcenter_fqdn_isSet = true;
}

bool OAIPrivateCloudProperties::is_vcenter_fqdn_Set() const{
    return m_vcenter_fqdn_isSet;
}

bool OAIPrivateCloudProperties::is_vcenter_fqdn_Valid() const{
    return m_vcenter_fqdn_isValid;
}

QString OAIPrivateCloudProperties::getVcenterRefid() const {
    return m_vcenter_refid;
}
void OAIPrivateCloudProperties::setVcenterRefid(const QString &vcenter_refid) {
    m_vcenter_refid = vcenter_refid;
    m_vcenter_refid_isSet = true;
}

bool OAIPrivateCloudProperties::is_vcenter_refid_Set() const{
    return m_vcenter_refid_isSet;
}

bool OAIPrivateCloudProperties::is_vcenter_refid_Valid() const{
    return m_vcenter_refid_isValid;
}

QList<OAIVirtualMachineTemplate> OAIPrivateCloudProperties::getVirtualMachineTemplates() const {
    return m_virtual_machine_templates;
}
void OAIPrivateCloudProperties::setVirtualMachineTemplates(const QList<OAIVirtualMachineTemplate> &virtual_machine_templates) {
    m_virtual_machine_templates = virtual_machine_templates;
    m_virtual_machine_templates_isSet = true;
}

bool OAIPrivateCloudProperties::is_virtual_machine_templates_Set() const{
    return m_virtual_machine_templates_isSet;
}

bool OAIPrivateCloudProperties::is_virtual_machine_templates_Valid() const{
    return m_virtual_machine_templates_isValid;
}

QList<OAIVirtualNetwork> OAIPrivateCloudProperties::getVirtualNetworks() const {
    return m_virtual_networks;
}
void OAIPrivateCloudProperties::setVirtualNetworks(const QList<OAIVirtualNetwork> &virtual_networks) {
    m_virtual_networks = virtual_networks;
    m_virtual_networks_isSet = true;
}

bool OAIPrivateCloudProperties::is_virtual_networks_Set() const{
    return m_virtual_networks_isSet;
}

bool OAIPrivateCloudProperties::is_virtual_networks_Valid() const{
    return m_virtual_networks_isValid;
}

bool OAIPrivateCloudProperties::isVrOpsEnabled() const {
    return m_vr_ops_enabled;
}
void OAIPrivateCloudProperties::setVrOpsEnabled(const bool &vr_ops_enabled) {
    m_vr_ops_enabled = vr_ops_enabled;
    m_vr_ops_enabled_isSet = true;
}

bool OAIPrivateCloudProperties::is_vr_ops_enabled_Set() const{
    return m_vr_ops_enabled_isSet;
}

bool OAIPrivateCloudProperties::is_vr_ops_enabled_Valid() const{
    return m_vr_ops_enabled_isValid;
}

bool OAIPrivateCloudProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_clusters_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_on_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nsx_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cloud_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_pools.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_cpu_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_ram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_storage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_sphere_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_fqdn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vcenter_refid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_machine_templates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vr_ops_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPrivateCloudProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
