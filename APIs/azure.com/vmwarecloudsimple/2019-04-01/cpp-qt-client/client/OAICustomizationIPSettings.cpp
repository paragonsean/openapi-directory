/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomizationIPSettings.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomizationIPSettings::OAICustomizationIPSettings(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomizationIPSettings::OAICustomizationIPSettings() {
    this->initializeModel();
}

OAICustomizationIPSettings::~OAICustomizationIPSettings() {}

void OAICustomizationIPSettings::initializeModel() {

    m_gateway_isSet = false;
    m_gateway_isValid = false;

    m_ip_isSet = false;
    m_ip_isValid = false;

    m_subnet_mask_isSet = false;
    m_subnet_mask_isValid = false;
}

void OAICustomizationIPSettings::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomizationIPSettings::fromJsonObject(QJsonObject json) {

    m_gateway_isValid = ::OpenAPI::fromJsonValue(m_gateway, json[QString("gateway")]);
    m_gateway_isSet = !json[QString("gateway")].isNull() && m_gateway_isValid;

    m_ip_isValid = ::OpenAPI::fromJsonValue(m_ip, json[QString("ip")]);
    m_ip_isSet = !json[QString("ip")].isNull() && m_ip_isValid;

    m_subnet_mask_isValid = ::OpenAPI::fromJsonValue(m_subnet_mask, json[QString("subnetMask")]);
    m_subnet_mask_isSet = !json[QString("subnetMask")].isNull() && m_subnet_mask_isValid;
}

QString OAICustomizationIPSettings::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomizationIPSettings::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway.size() > 0) {
        obj.insert(QString("gateway"), ::OpenAPI::toJsonValue(m_gateway));
    }
    if (m_ip.isSet()) {
        obj.insert(QString("ip"), ::OpenAPI::toJsonValue(m_ip));
    }
    if (m_subnet_mask_isSet) {
        obj.insert(QString("subnetMask"), ::OpenAPI::toJsonValue(m_subnet_mask));
    }
    return obj;
}

QList<QString> OAICustomizationIPSettings::getGateway() const {
    return m_gateway;
}
void OAICustomizationIPSettings::setGateway(const QList<QString> &gateway) {
    m_gateway = gateway;
    m_gateway_isSet = true;
}

bool OAICustomizationIPSettings::is_gateway_Set() const{
    return m_gateway_isSet;
}

bool OAICustomizationIPSettings::is_gateway_Valid() const{
    return m_gateway_isValid;
}

OAICustomizationIPAddress OAICustomizationIPSettings::getIp() const {
    return m_ip;
}
void OAICustomizationIPSettings::setIp(const OAICustomizationIPAddress &ip) {
    m_ip = ip;
    m_ip_isSet = true;
}

bool OAICustomizationIPSettings::is_ip_Set() const{
    return m_ip_isSet;
}

bool OAICustomizationIPSettings::is_ip_Valid() const{
    return m_ip_isValid;
}

QString OAICustomizationIPSettings::getSubnetMask() const {
    return m_subnet_mask;
}
void OAICustomizationIPSettings::setSubnetMask(const QString &subnet_mask) {
    m_subnet_mask = subnet_mask;
    m_subnet_mask_isSet = true;
}

bool OAICustomizationIPSettings::is_subnet_mask_Set() const{
    return m_subnet_mask_isSet;
}

bool OAICustomizationIPSettings::is_subnet_mask_Valid() const{
    return m_subnet_mask_isValid;
}

bool OAICustomizationIPSettings::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subnet_mask_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomizationIPSettings::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
