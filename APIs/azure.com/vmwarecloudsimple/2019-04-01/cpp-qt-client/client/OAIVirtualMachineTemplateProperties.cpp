/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualMachineTemplateProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualMachineTemplateProperties::OAIVirtualMachineTemplateProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualMachineTemplateProperties::OAIVirtualMachineTemplateProperties() {
    this->initializeModel();
}

OAIVirtualMachineTemplateProperties::~OAIVirtualMachineTemplateProperties() {}

void OAIVirtualMachineTemplateProperties::initializeModel() {

    m_amount_of_ram_isSet = false;
    m_amount_of_ram_isValid = false;

    m_controllers_isSet = false;
    m_controllers_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_disks_isSet = false;
    m_disks_isValid = false;

    m_expose_to_guest_vm_isSet = false;
    m_expose_to_guest_vm_isValid = false;

    m_guest_os_isSet = false;
    m_guest_os_isValid = false;

    m_guest_os_type_isSet = false;
    m_guest_os_type_isValid = false;

    m_nics_isSet = false;
    m_nics_isValid = false;

    m_number_of_cores_isSet = false;
    m_number_of_cores_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_private_cloud_id_isSet = false;
    m_private_cloud_id_isValid = false;

    m_v_sphere_networks_isSet = false;
    m_v_sphere_networks_isValid = false;

    m_v_sphere_tags_isSet = false;
    m_v_sphere_tags_isValid = false;

    m_vmwaretools_isSet = false;
    m_vmwaretools_isValid = false;
}

void OAIVirtualMachineTemplateProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualMachineTemplateProperties::fromJsonObject(QJsonObject json) {

    m_amount_of_ram_isValid = ::OpenAPI::fromJsonValue(m_amount_of_ram, json[QString("amountOfRam")]);
    m_amount_of_ram_isSet = !json[QString("amountOfRam")].isNull() && m_amount_of_ram_isValid;

    m_controllers_isValid = ::OpenAPI::fromJsonValue(m_controllers, json[QString("controllers")]);
    m_controllers_isSet = !json[QString("controllers")].isNull() && m_controllers_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_disks_isValid = ::OpenAPI::fromJsonValue(m_disks, json[QString("disks")]);
    m_disks_isSet = !json[QString("disks")].isNull() && m_disks_isValid;

    m_expose_to_guest_vm_isValid = ::OpenAPI::fromJsonValue(m_expose_to_guest_vm, json[QString("exposeToGuestVM")]);
    m_expose_to_guest_vm_isSet = !json[QString("exposeToGuestVM")].isNull() && m_expose_to_guest_vm_isValid;

    m_guest_os_isValid = ::OpenAPI::fromJsonValue(m_guest_os, json[QString("guestOS")]);
    m_guest_os_isSet = !json[QString("guestOS")].isNull() && m_guest_os_isValid;

    m_guest_os_type_isValid = ::OpenAPI::fromJsonValue(m_guest_os_type, json[QString("guestOSType")]);
    m_guest_os_type_isSet = !json[QString("guestOSType")].isNull() && m_guest_os_type_isValid;

    m_nics_isValid = ::OpenAPI::fromJsonValue(m_nics, json[QString("nics")]);
    m_nics_isSet = !json[QString("nics")].isNull() && m_nics_isValid;

    m_number_of_cores_isValid = ::OpenAPI::fromJsonValue(m_number_of_cores, json[QString("numberOfCores")]);
    m_number_of_cores_isSet = !json[QString("numberOfCores")].isNull() && m_number_of_cores_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_private_cloud_id_isValid = ::OpenAPI::fromJsonValue(m_private_cloud_id, json[QString("privateCloudId")]);
    m_private_cloud_id_isSet = !json[QString("privateCloudId")].isNull() && m_private_cloud_id_isValid;

    m_v_sphere_networks_isValid = ::OpenAPI::fromJsonValue(m_v_sphere_networks, json[QString("vSphereNetworks")]);
    m_v_sphere_networks_isSet = !json[QString("vSphereNetworks")].isNull() && m_v_sphere_networks_isValid;

    m_v_sphere_tags_isValid = ::OpenAPI::fromJsonValue(m_v_sphere_tags, json[QString("vSphereTags")]);
    m_v_sphere_tags_isSet = !json[QString("vSphereTags")].isNull() && m_v_sphere_tags_isValid;

    m_vmwaretools_isValid = ::OpenAPI::fromJsonValue(m_vmwaretools, json[QString("vmwaretools")]);
    m_vmwaretools_isSet = !json[QString("vmwaretools")].isNull() && m_vmwaretools_isValid;
}

QString OAIVirtualMachineTemplateProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualMachineTemplateProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_of_ram_isSet) {
        obj.insert(QString("amountOfRam"), ::OpenAPI::toJsonValue(m_amount_of_ram));
    }
    if (m_controllers.size() > 0) {
        obj.insert(QString("controllers"), ::OpenAPI::toJsonValue(m_controllers));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_disks.size() > 0) {
        obj.insert(QString("disks"), ::OpenAPI::toJsonValue(m_disks));
    }
    if (m_expose_to_guest_vm_isSet) {
        obj.insert(QString("exposeToGuestVM"), ::OpenAPI::toJsonValue(m_expose_to_guest_vm));
    }
    if (m_guest_os_isSet) {
        obj.insert(QString("guestOS"), ::OpenAPI::toJsonValue(m_guest_os));
    }
    if (m_guest_os_type_isSet) {
        obj.insert(QString("guestOSType"), ::OpenAPI::toJsonValue(m_guest_os_type));
    }
    if (m_nics.size() > 0) {
        obj.insert(QString("nics"), ::OpenAPI::toJsonValue(m_nics));
    }
    if (m_number_of_cores_isSet) {
        obj.insert(QString("numberOfCores"), ::OpenAPI::toJsonValue(m_number_of_cores));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_private_cloud_id_isSet) {
        obj.insert(QString("privateCloudId"), ::OpenAPI::toJsonValue(m_private_cloud_id));
    }
    if (m_v_sphere_networks.size() > 0) {
        obj.insert(QString("vSphereNetworks"), ::OpenAPI::toJsonValue(m_v_sphere_networks));
    }
    if (m_v_sphere_tags.size() > 0) {
        obj.insert(QString("vSphereTags"), ::OpenAPI::toJsonValue(m_v_sphere_tags));
    }
    if (m_vmwaretools_isSet) {
        obj.insert(QString("vmwaretools"), ::OpenAPI::toJsonValue(m_vmwaretools));
    }
    return obj;
}

qint32 OAIVirtualMachineTemplateProperties::getAmountOfRam() const {
    return m_amount_of_ram;
}
void OAIVirtualMachineTemplateProperties::setAmountOfRam(const qint32 &amount_of_ram) {
    m_amount_of_ram = amount_of_ram;
    m_amount_of_ram_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_amount_of_ram_Set() const{
    return m_amount_of_ram_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_amount_of_ram_Valid() const{
    return m_amount_of_ram_isValid;
}

QList<OAIVirtualDiskController> OAIVirtualMachineTemplateProperties::getControllers() const {
    return m_controllers;
}
void OAIVirtualMachineTemplateProperties::setControllers(const QList<OAIVirtualDiskController> &controllers) {
    m_controllers = controllers;
    m_controllers_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_controllers_Set() const{
    return m_controllers_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_controllers_Valid() const{
    return m_controllers_isValid;
}

QString OAIVirtualMachineTemplateProperties::getDescription() const {
    return m_description;
}
void OAIVirtualMachineTemplateProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_description_Valid() const{
    return m_description_isValid;
}

QList<OAIVirtualDisk> OAIVirtualMachineTemplateProperties::getDisks() const {
    return m_disks;
}
void OAIVirtualMachineTemplateProperties::setDisks(const QList<OAIVirtualDisk> &disks) {
    m_disks = disks;
    m_disks_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_disks_Set() const{
    return m_disks_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_disks_Valid() const{
    return m_disks_isValid;
}

bool OAIVirtualMachineTemplateProperties::isExposeToGuestVm() const {
    return m_expose_to_guest_vm;
}
void OAIVirtualMachineTemplateProperties::setExposeToGuestVm(const bool &expose_to_guest_vm) {
    m_expose_to_guest_vm = expose_to_guest_vm;
    m_expose_to_guest_vm_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_expose_to_guest_vm_Set() const{
    return m_expose_to_guest_vm_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_expose_to_guest_vm_Valid() const{
    return m_expose_to_guest_vm_isValid;
}

QString OAIVirtualMachineTemplateProperties::getGuestOs() const {
    return m_guest_os;
}
void OAIVirtualMachineTemplateProperties::setGuestOs(const QString &guest_os) {
    m_guest_os = guest_os;
    m_guest_os_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_guest_os_Set() const{
    return m_guest_os_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_guest_os_Valid() const{
    return m_guest_os_isValid;
}

QString OAIVirtualMachineTemplateProperties::getGuestOsType() const {
    return m_guest_os_type;
}
void OAIVirtualMachineTemplateProperties::setGuestOsType(const QString &guest_os_type) {
    m_guest_os_type = guest_os_type;
    m_guest_os_type_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_guest_os_type_Set() const{
    return m_guest_os_type_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_guest_os_type_Valid() const{
    return m_guest_os_type_isValid;
}

QList<OAIVirtualNic> OAIVirtualMachineTemplateProperties::getNics() const {
    return m_nics;
}
void OAIVirtualMachineTemplateProperties::setNics(const QList<OAIVirtualNic> &nics) {
    m_nics = nics;
    m_nics_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_nics_Set() const{
    return m_nics_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_nics_Valid() const{
    return m_nics_isValid;
}

qint32 OAIVirtualMachineTemplateProperties::getNumberOfCores() const {
    return m_number_of_cores;
}
void OAIVirtualMachineTemplateProperties::setNumberOfCores(const qint32 &number_of_cores) {
    m_number_of_cores = number_of_cores;
    m_number_of_cores_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_number_of_cores_Set() const{
    return m_number_of_cores_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_number_of_cores_Valid() const{
    return m_number_of_cores_isValid;
}

QString OAIVirtualMachineTemplateProperties::getPath() const {
    return m_path;
}
void OAIVirtualMachineTemplateProperties::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_path_Set() const{
    return m_path_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIVirtualMachineTemplateProperties::getPrivateCloudId() const {
    return m_private_cloud_id;
}
void OAIVirtualMachineTemplateProperties::setPrivateCloudId(const QString &private_cloud_id) {
    m_private_cloud_id = private_cloud_id;
    m_private_cloud_id_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_private_cloud_id_Set() const{
    return m_private_cloud_id_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_private_cloud_id_Valid() const{
    return m_private_cloud_id_isValid;
}

QList<QString> OAIVirtualMachineTemplateProperties::getVSphereNetworks() const {
    return m_v_sphere_networks;
}
void OAIVirtualMachineTemplateProperties::setVSphereNetworks(const QList<QString> &v_sphere_networks) {
    m_v_sphere_networks = v_sphere_networks;
    m_v_sphere_networks_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_v_sphere_networks_Set() const{
    return m_v_sphere_networks_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_v_sphere_networks_Valid() const{
    return m_v_sphere_networks_isValid;
}

QList<QString> OAIVirtualMachineTemplateProperties::getVSphereTags() const {
    return m_v_sphere_tags;
}
void OAIVirtualMachineTemplateProperties::setVSphereTags(const QList<QString> &v_sphere_tags) {
    m_v_sphere_tags = v_sphere_tags;
    m_v_sphere_tags_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_v_sphere_tags_Set() const{
    return m_v_sphere_tags_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_v_sphere_tags_Valid() const{
    return m_v_sphere_tags_isValid;
}

QString OAIVirtualMachineTemplateProperties::getVmwaretools() const {
    return m_vmwaretools;
}
void OAIVirtualMachineTemplateProperties::setVmwaretools(const QString &vmwaretools) {
    m_vmwaretools = vmwaretools;
    m_vmwaretools_isSet = true;
}

bool OAIVirtualMachineTemplateProperties::is_vmwaretools_Set() const{
    return m_vmwaretools_isSet;
}

bool OAIVirtualMachineTemplateProperties::is_vmwaretools_Valid() const{
    return m_vmwaretools_isValid;
}

bool OAIVirtualMachineTemplateProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_of_ram_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_controllers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_disks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expose_to_guest_vm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_guest_os_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_number_of_cores_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cloud_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_sphere_networks.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_sphere_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmwaretools_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualMachineTemplateProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_private_cloud_id_isValid && true;
}

} // namespace OpenAPI
