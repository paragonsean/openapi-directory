/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDedicatedCloudServicesApi_H
#define OAI_OAIDedicatedCloudServicesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICSRPError.h"
#include "OAIDedicatedCloudService.h"
#include "OAIDedicatedCloudServiceListResponse.h"
#include "OAIPatchPayload.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDedicatedCloudServicesApi : public QObject {
    Q_OBJECT

public:
    OAIDedicatedCloudServicesApi(const int timeOut = 0);
    ~OAIDedicatedCloudServicesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  dedicated_cloud_service_request OAIDedicatedCloudService [required]
    */
    virtual void dedicatedCloudServicesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_service_name, const QString &api_version, const OAIDedicatedCloudService &dedicated_cloud_service_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dedicatedCloudServicesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_service_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dedicatedCloudServicesGet(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_service_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void dedicatedCloudServicesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void dedicatedCloudServicesListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  dedicated_cloud_service_request OAIPatchPayload [required]
    */
    virtual void dedicatedCloudServicesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_service_name, const QString &api_version, const OAIPatchPayload &dedicated_cloud_service_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dedicatedCloudServicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudServicesDeleteCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudServicesGetCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudServicesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudServicesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudServicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dedicatedCloudServicesCreateOrUpdateSignal(OAIDedicatedCloudService summary);
    void dedicatedCloudServicesDeleteSignal();
    void dedicatedCloudServicesGetSignal(OAIDedicatedCloudService summary);
    void dedicatedCloudServicesListByResourceGroupSignal(OAIDedicatedCloudServiceListResponse summary);
    void dedicatedCloudServicesListBySubscriptionSignal(OAIDedicatedCloudServiceListResponse summary);
    void dedicatedCloudServicesUpdateSignal(OAIDedicatedCloudService summary);


    void dedicatedCloudServicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudService summary);
    void dedicatedCloudServicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dedicatedCloudServicesGetSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudService summary);
    void dedicatedCloudServicesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudServiceListResponse summary);
    void dedicatedCloudServicesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudServiceListResponse summary);
    void dedicatedCloudServicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudService summary);

    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesCreateOrUpdateSignalError() instead")
    void dedicatedCloudServicesCreateOrUpdateSignalE(OAIDedicatedCloudService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesCreateOrUpdateSignalError(OAIDedicatedCloudService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesDeleteSignalError() instead")
    void dedicatedCloudServicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesGetSignalError() instead")
    void dedicatedCloudServicesGetSignalE(OAIDedicatedCloudService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesGetSignalError(OAIDedicatedCloudService summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesListByResourceGroupSignalError() instead")
    void dedicatedCloudServicesListByResourceGroupSignalE(OAIDedicatedCloudServiceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesListByResourceGroupSignalError(OAIDedicatedCloudServiceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesListBySubscriptionSignalError() instead")
    void dedicatedCloudServicesListBySubscriptionSignalE(OAIDedicatedCloudServiceListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesListBySubscriptionSignalError(OAIDedicatedCloudServiceListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesUpdateSignalError() instead")
    void dedicatedCloudServicesUpdateSignalE(OAIDedicatedCloudService summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesUpdateSignalError(OAIDedicatedCloudService summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesCreateOrUpdateSignalErrorFull() instead")
    void dedicatedCloudServicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesDeleteSignalErrorFull() instead")
    void dedicatedCloudServicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesGetSignalErrorFull() instead")
    void dedicatedCloudServicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesListByResourceGroupSignalErrorFull() instead")
    void dedicatedCloudServicesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesListBySubscriptionSignalErrorFull() instead")
    void dedicatedCloudServicesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudServicesUpdateSignalErrorFull() instead")
    void dedicatedCloudServicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudServicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
