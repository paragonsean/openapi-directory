/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGuestOSCustomization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGuestOSCustomization::OAIGuestOSCustomization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGuestOSCustomization::OAIGuestOSCustomization() {
    this->initializeModel();
}

OAIGuestOSCustomization::~OAIGuestOSCustomization() {}

void OAIGuestOSCustomization::initializeModel() {

    m_dns_servers_isSet = false;
    m_dns_servers_isValid = false;

    m_host_name_isSet = false;
    m_host_name_isValid = false;

    m_password_isSet = false;
    m_password_isValid = false;

    m_policy_id_isSet = false;
    m_policy_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIGuestOSCustomization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGuestOSCustomization::fromJsonObject(QJsonObject json) {

    m_dns_servers_isValid = ::OpenAPI::fromJsonValue(m_dns_servers, json[QString("dnsServers")]);
    m_dns_servers_isSet = !json[QString("dnsServers")].isNull() && m_dns_servers_isValid;

    m_host_name_isValid = ::OpenAPI::fromJsonValue(m_host_name, json[QString("hostName")]);
    m_host_name_isSet = !json[QString("hostName")].isNull() && m_host_name_isValid;

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_policy_id_isValid = ::OpenAPI::fromJsonValue(m_policy_id, json[QString("policyId")]);
    m_policy_id_isSet = !json[QString("policyId")].isNull() && m_policy_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIGuestOSCustomization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGuestOSCustomization::asJsonObject() const {
    QJsonObject obj;
    if (m_dns_servers.size() > 0) {
        obj.insert(QString("dnsServers"), ::OpenAPI::toJsonValue(m_dns_servers));
    }
    if (m_host_name_isSet) {
        obj.insert(QString("hostName"), ::OpenAPI::toJsonValue(m_host_name));
    }
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_policy_id_isSet) {
        obj.insert(QString("policyId"), ::OpenAPI::toJsonValue(m_policy_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QList<QString> OAIGuestOSCustomization::getDnsServers() const {
    return m_dns_servers;
}
void OAIGuestOSCustomization::setDnsServers(const QList<QString> &dns_servers) {
    m_dns_servers = dns_servers;
    m_dns_servers_isSet = true;
}

bool OAIGuestOSCustomization::is_dns_servers_Set() const{
    return m_dns_servers_isSet;
}

bool OAIGuestOSCustomization::is_dns_servers_Valid() const{
    return m_dns_servers_isValid;
}

QString OAIGuestOSCustomization::getHostName() const {
    return m_host_name;
}
void OAIGuestOSCustomization::setHostName(const QString &host_name) {
    m_host_name = host_name;
    m_host_name_isSet = true;
}

bool OAIGuestOSCustomization::is_host_name_Set() const{
    return m_host_name_isSet;
}

bool OAIGuestOSCustomization::is_host_name_Valid() const{
    return m_host_name_isValid;
}

QString OAIGuestOSCustomization::getPassword() const {
    return m_password;
}
void OAIGuestOSCustomization::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAIGuestOSCustomization::is_password_Set() const{
    return m_password_isSet;
}

bool OAIGuestOSCustomization::is_password_Valid() const{
    return m_password_isValid;
}

QString OAIGuestOSCustomization::getPolicyId() const {
    return m_policy_id;
}
void OAIGuestOSCustomization::setPolicyId(const QString &policy_id) {
    m_policy_id = policy_id;
    m_policy_id_isSet = true;
}

bool OAIGuestOSCustomization::is_policy_id_Set() const{
    return m_policy_id_isSet;
}

bool OAIGuestOSCustomization::is_policy_id_Valid() const{
    return m_policy_id_isValid;
}

QString OAIGuestOSCustomization::getUsername() const {
    return m_username;
}
void OAIGuestOSCustomization::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIGuestOSCustomization::is_username_Set() const{
    return m_username_isSet;
}

bool OAIGuestOSCustomization::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIGuestOSCustomization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dns_servers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_host_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_policy_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGuestOSCustomization::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
