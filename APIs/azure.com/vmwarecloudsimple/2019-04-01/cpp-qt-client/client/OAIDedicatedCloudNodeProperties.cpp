/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDedicatedCloudNodeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDedicatedCloudNodeProperties::OAIDedicatedCloudNodeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDedicatedCloudNodeProperties::OAIDedicatedCloudNodeProperties() {
    this->initializeModel();
}

OAIDedicatedCloudNodeProperties::~OAIDedicatedCloudNodeProperties() {}

void OAIDedicatedCloudNodeProperties::initializeModel() {

    m_availability_zone_id_isSet = false;
    m_availability_zone_id_isValid = false;

    m_availability_zone_name_isSet = false;
    m_availability_zone_name_isValid = false;

    m_cloud_rack_name_isSet = false;
    m_cloud_rack_name_isValid = false;

    m_created_isSet = false;
    m_created_isValid = false;

    m_nodes_count_isSet = false;
    m_nodes_count_isValid = false;

    m_placement_group_id_isSet = false;
    m_placement_group_id_isValid = false;

    m_placement_group_name_isSet = false;
    m_placement_group_name_isValid = false;

    m_private_cloud_id_isSet = false;
    m_private_cloud_id_isValid = false;

    m_private_cloud_name_isSet = false;
    m_private_cloud_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_purchase_id_isSet = false;
    m_purchase_id_isValid = false;

    m_sku_description_isSet = false;
    m_sku_description_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_vmware_cluster_name_isSet = false;
    m_vmware_cluster_name_isValid = false;
}

void OAIDedicatedCloudNodeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDedicatedCloudNodeProperties::fromJsonObject(QJsonObject json) {

    m_availability_zone_id_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_id, json[QString("availabilityZoneId")]);
    m_availability_zone_id_isSet = !json[QString("availabilityZoneId")].isNull() && m_availability_zone_id_isValid;

    m_availability_zone_name_isValid = ::OpenAPI::fromJsonValue(m_availability_zone_name, json[QString("availabilityZoneName")]);
    m_availability_zone_name_isSet = !json[QString("availabilityZoneName")].isNull() && m_availability_zone_name_isValid;

    m_cloud_rack_name_isValid = ::OpenAPI::fromJsonValue(m_cloud_rack_name, json[QString("cloudRackName")]);
    m_cloud_rack_name_isSet = !json[QString("cloudRackName")].isNull() && m_cloud_rack_name_isValid;

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_nodes_count_isValid = ::OpenAPI::fromJsonValue(m_nodes_count, json[QString("nodesCount")]);
    m_nodes_count_isSet = !json[QString("nodesCount")].isNull() && m_nodes_count_isValid;

    m_placement_group_id_isValid = ::OpenAPI::fromJsonValue(m_placement_group_id, json[QString("placementGroupId")]);
    m_placement_group_id_isSet = !json[QString("placementGroupId")].isNull() && m_placement_group_id_isValid;

    m_placement_group_name_isValid = ::OpenAPI::fromJsonValue(m_placement_group_name, json[QString("placementGroupName")]);
    m_placement_group_name_isSet = !json[QString("placementGroupName")].isNull() && m_placement_group_name_isValid;

    m_private_cloud_id_isValid = ::OpenAPI::fromJsonValue(m_private_cloud_id, json[QString("privateCloudId")]);
    m_private_cloud_id_isSet = !json[QString("privateCloudId")].isNull() && m_private_cloud_id_isValid;

    m_private_cloud_name_isValid = ::OpenAPI::fromJsonValue(m_private_cloud_name, json[QString("privateCloudName")]);
    m_private_cloud_name_isSet = !json[QString("privateCloudName")].isNull() && m_private_cloud_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_purchase_id_isValid = ::OpenAPI::fromJsonValue(m_purchase_id, json[QString("purchaseId")]);
    m_purchase_id_isSet = !json[QString("purchaseId")].isNull() && m_purchase_id_isValid;

    m_sku_description_isValid = ::OpenAPI::fromJsonValue(m_sku_description, json[QString("skuDescription")]);
    m_sku_description_isSet = !json[QString("skuDescription")].isNull() && m_sku_description_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_vmware_cluster_name_isValid = ::OpenAPI::fromJsonValue(m_vmware_cluster_name, json[QString("vmwareClusterName")]);
    m_vmware_cluster_name_isSet = !json[QString("vmwareClusterName")].isNull() && m_vmware_cluster_name_isValid;
}

QString OAIDedicatedCloudNodeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDedicatedCloudNodeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_availability_zone_id_isSet) {
        obj.insert(QString("availabilityZoneId"), ::OpenAPI::toJsonValue(m_availability_zone_id));
    }
    if (m_availability_zone_name_isSet) {
        obj.insert(QString("availabilityZoneName"), ::OpenAPI::toJsonValue(m_availability_zone_name));
    }
    if (m_cloud_rack_name_isSet) {
        obj.insert(QString("cloudRackName"), ::OpenAPI::toJsonValue(m_cloud_rack_name));
    }
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_nodes_count_isSet) {
        obj.insert(QString("nodesCount"), ::OpenAPI::toJsonValue(m_nodes_count));
    }
    if (m_placement_group_id_isSet) {
        obj.insert(QString("placementGroupId"), ::OpenAPI::toJsonValue(m_placement_group_id));
    }
    if (m_placement_group_name_isSet) {
        obj.insert(QString("placementGroupName"), ::OpenAPI::toJsonValue(m_placement_group_name));
    }
    if (m_private_cloud_id_isSet) {
        obj.insert(QString("privateCloudId"), ::OpenAPI::toJsonValue(m_private_cloud_id));
    }
    if (m_private_cloud_name_isSet) {
        obj.insert(QString("privateCloudName"), ::OpenAPI::toJsonValue(m_private_cloud_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_purchase_id_isSet) {
        obj.insert(QString("purchaseId"), ::OpenAPI::toJsonValue(m_purchase_id));
    }
    if (m_sku_description.isSet()) {
        obj.insert(QString("skuDescription"), ::OpenAPI::toJsonValue(m_sku_description));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_vmware_cluster_name_isSet) {
        obj.insert(QString("vmwareClusterName"), ::OpenAPI::toJsonValue(m_vmware_cluster_name));
    }
    return obj;
}

QString OAIDedicatedCloudNodeProperties::getAvailabilityZoneId() const {
    return m_availability_zone_id;
}
void OAIDedicatedCloudNodeProperties::setAvailabilityZoneId(const QString &availability_zone_id) {
    m_availability_zone_id = availability_zone_id;
    m_availability_zone_id_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_availability_zone_id_Set() const{
    return m_availability_zone_id_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_availability_zone_id_Valid() const{
    return m_availability_zone_id_isValid;
}

QString OAIDedicatedCloudNodeProperties::getAvailabilityZoneName() const {
    return m_availability_zone_name;
}
void OAIDedicatedCloudNodeProperties::setAvailabilityZoneName(const QString &availability_zone_name) {
    m_availability_zone_name = availability_zone_name;
    m_availability_zone_name_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_availability_zone_name_Set() const{
    return m_availability_zone_name_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_availability_zone_name_Valid() const{
    return m_availability_zone_name_isValid;
}

QString OAIDedicatedCloudNodeProperties::getCloudRackName() const {
    return m_cloud_rack_name;
}
void OAIDedicatedCloudNodeProperties::setCloudRackName(const QString &cloud_rack_name) {
    m_cloud_rack_name = cloud_rack_name;
    m_cloud_rack_name_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_cloud_rack_name_Set() const{
    return m_cloud_rack_name_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_cloud_rack_name_Valid() const{
    return m_cloud_rack_name_isValid;
}

OAIObject OAIDedicatedCloudNodeProperties::getCreated() const {
    return m_created;
}
void OAIDedicatedCloudNodeProperties::setCreated(const OAIObject &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_created_Set() const{
    return m_created_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIDedicatedCloudNodeProperties::getNodesCount() const {
    return m_nodes_count;
}
void OAIDedicatedCloudNodeProperties::setNodesCount(const qint32 &nodes_count) {
    m_nodes_count = nodes_count;
    m_nodes_count_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_nodes_count_Set() const{
    return m_nodes_count_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_nodes_count_Valid() const{
    return m_nodes_count_isValid;
}

QString OAIDedicatedCloudNodeProperties::getPlacementGroupId() const {
    return m_placement_group_id;
}
void OAIDedicatedCloudNodeProperties::setPlacementGroupId(const QString &placement_group_id) {
    m_placement_group_id = placement_group_id;
    m_placement_group_id_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_placement_group_id_Set() const{
    return m_placement_group_id_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_placement_group_id_Valid() const{
    return m_placement_group_id_isValid;
}

QString OAIDedicatedCloudNodeProperties::getPlacementGroupName() const {
    return m_placement_group_name;
}
void OAIDedicatedCloudNodeProperties::setPlacementGroupName(const QString &placement_group_name) {
    m_placement_group_name = placement_group_name;
    m_placement_group_name_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_placement_group_name_Set() const{
    return m_placement_group_name_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_placement_group_name_Valid() const{
    return m_placement_group_name_isValid;
}

QString OAIDedicatedCloudNodeProperties::getPrivateCloudId() const {
    return m_private_cloud_id;
}
void OAIDedicatedCloudNodeProperties::setPrivateCloudId(const QString &private_cloud_id) {
    m_private_cloud_id = private_cloud_id;
    m_private_cloud_id_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_private_cloud_id_Set() const{
    return m_private_cloud_id_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_private_cloud_id_Valid() const{
    return m_private_cloud_id_isValid;
}

QString OAIDedicatedCloudNodeProperties::getPrivateCloudName() const {
    return m_private_cloud_name;
}
void OAIDedicatedCloudNodeProperties::setPrivateCloudName(const QString &private_cloud_name) {
    m_private_cloud_name = private_cloud_name;
    m_private_cloud_name_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_private_cloud_name_Set() const{
    return m_private_cloud_name_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_private_cloud_name_Valid() const{
    return m_private_cloud_name_isValid;
}

QString OAIDedicatedCloudNodeProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIDedicatedCloudNodeProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIDedicatedCloudNodeProperties::getPurchaseId() const {
    return m_purchase_id;
}
void OAIDedicatedCloudNodeProperties::setPurchaseId(const QString &purchase_id) {
    m_purchase_id = purchase_id;
    m_purchase_id_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_purchase_id_Set() const{
    return m_purchase_id_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_purchase_id_Valid() const{
    return m_purchase_id_isValid;
}

OAISkuDescription OAIDedicatedCloudNodeProperties::getSkuDescription() const {
    return m_sku_description;
}
void OAIDedicatedCloudNodeProperties::setSkuDescription(const OAISkuDescription &sku_description) {
    m_sku_description = sku_description;
    m_sku_description_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_sku_description_Set() const{
    return m_sku_description_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_sku_description_Valid() const{
    return m_sku_description_isValid;
}

QString OAIDedicatedCloudNodeProperties::getStatus() const {
    return m_status;
}
void OAIDedicatedCloudNodeProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDedicatedCloudNodeProperties::getVmwareClusterName() const {
    return m_vmware_cluster_name;
}
void OAIDedicatedCloudNodeProperties::setVmwareClusterName(const QString &vmware_cluster_name) {
    m_vmware_cluster_name = vmware_cluster_name;
    m_vmware_cluster_name_isSet = true;
}

bool OAIDedicatedCloudNodeProperties::is_vmware_cluster_name_Set() const{
    return m_vmware_cluster_name_isSet;
}

bool OAIDedicatedCloudNodeProperties::is_vmware_cluster_name_Valid() const{
    return m_vmware_cluster_name_isValid;
}

bool OAIDedicatedCloudNodeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_availability_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_availability_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cloud_rack_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_placement_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cloud_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_private_cloud_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchase_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vmware_cluster_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDedicatedCloudNodeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_availability_zone_id_isValid && m_nodes_count_isValid && m_placement_group_id_isValid && m_purchase_id_isValid && true;
}

} // namespace OpenAPI
