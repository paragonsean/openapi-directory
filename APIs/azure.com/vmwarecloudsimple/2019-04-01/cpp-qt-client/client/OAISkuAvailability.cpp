/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISkuAvailability.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISkuAvailability::OAISkuAvailability(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISkuAvailability::OAISkuAvailability() {
    this->initializeModel();
}

OAISkuAvailability::~OAISkuAvailability() {}

void OAISkuAvailability::initializeModel() {

    m_dedicated_availability_zone_id_isSet = false;
    m_dedicated_availability_zone_id_isValid = false;

    m_dedicated_availability_zone_name_isSet = false;
    m_dedicated_availability_zone_name_isValid = false;

    m_dedicated_placement_group_id_isSet = false;
    m_dedicated_placement_group_id_isValid = false;

    m_dedicated_placement_group_name_isSet = false;
    m_dedicated_placement_group_name_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_sku_id_isSet = false;
    m_sku_id_isValid = false;

    m_sku_name_isSet = false;
    m_sku_name_isValid = false;
}

void OAISkuAvailability::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISkuAvailability::fromJsonObject(QJsonObject json) {

    m_dedicated_availability_zone_id_isValid = ::OpenAPI::fromJsonValue(m_dedicated_availability_zone_id, json[QString("dedicatedAvailabilityZoneId")]);
    m_dedicated_availability_zone_id_isSet = !json[QString("dedicatedAvailabilityZoneId")].isNull() && m_dedicated_availability_zone_id_isValid;

    m_dedicated_availability_zone_name_isValid = ::OpenAPI::fromJsonValue(m_dedicated_availability_zone_name, json[QString("dedicatedAvailabilityZoneName")]);
    m_dedicated_availability_zone_name_isSet = !json[QString("dedicatedAvailabilityZoneName")].isNull() && m_dedicated_availability_zone_name_isValid;

    m_dedicated_placement_group_id_isValid = ::OpenAPI::fromJsonValue(m_dedicated_placement_group_id, json[QString("dedicatedPlacementGroupId")]);
    m_dedicated_placement_group_id_isSet = !json[QString("dedicatedPlacementGroupId")].isNull() && m_dedicated_placement_group_id_isValid;

    m_dedicated_placement_group_name_isValid = ::OpenAPI::fromJsonValue(m_dedicated_placement_group_name, json[QString("dedicatedPlacementGroupName")]);
    m_dedicated_placement_group_name_isSet = !json[QString("dedicatedPlacementGroupName")].isNull() && m_dedicated_placement_group_name_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_sku_id_isValid = ::OpenAPI::fromJsonValue(m_sku_id, json[QString("skuId")]);
    m_sku_id_isSet = !json[QString("skuId")].isNull() && m_sku_id_isValid;

    m_sku_name_isValid = ::OpenAPI::fromJsonValue(m_sku_name, json[QString("skuName")]);
    m_sku_name_isSet = !json[QString("skuName")].isNull() && m_sku_name_isValid;
}

QString OAISkuAvailability::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISkuAvailability::asJsonObject() const {
    QJsonObject obj;
    if (m_dedicated_availability_zone_id_isSet) {
        obj.insert(QString("dedicatedAvailabilityZoneId"), ::OpenAPI::toJsonValue(m_dedicated_availability_zone_id));
    }
    if (m_dedicated_availability_zone_name_isSet) {
        obj.insert(QString("dedicatedAvailabilityZoneName"), ::OpenAPI::toJsonValue(m_dedicated_availability_zone_name));
    }
    if (m_dedicated_placement_group_id_isSet) {
        obj.insert(QString("dedicatedPlacementGroupId"), ::OpenAPI::toJsonValue(m_dedicated_placement_group_id));
    }
    if (m_dedicated_placement_group_name_isSet) {
        obj.insert(QString("dedicatedPlacementGroupName"), ::OpenAPI::toJsonValue(m_dedicated_placement_group_name));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_resource_type_isSet) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_sku_id_isSet) {
        obj.insert(QString("skuId"), ::OpenAPI::toJsonValue(m_sku_id));
    }
    if (m_sku_name_isSet) {
        obj.insert(QString("skuName"), ::OpenAPI::toJsonValue(m_sku_name));
    }
    return obj;
}

QString OAISkuAvailability::getDedicatedAvailabilityZoneId() const {
    return m_dedicated_availability_zone_id;
}
void OAISkuAvailability::setDedicatedAvailabilityZoneId(const QString &dedicated_availability_zone_id) {
    m_dedicated_availability_zone_id = dedicated_availability_zone_id;
    m_dedicated_availability_zone_id_isSet = true;
}

bool OAISkuAvailability::is_dedicated_availability_zone_id_Set() const{
    return m_dedicated_availability_zone_id_isSet;
}

bool OAISkuAvailability::is_dedicated_availability_zone_id_Valid() const{
    return m_dedicated_availability_zone_id_isValid;
}

QString OAISkuAvailability::getDedicatedAvailabilityZoneName() const {
    return m_dedicated_availability_zone_name;
}
void OAISkuAvailability::setDedicatedAvailabilityZoneName(const QString &dedicated_availability_zone_name) {
    m_dedicated_availability_zone_name = dedicated_availability_zone_name;
    m_dedicated_availability_zone_name_isSet = true;
}

bool OAISkuAvailability::is_dedicated_availability_zone_name_Set() const{
    return m_dedicated_availability_zone_name_isSet;
}

bool OAISkuAvailability::is_dedicated_availability_zone_name_Valid() const{
    return m_dedicated_availability_zone_name_isValid;
}

QString OAISkuAvailability::getDedicatedPlacementGroupId() const {
    return m_dedicated_placement_group_id;
}
void OAISkuAvailability::setDedicatedPlacementGroupId(const QString &dedicated_placement_group_id) {
    m_dedicated_placement_group_id = dedicated_placement_group_id;
    m_dedicated_placement_group_id_isSet = true;
}

bool OAISkuAvailability::is_dedicated_placement_group_id_Set() const{
    return m_dedicated_placement_group_id_isSet;
}

bool OAISkuAvailability::is_dedicated_placement_group_id_Valid() const{
    return m_dedicated_placement_group_id_isValid;
}

QString OAISkuAvailability::getDedicatedPlacementGroupName() const {
    return m_dedicated_placement_group_name;
}
void OAISkuAvailability::setDedicatedPlacementGroupName(const QString &dedicated_placement_group_name) {
    m_dedicated_placement_group_name = dedicated_placement_group_name;
    m_dedicated_placement_group_name_isSet = true;
}

bool OAISkuAvailability::is_dedicated_placement_group_name_Set() const{
    return m_dedicated_placement_group_name_isSet;
}

bool OAISkuAvailability::is_dedicated_placement_group_name_Valid() const{
    return m_dedicated_placement_group_name_isValid;
}

qint32 OAISkuAvailability::getLimit() const {
    return m_limit;
}
void OAISkuAvailability::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAISkuAvailability::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAISkuAvailability::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAISkuAvailability::getResourceType() const {
    return m_resource_type;
}
void OAISkuAvailability::setResourceType(const QString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAISkuAvailability::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAISkuAvailability::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

QString OAISkuAvailability::getSkuId() const {
    return m_sku_id;
}
void OAISkuAvailability::setSkuId(const QString &sku_id) {
    m_sku_id = sku_id;
    m_sku_id_isSet = true;
}

bool OAISkuAvailability::is_sku_id_Set() const{
    return m_sku_id_isSet;
}

bool OAISkuAvailability::is_sku_id_Valid() const{
    return m_sku_id_isValid;
}

QString OAISkuAvailability::getSkuName() const {
    return m_sku_name;
}
void OAISkuAvailability::setSkuName(const QString &sku_name) {
    m_sku_name = sku_name;
    m_sku_name_isSet = true;
}

bool OAISkuAvailability::is_sku_name_Set() const{
    return m_sku_name_isSet;
}

bool OAISkuAvailability::is_sku_name_Valid() const{
    return m_sku_name_isValid;
}

bool OAISkuAvailability::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_dedicated_availability_zone_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_availability_zone_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_placement_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dedicated_placement_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sku_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISkuAvailability::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_limit_isValid && true;
}

} // namespace OpenAPI
