/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDedicatedCloudServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDedicatedCloudServiceProperties::OAIDedicatedCloudServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDedicatedCloudServiceProperties::OAIDedicatedCloudServiceProperties() {
    this->initializeModel();
}

OAIDedicatedCloudServiceProperties::~OAIDedicatedCloudServiceProperties() {}

void OAIDedicatedCloudServiceProperties::initializeModel() {

    m_gateway_subnet_isSet = false;
    m_gateway_subnet_isValid = false;

    m_is_account_onboarded_isSet = false;
    m_is_account_onboarded_isValid = false;

    m_nodes_isSet = false;
    m_nodes_isValid = false;

    m_service_url_isSet = false;
    m_service_url_isValid = false;
}

void OAIDedicatedCloudServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDedicatedCloudServiceProperties::fromJsonObject(QJsonObject json) {

    m_gateway_subnet_isValid = ::OpenAPI::fromJsonValue(m_gateway_subnet, json[QString("gatewaySubnet")]);
    m_gateway_subnet_isSet = !json[QString("gatewaySubnet")].isNull() && m_gateway_subnet_isValid;

    m_is_account_onboarded_isValid = ::OpenAPI::fromJsonValue(m_is_account_onboarded, json[QString("isAccountOnboarded")]);
    m_is_account_onboarded_isSet = !json[QString("isAccountOnboarded")].isNull() && m_is_account_onboarded_isValid;

    m_nodes_isValid = ::OpenAPI::fromJsonValue(m_nodes, json[QString("nodes")]);
    m_nodes_isSet = !json[QString("nodes")].isNull() && m_nodes_isValid;

    m_service_url_isValid = ::OpenAPI::fromJsonValue(m_service_url, json[QString("serviceURL")]);
    m_service_url_isSet = !json[QString("serviceURL")].isNull() && m_service_url_isValid;
}

QString OAIDedicatedCloudServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDedicatedCloudServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_gateway_subnet_isSet) {
        obj.insert(QString("gatewaySubnet"), ::OpenAPI::toJsonValue(m_gateway_subnet));
    }
    if (m_is_account_onboarded_isSet) {
        obj.insert(QString("isAccountOnboarded"), ::OpenAPI::toJsonValue(m_is_account_onboarded));
    }
    if (m_nodes_isSet) {
        obj.insert(QString("nodes"), ::OpenAPI::toJsonValue(m_nodes));
    }
    if (m_service_url_isSet) {
        obj.insert(QString("serviceURL"), ::OpenAPI::toJsonValue(m_service_url));
    }
    return obj;
}

QString OAIDedicatedCloudServiceProperties::getGatewaySubnet() const {
    return m_gateway_subnet;
}
void OAIDedicatedCloudServiceProperties::setGatewaySubnet(const QString &gateway_subnet) {
    m_gateway_subnet = gateway_subnet;
    m_gateway_subnet_isSet = true;
}

bool OAIDedicatedCloudServiceProperties::is_gateway_subnet_Set() const{
    return m_gateway_subnet_isSet;
}

bool OAIDedicatedCloudServiceProperties::is_gateway_subnet_Valid() const{
    return m_gateway_subnet_isValid;
}

QString OAIDedicatedCloudServiceProperties::getIsAccountOnboarded() const {
    return m_is_account_onboarded;
}
void OAIDedicatedCloudServiceProperties::setIsAccountOnboarded(const QString &is_account_onboarded) {
    m_is_account_onboarded = is_account_onboarded;
    m_is_account_onboarded_isSet = true;
}

bool OAIDedicatedCloudServiceProperties::is_is_account_onboarded_Set() const{
    return m_is_account_onboarded_isSet;
}

bool OAIDedicatedCloudServiceProperties::is_is_account_onboarded_Valid() const{
    return m_is_account_onboarded_isValid;
}

qint32 OAIDedicatedCloudServiceProperties::getNodes() const {
    return m_nodes;
}
void OAIDedicatedCloudServiceProperties::setNodes(const qint32 &nodes) {
    m_nodes = nodes;
    m_nodes_isSet = true;
}

bool OAIDedicatedCloudServiceProperties::is_nodes_Set() const{
    return m_nodes_isSet;
}

bool OAIDedicatedCloudServiceProperties::is_nodes_Valid() const{
    return m_nodes_isValid;
}

QString OAIDedicatedCloudServiceProperties::getServiceUrl() const {
    return m_service_url;
}
void OAIDedicatedCloudServiceProperties::setServiceUrl(const QString &service_url) {
    m_service_url = service_url;
    m_service_url_isSet = true;
}

bool OAIDedicatedCloudServiceProperties::is_service_url_Set() const{
    return m_service_url_isSet;
}

bool OAIDedicatedCloudServiceProperties::is_service_url_Valid() const{
    return m_service_url_isValid;
}

bool OAIDedicatedCloudServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_gateway_subnet_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_account_onboarded_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_nodes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDedicatedCloudServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_gateway_subnet_isValid && true;
}

} // namespace OpenAPI
