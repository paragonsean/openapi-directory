/**
 * VMwareCloudSimple
 * Description of the new service
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDedicatedCloudNodesApi_H
#define OAI_OAIDedicatedCloudNodesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICSRPError.h"
#include "OAIDedicatedCloudNode.h"
#include "OAIDedicatedCloudNodeListResponse.h"
#include "OAIPatchPayload.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDedicatedCloudNodesApi : public QObject {
    Q_OBJECT

public:
    OAIDedicatedCloudNodesApi(const int timeOut = 0);
    ~OAIDedicatedCloudNodesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  referer QString [required]
    * @param[in]  dedicated_cloud_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  dedicated_cloud_node_request OAIDedicatedCloudNode [required]
    */
    virtual void dedicatedCloudNodesCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &referer, const QString &dedicated_cloud_node_name, const QString &api_version, const OAIDedicatedCloudNode &dedicated_cloud_node_request);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_node_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dedicatedCloudNodesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_node_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_node_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dedicatedCloudNodesGet(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_node_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void dedicatedCloudNodesListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip_token QString [optional]
    */
    virtual void dedicatedCloudNodesListBySubscription(const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  dedicated_cloud_node_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  dedicated_cloud_node_request OAIPatchPayload [required]
    */
    virtual void dedicatedCloudNodesUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &dedicated_cloud_node_name, const QString &api_version, const OAIPatchPayload &dedicated_cloud_node_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dedicatedCloudNodesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudNodesDeleteCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudNodesGetCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudNodesListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudNodesListBySubscriptionCallback(OAIHttpRequestWorker *worker);
    void dedicatedCloudNodesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dedicatedCloudNodesCreateOrUpdateSignal(OAIDedicatedCloudNode summary);
    void dedicatedCloudNodesDeleteSignal();
    void dedicatedCloudNodesGetSignal(OAIDedicatedCloudNode summary);
    void dedicatedCloudNodesListByResourceGroupSignal(OAIDedicatedCloudNodeListResponse summary);
    void dedicatedCloudNodesListBySubscriptionSignal(OAIDedicatedCloudNodeListResponse summary);
    void dedicatedCloudNodesUpdateSignal(OAIDedicatedCloudNode summary);


    void dedicatedCloudNodesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudNode summary);
    void dedicatedCloudNodesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dedicatedCloudNodesGetSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudNode summary);
    void dedicatedCloudNodesListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudNodeListResponse summary);
    void dedicatedCloudNodesListBySubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudNodeListResponse summary);
    void dedicatedCloudNodesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDedicatedCloudNode summary);

    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesCreateOrUpdateSignalError() instead")
    void dedicatedCloudNodesCreateOrUpdateSignalE(OAIDedicatedCloudNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesCreateOrUpdateSignalError(OAIDedicatedCloudNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesDeleteSignalError() instead")
    void dedicatedCloudNodesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesGetSignalError() instead")
    void dedicatedCloudNodesGetSignalE(OAIDedicatedCloudNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesGetSignalError(OAIDedicatedCloudNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesListByResourceGroupSignalError() instead")
    void dedicatedCloudNodesListByResourceGroupSignalE(OAIDedicatedCloudNodeListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesListByResourceGroupSignalError(OAIDedicatedCloudNodeListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesListBySubscriptionSignalError() instead")
    void dedicatedCloudNodesListBySubscriptionSignalE(OAIDedicatedCloudNodeListResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesListBySubscriptionSignalError(OAIDedicatedCloudNodeListResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesUpdateSignalError() instead")
    void dedicatedCloudNodesUpdateSignalE(OAIDedicatedCloudNode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesUpdateSignalError(OAIDedicatedCloudNode summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesCreateOrUpdateSignalErrorFull() instead")
    void dedicatedCloudNodesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesDeleteSignalErrorFull() instead")
    void dedicatedCloudNodesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesGetSignalErrorFull() instead")
    void dedicatedCloudNodesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesListByResourceGroupSignalErrorFull() instead")
    void dedicatedCloudNodesListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesListBySubscriptionSignalErrorFull() instead")
    void dedicatedCloudNodesListBySubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesListBySubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dedicatedCloudNodesUpdateSignalErrorFull() instead")
    void dedicatedCloudNodesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dedicatedCloudNodesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
