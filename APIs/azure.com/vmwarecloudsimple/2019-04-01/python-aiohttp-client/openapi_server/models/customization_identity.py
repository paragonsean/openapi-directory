# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customization_host_name import CustomizationHostName
from openapi_server.models.customization_identity_user_data import CustomizationIdentityUserData
from openapi_server import util


class CustomizationIdentity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: str=None, host_name: CustomizationHostName=None, type: str=None, user_data: CustomizationIdentityUserData=None):
        """CustomizationIdentity - a model defined in OpenAPI

        :param data: The data of this CustomizationIdentity.
        :param host_name: The host_name of this CustomizationIdentity.
        :param type: The type of this CustomizationIdentity.
        :param user_data: The user_data of this CustomizationIdentity.
        """
        self.openapi_types = {
            'data': str,
            'host_name': CustomizationHostName,
            'type': str,
            'user_data': CustomizationIdentityUserData
        }

        self.attribute_map = {
            'data': 'data',
            'host_name': 'hostName',
            'type': 'type',
            'user_data': 'userData'
        }

        self._data = data
        self._host_name = host_name
        self._type = type
        self._user_data = user_data

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomizationIdentity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomizationIdentity of this CustomizationIdentity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this CustomizationIdentity.

        Windows Text Identity. Prepared data

        :return: The data of this CustomizationIdentity.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CustomizationIdentity.

        Windows Text Identity. Prepared data

        :param data: The data of this CustomizationIdentity.
        :type data: str
        """

        self._data = data

    @property
    def host_name(self):
        """Gets the host_name of this CustomizationIdentity.


        :return: The host_name of this CustomizationIdentity.
        :rtype: CustomizationHostName
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this CustomizationIdentity.


        :param host_name: The host_name of this CustomizationIdentity.
        :type host_name: CustomizationHostName
        """

        self._host_name = host_name

    @property
    def type(self):
        """Gets the type of this CustomizationIdentity.

        Identity type

        :return: The type of this CustomizationIdentity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomizationIdentity.

        Identity type

        :param type: The type of this CustomizationIdentity.
        :type type: str
        """
        allowed_values = ["WINDOWS_TEXT", "WINDOWS", "LINUX"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_data(self):
        """Gets the user_data of this CustomizationIdentity.


        :return: The user_data of this CustomizationIdentity.
        :rtype: CustomizationIdentityUserData
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data):
        """Sets the user_data of this CustomizationIdentity.


        :param user_data: The user_data of this CustomizationIdentity.
        :type user_data: CustomizationIdentityUserData
        """

        self._user_data = user_data
