# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_disk import VirtualDisk
from openapi_server.models.virtual_disk_controller import VirtualDiskController
from openapi_server.models.virtual_nic import VirtualNic
from openapi_server import util


class VirtualMachineTemplateProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_of_ram: int=None, controllers: List[VirtualDiskController]=None, description: str=None, disks: List[VirtualDisk]=None, expose_to_guest_vm: bool=None, guest_os: str=None, guest_os_type: str=None, nics: List[VirtualNic]=None, number_of_cores: int=None, path: str=None, private_cloud_id: str=None, v_sphere_networks: List[str]=None, v_sphere_tags: List[str]=None, vmwaretools: str=None):
        """VirtualMachineTemplateProperties - a model defined in OpenAPI

        :param amount_of_ram: The amount_of_ram of this VirtualMachineTemplateProperties.
        :param controllers: The controllers of this VirtualMachineTemplateProperties.
        :param description: The description of this VirtualMachineTemplateProperties.
        :param disks: The disks of this VirtualMachineTemplateProperties.
        :param expose_to_guest_vm: The expose_to_guest_vm of this VirtualMachineTemplateProperties.
        :param guest_os: The guest_os of this VirtualMachineTemplateProperties.
        :param guest_os_type: The guest_os_type of this VirtualMachineTemplateProperties.
        :param nics: The nics of this VirtualMachineTemplateProperties.
        :param number_of_cores: The number_of_cores of this VirtualMachineTemplateProperties.
        :param path: The path of this VirtualMachineTemplateProperties.
        :param private_cloud_id: The private_cloud_id of this VirtualMachineTemplateProperties.
        :param v_sphere_networks: The v_sphere_networks of this VirtualMachineTemplateProperties.
        :param v_sphere_tags: The v_sphere_tags of this VirtualMachineTemplateProperties.
        :param vmwaretools: The vmwaretools of this VirtualMachineTemplateProperties.
        """
        self.openapi_types = {
            'amount_of_ram': int,
            'controllers': List[VirtualDiskController],
            'description': str,
            'disks': List[VirtualDisk],
            'expose_to_guest_vm': bool,
            'guest_os': str,
            'guest_os_type': str,
            'nics': List[VirtualNic],
            'number_of_cores': int,
            'path': str,
            'private_cloud_id': str,
            'v_sphere_networks': List[str],
            'v_sphere_tags': List[str],
            'vmwaretools': str
        }

        self.attribute_map = {
            'amount_of_ram': 'amountOfRam',
            'controllers': 'controllers',
            'description': 'description',
            'disks': 'disks',
            'expose_to_guest_vm': 'exposeToGuestVM',
            'guest_os': 'guestOS',
            'guest_os_type': 'guestOSType',
            'nics': 'nics',
            'number_of_cores': 'numberOfCores',
            'path': 'path',
            'private_cloud_id': 'privateCloudId',
            'v_sphere_networks': 'vSphereNetworks',
            'v_sphere_tags': 'vSphereTags',
            'vmwaretools': 'vmwaretools'
        }

        self._amount_of_ram = amount_of_ram
        self._controllers = controllers
        self._description = description
        self._disks = disks
        self._expose_to_guest_vm = expose_to_guest_vm
        self._guest_os = guest_os
        self._guest_os_type = guest_os_type
        self._nics = nics
        self._number_of_cores = number_of_cores
        self._path = path
        self._private_cloud_id = private_cloud_id
        self._v_sphere_networks = v_sphere_networks
        self._v_sphere_tags = v_sphere_tags
        self._vmwaretools = vmwaretools

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineTemplateProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineTemplateProperties of this VirtualMachineTemplateProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_of_ram(self):
        """Gets the amount_of_ram of this VirtualMachineTemplateProperties.

        The amount of memory

        :return: The amount_of_ram of this VirtualMachineTemplateProperties.
        :rtype: int
        """
        return self._amount_of_ram

    @amount_of_ram.setter
    def amount_of_ram(self, amount_of_ram):
        """Sets the amount_of_ram of this VirtualMachineTemplateProperties.

        The amount of memory

        :param amount_of_ram: The amount_of_ram of this VirtualMachineTemplateProperties.
        :type amount_of_ram: int
        """

        self._amount_of_ram = amount_of_ram

    @property
    def controllers(self):
        """Gets the controllers of this VirtualMachineTemplateProperties.

        The list of Virtual Disk Controllers

        :return: The controllers of this VirtualMachineTemplateProperties.
        :rtype: List[VirtualDiskController]
        """
        return self._controllers

    @controllers.setter
    def controllers(self, controllers):
        """Sets the controllers of this VirtualMachineTemplateProperties.

        The list of Virtual Disk Controllers

        :param controllers: The controllers of this VirtualMachineTemplateProperties.
        :type controllers: List[VirtualDiskController]
        """

        self._controllers = controllers

    @property
    def description(self):
        """Gets the description of this VirtualMachineTemplateProperties.

        The description of Virtual Machine Template

        :return: The description of this VirtualMachineTemplateProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VirtualMachineTemplateProperties.

        The description of Virtual Machine Template

        :param description: The description of this VirtualMachineTemplateProperties.
        :type description: str
        """

        self._description = description

    @property
    def disks(self):
        """Gets the disks of this VirtualMachineTemplateProperties.

        The list of Virtual Disks

        :return: The disks of this VirtualMachineTemplateProperties.
        :rtype: List[VirtualDisk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this VirtualMachineTemplateProperties.

        The list of Virtual Disks

        :param disks: The disks of this VirtualMachineTemplateProperties.
        :type disks: List[VirtualDisk]
        """

        self._disks = disks

    @property
    def expose_to_guest_vm(self):
        """Gets the expose_to_guest_vm of this VirtualMachineTemplateProperties.

        Expose Guest OS or not

        :return: The expose_to_guest_vm of this VirtualMachineTemplateProperties.
        :rtype: bool
        """
        return self._expose_to_guest_vm

    @expose_to_guest_vm.setter
    def expose_to_guest_vm(self, expose_to_guest_vm):
        """Sets the expose_to_guest_vm of this VirtualMachineTemplateProperties.

        Expose Guest OS or not

        :param expose_to_guest_vm: The expose_to_guest_vm of this VirtualMachineTemplateProperties.
        :type expose_to_guest_vm: bool
        """

        self._expose_to_guest_vm = expose_to_guest_vm

    @property
    def guest_os(self):
        """Gets the guest_os of this VirtualMachineTemplateProperties.

        The Guest OS

        :return: The guest_os of this VirtualMachineTemplateProperties.
        :rtype: str
        """
        return self._guest_os

    @guest_os.setter
    def guest_os(self, guest_os):
        """Sets the guest_os of this VirtualMachineTemplateProperties.

        The Guest OS

        :param guest_os: The guest_os of this VirtualMachineTemplateProperties.
        :type guest_os: str
        """

        self._guest_os = guest_os

    @property
    def guest_os_type(self):
        """Gets the guest_os_type of this VirtualMachineTemplateProperties.

        The Guest OS types

        :return: The guest_os_type of this VirtualMachineTemplateProperties.
        :rtype: str
        """
        return self._guest_os_type

    @guest_os_type.setter
    def guest_os_type(self, guest_os_type):
        """Sets the guest_os_type of this VirtualMachineTemplateProperties.

        The Guest OS types

        :param guest_os_type: The guest_os_type of this VirtualMachineTemplateProperties.
        :type guest_os_type: str
        """

        self._guest_os_type = guest_os_type

    @property
    def nics(self):
        """Gets the nics of this VirtualMachineTemplateProperties.

        The list of Virtual NICs

        :return: The nics of this VirtualMachineTemplateProperties.
        :rtype: List[VirtualNic]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this VirtualMachineTemplateProperties.

        The list of Virtual NICs

        :param nics: The nics of this VirtualMachineTemplateProperties.
        :type nics: List[VirtualNic]
        """

        self._nics = nics

    @property
    def number_of_cores(self):
        """Gets the number_of_cores of this VirtualMachineTemplateProperties.

        The number of CPU cores

        :return: The number_of_cores of this VirtualMachineTemplateProperties.
        :rtype: int
        """
        return self._number_of_cores

    @number_of_cores.setter
    def number_of_cores(self, number_of_cores):
        """Sets the number_of_cores of this VirtualMachineTemplateProperties.

        The number of CPU cores

        :param number_of_cores: The number_of_cores of this VirtualMachineTemplateProperties.
        :type number_of_cores: int
        """

        self._number_of_cores = number_of_cores

    @property
    def path(self):
        """Gets the path of this VirtualMachineTemplateProperties.

        path to folder

        :return: The path of this VirtualMachineTemplateProperties.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this VirtualMachineTemplateProperties.

        path to folder

        :param path: The path of this VirtualMachineTemplateProperties.
        :type path: str
        """

        self._path = path

    @property
    def private_cloud_id(self):
        """Gets the private_cloud_id of this VirtualMachineTemplateProperties.

        The Private Cloud Id

        :return: The private_cloud_id of this VirtualMachineTemplateProperties.
        :rtype: str
        """
        return self._private_cloud_id

    @private_cloud_id.setter
    def private_cloud_id(self, private_cloud_id):
        """Sets the private_cloud_id of this VirtualMachineTemplateProperties.

        The Private Cloud Id

        :param private_cloud_id: The private_cloud_id of this VirtualMachineTemplateProperties.
        :type private_cloud_id: str
        """
        if private_cloud_id is None:
            raise ValueError("Invalid value for `private_cloud_id`, must not be `None`")

        self._private_cloud_id = private_cloud_id

    @property
    def v_sphere_networks(self):
        """Gets the v_sphere_networks of this VirtualMachineTemplateProperties.

        The list of VSphere networks

        :return: The v_sphere_networks of this VirtualMachineTemplateProperties.
        :rtype: List[str]
        """
        return self._v_sphere_networks

    @v_sphere_networks.setter
    def v_sphere_networks(self, v_sphere_networks):
        """Sets the v_sphere_networks of this VirtualMachineTemplateProperties.

        The list of VSphere networks

        :param v_sphere_networks: The v_sphere_networks of this VirtualMachineTemplateProperties.
        :type v_sphere_networks: List[str]
        """

        self._v_sphere_networks = v_sphere_networks

    @property
    def v_sphere_tags(self):
        """Gets the v_sphere_tags of this VirtualMachineTemplateProperties.

        The tags from VSphere

        :return: The v_sphere_tags of this VirtualMachineTemplateProperties.
        :rtype: List[str]
        """
        return self._v_sphere_tags

    @v_sphere_tags.setter
    def v_sphere_tags(self, v_sphere_tags):
        """Sets the v_sphere_tags of this VirtualMachineTemplateProperties.

        The tags from VSphere

        :param v_sphere_tags: The v_sphere_tags of this VirtualMachineTemplateProperties.
        :type v_sphere_tags: List[str]
        """

        self._v_sphere_tags = v_sphere_tags

    @property
    def vmwaretools(self):
        """Gets the vmwaretools of this VirtualMachineTemplateProperties.

        The VMware tools version

        :return: The vmwaretools of this VirtualMachineTemplateProperties.
        :rtype: str
        """
        return self._vmwaretools

    @vmwaretools.setter
    def vmwaretools(self, vmwaretools):
        """Sets the vmwaretools of this VirtualMachineTemplateProperties.

        The VMware tools version

        :param vmwaretools: The vmwaretools of this VirtualMachineTemplateProperties.
        :type vmwaretools: str
        """

        self._vmwaretools = vmwaretools
