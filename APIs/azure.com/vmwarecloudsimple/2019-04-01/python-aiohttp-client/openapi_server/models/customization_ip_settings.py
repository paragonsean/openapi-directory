# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customization_ip_address import CustomizationIPAddress
from openapi_server import util


class CustomizationIPSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway: List[str]=None, ip: CustomizationIPAddress=None, subnet_mask: str=None):
        """CustomizationIPSettings - a model defined in OpenAPI

        :param gateway: The gateway of this CustomizationIPSettings.
        :param ip: The ip of this CustomizationIPSettings.
        :param subnet_mask: The subnet_mask of this CustomizationIPSettings.
        """
        self.openapi_types = {
            'gateway': List[str],
            'ip': CustomizationIPAddress,
            'subnet_mask': str
        }

        self.attribute_map = {
            'gateway': 'gateway',
            'ip': 'ip',
            'subnet_mask': 'subnetMask'
        }

        self._gateway = gateway
        self._ip = ip
        self._subnet_mask = subnet_mask

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomizationIPSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomizationIPSettings of this CustomizationIPSettings.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway(self):
        """Gets the gateway of this CustomizationIPSettings.

        The list of gateways

        :return: The gateway of this CustomizationIPSettings.
        :rtype: List[str]
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this CustomizationIPSettings.

        The list of gateways

        :param gateway: The gateway of this CustomizationIPSettings.
        :type gateway: List[str]
        """

        self._gateway = gateway

    @property
    def ip(self):
        """Gets the ip of this CustomizationIPSettings.


        :return: The ip of this CustomizationIPSettings.
        :rtype: CustomizationIPAddress
        """
        return self._ip

    @ip.setter
    def ip(self, ip):
        """Sets the ip of this CustomizationIPSettings.


        :param ip: The ip of this CustomizationIPSettings.
        :type ip: CustomizationIPAddress
        """

        self._ip = ip

    @property
    def subnet_mask(self):
        """Gets the subnet_mask of this CustomizationIPSettings.

        Adapter subnet mask

        :return: The subnet_mask of this CustomizationIPSettings.
        :rtype: str
        """
        return self._subnet_mask

    @subnet_mask.setter
    def subnet_mask(self, subnet_mask):
        """Sets the subnet_mask of this CustomizationIPSettings.

        Adapter subnet mask

        :param subnet_mask: The subnet_mask of this CustomizationIPSettings.
        :type subnet_mask: str
        """

        self._subnet_mask = subnet_mask
