# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DedicatedCloudServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gateway_subnet: str=None, is_account_onboarded: str=None, nodes: int=None, service_url: str=None):
        """DedicatedCloudServiceProperties - a model defined in OpenAPI

        :param gateway_subnet: The gateway_subnet of this DedicatedCloudServiceProperties.
        :param is_account_onboarded: The is_account_onboarded of this DedicatedCloudServiceProperties.
        :param nodes: The nodes of this DedicatedCloudServiceProperties.
        :param service_url: The service_url of this DedicatedCloudServiceProperties.
        """
        self.openapi_types = {
            'gateway_subnet': str,
            'is_account_onboarded': str,
            'nodes': int,
            'service_url': str
        }

        self.attribute_map = {
            'gateway_subnet': 'gatewaySubnet',
            'is_account_onboarded': 'isAccountOnboarded',
            'nodes': 'nodes',
            'service_url': 'serviceURL'
        }

        self._gateway_subnet = gateway_subnet
        self._is_account_onboarded = is_account_onboarded
        self._nodes = nodes
        self._service_url = service_url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DedicatedCloudServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DedicatedCloudServiceProperties of this DedicatedCloudServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gateway_subnet(self):
        """Gets the gateway_subnet of this DedicatedCloudServiceProperties.

        gateway Subnet for the account. It will collect the subnet address and always treat it as /28

        :return: The gateway_subnet of this DedicatedCloudServiceProperties.
        :rtype: str
        """
        return self._gateway_subnet

    @gateway_subnet.setter
    def gateway_subnet(self, gateway_subnet):
        """Sets the gateway_subnet of this DedicatedCloudServiceProperties.

        gateway Subnet for the account. It will collect the subnet address and always treat it as /28

        :param gateway_subnet: The gateway_subnet of this DedicatedCloudServiceProperties.
        :type gateway_subnet: str
        """
        if gateway_subnet is None:
            raise ValueError("Invalid value for `gateway_subnet`, must not be `None`")

        self._gateway_subnet = gateway_subnet

    @property
    def is_account_onboarded(self):
        """Gets the is_account_onboarded of this DedicatedCloudServiceProperties.

        indicates whether account onboarded or not in a given region

        :return: The is_account_onboarded of this DedicatedCloudServiceProperties.
        :rtype: str
        """
        return self._is_account_onboarded

    @is_account_onboarded.setter
    def is_account_onboarded(self, is_account_onboarded):
        """Sets the is_account_onboarded of this DedicatedCloudServiceProperties.

        indicates whether account onboarded or not in a given region

        :param is_account_onboarded: The is_account_onboarded of this DedicatedCloudServiceProperties.
        :type is_account_onboarded: str
        """
        allowed_values = ["notOnBoarded", "onBoarded", "onBoardingFailed", "onBoarding"]  # noqa: E501
        if is_account_onboarded not in allowed_values:
            raise ValueError(
                "Invalid value for `is_account_onboarded` ({0}), must be one of {1}"
                .format(is_account_onboarded, allowed_values)
            )

        self._is_account_onboarded = is_account_onboarded

    @property
    def nodes(self):
        """Gets the nodes of this DedicatedCloudServiceProperties.

        total nodes purchased

        :return: The nodes of this DedicatedCloudServiceProperties.
        :rtype: int
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes):
        """Sets the nodes of this DedicatedCloudServiceProperties.

        total nodes purchased

        :param nodes: The nodes of this DedicatedCloudServiceProperties.
        :type nodes: int
        """

        self._nodes = nodes

    @property
    def service_url(self):
        """Gets the service_url of this DedicatedCloudServiceProperties.

        link to a service management web portal

        :return: The service_url of this DedicatedCloudServiceProperties.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this DedicatedCloudServiceProperties.

        link to a service management web portal

        :param service_url: The service_url of this DedicatedCloudServiceProperties.
        :type service_url: str
        """

        self._service_url = service_url
