# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_osnic_customization import GuestOSNICCustomization
from openapi_server.models.virtual_network import VirtualNetwork
from openapi_server import util


class VirtualNic(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customization: GuestOSNICCustomization=None, ip_addresses: List[str]=None, mac_address: str=None, network: VirtualNetwork=None, nic_type: str=None, power_on_boot: bool=None, virtual_nic_id: str=None, virtual_nic_name: str=None):
        """VirtualNic - a model defined in OpenAPI

        :param customization: The customization of this VirtualNic.
        :param ip_addresses: The ip_addresses of this VirtualNic.
        :param mac_address: The mac_address of this VirtualNic.
        :param network: The network of this VirtualNic.
        :param nic_type: The nic_type of this VirtualNic.
        :param power_on_boot: The power_on_boot of this VirtualNic.
        :param virtual_nic_id: The virtual_nic_id of this VirtualNic.
        :param virtual_nic_name: The virtual_nic_name of this VirtualNic.
        """
        self.openapi_types = {
            'customization': GuestOSNICCustomization,
            'ip_addresses': List[str],
            'mac_address': str,
            'network': VirtualNetwork,
            'nic_type': str,
            'power_on_boot': bool,
            'virtual_nic_id': str,
            'virtual_nic_name': str
        }

        self.attribute_map = {
            'customization': 'customization',
            'ip_addresses': 'ipAddresses',
            'mac_address': 'macAddress',
            'network': 'network',
            'nic_type': 'nicType',
            'power_on_boot': 'powerOnBoot',
            'virtual_nic_id': 'virtualNicId',
            'virtual_nic_name': 'virtualNicName'
        }

        self._customization = customization
        self._ip_addresses = ip_addresses
        self._mac_address = mac_address
        self._network = network
        self._nic_type = nic_type
        self._power_on_boot = power_on_boot
        self._virtual_nic_id = virtual_nic_id
        self._virtual_nic_name = virtual_nic_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualNic':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualNic of this VirtualNic.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customization(self):
        """Gets the customization of this VirtualNic.


        :return: The customization of this VirtualNic.
        :rtype: GuestOSNICCustomization
        """
        return self._customization

    @customization.setter
    def customization(self, customization):
        """Sets the customization of this VirtualNic.


        :param customization: The customization of this VirtualNic.
        :type customization: GuestOSNICCustomization
        """

        self._customization = customization

    @property
    def ip_addresses(self):
        """Gets the ip_addresses of this VirtualNic.

        NIC ip address

        :return: The ip_addresses of this VirtualNic.
        :rtype: List[str]
        """
        return self._ip_addresses

    @ip_addresses.setter
    def ip_addresses(self, ip_addresses):
        """Sets the ip_addresses of this VirtualNic.

        NIC ip address

        :param ip_addresses: The ip_addresses of this VirtualNic.
        :type ip_addresses: List[str]
        """

        self._ip_addresses = ip_addresses

    @property
    def mac_address(self):
        """Gets the mac_address of this VirtualNic.

        NIC MAC address

        :return: The mac_address of this VirtualNic.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this VirtualNic.

        NIC MAC address

        :param mac_address: The mac_address of this VirtualNic.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network(self):
        """Gets the network of this VirtualNic.


        :return: The network of this VirtualNic.
        :rtype: VirtualNetwork
        """
        return self._network

    @network.setter
    def network(self, network):
        """Sets the network of this VirtualNic.


        :param network: The network of this VirtualNic.
        :type network: VirtualNetwork
        """
        if network is None:
            raise ValueError("Invalid value for `network`, must not be `None`")

        self._network = network

    @property
    def nic_type(self):
        """Gets the nic_type of this VirtualNic.

        NIC type

        :return: The nic_type of this VirtualNic.
        :rtype: str
        """
        return self._nic_type

    @nic_type.setter
    def nic_type(self, nic_type):
        """Sets the nic_type of this VirtualNic.

        NIC type

        :param nic_type: The nic_type of this VirtualNic.
        :type nic_type: str
        """
        allowed_values = ["E1000", "E1000E", "PCNET32", "VMXNET", "VMXNET2", "VMXNET3"]  # noqa: E501
        if nic_type not in allowed_values:
            raise ValueError(
                "Invalid value for `nic_type` ({0}), must be one of {1}"
                .format(nic_type, allowed_values)
            )

        self._nic_type = nic_type

    @property
    def power_on_boot(self):
        """Gets the power_on_boot of this VirtualNic.

        Is NIC powered on/off on boot

        :return: The power_on_boot of this VirtualNic.
        :rtype: bool
        """
        return self._power_on_boot

    @power_on_boot.setter
    def power_on_boot(self, power_on_boot):
        """Sets the power_on_boot of this VirtualNic.

        Is NIC powered on/off on boot

        :param power_on_boot: The power_on_boot of this VirtualNic.
        :type power_on_boot: bool
        """

        self._power_on_boot = power_on_boot

    @property
    def virtual_nic_id(self):
        """Gets the virtual_nic_id of this VirtualNic.

        NIC id

        :return: The virtual_nic_id of this VirtualNic.
        :rtype: str
        """
        return self._virtual_nic_id

    @virtual_nic_id.setter
    def virtual_nic_id(self, virtual_nic_id):
        """Sets the virtual_nic_id of this VirtualNic.

        NIC id

        :param virtual_nic_id: The virtual_nic_id of this VirtualNic.
        :type virtual_nic_id: str
        """

        self._virtual_nic_id = virtual_nic_id

    @property
    def virtual_nic_name(self):
        """Gets the virtual_nic_name of this VirtualNic.

        NIC name

        :return: The virtual_nic_name of this VirtualNic.
        :rtype: str
        """
        return self._virtual_nic_name

    @virtual_nic_name.setter
    def virtual_nic_name(self, virtual_nic_name):
        """Sets the virtual_nic_name of this VirtualNic.

        NIC name

        :param virtual_nic_name: The virtual_nic_name of this VirtualNic.
        :type virtual_nic_name: str
        """

        self._virtual_nic_name = virtual_nic_name
