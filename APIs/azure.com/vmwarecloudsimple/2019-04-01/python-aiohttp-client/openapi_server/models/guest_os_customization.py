# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GuestOSCustomization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dns_servers: List[str]=None, host_name: str=None, password: str=None, policy_id: str=None, username: str=None):
        """GuestOSCustomization - a model defined in OpenAPI

        :param dns_servers: The dns_servers of this GuestOSCustomization.
        :param host_name: The host_name of this GuestOSCustomization.
        :param password: The password of this GuestOSCustomization.
        :param policy_id: The policy_id of this GuestOSCustomization.
        :param username: The username of this GuestOSCustomization.
        """
        self.openapi_types = {
            'dns_servers': List[str],
            'host_name': str,
            'password': str,
            'policy_id': str,
            'username': str
        }

        self.attribute_map = {
            'dns_servers': 'dnsServers',
            'host_name': 'hostName',
            'password': 'password',
            'policy_id': 'policyId',
            'username': 'username'
        }

        self._dns_servers = dns_servers
        self._host_name = host_name
        self._password = password
        self._policy_id = policy_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestOSCustomization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestOSCustomization of this GuestOSCustomization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dns_servers(self):
        """Gets the dns_servers of this GuestOSCustomization.

        List of dns servers to use

        :return: The dns_servers of this GuestOSCustomization.
        :rtype: List[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this GuestOSCustomization.

        List of dns servers to use

        :param dns_servers: The dns_servers of this GuestOSCustomization.
        :type dns_servers: List[str]
        """

        self._dns_servers = dns_servers

    @property
    def host_name(self):
        """Gets the host_name of this GuestOSCustomization.

        Virtual Machine hostname

        :return: The host_name of this GuestOSCustomization.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """Sets the host_name of this GuestOSCustomization.

        Virtual Machine hostname

        :param host_name: The host_name of this GuestOSCustomization.
        :type host_name: str
        """

        self._host_name = host_name

    @property
    def password(self):
        """Gets the password of this GuestOSCustomization.

        Password for login

        :return: The password of this GuestOSCustomization.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this GuestOSCustomization.

        Password for login

        :param password: The password of this GuestOSCustomization.
        :type password: str
        """

        self._password = password

    @property
    def policy_id(self):
        """Gets the policy_id of this GuestOSCustomization.

        id of customization policy

        :return: The policy_id of this GuestOSCustomization.
        :rtype: str
        """
        return self._policy_id

    @policy_id.setter
    def policy_id(self, policy_id):
        """Sets the policy_id of this GuestOSCustomization.

        id of customization policy

        :param policy_id: The policy_id of this GuestOSCustomization.
        :type policy_id: str
        """

        self._policy_id = policy_id

    @property
    def username(self):
        """Gets the username of this GuestOSCustomization.

        Username for login

        :return: The username of this GuestOSCustomization.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this GuestOSCustomization.

        Username for login

        :param username: The username of this GuestOSCustomization.
        :type username: str
        """

        self._username = username
