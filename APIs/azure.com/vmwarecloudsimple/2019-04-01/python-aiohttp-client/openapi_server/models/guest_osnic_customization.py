# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
import re
from openapi_server import util


class GuestOSNICCustomization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation: str=None, dns_servers: List[str]=None, gateway: List[str]=None, ip_address: str=None, mask: str=None, primary_wins_server: str=None, secondary_wins_server: str=None):
        """GuestOSNICCustomization - a model defined in OpenAPI

        :param allocation: The allocation of this GuestOSNICCustomization.
        :param dns_servers: The dns_servers of this GuestOSNICCustomization.
        :param gateway: The gateway of this GuestOSNICCustomization.
        :param ip_address: The ip_address of this GuestOSNICCustomization.
        :param mask: The mask of this GuestOSNICCustomization.
        :param primary_wins_server: The primary_wins_server of this GuestOSNICCustomization.
        :param secondary_wins_server: The secondary_wins_server of this GuestOSNICCustomization.
        """
        self.openapi_types = {
            'allocation': str,
            'dns_servers': List[str],
            'gateway': List[str],
            'ip_address': str,
            'mask': str,
            'primary_wins_server': str,
            'secondary_wins_server': str
        }

        self.attribute_map = {
            'allocation': 'allocation',
            'dns_servers': 'dnsServers',
            'gateway': 'gateway',
            'ip_address': 'ipAddress',
            'mask': 'mask',
            'primary_wins_server': 'primaryWinsServer',
            'secondary_wins_server': 'secondaryWinsServer'
        }

        self._allocation = allocation
        self._dns_servers = dns_servers
        self._gateway = gateway
        self._ip_address = ip_address
        self._mask = mask
        self._primary_wins_server = primary_wins_server
        self._secondary_wins_server = secondary_wins_server

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GuestOSNICCustomization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GuestOSNICCustomization of this GuestOSNICCustomization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation(self):
        """Gets the allocation of this GuestOSNICCustomization.

        IP address allocation method

        :return: The allocation of this GuestOSNICCustomization.
        :rtype: str
        """
        return self._allocation

    @allocation.setter
    def allocation(self, allocation):
        """Sets the allocation of this GuestOSNICCustomization.

        IP address allocation method

        :param allocation: The allocation of this GuestOSNICCustomization.
        :type allocation: str
        """
        allowed_values = ["static", "dynamic"]  # noqa: E501
        if allocation not in allowed_values:
            raise ValueError(
                "Invalid value for `allocation` ({0}), must be one of {1}"
                .format(allocation, allowed_values)
            )

        self._allocation = allocation

    @property
    def dns_servers(self):
        """Gets the dns_servers of this GuestOSNICCustomization.

        List of dns servers to use

        :return: The dns_servers of this GuestOSNICCustomization.
        :rtype: List[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers):
        """Sets the dns_servers of this GuestOSNICCustomization.

        List of dns servers to use

        :param dns_servers: The dns_servers of this GuestOSNICCustomization.
        :type dns_servers: List[str]
        """

        self._dns_servers = dns_servers

    @property
    def gateway(self):
        """Gets the gateway of this GuestOSNICCustomization.

        Gateway addresses assigned to nic

        :return: The gateway of this GuestOSNICCustomization.
        :rtype: List[str]
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway):
        """Sets the gateway of this GuestOSNICCustomization.

        Gateway addresses assigned to nic

        :param gateway: The gateway of this GuestOSNICCustomization.
        :type gateway: List[str]
        """

        self._gateway = gateway

    @property
    def ip_address(self):
        """Gets the ip_address of this GuestOSNICCustomization.


        :return: The ip_address of this GuestOSNICCustomization.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this GuestOSNICCustomization.


        :param ip_address: The ip_address of this GuestOSNICCustomization.
        :type ip_address: str
        """
        if ip_address is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', ip_address):
            raise ValueError("Invalid value for `ip_address`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/`")

        self._ip_address = ip_address

    @property
    def mask(self):
        """Gets the mask of this GuestOSNICCustomization.


        :return: The mask of this GuestOSNICCustomization.
        :rtype: str
        """
        return self._mask

    @mask.setter
    def mask(self, mask):
        """Sets the mask of this GuestOSNICCustomization.


        :param mask: The mask of this GuestOSNICCustomization.
        :type mask: str
        """
        if mask is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', mask):
            raise ValueError("Invalid value for `mask`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/`")

        self._mask = mask

    @property
    def primary_wins_server(self):
        """Gets the primary_wins_server of this GuestOSNICCustomization.


        :return: The primary_wins_server of this GuestOSNICCustomization.
        :rtype: str
        """
        return self._primary_wins_server

    @primary_wins_server.setter
    def primary_wins_server(self, primary_wins_server):
        """Sets the primary_wins_server of this GuestOSNICCustomization.


        :param primary_wins_server: The primary_wins_server of this GuestOSNICCustomization.
        :type primary_wins_server: str
        """
        if primary_wins_server is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', primary_wins_server):
            raise ValueError("Invalid value for `primary_wins_server`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/`")

        self._primary_wins_server = primary_wins_server

    @property
    def secondary_wins_server(self):
        """Gets the secondary_wins_server of this GuestOSNICCustomization.


        :return: The secondary_wins_server of this GuestOSNICCustomization.
        :rtype: str
        """
        return self._secondary_wins_server

    @secondary_wins_server.setter
    def secondary_wins_server(self, secondary_wins_server):
        """Sets the secondary_wins_server of this GuestOSNICCustomization.


        :param secondary_wins_server: The secondary_wins_server of this GuestOSNICCustomization.
        :type secondary_wins_server: str
        """
        if secondary_wins_server is not None and not re.search(r'^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$', secondary_wins_server):
            raise ValueError("Invalid value for `secondary_wins_server`, must be a follow pattern or equal to `/^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])[.]){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/`")

        self._secondary_wins_server = secondary_wins_server
