# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomizationIPAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, argument: str=None, ip_address: str=None, type: str=None):
        """CustomizationIPAddress - a model defined in OpenAPI

        :param argument: The argument of this CustomizationIPAddress.
        :param ip_address: The ip_address of this CustomizationIPAddress.
        :param type: The type of this CustomizationIPAddress.
        """
        self.openapi_types = {
            'argument': str,
            'ip_address': str,
            'type': str
        }

        self.attribute_map = {
            'argument': 'argument',
            'ip_address': 'ipAddress',
            'type': 'type'
        }

        self._argument = argument
        self._ip_address = ip_address
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomizationIPAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomizationIPAddress of this CustomizationIPAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def argument(self):
        """Gets the argument of this CustomizationIPAddress.

        Argument when Custom ip type is selected

        :return: The argument of this CustomizationIPAddress.
        :rtype: str
        """
        return self._argument

    @argument.setter
    def argument(self, argument):
        """Sets the argument of this CustomizationIPAddress.

        Argument when Custom ip type is selected

        :param argument: The argument of this CustomizationIPAddress.
        :type argument: str
        """

        self._argument = argument

    @property
    def ip_address(self):
        """Gets the ip_address of this CustomizationIPAddress.

        Defined Ip Address when Fixed ip type is selected

        :return: The ip_address of this CustomizationIPAddress.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address):
        """Sets the ip_address of this CustomizationIPAddress.

        Defined Ip Address when Fixed ip type is selected

        :param ip_address: The ip_address of this CustomizationIPAddress.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def type(self):
        """Gets the type of this CustomizationIPAddress.

        Customization Specification ip type

        :return: The type of this CustomizationIPAddress.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CustomizationIPAddress.

        Customization Specification ip type

        :param type: The type of this CustomizationIPAddress.
        :type type: str
        """
        allowed_values = ["CUSTOM", "DHCP_IP", "FIXED_IP", "USER_DEFINED"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
