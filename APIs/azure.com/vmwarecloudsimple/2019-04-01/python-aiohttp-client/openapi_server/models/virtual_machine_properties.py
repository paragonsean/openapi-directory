# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.guest_os_customization import GuestOSCustomization
from openapi_server.models.resource_pool import ResourcePool
from openapi_server.models.virtual_disk import VirtualDisk
from openapi_server.models.virtual_disk_controller import VirtualDiskController
from openapi_server.models.virtual_nic import VirtualNic
from openapi_server import util


class VirtualMachineProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount_of_ram: int=None, controllers: List[VirtualDiskController]=None, customization: GuestOSCustomization=None, disks: List[VirtualDisk]=None, dnsname: str=None, expose_to_guest_vm: bool=None, folder: str=None, guest_os: str=None, guest_os_type: str=None, nics: List[VirtualNic]=None, number_of_cores: int=None, password: str=None, private_cloud_id: str=None, provisioning_state: str=None, public_ip: str=None, resource_pool: ResourcePool=None, status: str=None, template_id: str=None, username: str=None, v_sphere_networks: List[str]=None, vm_id: str=None, vmwaretools: str=None):
        """VirtualMachineProperties - a model defined in OpenAPI

        :param amount_of_ram: The amount_of_ram of this VirtualMachineProperties.
        :param controllers: The controllers of this VirtualMachineProperties.
        :param customization: The customization of this VirtualMachineProperties.
        :param disks: The disks of this VirtualMachineProperties.
        :param dnsname: The dnsname of this VirtualMachineProperties.
        :param expose_to_guest_vm: The expose_to_guest_vm of this VirtualMachineProperties.
        :param folder: The folder of this VirtualMachineProperties.
        :param guest_os: The guest_os of this VirtualMachineProperties.
        :param guest_os_type: The guest_os_type of this VirtualMachineProperties.
        :param nics: The nics of this VirtualMachineProperties.
        :param number_of_cores: The number_of_cores of this VirtualMachineProperties.
        :param password: The password of this VirtualMachineProperties.
        :param private_cloud_id: The private_cloud_id of this VirtualMachineProperties.
        :param provisioning_state: The provisioning_state of this VirtualMachineProperties.
        :param public_ip: The public_ip of this VirtualMachineProperties.
        :param resource_pool: The resource_pool of this VirtualMachineProperties.
        :param status: The status of this VirtualMachineProperties.
        :param template_id: The template_id of this VirtualMachineProperties.
        :param username: The username of this VirtualMachineProperties.
        :param v_sphere_networks: The v_sphere_networks of this VirtualMachineProperties.
        :param vm_id: The vm_id of this VirtualMachineProperties.
        :param vmwaretools: The vmwaretools of this VirtualMachineProperties.
        """
        self.openapi_types = {
            'amount_of_ram': int,
            'controllers': List[VirtualDiskController],
            'customization': GuestOSCustomization,
            'disks': List[VirtualDisk],
            'dnsname': str,
            'expose_to_guest_vm': bool,
            'folder': str,
            'guest_os': str,
            'guest_os_type': str,
            'nics': List[VirtualNic],
            'number_of_cores': int,
            'password': str,
            'private_cloud_id': str,
            'provisioning_state': str,
            'public_ip': str,
            'resource_pool': ResourcePool,
            'status': str,
            'template_id': str,
            'username': str,
            'v_sphere_networks': List[str],
            'vm_id': str,
            'vmwaretools': str
        }

        self.attribute_map = {
            'amount_of_ram': 'amountOfRam',
            'controllers': 'controllers',
            'customization': 'customization',
            'disks': 'disks',
            'dnsname': 'dnsname',
            'expose_to_guest_vm': 'exposeToGuestVM',
            'folder': 'folder',
            'guest_os': 'guestOS',
            'guest_os_type': 'guestOSType',
            'nics': 'nics',
            'number_of_cores': 'numberOfCores',
            'password': 'password',
            'private_cloud_id': 'privateCloudId',
            'provisioning_state': 'provisioningState',
            'public_ip': 'publicIP',
            'resource_pool': 'resourcePool',
            'status': 'status',
            'template_id': 'templateId',
            'username': 'username',
            'v_sphere_networks': 'vSphereNetworks',
            'vm_id': 'vmId',
            'vmwaretools': 'vmwaretools'
        }

        self._amount_of_ram = amount_of_ram
        self._controllers = controllers
        self._customization = customization
        self._disks = disks
        self._dnsname = dnsname
        self._expose_to_guest_vm = expose_to_guest_vm
        self._folder = folder
        self._guest_os = guest_os
        self._guest_os_type = guest_os_type
        self._nics = nics
        self._number_of_cores = number_of_cores
        self._password = password
        self._private_cloud_id = private_cloud_id
        self._provisioning_state = provisioning_state
        self._public_ip = public_ip
        self._resource_pool = resource_pool
        self._status = status
        self._template_id = template_id
        self._username = username
        self._v_sphere_networks = v_sphere_networks
        self._vm_id = vm_id
        self._vmwaretools = vmwaretools

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualMachineProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualMachineProperties of this VirtualMachineProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount_of_ram(self):
        """Gets the amount_of_ram of this VirtualMachineProperties.

        The amount of memory

        :return: The amount_of_ram of this VirtualMachineProperties.
        :rtype: int
        """
        return self._amount_of_ram

    @amount_of_ram.setter
    def amount_of_ram(self, amount_of_ram):
        """Sets the amount_of_ram of this VirtualMachineProperties.

        The amount of memory

        :param amount_of_ram: The amount_of_ram of this VirtualMachineProperties.
        :type amount_of_ram: int
        """
        if amount_of_ram is None:
            raise ValueError("Invalid value for `amount_of_ram`, must not be `None`")

        self._amount_of_ram = amount_of_ram

    @property
    def controllers(self):
        """Gets the controllers of this VirtualMachineProperties.

        The list of Virtual Disks' Controllers

        :return: The controllers of this VirtualMachineProperties.
        :rtype: List[VirtualDiskController]
        """
        return self._controllers

    @controllers.setter
    def controllers(self, controllers):
        """Sets the controllers of this VirtualMachineProperties.

        The list of Virtual Disks' Controllers

        :param controllers: The controllers of this VirtualMachineProperties.
        :type controllers: List[VirtualDiskController]
        """

        self._controllers = controllers

    @property
    def customization(self):
        """Gets the customization of this VirtualMachineProperties.


        :return: The customization of this VirtualMachineProperties.
        :rtype: GuestOSCustomization
        """
        return self._customization

    @customization.setter
    def customization(self, customization):
        """Sets the customization of this VirtualMachineProperties.


        :param customization: The customization of this VirtualMachineProperties.
        :type customization: GuestOSCustomization
        """

        self._customization = customization

    @property
    def disks(self):
        """Gets the disks of this VirtualMachineProperties.

        The list of Virtual Disks

        :return: The disks of this VirtualMachineProperties.
        :rtype: List[VirtualDisk]
        """
        return self._disks

    @disks.setter
    def disks(self, disks):
        """Sets the disks of this VirtualMachineProperties.

        The list of Virtual Disks

        :param disks: The disks of this VirtualMachineProperties.
        :type disks: List[VirtualDisk]
        """

        self._disks = disks

    @property
    def dnsname(self):
        """Gets the dnsname of this VirtualMachineProperties.

        The DNS name of Virtual Machine in VCenter

        :return: The dnsname of this VirtualMachineProperties.
        :rtype: str
        """
        return self._dnsname

    @dnsname.setter
    def dnsname(self, dnsname):
        """Sets the dnsname of this VirtualMachineProperties.

        The DNS name of Virtual Machine in VCenter

        :param dnsname: The dnsname of this VirtualMachineProperties.
        :type dnsname: str
        """

        self._dnsname = dnsname

    @property
    def expose_to_guest_vm(self):
        """Gets the expose_to_guest_vm of this VirtualMachineProperties.

        Expose Guest OS or not

        :return: The expose_to_guest_vm of this VirtualMachineProperties.
        :rtype: bool
        """
        return self._expose_to_guest_vm

    @expose_to_guest_vm.setter
    def expose_to_guest_vm(self, expose_to_guest_vm):
        """Sets the expose_to_guest_vm of this VirtualMachineProperties.

        Expose Guest OS or not

        :param expose_to_guest_vm: The expose_to_guest_vm of this VirtualMachineProperties.
        :type expose_to_guest_vm: bool
        """

        self._expose_to_guest_vm = expose_to_guest_vm

    @property
    def folder(self):
        """Gets the folder of this VirtualMachineProperties.

        The path to virtual machine folder in VCenter

        :return: The folder of this VirtualMachineProperties.
        :rtype: str
        """
        return self._folder

    @folder.setter
    def folder(self, folder):
        """Sets the folder of this VirtualMachineProperties.

        The path to virtual machine folder in VCenter

        :param folder: The folder of this VirtualMachineProperties.
        :type folder: str
        """

        self._folder = folder

    @property
    def guest_os(self):
        """Gets the guest_os of this VirtualMachineProperties.

        The name of Guest OS

        :return: The guest_os of this VirtualMachineProperties.
        :rtype: str
        """
        return self._guest_os

    @guest_os.setter
    def guest_os(self, guest_os):
        """Sets the guest_os of this VirtualMachineProperties.

        The name of Guest OS

        :param guest_os: The guest_os of this VirtualMachineProperties.
        :type guest_os: str
        """

        self._guest_os = guest_os

    @property
    def guest_os_type(self):
        """Gets the guest_os_type of this VirtualMachineProperties.

        The Guest OS type

        :return: The guest_os_type of this VirtualMachineProperties.
        :rtype: str
        """
        return self._guest_os_type

    @guest_os_type.setter
    def guest_os_type(self, guest_os_type):
        """Sets the guest_os_type of this VirtualMachineProperties.

        The Guest OS type

        :param guest_os_type: The guest_os_type of this VirtualMachineProperties.
        :type guest_os_type: str
        """
        allowed_values = ["linux", "windows", "other"]  # noqa: E501
        if guest_os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `guest_os_type` ({0}), must be one of {1}"
                .format(guest_os_type, allowed_values)
            )

        self._guest_os_type = guest_os_type

    @property
    def nics(self):
        """Gets the nics of this VirtualMachineProperties.

        The list of Virtual NICs

        :return: The nics of this VirtualMachineProperties.
        :rtype: List[VirtualNic]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this VirtualMachineProperties.

        The list of Virtual NICs

        :param nics: The nics of this VirtualMachineProperties.
        :type nics: List[VirtualNic]
        """

        self._nics = nics

    @property
    def number_of_cores(self):
        """Gets the number_of_cores of this VirtualMachineProperties.

        The number of CPU cores

        :return: The number_of_cores of this VirtualMachineProperties.
        :rtype: int
        """
        return self._number_of_cores

    @number_of_cores.setter
    def number_of_cores(self, number_of_cores):
        """Sets the number_of_cores of this VirtualMachineProperties.

        The number of CPU cores

        :param number_of_cores: The number_of_cores of this VirtualMachineProperties.
        :type number_of_cores: int
        """
        if number_of_cores is None:
            raise ValueError("Invalid value for `number_of_cores`, must not be `None`")

        self._number_of_cores = number_of_cores

    @property
    def password(self):
        """Gets the password of this VirtualMachineProperties.

        Password for login. Deprecated - use customization property

        :return: The password of this VirtualMachineProperties.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this VirtualMachineProperties.

        Password for login. Deprecated - use customization property

        :param password: The password of this VirtualMachineProperties.
        :type password: str
        """

        self._password = password

    @property
    def private_cloud_id(self):
        """Gets the private_cloud_id of this VirtualMachineProperties.

        Private Cloud Id

        :return: The private_cloud_id of this VirtualMachineProperties.
        :rtype: str
        """
        return self._private_cloud_id

    @private_cloud_id.setter
    def private_cloud_id(self, private_cloud_id):
        """Sets the private_cloud_id of this VirtualMachineProperties.

        Private Cloud Id

        :param private_cloud_id: The private_cloud_id of this VirtualMachineProperties.
        :type private_cloud_id: str
        """
        if private_cloud_id is None:
            raise ValueError("Invalid value for `private_cloud_id`, must not be `None`")

        self._private_cloud_id = private_cloud_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualMachineProperties.

        The provisioning status of the resource

        :return: The provisioning_state of this VirtualMachineProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualMachineProperties.

        The provisioning status of the resource

        :param provisioning_state: The provisioning_state of this VirtualMachineProperties.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def public_ip(self):
        """Gets the public_ip of this VirtualMachineProperties.

        The public ip of Virtual Machine

        :return: The public_ip of this VirtualMachineProperties.
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this VirtualMachineProperties.

        The public ip of Virtual Machine

        :param public_ip: The public_ip of this VirtualMachineProperties.
        :type public_ip: str
        """

        self._public_ip = public_ip

    @property
    def resource_pool(self):
        """Gets the resource_pool of this VirtualMachineProperties.


        :return: The resource_pool of this VirtualMachineProperties.
        :rtype: ResourcePool
        """
        return self._resource_pool

    @resource_pool.setter
    def resource_pool(self, resource_pool):
        """Sets the resource_pool of this VirtualMachineProperties.


        :param resource_pool: The resource_pool of this VirtualMachineProperties.
        :type resource_pool: ResourcePool
        """

        self._resource_pool = resource_pool

    @property
    def status(self):
        """Gets the status of this VirtualMachineProperties.

        The status of Virtual machine

        :return: The status of this VirtualMachineProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this VirtualMachineProperties.

        The status of Virtual machine

        :param status: The status of this VirtualMachineProperties.
        :type status: str
        """
        allowed_values = ["running", "suspended", "poweredoff", "updating", "deallocating", "deleting"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def template_id(self):
        """Gets the template_id of this VirtualMachineProperties.

        Virtual Machine Template Id

        :return: The template_id of this VirtualMachineProperties.
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this VirtualMachineProperties.

        Virtual Machine Template Id

        :param template_id: The template_id of this VirtualMachineProperties.
        :type template_id: str
        """

        self._template_id = template_id

    @property
    def username(self):
        """Gets the username of this VirtualMachineProperties.

        Username for login. Deprecated - use customization property

        :return: The username of this VirtualMachineProperties.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this VirtualMachineProperties.

        Username for login. Deprecated - use customization property

        :param username: The username of this VirtualMachineProperties.
        :type username: str
        """

        self._username = username

    @property
    def v_sphere_networks(self):
        """Gets the v_sphere_networks of this VirtualMachineProperties.

        The list of Virtual VSphere Networks

        :return: The v_sphere_networks of this VirtualMachineProperties.
        :rtype: List[str]
        """
        return self._v_sphere_networks

    @v_sphere_networks.setter
    def v_sphere_networks(self, v_sphere_networks):
        """Sets the v_sphere_networks of this VirtualMachineProperties.

        The list of Virtual VSphere Networks

        :param v_sphere_networks: The v_sphere_networks of this VirtualMachineProperties.
        :type v_sphere_networks: List[str]
        """

        self._v_sphere_networks = v_sphere_networks

    @property
    def vm_id(self):
        """Gets the vm_id of this VirtualMachineProperties.

        The internal id of Virtual Machine in VCenter

        :return: The vm_id of this VirtualMachineProperties.
        :rtype: str
        """
        return self._vm_id

    @vm_id.setter
    def vm_id(self, vm_id):
        """Sets the vm_id of this VirtualMachineProperties.

        The internal id of Virtual Machine in VCenter

        :param vm_id: The vm_id of this VirtualMachineProperties.
        :type vm_id: str
        """

        self._vm_id = vm_id

    @property
    def vmwaretools(self):
        """Gets the vmwaretools of this VirtualMachineProperties.

        VMware tools version

        :return: The vmwaretools of this VirtualMachineProperties.
        :rtype: str
        """
        return self._vmwaretools

    @vmwaretools.setter
    def vmwaretools(self, vmwaretools):
        """Sets the vmwaretools of this VirtualMachineProperties.

        VMware tools version

        :param vmwaretools: The vmwaretools of this VirtualMachineProperties.
        :type vmwaretools: str
        """

        self._vmwaretools = vmwaretools
