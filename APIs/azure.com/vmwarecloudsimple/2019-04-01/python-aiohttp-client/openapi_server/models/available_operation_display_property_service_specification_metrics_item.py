# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableOperationDisplayPropertyServiceSpecificationMetricsItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation_type: str=None, display_description: str=None, display_name: str=None, name: str=None, unit: str=None):
        """AvailableOperationDisplayPropertyServiceSpecificationMetricsItem - a model defined in OpenAPI

        :param aggregation_type: The aggregation_type of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :param display_description: The display_description of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :param display_name: The display_name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :param name: The name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :param unit: The unit of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        """
        self.openapi_types = {
            'aggregation_type': str,
            'display_description': str,
            'display_name': str,
            'name': str,
            'unit': str
        }

        self.attribute_map = {
            'aggregation_type': 'aggregationType',
            'display_description': 'displayDescription',
            'display_name': 'displayName',
            'name': 'name',
            'unit': 'unit'
        }

        self._aggregation_type = aggregation_type
        self._display_description = display_description
        self._display_name = display_name
        self._name = name
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AvailableOperationDisplayPropertyServiceSpecificationMetricsItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AvailableOperationDisplayPropertyServiceSpecificationMetricsItem of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation_type(self):
        """Gets the aggregation_type of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's aggregation type for e.g. (Average, Total)

        :return: The aggregation_type of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :rtype: str
        """
        return self._aggregation_type

    @aggregation_type.setter
    def aggregation_type(self, aggregation_type):
        """Sets the aggregation_type of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's aggregation type for e.g. (Average, Total)

        :param aggregation_type: The aggregation_type of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :type aggregation_type: str
        """
        allowed_values = ["Average", "Total"]  # noqa: E501
        if aggregation_type not in allowed_values:
            raise ValueError(
                "Invalid value for `aggregation_type` ({0}), must be one of {1}"
                .format(aggregation_type, allowed_values)
            )

        self._aggregation_type = aggregation_type

    @property
    def display_description(self):
        """Gets the display_description of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's description

        :return: The display_description of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :rtype: str
        """
        return self._display_description

    @display_description.setter
    def display_description(self, display_description):
        """Sets the display_description of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's description

        :param display_description: The display_description of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :type display_description: str
        """
        if display_description is None:
            raise ValueError("Invalid value for `display_description`, must not be `None`")

        self._display_description = display_description

    @property
    def display_name(self):
        """Gets the display_name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Human readable metric's name

        :return: The display_name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Human readable metric's name

        :param display_name: The display_name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def name(self):
        """Gets the name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's name/id

        :return: The name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's name/id

        :param name: The name of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def unit(self):
        """Gets the unit of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's unit

        :return: The unit of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.

        Metric's unit

        :param unit: The unit of this AvailableOperationDisplayPropertyServiceSpecificationMetricsItem.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
