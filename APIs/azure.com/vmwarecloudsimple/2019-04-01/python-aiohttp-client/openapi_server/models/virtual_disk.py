# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualDisk(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, controller_id: str=None, independence_mode: str=None, total_size: int=None, virtual_disk_id: str=None, virtual_disk_name: str=None):
        """VirtualDisk - a model defined in OpenAPI

        :param controller_id: The controller_id of this VirtualDisk.
        :param independence_mode: The independence_mode of this VirtualDisk.
        :param total_size: The total_size of this VirtualDisk.
        :param virtual_disk_id: The virtual_disk_id of this VirtualDisk.
        :param virtual_disk_name: The virtual_disk_name of this VirtualDisk.
        """
        self.openapi_types = {
            'controller_id': str,
            'independence_mode': str,
            'total_size': int,
            'virtual_disk_id': str,
            'virtual_disk_name': str
        }

        self.attribute_map = {
            'controller_id': 'controllerId',
            'independence_mode': 'independenceMode',
            'total_size': 'totalSize',
            'virtual_disk_id': 'virtualDiskId',
            'virtual_disk_name': 'virtualDiskName'
        }

        self._controller_id = controller_id
        self._independence_mode = independence_mode
        self._total_size = total_size
        self._virtual_disk_id = virtual_disk_id
        self._virtual_disk_name = virtual_disk_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualDisk':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualDisk of this VirtualDisk.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def controller_id(self):
        """Gets the controller_id of this VirtualDisk.

        Disk's Controller id

        :return: The controller_id of this VirtualDisk.
        :rtype: str
        """
        return self._controller_id

    @controller_id.setter
    def controller_id(self, controller_id):
        """Sets the controller_id of this VirtualDisk.

        Disk's Controller id

        :param controller_id: The controller_id of this VirtualDisk.
        :type controller_id: str
        """
        if controller_id is None:
            raise ValueError("Invalid value for `controller_id`, must not be `None`")

        self._controller_id = controller_id

    @property
    def independence_mode(self):
        """Gets the independence_mode of this VirtualDisk.

        Disk's independence mode type

        :return: The independence_mode of this VirtualDisk.
        :rtype: str
        """
        return self._independence_mode

    @independence_mode.setter
    def independence_mode(self, independence_mode):
        """Sets the independence_mode of this VirtualDisk.

        Disk's independence mode type

        :param independence_mode: The independence_mode of this VirtualDisk.
        :type independence_mode: str
        """
        allowed_values = ["persistent", "independent_persistent", "independent_nonpersistent"]  # noqa: E501
        if independence_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `independence_mode` ({0}), must be one of {1}"
                .format(independence_mode, allowed_values)
            )

        self._independence_mode = independence_mode

    @property
    def total_size(self):
        """Gets the total_size of this VirtualDisk.

        Disk's total size

        :return: The total_size of this VirtualDisk.
        :rtype: int
        """
        return self._total_size

    @total_size.setter
    def total_size(self, total_size):
        """Sets the total_size of this VirtualDisk.

        Disk's total size

        :param total_size: The total_size of this VirtualDisk.
        :type total_size: int
        """
        if total_size is None:
            raise ValueError("Invalid value for `total_size`, must not be `None`")

        self._total_size = total_size

    @property
    def virtual_disk_id(self):
        """Gets the virtual_disk_id of this VirtualDisk.

        Disk's id

        :return: The virtual_disk_id of this VirtualDisk.
        :rtype: str
        """
        return self._virtual_disk_id

    @virtual_disk_id.setter
    def virtual_disk_id(self, virtual_disk_id):
        """Sets the virtual_disk_id of this VirtualDisk.

        Disk's id

        :param virtual_disk_id: The virtual_disk_id of this VirtualDisk.
        :type virtual_disk_id: str
        """

        self._virtual_disk_id = virtual_disk_id

    @property
    def virtual_disk_name(self):
        """Gets the virtual_disk_name of this VirtualDisk.

        Disk's display name

        :return: The virtual_disk_name of this VirtualDisk.
        :rtype: str
        """
        return self._virtual_disk_name

    @virtual_disk_name.setter
    def virtual_disk_name(self, virtual_disk_name):
        """Sets the virtual_disk_name of this VirtualDisk.

        Disk's display name

        :param virtual_disk_name: The virtual_disk_name of this VirtualDisk.
        :type virtual_disk_name: str
        """

        self._virtual_disk_name = virtual_disk_name
