# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ComplianceSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, percentage: float=None, segment_type: str=None):
        """ComplianceSegment - a model defined in OpenAPI

        :param percentage: The percentage of this ComplianceSegment.
        :param segment_type: The segment_type of this ComplianceSegment.
        """
        self.openapi_types = {
            'percentage': float,
            'segment_type': str
        }

        self.attribute_map = {
            'percentage': 'percentage',
            'segment_type': 'segmentType'
        }

        self._percentage = percentage
        self._segment_type = segment_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ComplianceSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ComplianceSegment of this ComplianceSegment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def percentage(self):
        """Gets the percentage of this ComplianceSegment.

        The size (%) of the segment.

        :return: The percentage of this ComplianceSegment.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ComplianceSegment.

        The size (%) of the segment.

        :param percentage: The percentage of this ComplianceSegment.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def segment_type(self):
        """Gets the segment_type of this ComplianceSegment.

        The segment type, e.g. compliant, non-compliance, insufficient coverage, N/A, etc.

        :return: The segment_type of this ComplianceSegment.
        :rtype: str
        """
        return self._segment_type

    @segment_type.setter
    def segment_type(self, segment_type):
        """Sets the segment_type of this ComplianceSegment.

        The segment type, e.g. compliant, non-compliance, insufficient coverage, N/A, etc.

        :param segment_type: The segment_type of this ComplianceSegment.
        :type segment_type: str
        """

        self._segment_type = segment_type
