# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.http_request_info import HttpRequestInfo
from openapi_server.models.localizable_string import LocalizableString
from openapi_server.models.sender_authorization import SenderAuthorization
from openapi_server import util


class EventData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization: SenderAuthorization=None, caller: str=None, category: LocalizableString=None, claims: Dict[str, str]=None, correlation_id: str=None, description: str=None, event_data_id: str=None, event_name: LocalizableString=None, event_timestamp: datetime=None, http_request: HttpRequestInfo=None, id: str=None, level: str=None, operation_id: str=None, operation_name: LocalizableString=None, properties: Dict[str, str]=None, resource_group_name: str=None, resource_id: str=None, resource_provider_name: LocalizableString=None, resource_type: LocalizableString=None, status: LocalizableString=None, sub_status: LocalizableString=None, submission_timestamp: datetime=None, subscription_id: str=None, tenant_id: str=None):
        """EventData - a model defined in OpenAPI

        :param authorization: The authorization of this EventData.
        :param caller: The caller of this EventData.
        :param category: The category of this EventData.
        :param claims: The claims of this EventData.
        :param correlation_id: The correlation_id of this EventData.
        :param description: The description of this EventData.
        :param event_data_id: The event_data_id of this EventData.
        :param event_name: The event_name of this EventData.
        :param event_timestamp: The event_timestamp of this EventData.
        :param http_request: The http_request of this EventData.
        :param id: The id of this EventData.
        :param level: The level of this EventData.
        :param operation_id: The operation_id of this EventData.
        :param operation_name: The operation_name of this EventData.
        :param properties: The properties of this EventData.
        :param resource_group_name: The resource_group_name of this EventData.
        :param resource_id: The resource_id of this EventData.
        :param resource_provider_name: The resource_provider_name of this EventData.
        :param resource_type: The resource_type of this EventData.
        :param status: The status of this EventData.
        :param sub_status: The sub_status of this EventData.
        :param submission_timestamp: The submission_timestamp of this EventData.
        :param subscription_id: The subscription_id of this EventData.
        :param tenant_id: The tenant_id of this EventData.
        """
        self.openapi_types = {
            'authorization': SenderAuthorization,
            'caller': str,
            'category': LocalizableString,
            'claims': Dict[str, str],
            'correlation_id': str,
            'description': str,
            'event_data_id': str,
            'event_name': LocalizableString,
            'event_timestamp': datetime,
            'http_request': HttpRequestInfo,
            'id': str,
            'level': str,
            'operation_id': str,
            'operation_name': LocalizableString,
            'properties': Dict[str, str],
            'resource_group_name': str,
            'resource_id': str,
            'resource_provider_name': LocalizableString,
            'resource_type': LocalizableString,
            'status': LocalizableString,
            'sub_status': LocalizableString,
            'submission_timestamp': datetime,
            'subscription_id': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'authorization': 'authorization',
            'caller': 'caller',
            'category': 'category',
            'claims': 'claims',
            'correlation_id': 'correlationId',
            'description': 'description',
            'event_data_id': 'eventDataId',
            'event_name': 'eventName',
            'event_timestamp': 'eventTimestamp',
            'http_request': 'httpRequest',
            'id': 'id',
            'level': 'level',
            'operation_id': 'operationId',
            'operation_name': 'operationName',
            'properties': 'properties',
            'resource_group_name': 'resourceGroupName',
            'resource_id': 'resourceId',
            'resource_provider_name': 'resourceProviderName',
            'resource_type': 'resourceType',
            'status': 'status',
            'sub_status': 'subStatus',
            'submission_timestamp': 'submissionTimestamp',
            'subscription_id': 'subscriptionId',
            'tenant_id': 'tenantId'
        }

        self._authorization = authorization
        self._caller = caller
        self._category = category
        self._claims = claims
        self._correlation_id = correlation_id
        self._description = description
        self._event_data_id = event_data_id
        self._event_name = event_name
        self._event_timestamp = event_timestamp
        self._http_request = http_request
        self._id = id
        self._level = level
        self._operation_id = operation_id
        self._operation_name = operation_name
        self._properties = properties
        self._resource_group_name = resource_group_name
        self._resource_id = resource_id
        self._resource_provider_name = resource_provider_name
        self._resource_type = resource_type
        self._status = status
        self._sub_status = sub_status
        self._submission_timestamp = submission_timestamp
        self._subscription_id = subscription_id
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EventData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EventData of this EventData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self):
        """Gets the authorization of this EventData.


        :return: The authorization of this EventData.
        :rtype: SenderAuthorization
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization):
        """Sets the authorization of this EventData.


        :param authorization: The authorization of this EventData.
        :type authorization: SenderAuthorization
        """

        self._authorization = authorization

    @property
    def caller(self):
        """Gets the caller of this EventData.

        the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.

        :return: The caller of this EventData.
        :rtype: str
        """
        return self._caller

    @caller.setter
    def caller(self, caller):
        """Sets the caller of this EventData.

        the email address of the user who has performed the operation, the UPN claim or SPN claim based on availability.

        :param caller: The caller of this EventData.
        :type caller: str
        """

        self._caller = caller

    @property
    def category(self):
        """Gets the category of this EventData.


        :return: The category of this EventData.
        :rtype: LocalizableString
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this EventData.


        :param category: The category of this EventData.
        :type category: LocalizableString
        """

        self._category = category

    @property
    def claims(self):
        """Gets the claims of this EventData.

        key value pairs to identify ARM permissions.

        :return: The claims of this EventData.
        :rtype: Dict[str, str]
        """
        return self._claims

    @claims.setter
    def claims(self, claims):
        """Sets the claims of this EventData.

        key value pairs to identify ARM permissions.

        :param claims: The claims of this EventData.
        :type claims: Dict[str, str]
        """

        self._claims = claims

    @property
    def correlation_id(self):
        """Gets the correlation_id of this EventData.

        the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.

        :return: The correlation_id of this EventData.
        :rtype: str
        """
        return self._correlation_id

    @correlation_id.setter
    def correlation_id(self, correlation_id):
        """Sets the correlation_id of this EventData.

        the correlation Id, usually a GUID in the string format. The correlation Id is shared among the events that belong to the same uber operation.

        :param correlation_id: The correlation_id of this EventData.
        :type correlation_id: str
        """

        self._correlation_id = correlation_id

    @property
    def description(self):
        """Gets the description of this EventData.

        the description of the event.

        :return: The description of this EventData.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EventData.

        the description of the event.

        :param description: The description of this EventData.
        :type description: str
        """

        self._description = description

    @property
    def event_data_id(self):
        """Gets the event_data_id of this EventData.

        the event data Id. This is a unique identifier for an event.

        :return: The event_data_id of this EventData.
        :rtype: str
        """
        return self._event_data_id

    @event_data_id.setter
    def event_data_id(self, event_data_id):
        """Sets the event_data_id of this EventData.

        the event data Id. This is a unique identifier for an event.

        :param event_data_id: The event_data_id of this EventData.
        :type event_data_id: str
        """

        self._event_data_id = event_data_id

    @property
    def event_name(self):
        """Gets the event_name of this EventData.


        :return: The event_name of this EventData.
        :rtype: LocalizableString
        """
        return self._event_name

    @event_name.setter
    def event_name(self, event_name):
        """Sets the event_name of this EventData.


        :param event_name: The event_name of this EventData.
        :type event_name: LocalizableString
        """

        self._event_name = event_name

    @property
    def event_timestamp(self):
        """Gets the event_timestamp of this EventData.

        the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.

        :return: The event_timestamp of this EventData.
        :rtype: datetime
        """
        return self._event_timestamp

    @event_timestamp.setter
    def event_timestamp(self, event_timestamp):
        """Sets the event_timestamp of this EventData.

        the timestamp of when the event was generated by the Azure service processing the request corresponding the event. It in ISO 8601 format.

        :param event_timestamp: The event_timestamp of this EventData.
        :type event_timestamp: datetime
        """

        self._event_timestamp = event_timestamp

    @property
    def http_request(self):
        """Gets the http_request of this EventData.


        :return: The http_request of this EventData.
        :rtype: HttpRequestInfo
        """
        return self._http_request

    @http_request.setter
    def http_request(self, http_request):
        """Sets the http_request of this EventData.


        :param http_request: The http_request of this EventData.
        :type http_request: HttpRequestInfo
        """

        self._http_request = http_request

    @property
    def id(self):
        """Gets the id of this EventData.

        the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.

        :return: The id of this EventData.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EventData.

        the Id of this event as required by ARM for RBAC. It contains the EventDataID and a timestamp information.

        :param id: The id of this EventData.
        :type id: str
        """

        self._id = id

    @property
    def level(self):
        """Gets the level of this EventData.

        the event level

        :return: The level of this EventData.
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this EventData.

        the event level

        :param level: The level of this EventData.
        :type level: str
        """
        allowed_values = ["Critical", "Error", "Warning", "Informational", "Verbose"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def operation_id(self):
        """Gets the operation_id of this EventData.

        It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.

        :return: The operation_id of this EventData.
        :rtype: str
        """
        return self._operation_id

    @operation_id.setter
    def operation_id(self, operation_id):
        """Sets the operation_id of this EventData.

        It is usually a GUID shared among the events corresponding to single operation. This value should not be confused with EventName.

        :param operation_id: The operation_id of this EventData.
        :type operation_id: str
        """

        self._operation_id = operation_id

    @property
    def operation_name(self):
        """Gets the operation_name of this EventData.


        :return: The operation_name of this EventData.
        :rtype: LocalizableString
        """
        return self._operation_name

    @operation_name.setter
    def operation_name(self, operation_name):
        """Sets the operation_name of this EventData.


        :param operation_name: The operation_name of this EventData.
        :type operation_name: LocalizableString
        """

        self._operation_name = operation_name

    @property
    def properties(self):
        """Gets the properties of this EventData.

        the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event.

        :return: The properties of this EventData.
        :rtype: Dict[str, str]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this EventData.

        the set of <Key, Value> pairs (usually a Dictionary<String, String>) that includes details about the event.

        :param properties: The properties of this EventData.
        :type properties: Dict[str, str]
        """

        self._properties = properties

    @property
    def resource_group_name(self):
        """Gets the resource_group_name of this EventData.

        the resource group name of the impacted resource.

        :return: The resource_group_name of this EventData.
        :rtype: str
        """
        return self._resource_group_name

    @resource_group_name.setter
    def resource_group_name(self, resource_group_name):
        """Sets the resource_group_name of this EventData.

        the resource group name of the impacted resource.

        :param resource_group_name: The resource_group_name of this EventData.
        :type resource_group_name: str
        """

        self._resource_group_name = resource_group_name

    @property
    def resource_id(self):
        """Gets the resource_id of this EventData.

        the resource uri that uniquely identifies the resource that caused this event.

        :return: The resource_id of this EventData.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this EventData.

        the resource uri that uniquely identifies the resource that caused this event.

        :param resource_id: The resource_id of this EventData.
        :type resource_id: str
        """

        self._resource_id = resource_id

    @property
    def resource_provider_name(self):
        """Gets the resource_provider_name of this EventData.


        :return: The resource_provider_name of this EventData.
        :rtype: LocalizableString
        """
        return self._resource_provider_name

    @resource_provider_name.setter
    def resource_provider_name(self, resource_provider_name):
        """Sets the resource_provider_name of this EventData.


        :param resource_provider_name: The resource_provider_name of this EventData.
        :type resource_provider_name: LocalizableString
        """

        self._resource_provider_name = resource_provider_name

    @property
    def resource_type(self):
        """Gets the resource_type of this EventData.


        :return: The resource_type of this EventData.
        :rtype: LocalizableString
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this EventData.


        :param resource_type: The resource_type of this EventData.
        :type resource_type: LocalizableString
        """

        self._resource_type = resource_type

    @property
    def status(self):
        """Gets the status of this EventData.


        :return: The status of this EventData.
        :rtype: LocalizableString
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this EventData.


        :param status: The status of this EventData.
        :type status: LocalizableString
        """

        self._status = status

    @property
    def sub_status(self):
        """Gets the sub_status of this EventData.


        :return: The sub_status of this EventData.
        :rtype: LocalizableString
        """
        return self._sub_status

    @sub_status.setter
    def sub_status(self, sub_status):
        """Sets the sub_status of this EventData.


        :param sub_status: The sub_status of this EventData.
        :type sub_status: LocalizableString
        """

        self._sub_status = sub_status

    @property
    def submission_timestamp(self):
        """Gets the submission_timestamp of this EventData.

        the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.

        :return: The submission_timestamp of this EventData.
        :rtype: datetime
        """
        return self._submission_timestamp

    @submission_timestamp.setter
    def submission_timestamp(self, submission_timestamp):
        """Sets the submission_timestamp of this EventData.

        the timestamp of when the event became available for querying via this API. It is in ISO 8601 format. This value should not be confused eventTimestamp. As there might be a delay between the occurrence time of the event, and the time that the event is submitted to the Azure logging infrastructure.

        :param submission_timestamp: The submission_timestamp of this EventData.
        :type submission_timestamp: datetime
        """

        self._submission_timestamp = submission_timestamp

    @property
    def subscription_id(self):
        """Gets the subscription_id of this EventData.

        the Azure subscription Id usually a GUID.

        :return: The subscription_id of this EventData.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this EventData.

        the Azure subscription Id usually a GUID.

        :param subscription_id: The subscription_id of this EventData.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def tenant_id(self):
        """Gets the tenant_id of this EventData.

        the Azure tenant Id

        :return: The tenant_id of this EventData.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this EventData.

        the Azure tenant Id

        :param tenant_id: The tenant_id of this EventData.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
