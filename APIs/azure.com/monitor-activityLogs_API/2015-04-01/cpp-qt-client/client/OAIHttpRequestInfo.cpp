/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIHttpRequestInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIHttpRequestInfo::OAIHttpRequestInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIHttpRequestInfo::OAIHttpRequestInfo() {
    this->initializeModel();
}

OAIHttpRequestInfo::~OAIHttpRequestInfo() {}

void OAIHttpRequestInfo::initializeModel() {

    m_client_ip_address_isSet = false;
    m_client_ip_address_isValid = false;

    m_client_request_id_isSet = false;
    m_client_request_id_isValid = false;

    m_method_isSet = false;
    m_method_isValid = false;

    m_uri_isSet = false;
    m_uri_isValid = false;
}

void OAIHttpRequestInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIHttpRequestInfo::fromJsonObject(QJsonObject json) {

    m_client_ip_address_isValid = ::OpenAPI::fromJsonValue(m_client_ip_address, json[QString("clientIpAddress")]);
    m_client_ip_address_isSet = !json[QString("clientIpAddress")].isNull() && m_client_ip_address_isValid;

    m_client_request_id_isValid = ::OpenAPI::fromJsonValue(m_client_request_id, json[QString("clientRequestId")]);
    m_client_request_id_isSet = !json[QString("clientRequestId")].isNull() && m_client_request_id_isValid;

    m_method_isValid = ::OpenAPI::fromJsonValue(m_method, json[QString("method")]);
    m_method_isSet = !json[QString("method")].isNull() && m_method_isValid;

    m_uri_isValid = ::OpenAPI::fromJsonValue(m_uri, json[QString("uri")]);
    m_uri_isSet = !json[QString("uri")].isNull() && m_uri_isValid;
}

QString OAIHttpRequestInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIHttpRequestInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_client_ip_address_isSet) {
        obj.insert(QString("clientIpAddress"), ::OpenAPI::toJsonValue(m_client_ip_address));
    }
    if (m_client_request_id_isSet) {
        obj.insert(QString("clientRequestId"), ::OpenAPI::toJsonValue(m_client_request_id));
    }
    if (m_method_isSet) {
        obj.insert(QString("method"), ::OpenAPI::toJsonValue(m_method));
    }
    if (m_uri_isSet) {
        obj.insert(QString("uri"), ::OpenAPI::toJsonValue(m_uri));
    }
    return obj;
}

QString OAIHttpRequestInfo::getClientIpAddress() const {
    return m_client_ip_address;
}
void OAIHttpRequestInfo::setClientIpAddress(const QString &client_ip_address) {
    m_client_ip_address = client_ip_address;
    m_client_ip_address_isSet = true;
}

bool OAIHttpRequestInfo::is_client_ip_address_Set() const{
    return m_client_ip_address_isSet;
}

bool OAIHttpRequestInfo::is_client_ip_address_Valid() const{
    return m_client_ip_address_isValid;
}

QString OAIHttpRequestInfo::getClientRequestId() const {
    return m_client_request_id;
}
void OAIHttpRequestInfo::setClientRequestId(const QString &client_request_id) {
    m_client_request_id = client_request_id;
    m_client_request_id_isSet = true;
}

bool OAIHttpRequestInfo::is_client_request_id_Set() const{
    return m_client_request_id_isSet;
}

bool OAIHttpRequestInfo::is_client_request_id_Valid() const{
    return m_client_request_id_isValid;
}

QString OAIHttpRequestInfo::getMethod() const {
    return m_method;
}
void OAIHttpRequestInfo::setMethod(const QString &method) {
    m_method = method;
    m_method_isSet = true;
}

bool OAIHttpRequestInfo::is_method_Set() const{
    return m_method_isSet;
}

bool OAIHttpRequestInfo::is_method_Valid() const{
    return m_method_isValid;
}

QString OAIHttpRequestInfo::getUri() const {
    return m_uri;
}
void OAIHttpRequestInfo::setUri(const QString &uri) {
    m_uri = uri;
    m_uri_isSet = true;
}

bool OAIHttpRequestInfo::is_uri_Set() const{
    return m_uri_isSet;
}

bool OAIHttpRequestInfo::is_uri_Valid() const{
    return m_uri_isValid;
}

bool OAIHttpRequestInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_ip_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_request_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_method_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIHttpRequestInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
