/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventData.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventData::OAIEventData(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventData::OAIEventData() {
    this->initializeModel();
}

OAIEventData::~OAIEventData() {}

void OAIEventData::initializeModel() {

    m_authorization_isSet = false;
    m_authorization_isValid = false;

    m_caller_isSet = false;
    m_caller_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_claims_isSet = false;
    m_claims_isValid = false;

    m_correlation_id_isSet = false;
    m_correlation_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_data_id_isSet = false;
    m_event_data_id_isValid = false;

    m_event_name_isSet = false;
    m_event_name_isValid = false;

    m_event_timestamp_isSet = false;
    m_event_timestamp_isValid = false;

    m_http_request_isSet = false;
    m_http_request_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_level_isSet = false;
    m_level_isValid = false;

    m_operation_id_isSet = false;
    m_operation_id_isValid = false;

    m_operation_name_isSet = false;
    m_operation_name_isValid = false;

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_resource_group_name_isSet = false;
    m_resource_group_name_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;

    m_resource_provider_name_isSet = false;
    m_resource_provider_name_isValid = false;

    m_resource_type_isSet = false;
    m_resource_type_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_status_isSet = false;
    m_sub_status_isValid = false;

    m_submission_timestamp_isSet = false;
    m_submission_timestamp_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIEventData::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventData::fromJsonObject(QJsonObject json) {

    m_authorization_isValid = ::OpenAPI::fromJsonValue(m_authorization, json[QString("authorization")]);
    m_authorization_isSet = !json[QString("authorization")].isNull() && m_authorization_isValid;

    m_caller_isValid = ::OpenAPI::fromJsonValue(m_caller, json[QString("caller")]);
    m_caller_isSet = !json[QString("caller")].isNull() && m_caller_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_claims_isValid = ::OpenAPI::fromJsonValue(m_claims, json[QString("claims")]);
    m_claims_isSet = !json[QString("claims")].isNull() && m_claims_isValid;

    m_correlation_id_isValid = ::OpenAPI::fromJsonValue(m_correlation_id, json[QString("correlationId")]);
    m_correlation_id_isSet = !json[QString("correlationId")].isNull() && m_correlation_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_data_id_isValid = ::OpenAPI::fromJsonValue(m_event_data_id, json[QString("eventDataId")]);
    m_event_data_id_isSet = !json[QString("eventDataId")].isNull() && m_event_data_id_isValid;

    m_event_name_isValid = ::OpenAPI::fromJsonValue(m_event_name, json[QString("eventName")]);
    m_event_name_isSet = !json[QString("eventName")].isNull() && m_event_name_isValid;

    m_event_timestamp_isValid = ::OpenAPI::fromJsonValue(m_event_timestamp, json[QString("eventTimestamp")]);
    m_event_timestamp_isSet = !json[QString("eventTimestamp")].isNull() && m_event_timestamp_isValid;

    m_http_request_isValid = ::OpenAPI::fromJsonValue(m_http_request, json[QString("httpRequest")]);
    m_http_request_isSet = !json[QString("httpRequest")].isNull() && m_http_request_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_level_isValid = ::OpenAPI::fromJsonValue(m_level, json[QString("level")]);
    m_level_isSet = !json[QString("level")].isNull() && m_level_isValid;

    m_operation_id_isValid = ::OpenAPI::fromJsonValue(m_operation_id, json[QString("operationId")]);
    m_operation_id_isSet = !json[QString("operationId")].isNull() && m_operation_id_isValid;

    m_operation_name_isValid = ::OpenAPI::fromJsonValue(m_operation_name, json[QString("operationName")]);
    m_operation_name_isSet = !json[QString("operationName")].isNull() && m_operation_name_isValid;

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_resource_group_name_isValid = ::OpenAPI::fromJsonValue(m_resource_group_name, json[QString("resourceGroupName")]);
    m_resource_group_name_isSet = !json[QString("resourceGroupName")].isNull() && m_resource_group_name_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;

    m_resource_provider_name_isValid = ::OpenAPI::fromJsonValue(m_resource_provider_name, json[QString("resourceProviderName")]);
    m_resource_provider_name_isSet = !json[QString("resourceProviderName")].isNull() && m_resource_provider_name_isValid;

    m_resource_type_isValid = ::OpenAPI::fromJsonValue(m_resource_type, json[QString("resourceType")]);
    m_resource_type_isSet = !json[QString("resourceType")].isNull() && m_resource_type_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_status_isValid = ::OpenAPI::fromJsonValue(m_sub_status, json[QString("subStatus")]);
    m_sub_status_isSet = !json[QString("subStatus")].isNull() && m_sub_status_isValid;

    m_submission_timestamp_isValid = ::OpenAPI::fromJsonValue(m_submission_timestamp, json[QString("submissionTimestamp")]);
    m_submission_timestamp_isSet = !json[QString("submissionTimestamp")].isNull() && m_submission_timestamp_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIEventData::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventData::asJsonObject() const {
    QJsonObject obj;
    if (m_authorization.isSet()) {
        obj.insert(QString("authorization"), ::OpenAPI::toJsonValue(m_authorization));
    }
    if (m_caller_isSet) {
        obj.insert(QString("caller"), ::OpenAPI::toJsonValue(m_caller));
    }
    if (m_category.isSet()) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_claims.size() > 0) {
        obj.insert(QString("claims"), ::OpenAPI::toJsonValue(m_claims));
    }
    if (m_correlation_id_isSet) {
        obj.insert(QString("correlationId"), ::OpenAPI::toJsonValue(m_correlation_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_data_id_isSet) {
        obj.insert(QString("eventDataId"), ::OpenAPI::toJsonValue(m_event_data_id));
    }
    if (m_event_name.isSet()) {
        obj.insert(QString("eventName"), ::OpenAPI::toJsonValue(m_event_name));
    }
    if (m_event_timestamp_isSet) {
        obj.insert(QString("eventTimestamp"), ::OpenAPI::toJsonValue(m_event_timestamp));
    }
    if (m_http_request.isSet()) {
        obj.insert(QString("httpRequest"), ::OpenAPI::toJsonValue(m_http_request));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_level_isSet) {
        obj.insert(QString("level"), ::OpenAPI::toJsonValue(m_level));
    }
    if (m_operation_id_isSet) {
        obj.insert(QString("operationId"), ::OpenAPI::toJsonValue(m_operation_id));
    }
    if (m_operation_name.isSet()) {
        obj.insert(QString("operationName"), ::OpenAPI::toJsonValue(m_operation_name));
    }
    if (m_properties.size() > 0) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_resource_group_name_isSet) {
        obj.insert(QString("resourceGroupName"), ::OpenAPI::toJsonValue(m_resource_group_name));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    if (m_resource_provider_name.isSet()) {
        obj.insert(QString("resourceProviderName"), ::OpenAPI::toJsonValue(m_resource_provider_name));
    }
    if (m_resource_type.isSet()) {
        obj.insert(QString("resourceType"), ::OpenAPI::toJsonValue(m_resource_type));
    }
    if (m_status.isSet()) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_status.isSet()) {
        obj.insert(QString("subStatus"), ::OpenAPI::toJsonValue(m_sub_status));
    }
    if (m_submission_timestamp_isSet) {
        obj.insert(QString("submissionTimestamp"), ::OpenAPI::toJsonValue(m_submission_timestamp));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

OAISenderAuthorization OAIEventData::getAuthorization() const {
    return m_authorization;
}
void OAIEventData::setAuthorization(const OAISenderAuthorization &authorization) {
    m_authorization = authorization;
    m_authorization_isSet = true;
}

bool OAIEventData::is_authorization_Set() const{
    return m_authorization_isSet;
}

bool OAIEventData::is_authorization_Valid() const{
    return m_authorization_isValid;
}

QString OAIEventData::getCaller() const {
    return m_caller;
}
void OAIEventData::setCaller(const QString &caller) {
    m_caller = caller;
    m_caller_isSet = true;
}

bool OAIEventData::is_caller_Set() const{
    return m_caller_isSet;
}

bool OAIEventData::is_caller_Valid() const{
    return m_caller_isValid;
}

OAILocalizableString OAIEventData::getCategory() const {
    return m_category;
}
void OAIEventData::setCategory(const OAILocalizableString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIEventData::is_category_Set() const{
    return m_category_isSet;
}

bool OAIEventData::is_category_Valid() const{
    return m_category_isValid;
}

QMap<QString, QString> OAIEventData::getClaims() const {
    return m_claims;
}
void OAIEventData::setClaims(const QMap<QString, QString> &claims) {
    m_claims = claims;
    m_claims_isSet = true;
}

bool OAIEventData::is_claims_Set() const{
    return m_claims_isSet;
}

bool OAIEventData::is_claims_Valid() const{
    return m_claims_isValid;
}

QString OAIEventData::getCorrelationId() const {
    return m_correlation_id;
}
void OAIEventData::setCorrelationId(const QString &correlation_id) {
    m_correlation_id = correlation_id;
    m_correlation_id_isSet = true;
}

bool OAIEventData::is_correlation_id_Set() const{
    return m_correlation_id_isSet;
}

bool OAIEventData::is_correlation_id_Valid() const{
    return m_correlation_id_isValid;
}

QString OAIEventData::getDescription() const {
    return m_description;
}
void OAIEventData::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventData::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventData::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEventData::getEventDataId() const {
    return m_event_data_id;
}
void OAIEventData::setEventDataId(const QString &event_data_id) {
    m_event_data_id = event_data_id;
    m_event_data_id_isSet = true;
}

bool OAIEventData::is_event_data_id_Set() const{
    return m_event_data_id_isSet;
}

bool OAIEventData::is_event_data_id_Valid() const{
    return m_event_data_id_isValid;
}

OAILocalizableString OAIEventData::getEventName() const {
    return m_event_name;
}
void OAIEventData::setEventName(const OAILocalizableString &event_name) {
    m_event_name = event_name;
    m_event_name_isSet = true;
}

bool OAIEventData::is_event_name_Set() const{
    return m_event_name_isSet;
}

bool OAIEventData::is_event_name_Valid() const{
    return m_event_name_isValid;
}

QDateTime OAIEventData::getEventTimestamp() const {
    return m_event_timestamp;
}
void OAIEventData::setEventTimestamp(const QDateTime &event_timestamp) {
    m_event_timestamp = event_timestamp;
    m_event_timestamp_isSet = true;
}

bool OAIEventData::is_event_timestamp_Set() const{
    return m_event_timestamp_isSet;
}

bool OAIEventData::is_event_timestamp_Valid() const{
    return m_event_timestamp_isValid;
}

OAIHttpRequestInfo OAIEventData::getHttpRequest() const {
    return m_http_request;
}
void OAIEventData::setHttpRequest(const OAIHttpRequestInfo &http_request) {
    m_http_request = http_request;
    m_http_request_isSet = true;
}

bool OAIEventData::is_http_request_Set() const{
    return m_http_request_isSet;
}

bool OAIEventData::is_http_request_Valid() const{
    return m_http_request_isValid;
}

QString OAIEventData::getId() const {
    return m_id;
}
void OAIEventData::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEventData::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEventData::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEventData::getLevel() const {
    return m_level;
}
void OAIEventData::setLevel(const QString &level) {
    m_level = level;
    m_level_isSet = true;
}

bool OAIEventData::is_level_Set() const{
    return m_level_isSet;
}

bool OAIEventData::is_level_Valid() const{
    return m_level_isValid;
}

QString OAIEventData::getOperationId() const {
    return m_operation_id;
}
void OAIEventData::setOperationId(const QString &operation_id) {
    m_operation_id = operation_id;
    m_operation_id_isSet = true;
}

bool OAIEventData::is_operation_id_Set() const{
    return m_operation_id_isSet;
}

bool OAIEventData::is_operation_id_Valid() const{
    return m_operation_id_isValid;
}

OAILocalizableString OAIEventData::getOperationName() const {
    return m_operation_name;
}
void OAIEventData::setOperationName(const OAILocalizableString &operation_name) {
    m_operation_name = operation_name;
    m_operation_name_isSet = true;
}

bool OAIEventData::is_operation_name_Set() const{
    return m_operation_name_isSet;
}

bool OAIEventData::is_operation_name_Valid() const{
    return m_operation_name_isValid;
}

QMap<QString, QString> OAIEventData::getProperties() const {
    return m_properties;
}
void OAIEventData::setProperties(const QMap<QString, QString> &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIEventData::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIEventData::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIEventData::getResourceGroupName() const {
    return m_resource_group_name;
}
void OAIEventData::setResourceGroupName(const QString &resource_group_name) {
    m_resource_group_name = resource_group_name;
    m_resource_group_name_isSet = true;
}

bool OAIEventData::is_resource_group_name_Set() const{
    return m_resource_group_name_isSet;
}

bool OAIEventData::is_resource_group_name_Valid() const{
    return m_resource_group_name_isValid;
}

QString OAIEventData::getResourceId() const {
    return m_resource_id;
}
void OAIEventData::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIEventData::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIEventData::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

OAILocalizableString OAIEventData::getResourceProviderName() const {
    return m_resource_provider_name;
}
void OAIEventData::setResourceProviderName(const OAILocalizableString &resource_provider_name) {
    m_resource_provider_name = resource_provider_name;
    m_resource_provider_name_isSet = true;
}

bool OAIEventData::is_resource_provider_name_Set() const{
    return m_resource_provider_name_isSet;
}

bool OAIEventData::is_resource_provider_name_Valid() const{
    return m_resource_provider_name_isValid;
}

OAILocalizableString OAIEventData::getResourceType() const {
    return m_resource_type;
}
void OAIEventData::setResourceType(const OAILocalizableString &resource_type) {
    m_resource_type = resource_type;
    m_resource_type_isSet = true;
}

bool OAIEventData::is_resource_type_Set() const{
    return m_resource_type_isSet;
}

bool OAIEventData::is_resource_type_Valid() const{
    return m_resource_type_isValid;
}

OAILocalizableString OAIEventData::getStatus() const {
    return m_status;
}
void OAIEventData::setStatus(const OAILocalizableString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEventData::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEventData::is_status_Valid() const{
    return m_status_isValid;
}

OAILocalizableString OAIEventData::getSubStatus() const {
    return m_sub_status;
}
void OAIEventData::setSubStatus(const OAILocalizableString &sub_status) {
    m_sub_status = sub_status;
    m_sub_status_isSet = true;
}

bool OAIEventData::is_sub_status_Set() const{
    return m_sub_status_isSet;
}

bool OAIEventData::is_sub_status_Valid() const{
    return m_sub_status_isValid;
}

QDateTime OAIEventData::getSubmissionTimestamp() const {
    return m_submission_timestamp;
}
void OAIEventData::setSubmissionTimestamp(const QDateTime &submission_timestamp) {
    m_submission_timestamp = submission_timestamp;
    m_submission_timestamp_isSet = true;
}

bool OAIEventData::is_submission_timestamp_Set() const{
    return m_submission_timestamp_isSet;
}

bool OAIEventData::is_submission_timestamp_Valid() const{
    return m_submission_timestamp_isValid;
}

QString OAIEventData::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIEventData::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIEventData::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIEventData::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAIEventData::getTenantId() const {
    return m_tenant_id;
}
void OAIEventData::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIEventData::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIEventData::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIEventData::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorization.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_caller_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_claims.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_correlation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_data_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_http_request.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_level_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_operation_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_provider_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_submission_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventData::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
