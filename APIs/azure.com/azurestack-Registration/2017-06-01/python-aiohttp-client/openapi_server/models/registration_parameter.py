# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.registration_parameter_properties import RegistrationParameterProperties
from openapi_server import util


class RegistrationParameter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, properties: RegistrationParameterProperties=None):
        """RegistrationParameter - a model defined in OpenAPI

        :param location: The location of this RegistrationParameter.
        :param properties: The properties of this RegistrationParameter.
        """
        self.openapi_types = {
            'location': str,
            'properties': RegistrationParameterProperties
        }

        self.attribute_map = {
            'location': 'location',
            'properties': 'properties'
        }

        self._location = location
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RegistrationParameter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RegistrationParameter of this RegistrationParameter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this RegistrationParameter.

        Location of the resource.

        :return: The location of this RegistrationParameter.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this RegistrationParameter.

        Location of the resource.

        :param location: The location of this RegistrationParameter.
        :type location: str
        """
        allowed_values = ["global"]  # noqa: E501
        if location not in allowed_values:
            raise ValueError(
                "Invalid value for `location` ({0}), must be one of {1}"
                .format(location, allowed_values)
            )

        self._location = location

    @property
    def properties(self):
        """Gets the properties of this RegistrationParameter.


        :return: The properties of this RegistrationParameter.
        :rtype: RegistrationParameterProperties
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this RegistrationParameter.


        :param properties: The properties of this RegistrationParameter.
        :type properties: RegistrationParameterProperties
        """

        self._properties = properties
