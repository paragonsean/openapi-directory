/**
 * Azure Stack Azure Bridge Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2017-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRegistrationsApi_H
#define OAI_OAIRegistrationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIActivationKeyResult.h"
#include "OAIRegistration.h"
#include "OAIRegistrationList.h"
#include "OAIRegistrationParameter.h"
#include "OAIRegistrations_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRegistrationsApi : public QObject {
    Q_OBJECT

public:
    OAIRegistrationsApi(const int timeOut = 0);
    ~OAIRegistrationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  registration_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  token OAIRegistrationParameter [required]
    */
    virtual void registrationsCreateOrUpdate(const QString &subscription_id, const QString &resource_group, const QString &registration_name, const QString &api_version, const OAIRegistrationParameter &token);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  registration_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registrationsDelete(const QString &subscription_id, const QString &resource_group, const QString &registration_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  registration_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registrationsGet(const QString &subscription_id, const QString &resource_group, const QString &registration_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  registration_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registrationsGetActivationKey(const QString &subscription_id, const QString &resource_group, const QString &registration_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void registrationsList(const QString &subscription_id, const QString &resource_group, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group QString [required]
    * @param[in]  registration_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  token OAIRegistrationParameter [required]
    */
    virtual void registrationsUpdate(const QString &subscription_id, const QString &resource_group, const QString &registration_name, const QString &api_version, const OAIRegistrationParameter &token);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void registrationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void registrationsDeleteCallback(OAIHttpRequestWorker *worker);
    void registrationsGetCallback(OAIHttpRequestWorker *worker);
    void registrationsGetActivationKeyCallback(OAIHttpRequestWorker *worker);
    void registrationsListCallback(OAIHttpRequestWorker *worker);
    void registrationsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void registrationsCreateOrUpdateSignal(OAIRegistration summary);
    void registrationsDeleteSignal();
    void registrationsGetSignal(OAIRegistration summary);
    void registrationsGetActivationKeySignal(OAIActivationKeyResult summary);
    void registrationsListSignal(OAIRegistrationList summary);
    void registrationsUpdateSignal(OAIRegistration summary);


    void registrationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegistration summary);
    void registrationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void registrationsGetSignalFull(OAIHttpRequestWorker *worker, OAIRegistration summary);
    void registrationsGetActivationKeySignalFull(OAIHttpRequestWorker *worker, OAIActivationKeyResult summary);
    void registrationsListSignalFull(OAIHttpRequestWorker *worker, OAIRegistrationList summary);
    void registrationsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIRegistration summary);

    Q_DECL_DEPRECATED_X("Use registrationsCreateOrUpdateSignalError() instead")
    void registrationsCreateOrUpdateSignalE(OAIRegistration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCreateOrUpdateSignalError(OAIRegistration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsDeleteSignalError() instead")
    void registrationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsGetSignalError() instead")
    void registrationsGetSignalE(OAIRegistration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsGetSignalError(OAIRegistration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsGetActivationKeySignalError() instead")
    void registrationsGetActivationKeySignalE(OAIActivationKeyResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsGetActivationKeySignalError(OAIActivationKeyResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsListSignalError() instead")
    void registrationsListSignalE(OAIRegistrationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsListSignalError(OAIRegistrationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsUpdateSignalError() instead")
    void registrationsUpdateSignalE(OAIRegistration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsUpdateSignalError(OAIRegistration summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use registrationsCreateOrUpdateSignalErrorFull() instead")
    void registrationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsDeleteSignalErrorFull() instead")
    void registrationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsGetSignalErrorFull() instead")
    void registrationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsGetActivationKeySignalErrorFull() instead")
    void registrationsGetActivationKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsGetActivationKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsListSignalErrorFull() instead")
    void registrationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use registrationsUpdateSignalErrorFull() instead")
    void registrationsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void registrationsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
