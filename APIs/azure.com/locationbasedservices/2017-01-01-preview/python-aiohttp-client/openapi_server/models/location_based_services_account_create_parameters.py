# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class LocationBasedServicesAccountCreateParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, location: str=None, sku: Sku=None, tags: Dict[str, str]=None):
        """LocationBasedServicesAccountCreateParameters - a model defined in OpenAPI

        :param location: The location of this LocationBasedServicesAccountCreateParameters.
        :param sku: The sku of this LocationBasedServicesAccountCreateParameters.
        :param tags: The tags of this LocationBasedServicesAccountCreateParameters.
        """
        self.openapi_types = {
            'location': str,
            'sku': Sku,
            'tags': Dict[str, str]
        }

        self.attribute_map = {
            'location': 'location',
            'sku': 'sku',
            'tags': 'tags'
        }

        self._location = location
        self._sku = sku
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocationBasedServicesAccountCreateParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LocationBasedServicesAccountCreateParameters of this LocationBasedServicesAccountCreateParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def location(self):
        """Gets the location of this LocationBasedServicesAccountCreateParameters.

        The location of the resource.

        :return: The location of this LocationBasedServicesAccountCreateParameters.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this LocationBasedServicesAccountCreateParameters.

        The location of the resource.

        :param location: The location of this LocationBasedServicesAccountCreateParameters.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def sku(self):
        """Gets the sku of this LocationBasedServicesAccountCreateParameters.


        :return: The sku of this LocationBasedServicesAccountCreateParameters.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this LocationBasedServicesAccountCreateParameters.


        :param sku: The sku of this LocationBasedServicesAccountCreateParameters.
        :type sku: Sku
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def tags(self):
        """Gets the tags of this LocationBasedServicesAccountCreateParameters.

        Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.

        :return: The tags of this LocationBasedServicesAccountCreateParameters.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this LocationBasedServicesAccountCreateParameters.

        Gets or sets a list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource (across resource groups). A maximum of 15 tags can be provided for a resource. Each tag must have a key no greater than 128 characters and value no greater than 256 characters.

        :param tags: The tags of this LocationBasedServicesAccountCreateParameters.
        :type tags: Dict[str, str]
        """

        self._tags = tags
