/*
 * Azure Location Based Services Resource Provider
 * Resource Provider
 *
 * The version of the OpenAPI document: 2017-01-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Error;
import org.openapitools.client.model.LocationBasedServicesAccount;
import org.openapitools.client.model.LocationBasedServicesAccountCreateParameters;
import org.openapitools.client.model.LocationBasedServicesAccountKeys;
import org.openapitools.client.model.LocationBasedServicesAccountUpdateParameters;
import org.openapitools.client.model.LocationBasedServicesAccounts;
import org.openapitools.client.model.LocationBasedServicesAccountsMoveRequest;
import org.openapitools.client.model.LocationBasedServicesKeySpecification;
import org.openapitools.client.model.LocationBasedServicesOperations;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accountsCreateOrUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountCreateParameters The new or updated parameters for the Location Based Services Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Account was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountCreateParameters locationBasedServicesAccountCreateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationBasedServicesAccountCreateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountCreateParameters locationBasedServicesAccountCreateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'locationBasedServicesAccountCreateParameters' is set
        if (locationBasedServicesAccountCreateParameters == null) {
            throw new ApiException("Missing the required parameter 'locationBasedServicesAccountCreateParameters' when calling accountsCreateOrUpdate(Async)");
        }

        return accountsCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountCreateParameters, _callback);

    }

    /**
     * 
     * Create or update a Location Based Services Account. A Location Based Services Account holds the keys which allow access to the Location Based Services REST APIs.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountCreateParameters The new or updated parameters for the Location Based Services Account. (required)
     * @return LocationBasedServicesAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Account was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccount accountsCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountCreateParameters locationBasedServicesAccountCreateParameters) throws ApiException {
        ApiResponse<LocationBasedServicesAccount> localVarResp = accountsCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountCreateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Create or update a Location Based Services Account. A Location Based Services Account holds the keys which allow access to the Location Based Services REST APIs.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountCreateParameters The new or updated parameters for the Location Based Services Account. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Account was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccount> accountsCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountCreateParameters locationBasedServicesAccountCreateParameters) throws ApiException {
        okhttp3.Call localVarCall = accountsCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountCreateParameters, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create or update a Location Based Services Account. A Location Based Services Account holds the keys which allow access to the Location Based Services REST APIs.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountCreateParameters The new or updated parameters for the Location Based Services Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> The Account was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountCreateParameters locationBasedServicesAccountCreateParameters, final ApiCallback<LocationBasedServicesAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountCreateParameters, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsDelete
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Account was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsDelete(Async)");
        }

        return accountsDeleteCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);

    }

    /**
     * 
     * Delete a Location Based Services Account
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Account was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsDelete(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        accountsDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName);
    }

    /**
     * 
     * Delete a Location Based Services Account
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Account was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        okhttp3.Call localVarCall = accountsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a Location Based Services Account
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was deleted successfully. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> The specified Account was not found. Nothing was deleted. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsGet
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsGet(Async)");
        }

        return accountsGetCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);

    }

    /**
     * 
     * Get a Location Based Services Account
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @return LocationBasedServicesAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccount accountsGet(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        ApiResponse<LocationBasedServicesAccount> localVarResp = accountsGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a Location Based Services Account
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccount> accountsGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a Location Based Services Account
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback<LocationBasedServicesAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsListByResourceGroup
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsListByResourceGroup(Async)");
        }

        return accountsListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Get all Location Based Services Accounts in a Resource Group
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @return LocationBasedServicesAccounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccounts accountsListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<LocationBasedServicesAccounts> localVarResp = accountsListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all Location Based Services Accounts in a Resource Group
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccounts> accountsListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = accountsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Location Based Services Accounts in a Resource Group
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<LocationBasedServicesAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsListBySubscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListBySubscriptionCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.LocationBasedServices/accounts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListBySubscriptionValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsListBySubscription(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsListBySubscription(Async)");
        }

        return accountsListBySubscriptionCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get all Location Based Services Accounts in a Subscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return LocationBasedServicesAccounts
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccounts accountsListBySubscription(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<LocationBasedServicesAccounts> localVarResp = accountsListBySubscriptionWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all Location Based Services Accounts in a Subscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccounts> accountsListBySubscriptionWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = accountsListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccounts>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all Location Based Services Accounts in a Subscription
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListBySubscriptionAsync(String apiVersion, String subscriptionId, final ApiCallback<LocationBasedServicesAccounts> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListBySubscriptionValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccounts>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsListKeys
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListKeysCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts/{accountName}/listKeys"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListKeysValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsListKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsListKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsListKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsListKeys(Async)");
        }

        return accountsListKeysCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);

    }

    /**
     * 
     * Get the keys to use with the Location Based Services APIs. A key is used to authenticate and authorize access to the Location Based Services REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @return LocationBasedServicesAccountKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccountKeys accountsListKeys(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        ApiResponse<LocationBasedServicesAccountKeys> localVarResp = accountsListKeysWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the keys to use with the Location Based Services APIs. A key is used to authenticate and authorize access to the Location Based Services REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccountKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccountKeys> accountsListKeysWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName) throws ApiException {
        okhttp3.Call localVarCall = accountsListKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccountKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the keys to use with the Location Based Services APIs. A key is used to authenticate and authorize access to the Location Based Services REST APIs. Only one key is needed at a time; two are given to provide seamless key regeneration.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListKeysAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, final ApiCallback<LocationBasedServicesAccountKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccountKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsListOperations
     * @param apiVersion Client Api Version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListOperationsCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/providers/Microsoft.LocationBasedServices/operations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsListOperationsValidateBeforeCall(String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsListOperations(Async)");
        }

        return accountsListOperationsCall(apiVersion, _callback);

    }

    /**
     * 
     * List operations available for the Location Based Services Resource Provider
     * @param apiVersion Client Api Version. (required)
     * @return LocationBasedServicesOperations
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesOperations accountsListOperations(String apiVersion) throws ApiException {
        ApiResponse<LocationBasedServicesOperations> localVarResp = accountsListOperationsWithHttpInfo(apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List operations available for the Location Based Services Resource Provider
     * @param apiVersion Client Api Version. (required)
     * @return ApiResponse&lt;LocationBasedServicesOperations&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesOperations> accountsListOperationsWithHttpInfo(String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = accountsListOperationsValidateBeforeCall(apiVersion, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesOperations>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List operations available for the Location Based Services Resource Provider
     * @param apiVersion Client Api Version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsListOperationsAsync(String apiVersion, final ApiCallback<LocationBasedServicesOperations> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsListOperationsValidateBeforeCall(apiVersion, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesOperations>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsMove
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains Location Based Services Account to move. (required)
     * @param moveRequest The details of the Location Based Services Account move. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Accounts were successfully moved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsMoveCall(String apiVersion, String subscriptionId, String resourceGroupName, LocationBasedServicesAccountsMoveRequest moveRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = moveRequest;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsMoveValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, LocationBasedServicesAccountsMoveRequest moveRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsMove(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsMove(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsMove(Async)");
        }

        // verify the required parameter 'moveRequest' is set
        if (moveRequest == null) {
            throw new ApiException("Missing the required parameter 'moveRequest' when calling accountsMove(Async)");
        }

        return accountsMoveCall(apiVersion, subscriptionId, resourceGroupName, moveRequest, _callback);

    }

    /**
     * 
     * Moves Location Based Services Accounts from one ResourceGroup (or Subscription) to another
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains Location Based Services Account to move. (required)
     * @param moveRequest The details of the Location Based Services Account move. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Accounts were successfully moved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public void accountsMove(String apiVersion, String subscriptionId, String resourceGroupName, LocationBasedServicesAccountsMoveRequest moveRequest) throws ApiException {
        accountsMoveWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, moveRequest);
    }

    /**
     * 
     * Moves Location Based Services Accounts from one ResourceGroup (or Subscription) to another
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains Location Based Services Account to move. (required)
     * @param moveRequest The details of the Location Based Services Account move. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Accounts were successfully moved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> accountsMoveWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, LocationBasedServicesAccountsMoveRequest moveRequest) throws ApiException {
        okhttp3.Call localVarCall = accountsMoveValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, moveRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Moves Location Based Services Accounts from one ResourceGroup (or Subscription) to another
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the resource group that contains Location Based Services Account to move. (required)
     * @param moveRequest The details of the Location Based Services Account move. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Accounts were successfully moved. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsMoveAsync(String apiVersion, String subscriptionId, String resourceGroupName, LocationBasedServicesAccountsMoveRequest moveRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsMoveValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, moveRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsRegenerateKeys
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param keySpecification Which key to regenerate:  primary or secondary. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsRegenerateKeysCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesKeySpecification keySpecification, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = keySpecification;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts/{accountName}/regenerateKey"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsRegenerateKeysValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesKeySpecification keySpecification, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsRegenerateKeys(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsRegenerateKeys(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsRegenerateKeys(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsRegenerateKeys(Async)");
        }

        // verify the required parameter 'keySpecification' is set
        if (keySpecification == null) {
            throw new ApiException("Missing the required parameter 'keySpecification' when calling accountsRegenerateKeys(Async)");
        }

        return accountsRegenerateKeysCall(apiVersion, subscriptionId, resourceGroupName, accountName, keySpecification, _callback);

    }

    /**
     * 
     * Regenerate either the primary or secondary key for use with the Location Based Services APIs. The old key will stop working immediately.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param keySpecification Which key to regenerate:  primary or secondary. (required)
     * @return LocationBasedServicesAccountKeys
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccountKeys accountsRegenerateKeys(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesKeySpecification keySpecification) throws ApiException {
        ApiResponse<LocationBasedServicesAccountKeys> localVarResp = accountsRegenerateKeysWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, keySpecification);
        return localVarResp.getData();
    }

    /**
     * 
     * Regenerate either the primary or secondary key for use with the Location Based Services APIs. The old key will stop working immediately.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param keySpecification Which key to regenerate:  primary or secondary. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccountKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccountKeys> accountsRegenerateKeysWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesKeySpecification keySpecification) throws ApiException {
        okhttp3.Call localVarCall = accountsRegenerateKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, keySpecification, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccountKeys>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Regenerate either the primary or secondary key for use with the Location Based Services APIs. The old key will stop working immediately.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param keySpecification Which key to regenerate:  primary or secondary. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request was successful. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account does not exist. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsRegenerateKeysAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesKeySpecification keySpecification, final ApiCallback<LocationBasedServicesAccountKeys> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsRegenerateKeysValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, keySpecification, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccountKeys>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for accountsUpdate
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountUpdateParameters The updated parameters for the Location Based Services Account. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account was not found. Nothing was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountUpdateParameters locationBasedServicesAccountUpdateParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = locationBasedServicesAccountUpdateParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.LocationBasedServices/accounts/{accountName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accountsUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountUpdateParameters locationBasedServicesAccountUpdateParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling accountsUpdate(Async)");
        }

        // verify the required parameter 'locationBasedServicesAccountUpdateParameters' is set
        if (locationBasedServicesAccountUpdateParameters == null) {
            throw new ApiException("Missing the required parameter 'locationBasedServicesAccountUpdateParameters' when calling accountsUpdate(Async)");
        }

        return accountsUpdateCall(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountUpdateParameters, _callback);

    }

    /**
     * 
     * Updates a Location Based Services Account. Only a subset of the parameters may be updated after creation, such as Sku and Tags.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountUpdateParameters The updated parameters for the Location Based Services Account. (required)
     * @return LocationBasedServicesAccount
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account was not found. Nothing was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public LocationBasedServicesAccount accountsUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountUpdateParameters locationBasedServicesAccountUpdateParameters) throws ApiException {
        ApiResponse<LocationBasedServicesAccount> localVarResp = accountsUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountUpdateParameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a Location Based Services Account. Only a subset of the parameters may be updated after creation, such as Sku and Tags.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountUpdateParameters The updated parameters for the Location Based Services Account. (required)
     * @return ApiResponse&lt;LocationBasedServicesAccount&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account was not found. Nothing was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LocationBasedServicesAccount> accountsUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountUpdateParameters locationBasedServicesAccountUpdateParameters) throws ApiException {
        okhttp3.Call localVarCall = accountsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountUpdateParameters, null);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a Location Based Services Account. Only a subset of the parameters may be updated after creation, such as Sku and Tags.
     * @param apiVersion Client Api Version. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param resourceGroupName The name of the Azure Resource Group. (required)
     * @param accountName The name of the Location Based Services Account. (required)
     * @param locationBasedServicesAccountUpdateParameters The updated parameters for the Location Based Services Account. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The Account was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The specified Account was not found. Nothing was updated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An unexpected error occurred. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accountsUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String accountName, LocationBasedServicesAccountUpdateParameters locationBasedServicesAccountUpdateParameters, final ApiCallback<LocationBasedServicesAccount> _callback) throws ApiException {

        okhttp3.Call localVarCall = accountsUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, accountName, locationBasedServicesAccountUpdateParameters, _callback);
        Type localVarReturnType = new TypeToken<LocationBasedServicesAccount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
