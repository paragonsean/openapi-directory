/**
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ActionPlanAdminPropertiesError from './ActionPlanAdminPropertiesError';
import ActionPlanAdminPropertiesParameters from './ActionPlanAdminPropertiesParameters';

/**
 * The ActionPlanAdminProperties model module.
 * @module model/ActionPlanAdminProperties
 * @version 2019-01-01
 */
class ActionPlanAdminProperties {
    /**
     * Constructs a new <code>ActionPlanAdminProperties</code>.
     * Action Plan Properties
     * @alias module:model/ActionPlanAdminProperties
     */
    constructor() { 
        
        ActionPlanAdminProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ActionPlanAdminProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ActionPlanAdminProperties} obj Optional instance to populate.
     * @return {module:model/ActionPlanAdminProperties} The populated <code>ActionPlanAdminProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ActionPlanAdminProperties();

            if (data.hasOwnProperty('actionPlanInstanceId')) {
                obj['actionPlanInstanceId'] = ApiClient.convertToType(data['actionPlanInstanceId'], 'String');
            }
            if (data.hasOwnProperty('actionPlanUri')) {
                obj['actionPlanUri'] = ApiClient.convertToType(data['actionPlanUri'], 'String');
            }
            if (data.hasOwnProperty('blobContainerName')) {
                obj['blobContainerName'] = ApiClient.convertToType(data['blobContainerName'], 'String');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ActionPlanAdminPropertiesError.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ActionPlanAdminPropertiesParameters.constructFromObject(data['parameters']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceGroupName')) {
                obj['resourceGroupName'] = ApiClient.convertToType(data['resourceGroupName'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ActionPlanAdminProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ActionPlanAdminProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['actionPlanInstanceId'] && !(typeof data['actionPlanInstanceId'] === 'string' || data['actionPlanInstanceId'] instanceof String)) {
            throw new Error("Expected the field `actionPlanInstanceId` to be a primitive type in the JSON string but got " + data['actionPlanInstanceId']);
        }
        // ensure the json data is a string
        if (data['actionPlanUri'] && !(typeof data['actionPlanUri'] === 'string' || data['actionPlanUri'] instanceof String)) {
            throw new Error("Expected the field `actionPlanUri` to be a primitive type in the JSON string but got " + data['actionPlanUri']);
        }
        // ensure the json data is a string
        if (data['blobContainerName'] && !(typeof data['blobContainerName'] === 'string' || data['blobContainerName'] instanceof String)) {
            throw new Error("Expected the field `blobContainerName` to be a primitive type in the JSON string but got " + data['blobContainerName']);
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          ActionPlanAdminPropertiesError.validateJSON(data['error']);
        }
        // validate the optional field `parameters`
        if (data['parameters']) { // data not null
          ActionPlanAdminPropertiesParameters.validateJSON(data['parameters']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceGroupName'] && !(typeof data['resourceGroupName'] === 'string' || data['resourceGroupName'] instanceof String)) {
            throw new Error("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got " + data['resourceGroupName']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}



/**
 * Action plan instance identifier
 * @member {String} actionPlanInstanceId
 */
ActionPlanAdminProperties.prototype['actionPlanInstanceId'] = undefined;

/**
 * Action plan uri
 * @member {String} actionPlanUri
 */
ActionPlanAdminProperties.prototype['actionPlanUri'] = undefined;

/**
 * Blob container name storing the deployment data
 * @member {String} blobContainerName
 */
ActionPlanAdminProperties.prototype['blobContainerName'] = undefined;

/**
 * The deployment end time
 * @member {Date} endTime
 */
ActionPlanAdminProperties.prototype['endTime'] = undefined;

/**
 * @member {module:model/ActionPlanAdminPropertiesError} error
 */
ActionPlanAdminProperties.prototype['error'] = undefined;

/**
 * @member {module:model/ActionPlanAdminPropertiesParameters} parameters
 */
ActionPlanAdminProperties.prototype['parameters'] = undefined;

/**
 * The provisioning state
 * @member {String} provisioningState
 */
ActionPlanAdminProperties.prototype['provisioningState'] = undefined;

/**
 * The target resource group name
 * @member {String} resourceGroupName
 */
ActionPlanAdminProperties.prototype['resourceGroupName'] = undefined;

/**
 * The deployment start time
 * @member {Date} startTime
 */
ActionPlanAdminProperties.prototype['startTime'] = undefined;

/**
 * The target subscription identifier
 * @member {String} subscriptionId
 */
ActionPlanAdminProperties.prototype['subscriptionId'] = undefined;






export default ActionPlanAdminProperties;

