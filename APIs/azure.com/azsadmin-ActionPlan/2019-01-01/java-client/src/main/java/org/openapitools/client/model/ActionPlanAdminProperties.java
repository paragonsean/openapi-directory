/*
 * DeploymentAdminClient
 * Deployment Admin Client.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.ActionPlanAdminPropertiesError;
import org.openapitools.client.model.ActionPlanAdminPropertiesParameters;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Action Plan Properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:24:11.523676-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ActionPlanAdminProperties {
  public static final String SERIALIZED_NAME_ACTION_PLAN_INSTANCE_ID = "actionPlanInstanceId";
  @SerializedName(SERIALIZED_NAME_ACTION_PLAN_INSTANCE_ID)
  private String actionPlanInstanceId;

  public static final String SERIALIZED_NAME_ACTION_PLAN_URI = "actionPlanUri";
  @SerializedName(SERIALIZED_NAME_ACTION_PLAN_URI)
  private String actionPlanUri;

  public static final String SERIALIZED_NAME_BLOB_CONTAINER_NAME = "blobContainerName";
  @SerializedName(SERIALIZED_NAME_BLOB_CONTAINER_NAME)
  private String blobContainerName;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private ActionPlanAdminPropertiesError error;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private ActionPlanAdminPropertiesParameters parameters;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP_NAME = "resourceGroupName";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP_NAME)
  private String resourceGroupName;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public ActionPlanAdminProperties() {
  }

  public ActionPlanAdminProperties actionPlanInstanceId(String actionPlanInstanceId) {
    this.actionPlanInstanceId = actionPlanInstanceId;
    return this;
  }

  /**
   * Action plan instance identifier
   * @return actionPlanInstanceId
   */
  @javax.annotation.Nullable
  public String getActionPlanInstanceId() {
    return actionPlanInstanceId;
  }

  public void setActionPlanInstanceId(String actionPlanInstanceId) {
    this.actionPlanInstanceId = actionPlanInstanceId;
  }


  public ActionPlanAdminProperties actionPlanUri(String actionPlanUri) {
    this.actionPlanUri = actionPlanUri;
    return this;
  }

  /**
   * Action plan uri
   * @return actionPlanUri
   */
  @javax.annotation.Nullable
  public String getActionPlanUri() {
    return actionPlanUri;
  }

  public void setActionPlanUri(String actionPlanUri) {
    this.actionPlanUri = actionPlanUri;
  }


  public ActionPlanAdminProperties blobContainerName(String blobContainerName) {
    this.blobContainerName = blobContainerName;
    return this;
  }

  /**
   * Blob container name storing the deployment data
   * @return blobContainerName
   */
  @javax.annotation.Nullable
  public String getBlobContainerName() {
    return blobContainerName;
  }

  public void setBlobContainerName(String blobContainerName) {
    this.blobContainerName = blobContainerName;
  }


  public ActionPlanAdminProperties endTime(OffsetDateTime endTime) {
    this.endTime = endTime;
    return this;
  }

  /**
   * The deployment end time
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }

  public void setEndTime(OffsetDateTime endTime) {
    this.endTime = endTime;
  }


  public ActionPlanAdminProperties error(ActionPlanAdminPropertiesError error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public ActionPlanAdminPropertiesError getError() {
    return error;
  }

  public void setError(ActionPlanAdminPropertiesError error) {
    this.error = error;
  }


  public ActionPlanAdminProperties parameters(ActionPlanAdminPropertiesParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public ActionPlanAdminPropertiesParameters getParameters() {
    return parameters;
  }

  public void setParameters(ActionPlanAdminPropertiesParameters parameters) {
    this.parameters = parameters;
  }


  public ActionPlanAdminProperties provisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(String provisioningState) {
    this.provisioningState = provisioningState;
  }


  public ActionPlanAdminProperties resourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
    return this;
  }

  /**
   * The target resource group name
   * @return resourceGroupName
   */
  @javax.annotation.Nullable
  public String getResourceGroupName() {
    return resourceGroupName;
  }

  public void setResourceGroupName(String resourceGroupName) {
    this.resourceGroupName = resourceGroupName;
  }


  public ActionPlanAdminProperties startTime(OffsetDateTime startTime) {
    this.startTime = startTime;
    return this;
  }

  /**
   * The deployment start time
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }

  public void setStartTime(OffsetDateTime startTime) {
    this.startTime = startTime;
  }


  public ActionPlanAdminProperties subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * The target subscription identifier
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ActionPlanAdminProperties actionPlanAdminProperties = (ActionPlanAdminProperties) o;
    return Objects.equals(this.actionPlanInstanceId, actionPlanAdminProperties.actionPlanInstanceId) &&
        Objects.equals(this.actionPlanUri, actionPlanAdminProperties.actionPlanUri) &&
        Objects.equals(this.blobContainerName, actionPlanAdminProperties.blobContainerName) &&
        Objects.equals(this.endTime, actionPlanAdminProperties.endTime) &&
        Objects.equals(this.error, actionPlanAdminProperties.error) &&
        Objects.equals(this.parameters, actionPlanAdminProperties.parameters) &&
        Objects.equals(this.provisioningState, actionPlanAdminProperties.provisioningState) &&
        Objects.equals(this.resourceGroupName, actionPlanAdminProperties.resourceGroupName) &&
        Objects.equals(this.startTime, actionPlanAdminProperties.startTime) &&
        Objects.equals(this.subscriptionId, actionPlanAdminProperties.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionPlanInstanceId, actionPlanUri, blobContainerName, endTime, error, parameters, provisioningState, resourceGroupName, startTime, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ActionPlanAdminProperties {\n");
    sb.append("    actionPlanInstanceId: ").append(toIndentedString(actionPlanInstanceId)).append("\n");
    sb.append("    actionPlanUri: ").append(toIndentedString(actionPlanUri)).append("\n");
    sb.append("    blobContainerName: ").append(toIndentedString(blobContainerName)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGroupName: ").append(toIndentedString(resourceGroupName)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionPlanInstanceId");
    openapiFields.add("actionPlanUri");
    openapiFields.add("blobContainerName");
    openapiFields.add("endTime");
    openapiFields.add("error");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGroupName");
    openapiFields.add("startTime");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ActionPlanAdminProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ActionPlanAdminProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ActionPlanAdminProperties is not found in the empty JSON string", ActionPlanAdminProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ActionPlanAdminProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ActionPlanAdminProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("actionPlanInstanceId") != null && !jsonObj.get("actionPlanInstanceId").isJsonNull()) && !jsonObj.get("actionPlanInstanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionPlanInstanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionPlanInstanceId").toString()));
      }
      if ((jsonObj.get("actionPlanUri") != null && !jsonObj.get("actionPlanUri").isJsonNull()) && !jsonObj.get("actionPlanUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `actionPlanUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("actionPlanUri").toString()));
      }
      if ((jsonObj.get("blobContainerName") != null && !jsonObj.get("blobContainerName").isJsonNull()) && !jsonObj.get("blobContainerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `blobContainerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("blobContainerName").toString()));
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        ActionPlanAdminPropertiesError.validateJsonElement(jsonObj.get("error"));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        ActionPlanAdminPropertiesParameters.validateJsonElement(jsonObj.get("parameters"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("resourceGroupName") != null && !jsonObj.get("resourceGroupName").isJsonNull()) && !jsonObj.get("resourceGroupName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroupName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroupName").toString()));
      }
      if ((jsonObj.get("subscriptionId") != null && !jsonObj.get("subscriptionId").isJsonNull()) && !jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ActionPlanAdminProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ActionPlanAdminProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ActionPlanAdminProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ActionPlanAdminProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ActionPlanAdminProperties>() {
           @Override
           public void write(JsonWriter out, ActionPlanAdminProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ActionPlanAdminProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ActionPlanAdminProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ActionPlanAdminProperties
   * @throws IOException if the JSON string is invalid with respect to ActionPlanAdminProperties
   */
  public static ActionPlanAdminProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ActionPlanAdminProperties.class);
  }

  /**
   * Convert an instance of ActionPlanAdminProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

