/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for favorites.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties that define a favorite that is associated to an Application Insights component.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:41.307916-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ApplicationInsightsComponentFavorite {
  public static final String SERIALIZED_NAME_CATEGORY = "Category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private String category;

  public static final String SERIALIZED_NAME_CONFIG = "Config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private String config;

  public static final String SERIALIZED_NAME_FAVORITE_ID = "FavoriteId";
  @SerializedName(SERIALIZED_NAME_FAVORITE_ID)
  private String favoriteId;

  /**
   * Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
   */
  @JsonAdapter(FavoriteTypeEnum.Adapter.class)
  public enum FavoriteTypeEnum {
    SHARED("shared"),
    
    USER("user");

    private String value;

    FavoriteTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FavoriteTypeEnum fromValue(String value) {
      for (FavoriteTypeEnum b : FavoriteTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FavoriteTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FavoriteTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FavoriteTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FavoriteTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FavoriteTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAVORITE_TYPE = "FavoriteType";
  @SerializedName(SERIALIZED_NAME_FAVORITE_TYPE)
  private FavoriteTypeEnum favoriteType;

  public static final String SERIALIZED_NAME_IS_GENERATED_FROM_TEMPLATE = "IsGeneratedFromTemplate";
  @SerializedName(SERIALIZED_NAME_IS_GENERATED_FROM_TEMPLATE)
  private Boolean isGeneratedFromTemplate;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SOURCE_TYPE = "SourceType";
  @SerializedName(SERIALIZED_NAME_SOURCE_TYPE)
  private String sourceType;

  public static final String SERIALIZED_NAME_TAGS = "Tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME_MODIFIED = "TimeModified";
  @SerializedName(SERIALIZED_NAME_TIME_MODIFIED)
  private String timeModified;

  public static final String SERIALIZED_NAME_USER_ID = "UserId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private String userId;

  public static final String SERIALIZED_NAME_VERSION = "Version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version;

  public ApplicationInsightsComponentFavorite() {
  }

  public ApplicationInsightsComponentFavorite(
     String favoriteId, 
     String timeModified, 
     String userId
  ) {
    this();
    this.favoriteId = favoriteId;
    this.timeModified = timeModified;
    this.userId = userId;
  }

  public ApplicationInsightsComponentFavorite category(String category) {
    this.category = category;
    return this;
  }

  /**
   * Favorite category, as defined by the user at creation time.
   * @return category
   */
  @javax.annotation.Nullable
  public String getCategory() {
    return category;
  }

  public void setCategory(String category) {
    this.category = category;
  }


  public ApplicationInsightsComponentFavorite config(String config) {
    this.config = config;
    return this;
  }

  /**
   * Configuration of this particular favorite, which are driven by the Azure portal UX. Configuration data is a string containing valid JSON
   * @return config
   */
  @javax.annotation.Nullable
  public String getConfig() {
    return config;
  }

  public void setConfig(String config) {
    this.config = config;
  }


  /**
   * Internally assigned unique id of the favorite definition.
   * @return favoriteId
   */
  @javax.annotation.Nullable
  public String getFavoriteId() {
    return favoriteId;
  }



  public ApplicationInsightsComponentFavorite favoriteType(FavoriteTypeEnum favoriteType) {
    this.favoriteType = favoriteType;
    return this;
  }

  /**
   * Enum indicating if this favorite definition is owned by a specific user or is shared between all users with access to the Application Insights component.
   * @return favoriteType
   */
  @javax.annotation.Nullable
  public FavoriteTypeEnum getFavoriteType() {
    return favoriteType;
  }

  public void setFavoriteType(FavoriteTypeEnum favoriteType) {
    this.favoriteType = favoriteType;
  }


  public ApplicationInsightsComponentFavorite isGeneratedFromTemplate(Boolean isGeneratedFromTemplate) {
    this.isGeneratedFromTemplate = isGeneratedFromTemplate;
    return this;
  }

  /**
   * Flag denoting wether or not this favorite was generated from a template.
   * @return isGeneratedFromTemplate
   */
  @javax.annotation.Nullable
  public Boolean getIsGeneratedFromTemplate() {
    return isGeneratedFromTemplate;
  }

  public void setIsGeneratedFromTemplate(Boolean isGeneratedFromTemplate) {
    this.isGeneratedFromTemplate = isGeneratedFromTemplate;
  }


  public ApplicationInsightsComponentFavorite name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The user-defined name of the favorite.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ApplicationInsightsComponentFavorite sourceType(String sourceType) {
    this.sourceType = sourceType;
    return this;
  }

  /**
   * The source of the favorite definition.
   * @return sourceType
   */
  @javax.annotation.Nullable
  public String getSourceType() {
    return sourceType;
  }

  public void setSourceType(String sourceType) {
    this.sourceType = sourceType;
  }


  public ApplicationInsightsComponentFavorite tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public ApplicationInsightsComponentFavorite addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * A list of 0 or more tags that are associated with this favorite definition
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  /**
   * Date and time in UTC of the last modification that was made to this favorite definition.
   * @return timeModified
   */
  @javax.annotation.Nullable
  public String getTimeModified() {
    return timeModified;
  }



  /**
   * Unique user id of the specific user that owns this favorite.
   * @return userId
   */
  @javax.annotation.Nullable
  public String getUserId() {
    return userId;
  }



  public ApplicationInsightsComponentFavorite version(String version) {
    this.version = version;
    return this;
  }

  /**
   * This instance&#39;s version of the data model. This can change as new features are added that can be marked favorite. Current examples include MetricsExplorer (ME) and Search.
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationInsightsComponentFavorite applicationInsightsComponentFavorite = (ApplicationInsightsComponentFavorite) o;
    return Objects.equals(this.category, applicationInsightsComponentFavorite.category) &&
        Objects.equals(this.config, applicationInsightsComponentFavorite.config) &&
        Objects.equals(this.favoriteId, applicationInsightsComponentFavorite.favoriteId) &&
        Objects.equals(this.favoriteType, applicationInsightsComponentFavorite.favoriteType) &&
        Objects.equals(this.isGeneratedFromTemplate, applicationInsightsComponentFavorite.isGeneratedFromTemplate) &&
        Objects.equals(this.name, applicationInsightsComponentFavorite.name) &&
        Objects.equals(this.sourceType, applicationInsightsComponentFavorite.sourceType) &&
        Objects.equals(this.tags, applicationInsightsComponentFavorite.tags) &&
        Objects.equals(this.timeModified, applicationInsightsComponentFavorite.timeModified) &&
        Objects.equals(this.userId, applicationInsightsComponentFavorite.userId) &&
        Objects.equals(this.version, applicationInsightsComponentFavorite.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, config, favoriteId, favoriteType, isGeneratedFromTemplate, name, sourceType, tags, timeModified, userId, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationInsightsComponentFavorite {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    favoriteId: ").append(toIndentedString(favoriteId)).append("\n");
    sb.append("    favoriteType: ").append(toIndentedString(favoriteType)).append("\n");
    sb.append("    isGeneratedFromTemplate: ").append(toIndentedString(isGeneratedFromTemplate)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    sourceType: ").append(toIndentedString(sourceType)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    timeModified: ").append(toIndentedString(timeModified)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category");
    openapiFields.add("Config");
    openapiFields.add("FavoriteId");
    openapiFields.add("FavoriteType");
    openapiFields.add("IsGeneratedFromTemplate");
    openapiFields.add("Name");
    openapiFields.add("SourceType");
    openapiFields.add("Tags");
    openapiFields.add("TimeModified");
    openapiFields.add("UserId");
    openapiFields.add("Version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ApplicationInsightsComponentFavorite
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ApplicationInsightsComponentFavorite.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationInsightsComponentFavorite is not found in the empty JSON string", ApplicationInsightsComponentFavorite.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ApplicationInsightsComponentFavorite.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ApplicationInsightsComponentFavorite` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Category") != null && !jsonObj.get("Category").isJsonNull()) && !jsonObj.get("Category").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Category` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Category").toString()));
      }
      if ((jsonObj.get("Config") != null && !jsonObj.get("Config").isJsonNull()) && !jsonObj.get("Config").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Config` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Config").toString()));
      }
      if ((jsonObj.get("FavoriteId") != null && !jsonObj.get("FavoriteId").isJsonNull()) && !jsonObj.get("FavoriteId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FavoriteId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FavoriteId").toString()));
      }
      if ((jsonObj.get("FavoriteType") != null && !jsonObj.get("FavoriteType").isJsonNull()) && !jsonObj.get("FavoriteType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FavoriteType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FavoriteType").toString()));
      }
      // validate the optional field `FavoriteType`
      if (jsonObj.get("FavoriteType") != null && !jsonObj.get("FavoriteType").isJsonNull()) {
        FavoriteTypeEnum.validateJsonElement(jsonObj.get("FavoriteType"));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      if ((jsonObj.get("SourceType") != null && !jsonObj.get("SourceType").isJsonNull()) && !jsonObj.get("SourceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SourceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SourceType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Tags") != null && !jsonObj.get("Tags").isJsonNull() && !jsonObj.get("Tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Tags` to be an array in the JSON string but got `%s`", jsonObj.get("Tags").toString()));
      }
      if ((jsonObj.get("TimeModified") != null && !jsonObj.get("TimeModified").isJsonNull()) && !jsonObj.get("TimeModified").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TimeModified` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TimeModified").toString()));
      }
      if ((jsonObj.get("UserId") != null && !jsonObj.get("UserId").isJsonNull()) && !jsonObj.get("UserId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `UserId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("UserId").toString()));
      }
      if ((jsonObj.get("Version") != null && !jsonObj.get("Version").isJsonNull()) && !jsonObj.get("Version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationInsightsComponentFavorite.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationInsightsComponentFavorite' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationInsightsComponentFavorite> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationInsightsComponentFavorite.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationInsightsComponentFavorite>() {
           @Override
           public void write(JsonWriter out, ApplicationInsightsComponentFavorite value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationInsightsComponentFavorite read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ApplicationInsightsComponentFavorite given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ApplicationInsightsComponentFavorite
   * @throws IOException if the JSON string is invalid with respect to ApplicationInsightsComponentFavorite
   */
  public static ApplicationInsightsComponentFavorite fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationInsightsComponentFavorite.class);
  }

  /**
   * Convert an instance of ApplicationInsightsComponentFavorite to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

