/*
 * ApplicationInsightsManagementClient
 * Azure Application Insights client for favorites.
 *
 * The version of the OpenAPI document: 2015-05-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ApplicationInsightsComponentFavorite;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for favoritesAdd
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created favorite that is associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesAddCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = favoriteProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "favoriteId" + "}", localVarApiClient.escapeString(favoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesAddValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling favoritesAdd(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling favoritesAdd(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling favoritesAdd(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling favoritesAdd(Async)");
        }

        // verify the required parameter 'favoriteId' is set
        if (favoriteId == null) {
            throw new ApiException("Missing the required parameter 'favoriteId' when calling favoritesAdd(Async)");
        }

        // verify the required parameter 'favoriteProperties' is set
        if (favoriteProperties == null) {
            throw new ApiException("Missing the required parameter 'favoriteProperties' when calling favoritesAdd(Async)");
        }

        return favoritesAddCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties, _callback);

    }

    /**
     * 
     * Adds a new favorites to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component. (required)
     * @return ApplicationInsightsComponentFavorite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created favorite that is associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationInsightsComponentFavorite favoritesAdd(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties) throws ApiException {
        ApiResponse<ApplicationInsightsComponentFavorite> localVarResp = favoritesAddWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties);
        return localVarResp.getData();
    }

    /**
     * 
     * Adds a new favorites to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component. (required)
     * @return ApiResponse&lt;ApplicationInsightsComponentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created favorite that is associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationInsightsComponentFavorite> favoritesAddWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties) throws ApiException {
        okhttp3.Call localVarCall = favoritesAddValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties, null);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentFavorite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Adds a new favorites to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to create a new favorite and add it to an Application Insights component. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The newly created favorite that is associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesAddAsync(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties, final ApiCallback<ApplicationInsightsComponentFavorite> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesAddValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties, _callback);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentFavorite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesDelete
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite has been successfully removed from the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesDeleteCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "favoriteId" + "}", localVarApiClient.escapeString(favoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesDeleteValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling favoritesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling favoritesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling favoritesDelete(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling favoritesDelete(Async)");
        }

        // verify the required parameter 'favoriteId' is set
        if (favoriteId == null) {
            throw new ApiException("Missing the required parameter 'favoriteId' when calling favoritesDelete(Async)");
        }

        return favoritesDeleteCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, _callback);

    }

    /**
     * 
     * Remove a favorite that is associated to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite has been successfully removed from the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public void favoritesDelete(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId) throws ApiException {
        favoritesDeleteWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId);
    }

    /**
     * 
     * Remove a favorite that is associated to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite has been successfully removed from the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> favoritesDeleteWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId) throws ApiException {
        okhttp3.Call localVarCall = favoritesDeleteValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a favorite that is associated to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite has been successfully removed from the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesDeleteAsync(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesDeleteValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesGet
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A favorite definition associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesGetCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "favoriteId" + "}", localVarApiClient.escapeString(favoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesGetValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling favoritesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling favoritesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling favoritesGet(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling favoritesGet(Async)");
        }

        // verify the required parameter 'favoriteId' is set
        if (favoriteId == null) {
            throw new ApiException("Missing the required parameter 'favoriteId' when calling favoritesGet(Async)");
        }

        return favoritesGetCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, _callback);

    }

    /**
     * 
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @return ApplicationInsightsComponentFavorite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A favorite definition associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationInsightsComponentFavorite favoritesGet(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId) throws ApiException {
        ApiResponse<ApplicationInsightsComponentFavorite> localVarResp = favoritesGetWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @return ApiResponse&lt;ApplicationInsightsComponentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A favorite definition associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationInsightsComponentFavorite> favoritesGetWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId) throws ApiException {
        okhttp3.Call localVarCall = favoritesGetValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, null);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentFavorite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get a single favorite by its FavoriteId, defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A favorite definition associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesGetAsync(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, final ApiCallback<ApplicationInsightsComponentFavorite> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesGetValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, _callback);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentFavorite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesList
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteType The type of favorite. Value can be either shared or user. (optional, default to shared)
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to &#39;other&#39; (not present in this enum). (optional)
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites. (optional)
     * @param tags Tags that must be present on each favorite returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more favorite definitions associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesListCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteType, String sourceType, Boolean canFetchContent, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (favoriteType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favoriteType", favoriteType));
        }

        if (sourceType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sourceType", sourceType));
        }

        if (canFetchContent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("canFetchContent", canFetchContent));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesListValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteType, String sourceType, Boolean canFetchContent, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling favoritesList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling favoritesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling favoritesList(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling favoritesList(Async)");
        }

        return favoritesListCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteType, sourceType, canFetchContent, tags, _callback);

    }

    /**
     * 
     * Gets a list of favorites defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteType The type of favorite. Value can be either shared or user. (optional, default to shared)
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to &#39;other&#39; (not present in this enum). (optional)
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites. (optional)
     * @param tags Tags that must be present on each favorite returned. (optional)
     * @return List&lt;ApplicationInsightsComponentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more favorite definitions associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public List<ApplicationInsightsComponentFavorite> favoritesList(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteType, String sourceType, Boolean canFetchContent, List<String> tags) throws ApiException {
        ApiResponse<List<ApplicationInsightsComponentFavorite>> localVarResp = favoritesListWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteType, sourceType, canFetchContent, tags);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a list of favorites defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteType The type of favorite. Value can be either shared or user. (optional, default to shared)
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to &#39;other&#39; (not present in this enum). (optional)
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites. (optional)
     * @param tags Tags that must be present on each favorite returned. (optional)
     * @return ApiResponse&lt;List&lt;ApplicationInsightsComponentFavorite&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more favorite definitions associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApplicationInsightsComponentFavorite>> favoritesListWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteType, String sourceType, Boolean canFetchContent, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = favoritesListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteType, sourceType, canFetchContent, tags, null);
        Type localVarReturnType = new TypeToken<List<ApplicationInsightsComponentFavorite>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a list of favorites defined within an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteType The type of favorite. Value can be either shared or user. (optional, default to shared)
     * @param sourceType Source type of favorite to return. When left out, the source type defaults to &#39;other&#39; (not present in this enum). (optional)
     * @param canFetchContent Flag indicating whether or not to return the full content for each applicable favorite. If false, only return summary content for favorites. (optional)
     * @param tags Tags that must be present on each favorite returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> A list containing 0 or more favorite definitions associated to the Application Insights component. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesListAsync(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteType, String sourceType, Boolean canFetchContent, List<String> tags, final ApiCallback<List<ApplicationInsightsComponentFavorite>> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesListValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteType, sourceType, canFetchContent, tags, _callback);
        Type localVarReturnType = new TypeToken<List<ApplicationInsightsComponentFavorite>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for favoritesUpdate
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to update the existing favorite. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite definition updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesUpdateCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = favoriteProperties;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Insights/components/{resourceName}/favorites/{favoriteId}"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceName" + "}", localVarApiClient.escapeString(resourceName.toString()))
            .replace("{" + "favoriteId" + "}", localVarApiClient.escapeString(favoriteId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call favoritesUpdateValidateBeforeCall(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling favoritesUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling favoritesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling favoritesUpdate(Async)");
        }

        // verify the required parameter 'resourceName' is set
        if (resourceName == null) {
            throw new ApiException("Missing the required parameter 'resourceName' when calling favoritesUpdate(Async)");
        }

        // verify the required parameter 'favoriteId' is set
        if (favoriteId == null) {
            throw new ApiException("Missing the required parameter 'favoriteId' when calling favoritesUpdate(Async)");
        }

        // verify the required parameter 'favoriteProperties' is set
        if (favoriteProperties == null) {
            throw new ApiException("Missing the required parameter 'favoriteProperties' when calling favoritesUpdate(Async)");
        }

        return favoritesUpdateCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties, _callback);

    }

    /**
     * 
     * Updates a favorite that has already been added to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to update the existing favorite. (required)
     * @return ApplicationInsightsComponentFavorite
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite definition updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApplicationInsightsComponentFavorite favoritesUpdate(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties) throws ApiException {
        ApiResponse<ApplicationInsightsComponentFavorite> localVarResp = favoritesUpdateWithHttpInfo(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates a favorite that has already been added to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to update the existing favorite. (required)
     * @return ApiResponse&lt;ApplicationInsightsComponentFavorite&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite definition updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApplicationInsightsComponentFavorite> favoritesUpdateWithHttpInfo(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties) throws ApiException {
        okhttp3.Call localVarCall = favoritesUpdateValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties, null);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentFavorite>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates a favorite that has already been added to an Application Insights component.
     * @param resourceGroupName The name of the resource group. The name is case insensitive. (required)
     * @param apiVersion The API version to use for this operation. (required)
     * @param subscriptionId The ID of the target subscription. (required)
     * @param resourceName The name of the Application Insights component resource. (required)
     * @param favoriteId The Id of a specific favorite defined in the Application Insights component (required)
     * @param favoriteProperties Properties that need to be specified to update the existing favorite. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The favorite definition updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call favoritesUpdateAsync(String resourceGroupName, String apiVersion, String subscriptionId, String resourceName, String favoriteId, ApplicationInsightsComponentFavorite favoriteProperties, final ApiCallback<ApplicationInsightsComponentFavorite> _callback) throws ApiException {

        okhttp3.Call localVarCall = favoritesUpdateValidateBeforeCall(resourceGroupName, apiVersion, subscriptionId, resourceName, favoriteId, favoriteProperties, _callback);
        Type localVarReturnType = new TypeToken<ApplicationInsightsComponentFavorite>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
