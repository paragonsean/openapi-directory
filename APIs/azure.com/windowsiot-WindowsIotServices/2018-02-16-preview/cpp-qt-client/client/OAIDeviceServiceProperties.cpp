/**
 * DeviceServices
 * Use this API to manage the Windows IoT device services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-02-16-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDeviceServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDeviceServiceProperties::OAIDeviceServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDeviceServiceProperties::OAIDeviceServiceProperties() {
    this->initializeModel();
}

OAIDeviceServiceProperties::~OAIDeviceServiceProperties() {}

void OAIDeviceServiceProperties::initializeModel() {

    m_admin_domain_name_isSet = false;
    m_admin_domain_name_isValid = false;

    m_billing_domain_name_isSet = false;
    m_billing_domain_name_isValid = false;

    m_notes_isSet = false;
    m_notes_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIDeviceServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDeviceServiceProperties::fromJsonObject(QJsonObject json) {

    m_admin_domain_name_isValid = ::OpenAPI::fromJsonValue(m_admin_domain_name, json[QString("adminDomainName")]);
    m_admin_domain_name_isSet = !json[QString("adminDomainName")].isNull() && m_admin_domain_name_isValid;

    m_billing_domain_name_isValid = ::OpenAPI::fromJsonValue(m_billing_domain_name, json[QString("billingDomainName")]);
    m_billing_domain_name_isSet = !json[QString("billingDomainName")].isNull() && m_billing_domain_name_isValid;

    m_notes_isValid = ::OpenAPI::fromJsonValue(m_notes, json[QString("notes")]);
    m_notes_isSet = !json[QString("notes")].isNull() && m_notes_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("startDate")]);
    m_start_date_isSet = !json[QString("startDate")].isNull() && m_start_date_isValid;
}

QString OAIDeviceServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDeviceServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_domain_name_isSet) {
        obj.insert(QString("adminDomainName"), ::OpenAPI::toJsonValue(m_admin_domain_name));
    }
    if (m_billing_domain_name_isSet) {
        obj.insert(QString("billingDomainName"), ::OpenAPI::toJsonValue(m_billing_domain_name));
    }
    if (m_notes_isSet) {
        obj.insert(QString("notes"), ::OpenAPI::toJsonValue(m_notes));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("startDate"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIDeviceServiceProperties::getAdminDomainName() const {
    return m_admin_domain_name;
}
void OAIDeviceServiceProperties::setAdminDomainName(const QString &admin_domain_name) {
    m_admin_domain_name = admin_domain_name;
    m_admin_domain_name_isSet = true;
}

bool OAIDeviceServiceProperties::is_admin_domain_name_Set() const{
    return m_admin_domain_name_isSet;
}

bool OAIDeviceServiceProperties::is_admin_domain_name_Valid() const{
    return m_admin_domain_name_isValid;
}

QString OAIDeviceServiceProperties::getBillingDomainName() const {
    return m_billing_domain_name;
}
void OAIDeviceServiceProperties::setBillingDomainName(const QString &billing_domain_name) {
    m_billing_domain_name = billing_domain_name;
    m_billing_domain_name_isSet = true;
}

bool OAIDeviceServiceProperties::is_billing_domain_name_Set() const{
    return m_billing_domain_name_isSet;
}

bool OAIDeviceServiceProperties::is_billing_domain_name_Valid() const{
    return m_billing_domain_name_isValid;
}

QString OAIDeviceServiceProperties::getNotes() const {
    return m_notes;
}
void OAIDeviceServiceProperties::setNotes(const QString &notes) {
    m_notes = notes;
    m_notes_isSet = true;
}

bool OAIDeviceServiceProperties::is_notes_Set() const{
    return m_notes_isSet;
}

bool OAIDeviceServiceProperties::is_notes_Valid() const{
    return m_notes_isValid;
}

qint64 OAIDeviceServiceProperties::getQuantity() const {
    return m_quantity;
}
void OAIDeviceServiceProperties::setQuantity(const qint64 &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIDeviceServiceProperties::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIDeviceServiceProperties::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QDateTime OAIDeviceServiceProperties::getStartDate() const {
    return m_start_date;
}
void OAIDeviceServiceProperties::setStartDate(const QDateTime &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIDeviceServiceProperties::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIDeviceServiceProperties::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIDeviceServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_domain_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_notes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDeviceServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
