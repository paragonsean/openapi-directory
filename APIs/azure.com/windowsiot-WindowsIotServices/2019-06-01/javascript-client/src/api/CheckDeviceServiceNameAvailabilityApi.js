/**
 * DeviceServices
 * Use this API to manage the Windows IoT device services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DeviceServiceCheckNameAvailabilityParameters from '../model/DeviceServiceCheckNameAvailabilityParameters';
import DeviceServiceNameAvailabilityInfo from '../model/DeviceServiceNameAvailabilityInfo';
import ErrorDetails from '../model/ErrorDetails';

/**
* CheckDeviceServiceNameAvailability service.
* @module api/CheckDeviceServiceNameAvailabilityApi
* @version 2019-06-01
*/
export default class CheckDeviceServiceNameAvailabilityApi {

    /**
    * Constructs a new CheckDeviceServiceNameAvailabilityApi. 
    * @alias module:api/CheckDeviceServiceNameAvailabilityApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the servicesCheckDeviceServiceNameAvailability operation.
     * @callback module:api/CheckDeviceServiceNameAvailabilityApi~servicesCheckDeviceServiceNameAvailabilityCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceServiceNameAvailabilityInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check if a Windows IoT Device Service name is available.
     * @param {String} apiVersion The version of the API.
     * @param {String} subscriptionId The subscription identifier.
     * @param {module:model/DeviceServiceCheckNameAvailabilityParameters} deviceServiceCheckNameAvailabilityParameters Set the name parameter in the DeviceServiceCheckNameAvailabilityParameters structure to the name of the Windows IoT Device Service to check.
     * @param {module:api/CheckDeviceServiceNameAvailabilityApi~servicesCheckDeviceServiceNameAvailabilityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceServiceNameAvailabilityInfo}
     */
    servicesCheckDeviceServiceNameAvailability(apiVersion, subscriptionId, deviceServiceCheckNameAvailabilityParameters, callback) {
      let postBody = deviceServiceCheckNameAvailabilityParameters;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling servicesCheckDeviceServiceNameAvailability");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling servicesCheckDeviceServiceNameAvailability");
      }
      // verify the required parameter 'deviceServiceCheckNameAvailabilityParameters' is set
      if (deviceServiceCheckNameAvailabilityParameters === undefined || deviceServiceCheckNameAvailabilityParameters === null) {
        throw new Error("Missing the required parameter 'deviceServiceCheckNameAvailabilityParameters' when calling servicesCheckDeviceServiceNameAvailability");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DeviceServiceNameAvailabilityInfo;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/checkDeviceServiceNameAvailability', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
