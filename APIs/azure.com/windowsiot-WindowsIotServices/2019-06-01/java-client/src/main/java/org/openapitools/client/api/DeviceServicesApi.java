/*
 * DeviceServices
 * Use this API to manage the Windows IoT device services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DeviceService;
import org.openapitools.client.model.DeviceServiceDescriptionListResult;
import org.openapitools.client.model.DeviceServiceProperties;
import org.openapitools.client.model.ErrorDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DeviceServicesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DeviceServicesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DeviceServicesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for servicesCreateOrUpdate
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateOrUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceService;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesCreateOrUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling servicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling servicesCreateOrUpdate(Async)");
        }

        // verify the required parameter 'deviceService' is set
        if (deviceService == null) {
            throw new ApiException("Missing the required parameter 'deviceService' when calling servicesCreateOrUpdate(Async)");
        }

        return servicesCreateOrUpdateCall(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch, _callback);

    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @return DeviceService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public DeviceService servicesCreateOrUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) throws ApiException {
        ApiResponse<DeviceService> localVarResp = servicesCreateOrUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service.
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @return ApiResponse&lt;DeviceService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceService> servicesCreateOrUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = servicesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch, null);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create or update the metadata of a Windows IoT Device Service. (asynchronously)
     * Create or update the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesCreateOrUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ApiCallback<DeviceService> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesCreateOrUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesDelete
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDeleteCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesDeleteValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling servicesDelete(Async)");
        }

        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling servicesDelete(Async)");
        }

        return servicesDeleteCall(apiVersion, subscriptionId, resourceGroupName, deviceName, _callback);

    }

    /**
     * 
     * Delete a Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @return DeviceService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public DeviceService servicesDelete(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName) throws ApiException {
        ApiResponse<DeviceService> localVarResp = servicesDeleteWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, deviceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Delete a Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @return ApiResponse&lt;DeviceService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceService> servicesDeleteWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName) throws ApiException {
        okhttp3.Call localVarCall = servicesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, null);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Delete a Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesDeleteAsync(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, final ApiCallback<DeviceService> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesDeleteValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, _callback);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesGet
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesGetValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling servicesGet(Async)");
        }

        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling servicesGet(Async)");
        }

        return servicesGetCall(apiVersion, subscriptionId, resourceGroupName, deviceName, _callback);

    }

    /**
     * 
     * Get the non-security related metadata of a Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @return DeviceService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public DeviceService servicesGet(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName) throws ApiException {
        ApiResponse<DeviceService> localVarResp = servicesGetWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, deviceName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the non-security related metadata of a Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @return ApiResponse&lt;DeviceService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceService> servicesGetWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName) throws ApiException {
        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, null);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the non-security related metadata of a Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesGetAsync(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, final ApiCallback<DeviceService> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesGetValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, _callback);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesList
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.WindowsIoT/deviceServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListValidateBeforeCall(String apiVersion, String subscriptionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesList(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesList(Async)");
        }

        return servicesListCall(apiVersion, subscriptionId, _callback);

    }

    /**
     * 
     * Get all the IoT hubs in a subscription.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @return DeviceServiceDescriptionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public DeviceServiceDescriptionListResult servicesList(String apiVersion, String subscriptionId) throws ApiException {
        ApiResponse<DeviceServiceDescriptionListResult> localVarResp = servicesListWithHttpInfo(apiVersion, subscriptionId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the IoT hubs in a subscription.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @return ApiResponse&lt;DeviceServiceDescriptionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceServiceDescriptionListResult> servicesListWithHttpInfo(String apiVersion, String subscriptionId) throws ApiException {
        okhttp3.Call localVarCall = servicesListValidateBeforeCall(apiVersion, subscriptionId, null);
        Type localVarReturnType = new TypeToken<DeviceServiceDescriptionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the IoT hubs in a subscription.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListAsync(String apiVersion, String subscriptionId, final ApiCallback<DeviceServiceDescriptionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListValidateBeforeCall(apiVersion, subscriptionId, _callback);
        Type localVarReturnType = new TypeToken<DeviceServiceDescriptionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesListByResourceGroup
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListByResourceGroupCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesListByResourceGroupValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesListByResourceGroup(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling servicesListByResourceGroup(Async)");
        }

        return servicesListByResourceGroupCall(apiVersion, subscriptionId, resourceGroupName, _callback);

    }

    /**
     * 
     * Get all the IoT hubs in a resource group.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @return DeviceServiceDescriptionListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public DeviceServiceDescriptionListResult servicesListByResourceGroup(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        ApiResponse<DeviceServiceDescriptionListResult> localVarResp = servicesListByResourceGroupWithHttpInfo(apiVersion, subscriptionId, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get all the IoT hubs in a resource group.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @return ApiResponse&lt;DeviceServiceDescriptionListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceServiceDescriptionListResult> servicesListByResourceGroupWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = servicesListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<DeviceServiceDescriptionListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get all the IoT hubs in a resource group.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesListByResourceGroupAsync(String apiVersion, String subscriptionId, String resourceGroupName, final ApiCallback<DeviceServiceDescriptionListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesListByResourceGroupValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<DeviceServiceDescriptionListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for servicesUpdate
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = deviceService;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.WindowsIoT/deviceServices/{deviceName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "deviceName" + "}", localVarApiClient.escapeString(deviceName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call servicesUpdateValidateBeforeCall(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'deviceName' is set
        if (deviceName == null) {
            throw new ApiException("Missing the required parameter 'deviceName' when calling servicesUpdate(Async)");
        }

        // verify the required parameter 'deviceService' is set
        if (deviceService == null) {
            throw new ApiException("Missing the required parameter 'deviceService' when calling servicesUpdate(Async)");
        }

        return servicesUpdateCall(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch, _callback);

    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @return DeviceService
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public DeviceService servicesUpdate(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) throws ApiException {
        ApiResponse<DeviceService> localVarResp = servicesUpdateWithHttpInfo(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch);
        return localVarResp.getData();
    }

    /**
     * Updates the metadata of a Windows IoT Device Service.
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @return ApiResponse&lt;DeviceService&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeviceService> servicesUpdateWithHttpInfo(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = servicesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch, null);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Updates the metadata of a Windows IoT Device Service. (asynchronously)
     * Updates the metadata of a Windows IoT Device Service. The usual pattern to modify a property is to retrieve the Windows IoT Device Service metadata and security metadata, and then combine them with the modified values in a new body to update the Windows IoT Device Service.
     * @param apiVersion The version of the API. (required)
     * @param subscriptionId The subscription identifier. (required)
     * @param resourceGroupName The name of the resource group that contains the Windows IoT Device Service. (required)
     * @param deviceName The name of the Windows IoT Device Service. (required)
     * @param deviceService The Windows IoT Device Service metadata and security metadata. (required)
     * @param ifMatch ETag of the Windows IoT Device Service. Do not specify for creating a brand new Windows IoT Device Service. Required to update an existing Windows IoT Device Service. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK. The request has succeeded. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> DefaultErrorResponse </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call servicesUpdateAsync(String apiVersion, String subscriptionId, String resourceGroupName, String deviceName, DeviceServiceProperties deviceService, String ifMatch, final ApiCallback<DeviceService> _callback) throws ApiException {

        okhttp3.Call localVarCall = servicesUpdateValidateBeforeCall(apiVersion, subscriptionId, resourceGroupName, deviceName, deviceService, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<DeviceService>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
