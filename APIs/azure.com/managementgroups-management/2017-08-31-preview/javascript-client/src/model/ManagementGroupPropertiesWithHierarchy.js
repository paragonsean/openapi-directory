/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 
 *
 * The version of the OpenAPI document: 2017-08-31-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagementGroupDetailsProperties from './ManagementGroupDetailsProperties';
import ManagementGroupRecursiveChildInfo from './ManagementGroupRecursiveChildInfo';

/**
 * The ManagementGroupPropertiesWithHierarchy model module.
 * @module model/ManagementGroupPropertiesWithHierarchy
 * @version 2017-08-31-preview
 */
class ManagementGroupPropertiesWithHierarchy {
    /**
     * Constructs a new <code>ManagementGroupPropertiesWithHierarchy</code>.
     * The generic properties of a management group.
     * @alias module:model/ManagementGroupPropertiesWithHierarchy
     */
    constructor() { 
        
        ManagementGroupPropertiesWithHierarchy.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagementGroupPropertiesWithHierarchy</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagementGroupPropertiesWithHierarchy} obj Optional instance to populate.
     * @return {module:model/ManagementGroupPropertiesWithHierarchy} The populated <code>ManagementGroupPropertiesWithHierarchy</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagementGroupPropertiesWithHierarchy();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [ManagementGroupRecursiveChildInfo]);
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = ManagementGroupDetailsProperties.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagementGroupPropertiesWithHierarchy</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagementGroupPropertiesWithHierarchy</code>.
     */
    static validateJSON(data) {
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                ManagementGroupRecursiveChildInfo.validateJSON(item);
            };
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          ManagementGroupDetailsProperties.validateJSON(data['details']);
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * The list of children.
 * @member {Array.<module:model/ManagementGroupRecursiveChildInfo>} children
 */
ManagementGroupPropertiesWithHierarchy.prototype['children'] = undefined;

/**
 * @member {module:model/ManagementGroupDetailsProperties} details
 */
ManagementGroupPropertiesWithHierarchy.prototype['details'] = undefined;

/**
 * The friendly name of the management group.
 * @member {String} displayName
 */
ManagementGroupPropertiesWithHierarchy.prototype['displayName'] = undefined;

/**
 * The AAD Tenant ID associated with the management group. E.g. 10000000-0000-0000-0000-000000000000
 * @member {String} tenantId
 */
ManagementGroupPropertiesWithHierarchy.prototype['tenantId'] = undefined;






export default ManagementGroupPropertiesWithHierarchy;

