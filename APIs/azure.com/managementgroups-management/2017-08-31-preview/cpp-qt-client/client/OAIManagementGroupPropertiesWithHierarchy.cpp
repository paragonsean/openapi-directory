/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 
 *
 * The version of the OpenAPI document: 2017-08-31-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementGroupPropertiesWithHierarchy.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementGroupPropertiesWithHierarchy::OAIManagementGroupPropertiesWithHierarchy(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementGroupPropertiesWithHierarchy::OAIManagementGroupPropertiesWithHierarchy() {
    this->initializeModel();
}

OAIManagementGroupPropertiesWithHierarchy::~OAIManagementGroupPropertiesWithHierarchy() {}

void OAIManagementGroupPropertiesWithHierarchy::initializeModel() {

    m_children_isSet = false;
    m_children_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIManagementGroupPropertiesWithHierarchy::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementGroupPropertiesWithHierarchy::fromJsonObject(QJsonObject json) {

    m_children_isValid = ::OpenAPI::fromJsonValue(m_children, json[QString("children")]);
    m_children_isSet = !json[QString("children")].isNull() && m_children_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIManagementGroupPropertiesWithHierarchy::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementGroupPropertiesWithHierarchy::asJsonObject() const {
    QJsonObject obj;
    if (m_children.size() > 0) {
        obj.insert(QString("children"), ::OpenAPI::toJsonValue(m_children));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QList<OAIManagementGroupRecursiveChildInfo> OAIManagementGroupPropertiesWithHierarchy::getChildren() const {
    return m_children;
}
void OAIManagementGroupPropertiesWithHierarchy::setChildren(const QList<OAIManagementGroupRecursiveChildInfo> &children) {
    m_children = children;
    m_children_isSet = true;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_children_Set() const{
    return m_children_isSet;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_children_Valid() const{
    return m_children_isValid;
}

OAIManagementGroupDetailsProperties OAIManagementGroupPropertiesWithHierarchy::getDetails() const {
    return m_details;
}
void OAIManagementGroupPropertiesWithHierarchy::setDetails(const OAIManagementGroupDetailsProperties &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_details_Set() const{
    return m_details_isSet;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIManagementGroupPropertiesWithHierarchy::getDisplayName() const {
    return m_display_name;
}
void OAIManagementGroupPropertiesWithHierarchy::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIManagementGroupPropertiesWithHierarchy::getTenantId() const {
    return m_tenant_id;
}
void OAIManagementGroupPropertiesWithHierarchy::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIManagementGroupPropertiesWithHierarchy::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIManagementGroupPropertiesWithHierarchy::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_children.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementGroupPropertiesWithHierarchy::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
