/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 
 *
 * The version of the OpenAPI document: 2017-08-31-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementGroupChildInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementGroupChildInfo::OAIManagementGroupChildInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementGroupChildInfo::OAIManagementGroupChildInfo() {
    this->initializeModel();
}

OAIManagementGroupChildInfo::~OAIManagementGroupChildInfo() {}

void OAIManagementGroupChildInfo::initializeModel() {

    m_child_id_isSet = false;
    m_child_id_isValid = false;

    m_child_type_isSet = false;
    m_child_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIManagementGroupChildInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementGroupChildInfo::fromJsonObject(QJsonObject json) {

    m_child_id_isValid = ::OpenAPI::fromJsonValue(m_child_id, json[QString("childId")]);
    m_child_id_isSet = !json[QString("childId")].isNull() && m_child_id_isValid;

    m_child_type_isValid = ::OpenAPI::fromJsonValue(m_child_type, json[QString("childType")]);
    m_child_type_isSet = !json[QString("childType")].isNull() && m_child_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIManagementGroupChildInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementGroupChildInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_child_id_isSet) {
        obj.insert(QString("childId"), ::OpenAPI::toJsonValue(m_child_id));
    }
    if (m_child_type.isSet()) {
        obj.insert(QString("childType"), ::OpenAPI::toJsonValue(m_child_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIManagementGroupChildInfo::getChildId() const {
    return m_child_id;
}
void OAIManagementGroupChildInfo::setChildId(const QString &child_id) {
    m_child_id = child_id;
    m_child_id_isSet = true;
}

bool OAIManagementGroupChildInfo::is_child_id_Set() const{
    return m_child_id_isSet;
}

bool OAIManagementGroupChildInfo::is_child_id_Valid() const{
    return m_child_id_isValid;
}

OAIManagementGroupType OAIManagementGroupChildInfo::getChildType() const {
    return m_child_type;
}
void OAIManagementGroupChildInfo::setChildType(const OAIManagementGroupType &child_type) {
    m_child_type = child_type;
    m_child_type_isSet = true;
}

bool OAIManagementGroupChildInfo::is_child_type_Set() const{
    return m_child_type_isSet;
}

bool OAIManagementGroupChildInfo::is_child_type_Valid() const{
    return m_child_type_isValid;
}

QString OAIManagementGroupChildInfo::getDisplayName() const {
    return m_display_name;
}
void OAIManagementGroupChildInfo::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIManagementGroupChildInfo::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIManagementGroupChildInfo::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIManagementGroupChildInfo::getTenantId() const {
    return m_tenant_id;
}
void OAIManagementGroupChildInfo::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIManagementGroupChildInfo::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIManagementGroupChildInfo::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIManagementGroupChildInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_child_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_child_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementGroupChildInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
