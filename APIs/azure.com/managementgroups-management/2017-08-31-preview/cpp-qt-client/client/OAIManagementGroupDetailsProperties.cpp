/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 
 *
 * The version of the OpenAPI document: 2017-08-31-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIManagementGroupDetailsProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIManagementGroupDetailsProperties::OAIManagementGroupDetailsProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIManagementGroupDetailsProperties::OAIManagementGroupDetailsProperties() {
    this->initializeModel();
}

OAIManagementGroupDetailsProperties::~OAIManagementGroupDetailsProperties() {}

void OAIManagementGroupDetailsProperties::initializeModel() {

    m_management_group_type_isSet = false;
    m_management_group_type_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_updated_by_isSet = false;
    m_updated_by_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAIManagementGroupDetailsProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIManagementGroupDetailsProperties::fromJsonObject(QJsonObject json) {

    m_management_group_type_isValid = ::OpenAPI::fromJsonValue(m_management_group_type, json[QString("managementGroupType")]);
    m_management_group_type_isSet = !json[QString("managementGroupType")].isNull() && m_management_group_type_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_updated_by_isValid = ::OpenAPI::fromJsonValue(m_updated_by, json[QString("updatedBy")]);
    m_updated_by_isSet = !json[QString("updatedBy")].isNull() && m_updated_by_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updatedTime")]);
    m_updated_time_isSet = !json[QString("updatedTime")].isNull() && m_updated_time_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAIManagementGroupDetailsProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIManagementGroupDetailsProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_management_group_type.isSet()) {
        obj.insert(QString("managementGroupType"), ::OpenAPI::toJsonValue(m_management_group_type));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_updated_by_isSet) {
        obj.insert(QString("updatedBy"), ::OpenAPI::toJsonValue(m_updated_by));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updatedTime"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

OAIManagementGroupType OAIManagementGroupDetailsProperties::getManagementGroupType() const {
    return m_management_group_type;
}
void OAIManagementGroupDetailsProperties::setManagementGroupType(const OAIManagementGroupType &management_group_type) {
    m_management_group_type = management_group_type;
    m_management_group_type_isSet = true;
}

bool OAIManagementGroupDetailsProperties::is_management_group_type_Set() const{
    return m_management_group_type_isSet;
}

bool OAIManagementGroupDetailsProperties::is_management_group_type_Valid() const{
    return m_management_group_type_isValid;
}

OAIParentGroupInfo OAIManagementGroupDetailsProperties::getParent() const {
    return m_parent;
}
void OAIManagementGroupDetailsProperties::setParent(const OAIParentGroupInfo &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIManagementGroupDetailsProperties::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIManagementGroupDetailsProperties::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIManagementGroupDetailsProperties::getUpdatedBy() const {
    return m_updated_by;
}
void OAIManagementGroupDetailsProperties::setUpdatedBy(const QString &updated_by) {
    m_updated_by = updated_by;
    m_updated_by_isSet = true;
}

bool OAIManagementGroupDetailsProperties::is_updated_by_Set() const{
    return m_updated_by_isSet;
}

bool OAIManagementGroupDetailsProperties::is_updated_by_Valid() const{
    return m_updated_by_isValid;
}

QDateTime OAIManagementGroupDetailsProperties::getUpdatedTime() const {
    return m_updated_time;
}
void OAIManagementGroupDetailsProperties::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIManagementGroupDetailsProperties::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIManagementGroupDetailsProperties::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

double OAIManagementGroupDetailsProperties::getVersion() const {
    return m_version;
}
void OAIManagementGroupDetailsProperties::setVersion(const double &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAIManagementGroupDetailsProperties::is_version_Set() const{
    return m_version_isSet;
}

bool OAIManagementGroupDetailsProperties::is_version_Valid() const{
    return m_version_isValid;
}

bool OAIManagementGroupDetailsProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_management_group_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIManagementGroupDetailsProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
