/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple  subscriptions/resources into an organizational hierarchy and centrally  manage access control, policies, alerting and reporting for those resources. 
 *
 * The version of the OpenAPI document: 2018-01-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEntityInfoProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEntityInfoProperties::OAIEntityInfoProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEntityInfoProperties::OAIEntityInfoProperties() {
    this->initializeModel();
}

OAIEntityInfoProperties::~OAIEntityInfoProperties() {}

void OAIEntityInfoProperties::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_permissions_isSet = false;
    m_permissions_isValid = false;

    m_tenant_id_isSet = false;
    m_tenant_id_isValid = false;
}

void OAIEntityInfoProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEntityInfoProperties::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_permissions_isValid = ::OpenAPI::fromJsonValue(m_permissions, json[QString("permissions")]);
    m_permissions_isSet = !json[QString("permissions")].isNull() && m_permissions_isValid;

    m_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_tenant_id, json[QString("tenantId")]);
    m_tenant_id_isSet = !json[QString("tenantId")].isNull() && m_tenant_id_isValid;
}

QString OAIEntityInfoProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEntityInfoProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_parent.isSet()) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_permissions.isSet()) {
        obj.insert(QString("permissions"), ::OpenAPI::toJsonValue(m_permissions));
    }
    if (m_tenant_id_isSet) {
        obj.insert(QString("tenantId"), ::OpenAPI::toJsonValue(m_tenant_id));
    }
    return obj;
}

QString OAIEntityInfoProperties::getDisplayName() const {
    return m_display_name;
}
void OAIEntityInfoProperties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIEntityInfoProperties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIEntityInfoProperties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

OAIEntityParentGroupInfo OAIEntityInfoProperties::getParent() const {
    return m_parent;
}
void OAIEntityInfoProperties::setParent(const OAIEntityParentGroupInfo &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIEntityInfoProperties::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIEntityInfoProperties::is_parent_Valid() const{
    return m_parent_isValid;
}

OAIPermissions OAIEntityInfoProperties::getPermissions() const {
    return m_permissions;
}
void OAIEntityInfoProperties::setPermissions(const OAIPermissions &permissions) {
    m_permissions = permissions;
    m_permissions_isSet = true;
}

bool OAIEntityInfoProperties::is_permissions_Set() const{
    return m_permissions_isSet;
}

bool OAIEntityInfoProperties::is_permissions_Valid() const{
    return m_permissions_isValid;
}

QString OAIEntityInfoProperties::getTenantId() const {
    return m_tenant_id;
}
void OAIEntityInfoProperties::setTenantId(const QString &tenant_id) {
    m_tenant_id = tenant_id;
    m_tenant_id_isSet = true;
}

bool OAIEntityInfoProperties::is_tenant_id_Set() const{
    return m_tenant_id_isSet;
}

bool OAIEntityInfoProperties::is_tenant_id_Valid() const{
    return m_tenant_id_isValid;
}

bool OAIEntityInfoProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_permissions.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEntityInfoProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
