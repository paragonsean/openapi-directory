/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateManagementGroupRequest from '../model/CreateManagementGroupRequest';
import ErrorResponse from '../model/ErrorResponse';
import ManagementGroup from '../model/ManagementGroup';
import ManagementGroupListResult from '../model/ManagementGroupListResult';
import OperationResults from '../model/OperationResults';
import PatchManagementGroupRequest from '../model/PatchManagementGroupRequest';

/**
* ManagementGroups service.
* @module api/ManagementGroupsApi
* @version 2018-03-01-preview
*/
export default class ManagementGroupsApi {

    /**
    * Constructs a new ManagementGroupsApi. 
    * @alias module:api/ManagementGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the managementGroupSubscriptionsCreate operation.
     * @callback module:api/ManagementGroupsApi~managementGroupSubscriptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Associates existing subscription with the management group.
     * @param {String} groupId Management Group ID.
     * @param {String} subscriptionId Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {Object} opts Optional parameters
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {module:api/ManagementGroupsApi~managementGroupSubscriptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementGroupSubscriptionsCreate(groupId, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling managementGroupSubscriptionsCreate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementGroupSubscriptionsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupSubscriptionsCreate");
      }

      let pathParams = {
        'groupId': groupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementGroupSubscriptionsDelete operation.
     * @callback module:api/ManagementGroupsApi~managementGroupSubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * De-associates subscription from the management group.
     * @param {String} groupId Management Group ID.
     * @param {String} subscriptionId Subscription ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {Object} opts Optional parameters
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {module:api/ManagementGroupsApi~managementGroupSubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    managementGroupSubscriptionsDelete(groupId, subscriptionId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling managementGroupSubscriptionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling managementGroupSubscriptionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupSubscriptionsDelete");
      }

      let pathParams = {
        'groupId': groupId,
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}/subscriptions/{subscriptionId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementGroupsCreateOrUpdate operation.
     * @callback module:api/ManagementGroupsApi~managementGroupsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create or update a management group. If a management group is already created and a subsequent create request is issued with different properties, the management group properties will be updated.
     * @param {String} groupId Management Group ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {module:model/CreateManagementGroupRequest} createManagementGroupRequest Management group creation parameters.
     * @param {Object} opts Optional parameters
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {module:api/ManagementGroupsApi~managementGroupsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementGroup}
     */
    managementGroupsCreateOrUpdate(groupId, apiVersion, createManagementGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = createManagementGroupRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling managementGroupsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupsCreateOrUpdate");
      }
      // verify the required parameter 'createManagementGroupRequest' is set
      if (createManagementGroupRequest === undefined || createManagementGroupRequest === null) {
        throw new Error("Missing the required parameter 'createManagementGroupRequest' when calling managementGroupsCreateOrUpdate");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementGroup;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementGroupsDelete operation.
     * @callback module:api/ManagementGroupsApi~managementGroupsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete management group. If a management group contains child resources, the request will fail.
     * @param {String} groupId Management Group ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {Object} opts Optional parameters
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {module:api/ManagementGroupsApi~managementGroupsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResults}
     */
    managementGroupsDelete(groupId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling managementGroupsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupsDelete");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResults;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementGroupsGet operation.
     * @callback module:api/ManagementGroupsApi~managementGroupsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of the management group.
     * @param {String} groupId Management Group ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [expand] The $expand=children query string parameter allows clients to request inclusion of children in the response payload.
     * @param {Boolean} [recurse] The $recurse=true query string parameter allows clients to request inclusion of entire hierarchy in the response payload. Note that  $expand=children must be passed up if $recurse is set to true.
     * @param {String} [filter] A filter which allows the exclusion of subscriptions from results (i.e. '$filter=children.childType ne Subscription')
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {module:api/ManagementGroupsApi~managementGroupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementGroup}
     */
    managementGroupsGet(groupId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling managementGroupsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupsGet");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand'],
        '$recurse': opts['recurse'],
        '$filter': opts['filter']
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementGroup;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementGroupsList operation.
     * @callback module:api/ManagementGroupsApi~managementGroupsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementGroupListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List management groups for the authenticated user.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {Object} opts Optional parameters
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {String} [skiptoken] Page continuation token is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a token parameter that specifies a starting point to use for subsequent calls.
     * @param {module:api/ManagementGroupsApi~managementGroupsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementGroupListResult}
     */
    managementGroupsList(apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupsList");
      }

      let pathParams = {
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skiptoken': opts['skiptoken']
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ManagementGroupListResult;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the managementGroupsUpdate operation.
     * @callback module:api/ManagementGroupsApi~managementGroupsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ManagementGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a management group.
     * @param {String} groupId Management Group ID.
     * @param {String} apiVersion Version of the API to be used with the client request. The current version is 2018-01-01-preview.
     * @param {module:model/PatchManagementGroupRequest} patchGroupRequest Management group patch parameters.
     * @param {Object} opts Optional parameters
     * @param {String} [cacheControl = 'no-cache')] Indicates that the request shouldn't utilize any caches.
     * @param {module:api/ManagementGroupsApi~managementGroupsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ManagementGroup}
     */
    managementGroupsUpdate(groupId, apiVersion, patchGroupRequest, opts, callback) {
      opts = opts || {};
      let postBody = patchGroupRequest;
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling managementGroupsUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling managementGroupsUpdate");
      }
      // verify the required parameter 'patchGroupRequest' is set
      if (patchGroupRequest === undefined || patchGroupRequest === null) {
        throw new Error("Missing the required parameter 'patchGroupRequest' when calling managementGroupsUpdate");
      }

      let pathParams = {
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'Cache-Control': opts['cacheControl']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ManagementGroup;
      return this.apiClient.callApi(
        '/providers/Microsoft.Management/managementGroups/{groupId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
