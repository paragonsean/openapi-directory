/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EntityParentGroupInfo from './EntityParentGroupInfo';
import Permissions from './Permissions';

/**
 * The EntityInfoProperties model module.
 * @module model/EntityInfoProperties
 * @version 2018-03-01-preview
 */
class EntityInfoProperties {
    /**
     * Constructs a new <code>EntityInfoProperties</code>.
     * The generic properties of an entity.
     * @alias module:model/EntityInfoProperties
     */
    constructor() { 
        
        EntityInfoProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EntityInfoProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntityInfoProperties} obj Optional instance to populate.
     * @return {module:model/EntityInfoProperties} The populated <code>EntityInfoProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntityInfoProperties();

            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('inheritedPermissions')) {
                obj['inheritedPermissions'] = Permissions.constructFromObject(data['inheritedPermissions']);
            }
            if (data.hasOwnProperty('numberOfChildGroups')) {
                obj['numberOfChildGroups'] = ApiClient.convertToType(data['numberOfChildGroups'], 'Number');
            }
            if (data.hasOwnProperty('numberOfChildren')) {
                obj['numberOfChildren'] = ApiClient.convertToType(data['numberOfChildren'], 'Number');
            }
            if (data.hasOwnProperty('numberOfDescendants')) {
                obj['numberOfDescendants'] = ApiClient.convertToType(data['numberOfDescendants'], 'Number');
            }
            if (data.hasOwnProperty('parent')) {
                obj['parent'] = EntityParentGroupInfo.constructFromObject(data['parent']);
            }
            if (data.hasOwnProperty('parentDisplayNameChain')) {
                obj['parentDisplayNameChain'] = ApiClient.convertToType(data['parentDisplayNameChain'], ['String']);
            }
            if (data.hasOwnProperty('parentNameChain')) {
                obj['parentNameChain'] = ApiClient.convertToType(data['parentNameChain'], ['String']);
            }
            if (data.hasOwnProperty('permissions')) {
                obj['permissions'] = Permissions.constructFromObject(data['permissions']);
            }
            if (data.hasOwnProperty('tenantId')) {
                obj['tenantId'] = ApiClient.convertToType(data['tenantId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntityInfoProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntityInfoProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // validate the optional field `parent`
        if (data['parent']) { // data not null
          EntityParentGroupInfo.validateJSON(data['parent']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentDisplayNameChain'])) {
            throw new Error("Expected the field `parentDisplayNameChain` to be an array in the JSON data but got " + data['parentDisplayNameChain']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parentNameChain'])) {
            throw new Error("Expected the field `parentNameChain` to be an array in the JSON data but got " + data['parentNameChain']);
        }
        // ensure the json data is a string
        if (data['tenantId'] && !(typeof data['tenantId'] === 'string' || data['tenantId'] instanceof String)) {
            throw new Error("Expected the field `tenantId` to be a primitive type in the JSON string but got " + data['tenantId']);
        }

        return true;
    }


}



/**
 * The friendly name of the management group.
 * @member {String} displayName
 */
EntityInfoProperties.prototype['displayName'] = undefined;

/**
 * @member {module:model/Permissions} inheritedPermissions
 */
EntityInfoProperties.prototype['inheritedPermissions'] = undefined;

/**
 * Number of child groups is the number of Groups that are exactly one level underneath the current Group.
 * @member {Number} numberOfChildGroups
 */
EntityInfoProperties.prototype['numberOfChildGroups'] = undefined;

/**
 * Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
 * @member {Number} numberOfChildren
 */
EntityInfoProperties.prototype['numberOfChildren'] = undefined;

/**
 * @member {Number} numberOfDescendants
 */
EntityInfoProperties.prototype['numberOfDescendants'] = undefined;

/**
 * @member {module:model/EntityParentGroupInfo} parent
 */
EntityInfoProperties.prototype['parent'] = undefined;

/**
 * The parent display name chain from the root group to the immediate parent
 * @member {Array.<String>} parentDisplayNameChain
 */
EntityInfoProperties.prototype['parentDisplayNameChain'] = undefined;

/**
 * The parent name chain from the root group to the immediate parent
 * @member {Array.<String>} parentNameChain
 */
EntityInfoProperties.prototype['parentNameChain'] = undefined;

/**
 * @member {module:model/Permissions} permissions
 */
EntityInfoProperties.prototype['permissions'] = undefined;

/**
 * The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
 * @member {String} tenantId
 */
EntityInfoProperties.prototype['tenantId'] = undefined;






export default EntityInfoProperties;

