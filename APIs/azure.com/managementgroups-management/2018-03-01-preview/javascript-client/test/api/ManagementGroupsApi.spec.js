/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ManagementGroups);
  }
}(this, function(expect, ManagementGroups) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ManagementGroups.ManagementGroupsApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ManagementGroupsApi', function() {
    describe('managementGroupSubscriptionsCreate', function() {
      it('should call managementGroupSubscriptionsCreate successfully', function(done) {
        //uncomment below and update the code to test managementGroupSubscriptionsCreate
        //instance.managementGroupSubscriptionsCreate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementGroupSubscriptionsDelete', function() {
      it('should call managementGroupSubscriptionsDelete successfully', function(done) {
        //uncomment below and update the code to test managementGroupSubscriptionsDelete
        //instance.managementGroupSubscriptionsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementGroupsCreateOrUpdate', function() {
      it('should call managementGroupsCreateOrUpdate successfully', function(done) {
        //uncomment below and update the code to test managementGroupsCreateOrUpdate
        //instance.managementGroupsCreateOrUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementGroupsDelete', function() {
      it('should call managementGroupsDelete successfully', function(done) {
        //uncomment below and update the code to test managementGroupsDelete
        //instance.managementGroupsDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementGroupsGet', function() {
      it('should call managementGroupsGet successfully', function(done) {
        //uncomment below and update the code to test managementGroupsGet
        //instance.managementGroupsGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementGroupsList', function() {
      it('should call managementGroupsList successfully', function(done) {
        //uncomment below and update the code to test managementGroupsList
        //instance.managementGroupsList(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('managementGroupsUpdate', function() {
      it('should call managementGroupsUpdate successfully', function(done) {
        //uncomment below and update the code to test managementGroupsUpdate
        //instance.managementGroupsUpdate(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
