/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIManagementGroupsApi_H
#define OAI_OAIManagementGroupsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateManagementGroupRequest.h"
#include "OAIErrorResponse.h"
#include "OAIManagementGroup.h"
#include "OAIManagementGroupListResult.h"
#include "OAIOperationResults.h"
#include "OAIPatchManagementGroupRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIManagementGroupsApi : public QObject {
    Q_OBJECT

public:
    OAIManagementGroupsApi(const int timeOut = 0);
    ~OAIManagementGroupsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  cache_control QString [optional]
    */
    virtual void managementGroupSubscriptionsCreate(const QString &group_id, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  cache_control QString [optional]
    */
    virtual void managementGroupSubscriptionsDelete(const QString &group_id, const QString &subscription_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  create_management_group_request OAICreateManagementGroupRequest [required]
    * @param[in]  cache_control QString [optional]
    */
    virtual void managementGroupsCreateOrUpdate(const QString &group_id, const QString &api_version, const OAICreateManagementGroupRequest &create_management_group_request, const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  cache_control QString [optional]
    */
    virtual void managementGroupsDelete(const QString &group_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    * @param[in]  recurse bool [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  cache_control QString [optional]
    */
    virtual void managementGroupsGet(const QString &group_id, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &recurse = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  cache_control QString [optional]
    * @param[in]  skiptoken QString [optional]
    */
    virtual void managementGroupsList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &skiptoken = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  patch_group_request OAIPatchManagementGroupRequest [required]
    * @param[in]  cache_control QString [optional]
    */
    virtual void managementGroupsUpdate(const QString &group_id, const QString &api_version, const OAIPatchManagementGroupRequest &patch_group_request, const ::OpenAPI::OptionalParam<QString> &cache_control = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void managementGroupSubscriptionsCreateCallback(OAIHttpRequestWorker *worker);
    void managementGroupSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void managementGroupsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void managementGroupsDeleteCallback(OAIHttpRequestWorker *worker);
    void managementGroupsGetCallback(OAIHttpRequestWorker *worker);
    void managementGroupsListCallback(OAIHttpRequestWorker *worker);
    void managementGroupsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void managementGroupSubscriptionsCreateSignal();
    void managementGroupSubscriptionsDeleteSignal();
    void managementGroupsCreateOrUpdateSignal(OAIManagementGroup summary);
    void managementGroupsDeleteSignal(OAIOperationResults summary);
    void managementGroupsGetSignal(OAIManagementGroup summary);
    void managementGroupsListSignal(OAIManagementGroupListResult summary);
    void managementGroupsUpdateSignal(OAIManagementGroup summary);


    void managementGroupSubscriptionsCreateSignalFull(OAIHttpRequestWorker *worker);
    void managementGroupSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void managementGroupsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagementGroup summary);
    void managementGroupsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationResults summary);
    void managementGroupsGetSignalFull(OAIHttpRequestWorker *worker, OAIManagementGroup summary);
    void managementGroupsListSignalFull(OAIHttpRequestWorker *worker, OAIManagementGroupListResult summary);
    void managementGroupsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIManagementGroup summary);

    Q_DECL_DEPRECATED_X("Use managementGroupSubscriptionsCreateSignalError() instead")
    void managementGroupSubscriptionsCreateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupSubscriptionsCreateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupSubscriptionsDeleteSignalError() instead")
    void managementGroupSubscriptionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupSubscriptionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsCreateOrUpdateSignalError() instead")
    void managementGroupsCreateOrUpdateSignalE(OAIManagementGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsCreateOrUpdateSignalError(OAIManagementGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsDeleteSignalError() instead")
    void managementGroupsDeleteSignalE(OAIOperationResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsDeleteSignalError(OAIOperationResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsGetSignalError() instead")
    void managementGroupsGetSignalE(OAIManagementGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsGetSignalError(OAIManagementGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsListSignalError() instead")
    void managementGroupsListSignalE(OAIManagementGroupListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsListSignalError(OAIManagementGroupListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsUpdateSignalError() instead")
    void managementGroupsUpdateSignalE(OAIManagementGroup summary, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsUpdateSignalError(OAIManagementGroup summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use managementGroupSubscriptionsCreateSignalErrorFull() instead")
    void managementGroupSubscriptionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupSubscriptionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupSubscriptionsDeleteSignalErrorFull() instead")
    void managementGroupSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsCreateOrUpdateSignalErrorFull() instead")
    void managementGroupsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsDeleteSignalErrorFull() instead")
    void managementGroupsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsGetSignalErrorFull() instead")
    void managementGroupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsListSignalErrorFull() instead")
    void managementGroupsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use managementGroupsUpdateSignalErrorFull() instead")
    void managementGroupsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void managementGroupsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
