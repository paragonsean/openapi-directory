# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TenantBackfillStatusResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, status: str=None, tenant_id: str=None):
        """TenantBackfillStatusResult - a model defined in OpenAPI

        :param status: The status of this TenantBackfillStatusResult.
        :param tenant_id: The tenant_id of this TenantBackfillStatusResult.
        """
        self.openapi_types = {
            'status': str,
            'tenant_id': str
        }

        self.attribute_map = {
            'status': 'status',
            'tenant_id': 'tenantId'
        }

        self._status = status
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantBackfillStatusResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenantBackfillStatusResult of this TenantBackfillStatusResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def status(self):
        """Gets the status of this TenantBackfillStatusResult.

        The status of the Tenant Backfill

        :return: The status of this TenantBackfillStatusResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TenantBackfillStatusResult.

        The status of the Tenant Backfill

        :param status: The status of this TenantBackfillStatusResult.
        :type status: str
        """
        allowed_values = ["NotStarted", "NotStartedButGroupsExist", "Started", "Failed", "Cancelled", "Completed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def tenant_id(self):
        """Gets the tenant_id of this TenantBackfillStatusResult.

        The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000

        :return: The tenant_id of this TenantBackfillStatusResult.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this TenantBackfillStatusResult.

        The AAD Tenant ID associated with the management group. For example, 00000000-0000-0000-0000-000000000000

        :param tenant_id: The tenant_id of this TenantBackfillStatusResult.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
