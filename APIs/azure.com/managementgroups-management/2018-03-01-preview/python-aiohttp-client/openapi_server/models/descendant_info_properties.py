# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.descendant_parent_group_info import DescendantParentGroupInfo
from openapi_server import util


class DescendantInfoProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, parent: DescendantParentGroupInfo=None):
        """DescendantInfoProperties - a model defined in OpenAPI

        :param display_name: The display_name of this DescendantInfoProperties.
        :param parent: The parent of this DescendantInfoProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'parent': DescendantParentGroupInfo
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'parent': 'parent'
        }

        self._display_name = display_name
        self._parent = parent

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DescendantInfoProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DescendantInfoProperties of this DescendantInfoProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this DescendantInfoProperties.

        The friendly name of the management group.

        :return: The display_name of this DescendantInfoProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this DescendantInfoProperties.

        The friendly name of the management group.

        :param display_name: The display_name of this DescendantInfoProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def parent(self):
        """Gets the parent of this DescendantInfoProperties.


        :return: The parent of this DescendantInfoProperties.
        :rtype: DescendantParentGroupInfo
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DescendantInfoProperties.


        :param parent: The parent of this DescendantInfoProperties.
        :type parent: DescendantParentGroupInfo
        """

        self._parent = parent
