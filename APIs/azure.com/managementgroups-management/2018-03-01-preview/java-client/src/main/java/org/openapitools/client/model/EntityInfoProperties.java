/*
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2018-03-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EntityParentGroupInfo;
import org.openapitools.client.model.Permissions;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The generic properties of an entity.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:27:40.682755-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EntityInfoProperties {
  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_INHERITED_PERMISSIONS = "inheritedPermissions";
  @SerializedName(SERIALIZED_NAME_INHERITED_PERMISSIONS)
  private Permissions inheritedPermissions;

  public static final String SERIALIZED_NAME_NUMBER_OF_CHILD_GROUPS = "numberOfChildGroups";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CHILD_GROUPS)
  private Integer numberOfChildGroups;

  public static final String SERIALIZED_NAME_NUMBER_OF_CHILDREN = "numberOfChildren";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_CHILDREN)
  private Integer numberOfChildren;

  public static final String SERIALIZED_NAME_NUMBER_OF_DESCENDANTS = "numberOfDescendants";
  @SerializedName(SERIALIZED_NAME_NUMBER_OF_DESCENDANTS)
  private Integer numberOfDescendants;

  public static final String SERIALIZED_NAME_PARENT = "parent";
  @SerializedName(SERIALIZED_NAME_PARENT)
  private EntityParentGroupInfo parent;

  public static final String SERIALIZED_NAME_PARENT_DISPLAY_NAME_CHAIN = "parentDisplayNameChain";
  @SerializedName(SERIALIZED_NAME_PARENT_DISPLAY_NAME_CHAIN)
  private List<String> parentDisplayNameChain;

  public static final String SERIALIZED_NAME_PARENT_NAME_CHAIN = "parentNameChain";
  @SerializedName(SERIALIZED_NAME_PARENT_NAME_CHAIN)
  private List<String> parentNameChain;

  public static final String SERIALIZED_NAME_PERMISSIONS = "permissions";
  @SerializedName(SERIALIZED_NAME_PERMISSIONS)
  private Permissions permissions;

  public static final String SERIALIZED_NAME_TENANT_ID = "tenantId";
  @SerializedName(SERIALIZED_NAME_TENANT_ID)
  private String tenantId;

  public EntityInfoProperties() {
  }

  public EntityInfoProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The friendly name of the management group.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public EntityInfoProperties inheritedPermissions(Permissions inheritedPermissions) {
    this.inheritedPermissions = inheritedPermissions;
    return this;
  }

  /**
   * Get inheritedPermissions
   * @return inheritedPermissions
   */
  @javax.annotation.Nullable
  public Permissions getInheritedPermissions() {
    return inheritedPermissions;
  }

  public void setInheritedPermissions(Permissions inheritedPermissions) {
    this.inheritedPermissions = inheritedPermissions;
  }


  public EntityInfoProperties numberOfChildGroups(Integer numberOfChildGroups) {
    this.numberOfChildGroups = numberOfChildGroups;
    return this;
  }

  /**
   * Number of child groups is the number of Groups that are exactly one level underneath the current Group.
   * @return numberOfChildGroups
   */
  @javax.annotation.Nullable
  public Integer getNumberOfChildGroups() {
    return numberOfChildGroups;
  }

  public void setNumberOfChildGroups(Integer numberOfChildGroups) {
    this.numberOfChildGroups = numberOfChildGroups;
  }


  public EntityInfoProperties numberOfChildren(Integer numberOfChildren) {
    this.numberOfChildren = numberOfChildren;
    return this;
  }

  /**
   * Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.
   * @return numberOfChildren
   */
  @javax.annotation.Nullable
  public Integer getNumberOfChildren() {
    return numberOfChildren;
  }

  public void setNumberOfChildren(Integer numberOfChildren) {
    this.numberOfChildren = numberOfChildren;
  }


  public EntityInfoProperties numberOfDescendants(Integer numberOfDescendants) {
    this.numberOfDescendants = numberOfDescendants;
    return this;
  }

  /**
   * Get numberOfDescendants
   * @return numberOfDescendants
   */
  @javax.annotation.Nullable
  public Integer getNumberOfDescendants() {
    return numberOfDescendants;
  }

  public void setNumberOfDescendants(Integer numberOfDescendants) {
    this.numberOfDescendants = numberOfDescendants;
  }


  public EntityInfoProperties parent(EntityParentGroupInfo parent) {
    this.parent = parent;
    return this;
  }

  /**
   * Get parent
   * @return parent
   */
  @javax.annotation.Nullable
  public EntityParentGroupInfo getParent() {
    return parent;
  }

  public void setParent(EntityParentGroupInfo parent) {
    this.parent = parent;
  }


  public EntityInfoProperties parentDisplayNameChain(List<String> parentDisplayNameChain) {
    this.parentDisplayNameChain = parentDisplayNameChain;
    return this;
  }

  public EntityInfoProperties addParentDisplayNameChainItem(String parentDisplayNameChainItem) {
    if (this.parentDisplayNameChain == null) {
      this.parentDisplayNameChain = new ArrayList<>();
    }
    this.parentDisplayNameChain.add(parentDisplayNameChainItem);
    return this;
  }

  /**
   * The parent display name chain from the root group to the immediate parent
   * @return parentDisplayNameChain
   */
  @javax.annotation.Nullable
  public List<String> getParentDisplayNameChain() {
    return parentDisplayNameChain;
  }

  public void setParentDisplayNameChain(List<String> parentDisplayNameChain) {
    this.parentDisplayNameChain = parentDisplayNameChain;
  }


  public EntityInfoProperties parentNameChain(List<String> parentNameChain) {
    this.parentNameChain = parentNameChain;
    return this;
  }

  public EntityInfoProperties addParentNameChainItem(String parentNameChainItem) {
    if (this.parentNameChain == null) {
      this.parentNameChain = new ArrayList<>();
    }
    this.parentNameChain.add(parentNameChainItem);
    return this;
  }

  /**
   * The parent name chain from the root group to the immediate parent
   * @return parentNameChain
   */
  @javax.annotation.Nullable
  public List<String> getParentNameChain() {
    return parentNameChain;
  }

  public void setParentNameChain(List<String> parentNameChain) {
    this.parentNameChain = parentNameChain;
  }


  public EntityInfoProperties permissions(Permissions permissions) {
    this.permissions = permissions;
    return this;
  }

  /**
   * Get permissions
   * @return permissions
   */
  @javax.annotation.Nullable
  public Permissions getPermissions() {
    return permissions;
  }

  public void setPermissions(Permissions permissions) {
    this.permissions = permissions;
  }


  public EntityInfoProperties tenantId(String tenantId) {
    this.tenantId = tenantId;
    return this;
  }

  /**
   * The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000
   * @return tenantId
   */
  @javax.annotation.Nullable
  public String getTenantId() {
    return tenantId;
  }

  public void setTenantId(String tenantId) {
    this.tenantId = tenantId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EntityInfoProperties entityInfoProperties = (EntityInfoProperties) o;
    return Objects.equals(this.displayName, entityInfoProperties.displayName) &&
        Objects.equals(this.inheritedPermissions, entityInfoProperties.inheritedPermissions) &&
        Objects.equals(this.numberOfChildGroups, entityInfoProperties.numberOfChildGroups) &&
        Objects.equals(this.numberOfChildren, entityInfoProperties.numberOfChildren) &&
        Objects.equals(this.numberOfDescendants, entityInfoProperties.numberOfDescendants) &&
        Objects.equals(this.parent, entityInfoProperties.parent) &&
        Objects.equals(this.parentDisplayNameChain, entityInfoProperties.parentDisplayNameChain) &&
        Objects.equals(this.parentNameChain, entityInfoProperties.parentNameChain) &&
        Objects.equals(this.permissions, entityInfoProperties.permissions) &&
        Objects.equals(this.tenantId, entityInfoProperties.tenantId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(displayName, inheritedPermissions, numberOfChildGroups, numberOfChildren, numberOfDescendants, parent, parentDisplayNameChain, parentNameChain, permissions, tenantId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EntityInfoProperties {\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    inheritedPermissions: ").append(toIndentedString(inheritedPermissions)).append("\n");
    sb.append("    numberOfChildGroups: ").append(toIndentedString(numberOfChildGroups)).append("\n");
    sb.append("    numberOfChildren: ").append(toIndentedString(numberOfChildren)).append("\n");
    sb.append("    numberOfDescendants: ").append(toIndentedString(numberOfDescendants)).append("\n");
    sb.append("    parent: ").append(toIndentedString(parent)).append("\n");
    sb.append("    parentDisplayNameChain: ").append(toIndentedString(parentDisplayNameChain)).append("\n");
    sb.append("    parentNameChain: ").append(toIndentedString(parentNameChain)).append("\n");
    sb.append("    permissions: ").append(toIndentedString(permissions)).append("\n");
    sb.append("    tenantId: ").append(toIndentedString(tenantId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("displayName");
    openapiFields.add("inheritedPermissions");
    openapiFields.add("numberOfChildGroups");
    openapiFields.add("numberOfChildren");
    openapiFields.add("numberOfDescendants");
    openapiFields.add("parent");
    openapiFields.add("parentDisplayNameChain");
    openapiFields.add("parentNameChain");
    openapiFields.add("permissions");
    openapiFields.add("tenantId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EntityInfoProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EntityInfoProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EntityInfoProperties is not found in the empty JSON string", EntityInfoProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EntityInfoProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EntityInfoProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      // validate the optional field `inheritedPermissions`
      if (jsonObj.get("inheritedPermissions") != null && !jsonObj.get("inheritedPermissions").isJsonNull()) {
        Permissions.validateJsonElement(jsonObj.get("inheritedPermissions"));
      }
      // validate the optional field `parent`
      if (jsonObj.get("parent") != null && !jsonObj.get("parent").isJsonNull()) {
        EntityParentGroupInfo.validateJsonElement(jsonObj.get("parent"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentDisplayNameChain") != null && !jsonObj.get("parentDisplayNameChain").isJsonNull() && !jsonObj.get("parentDisplayNameChain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentDisplayNameChain` to be an array in the JSON string but got `%s`", jsonObj.get("parentDisplayNameChain").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("parentNameChain") != null && !jsonObj.get("parentNameChain").isJsonNull() && !jsonObj.get("parentNameChain").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parentNameChain` to be an array in the JSON string but got `%s`", jsonObj.get("parentNameChain").toString()));
      }
      // validate the optional field `permissions`
      if (jsonObj.get("permissions") != null && !jsonObj.get("permissions").isJsonNull()) {
        Permissions.validateJsonElement(jsonObj.get("permissions"));
      }
      if ((jsonObj.get("tenantId") != null && !jsonObj.get("tenantId").isJsonNull()) && !jsonObj.get("tenantId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tenantId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EntityInfoProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EntityInfoProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EntityInfoProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EntityInfoProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<EntityInfoProperties>() {
           @Override
           public void write(JsonWriter out, EntityInfoProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EntityInfoProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EntityInfoProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EntityInfoProperties
   * @throws IOException if the JSON string is invalid with respect to EntityInfoProperties
   */
  public static EntityInfoProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EntityInfoProperties.class);
  }

  /**
   * Convert an instance of EntityInfoProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

