# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.management_group_child_type import ManagementGroupChildType
from openapi_server import util


class CreateManagementGroupChildInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, children: List[CreateManagementGroupChildInfo]=None, display_name: str=None, id: str=None, name: str=None, roles: List[str]=None, type: ManagementGroupChildType=None):
        """CreateManagementGroupChildInfo - a model defined in OpenAPI

        :param children: The children of this CreateManagementGroupChildInfo.
        :param display_name: The display_name of this CreateManagementGroupChildInfo.
        :param id: The id of this CreateManagementGroupChildInfo.
        :param name: The name of this CreateManagementGroupChildInfo.
        :param roles: The roles of this CreateManagementGroupChildInfo.
        :param type: The type of this CreateManagementGroupChildInfo.
        """
        self.openapi_types = {
            'children': List[CreateManagementGroupChildInfo],
            'display_name': str,
            'id': str,
            'name': str,
            'roles': List[str],
            'type': ManagementGroupChildType
        }

        self.attribute_map = {
            'children': 'children',
            'display_name': 'displayName',
            'id': 'id',
            'name': 'name',
            'roles': 'roles',
            'type': 'type'
        }

        self._children = children
        self._display_name = display_name
        self._id = id
        self._name = name
        self._roles = roles
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateManagementGroupChildInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CreateManagementGroupChildInfo of this CreateManagementGroupChildInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def children(self):
        """Gets the children of this CreateManagementGroupChildInfo.

        The list of children.

        :return: The children of this CreateManagementGroupChildInfo.
        :rtype: List[CreateManagementGroupChildInfo]
        """
        return self._children

    @children.setter
    def children(self, children):
        """Sets the children of this CreateManagementGroupChildInfo.

        The list of children.

        :param children: The children of this CreateManagementGroupChildInfo.
        :type children: List[CreateManagementGroupChildInfo]
        """

        self._children = children

    @property
    def display_name(self):
        """Gets the display_name of this CreateManagementGroupChildInfo.

        The friendly name of the child resource.

        :return: The display_name of this CreateManagementGroupChildInfo.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this CreateManagementGroupChildInfo.

        The friendly name of the child resource.

        :param display_name: The display_name of this CreateManagementGroupChildInfo.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this CreateManagementGroupChildInfo.

        The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000

        :return: The id of this CreateManagementGroupChildInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CreateManagementGroupChildInfo.

        The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000

        :param id: The id of this CreateManagementGroupChildInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CreateManagementGroupChildInfo.

        The name of the child entity.

        :return: The name of this CreateManagementGroupChildInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateManagementGroupChildInfo.

        The name of the child entity.

        :param name: The name of this CreateManagementGroupChildInfo.
        :type name: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this CreateManagementGroupChildInfo.

        The roles definitions associated with the management group.

        :return: The roles of this CreateManagementGroupChildInfo.
        :rtype: List[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CreateManagementGroupChildInfo.

        The roles definitions associated with the management group.

        :param roles: The roles of this CreateManagementGroupChildInfo.
        :type roles: List[str]
        """

        self._roles = roles

    @property
    def type(self):
        """Gets the type of this CreateManagementGroupChildInfo.


        :return: The type of this CreateManagementGroupChildInfo.
        :rtype: ManagementGroupChildType
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateManagementGroupChildInfo.


        :param type: The type of this CreateManagementGroupChildInfo.
        :type type: ManagementGroupChildType
        """

        self._type = type
