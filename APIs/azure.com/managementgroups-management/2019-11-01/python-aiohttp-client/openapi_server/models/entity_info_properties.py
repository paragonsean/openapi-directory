# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.entity_parent_group_info import EntityParentGroupInfo
from openapi_server.models.permissions import Permissions
from openapi_server import util


class EntityInfoProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, inherited_permissions: Permissions=None, number_of_child_groups: int=None, number_of_children: int=None, number_of_descendants: int=None, parent: EntityParentGroupInfo=None, parent_display_name_chain: List[str]=None, parent_name_chain: List[str]=None, permissions: Permissions=None, tenant_id: str=None):
        """EntityInfoProperties - a model defined in OpenAPI

        :param display_name: The display_name of this EntityInfoProperties.
        :param inherited_permissions: The inherited_permissions of this EntityInfoProperties.
        :param number_of_child_groups: The number_of_child_groups of this EntityInfoProperties.
        :param number_of_children: The number_of_children of this EntityInfoProperties.
        :param number_of_descendants: The number_of_descendants of this EntityInfoProperties.
        :param parent: The parent of this EntityInfoProperties.
        :param parent_display_name_chain: The parent_display_name_chain of this EntityInfoProperties.
        :param parent_name_chain: The parent_name_chain of this EntityInfoProperties.
        :param permissions: The permissions of this EntityInfoProperties.
        :param tenant_id: The tenant_id of this EntityInfoProperties.
        """
        self.openapi_types = {
            'display_name': str,
            'inherited_permissions': Permissions,
            'number_of_child_groups': int,
            'number_of_children': int,
            'number_of_descendants': int,
            'parent': EntityParentGroupInfo,
            'parent_display_name_chain': List[str],
            'parent_name_chain': List[str],
            'permissions': Permissions,
            'tenant_id': str
        }

        self.attribute_map = {
            'display_name': 'displayName',
            'inherited_permissions': 'inheritedPermissions',
            'number_of_child_groups': 'numberOfChildGroups',
            'number_of_children': 'numberOfChildren',
            'number_of_descendants': 'numberOfDescendants',
            'parent': 'parent',
            'parent_display_name_chain': 'parentDisplayNameChain',
            'parent_name_chain': 'parentNameChain',
            'permissions': 'permissions',
            'tenant_id': 'tenantId'
        }

        self._display_name = display_name
        self._inherited_permissions = inherited_permissions
        self._number_of_child_groups = number_of_child_groups
        self._number_of_children = number_of_children
        self._number_of_descendants = number_of_descendants
        self._parent = parent
        self._parent_display_name_chain = parent_display_name_chain
        self._parent_name_chain = parent_name_chain
        self._permissions = permissions
        self._tenant_id = tenant_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntityInfoProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntityInfoProperties of this EntityInfoProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this EntityInfoProperties.

        The friendly name of the management group.

        :return: The display_name of this EntityInfoProperties.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this EntityInfoProperties.

        The friendly name of the management group.

        :param display_name: The display_name of this EntityInfoProperties.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def inherited_permissions(self):
        """Gets the inherited_permissions of this EntityInfoProperties.


        :return: The inherited_permissions of this EntityInfoProperties.
        :rtype: Permissions
        """
        return self._inherited_permissions

    @inherited_permissions.setter
    def inherited_permissions(self, inherited_permissions):
        """Sets the inherited_permissions of this EntityInfoProperties.


        :param inherited_permissions: The inherited_permissions of this EntityInfoProperties.
        :type inherited_permissions: Permissions
        """

        self._inherited_permissions = inherited_permissions

    @property
    def number_of_child_groups(self):
        """Gets the number_of_child_groups of this EntityInfoProperties.

        Number of children is the number of Groups that are exactly one level underneath the current Group.

        :return: The number_of_child_groups of this EntityInfoProperties.
        :rtype: int
        """
        return self._number_of_child_groups

    @number_of_child_groups.setter
    def number_of_child_groups(self, number_of_child_groups):
        """Sets the number_of_child_groups of this EntityInfoProperties.

        Number of children is the number of Groups that are exactly one level underneath the current Group.

        :param number_of_child_groups: The number_of_child_groups of this EntityInfoProperties.
        :type number_of_child_groups: int
        """

        self._number_of_child_groups = number_of_child_groups

    @property
    def number_of_children(self):
        """Gets the number_of_children of this EntityInfoProperties.

        Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.

        :return: The number_of_children of this EntityInfoProperties.
        :rtype: int
        """
        return self._number_of_children

    @number_of_children.setter
    def number_of_children(self, number_of_children):
        """Sets the number_of_children of this EntityInfoProperties.

        Number of children is the number of Groups and Subscriptions that are exactly one level underneath the current Group.

        :param number_of_children: The number_of_children of this EntityInfoProperties.
        :type number_of_children: int
        """

        self._number_of_children = number_of_children

    @property
    def number_of_descendants(self):
        """Gets the number_of_descendants of this EntityInfoProperties.


        :return: The number_of_descendants of this EntityInfoProperties.
        :rtype: int
        """
        return self._number_of_descendants

    @number_of_descendants.setter
    def number_of_descendants(self, number_of_descendants):
        """Sets the number_of_descendants of this EntityInfoProperties.


        :param number_of_descendants: The number_of_descendants of this EntityInfoProperties.
        :type number_of_descendants: int
        """

        self._number_of_descendants = number_of_descendants

    @property
    def parent(self):
        """Gets the parent of this EntityInfoProperties.


        :return: The parent of this EntityInfoProperties.
        :rtype: EntityParentGroupInfo
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this EntityInfoProperties.


        :param parent: The parent of this EntityInfoProperties.
        :type parent: EntityParentGroupInfo
        """

        self._parent = parent

    @property
    def parent_display_name_chain(self):
        """Gets the parent_display_name_chain of this EntityInfoProperties.

        The parent display name chain from the root group to the immediate parent

        :return: The parent_display_name_chain of this EntityInfoProperties.
        :rtype: List[str]
        """
        return self._parent_display_name_chain

    @parent_display_name_chain.setter
    def parent_display_name_chain(self, parent_display_name_chain):
        """Sets the parent_display_name_chain of this EntityInfoProperties.

        The parent display name chain from the root group to the immediate parent

        :param parent_display_name_chain: The parent_display_name_chain of this EntityInfoProperties.
        :type parent_display_name_chain: List[str]
        """

        self._parent_display_name_chain = parent_display_name_chain

    @property
    def parent_name_chain(self):
        """Gets the parent_name_chain of this EntityInfoProperties.

        The parent name chain from the root group to the immediate parent

        :return: The parent_name_chain of this EntityInfoProperties.
        :rtype: List[str]
        """
        return self._parent_name_chain

    @parent_name_chain.setter
    def parent_name_chain(self, parent_name_chain):
        """Sets the parent_name_chain of this EntityInfoProperties.

        The parent name chain from the root group to the immediate parent

        :param parent_name_chain: The parent_name_chain of this EntityInfoProperties.
        :type parent_name_chain: List[str]
        """

        self._parent_name_chain = parent_name_chain

    @property
    def permissions(self):
        """Gets the permissions of this EntityInfoProperties.


        :return: The permissions of this EntityInfoProperties.
        :rtype: Permissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions):
        """Sets the permissions of this EntityInfoProperties.


        :param permissions: The permissions of this EntityInfoProperties.
        :type permissions: Permissions
        """

        self._permissions = permissions

    @property
    def tenant_id(self):
        """Gets the tenant_id of this EntityInfoProperties.

        The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000

        :return: The tenant_id of this EntityInfoProperties.
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this EntityInfoProperties.

        The AAD Tenant ID associated with the entity. For example, 00000000-0000-0000-0000-000000000000

        :param tenant_id: The tenant_id of this EntityInfoProperties.
        :type tenant_id: str
        """

        self._tenant_id = tenant_id
