/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ManagementGroupChildType from './ManagementGroupChildType';

/**
 * The ManagementGroupChildInfo model module.
 * @module model/ManagementGroupChildInfo
 * @version 2019-11-01
 */
class ManagementGroupChildInfo {
    /**
     * Constructs a new <code>ManagementGroupChildInfo</code>.
     * The child information of a management group.
     * @alias module:model/ManagementGroupChildInfo
     */
    constructor() { 
        
        ManagementGroupChildInfo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ManagementGroupChildInfo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ManagementGroupChildInfo} obj Optional instance to populate.
     * @return {module:model/ManagementGroupChildInfo} The populated <code>ManagementGroupChildInfo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ManagementGroupChildInfo();

            if (data.hasOwnProperty('children')) {
                obj['children'] = ApiClient.convertToType(data['children'], [ManagementGroupChildInfo]);
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('roles')) {
                obj['roles'] = ApiClient.convertToType(data['roles'], ['String']);
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ManagementGroupChildType.constructFromObject(data['type']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ManagementGroupChildInfo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ManagementGroupChildInfo</code>.
     */
    static validateJSON(data) {
        if (data['children']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['children'])) {
                throw new Error("Expected the field `children` to be an array in the JSON data but got " + data['children']);
            }
            // validate the optional field `children` (array)
            for (const item of data['children']) {
                ManagementGroupChildInfo.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['roles'])) {
            throw new Error("Expected the field `roles` to be an array in the JSON data but got " + data['roles']);
        }

        return true;
    }


}



/**
 * The list of children.
 * @member {Array.<module:model/ManagementGroupChildInfo>} children
 */
ManagementGroupChildInfo.prototype['children'] = undefined;

/**
 * The friendly name of the child resource.
 * @member {String} displayName
 */
ManagementGroupChildInfo.prototype['displayName'] = undefined;

/**
 * The fully qualified ID for the child resource (management group or subscription).  For example, /providers/Microsoft.Management/managementGroups/0000000-0000-0000-0000-000000000000
 * @member {String} id
 */
ManagementGroupChildInfo.prototype['id'] = undefined;

/**
 * The name of the child entity.
 * @member {String} name
 */
ManagementGroupChildInfo.prototype['name'] = undefined;

/**
 * The roles definitions associated with the management group.
 * @member {Array.<String>} roles
 */
ManagementGroupChildInfo.prototype['roles'] = undefined;

/**
 * @member {module:model/ManagementGroupChildType} type
 */
ManagementGroupChildInfo.prototype['type'] = undefined;






export default ManagementGroupChildInfo;

