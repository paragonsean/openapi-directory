/**
 * Management Groups
 * The Azure Management Groups API enables consolidation of multiple subscriptions/resources into an organizational hierarchy and centrally manage access control, policies, alerting and reporting for those resources.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CheckNameAvailabilityResult model module.
 * @module model/CheckNameAvailabilityResult
 * @version 2019-11-01
 */
class CheckNameAvailabilityResult {
    /**
     * Constructs a new <code>CheckNameAvailabilityResult</code>.
     * Describes the result of the request to check management group name availability.
     * @alias module:model/CheckNameAvailabilityResult
     */
    constructor() { 
        
        CheckNameAvailabilityResult.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CheckNameAvailabilityResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CheckNameAvailabilityResult} obj Optional instance to populate.
     * @return {module:model/CheckNameAvailabilityResult} The populated <code>CheckNameAvailabilityResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CheckNameAvailabilityResult();

            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('nameAvailable')) {
                obj['nameAvailable'] = ApiClient.convertToType(data['nameAvailable'], 'Boolean');
            }
            if (data.hasOwnProperty('reason')) {
                obj['reason'] = ApiClient.convertToType(data['reason'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CheckNameAvailabilityResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CheckNameAvailabilityResult</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['reason'] && !(typeof data['reason'] === 'string' || data['reason'] instanceof String)) {
            throw new Error("Expected the field `reason` to be a primitive type in the JSON string but got " + data['reason']);
        }

        return true;
    }


}



/**
 * Required if nameAvailable == false. Localized. If reason == invalid, provide the user with the reason why the given name is invalid, and provide the resource naming requirements so that the user can select a valid name. If reason == AlreadyExists, explain that is already in use, and direct them to select a different name.
 * @member {String} message
 */
CheckNameAvailabilityResult.prototype['message'] = undefined;

/**
 * Required. True indicates name is valid and available. False indicates the name is invalid, unavailable, or both.
 * @member {Boolean} nameAvailable
 */
CheckNameAvailabilityResult.prototype['nameAvailable'] = undefined;

/**
 * Required if nameAvailable == false. Invalid indicates the name provided does not match the resource provider's naming requirements (incorrect length, unsupported characters, etc.) AlreadyExists indicates that the name is already in use and is therefore unavailable.
 * @member {module:model/CheckNameAvailabilityResult.ReasonEnum} reason
 */
CheckNameAvailabilityResult.prototype['reason'] = undefined;





/**
 * Allowed values for the <code>reason</code> property.
 * @enum {String}
 * @readonly
 */
CheckNameAvailabilityResult['ReasonEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "AlreadyExists"
     * @const
     */
    "AlreadyExists": "AlreadyExists"
};



export default CheckNameAvailabilityResult;

