/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDataManagersApi_H
#define OAI_OAIDataManagersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataManager.h"
#include "OAIDataManagerList.h"
#include "OAIDataManagerUpdateParameter.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDataManagersApi : public QObject {
    Q_OBJECT

public:
    OAIDataManagersApi(const int timeOut = 0);
    ~OAIDataManagersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  data_manager OAIDataManager [required]
    */
    virtual void dataManagersCreate(const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const OAIDataManager &data_manager);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataManagersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataManagersGet(const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataManagersList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void dataManagersListByResourceGroup(const QString &subscription_id, const QString &resource_group_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  data_manager_update_parameter OAIDataManagerUpdateParameter [required]
    * @param[in]  if_match QString [optional]
    */
    virtual void dataManagersUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const OAIDataManagerUpdateParameter &data_manager_update_parameter, const ::OpenAPI::OptionalParam<QString> &if_match = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void dataManagersCreateCallback(OAIHttpRequestWorker *worker);
    void dataManagersDeleteCallback(OAIHttpRequestWorker *worker);
    void dataManagersGetCallback(OAIHttpRequestWorker *worker);
    void dataManagersListCallback(OAIHttpRequestWorker *worker);
    void dataManagersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void dataManagersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void dataManagersCreateSignal(OAIDataManager summary);
    void dataManagersDeleteSignal();
    void dataManagersGetSignal(OAIDataManager summary);
    void dataManagersListSignal(OAIDataManagerList summary);
    void dataManagersListByResourceGroupSignal(OAIDataManagerList summary);
    void dataManagersUpdateSignal(OAIDataManager summary);


    void dataManagersCreateSignalFull(OAIHttpRequestWorker *worker, OAIDataManager summary);
    void dataManagersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void dataManagersGetSignalFull(OAIHttpRequestWorker *worker, OAIDataManager summary);
    void dataManagersListSignalFull(OAIHttpRequestWorker *worker, OAIDataManagerList summary);
    void dataManagersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIDataManagerList summary);
    void dataManagersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDataManager summary);

    Q_DECL_DEPRECATED_X("Use dataManagersCreateSignalError() instead")
    void dataManagersCreateSignalE(OAIDataManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersCreateSignalError(OAIDataManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersDeleteSignalError() instead")
    void dataManagersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersGetSignalError() instead")
    void dataManagersGetSignalE(OAIDataManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersGetSignalError(OAIDataManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersListSignalError() instead")
    void dataManagersListSignalE(OAIDataManagerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersListSignalError(OAIDataManagerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersListByResourceGroupSignalError() instead")
    void dataManagersListByResourceGroupSignalE(OAIDataManagerList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersListByResourceGroupSignalError(OAIDataManagerList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersUpdateSignalError() instead")
    void dataManagersUpdateSignalE(OAIDataManager summary, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersUpdateSignalError(OAIDataManager summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use dataManagersCreateSignalErrorFull() instead")
    void dataManagersCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersDeleteSignalErrorFull() instead")
    void dataManagersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersGetSignalErrorFull() instead")
    void dataManagersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersListSignalErrorFull() instead")
    void dataManagersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersListByResourceGroupSignalErrorFull() instead")
    void dataManagersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use dataManagersUpdateSignalErrorFull() instead")
    void dataManagersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void dataManagersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
