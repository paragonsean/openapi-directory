/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataStoreProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataStoreProperties::OAIDataStoreProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataStoreProperties::OAIDataStoreProperties() {
    this->initializeModel();
}

OAIDataStoreProperties::~OAIDataStoreProperties() {}

void OAIDataStoreProperties::initializeModel() {

    m_customer_secrets_isSet = false;
    m_customer_secrets_isValid = false;

    m_data_store_type_id_isSet = false;
    m_data_store_type_id_isValid = false;

    m_extended_properties_isSet = false;
    m_extended_properties_isValid = false;

    m_repository_id_isSet = false;
    m_repository_id_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;
}

void OAIDataStoreProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataStoreProperties::fromJsonObject(QJsonObject json) {

    m_customer_secrets_isValid = ::OpenAPI::fromJsonValue(m_customer_secrets, json[QString("customerSecrets")]);
    m_customer_secrets_isSet = !json[QString("customerSecrets")].isNull() && m_customer_secrets_isValid;

    m_data_store_type_id_isValid = ::OpenAPI::fromJsonValue(m_data_store_type_id, json[QString("dataStoreTypeId")]);
    m_data_store_type_id_isSet = !json[QString("dataStoreTypeId")].isNull() && m_data_store_type_id_isValid;

    m_extended_properties_isValid = ::OpenAPI::fromJsonValue(m_extended_properties, json[QString("extendedProperties")]);
    m_extended_properties_isSet = !json[QString("extendedProperties")].isNull() && m_extended_properties_isValid;

    m_repository_id_isValid = ::OpenAPI::fromJsonValue(m_repository_id, json[QString("repositoryId")]);
    m_repository_id_isSet = !json[QString("repositoryId")].isNull() && m_repository_id_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;
}

QString OAIDataStoreProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataStoreProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_secrets.size() > 0) {
        obj.insert(QString("customerSecrets"), ::OpenAPI::toJsonValue(m_customer_secrets));
    }
    if (m_data_store_type_id_isSet) {
        obj.insert(QString("dataStoreTypeId"), ::OpenAPI::toJsonValue(m_data_store_type_id));
    }
    if (m_extended_properties_isSet) {
        obj.insert(QString("extendedProperties"), ::OpenAPI::toJsonValue(m_extended_properties));
    }
    if (m_repository_id_isSet) {
        obj.insert(QString("repositoryId"), ::OpenAPI::toJsonValue(m_repository_id));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    return obj;
}

QList<OAICustomerSecret> OAIDataStoreProperties::getCustomerSecrets() const {
    return m_customer_secrets;
}
void OAIDataStoreProperties::setCustomerSecrets(const QList<OAICustomerSecret> &customer_secrets) {
    m_customer_secrets = customer_secrets;
    m_customer_secrets_isSet = true;
}

bool OAIDataStoreProperties::is_customer_secrets_Set() const{
    return m_customer_secrets_isSet;
}

bool OAIDataStoreProperties::is_customer_secrets_Valid() const{
    return m_customer_secrets_isValid;
}

QString OAIDataStoreProperties::getDataStoreTypeId() const {
    return m_data_store_type_id;
}
void OAIDataStoreProperties::setDataStoreTypeId(const QString &data_store_type_id) {
    m_data_store_type_id = data_store_type_id;
    m_data_store_type_id_isSet = true;
}

bool OAIDataStoreProperties::is_data_store_type_id_Set() const{
    return m_data_store_type_id_isSet;
}

bool OAIDataStoreProperties::is_data_store_type_id_Valid() const{
    return m_data_store_type_id_isValid;
}

OAIObject OAIDataStoreProperties::getExtendedProperties() const {
    return m_extended_properties;
}
void OAIDataStoreProperties::setExtendedProperties(const OAIObject &extended_properties) {
    m_extended_properties = extended_properties;
    m_extended_properties_isSet = true;
}

bool OAIDataStoreProperties::is_extended_properties_Set() const{
    return m_extended_properties_isSet;
}

bool OAIDataStoreProperties::is_extended_properties_Valid() const{
    return m_extended_properties_isValid;
}

QString OAIDataStoreProperties::getRepositoryId() const {
    return m_repository_id;
}
void OAIDataStoreProperties::setRepositoryId(const QString &repository_id) {
    m_repository_id = repository_id;
    m_repository_id_isSet = true;
}

bool OAIDataStoreProperties::is_repository_id_Set() const{
    return m_repository_id_isSet;
}

bool OAIDataStoreProperties::is_repository_id_Valid() const{
    return m_repository_id_isValid;
}

QString OAIDataStoreProperties::getState() const {
    return m_state;
}
void OAIDataStoreProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDataStoreProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDataStoreProperties::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIDataStoreProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_store_type_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_extended_properties_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_repository_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataStoreProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_store_type_id_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
