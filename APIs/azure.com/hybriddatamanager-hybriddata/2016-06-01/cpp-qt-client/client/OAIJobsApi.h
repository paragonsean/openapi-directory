/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobsApi_H
#define OAI_OAIJobsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJob.h"
#include "OAIJobList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobsApi : public QObject {
    Q_OBJECT

public:
    OAIJobsApi(const int timeOut = 0);
    ~OAIJobsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsCancel(const QString &data_service_name, const QString &job_definition_name, const QString &job_id, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version);

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void jobsGet(const QString &data_service_name, const QString &job_definition_name, const QString &job_id, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void jobsListByDataManager(const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void jobsListByDataService(const QString &data_service_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void jobsListByJobDefinition(const QString &data_service_name, const QString &job_definition_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  job_id QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobsResume(const QString &data_service_name, const QString &job_definition_name, const QString &job_id, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobsCancelCallback(OAIHttpRequestWorker *worker);
    void jobsGetCallback(OAIHttpRequestWorker *worker);
    void jobsListByDataManagerCallback(OAIHttpRequestWorker *worker);
    void jobsListByDataServiceCallback(OAIHttpRequestWorker *worker);
    void jobsListByJobDefinitionCallback(OAIHttpRequestWorker *worker);
    void jobsResumeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobsCancelSignal();
    void jobsGetSignal(OAIJob summary);
    void jobsListByDataManagerSignal(OAIJobList summary);
    void jobsListByDataServiceSignal(OAIJobList summary);
    void jobsListByJobDefinitionSignal(OAIJobList summary);
    void jobsResumeSignal();


    void jobsCancelSignalFull(OAIHttpRequestWorker *worker);
    void jobsGetSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void jobsListByDataManagerSignalFull(OAIHttpRequestWorker *worker, OAIJobList summary);
    void jobsListByDataServiceSignalFull(OAIHttpRequestWorker *worker, OAIJobList summary);
    void jobsListByJobDefinitionSignalFull(OAIHttpRequestWorker *worker, OAIJobList summary);
    void jobsResumeSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobsCancelSignalError() instead")
    void jobsCancelSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalError() instead")
    void jobsGetSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByDataManagerSignalError() instead")
    void jobsListByDataManagerSignalE(OAIJobList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByDataManagerSignalError(OAIJobList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByDataServiceSignalError() instead")
    void jobsListByDataServiceSignalE(OAIJobList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByDataServiceSignalError(OAIJobList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByJobDefinitionSignalError() instead")
    void jobsListByJobDefinitionSignalE(OAIJobList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByJobDefinitionSignalError(OAIJobList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsResumeSignalError() instead")
    void jobsResumeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobsResumeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobsCancelSignalErrorFull() instead")
    void jobsCancelSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsCancelSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsGetSignalErrorFull() instead")
    void jobsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByDataManagerSignalErrorFull() instead")
    void jobsListByDataManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByDataManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByDataServiceSignalErrorFull() instead")
    void jobsListByDataServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByDataServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsListByJobDefinitionSignalErrorFull() instead")
    void jobsListByJobDefinitionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsListByJobDefinitionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobsResumeSignalErrorFull() instead")
    void jobsResumeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobsResumeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
