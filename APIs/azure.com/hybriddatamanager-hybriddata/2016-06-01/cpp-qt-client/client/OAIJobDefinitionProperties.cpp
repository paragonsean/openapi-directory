/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobDefinitionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobDefinitionProperties::OAIJobDefinitionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobDefinitionProperties::OAIJobDefinitionProperties() {
    this->initializeModel();
}

OAIJobDefinitionProperties::~OAIJobDefinitionProperties() {}

void OAIJobDefinitionProperties::initializeModel() {

    m_customer_secrets_isSet = false;
    m_customer_secrets_isValid = false;

    m_data_service_input_isSet = false;
    m_data_service_input_isValid = false;

    m_data_sink_id_isSet = false;
    m_data_sink_id_isValid = false;

    m_data_source_id_isSet = false;
    m_data_source_id_isValid = false;

    m_last_modified_time_isSet = false;
    m_last_modified_time_isValid = false;

    m_run_location_isSet = false;
    m_run_location_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_user_confirmation_isSet = false;
    m_user_confirmation_isValid = false;
}

void OAIJobDefinitionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobDefinitionProperties::fromJsonObject(QJsonObject json) {

    m_customer_secrets_isValid = ::OpenAPI::fromJsonValue(m_customer_secrets, json[QString("customerSecrets")]);
    m_customer_secrets_isSet = !json[QString("customerSecrets")].isNull() && m_customer_secrets_isValid;

    m_data_service_input_isValid = ::OpenAPI::fromJsonValue(m_data_service_input, json[QString("dataServiceInput")]);
    m_data_service_input_isSet = !json[QString("dataServiceInput")].isNull() && m_data_service_input_isValid;

    m_data_sink_id_isValid = ::OpenAPI::fromJsonValue(m_data_sink_id, json[QString("dataSinkId")]);
    m_data_sink_id_isSet = !json[QString("dataSinkId")].isNull() && m_data_sink_id_isValid;

    m_data_source_id_isValid = ::OpenAPI::fromJsonValue(m_data_source_id, json[QString("dataSourceId")]);
    m_data_source_id_isSet = !json[QString("dataSourceId")].isNull() && m_data_source_id_isValid;

    m_last_modified_time_isValid = ::OpenAPI::fromJsonValue(m_last_modified_time, json[QString("lastModifiedTime")]);
    m_last_modified_time_isSet = !json[QString("lastModifiedTime")].isNull() && m_last_modified_time_isValid;

    m_run_location_isValid = ::OpenAPI::fromJsonValue(m_run_location, json[QString("runLocation")]);
    m_run_location_isSet = !json[QString("runLocation")].isNull() && m_run_location_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_user_confirmation_isValid = ::OpenAPI::fromJsonValue(m_user_confirmation, json[QString("userConfirmation")]);
    m_user_confirmation_isSet = !json[QString("userConfirmation")].isNull() && m_user_confirmation_isValid;
}

QString OAIJobDefinitionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobDefinitionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_secrets.size() > 0) {
        obj.insert(QString("customerSecrets"), ::OpenAPI::toJsonValue(m_customer_secrets));
    }
    if (m_data_service_input_isSet) {
        obj.insert(QString("dataServiceInput"), ::OpenAPI::toJsonValue(m_data_service_input));
    }
    if (m_data_sink_id_isSet) {
        obj.insert(QString("dataSinkId"), ::OpenAPI::toJsonValue(m_data_sink_id));
    }
    if (m_data_source_id_isSet) {
        obj.insert(QString("dataSourceId"), ::OpenAPI::toJsonValue(m_data_source_id));
    }
    if (m_last_modified_time_isSet) {
        obj.insert(QString("lastModifiedTime"), ::OpenAPI::toJsonValue(m_last_modified_time));
    }
    if (m_run_location_isSet) {
        obj.insert(QString("runLocation"), ::OpenAPI::toJsonValue(m_run_location));
    }
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_user_confirmation_isSet) {
        obj.insert(QString("userConfirmation"), ::OpenAPI::toJsonValue(m_user_confirmation));
    }
    return obj;
}

QList<OAICustomerSecret> OAIJobDefinitionProperties::getCustomerSecrets() const {
    return m_customer_secrets;
}
void OAIJobDefinitionProperties::setCustomerSecrets(const QList<OAICustomerSecret> &customer_secrets) {
    m_customer_secrets = customer_secrets;
    m_customer_secrets_isSet = true;
}

bool OAIJobDefinitionProperties::is_customer_secrets_Set() const{
    return m_customer_secrets_isSet;
}

bool OAIJobDefinitionProperties::is_customer_secrets_Valid() const{
    return m_customer_secrets_isValid;
}

OAIObject OAIJobDefinitionProperties::getDataServiceInput() const {
    return m_data_service_input;
}
void OAIJobDefinitionProperties::setDataServiceInput(const OAIObject &data_service_input) {
    m_data_service_input = data_service_input;
    m_data_service_input_isSet = true;
}

bool OAIJobDefinitionProperties::is_data_service_input_Set() const{
    return m_data_service_input_isSet;
}

bool OAIJobDefinitionProperties::is_data_service_input_Valid() const{
    return m_data_service_input_isValid;
}

QString OAIJobDefinitionProperties::getDataSinkId() const {
    return m_data_sink_id;
}
void OAIJobDefinitionProperties::setDataSinkId(const QString &data_sink_id) {
    m_data_sink_id = data_sink_id;
    m_data_sink_id_isSet = true;
}

bool OAIJobDefinitionProperties::is_data_sink_id_Set() const{
    return m_data_sink_id_isSet;
}

bool OAIJobDefinitionProperties::is_data_sink_id_Valid() const{
    return m_data_sink_id_isValid;
}

QString OAIJobDefinitionProperties::getDataSourceId() const {
    return m_data_source_id;
}
void OAIJobDefinitionProperties::setDataSourceId(const QString &data_source_id) {
    m_data_source_id = data_source_id;
    m_data_source_id_isSet = true;
}

bool OAIJobDefinitionProperties::is_data_source_id_Set() const{
    return m_data_source_id_isSet;
}

bool OAIJobDefinitionProperties::is_data_source_id_Valid() const{
    return m_data_source_id_isValid;
}

QDateTime OAIJobDefinitionProperties::getLastModifiedTime() const {
    return m_last_modified_time;
}
void OAIJobDefinitionProperties::setLastModifiedTime(const QDateTime &last_modified_time) {
    m_last_modified_time = last_modified_time;
    m_last_modified_time_isSet = true;
}

bool OAIJobDefinitionProperties::is_last_modified_time_Set() const{
    return m_last_modified_time_isSet;
}

bool OAIJobDefinitionProperties::is_last_modified_time_Valid() const{
    return m_last_modified_time_isValid;
}

QString OAIJobDefinitionProperties::getRunLocation() const {
    return m_run_location;
}
void OAIJobDefinitionProperties::setRunLocation(const QString &run_location) {
    m_run_location = run_location;
    m_run_location_isSet = true;
}

bool OAIJobDefinitionProperties::is_run_location_Set() const{
    return m_run_location_isSet;
}

bool OAIJobDefinitionProperties::is_run_location_Valid() const{
    return m_run_location_isValid;
}

QList<OAISchedule> OAIJobDefinitionProperties::getSchedules() const {
    return m_schedules;
}
void OAIJobDefinitionProperties::setSchedules(const QList<OAISchedule> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAIJobDefinitionProperties::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAIJobDefinitionProperties::is_schedules_Valid() const{
    return m_schedules_isValid;
}

QString OAIJobDefinitionProperties::getState() const {
    return m_state;
}
void OAIJobDefinitionProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIJobDefinitionProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIJobDefinitionProperties::is_state_Valid() const{
    return m_state_isValid;
}

QString OAIJobDefinitionProperties::getUserConfirmation() const {
    return m_user_confirmation;
}
void OAIJobDefinitionProperties::setUserConfirmation(const QString &user_confirmation) {
    m_user_confirmation = user_confirmation;
    m_user_confirmation_isSet = true;
}

bool OAIJobDefinitionProperties::is_user_confirmation_Set() const{
    return m_user_confirmation_isSet;
}

bool OAIJobDefinitionProperties::is_user_confirmation_Valid() const{
    return m_user_confirmation_isValid;
}

bool OAIJobDefinitionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_service_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sink_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_modified_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_run_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_confirmation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobDefinitionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_sink_id_isValid && m_data_source_id_isValid && m_state_isValid && true;
}

} // namespace OpenAPI
