/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataStoreTypeProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataStoreTypeProperties::OAIDataStoreTypeProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataStoreTypeProperties::OAIDataStoreTypeProperties() {
    this->initializeModel();
}

OAIDataStoreTypeProperties::~OAIDataStoreTypeProperties() {}

void OAIDataStoreTypeProperties::initializeModel() {

    m_repository_type_isSet = false;
    m_repository_type_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_supported_data_services_as_sink_isSet = false;
    m_supported_data_services_as_sink_isValid = false;

    m_supported_data_services_as_source_isSet = false;
    m_supported_data_services_as_source_isValid = false;
}

void OAIDataStoreTypeProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataStoreTypeProperties::fromJsonObject(QJsonObject json) {

    m_repository_type_isValid = ::OpenAPI::fromJsonValue(m_repository_type, json[QString("repositoryType")]);
    m_repository_type_isSet = !json[QString("repositoryType")].isNull() && m_repository_type_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_supported_data_services_as_sink_isValid = ::OpenAPI::fromJsonValue(m_supported_data_services_as_sink, json[QString("supportedDataServicesAsSink")]);
    m_supported_data_services_as_sink_isSet = !json[QString("supportedDataServicesAsSink")].isNull() && m_supported_data_services_as_sink_isValid;

    m_supported_data_services_as_source_isValid = ::OpenAPI::fromJsonValue(m_supported_data_services_as_source, json[QString("supportedDataServicesAsSource")]);
    m_supported_data_services_as_source_isSet = !json[QString("supportedDataServicesAsSource")].isNull() && m_supported_data_services_as_source_isValid;
}

QString OAIDataStoreTypeProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataStoreTypeProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_repository_type_isSet) {
        obj.insert(QString("repositoryType"), ::OpenAPI::toJsonValue(m_repository_type));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_supported_data_services_as_sink.size() > 0) {
        obj.insert(QString("supportedDataServicesAsSink"), ::OpenAPI::toJsonValue(m_supported_data_services_as_sink));
    }
    if (m_supported_data_services_as_source.size() > 0) {
        obj.insert(QString("supportedDataServicesAsSource"), ::OpenAPI::toJsonValue(m_supported_data_services_as_source));
    }
    return obj;
}

QString OAIDataStoreTypeProperties::getRepositoryType() const {
    return m_repository_type;
}
void OAIDataStoreTypeProperties::setRepositoryType(const QString &repository_type) {
    m_repository_type = repository_type;
    m_repository_type_isSet = true;
}

bool OAIDataStoreTypeProperties::is_repository_type_Set() const{
    return m_repository_type_isSet;
}

bool OAIDataStoreTypeProperties::is_repository_type_Valid() const{
    return m_repository_type_isValid;
}

QString OAIDataStoreTypeProperties::getState() const {
    return m_state;
}
void OAIDataStoreTypeProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDataStoreTypeProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDataStoreTypeProperties::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIDataStoreTypeProperties::getSupportedDataServicesAsSink() const {
    return m_supported_data_services_as_sink;
}
void OAIDataStoreTypeProperties::setSupportedDataServicesAsSink(const QList<QString> &supported_data_services_as_sink) {
    m_supported_data_services_as_sink = supported_data_services_as_sink;
    m_supported_data_services_as_sink_isSet = true;
}

bool OAIDataStoreTypeProperties::is_supported_data_services_as_sink_Set() const{
    return m_supported_data_services_as_sink_isSet;
}

bool OAIDataStoreTypeProperties::is_supported_data_services_as_sink_Valid() const{
    return m_supported_data_services_as_sink_isValid;
}

QList<QString> OAIDataStoreTypeProperties::getSupportedDataServicesAsSource() const {
    return m_supported_data_services_as_source;
}
void OAIDataStoreTypeProperties::setSupportedDataServicesAsSource(const QList<QString> &supported_data_services_as_source) {
    m_supported_data_services_as_source = supported_data_services_as_source;
    m_supported_data_services_as_source_isSet = true;
}

bool OAIDataStoreTypeProperties::is_supported_data_services_as_source_Set() const{
    return m_supported_data_services_as_source_isSet;
}

bool OAIDataStoreTypeProperties::is_supported_data_services_as_source_Valid() const{
    return m_supported_data_services_as_source_isValid;
}

bool OAIDataStoreTypeProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_repository_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_services_as_sink.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_services_as_source.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataStoreTypeProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
