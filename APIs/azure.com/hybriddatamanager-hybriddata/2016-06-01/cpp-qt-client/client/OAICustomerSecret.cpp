/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICustomerSecret.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICustomerSecret::OAICustomerSecret(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICustomerSecret::OAICustomerSecret() {
    this->initializeModel();
}

OAICustomerSecret::~OAICustomerSecret() {}

void OAICustomerSecret::initializeModel() {

    m_algorithm_isSet = false;
    m_algorithm_isValid = false;

    m_key_identifier_isSet = false;
    m_key_identifier_isValid = false;

    m_key_value_isSet = false;
    m_key_value_isValid = false;
}

void OAICustomerSecret::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICustomerSecret::fromJsonObject(QJsonObject json) {

    m_algorithm_isValid = ::OpenAPI::fromJsonValue(m_algorithm, json[QString("algorithm")]);
    m_algorithm_isSet = !json[QString("algorithm")].isNull() && m_algorithm_isValid;

    m_key_identifier_isValid = ::OpenAPI::fromJsonValue(m_key_identifier, json[QString("keyIdentifier")]);
    m_key_identifier_isSet = !json[QString("keyIdentifier")].isNull() && m_key_identifier_isValid;

    m_key_value_isValid = ::OpenAPI::fromJsonValue(m_key_value, json[QString("keyValue")]);
    m_key_value_isSet = !json[QString("keyValue")].isNull() && m_key_value_isValid;
}

QString OAICustomerSecret::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICustomerSecret::asJsonObject() const {
    QJsonObject obj;
    if (m_algorithm_isSet) {
        obj.insert(QString("algorithm"), ::OpenAPI::toJsonValue(m_algorithm));
    }
    if (m_key_identifier_isSet) {
        obj.insert(QString("keyIdentifier"), ::OpenAPI::toJsonValue(m_key_identifier));
    }
    if (m_key_value_isSet) {
        obj.insert(QString("keyValue"), ::OpenAPI::toJsonValue(m_key_value));
    }
    return obj;
}

QString OAICustomerSecret::getAlgorithm() const {
    return m_algorithm;
}
void OAICustomerSecret::setAlgorithm(const QString &algorithm) {
    m_algorithm = algorithm;
    m_algorithm_isSet = true;
}

bool OAICustomerSecret::is_algorithm_Set() const{
    return m_algorithm_isSet;
}

bool OAICustomerSecret::is_algorithm_Valid() const{
    return m_algorithm_isValid;
}

QString OAICustomerSecret::getKeyIdentifier() const {
    return m_key_identifier;
}
void OAICustomerSecret::setKeyIdentifier(const QString &key_identifier) {
    m_key_identifier = key_identifier;
    m_key_identifier_isSet = true;
}

bool OAICustomerSecret::is_key_identifier_Set() const{
    return m_key_identifier_isSet;
}

bool OAICustomerSecret::is_key_identifier_Valid() const{
    return m_key_identifier_isValid;
}

QString OAICustomerSecret::getKeyValue() const {
    return m_key_value;
}
void OAICustomerSecret::setKeyValue(const QString &key_value) {
    m_key_value = key_value;
    m_key_value_isSet = true;
}

bool OAICustomerSecret::is_key_value_Set() const{
    return m_key_value_isSet;
}

bool OAICustomerSecret::is_key_value_Valid() const{
    return m_key_value_isValid;
}

bool OAICustomerSecret::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_algorithm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICustomerSecret::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_algorithm_isValid && m_key_identifier_isValid && m_key_value_isValid && true;
}

} // namespace OpenAPI
