/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKey.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKey::OAIKey(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKey::OAIKey() {
    this->initializeModel();
}

OAIKey::~OAIKey() {}

void OAIKey::initializeModel() {

    m_encryption_chunk_size_in_bytes_isSet = false;
    m_encryption_chunk_size_in_bytes_isValid = false;

    m_key_exponent_isSet = false;
    m_key_exponent_isValid = false;

    m_key_modulus_isSet = false;
    m_key_modulus_isValid = false;
}

void OAIKey::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKey::fromJsonObject(QJsonObject json) {

    m_encryption_chunk_size_in_bytes_isValid = ::OpenAPI::fromJsonValue(m_encryption_chunk_size_in_bytes, json[QString("encryptionChunkSizeInBytes")]);
    m_encryption_chunk_size_in_bytes_isSet = !json[QString("encryptionChunkSizeInBytes")].isNull() && m_encryption_chunk_size_in_bytes_isValid;

    m_key_exponent_isValid = ::OpenAPI::fromJsonValue(m_key_exponent, json[QString("keyExponent")]);
    m_key_exponent_isSet = !json[QString("keyExponent")].isNull() && m_key_exponent_isValid;

    m_key_modulus_isValid = ::OpenAPI::fromJsonValue(m_key_modulus, json[QString("keyModulus")]);
    m_key_modulus_isSet = !json[QString("keyModulus")].isNull() && m_key_modulus_isValid;
}

QString OAIKey::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKey::asJsonObject() const {
    QJsonObject obj;
    if (m_encryption_chunk_size_in_bytes_isSet) {
        obj.insert(QString("encryptionChunkSizeInBytes"), ::OpenAPI::toJsonValue(m_encryption_chunk_size_in_bytes));
    }
    if (m_key_exponent_isSet) {
        obj.insert(QString("keyExponent"), ::OpenAPI::toJsonValue(m_key_exponent));
    }
    if (m_key_modulus_isSet) {
        obj.insert(QString("keyModulus"), ::OpenAPI::toJsonValue(m_key_modulus));
    }
    return obj;
}

qint32 OAIKey::getEncryptionChunkSizeInBytes() const {
    return m_encryption_chunk_size_in_bytes;
}
void OAIKey::setEncryptionChunkSizeInBytes(const qint32 &encryption_chunk_size_in_bytes) {
    m_encryption_chunk_size_in_bytes = encryption_chunk_size_in_bytes;
    m_encryption_chunk_size_in_bytes_isSet = true;
}

bool OAIKey::is_encryption_chunk_size_in_bytes_Set() const{
    return m_encryption_chunk_size_in_bytes_isSet;
}

bool OAIKey::is_encryption_chunk_size_in_bytes_Valid() const{
    return m_encryption_chunk_size_in_bytes_isValid;
}

QString OAIKey::getKeyExponent() const {
    return m_key_exponent;
}
void OAIKey::setKeyExponent(const QString &key_exponent) {
    m_key_exponent = key_exponent;
    m_key_exponent_isSet = true;
}

bool OAIKey::is_key_exponent_Set() const{
    return m_key_exponent_isSet;
}

bool OAIKey::is_key_exponent_Valid() const{
    return m_key_exponent_isValid;
}

QString OAIKey::getKeyModulus() const {
    return m_key_modulus;
}
void OAIKey::setKeyModulus(const QString &key_modulus) {
    m_key_modulus = key_modulus;
    m_key_modulus_isSet = true;
}

bool OAIKey::is_key_modulus_Set() const{
    return m_key_modulus_isSet;
}

bool OAIKey::is_key_modulus_Valid() const{
    return m_key_modulus_isValid;
}

bool OAIKey::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_encryption_chunk_size_in_bytes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_exponent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_modulus_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKey::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_encryption_chunk_size_in_bytes_isValid && m_key_exponent_isValid && m_key_modulus_isValid && true;
}

} // namespace OpenAPI
