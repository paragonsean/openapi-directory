/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRunParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRunParameters::OAIRunParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRunParameters::OAIRunParameters() {
    this->initializeModel();
}

OAIRunParameters::~OAIRunParameters() {}

void OAIRunParameters::initializeModel() {

    m_customer_secrets_isSet = false;
    m_customer_secrets_isValid = false;

    m_data_service_input_isSet = false;
    m_data_service_input_isValid = false;

    m_user_confirmation_isSet = false;
    m_user_confirmation_isValid = false;
}

void OAIRunParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRunParameters::fromJsonObject(QJsonObject json) {

    m_customer_secrets_isValid = ::OpenAPI::fromJsonValue(m_customer_secrets, json[QString("customerSecrets")]);
    m_customer_secrets_isSet = !json[QString("customerSecrets")].isNull() && m_customer_secrets_isValid;

    m_data_service_input_isValid = ::OpenAPI::fromJsonValue(m_data_service_input, json[QString("dataServiceInput")]);
    m_data_service_input_isSet = !json[QString("dataServiceInput")].isNull() && m_data_service_input_isValid;

    m_user_confirmation_isValid = ::OpenAPI::fromJsonValue(m_user_confirmation, json[QString("userConfirmation")]);
    m_user_confirmation_isSet = !json[QString("userConfirmation")].isNull() && m_user_confirmation_isValid;
}

QString OAIRunParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRunParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_customer_secrets.size() > 0) {
        obj.insert(QString("customerSecrets"), ::OpenAPI::toJsonValue(m_customer_secrets));
    }
    if (m_data_service_input_isSet) {
        obj.insert(QString("dataServiceInput"), ::OpenAPI::toJsonValue(m_data_service_input));
    }
    if (m_user_confirmation_isSet) {
        obj.insert(QString("userConfirmation"), ::OpenAPI::toJsonValue(m_user_confirmation));
    }
    return obj;
}

QList<OAICustomerSecret> OAIRunParameters::getCustomerSecrets() const {
    return m_customer_secrets;
}
void OAIRunParameters::setCustomerSecrets(const QList<OAICustomerSecret> &customer_secrets) {
    m_customer_secrets = customer_secrets;
    m_customer_secrets_isSet = true;
}

bool OAIRunParameters::is_customer_secrets_Set() const{
    return m_customer_secrets_isSet;
}

bool OAIRunParameters::is_customer_secrets_Valid() const{
    return m_customer_secrets_isValid;
}

OAIObject OAIRunParameters::getDataServiceInput() const {
    return m_data_service_input;
}
void OAIRunParameters::setDataServiceInput(const OAIObject &data_service_input) {
    m_data_service_input = data_service_input;
    m_data_service_input_isSet = true;
}

bool OAIRunParameters::is_data_service_input_Set() const{
    return m_data_service_input_isSet;
}

bool OAIRunParameters::is_data_service_input_Valid() const{
    return m_data_service_input_isValid;
}

QString OAIRunParameters::getUserConfirmation() const {
    return m_user_confirmation;
}
void OAIRunParameters::setUserConfirmation(const QString &user_confirmation) {
    m_user_confirmation = user_confirmation;
    m_user_confirmation_isSet = true;
}

bool OAIRunParameters::is_user_confirmation_Set() const{
    return m_user_confirmation_isSet;
}

bool OAIRunParameters::is_user_confirmation_Valid() const{
    return m_user_confirmation_isValid;
}

bool OAIRunParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_customer_secrets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_service_input_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_confirmation_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRunParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
