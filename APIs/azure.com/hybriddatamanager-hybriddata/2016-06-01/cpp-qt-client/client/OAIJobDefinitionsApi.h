/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIJobDefinitionsApi_H
#define OAI_OAIJobDefinitionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIJobDefinition.h"
#include "OAIJobDefinitionList.h"
#include "OAIRunParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIJobDefinitionsApi : public QObject {
    Q_OBJECT

public:
    OAIJobDefinitionsApi(const int timeOut = 0);
    ~OAIJobDefinitionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  job_definition OAIJobDefinition [required]
    */
    virtual void jobDefinitionsCreateOrUpdate(const QString &data_service_name, const QString &job_definition_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const OAIJobDefinition &job_definition);

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobDefinitionsDelete(const QString &data_service_name, const QString &job_definition_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version);

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void jobDefinitionsGet(const QString &data_service_name, const QString &job_definition_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void jobDefinitionsListByDataManager(const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    */
    virtual void jobDefinitionsListByDataService(const QString &data_service_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  data_service_name QString [required]
    * @param[in]  job_definition_name QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  data_manager_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  run_parameters OAIRunParameters [required]
    */
    virtual void jobDefinitionsRun(const QString &data_service_name, const QString &job_definition_name, const QString &subscription_id, const QString &resource_group_name, const QString &data_manager_name, const QString &api_version, const OAIRunParameters &run_parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void jobDefinitionsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void jobDefinitionsDeleteCallback(OAIHttpRequestWorker *worker);
    void jobDefinitionsGetCallback(OAIHttpRequestWorker *worker);
    void jobDefinitionsListByDataManagerCallback(OAIHttpRequestWorker *worker);
    void jobDefinitionsListByDataServiceCallback(OAIHttpRequestWorker *worker);
    void jobDefinitionsRunCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void jobDefinitionsCreateOrUpdateSignal(OAIJobDefinition summary);
    void jobDefinitionsDeleteSignal();
    void jobDefinitionsGetSignal(OAIJobDefinition summary);
    void jobDefinitionsListByDataManagerSignal(OAIJobDefinitionList summary);
    void jobDefinitionsListByDataServiceSignal(OAIJobDefinitionList summary);
    void jobDefinitionsRunSignal();


    void jobDefinitionsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinition summary);
    void jobDefinitionsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void jobDefinitionsGetSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinition summary);
    void jobDefinitionsListByDataManagerSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinitionList summary);
    void jobDefinitionsListByDataServiceSignalFull(OAIHttpRequestWorker *worker, OAIJobDefinitionList summary);
    void jobDefinitionsRunSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use jobDefinitionsCreateOrUpdateSignalError() instead")
    void jobDefinitionsCreateOrUpdateSignalE(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsCreateOrUpdateSignalError(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsDeleteSignalError() instead")
    void jobDefinitionsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsGetSignalError() instead")
    void jobDefinitionsGetSignalE(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsGetSignalError(OAIJobDefinition summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsListByDataManagerSignalError() instead")
    void jobDefinitionsListByDataManagerSignalE(OAIJobDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsListByDataManagerSignalError(OAIJobDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsListByDataServiceSignalError() instead")
    void jobDefinitionsListByDataServiceSignalE(OAIJobDefinitionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsListByDataServiceSignalError(OAIJobDefinitionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsRunSignalError() instead")
    void jobDefinitionsRunSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsRunSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use jobDefinitionsCreateOrUpdateSignalErrorFull() instead")
    void jobDefinitionsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsDeleteSignalErrorFull() instead")
    void jobDefinitionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsGetSignalErrorFull() instead")
    void jobDefinitionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsListByDataManagerSignalErrorFull() instead")
    void jobDefinitionsListByDataManagerSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsListByDataManagerSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsListByDataServiceSignalErrorFull() instead")
    void jobDefinitionsListByDataServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsListByDataServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use jobDefinitionsRunSignalErrorFull() instead")
    void jobDefinitionsRunSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void jobDefinitionsRunSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
