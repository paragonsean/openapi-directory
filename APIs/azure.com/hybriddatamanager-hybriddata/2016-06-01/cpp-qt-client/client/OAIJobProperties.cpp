/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJobProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJobProperties::OAIJobProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJobProperties::OAIJobProperties() {
    this->initializeModel();
}

OAIJobProperties::~OAIJobProperties() {}

void OAIJobProperties::initializeModel() {

    m_bytes_processed_isSet = false;
    m_bytes_processed_isValid = false;

    m_data_sink_name_isSet = false;
    m_data_sink_name_isValid = false;

    m_data_source_name_isSet = false;
    m_data_source_name_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_is_cancellable_isSet = false;
    m_is_cancellable_isValid = false;

    m_items_processed_isSet = false;
    m_items_processed_isValid = false;

    m_total_bytes_to_process_isSet = false;
    m_total_bytes_to_process_isValid = false;

    m_total_items_to_process_isSet = false;
    m_total_items_to_process_isValid = false;
}

void OAIJobProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJobProperties::fromJsonObject(QJsonObject json) {

    m_bytes_processed_isValid = ::OpenAPI::fromJsonValue(m_bytes_processed, json[QString("bytesProcessed")]);
    m_bytes_processed_isSet = !json[QString("bytesProcessed")].isNull() && m_bytes_processed_isValid;

    m_data_sink_name_isValid = ::OpenAPI::fromJsonValue(m_data_sink_name, json[QString("dataSinkName")]);
    m_data_sink_name_isSet = !json[QString("dataSinkName")].isNull() && m_data_sink_name_isValid;

    m_data_source_name_isValid = ::OpenAPI::fromJsonValue(m_data_source_name, json[QString("dataSourceName")]);
    m_data_source_name_isSet = !json[QString("dataSourceName")].isNull() && m_data_source_name_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_is_cancellable_isValid = ::OpenAPI::fromJsonValue(m_is_cancellable, json[QString("isCancellable")]);
    m_is_cancellable_isSet = !json[QString("isCancellable")].isNull() && m_is_cancellable_isValid;

    m_items_processed_isValid = ::OpenAPI::fromJsonValue(m_items_processed, json[QString("itemsProcessed")]);
    m_items_processed_isSet = !json[QString("itemsProcessed")].isNull() && m_items_processed_isValid;

    m_total_bytes_to_process_isValid = ::OpenAPI::fromJsonValue(m_total_bytes_to_process, json[QString("totalBytesToProcess")]);
    m_total_bytes_to_process_isSet = !json[QString("totalBytesToProcess")].isNull() && m_total_bytes_to_process_isValid;

    m_total_items_to_process_isValid = ::OpenAPI::fromJsonValue(m_total_items_to_process, json[QString("totalItemsToProcess")]);
    m_total_items_to_process_isSet = !json[QString("totalItemsToProcess")].isNull() && m_total_items_to_process_isValid;
}

QString OAIJobProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJobProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_bytes_processed_isSet) {
        obj.insert(QString("bytesProcessed"), ::OpenAPI::toJsonValue(m_bytes_processed));
    }
    if (m_data_sink_name_isSet) {
        obj.insert(QString("dataSinkName"), ::OpenAPI::toJsonValue(m_data_sink_name));
    }
    if (m_data_source_name_isSet) {
        obj.insert(QString("dataSourceName"), ::OpenAPI::toJsonValue(m_data_source_name));
    }
    if (m_details.isSet()) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_is_cancellable_isSet) {
        obj.insert(QString("isCancellable"), ::OpenAPI::toJsonValue(m_is_cancellable));
    }
    if (m_items_processed_isSet) {
        obj.insert(QString("itemsProcessed"), ::OpenAPI::toJsonValue(m_items_processed));
    }
    if (m_total_bytes_to_process_isSet) {
        obj.insert(QString("totalBytesToProcess"), ::OpenAPI::toJsonValue(m_total_bytes_to_process));
    }
    if (m_total_items_to_process_isSet) {
        obj.insert(QString("totalItemsToProcess"), ::OpenAPI::toJsonValue(m_total_items_to_process));
    }
    return obj;
}

qint64 OAIJobProperties::getBytesProcessed() const {
    return m_bytes_processed;
}
void OAIJobProperties::setBytesProcessed(const qint64 &bytes_processed) {
    m_bytes_processed = bytes_processed;
    m_bytes_processed_isSet = true;
}

bool OAIJobProperties::is_bytes_processed_Set() const{
    return m_bytes_processed_isSet;
}

bool OAIJobProperties::is_bytes_processed_Valid() const{
    return m_bytes_processed_isValid;
}

QString OAIJobProperties::getDataSinkName() const {
    return m_data_sink_name;
}
void OAIJobProperties::setDataSinkName(const QString &data_sink_name) {
    m_data_sink_name = data_sink_name;
    m_data_sink_name_isSet = true;
}

bool OAIJobProperties::is_data_sink_name_Set() const{
    return m_data_sink_name_isSet;
}

bool OAIJobProperties::is_data_sink_name_Valid() const{
    return m_data_sink_name_isValid;
}

QString OAIJobProperties::getDataSourceName() const {
    return m_data_source_name;
}
void OAIJobProperties::setDataSourceName(const QString &data_source_name) {
    m_data_source_name = data_source_name;
    m_data_source_name_isSet = true;
}

bool OAIJobProperties::is_data_source_name_Set() const{
    return m_data_source_name_isSet;
}

bool OAIJobProperties::is_data_source_name_Valid() const{
    return m_data_source_name_isValid;
}

OAIJobDetails OAIJobProperties::getDetails() const {
    return m_details;
}
void OAIJobProperties::setDetails(const OAIJobDetails &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIJobProperties::is_details_Set() const{
    return m_details_isSet;
}

bool OAIJobProperties::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIJobProperties::getIsCancellable() const {
    return m_is_cancellable;
}
void OAIJobProperties::setIsCancellable(const QString &is_cancellable) {
    m_is_cancellable = is_cancellable;
    m_is_cancellable_isSet = true;
}

bool OAIJobProperties::is_is_cancellable_Set() const{
    return m_is_cancellable_isSet;
}

bool OAIJobProperties::is_is_cancellable_Valid() const{
    return m_is_cancellable_isValid;
}

qint64 OAIJobProperties::getItemsProcessed() const {
    return m_items_processed;
}
void OAIJobProperties::setItemsProcessed(const qint64 &items_processed) {
    m_items_processed = items_processed;
    m_items_processed_isSet = true;
}

bool OAIJobProperties::is_items_processed_Set() const{
    return m_items_processed_isSet;
}

bool OAIJobProperties::is_items_processed_Valid() const{
    return m_items_processed_isValid;
}

qint64 OAIJobProperties::getTotalBytesToProcess() const {
    return m_total_bytes_to_process;
}
void OAIJobProperties::setTotalBytesToProcess(const qint64 &total_bytes_to_process) {
    m_total_bytes_to_process = total_bytes_to_process;
    m_total_bytes_to_process_isSet = true;
}

bool OAIJobProperties::is_total_bytes_to_process_Set() const{
    return m_total_bytes_to_process_isSet;
}

bool OAIJobProperties::is_total_bytes_to_process_Valid() const{
    return m_total_bytes_to_process_isValid;
}

qint64 OAIJobProperties::getTotalItemsToProcess() const {
    return m_total_items_to_process;
}
void OAIJobProperties::setTotalItemsToProcess(const qint64 &total_items_to_process) {
    m_total_items_to_process = total_items_to_process;
    m_total_items_to_process_isSet = true;
}

bool OAIJobProperties::is_total_items_to_process_Set() const{
    return m_total_items_to_process_isSet;
}

bool OAIJobProperties::is_total_items_to_process_Valid() const{
    return m_total_items_to_process_isValid;
}

bool OAIJobProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bytes_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_sink_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_source_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_cancellable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_items_processed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_bytes_to_process_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_items_to_process_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJobProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_is_cancellable_isValid && true;
}

} // namespace OpenAPI
