/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDataServiceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDataServiceProperties::OAIDataServiceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDataServiceProperties::OAIDataServiceProperties() {
    this->initializeModel();
}

OAIDataServiceProperties::~OAIDataServiceProperties() {}

void OAIDataServiceProperties::initializeModel() {

    m_state_isSet = false;
    m_state_isValid = false;

    m_supported_data_sink_types_isSet = false;
    m_supported_data_sink_types_isValid = false;

    m_supported_data_source_types_isSet = false;
    m_supported_data_source_types_isValid = false;
}

void OAIDataServiceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDataServiceProperties::fromJsonObject(QJsonObject json) {

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_supported_data_sink_types_isValid = ::OpenAPI::fromJsonValue(m_supported_data_sink_types, json[QString("supportedDataSinkTypes")]);
    m_supported_data_sink_types_isSet = !json[QString("supportedDataSinkTypes")].isNull() && m_supported_data_sink_types_isValid;

    m_supported_data_source_types_isValid = ::OpenAPI::fromJsonValue(m_supported_data_source_types, json[QString("supportedDataSourceTypes")]);
    m_supported_data_source_types_isSet = !json[QString("supportedDataSourceTypes")].isNull() && m_supported_data_source_types_isValid;
}

QString OAIDataServiceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDataServiceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_supported_data_sink_types.size() > 0) {
        obj.insert(QString("supportedDataSinkTypes"), ::OpenAPI::toJsonValue(m_supported_data_sink_types));
    }
    if (m_supported_data_source_types.size() > 0) {
        obj.insert(QString("supportedDataSourceTypes"), ::OpenAPI::toJsonValue(m_supported_data_source_types));
    }
    return obj;
}

QString OAIDataServiceProperties::getState() const {
    return m_state;
}
void OAIDataServiceProperties::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIDataServiceProperties::is_state_Set() const{
    return m_state_isSet;
}

bool OAIDataServiceProperties::is_state_Valid() const{
    return m_state_isValid;
}

QList<QString> OAIDataServiceProperties::getSupportedDataSinkTypes() const {
    return m_supported_data_sink_types;
}
void OAIDataServiceProperties::setSupportedDataSinkTypes(const QList<QString> &supported_data_sink_types) {
    m_supported_data_sink_types = supported_data_sink_types;
    m_supported_data_sink_types_isSet = true;
}

bool OAIDataServiceProperties::is_supported_data_sink_types_Set() const{
    return m_supported_data_sink_types_isSet;
}

bool OAIDataServiceProperties::is_supported_data_sink_types_Valid() const{
    return m_supported_data_sink_types_isValid;
}

QList<QString> OAIDataServiceProperties::getSupportedDataSourceTypes() const {
    return m_supported_data_source_types;
}
void OAIDataServiceProperties::setSupportedDataSourceTypes(const QList<QString> &supported_data_source_types) {
    m_supported_data_source_types = supported_data_source_types;
    m_supported_data_source_types_isSet = true;
}

bool OAIDataServiceProperties::is_supported_data_source_types_Set() const{
    return m_supported_data_source_types_isSet;
}

bool OAIDataServiceProperties::is_supported_data_source_types_Valid() const{
    return m_supported_data_source_types_isValid;
}

bool OAIDataServiceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_sink_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supported_data_source_types.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDataServiceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_isValid && true;
}

} // namespace OpenAPI
