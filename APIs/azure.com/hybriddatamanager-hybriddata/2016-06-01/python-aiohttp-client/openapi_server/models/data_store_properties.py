# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_secret import CustomerSecret
from openapi_server import util


class DataStoreProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_secrets: List[CustomerSecret]=None, data_store_type_id: str=None, extended_properties: object=None, repository_id: str=None, state: str=None):
        """DataStoreProperties - a model defined in OpenAPI

        :param customer_secrets: The customer_secrets of this DataStoreProperties.
        :param data_store_type_id: The data_store_type_id of this DataStoreProperties.
        :param extended_properties: The extended_properties of this DataStoreProperties.
        :param repository_id: The repository_id of this DataStoreProperties.
        :param state: The state of this DataStoreProperties.
        """
        self.openapi_types = {
            'customer_secrets': List[CustomerSecret],
            'data_store_type_id': str,
            'extended_properties': object,
            'repository_id': str,
            'state': str
        }

        self.attribute_map = {
            'customer_secrets': 'customerSecrets',
            'data_store_type_id': 'dataStoreTypeId',
            'extended_properties': 'extendedProperties',
            'repository_id': 'repositoryId',
            'state': 'state'
        }

        self._customer_secrets = customer_secrets
        self._data_store_type_id = data_store_type_id
        self._extended_properties = extended_properties
        self._repository_id = repository_id
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataStoreProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataStoreProperties of this DataStoreProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_secrets(self):
        """Gets the customer_secrets of this DataStoreProperties.

        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.

        :return: The customer_secrets of this DataStoreProperties.
        :rtype: List[CustomerSecret]
        """
        return self._customer_secrets

    @customer_secrets.setter
    def customer_secrets(self, customer_secrets):
        """Sets the customer_secrets of this DataStoreProperties.

        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.

        :param customer_secrets: The customer_secrets of this DataStoreProperties.
        :type customer_secrets: List[CustomerSecret]
        """

        self._customer_secrets = customer_secrets

    @property
    def data_store_type_id(self):
        """Gets the data_store_type_id of this DataStoreProperties.

        The arm id of the data store type.

        :return: The data_store_type_id of this DataStoreProperties.
        :rtype: str
        """
        return self._data_store_type_id

    @data_store_type_id.setter
    def data_store_type_id(self, data_store_type_id):
        """Sets the data_store_type_id of this DataStoreProperties.

        The arm id of the data store type.

        :param data_store_type_id: The data_store_type_id of this DataStoreProperties.
        :type data_store_type_id: str
        """
        if data_store_type_id is None:
            raise ValueError("Invalid value for `data_store_type_id`, must not be `None`")

        self._data_store_type_id = data_store_type_id

    @property
    def extended_properties(self):
        """Gets the extended_properties of this DataStoreProperties.

        A generic json used differently by each data source type.

        :return: The extended_properties of this DataStoreProperties.
        :rtype: object
        """
        return self._extended_properties

    @extended_properties.setter
    def extended_properties(self, extended_properties):
        """Sets the extended_properties of this DataStoreProperties.

        A generic json used differently by each data source type.

        :param extended_properties: The extended_properties of this DataStoreProperties.
        :type extended_properties: object
        """

        self._extended_properties = extended_properties

    @property
    def repository_id(self):
        """Gets the repository_id of this DataStoreProperties.

        Arm Id for the manager resource to which the data source is associated. This is optional.

        :return: The repository_id of this DataStoreProperties.
        :rtype: str
        """
        return self._repository_id

    @repository_id.setter
    def repository_id(self, repository_id):
        """Sets the repository_id of this DataStoreProperties.

        Arm Id for the manager resource to which the data source is associated. This is optional.

        :param repository_id: The repository_id of this DataStoreProperties.
        :type repository_id: str
        """

        self._repository_id = repository_id

    @property
    def state(self):
        """Gets the state of this DataStoreProperties.

        State of the data source.

        :return: The state of this DataStoreProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataStoreProperties.

        State of the data source.

        :param state: The state of this DataStoreProperties.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled", "Supported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
