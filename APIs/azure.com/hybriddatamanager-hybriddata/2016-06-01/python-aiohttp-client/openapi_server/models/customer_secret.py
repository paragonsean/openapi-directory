# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomerSecret(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, algorithm: str=None, key_identifier: str=None, key_value: str=None):
        """CustomerSecret - a model defined in OpenAPI

        :param algorithm: The algorithm of this CustomerSecret.
        :param key_identifier: The key_identifier of this CustomerSecret.
        :param key_value: The key_value of this CustomerSecret.
        """
        self.openapi_types = {
            'algorithm': str,
            'key_identifier': str,
            'key_value': str
        }

        self.attribute_map = {
            'algorithm': 'algorithm',
            'key_identifier': 'keyIdentifier',
            'key_value': 'keyValue'
        }

        self._algorithm = algorithm
        self._key_identifier = key_identifier
        self._key_value = key_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CustomerSecret':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CustomerSecret of this CustomerSecret.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def algorithm(self):
        """Gets the algorithm of this CustomerSecret.

        The encryption algorithm used to encrypt data.

        :return: The algorithm of this CustomerSecret.
        :rtype: str
        """
        return self._algorithm

    @algorithm.setter
    def algorithm(self, algorithm):
        """Sets the algorithm of this CustomerSecret.

        The encryption algorithm used to encrypt data.

        :param algorithm: The algorithm of this CustomerSecret.
        :type algorithm: str
        """
        allowed_values = ["None", "RSA1_5", "RSA_OAEP", "PlainText"]  # noqa: E501
        if algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `algorithm` ({0}), must be one of {1}"
                .format(algorithm, allowed_values)
            )

        self._algorithm = algorithm

    @property
    def key_identifier(self):
        """Gets the key_identifier of this CustomerSecret.

        The identifier to the data service input object which this secret corresponds to.

        :return: The key_identifier of this CustomerSecret.
        :rtype: str
        """
        return self._key_identifier

    @key_identifier.setter
    def key_identifier(self, key_identifier):
        """Sets the key_identifier of this CustomerSecret.

        The identifier to the data service input object which this secret corresponds to.

        :param key_identifier: The key_identifier of this CustomerSecret.
        :type key_identifier: str
        """
        if key_identifier is None:
            raise ValueError("Invalid value for `key_identifier`, must not be `None`")

        self._key_identifier = key_identifier

    @property
    def key_value(self):
        """Gets the key_value of this CustomerSecret.

        It contains the encrypted customer secret.

        :return: The key_value of this CustomerSecret.
        :rtype: str
        """
        return self._key_value

    @key_value.setter
    def key_value(self, key_value):
        """Sets the key_value of this CustomerSecret.

        It contains the encrypted customer secret.

        :param key_value: The key_value of this CustomerSecret.
        :type key_value: str
        """
        if key_value is None:
            raise ValueError("Invalid value for `key_value`, must not be `None`")

        self._key_value = key_value
