# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_secret import CustomerSecret
from openapi_server import util


class RunParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_secrets: List[CustomerSecret]=None, data_service_input: object=None, user_confirmation: str='NotRequired'):
        """RunParameters - a model defined in OpenAPI

        :param customer_secrets: The customer_secrets of this RunParameters.
        :param data_service_input: The data_service_input of this RunParameters.
        :param user_confirmation: The user_confirmation of this RunParameters.
        """
        self.openapi_types = {
            'customer_secrets': List[CustomerSecret],
            'data_service_input': object,
            'user_confirmation': str
        }

        self.attribute_map = {
            'customer_secrets': 'customerSecrets',
            'data_service_input': 'dataServiceInput',
            'user_confirmation': 'userConfirmation'
        }

        self._customer_secrets = customer_secrets
        self._data_service_input = data_service_input
        self._user_confirmation = user_confirmation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RunParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RunParameters of this RunParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_secrets(self):
        """Gets the customer_secrets of this RunParameters.

        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.

        :return: The customer_secrets of this RunParameters.
        :rtype: List[CustomerSecret]
        """
        return self._customer_secrets

    @customer_secrets.setter
    def customer_secrets(self, customer_secrets):
        """Sets the customer_secrets of this RunParameters.

        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.

        :param customer_secrets: The customer_secrets of this RunParameters.
        :type customer_secrets: List[CustomerSecret]
        """

        self._customer_secrets = customer_secrets

    @property
    def data_service_input(self):
        """Gets the data_service_input of this RunParameters.

        A generic json used differently by each data service type.

        :return: The data_service_input of this RunParameters.
        :rtype: object
        """
        return self._data_service_input

    @data_service_input.setter
    def data_service_input(self, data_service_input):
        """Sets the data_service_input of this RunParameters.

        A generic json used differently by each data service type.

        :param data_service_input: The data_service_input of this RunParameters.
        :type data_service_input: object
        """

        self._data_service_input = data_service_input

    @property
    def user_confirmation(self):
        """Gets the user_confirmation of this RunParameters.

        Enum to detect if user confirmation is required. If not passed will default to NotRequired.

        :return: The user_confirmation of this RunParameters.
        :rtype: str
        """
        return self._user_confirmation

    @user_confirmation.setter
    def user_confirmation(self, user_confirmation):
        """Sets the user_confirmation of this RunParameters.

        Enum to detect if user confirmation is required. If not passed will default to NotRequired.

        :param user_confirmation: The user_confirmation of this RunParameters.
        :type user_confirmation: str
        """
        allowed_values = ["NotRequired", "Required"]  # noqa: E501
        if user_confirmation not in allowed_values:
            raise ValueError(
                "Invalid value for `user_confirmation` ({0}), must be one of {1}"
                .format(user_confirmation, allowed_values)
            )

        self._user_confirmation = user_confirmation
