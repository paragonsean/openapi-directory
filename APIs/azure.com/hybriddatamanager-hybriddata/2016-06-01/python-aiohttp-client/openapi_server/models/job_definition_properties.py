# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.customer_secret import CustomerSecret
from openapi_server.models.schedule import Schedule
from openapi_server import util


class JobDefinitionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, customer_secrets: List[CustomerSecret]=None, data_service_input: object=None, data_sink_id: str=None, data_source_id: str=None, last_modified_time: datetime=None, run_location: str=None, schedules: List[Schedule]=None, state: str=None, user_confirmation: str='NotRequired'):
        """JobDefinitionProperties - a model defined in OpenAPI

        :param customer_secrets: The customer_secrets of this JobDefinitionProperties.
        :param data_service_input: The data_service_input of this JobDefinitionProperties.
        :param data_sink_id: The data_sink_id of this JobDefinitionProperties.
        :param data_source_id: The data_source_id of this JobDefinitionProperties.
        :param last_modified_time: The last_modified_time of this JobDefinitionProperties.
        :param run_location: The run_location of this JobDefinitionProperties.
        :param schedules: The schedules of this JobDefinitionProperties.
        :param state: The state of this JobDefinitionProperties.
        :param user_confirmation: The user_confirmation of this JobDefinitionProperties.
        """
        self.openapi_types = {
            'customer_secrets': List[CustomerSecret],
            'data_service_input': object,
            'data_sink_id': str,
            'data_source_id': str,
            'last_modified_time': datetime,
            'run_location': str,
            'schedules': List[Schedule],
            'state': str,
            'user_confirmation': str
        }

        self.attribute_map = {
            'customer_secrets': 'customerSecrets',
            'data_service_input': 'dataServiceInput',
            'data_sink_id': 'dataSinkId',
            'data_source_id': 'dataSourceId',
            'last_modified_time': 'lastModifiedTime',
            'run_location': 'runLocation',
            'schedules': 'schedules',
            'state': 'state',
            'user_confirmation': 'userConfirmation'
        }

        self._customer_secrets = customer_secrets
        self._data_service_input = data_service_input
        self._data_sink_id = data_sink_id
        self._data_source_id = data_source_id
        self._last_modified_time = last_modified_time
        self._run_location = run_location
        self._schedules = schedules
        self._state = state
        self._user_confirmation = user_confirmation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDefinitionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDefinitionProperties of this JobDefinitionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def customer_secrets(self):
        """Gets the customer_secrets of this JobDefinitionProperties.

        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.

        :return: The customer_secrets of this JobDefinitionProperties.
        :rtype: List[CustomerSecret]
        """
        return self._customer_secrets

    @customer_secrets.setter
    def customer_secrets(self, customer_secrets):
        """Sets the customer_secrets of this JobDefinitionProperties.

        List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.

        :param customer_secrets: The customer_secrets of this JobDefinitionProperties.
        :type customer_secrets: List[CustomerSecret]
        """

        self._customer_secrets = customer_secrets

    @property
    def data_service_input(self):
        """Gets the data_service_input of this JobDefinitionProperties.

        A generic json used differently by each data service type.

        :return: The data_service_input of this JobDefinitionProperties.
        :rtype: object
        """
        return self._data_service_input

    @data_service_input.setter
    def data_service_input(self, data_service_input):
        """Sets the data_service_input of this JobDefinitionProperties.

        A generic json used differently by each data service type.

        :param data_service_input: The data_service_input of this JobDefinitionProperties.
        :type data_service_input: object
        """

        self._data_service_input = data_service_input

    @property
    def data_sink_id(self):
        """Gets the data_sink_id of this JobDefinitionProperties.

        Data Sink Id associated to the job definition.

        :return: The data_sink_id of this JobDefinitionProperties.
        :rtype: str
        """
        return self._data_sink_id

    @data_sink_id.setter
    def data_sink_id(self, data_sink_id):
        """Sets the data_sink_id of this JobDefinitionProperties.

        Data Sink Id associated to the job definition.

        :param data_sink_id: The data_sink_id of this JobDefinitionProperties.
        :type data_sink_id: str
        """
        if data_sink_id is None:
            raise ValueError("Invalid value for `data_sink_id`, must not be `None`")

        self._data_sink_id = data_sink_id

    @property
    def data_source_id(self):
        """Gets the data_source_id of this JobDefinitionProperties.

        Data Source Id associated to the job definition.

        :return: The data_source_id of this JobDefinitionProperties.
        :rtype: str
        """
        return self._data_source_id

    @data_source_id.setter
    def data_source_id(self, data_source_id):
        """Sets the data_source_id of this JobDefinitionProperties.

        Data Source Id associated to the job definition.

        :param data_source_id: The data_source_id of this JobDefinitionProperties.
        :type data_source_id: str
        """
        if data_source_id is None:
            raise ValueError("Invalid value for `data_source_id`, must not be `None`")

        self._data_source_id = data_source_id

    @property
    def last_modified_time(self):
        """Gets the last_modified_time of this JobDefinitionProperties.

        Last modified time of the job definition.

        :return: The last_modified_time of this JobDefinitionProperties.
        :rtype: datetime
        """
        return self._last_modified_time

    @last_modified_time.setter
    def last_modified_time(self, last_modified_time):
        """Sets the last_modified_time of this JobDefinitionProperties.

        Last modified time of the job definition.

        :param last_modified_time: The last_modified_time of this JobDefinitionProperties.
        :type last_modified_time: datetime
        """

        self._last_modified_time = last_modified_time

    @property
    def run_location(self):
        """Gets the run_location of this JobDefinitionProperties.

        This is the preferred geo location for the job to run.

        :return: The run_location of this JobDefinitionProperties.
        :rtype: str
        """
        return self._run_location

    @run_location.setter
    def run_location(self, run_location):
        """Sets the run_location of this JobDefinitionProperties.

        This is the preferred geo location for the job to run.

        :param run_location: The run_location of this JobDefinitionProperties.
        :type run_location: str
        """
        allowed_values = ["none", "australiaeast", "australiasoutheast", "brazilsouth", "canadacentral", "canadaeast", "centralindia", "centralus", "eastasia", "eastus", "eastus2", "japaneast", "japanwest", "koreacentral", "koreasouth", "southeastasia", "southcentralus", "southindia", "northcentralus", "northeurope", "uksouth", "ukwest", "westcentralus", "westeurope", "westindia", "westus", "westus2"]  # noqa: E501
        if run_location not in allowed_values:
            raise ValueError(
                "Invalid value for `run_location` ({0}), must be one of {1}"
                .format(run_location, allowed_values)
            )

        self._run_location = run_location

    @property
    def schedules(self):
        """Gets the schedules of this JobDefinitionProperties.

        Schedule for running the job definition

        :return: The schedules of this JobDefinitionProperties.
        :rtype: List[Schedule]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this JobDefinitionProperties.

        Schedule for running the job definition

        :param schedules: The schedules of this JobDefinitionProperties.
        :type schedules: List[Schedule]
        """

        self._schedules = schedules

    @property
    def state(self):
        """Gets the state of this JobDefinitionProperties.

        State of the job definition.

        :return: The state of this JobDefinitionProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobDefinitionProperties.

        State of the job definition.

        :param state: The state of this JobDefinitionProperties.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled", "Supported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def user_confirmation(self):
        """Gets the user_confirmation of this JobDefinitionProperties.

        Enum to detect if user confirmation is required. If not passed will default to NotRequired.

        :return: The user_confirmation of this JobDefinitionProperties.
        :rtype: str
        """
        return self._user_confirmation

    @user_confirmation.setter
    def user_confirmation(self, user_confirmation):
        """Sets the user_confirmation of this JobDefinitionProperties.

        Enum to detect if user confirmation is required. If not passed will default to NotRequired.

        :param user_confirmation: The user_confirmation of this JobDefinitionProperties.
        :type user_confirmation: str
        """
        allowed_values = ["NotRequired", "Required"]  # noqa: E501
        if user_confirmation not in allowed_values:
            raise ValueError(
                "Invalid value for `user_confirmation` ({0}), must be one of {1}"
                .format(user_confirmation, allowed_values)
            )

        self._user_confirmation = user_confirmation
