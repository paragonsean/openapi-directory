# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataStoreTypeProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, repository_type: str=None, state: str=None, supported_data_services_as_sink: List[str]=None, supported_data_services_as_source: List[str]=None):
        """DataStoreTypeProperties - a model defined in OpenAPI

        :param repository_type: The repository_type of this DataStoreTypeProperties.
        :param state: The state of this DataStoreTypeProperties.
        :param supported_data_services_as_sink: The supported_data_services_as_sink of this DataStoreTypeProperties.
        :param supported_data_services_as_source: The supported_data_services_as_source of this DataStoreTypeProperties.
        """
        self.openapi_types = {
            'repository_type': str,
            'state': str,
            'supported_data_services_as_sink': List[str],
            'supported_data_services_as_source': List[str]
        }

        self.attribute_map = {
            'repository_type': 'repositoryType',
            'state': 'state',
            'supported_data_services_as_sink': 'supportedDataServicesAsSink',
            'supported_data_services_as_source': 'supportedDataServicesAsSource'
        }

        self._repository_type = repository_type
        self._state = state
        self._supported_data_services_as_sink = supported_data_services_as_sink
        self._supported_data_services_as_source = supported_data_services_as_source

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataStoreTypeProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataStoreTypeProperties of this DataStoreTypeProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def repository_type(self):
        """Gets the repository_type of this DataStoreTypeProperties.

        Arm type for the manager resource to which the data source type is associated. This is optional.

        :return: The repository_type of this DataStoreTypeProperties.
        :rtype: str
        """
        return self._repository_type

    @repository_type.setter
    def repository_type(self, repository_type):
        """Sets the repository_type of this DataStoreTypeProperties.

        Arm type for the manager resource to which the data source type is associated. This is optional.

        :param repository_type: The repository_type of this DataStoreTypeProperties.
        :type repository_type: str
        """

        self._repository_type = repository_type

    @property
    def state(self):
        """Gets the state of this DataStoreTypeProperties.

        State of the data store type.

        :return: The state of this DataStoreTypeProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataStoreTypeProperties.

        State of the data store type.

        :param state: The state of this DataStoreTypeProperties.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled", "Supported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def supported_data_services_as_sink(self):
        """Gets the supported_data_services_as_sink of this DataStoreTypeProperties.

        Supported data services where it can be used as a sink.

        :return: The supported_data_services_as_sink of this DataStoreTypeProperties.
        :rtype: List[str]
        """
        return self._supported_data_services_as_sink

    @supported_data_services_as_sink.setter
    def supported_data_services_as_sink(self, supported_data_services_as_sink):
        """Sets the supported_data_services_as_sink of this DataStoreTypeProperties.

        Supported data services where it can be used as a sink.

        :param supported_data_services_as_sink: The supported_data_services_as_sink of this DataStoreTypeProperties.
        :type supported_data_services_as_sink: List[str]
        """

        self._supported_data_services_as_sink = supported_data_services_as_sink

    @property
    def supported_data_services_as_source(self):
        """Gets the supported_data_services_as_source of this DataStoreTypeProperties.

        Supported data services where it can be used as a source.

        :return: The supported_data_services_as_source of this DataStoreTypeProperties.
        :rtype: List[str]
        """
        return self._supported_data_services_as_source

    @supported_data_services_as_source.setter
    def supported_data_services_as_source(self, supported_data_services_as_source):
        """Sets the supported_data_services_as_source of this DataStoreTypeProperties.

        Supported data services where it can be used as a source.

        :param supported_data_services_as_source: The supported_data_services_as_source of this DataStoreTypeProperties.
        :type supported_data_services_as_source: List[str]
        """

        self._supported_data_services_as_source = supported_data_services_as_source
