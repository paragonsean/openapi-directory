# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Key(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encryption_chunk_size_in_bytes: int=None, key_exponent: str=None, key_modulus: str=None):
        """Key - a model defined in OpenAPI

        :param encryption_chunk_size_in_bytes: The encryption_chunk_size_in_bytes of this Key.
        :param key_exponent: The key_exponent of this Key.
        :param key_modulus: The key_modulus of this Key.
        """
        self.openapi_types = {
            'encryption_chunk_size_in_bytes': int,
            'key_exponent': str,
            'key_modulus': str
        }

        self.attribute_map = {
            'encryption_chunk_size_in_bytes': 'encryptionChunkSizeInBytes',
            'key_exponent': 'keyExponent',
            'key_modulus': 'keyModulus'
        }

        self._encryption_chunk_size_in_bytes = encryption_chunk_size_in_bytes
        self._key_exponent = key_exponent
        self._key_modulus = key_modulus

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Key':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Key of this Key.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encryption_chunk_size_in_bytes(self):
        """Gets the encryption_chunk_size_in_bytes of this Key.

        The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk.

        :return: The encryption_chunk_size_in_bytes of this Key.
        :rtype: int
        """
        return self._encryption_chunk_size_in_bytes

    @encryption_chunk_size_in_bytes.setter
    def encryption_chunk_size_in_bytes(self, encryption_chunk_size_in_bytes):
        """Sets the encryption_chunk_size_in_bytes of this Key.

        The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk.

        :param encryption_chunk_size_in_bytes: The encryption_chunk_size_in_bytes of this Key.
        :type encryption_chunk_size_in_bytes: int
        """
        if encryption_chunk_size_in_bytes is None:
            raise ValueError("Invalid value for `encryption_chunk_size_in_bytes`, must not be `None`")

        self._encryption_chunk_size_in_bytes = encryption_chunk_size_in_bytes

    @property
    def key_exponent(self):
        """Gets the key_exponent of this Key.

        Exponent of the encryption key.

        :return: The key_exponent of this Key.
        :rtype: str
        """
        return self._key_exponent

    @key_exponent.setter
    def key_exponent(self, key_exponent):
        """Sets the key_exponent of this Key.

        Exponent of the encryption key.

        :param key_exponent: The key_exponent of this Key.
        :type key_exponent: str
        """
        if key_exponent is None:
            raise ValueError("Invalid value for `key_exponent`, must not be `None`")

        self._key_exponent = key_exponent

    @property
    def key_modulus(self):
        """Gets the key_modulus of this Key.

        Modulus of the encryption key.

        :return: The key_modulus of this Key.
        :rtype: str
        """
        return self._key_modulus

    @key_modulus.setter
    def key_modulus(self, key_modulus):
        """Sets the key_modulus of this Key.

        Modulus of the encryption key.

        :param key_modulus: The key_modulus of this Key.
        :type key_modulus: str
        """
        if key_modulus is None:
            raise ValueError("Invalid value for `key_modulus`, must not be `None`")

        self._key_modulus = key_modulus
