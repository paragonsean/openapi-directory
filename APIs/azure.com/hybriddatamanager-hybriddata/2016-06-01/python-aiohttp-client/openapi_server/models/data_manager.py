# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.sku import Sku
from openapi_server import util


class DataManager(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, etag: str=None, id: str=None, location: str=None, name: str=None, sku: Sku=None, tags: Dict[str, str]=None, type: str=None):
        """DataManager - a model defined in OpenAPI

        :param etag: The etag of this DataManager.
        :param id: The id of this DataManager.
        :param location: The location of this DataManager.
        :param name: The name of this DataManager.
        :param sku: The sku of this DataManager.
        :param tags: The tags of this DataManager.
        :param type: The type of this DataManager.
        """
        self.openapi_types = {
            'etag': str,
            'id': str,
            'location': str,
            'name': str,
            'sku': Sku,
            'tags': Dict[str, str],
            'type': str
        }

        self.attribute_map = {
            'etag': 'etag',
            'id': 'id',
            'location': 'location',
            'name': 'name',
            'sku': 'sku',
            'tags': 'tags',
            'type': 'type'
        }

        self._etag = etag
        self._id = id
        self._location = location
        self._name = name
        self._sku = sku
        self._tags = tags
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataManager':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataManager of this DataManager.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def etag(self):
        """Gets the etag of this DataManager.

        Etag of the Resource.

        :return: The etag of this DataManager.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag):
        """Sets the etag of this DataManager.

        Etag of the Resource.

        :param etag: The etag of this DataManager.
        :type etag: str
        """

        self._etag = etag

    @property
    def id(self):
        """Gets the id of this DataManager.

        The Resource Id.

        :return: The id of this DataManager.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataManager.

        The Resource Id.

        :param id: The id of this DataManager.
        :type id: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this DataManager.

        The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East  US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo  region is specified on update the request will succeed.

        :return: The location of this DataManager.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this DataManager.

        The location of the resource. This will be one of the supported and registered Azure Geo Regions (e.g. West US, East  US, Southeast Asia, etc.). The geo region of a resource cannot be changed once it is created, but if an identical geo  region is specified on update the request will succeed.

        :param location: The location of this DataManager.
        :type location: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def name(self):
        """Gets the name of this DataManager.

        The Resource Name.

        :return: The name of this DataManager.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataManager.

        The Resource Name.

        :param name: The name of this DataManager.
        :type name: str
        """

        self._name = name

    @property
    def sku(self):
        """Gets the sku of this DataManager.


        :return: The sku of this DataManager.
        :rtype: Sku
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """Sets the sku of this DataManager.


        :param sku: The sku of this DataManager.
        :type sku: Sku
        """

        self._sku = sku

    @property
    def tags(self):
        """Gets the tags of this DataManager.

        The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource  (across resource groups).

        :return: The tags of this DataManager.
        :rtype: Dict[str, str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DataManager.

        The list of key value pairs that describe the resource. These tags can be used in viewing and grouping this resource  (across resource groups).

        :param tags: The tags of this DataManager.
        :type tags: Dict[str, str]
        """

        self._tags = tags

    @property
    def type(self):
        """Gets the type of this DataManager.

        The Resource type.

        :return: The type of this DataManager.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DataManager.

        The Resource type.

        :param type: The type of this DataManager.
        :type type: str
        """

        self._type = type
