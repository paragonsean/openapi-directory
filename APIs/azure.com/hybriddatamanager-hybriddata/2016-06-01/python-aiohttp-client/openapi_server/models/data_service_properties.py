# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DataServiceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state: str=None, supported_data_sink_types: List[str]=None, supported_data_source_types: List[str]=None):
        """DataServiceProperties - a model defined in OpenAPI

        :param state: The state of this DataServiceProperties.
        :param supported_data_sink_types: The supported_data_sink_types of this DataServiceProperties.
        :param supported_data_source_types: The supported_data_source_types of this DataServiceProperties.
        """
        self.openapi_types = {
            'state': str,
            'supported_data_sink_types': List[str],
            'supported_data_source_types': List[str]
        }

        self.attribute_map = {
            'state': 'state',
            'supported_data_sink_types': 'supportedDataSinkTypes',
            'supported_data_source_types': 'supportedDataSourceTypes'
        }

        self._state = state
        self._supported_data_sink_types = supported_data_sink_types
        self._supported_data_source_types = supported_data_source_types

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DataServiceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DataServiceProperties of this DataServiceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state(self):
        """Gets the state of this DataServiceProperties.

        State of the data service.

        :return: The state of this DataServiceProperties.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this DataServiceProperties.

        State of the data service.

        :param state: The state of this DataServiceProperties.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled", "Supported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def supported_data_sink_types(self):
        """Gets the supported_data_sink_types of this DataServiceProperties.

        Supported data store types which can be used as a sink.

        :return: The supported_data_sink_types of this DataServiceProperties.
        :rtype: List[str]
        """
        return self._supported_data_sink_types

    @supported_data_sink_types.setter
    def supported_data_sink_types(self, supported_data_sink_types):
        """Sets the supported_data_sink_types of this DataServiceProperties.

        Supported data store types which can be used as a sink.

        :param supported_data_sink_types: The supported_data_sink_types of this DataServiceProperties.
        :type supported_data_sink_types: List[str]
        """

        self._supported_data_sink_types = supported_data_sink_types

    @property
    def supported_data_source_types(self):
        """Gets the supported_data_source_types of this DataServiceProperties.

        Supported data store types which can be used as a source.

        :return: The supported_data_source_types of this DataServiceProperties.
        :rtype: List[str]
        """
        return self._supported_data_source_types

    @supported_data_source_types.setter
    def supported_data_source_types(self, supported_data_source_types):
        """Sets the supported_data_source_types of this DataServiceProperties.

        Supported data store types which can be used as a source.

        :param supported_data_source_types: The supported_data_source_types of this DataServiceProperties.
        :type supported_data_source_types: List[str]
        """

        self._supported_data_source_types = supported_data_source_types
