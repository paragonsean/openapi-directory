# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_details import JobDetails
from openapi_server import util


class JobProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bytes_processed: int=None, data_sink_name: str=None, data_source_name: str=None, details: JobDetails=None, is_cancellable: str=None, items_processed: int=None, total_bytes_to_process: int=None, total_items_to_process: int=None):
        """JobProperties - a model defined in OpenAPI

        :param bytes_processed: The bytes_processed of this JobProperties.
        :param data_sink_name: The data_sink_name of this JobProperties.
        :param data_source_name: The data_source_name of this JobProperties.
        :param details: The details of this JobProperties.
        :param is_cancellable: The is_cancellable of this JobProperties.
        :param items_processed: The items_processed of this JobProperties.
        :param total_bytes_to_process: The total_bytes_to_process of this JobProperties.
        :param total_items_to_process: The total_items_to_process of this JobProperties.
        """
        self.openapi_types = {
            'bytes_processed': int,
            'data_sink_name': str,
            'data_source_name': str,
            'details': JobDetails,
            'is_cancellable': str,
            'items_processed': int,
            'total_bytes_to_process': int,
            'total_items_to_process': int
        }

        self.attribute_map = {
            'bytes_processed': 'bytesProcessed',
            'data_sink_name': 'dataSinkName',
            'data_source_name': 'dataSourceName',
            'details': 'details',
            'is_cancellable': 'isCancellable',
            'items_processed': 'itemsProcessed',
            'total_bytes_to_process': 'totalBytesToProcess',
            'total_items_to_process': 'totalItemsToProcess'
        }

        self._bytes_processed = bytes_processed
        self._data_sink_name = data_sink_name
        self._data_source_name = data_source_name
        self._details = details
        self._is_cancellable = is_cancellable
        self._items_processed = items_processed
        self._total_bytes_to_process = total_bytes_to_process
        self._total_items_to_process = total_items_to_process

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobProperties of this JobProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bytes_processed(self):
        """Gets the bytes_processed of this JobProperties.

        Number of bytes processed by the job as of now.

        :return: The bytes_processed of this JobProperties.
        :rtype: int
        """
        return self._bytes_processed

    @bytes_processed.setter
    def bytes_processed(self, bytes_processed):
        """Sets the bytes_processed of this JobProperties.

        Number of bytes processed by the job as of now.

        :param bytes_processed: The bytes_processed of this JobProperties.
        :type bytes_processed: int
        """

        self._bytes_processed = bytes_processed

    @property
    def data_sink_name(self):
        """Gets the data_sink_name of this JobProperties.

        Name of the data sink on which the job was triggered.

        :return: The data_sink_name of this JobProperties.
        :rtype: str
        """
        return self._data_sink_name

    @data_sink_name.setter
    def data_sink_name(self, data_sink_name):
        """Sets the data_sink_name of this JobProperties.

        Name of the data sink on which the job was triggered.

        :param data_sink_name: The data_sink_name of this JobProperties.
        :type data_sink_name: str
        """

        self._data_sink_name = data_sink_name

    @property
    def data_source_name(self):
        """Gets the data_source_name of this JobProperties.

        Name of the data source on which the job was triggered.

        :return: The data_source_name of this JobProperties.
        :rtype: str
        """
        return self._data_source_name

    @data_source_name.setter
    def data_source_name(self, data_source_name):
        """Sets the data_source_name of this JobProperties.

        Name of the data source on which the job was triggered.

        :param data_source_name: The data_source_name of this JobProperties.
        :type data_source_name: str
        """

        self._data_source_name = data_source_name

    @property
    def details(self):
        """Gets the details of this JobProperties.


        :return: The details of this JobProperties.
        :rtype: JobDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this JobProperties.


        :param details: The details of this JobProperties.
        :type details: JobDetails
        """

        self._details = details

    @property
    def is_cancellable(self):
        """Gets the is_cancellable of this JobProperties.

        Describes whether the job is cancellable.

        :return: The is_cancellable of this JobProperties.
        :rtype: str
        """
        return self._is_cancellable

    @is_cancellable.setter
    def is_cancellable(self, is_cancellable):
        """Sets the is_cancellable of this JobProperties.

        Describes whether the job is cancellable.

        :param is_cancellable: The is_cancellable of this JobProperties.
        :type is_cancellable: str
        """
        allowed_values = ["NotCancellable", "Cancellable"]  # noqa: E501
        if is_cancellable not in allowed_values:
            raise ValueError(
                "Invalid value for `is_cancellable` ({0}), must be one of {1}"
                .format(is_cancellable, allowed_values)
            )

        self._is_cancellable = is_cancellable

    @property
    def items_processed(self):
        """Gets the items_processed of this JobProperties.

        Number of items processed by the job as of now

        :return: The items_processed of this JobProperties.
        :rtype: int
        """
        return self._items_processed

    @items_processed.setter
    def items_processed(self, items_processed):
        """Sets the items_processed of this JobProperties.

        Number of items processed by the job as of now

        :param items_processed: The items_processed of this JobProperties.
        :type items_processed: int
        """

        self._items_processed = items_processed

    @property
    def total_bytes_to_process(self):
        """Gets the total_bytes_to_process of this JobProperties.

        Number of bytes to be processed by the job in total.

        :return: The total_bytes_to_process of this JobProperties.
        :rtype: int
        """
        return self._total_bytes_to_process

    @total_bytes_to_process.setter
    def total_bytes_to_process(self, total_bytes_to_process):
        """Sets the total_bytes_to_process of this JobProperties.

        Number of bytes to be processed by the job in total.

        :param total_bytes_to_process: The total_bytes_to_process of this JobProperties.
        :type total_bytes_to_process: int
        """

        self._total_bytes_to_process = total_bytes_to_process

    @property
    def total_items_to_process(self):
        """Gets the total_items_to_process of this JobProperties.

        Number of items to be processed by the job in total

        :return: The total_items_to_process of this JobProperties.
        :rtype: int
        """
        return self._total_items_to_process

    @total_items_to_process.setter
    def total_items_to_process(self, total_items_to_process):
        """Sets the total_items_to_process of this JobProperties.

        Number of items to be processed by the job in total

        :param total_items_to_process: The total_items_to_process of this JobProperties.
        :type total_items_to_process: int
        """

        self._total_items_to_process = total_items_to_process
