# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobDefinitionFilter(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_source: str=None, last_modified: datetime=None, state: str=None):
        """JobDefinitionFilter - a model defined in OpenAPI

        :param data_source: The data_source of this JobDefinitionFilter.
        :param last_modified: The last_modified of this JobDefinitionFilter.
        :param state: The state of this JobDefinitionFilter.
        """
        self.openapi_types = {
            'data_source': str,
            'last_modified': datetime,
            'state': str
        }

        self.attribute_map = {
            'data_source': 'dataSource',
            'last_modified': 'lastModified',
            'state': 'state'
        }

        self._data_source = data_source
        self._last_modified = last_modified
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobDefinitionFilter':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobDefinitionFilter of this JobDefinitionFilter.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_source(self):
        """Gets the data_source of this JobDefinitionFilter.

        The data source associated with the job definition

        :return: The data_source of this JobDefinitionFilter.
        :rtype: str
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """Sets the data_source of this JobDefinitionFilter.

        The data source associated with the job definition

        :param data_source: The data_source of this JobDefinitionFilter.
        :type data_source: str
        """

        self._data_source = data_source

    @property
    def last_modified(self):
        """Gets the last_modified of this JobDefinitionFilter.

        The last modified date time of the data source.

        :return: The last_modified of this JobDefinitionFilter.
        :rtype: datetime
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified):
        """Sets the last_modified of this JobDefinitionFilter.

        The last modified date time of the data source.

        :param last_modified: The last_modified of this JobDefinitionFilter.
        :type last_modified: datetime
        """

        self._last_modified = last_modified

    @property
    def state(self):
        """Gets the state of this JobDefinitionFilter.

        The state of the job definition.

        :return: The state of this JobDefinitionFilter.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this JobDefinitionFilter.

        The state of the job definition.

        :param state: The state of this JobDefinitionFilter.
        :type state: str
        """
        allowed_values = ["Disabled", "Enabled", "Supported"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
