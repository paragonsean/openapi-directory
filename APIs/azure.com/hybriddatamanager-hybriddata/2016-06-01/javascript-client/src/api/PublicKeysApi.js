/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import PublicKey from '../model/PublicKey';
import PublicKeyList from '../model/PublicKeyList';

/**
* PublicKeys service.
* @module api/PublicKeysApi
* @version 2016-06-01
*/
export default class PublicKeysApi {

    /**
    * Constructs a new PublicKeysApi. 
    * @alias module:api/PublicKeysApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the publicKeysGet operation.
     * @callback module:api/PublicKeysApi~publicKeysGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets the public keys.
     * @param {String} publicKeyName Name of the public key.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/PublicKeysApi~publicKeysGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicKey}
     */
    publicKeysGet(publicKeyName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'publicKeyName' is set
      if (publicKeyName === undefined || publicKeyName === null) {
        throw new Error("Missing the required parameter 'publicKeyName' when calling publicKeysGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling publicKeysGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling publicKeysGet");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling publicKeysGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling publicKeysGet");
      }

      let pathParams = {
        'publicKeyName': publicKeyName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicKey;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys/{publicKeyName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the publicKeysListByDataManager operation.
     * @callback module:api/PublicKeysApi~publicKeysListByDataManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicKeyList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets the list view of public keys, however it will only have one element.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/PublicKeysApi~publicKeysListByDataManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicKeyList}
     */
    publicKeysListByDataManager(subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling publicKeysListByDataManager");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling publicKeysListByDataManager");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling publicKeysListByDataManager");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling publicKeysListByDataManager");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = PublicKeyList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/publicKeys', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
