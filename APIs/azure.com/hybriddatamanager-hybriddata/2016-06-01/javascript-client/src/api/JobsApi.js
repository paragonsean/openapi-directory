/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Job from '../model/Job';
import JobList from '../model/JobList';

/**
* Jobs service.
* @module api/JobsApi
* @version 2016-06-01
*/
export default class JobsApi {

    /**
    * Constructs a new JobsApi. 
    * @alias module:api/JobsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobsCancel operation.
     * @callback module:api/JobsApi~jobsCancelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels the given job.
     * @param {String} dataServiceName The name of the data service of the job definition.
     * @param {String} jobDefinitionName The name of the job definition of the job.
     * @param {String} jobId The job id of the job queried.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/JobsApi~jobsCancelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsCancel(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobsCancel");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobsCancel");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsCancel");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsCancel");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsCancel");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobsCancel");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsCancel");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'jobId': jobId,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsGet operation.
     * @callback module:api/JobsApi~jobsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets a data manager job given the jobId.
     * @param {String} dataServiceName The name of the data service of the job definition.
     * @param {String} jobDefinitionName The name of the job definition of the job.
     * @param {String} jobId The job id of the job queried.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [expand] $expand is supported on details parameter for job, which provides details on the job stages.
     * @param {module:api/JobsApi~jobsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    jobsGet(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobsGet");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobsGet");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsGet");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsGet");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'jobId': jobId,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$expand': opts['expand']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListByDataManager operation.
     * @callback module:api/JobsApi~jobsListByDataManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets all the jobs at the data manager resource level.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/JobsApi~jobsListByDataManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobList}
     */
    jobsListByDataManager(subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListByDataManager");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListByDataManager");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobsListByDataManager");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListByDataManager");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListByDataService operation.
     * @callback module:api/JobsApi~jobsListByDataServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets all the jobs of a data service type in a given resource.
     * @param {String} dataServiceName The name of the data service of interest.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/JobsApi~jobsListByDataServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobList}
     */
    jobsListByDataService(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobsListByDataService");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListByDataService");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListByDataService");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobsListByDataService");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListByDataService");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsListByJobDefinition operation.
     * @callback module:api/JobsApi~jobsListByJobDefinitionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets all the jobs of a given job definition.
     * @param {String} dataServiceName The name of the data service of the job definition.
     * @param {String} jobDefinitionName The name of the job definition for which jobs are needed.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/JobsApi~jobsListByJobDefinitionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobList}
     */
    jobsListByJobDefinition(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobsListByJobDefinition");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobsListByJobDefinition");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsListByJobDefinition");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsListByJobDefinition");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobsListByJobDefinition");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsListByJobDefinition");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobsResume operation.
     * @callback module:api/JobsApi~jobsResumeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Resumes the given job.
     * @param {String} dataServiceName The name of the data service of the job definition.
     * @param {String} jobDefinitionName The name of the job definition of the job.
     * @param {String} jobId The job id of the job queried.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/JobsApi~jobsResumeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobsResume(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobsResume");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobsResume");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling jobsResume");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobsResume");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobsResume");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobsResume");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobsResume");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'jobId': jobId,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
