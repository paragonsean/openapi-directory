/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import JobDefinition from '../model/JobDefinition';
import JobDefinitionList from '../model/JobDefinitionList';
import RunParameters from '../model/RunParameters';

/**
* JobDefinitions service.
* @module api/JobDefinitionsApi
* @version 2016-06-01
*/
export default class JobDefinitionsApi {

    /**
    * Constructs a new JobDefinitionsApi. 
    * @alias module:api/JobDefinitionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the jobDefinitionsCreateOrUpdate operation.
     * @callback module:api/JobDefinitionsApi~jobDefinitionsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a job definition.
     * @param {String} dataServiceName The data service type of the job definition.
     * @param {String} jobDefinitionName The job definition name to be created or updated.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/JobDefinition} jobDefinition Job Definition object to be created or updated.
     * @param {module:api/JobDefinitionsApi~jobDefinitionsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinition}
     */
    jobDefinitionsCreateOrUpdate(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, jobDefinition, callback) {
      let postBody = jobDefinition;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDefinitionsCreateOrUpdate");
      }
      // verify the required parameter 'jobDefinition' is set
      if (jobDefinition === undefined || jobDefinition === null) {
        throw new Error("Missing the required parameter 'jobDefinition' when calling jobDefinitionsCreateOrUpdate");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = JobDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDefinitionsDelete operation.
     * @callback module:api/JobDefinitionsApi~jobDefinitionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes the given job definition.
     * @param {String} dataServiceName The data service type of the job definition.
     * @param {String} jobDefinitionName The job definition name to be deleted.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/JobDefinitionsApi~jobDefinitionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobDefinitionsDelete(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobDefinitionsDelete");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobDefinitionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsDelete");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobDefinitionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDefinitionsDelete");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDefinitionsGet operation.
     * @callback module:api/JobDefinitionsApi~jobDefinitionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinition} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets job definition object by name.
     * @param {String} dataServiceName The data service name of the job definition
     * @param {String} jobDefinitionName The job definition name that is being queried.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/JobDefinitionsApi~jobDefinitionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinition}
     */
    jobDefinitionsGet(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobDefinitionsGet");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobDefinitionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsGet");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobDefinitionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDefinitionsGet");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDefinition;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDefinitionsListByDataManager operation.
     * @callback module:api/JobDefinitionsApi~jobDefinitionsListByDataManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets all the job definitions of the given data manager resource.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/JobDefinitionsApi~jobDefinitionsListByDataManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinitionList}
     */
    jobDefinitionsListByDataManager(subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobDefinitionsListByDataManager");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsListByDataManager");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobDefinitionsListByDataManager");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDefinitionsListByDataManager");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDefinitionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDefinitionsListByDataService operation.
     * @callback module:api/JobDefinitionsApi~jobDefinitionsListByDataServiceCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobDefinitionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets all the job definitions of the given data service name.
     * @param {String} dataServiceName The data service type of interest.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/JobDefinitionsApi~jobDefinitionsListByDataServiceCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobDefinitionList}
     */
    jobDefinitionsListByDataService(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobDefinitionsListByDataService");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobDefinitionsListByDataService");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsListByDataService");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobDefinitionsListByDataService");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDefinitionsListByDataService");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = JobDefinitionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the jobDefinitionsRun operation.
     * @callback module:api/JobDefinitionsApi~jobDefinitionsRunCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method runs a job instance of the given job definition.
     * @param {String} dataServiceName The data service type of the job definition.
     * @param {String} jobDefinitionName Name of the job definition.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/RunParameters} runParameters Run time parameters for the job definition.
     * @param {module:api/JobDefinitionsApi~jobDefinitionsRunCallback} callback The callback function, accepting three arguments: error, data, response
     */
    jobDefinitionsRun(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, runParameters, callback) {
      let postBody = runParameters;
      // verify the required parameter 'dataServiceName' is set
      if (dataServiceName === undefined || dataServiceName === null) {
        throw new Error("Missing the required parameter 'dataServiceName' when calling jobDefinitionsRun");
      }
      // verify the required parameter 'jobDefinitionName' is set
      if (jobDefinitionName === undefined || jobDefinitionName === null) {
        throw new Error("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsRun");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling jobDefinitionsRun");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsRun");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling jobDefinitionsRun");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling jobDefinitionsRun");
      }
      // verify the required parameter 'runParameters' is set
      if (runParameters === undefined || runParameters === null) {
        throw new Error("Missing the required parameter 'runParameters' when calling jobDefinitionsRun");
      }

      let pathParams = {
        'dataServiceName': dataServiceName,
        'jobDefinitionName': jobDefinitionName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/run', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
