/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataStore from '../model/DataStore';
import DataStoreList from '../model/DataStoreList';

/**
* DataStores service.
* @module api/DataStoresApi
* @version 2016-06-01
*/
export default class DataStoresApi {

    /**
    * Constructs a new DataStoresApi. 
    * @alias module:api/DataStoresApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataStoresCreateOrUpdate operation.
     * @callback module:api/DataStoresApi~dataStoresCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the data store/repository in the data manager.
     * @param {String} dataStoreName The data store/repository name to be created or updated.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/DataStore} dataStore The data store/repository object to be created or updated.
     * @param {module:api/DataStoresApi~dataStoresCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataStore}
     */
    dataStoresCreateOrUpdate(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataStore, callback) {
      let postBody = dataStore;
      // verify the required parameter 'dataStoreName' is set
      if (dataStoreName === undefined || dataStoreName === null) {
        throw new Error("Missing the required parameter 'dataStoreName' when calling dataStoresCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataStoresCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataStoresCreateOrUpdate");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataStoresCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataStoresCreateOrUpdate");
      }
      // verify the required parameter 'dataStore' is set
      if (dataStore === undefined || dataStore === null) {
        throw new Error("Missing the required parameter 'dataStore' when calling dataStoresCreateOrUpdate");
      }

      let pathParams = {
        'dataStoreName': dataStoreName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataStore;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataStoresDelete operation.
     * @callback module:api/DataStoresApi~dataStoresDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method deletes the given data store/repository.
     * @param {String} dataStoreName The data store/repository name to be deleted.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/DataStoresApi~dataStoresDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataStoresDelete(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'dataStoreName' is set
      if (dataStoreName === undefined || dataStoreName === null) {
        throw new Error("Missing the required parameter 'dataStoreName' when calling dataStoresDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataStoresDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataStoresDelete");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataStoresDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataStoresDelete");
      }

      let pathParams = {
        'dataStoreName': dataStoreName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataStoresGet operation.
     * @callback module:api/DataStoresApi~dataStoresGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataStore} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method gets the data store/repository by name.
     * @param {String} dataStoreName The data store/repository name queried.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/DataStoresApi~dataStoresGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataStore}
     */
    dataStoresGet(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'dataStoreName' is set
      if (dataStoreName === undefined || dataStoreName === null) {
        throw new Error("Missing the required parameter 'dataStoreName' when calling dataStoresGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataStoresGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataStoresGet");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataStoresGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataStoresGet");
      }

      let pathParams = {
        'dataStoreName': dataStoreName,
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataStore;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataStoresListByDataManager operation.
     * @callback module:api/DataStoresApi~dataStoresListByDataManagerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataStoreList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the data stores/repositories in the given resource.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {Object} opts Optional parameters
     * @param {String} [filter] OData Filter options
     * @param {module:api/DataStoresApi~dataStoresListByDataManagerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataStoreList}
     */
    dataStoresListByDataManager(subscriptionId, resourceGroupName, dataManagerName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataStoresListByDataManager");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataStoresListByDataManager");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataStoresListByDataManager");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataStoresListByDataManager");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataStoreList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
