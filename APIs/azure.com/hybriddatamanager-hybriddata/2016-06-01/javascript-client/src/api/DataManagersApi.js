/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataManager from '../model/DataManager';
import DataManagerList from '../model/DataManagerList';
import DataManagerUpdateParameter from '../model/DataManagerUpdateParameter';

/**
* DataManagers service.
* @module api/DataManagersApi
* @version 2016-06-01
*/
export default class DataManagersApi {

    /**
    * Constructs a new DataManagersApi. 
    * @alias module:api/DataManagersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataManagersCreate operation.
     * @callback module:api/DataManagersApi~dataManagersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API  and should instead be updated with the Update data manager resource API.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/DataManager} dataManager Data manager resource details from request body.
     * @param {module:api/DataManagersApi~dataManagersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataManager}
     */
    dataManagersCreate(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManager, callback) {
      let postBody = dataManager;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataManagersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataManagersCreate");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataManagersCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataManagersCreate");
      }
      // verify the required parameter 'dataManager' is set
      if (dataManager === undefined || dataManager === null) {
        throw new Error("Missing the required parameter 'dataManager' when calling dataManagersCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataManager;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataManagersDelete operation.
     * @callback module:api/DataManagersApi~dataManagersDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a data manager resource in Microsoft Azure.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/DataManagersApi~dataManagersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataManagersDelete(subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataManagersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataManagersDelete");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataManagersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataManagersDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataManagersGet operation.
     * @callback module:api/DataManagersApi~dataManagersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets information about the specified data manager resource.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:api/DataManagersApi~dataManagersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataManager}
     */
    dataManagersGet(subscriptionId, resourceGroupName, dataManagerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataManagersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataManagersGet");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataManagersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataManagersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataManager;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataManagersList operation.
     * @callback module:api/DataManagersApi~dataManagersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataManagerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the data manager resources available under the subscription.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} apiVersion The API Version
     * @param {module:api/DataManagersApi~dataManagersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataManagerList}
     */
    dataManagersList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataManagersList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataManagersList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataManagerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataManagersListByResourceGroup operation.
     * @callback module:api/DataManagersApi~dataManagersListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataManagerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists all the data manager resources available under the given resource group.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} apiVersion The API Version
     * @param {module:api/DataManagersApi~dataManagersListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataManagerList}
     */
    dataManagersListByResourceGroup(subscriptionId, resourceGroupName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataManagersListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataManagersListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataManagersListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataManagerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataManagersUpdate operation.
     * @callback module:api/DataManagersApi~dataManagersUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataManager} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the properties of an existing data manager resource.
     * @param {String} subscriptionId The Subscription Id
     * @param {String} resourceGroupName The Resource Group Name
     * @param {String} dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     * @param {String} apiVersion The API Version
     * @param {module:model/DataManagerUpdateParameter} dataManagerUpdateParameter Data manager resource details from request body.
     * @param {Object} opts Optional parameters
     * @param {String} [ifMatch] Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value.
     * @param {module:api/DataManagersApi~dataManagersUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataManager}
     */
    dataManagersUpdate(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManagerUpdateParameter, opts, callback) {
      opts = opts || {};
      let postBody = dataManagerUpdateParameter;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataManagersUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataManagersUpdate");
      }
      // verify the required parameter 'dataManagerName' is set
      if (dataManagerName === undefined || dataManagerName === null) {
        throw new Error("Missing the required parameter 'dataManagerName' when calling dataManagersUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataManagersUpdate");
      }
      // verify the required parameter 'dataManagerUpdateParameter' is set
      if (dataManagerUpdateParameter === undefined || dataManagerUpdateParameter === null) {
        throw new Error("Missing the required parameter 'dataManagerUpdateParameter' when calling dataManagersUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'dataManagerName': dataManagerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': opts['ifMatch']
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataManager;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
