/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerSecret from './CustomerSecret';
import Schedule from './Schedule';

/**
 * The JobDefinitionProperties model module.
 * @module model/JobDefinitionProperties
 * @version 2016-06-01
 */
class JobDefinitionProperties {
    /**
     * Constructs a new <code>JobDefinitionProperties</code>.
     * Job Definition
     * @alias module:model/JobDefinitionProperties
     * @param dataSinkId {String} Data Sink Id associated to the job definition.
     * @param dataSourceId {String} Data Source Id associated to the job definition.
     * @param state {module:model/JobDefinitionProperties.StateEnum} State of the job definition.
     */
    constructor(dataSinkId, dataSourceId, state) { 
        
        JobDefinitionProperties.initialize(this, dataSinkId, dataSourceId, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataSinkId, dataSourceId, state) { 
        obj['dataSinkId'] = dataSinkId;
        obj['dataSourceId'] = dataSourceId;
        obj['state'] = state;
        obj['userConfirmation'] = 'NotRequired';
    }

    /**
     * Constructs a <code>JobDefinitionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobDefinitionProperties} obj Optional instance to populate.
     * @return {module:model/JobDefinitionProperties} The populated <code>JobDefinitionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobDefinitionProperties();

            if (data.hasOwnProperty('customerSecrets')) {
                obj['customerSecrets'] = ApiClient.convertToType(data['customerSecrets'], [CustomerSecret]);
            }
            if (data.hasOwnProperty('dataServiceInput')) {
                obj['dataServiceInput'] = ApiClient.convertToType(data['dataServiceInput'], Object);
            }
            if (data.hasOwnProperty('dataSinkId')) {
                obj['dataSinkId'] = ApiClient.convertToType(data['dataSinkId'], 'String');
            }
            if (data.hasOwnProperty('dataSourceId')) {
                obj['dataSourceId'] = ApiClient.convertToType(data['dataSourceId'], 'String');
            }
            if (data.hasOwnProperty('lastModifiedTime')) {
                obj['lastModifiedTime'] = ApiClient.convertToType(data['lastModifiedTime'], 'Date');
            }
            if (data.hasOwnProperty('runLocation')) {
                obj['runLocation'] = ApiClient.convertToType(data['runLocation'], 'String');
            }
            if (data.hasOwnProperty('schedules')) {
                obj['schedules'] = ApiClient.convertToType(data['schedules'], [Schedule]);
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('userConfirmation')) {
                obj['userConfirmation'] = ApiClient.convertToType(data['userConfirmation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobDefinitionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobDefinitionProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobDefinitionProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['customerSecrets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customerSecrets'])) {
                throw new Error("Expected the field `customerSecrets` to be an array in the JSON data but got " + data['customerSecrets']);
            }
            // validate the optional field `customerSecrets` (array)
            for (const item of data['customerSecrets']) {
                CustomerSecret.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dataSinkId'] && !(typeof data['dataSinkId'] === 'string' || data['dataSinkId'] instanceof String)) {
            throw new Error("Expected the field `dataSinkId` to be a primitive type in the JSON string but got " + data['dataSinkId']);
        }
        // ensure the json data is a string
        if (data['dataSourceId'] && !(typeof data['dataSourceId'] === 'string' || data['dataSourceId'] instanceof String)) {
            throw new Error("Expected the field `dataSourceId` to be a primitive type in the JSON string but got " + data['dataSourceId']);
        }
        // ensure the json data is a string
        if (data['runLocation'] && !(typeof data['runLocation'] === 'string' || data['runLocation'] instanceof String)) {
            throw new Error("Expected the field `runLocation` to be a primitive type in the JSON string but got " + data['runLocation']);
        }
        if (data['schedules']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['schedules'])) {
                throw new Error("Expected the field `schedules` to be an array in the JSON data but got " + data['schedules']);
            }
            // validate the optional field `schedules` (array)
            for (const item of data['schedules']) {
                Schedule.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['userConfirmation'] && !(typeof data['userConfirmation'] === 'string' || data['userConfirmation'] instanceof String)) {
            throw new Error("Expected the field `userConfirmation` to be a primitive type in the JSON string but got " + data['userConfirmation']);
        }

        return true;
    }


}

JobDefinitionProperties.RequiredProperties = ["dataSinkId", "dataSourceId", "state"];

/**
 * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
 * @member {Array.<module:model/CustomerSecret>} customerSecrets
 */
JobDefinitionProperties.prototype['customerSecrets'] = undefined;

/**
 * A generic json used differently by each data service type.
 * @member {Object} dataServiceInput
 */
JobDefinitionProperties.prototype['dataServiceInput'] = undefined;

/**
 * Data Sink Id associated to the job definition.
 * @member {String} dataSinkId
 */
JobDefinitionProperties.prototype['dataSinkId'] = undefined;

/**
 * Data Source Id associated to the job definition.
 * @member {String} dataSourceId
 */
JobDefinitionProperties.prototype['dataSourceId'] = undefined;

/**
 * Last modified time of the job definition.
 * @member {Date} lastModifiedTime
 */
JobDefinitionProperties.prototype['lastModifiedTime'] = undefined;

/**
 * This is the preferred geo location for the job to run.
 * @member {module:model/JobDefinitionProperties.RunLocationEnum} runLocation
 */
JobDefinitionProperties.prototype['runLocation'] = undefined;

/**
 * Schedule for running the job definition
 * @member {Array.<module:model/Schedule>} schedules
 */
JobDefinitionProperties.prototype['schedules'] = undefined;

/**
 * State of the job definition.
 * @member {module:model/JobDefinitionProperties.StateEnum} state
 */
JobDefinitionProperties.prototype['state'] = undefined;

/**
 * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
 * @member {module:model/JobDefinitionProperties.UserConfirmationEnum} userConfirmation
 * @default 'NotRequired'
 */
JobDefinitionProperties.prototype['userConfirmation'] = 'NotRequired';





/**
 * Allowed values for the <code>runLocation</code> property.
 * @enum {String}
 * @readonly
 */
JobDefinitionProperties['RunLocationEnum'] = {

    /**
     * value: "none"
     * @const
     */
    "none": "none",

    /**
     * value: "australiaeast"
     * @const
     */
    "australiaeast": "australiaeast",

    /**
     * value: "australiasoutheast"
     * @const
     */
    "australiasoutheast": "australiasoutheast",

    /**
     * value: "brazilsouth"
     * @const
     */
    "brazilsouth": "brazilsouth",

    /**
     * value: "canadacentral"
     * @const
     */
    "canadacentral": "canadacentral",

    /**
     * value: "canadaeast"
     * @const
     */
    "canadaeast": "canadaeast",

    /**
     * value: "centralindia"
     * @const
     */
    "centralindia": "centralindia",

    /**
     * value: "centralus"
     * @const
     */
    "centralus": "centralus",

    /**
     * value: "eastasia"
     * @const
     */
    "eastasia": "eastasia",

    /**
     * value: "eastus"
     * @const
     */
    "eastus": "eastus",

    /**
     * value: "eastus2"
     * @const
     */
    "eastus2": "eastus2",

    /**
     * value: "japaneast"
     * @const
     */
    "japaneast": "japaneast",

    /**
     * value: "japanwest"
     * @const
     */
    "japanwest": "japanwest",

    /**
     * value: "koreacentral"
     * @const
     */
    "koreacentral": "koreacentral",

    /**
     * value: "koreasouth"
     * @const
     */
    "koreasouth": "koreasouth",

    /**
     * value: "southeastasia"
     * @const
     */
    "southeastasia": "southeastasia",

    /**
     * value: "southcentralus"
     * @const
     */
    "southcentralus": "southcentralus",

    /**
     * value: "southindia"
     * @const
     */
    "southindia": "southindia",

    /**
     * value: "northcentralus"
     * @const
     */
    "northcentralus": "northcentralus",

    /**
     * value: "northeurope"
     * @const
     */
    "northeurope": "northeurope",

    /**
     * value: "uksouth"
     * @const
     */
    "uksouth": "uksouth",

    /**
     * value: "ukwest"
     * @const
     */
    "ukwest": "ukwest",

    /**
     * value: "westcentralus"
     * @const
     */
    "westcentralus": "westcentralus",

    /**
     * value: "westeurope"
     * @const
     */
    "westeurope": "westeurope",

    /**
     * value: "westindia"
     * @const
     */
    "westindia": "westindia",

    /**
     * value: "westus"
     * @const
     */
    "westus": "westus",

    /**
     * value: "westus2"
     * @const
     */
    "westus2": "westus2"
};


/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
JobDefinitionProperties['StateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Supported"
     * @const
     */
    "Supported": "Supported"
};


/**
 * Allowed values for the <code>userConfirmation</code> property.
 * @enum {String}
 * @readonly
 */
JobDefinitionProperties['UserConfirmationEnum'] = {

    /**
     * value: "NotRequired"
     * @const
     */
    "NotRequired": "NotRequired",

    /**
     * value: "Required"
     * @const
     */
    "Required": "Required"
};



export default JobDefinitionProperties;

