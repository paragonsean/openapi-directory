/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataStoreTypeProperties model module.
 * @module model/DataStoreTypeProperties
 * @version 2016-06-01
 */
class DataStoreTypeProperties {
    /**
     * Constructs a new <code>DataStoreTypeProperties</code>.
     * Data Store Type properties.
     * @alias module:model/DataStoreTypeProperties
     * @param state {module:model/DataStoreTypeProperties.StateEnum} State of the data store type.
     */
    constructor(state) { 
        
        DataStoreTypeProperties.initialize(this, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, state) { 
        obj['state'] = state;
    }

    /**
     * Constructs a <code>DataStoreTypeProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataStoreTypeProperties} obj Optional instance to populate.
     * @return {module:model/DataStoreTypeProperties} The populated <code>DataStoreTypeProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataStoreTypeProperties();

            if (data.hasOwnProperty('repositoryType')) {
                obj['repositoryType'] = ApiClient.convertToType(data['repositoryType'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('supportedDataServicesAsSink')) {
                obj['supportedDataServicesAsSink'] = ApiClient.convertToType(data['supportedDataServicesAsSink'], ['String']);
            }
            if (data.hasOwnProperty('supportedDataServicesAsSource')) {
                obj['supportedDataServicesAsSource'] = ApiClient.convertToType(data['supportedDataServicesAsSource'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataStoreTypeProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataStoreTypeProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataStoreTypeProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['repositoryType'] && !(typeof data['repositoryType'] === 'string' || data['repositoryType'] instanceof String)) {
            throw new Error("Expected the field `repositoryType` to be a primitive type in the JSON string but got " + data['repositoryType']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedDataServicesAsSink'])) {
            throw new Error("Expected the field `supportedDataServicesAsSink` to be an array in the JSON data but got " + data['supportedDataServicesAsSink']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedDataServicesAsSource'])) {
            throw new Error("Expected the field `supportedDataServicesAsSource` to be an array in the JSON data but got " + data['supportedDataServicesAsSource']);
        }

        return true;
    }


}

DataStoreTypeProperties.RequiredProperties = ["state"];

/**
 * Arm type for the manager resource to which the data source type is associated. This is optional.
 * @member {String} repositoryType
 */
DataStoreTypeProperties.prototype['repositoryType'] = undefined;

/**
 * State of the data store type.
 * @member {module:model/DataStoreTypeProperties.StateEnum} state
 */
DataStoreTypeProperties.prototype['state'] = undefined;

/**
 * Supported data services where it can be used as a sink.
 * @member {Array.<String>} supportedDataServicesAsSink
 */
DataStoreTypeProperties.prototype['supportedDataServicesAsSink'] = undefined;

/**
 * Supported data services where it can be used as a source.
 * @member {Array.<String>} supportedDataServicesAsSource
 */
DataStoreTypeProperties.prototype['supportedDataServicesAsSource'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DataStoreTypeProperties['StateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Supported"
     * @const
     */
    "Supported": "Supported"
};



export default DataStoreTypeProperties;

