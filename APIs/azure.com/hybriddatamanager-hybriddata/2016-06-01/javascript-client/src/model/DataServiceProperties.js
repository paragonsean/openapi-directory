/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DataServiceProperties model module.
 * @module model/DataServiceProperties
 * @version 2016-06-01
 */
class DataServiceProperties {
    /**
     * Constructs a new <code>DataServiceProperties</code>.
     * Data Service properties.
     * @alias module:model/DataServiceProperties
     * @param state {module:model/DataServiceProperties.StateEnum} State of the data service.
     */
    constructor(state) { 
        
        DataServiceProperties.initialize(this, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, state) { 
        obj['state'] = state;
    }

    /**
     * Constructs a <code>DataServiceProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataServiceProperties} obj Optional instance to populate.
     * @return {module:model/DataServiceProperties} The populated <code>DataServiceProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataServiceProperties();

            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('supportedDataSinkTypes')) {
                obj['supportedDataSinkTypes'] = ApiClient.convertToType(data['supportedDataSinkTypes'], ['String']);
            }
            if (data.hasOwnProperty('supportedDataSourceTypes')) {
                obj['supportedDataSourceTypes'] = ApiClient.convertToType(data['supportedDataSourceTypes'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataServiceProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataServiceProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataServiceProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedDataSinkTypes'])) {
            throw new Error("Expected the field `supportedDataSinkTypes` to be an array in the JSON data but got " + data['supportedDataSinkTypes']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['supportedDataSourceTypes'])) {
            throw new Error("Expected the field `supportedDataSourceTypes` to be an array in the JSON data but got " + data['supportedDataSourceTypes']);
        }

        return true;
    }


}

DataServiceProperties.RequiredProperties = ["state"];

/**
 * State of the data service.
 * @member {module:model/DataServiceProperties.StateEnum} state
 */
DataServiceProperties.prototype['state'] = undefined;

/**
 * Supported data store types which can be used as a sink.
 * @member {Array.<String>} supportedDataSinkTypes
 */
DataServiceProperties.prototype['supportedDataSinkTypes'] = undefined;

/**
 * Supported data store types which can be used as a source.
 * @member {Array.<String>} supportedDataSourceTypes
 */
DataServiceProperties.prototype['supportedDataSourceTypes'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DataServiceProperties['StateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Supported"
     * @const
     */
    "Supported": "Supported"
};



export default DataServiceProperties;

