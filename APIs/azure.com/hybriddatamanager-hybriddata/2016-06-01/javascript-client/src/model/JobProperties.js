/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import JobDetails from './JobDetails';

/**
 * The JobProperties model module.
 * @module model/JobProperties
 * @version 2016-06-01
 */
class JobProperties {
    /**
     * Constructs a new <code>JobProperties</code>.
     * Job Properties
     * @alias module:model/JobProperties
     * @param isCancellable {module:model/JobProperties.IsCancellableEnum} Describes whether the job is cancellable.
     */
    constructor(isCancellable) { 
        
        JobProperties.initialize(this, isCancellable);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, isCancellable) { 
        obj['isCancellable'] = isCancellable;
    }

    /**
     * Constructs a <code>JobProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/JobProperties} obj Optional instance to populate.
     * @return {module:model/JobProperties} The populated <code>JobProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new JobProperties();

            if (data.hasOwnProperty('bytesProcessed')) {
                obj['bytesProcessed'] = ApiClient.convertToType(data['bytesProcessed'], 'Number');
            }
            if (data.hasOwnProperty('dataSinkName')) {
                obj['dataSinkName'] = ApiClient.convertToType(data['dataSinkName'], 'String');
            }
            if (data.hasOwnProperty('dataSourceName')) {
                obj['dataSourceName'] = ApiClient.convertToType(data['dataSourceName'], 'String');
            }
            if (data.hasOwnProperty('details')) {
                obj['details'] = JobDetails.constructFromObject(data['details']);
            }
            if (data.hasOwnProperty('isCancellable')) {
                obj['isCancellable'] = ApiClient.convertToType(data['isCancellable'], 'String');
            }
            if (data.hasOwnProperty('itemsProcessed')) {
                obj['itemsProcessed'] = ApiClient.convertToType(data['itemsProcessed'], 'Number');
            }
            if (data.hasOwnProperty('totalBytesToProcess')) {
                obj['totalBytesToProcess'] = ApiClient.convertToType(data['totalBytesToProcess'], 'Number');
            }
            if (data.hasOwnProperty('totalItemsToProcess')) {
                obj['totalItemsToProcess'] = ApiClient.convertToType(data['totalItemsToProcess'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>JobProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>JobProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of JobProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSinkName'] && !(typeof data['dataSinkName'] === 'string' || data['dataSinkName'] instanceof String)) {
            throw new Error("Expected the field `dataSinkName` to be a primitive type in the JSON string but got " + data['dataSinkName']);
        }
        // ensure the json data is a string
        if (data['dataSourceName'] && !(typeof data['dataSourceName'] === 'string' || data['dataSourceName'] instanceof String)) {
            throw new Error("Expected the field `dataSourceName` to be a primitive type in the JSON string but got " + data['dataSourceName']);
        }
        // validate the optional field `details`
        if (data['details']) { // data not null
          JobDetails.validateJSON(data['details']);
        }
        // ensure the json data is a string
        if (data['isCancellable'] && !(typeof data['isCancellable'] === 'string' || data['isCancellable'] instanceof String)) {
            throw new Error("Expected the field `isCancellable` to be a primitive type in the JSON string but got " + data['isCancellable']);
        }

        return true;
    }


}

JobProperties.RequiredProperties = ["isCancellable"];

/**
 * Number of bytes processed by the job as of now.
 * @member {Number} bytesProcessed
 */
JobProperties.prototype['bytesProcessed'] = undefined;

/**
 * Name of the data sink on which the job was triggered.
 * @member {String} dataSinkName
 */
JobProperties.prototype['dataSinkName'] = undefined;

/**
 * Name of the data source on which the job was triggered.
 * @member {String} dataSourceName
 */
JobProperties.prototype['dataSourceName'] = undefined;

/**
 * @member {module:model/JobDetails} details
 */
JobProperties.prototype['details'] = undefined;

/**
 * Describes whether the job is cancellable.
 * @member {module:model/JobProperties.IsCancellableEnum} isCancellable
 */
JobProperties.prototype['isCancellable'] = undefined;

/**
 * Number of items processed by the job as of now
 * @member {Number} itemsProcessed
 */
JobProperties.prototype['itemsProcessed'] = undefined;

/**
 * Number of bytes to be processed by the job in total.
 * @member {Number} totalBytesToProcess
 */
JobProperties.prototype['totalBytesToProcess'] = undefined;

/**
 * Number of items to be processed by the job in total
 * @member {Number} totalItemsToProcess
 */
JobProperties.prototype['totalItemsToProcess'] = undefined;





/**
 * Allowed values for the <code>isCancellable</code> property.
 * @enum {String}
 * @readonly
 */
JobProperties['IsCancellableEnum'] = {

    /**
     * value: "NotCancellable"
     * @const
     */
    "NotCancellable": "NotCancellable",

    /**
     * value: "Cancellable"
     * @const
     */
    "Cancellable": "Cancellable"
};



export default JobProperties;

