/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Key from './Key';

/**
 * The PublicKeyProperties model module.
 * @module model/PublicKeyProperties
 * @version 2016-06-01
 */
class PublicKeyProperties {
    /**
     * Constructs a new <code>PublicKeyProperties</code>.
     * PublicKey Properties
     * @alias module:model/PublicKeyProperties
     * @param dataServiceLevel1Key {module:model/Key} 
     * @param dataServiceLevel2Key {module:model/Key} 
     */
    constructor(dataServiceLevel1Key, dataServiceLevel2Key) { 
        
        PublicKeyProperties.initialize(this, dataServiceLevel1Key, dataServiceLevel2Key);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataServiceLevel1Key, dataServiceLevel2Key) { 
        obj['dataServiceLevel1Key'] = dataServiceLevel1Key;
        obj['dataServiceLevel2Key'] = dataServiceLevel2Key;
    }

    /**
     * Constructs a <code>PublicKeyProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PublicKeyProperties} obj Optional instance to populate.
     * @return {module:model/PublicKeyProperties} The populated <code>PublicKeyProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PublicKeyProperties();

            if (data.hasOwnProperty('dataServiceLevel1Key')) {
                obj['dataServiceLevel1Key'] = Key.constructFromObject(data['dataServiceLevel1Key']);
            }
            if (data.hasOwnProperty('dataServiceLevel2Key')) {
                obj['dataServiceLevel2Key'] = Key.constructFromObject(data['dataServiceLevel2Key']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PublicKeyProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PublicKeyProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PublicKeyProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `dataServiceLevel1Key`
        if (data['dataServiceLevel1Key']) { // data not null
          Key.validateJSON(data['dataServiceLevel1Key']);
        }
        // validate the optional field `dataServiceLevel2Key`
        if (data['dataServiceLevel2Key']) { // data not null
          Key.validateJSON(data['dataServiceLevel2Key']);
        }

        return true;
    }


}

PublicKeyProperties.RequiredProperties = ["dataServiceLevel1Key", "dataServiceLevel2Key"];

/**
 * @member {module:model/Key} dataServiceLevel1Key
 */
PublicKeyProperties.prototype['dataServiceLevel1Key'] = undefined;

/**
 * @member {module:model/Key} dataServiceLevel2Key
 */
PublicKeyProperties.prototype['dataServiceLevel2Key'] = undefined;






export default PublicKeyProperties;

