/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerSecret from './CustomerSecret';

/**
 * The RunParameters model module.
 * @module model/RunParameters
 * @version 2016-06-01
 */
class RunParameters {
    /**
     * Constructs a new <code>RunParameters</code>.
     * Run parameters for a job.
     * @alias module:model/RunParameters
     */
    constructor() { 
        
        RunParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['userConfirmation'] = 'NotRequired';
    }

    /**
     * Constructs a <code>RunParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RunParameters} obj Optional instance to populate.
     * @return {module:model/RunParameters} The populated <code>RunParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RunParameters();

            if (data.hasOwnProperty('customerSecrets')) {
                obj['customerSecrets'] = ApiClient.convertToType(data['customerSecrets'], [CustomerSecret]);
            }
            if (data.hasOwnProperty('dataServiceInput')) {
                obj['dataServiceInput'] = ApiClient.convertToType(data['dataServiceInput'], Object);
            }
            if (data.hasOwnProperty('userConfirmation')) {
                obj['userConfirmation'] = ApiClient.convertToType(data['userConfirmation'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RunParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RunParameters</code>.
     */
    static validateJSON(data) {
        if (data['customerSecrets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customerSecrets'])) {
                throw new Error("Expected the field `customerSecrets` to be an array in the JSON data but got " + data['customerSecrets']);
            }
            // validate the optional field `customerSecrets` (array)
            for (const item of data['customerSecrets']) {
                CustomerSecret.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['userConfirmation'] && !(typeof data['userConfirmation'] === 'string' || data['userConfirmation'] instanceof String)) {
            throw new Error("Expected the field `userConfirmation` to be a primitive type in the JSON string but got " + data['userConfirmation']);
        }

        return true;
    }


}



/**
 * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
 * @member {Array.<module:model/CustomerSecret>} customerSecrets
 */
RunParameters.prototype['customerSecrets'] = undefined;

/**
 * A generic json used differently by each data service type.
 * @member {Object} dataServiceInput
 */
RunParameters.prototype['dataServiceInput'] = undefined;

/**
 * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
 * @member {module:model/RunParameters.UserConfirmationEnum} userConfirmation
 * @default 'NotRequired'
 */
RunParameters.prototype['userConfirmation'] = 'NotRequired';





/**
 * Allowed values for the <code>userConfirmation</code> property.
 * @enum {String}
 * @readonly
 */
RunParameters['UserConfirmationEnum'] = {

    /**
     * value: "NotRequired"
     * @const
     */
    "NotRequired": "NotRequired",

    /**
     * value: "Required"
     * @const
     */
    "Required": "Required"
};



export default RunParameters;

