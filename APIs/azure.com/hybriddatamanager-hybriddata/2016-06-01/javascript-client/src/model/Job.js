/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DmsBaseObject from './DmsBaseObject';
import Error from './Error';
import JobProperties from './JobProperties';

/**
 * The Job model module.
 * @module model/Job
 * @version 2016-06-01
 */
class Job {
    /**
     * Constructs a new <code>Job</code>.
     * Data service job.
     * @alias module:model/Job
     * @implements module:model/DmsBaseObject
     */
    constructor() { 
        DmsBaseObject.initialize(this);
        Job.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['properties'] = properties;
        obj['startTime'] = startTime;
        obj['status'] = status;
    }

    /**
     * Constructs a <code>Job</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Job} obj Optional instance to populate.
     * @return {module:model/Job} The populated <code>Job</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Job();
            DmsBaseObject.constructFromObject(data, obj);

            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = Error.constructFromObject(data['error']);
            }
            if (data.hasOwnProperty('properties')) {
                obj['properties'] = JobProperties.constructFromObject(data['properties']);
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Job</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Job</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Job.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `error`
        if (data['error']) { // data not null
          Error.validateJSON(data['error']);
        }
        // validate the optional field `properties`
        if (data['properties']) { // data not null
          JobProperties.validateJSON(data['properties']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

Job.RequiredProperties = ["properties", "startTime", "status"];

/**
 * Time at which the job ended in UTC ISO 8601 format.
 * @member {Date} endTime
 */
Job.prototype['endTime'] = undefined;

/**
 * @member {module:model/Error} error
 */
Job.prototype['error'] = undefined;

/**
 * @member {module:model/JobProperties} properties
 */
Job.prototype['properties'] = undefined;

/**
 * Time at which the job was started in UTC ISO 8601 format.
 * @member {Date} startTime
 */
Job.prototype['startTime'] = undefined;

/**
 * Status of the job.
 * @member {module:model/Job.StatusEnum} status
 */
Job.prototype['status'] = undefined;

/**
 * Id of the object.
 * @member {String} id
 */
Job.prototype['id'] = undefined;

/**
 * Name of the object.
 * @member {String} name
 */
Job.prototype['name'] = undefined;

/**
 * Type of the object.
 * @member {String} type
 */
Job.prototype['type'] = undefined;


// Implement DmsBaseObject interface:
/**
 * Id of the object.
 * @member {String} id
 */
DmsBaseObject.prototype['id'] = undefined;
/**
 * Name of the object.
 * @member {String} name
 */
DmsBaseObject.prototype['name'] = undefined;
/**
 * Type of the object.
 * @member {String} type
 */
DmsBaseObject.prototype['type'] = undefined;



/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Job['StatusEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "InProgress"
     * @const
     */
    "InProgress": "InProgress",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "WaitingForAction"
     * @const
     */
    "WaitingForAction": "WaitingForAction",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Cancelled"
     * @const
     */
    "Cancelled": "Cancelled",

    /**
     * value: "Cancelling"
     * @const
     */
    "Cancelling": "Cancelling"
};



export default Job;

