/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomerSecret from './CustomerSecret';

/**
 * The DataStoreProperties model module.
 * @module model/DataStoreProperties
 * @version 2016-06-01
 */
class DataStoreProperties {
    /**
     * Constructs a new <code>DataStoreProperties</code>.
     * Data Store for sources and sinks
     * @alias module:model/DataStoreProperties
     * @param dataStoreTypeId {String} The arm id of the data store type.
     * @param state {module:model/DataStoreProperties.StateEnum} State of the data source.
     */
    constructor(dataStoreTypeId, state) { 
        
        DataStoreProperties.initialize(this, dataStoreTypeId, state);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataStoreTypeId, state) { 
        obj['dataStoreTypeId'] = dataStoreTypeId;
        obj['state'] = state;
    }

    /**
     * Constructs a <code>DataStoreProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DataStoreProperties} obj Optional instance to populate.
     * @return {module:model/DataStoreProperties} The populated <code>DataStoreProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DataStoreProperties();

            if (data.hasOwnProperty('customerSecrets')) {
                obj['customerSecrets'] = ApiClient.convertToType(data['customerSecrets'], [CustomerSecret]);
            }
            if (data.hasOwnProperty('dataStoreTypeId')) {
                obj['dataStoreTypeId'] = ApiClient.convertToType(data['dataStoreTypeId'], 'String');
            }
            if (data.hasOwnProperty('extendedProperties')) {
                obj['extendedProperties'] = ApiClient.convertToType(data['extendedProperties'], Object);
            }
            if (data.hasOwnProperty('repositoryId')) {
                obj['repositoryId'] = ApiClient.convertToType(data['repositoryId'], 'String');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DataStoreProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DataStoreProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DataStoreProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['customerSecrets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['customerSecrets'])) {
                throw new Error("Expected the field `customerSecrets` to be an array in the JSON data but got " + data['customerSecrets']);
            }
            // validate the optional field `customerSecrets` (array)
            for (const item of data['customerSecrets']) {
                CustomerSecret.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['dataStoreTypeId'] && !(typeof data['dataStoreTypeId'] === 'string' || data['dataStoreTypeId'] instanceof String)) {
            throw new Error("Expected the field `dataStoreTypeId` to be a primitive type in the JSON string but got " + data['dataStoreTypeId']);
        }
        // ensure the json data is a string
        if (data['repositoryId'] && !(typeof data['repositoryId'] === 'string' || data['repositoryId'] instanceof String)) {
            throw new Error("Expected the field `repositoryId` to be a primitive type in the JSON string but got " + data['repositoryId']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }

        return true;
    }


}

DataStoreProperties.RequiredProperties = ["dataStoreTypeId", "state"];

/**
 * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
 * @member {Array.<module:model/CustomerSecret>} customerSecrets
 */
DataStoreProperties.prototype['customerSecrets'] = undefined;

/**
 * The arm id of the data store type.
 * @member {String} dataStoreTypeId
 */
DataStoreProperties.prototype['dataStoreTypeId'] = undefined;

/**
 * A generic json used differently by each data source type.
 * @member {Object} extendedProperties
 */
DataStoreProperties.prototype['extendedProperties'] = undefined;

/**
 * Arm Id for the manager resource to which the data source is associated. This is optional.
 * @member {String} repositoryId
 */
DataStoreProperties.prototype['repositoryId'] = undefined;

/**
 * State of the data source.
 * @member {module:model/DataStoreProperties.StateEnum} state
 */
DataStoreProperties.prototype['state'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
DataStoreProperties['StateEnum'] = {

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Supported"
     * @const
     */
    "Supported": "Supported"
};



export default DataStoreProperties;

