/**
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Key model module.
 * @module model/Key
 * @version 2016-06-01
 */
class Key {
    /**
     * Constructs a new <code>Key</code>.
     * Encryption Key.
     * @alias module:model/Key
     * @param encryptionChunkSizeInBytes {Number} The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk.
     * @param keyExponent {String} Exponent of the encryption key.
     * @param keyModulus {String} Modulus of the encryption key.
     */
    constructor(encryptionChunkSizeInBytes, keyExponent, keyModulus) { 
        
        Key.initialize(this, encryptionChunkSizeInBytes, keyExponent, keyModulus);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, encryptionChunkSizeInBytes, keyExponent, keyModulus) { 
        obj['encryptionChunkSizeInBytes'] = encryptionChunkSizeInBytes;
        obj['keyExponent'] = keyExponent;
        obj['keyModulus'] = keyModulus;
    }

    /**
     * Constructs a <code>Key</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Key} obj Optional instance to populate.
     * @return {module:model/Key} The populated <code>Key</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Key();

            if (data.hasOwnProperty('encryptionChunkSizeInBytes')) {
                obj['encryptionChunkSizeInBytes'] = ApiClient.convertToType(data['encryptionChunkSizeInBytes'], 'Number');
            }
            if (data.hasOwnProperty('keyExponent')) {
                obj['keyExponent'] = ApiClient.convertToType(data['keyExponent'], 'String');
            }
            if (data.hasOwnProperty('keyModulus')) {
                obj['keyModulus'] = ApiClient.convertToType(data['keyModulus'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Key</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Key</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Key.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['keyExponent'] && !(typeof data['keyExponent'] === 'string' || data['keyExponent'] instanceof String)) {
            throw new Error("Expected the field `keyExponent` to be a primitive type in the JSON string but got " + data['keyExponent']);
        }
        // ensure the json data is a string
        if (data['keyModulus'] && !(typeof data['keyModulus'] === 'string' || data['keyModulus'] instanceof String)) {
            throw new Error("Expected the field `keyModulus` to be a primitive type in the JSON string but got " + data['keyModulus']);
        }

        return true;
    }


}

Key.RequiredProperties = ["encryptionChunkSizeInBytes", "keyExponent", "keyModulus"];

/**
 * The maximum byte size that can be encrypted by the key. For a key size larger than the size, break into chunks and encrypt each chunk, append each encrypted chunk with : to mark the end of the chunk.
 * @member {Number} encryptionChunkSizeInBytes
 */
Key.prototype['encryptionChunkSizeInBytes'] = undefined;

/**
 * Exponent of the encryption key.
 * @member {String} keyExponent
 */
Key.prototype['keyExponent'] = undefined;

/**
 * Modulus of the encryption key.
 * @member {String} keyModulus
 */
Key.prototype['keyModulus'] = undefined;






export default Key;

