/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerSecret;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data Store for sources and sinks
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:06.751898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataStoreProperties {
  public static final String SERIALIZED_NAME_CUSTOMER_SECRETS = "customerSecrets";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SECRETS)
  private List<CustomerSecret> customerSecrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_STORE_TYPE_ID = "dataStoreTypeId";
  @SerializedName(SERIALIZED_NAME_DATA_STORE_TYPE_ID)
  private String dataStoreTypeId;

  public static final String SERIALIZED_NAME_EXTENDED_PROPERTIES = "extendedProperties";
  @SerializedName(SERIALIZED_NAME_EXTENDED_PROPERTIES)
  private Object extendedProperties;

  public static final String SERIALIZED_NAME_REPOSITORY_ID = "repositoryId";
  @SerializedName(SERIALIZED_NAME_REPOSITORY_ID)
  private String repositoryId;

  /**
   * State of the data source.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled"),
    
    SUPPORTED("Supported");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public DataStoreProperties() {
  }

  public DataStoreProperties customerSecrets(List<CustomerSecret> customerSecrets) {
    this.customerSecrets = customerSecrets;
    return this;
  }

  public DataStoreProperties addCustomerSecretsItem(CustomerSecret customerSecretsItem) {
    if (this.customerSecrets == null) {
      this.customerSecrets = new ArrayList<>();
    }
    this.customerSecrets.add(customerSecretsItem);
    return this;
  }

  /**
   * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
   * @return customerSecrets
   */
  @javax.annotation.Nullable
  public List<CustomerSecret> getCustomerSecrets() {
    return customerSecrets;
  }

  public void setCustomerSecrets(List<CustomerSecret> customerSecrets) {
    this.customerSecrets = customerSecrets;
  }


  public DataStoreProperties dataStoreTypeId(String dataStoreTypeId) {
    this.dataStoreTypeId = dataStoreTypeId;
    return this;
  }

  /**
   * The arm id of the data store type.
   * @return dataStoreTypeId
   */
  @javax.annotation.Nonnull
  public String getDataStoreTypeId() {
    return dataStoreTypeId;
  }

  public void setDataStoreTypeId(String dataStoreTypeId) {
    this.dataStoreTypeId = dataStoreTypeId;
  }


  public DataStoreProperties extendedProperties(Object extendedProperties) {
    this.extendedProperties = extendedProperties;
    return this;
  }

  /**
   * A generic json used differently by each data source type.
   * @return extendedProperties
   */
  @javax.annotation.Nullable
  public Object getExtendedProperties() {
    return extendedProperties;
  }

  public void setExtendedProperties(Object extendedProperties) {
    this.extendedProperties = extendedProperties;
  }


  public DataStoreProperties repositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
    return this;
  }

  /**
   * Arm Id for the manager resource to which the data source is associated. This is optional.
   * @return repositoryId
   */
  @javax.annotation.Nullable
  public String getRepositoryId() {
    return repositoryId;
  }

  public void setRepositoryId(String repositoryId) {
    this.repositoryId = repositoryId;
  }


  public DataStoreProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the data source.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataStoreProperties dataStoreProperties = (DataStoreProperties) o;
    return Objects.equals(this.customerSecrets, dataStoreProperties.customerSecrets) &&
        Objects.equals(this.dataStoreTypeId, dataStoreProperties.dataStoreTypeId) &&
        Objects.equals(this.extendedProperties, dataStoreProperties.extendedProperties) &&
        Objects.equals(this.repositoryId, dataStoreProperties.repositoryId) &&
        Objects.equals(this.state, dataStoreProperties.state);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerSecrets, dataStoreTypeId, extendedProperties, repositoryId, state);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataStoreProperties {\n");
    sb.append("    customerSecrets: ").append(toIndentedString(customerSecrets)).append("\n");
    sb.append("    dataStoreTypeId: ").append(toIndentedString(dataStoreTypeId)).append("\n");
    sb.append("    extendedProperties: ").append(toIndentedString(extendedProperties)).append("\n");
    sb.append("    repositoryId: ").append(toIndentedString(repositoryId)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerSecrets");
    openapiFields.add("dataStoreTypeId");
    openapiFields.add("extendedProperties");
    openapiFields.add("repositoryId");
    openapiFields.add("state");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataStoreTypeId");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataStoreProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataStoreProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataStoreProperties is not found in the empty JSON string", DataStoreProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataStoreProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataStoreProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataStoreProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customerSecrets") != null && !jsonObj.get("customerSecrets").isJsonNull()) {
        JsonArray jsonArraycustomerSecrets = jsonObj.getAsJsonArray("customerSecrets");
        if (jsonArraycustomerSecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerSecrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("customerSecrets").toString()));
          }

          // validate the optional field `customerSecrets` (array)
          for (int i = 0; i < jsonArraycustomerSecrets.size(); i++) {
            CustomerSecret.validateJsonElement(jsonArraycustomerSecrets.get(i));
          };
        }
      }
      if (!jsonObj.get("dataStoreTypeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataStoreTypeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataStoreTypeId").toString()));
      }
      if ((jsonObj.get("repositoryId") != null && !jsonObj.get("repositoryId").isJsonNull()) && !jsonObj.get("repositoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `repositoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("repositoryId").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataStoreProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataStoreProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataStoreProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataStoreProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataStoreProperties>() {
           @Override
           public void write(JsonWriter out, DataStoreProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataStoreProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataStoreProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataStoreProperties
   * @throws IOException if the JSON string is invalid with respect to DataStoreProperties
   */
  public static DataStoreProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataStoreProperties.class);
  }

  /**
   * Convert an instance of DataStoreProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

