/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobsCancel
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job cancellation request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelCall(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/cancel"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsCancelValidateBeforeCall(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobsCancel(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsCancel(Async)");
        }

        return jobsCancelCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * Cancels the given job.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job cancellation request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsCancel(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        jobsCancelWithHttpInfo(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion);
    }

    /**
     * 
     * Cancels the given job.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job cancellation request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsCancelWithHttpInfo(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsCancelValidateBeforeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Cancels the given job.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job cancellation request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job cancelled. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsCancelAsync(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsCancelValidateBeforeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsGet
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job that matches the given criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetCall(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($expand != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$expand", $expand));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsGetValidateBeforeCall(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $expand, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsGet(Async)");
        }

        return jobsGetCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $expand, _callback);

    }

    /**
     * 
     * This method gets a data manager job given the jobId.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job that matches the given criteria. </td><td>  -  </td></tr>
     </table>
     */
    public Job jobsGet(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $expand) throws ApiException {
        ApiResponse<Job> localVarResp = jobsGetWithHttpInfo(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $expand);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets a data manager job given the jobId.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job that matches the given criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> jobsGetWithHttpInfo(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $expand) throws ApiException {
        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $expand, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets a data manager job given the jobId.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $expand $expand is supported on details parameter for job, which provides details on the job stages. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job that matches the given criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsGetAsync(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $expand, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsGetValidateBeforeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $expand, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListByDataManager
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs in the resource specified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByDataManagerCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobs"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListByDataManagerValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListByDataManager(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListByDataManager(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobsListByDataManager(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListByDataManager(Async)");
        }

        return jobsListByDataManagerCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * This method gets all the jobs at the data manager resource level.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return JobList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs in the resource specified. </td><td>  -  </td></tr>
     </table>
     */
    public JobList jobsListByDataManager(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<JobList> localVarResp = jobsListByDataManagerWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets all the jobs at the data manager resource level.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;JobList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs in the resource specified. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobList> jobsListByDataManagerWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobsListByDataManagerValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets all the jobs at the data manager resource level.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs in the resource specified. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByDataManagerAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback<JobList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListByDataManagerValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListByDataService
     * @param dataServiceName The name of the data service of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs that match the service and resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByDataServiceCall(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobs"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListByDataServiceValidateBeforeCall(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobsListByDataService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListByDataService(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListByDataService(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobsListByDataService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListByDataService(Async)");
        }

        return jobsListByDataServiceCall(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * This method gets all the jobs of a data service type in a given resource.
     * @param dataServiceName The name of the data service of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return JobList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs that match the service and resource. </td><td>  -  </td></tr>
     </table>
     */
    public JobList jobsListByDataService(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<JobList> localVarResp = jobsListByDataServiceWithHttpInfo(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets all the jobs of a data service type in a given resource.
     * @param dataServiceName The name of the data service of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;JobList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs that match the service and resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobList> jobsListByDataServiceWithHttpInfo(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobsListByDataServiceValidateBeforeCall(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets all the jobs of a data service type in a given resource.
     * @param dataServiceName The name of the data service of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs that match the service and resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByDataServiceAsync(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback<JobList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListByDataServiceValidateBeforeCall(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsListByJobDefinition
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition for which jobs are needed. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByJobDefinitionCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsListByJobDefinitionValidateBeforeCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobsListByJobDefinition(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobsListByJobDefinition(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsListByJobDefinition(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsListByJobDefinition(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobsListByJobDefinition(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsListByJobDefinition(Async)");
        }

        return jobsListByJobDefinitionCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * This method gets all the jobs of a given job definition.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition for which jobs are needed. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return JobList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs. </td><td>  -  </td></tr>
     </table>
     */
    public JobList jobsListByJobDefinition(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<JobList> localVarResp = jobsListByJobDefinitionWithHttpInfo(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets all the jobs of a given job definition.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition for which jobs are needed. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;JobList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobList> jobsListByJobDefinitionWithHttpInfo(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobsListByJobDefinitionValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets all the jobs of a given job definition.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition for which jobs are needed. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of jobs. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsListByJobDefinitionAsync(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback<JobList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsListByJobDefinitionValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobsResume
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job resume request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job resumed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsResumeCall(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/jobs/{jobId}/resume"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobsResumeValidateBeforeCall(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobsResume(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobsResume(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling jobsResume(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobsResume(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobsResume(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobsResume(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobsResume(Async)");
        }

        return jobsResumeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * Resumes the given job.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job resume request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job resumed. </td><td>  -  </td></tr>
     </table>
     */
    public void jobsResume(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        jobsResumeWithHttpInfo(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion);
    }

    /**
     * 
     * Resumes the given job.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job resume request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job resumed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobsResumeWithHttpInfo(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobsResumeValidateBeforeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Resumes the given job.
     * @param dataServiceName The name of the data service of the job definition. (required)
     * @param jobDefinitionName The name of the job definition of the job. (required)
     * @param jobId The job id of the job queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted job resume request. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job resumed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobsResumeAsync(String dataServiceName, String jobDefinitionName, String jobId, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobsResumeValidateBeforeCall(dataServiceName, jobDefinitionName, jobId, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
