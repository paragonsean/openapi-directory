/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.JobDefinition;
import org.openapitools.client.model.JobDefinitionList;
import org.openapitools.client.model.RunParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class JobDefinitionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public JobDefinitionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public JobDefinitionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for jobDefinitionsCreateOrUpdate
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobDefinition Job Definition object to be created or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobDefinition object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsCreateOrUpdateCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, JobDefinition jobDefinition, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = jobDefinition;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobDefinitionsCreateOrUpdateValidateBeforeCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, JobDefinition jobDefinition, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'jobDefinition' is set
        if (jobDefinition == null) {
            throw new ApiException("Missing the required parameter 'jobDefinition' when calling jobDefinitionsCreateOrUpdate(Async)");
        }

        return jobDefinitionsCreateOrUpdateCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, jobDefinition, _callback);

    }

    /**
     * 
     * Creates or updates a job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobDefinition Job Definition object to be created or updated. (required)
     * @return JobDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobDefinition object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinition jobDefinitionsCreateOrUpdate(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, JobDefinition jobDefinition) throws ApiException {
        ApiResponse<JobDefinition> localVarResp = jobDefinitionsCreateOrUpdateWithHttpInfo(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, jobDefinition);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates a job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobDefinition Job Definition object to be created or updated. (required)
     * @return ApiResponse&lt;JobDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobDefinition object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinition> jobDefinitionsCreateOrUpdateWithHttpInfo(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, JobDefinition jobDefinition) throws ApiException {
        okhttp3.Call localVarCall = jobDefinitionsCreateOrUpdateValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, jobDefinition, null);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates a job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param jobDefinition Job Definition object to be created or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> JobDefinition object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsCreateOrUpdateAsync(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, JobDefinition jobDefinition, final ApiCallback<JobDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobDefinitionsCreateOrUpdateValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, jobDefinition, _callback);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobDefinitionsDelete
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for JobDefinition deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> JobDefinition deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsDeleteCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobDefinitionsDeleteValidateBeforeCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobDefinitionsDelete(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobDefinitionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsDelete(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobDefinitionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobDefinitionsDelete(Async)");
        }

        return jobDefinitionsDeleteCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * This method deletes the given job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for JobDefinition deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> JobDefinition deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void jobDefinitionsDelete(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        jobDefinitionsDeleteWithHttpInfo(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion);
    }

    /**
     * 
     * This method deletes the given job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for JobDefinition deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> JobDefinition deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobDefinitionsDeleteWithHttpInfo(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobDefinitionsDeleteValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This method deletes the given job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName The job definition name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for JobDefinition deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> JobDefinition deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsDeleteAsync(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobDefinitionsDeleteValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobDefinitionsGet
     * @param dataServiceName The data service name of the job definition (required)
     * @param jobDefinitionName The job definition name that is being queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job definition that matches the criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsGetCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobDefinitionsGetValidateBeforeCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobDefinitionsGet(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobDefinitionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsGet(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobDefinitionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobDefinitionsGet(Async)");
        }

        return jobDefinitionsGetCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * This method gets job definition object by name.
     * @param dataServiceName The data service name of the job definition (required)
     * @param jobDefinitionName The job definition name that is being queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return JobDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job definition that matches the criteria. </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinition jobDefinitionsGet(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        ApiResponse<JobDefinition> localVarResp = jobDefinitionsGetWithHttpInfo(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets job definition object by name.
     * @param dataServiceName The data service name of the job definition (required)
     * @param jobDefinitionName The job definition name that is being queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;JobDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job definition that matches the criteria. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinition> jobDefinitionsGetWithHttpInfo(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = jobDefinitionsGetValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets job definition object by name.
     * @param dataServiceName The data service name of the job definition (required)
     * @param jobDefinitionName The job definition name that is being queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The job definition that matches the criteria. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsGetAsync(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<JobDefinition> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobDefinitionsGetValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<JobDefinition>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobDefinitionsListByDataManager
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions in that resource.OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsListByDataManagerCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/jobDefinitions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobDefinitionsListByDataManagerValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobDefinitionsListByDataManager(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsListByDataManager(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobDefinitionsListByDataManager(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobDefinitionsListByDataManager(Async)");
        }

        return jobDefinitionsListByDataManagerCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * This method gets all the job definitions of the given data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return JobDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions in that resource.OK </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinitionList jobDefinitionsListByDataManager(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<JobDefinitionList> localVarResp = jobDefinitionsListByDataManagerWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets all the job definitions of the given data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;JobDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions in that resource.OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinitionList> jobDefinitionsListByDataManagerWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobDefinitionsListByDataManagerValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<JobDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets all the job definitions of the given data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions in that resource.OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsListByDataManagerAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback<JobDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobDefinitionsListByDataManagerValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobDefinitionsListByDataService
     * @param dataServiceName The data service type of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions of the given data service type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsListByDataServiceCall(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobDefinitionsListByDataServiceValidateBeforeCall(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobDefinitionsListByDataService(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobDefinitionsListByDataService(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsListByDataService(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobDefinitionsListByDataService(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobDefinitionsListByDataService(Async)");
        }

        return jobDefinitionsListByDataServiceCall(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * This method gets all the job definitions of the given data service name.
     * @param dataServiceName The data service type of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return JobDefinitionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions of the given data service type. </td><td>  -  </td></tr>
     </table>
     */
    public JobDefinitionList jobDefinitionsListByDataService(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<JobDefinitionList> localVarResp = jobDefinitionsListByDataServiceWithHttpInfo(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets all the job definitions of the given data service name.
     * @param dataServiceName The data service type of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;JobDefinitionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions of the given data service type. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobDefinitionList> jobDefinitionsListByDataServiceWithHttpInfo(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = jobDefinitionsListByDataServiceValidateBeforeCall(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<JobDefinitionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets all the job definitions of the given data service name.
     * @param dataServiceName The data service type of interest. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of job definitions of the given data service type. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsListByDataServiceAsync(String dataServiceName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback<JobDefinitionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobDefinitionsListByDataServiceValidateBeforeCall(dataServiceName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<JobDefinitionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for jobDefinitionsRun
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName Name of the job definition. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param runParameters Run time parameters for the job definition. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Job run accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job run started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsRunCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, RunParameters runParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = runParameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataServices/{dataServiceName}/jobDefinitions/{jobDefinitionName}/run"
            .replace("{" + "dataServiceName" + "}", localVarApiClient.escapeString(dataServiceName.toString()))
            .replace("{" + "jobDefinitionName" + "}", localVarApiClient.escapeString(jobDefinitionName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call jobDefinitionsRunValidateBeforeCall(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, RunParameters runParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataServiceName' is set
        if (dataServiceName == null) {
            throw new ApiException("Missing the required parameter 'dataServiceName' when calling jobDefinitionsRun(Async)");
        }

        // verify the required parameter 'jobDefinitionName' is set
        if (jobDefinitionName == null) {
            throw new ApiException("Missing the required parameter 'jobDefinitionName' when calling jobDefinitionsRun(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling jobDefinitionsRun(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling jobDefinitionsRun(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling jobDefinitionsRun(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling jobDefinitionsRun(Async)");
        }

        // verify the required parameter 'runParameters' is set
        if (runParameters == null) {
            throw new ApiException("Missing the required parameter 'runParameters' when calling jobDefinitionsRun(Async)");
        }

        return jobDefinitionsRunCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, runParameters, _callback);

    }

    /**
     * 
     * This method runs a job instance of the given job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName Name of the job definition. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param runParameters Run time parameters for the job definition. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Job run accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job run started. </td><td>  -  </td></tr>
     </table>
     */
    public void jobDefinitionsRun(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, RunParameters runParameters) throws ApiException {
        jobDefinitionsRunWithHttpInfo(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, runParameters);
    }

    /**
     * 
     * This method runs a job instance of the given job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName Name of the job definition. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param runParameters Run time parameters for the job definition. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Job run accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job run started. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> jobDefinitionsRunWithHttpInfo(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, RunParameters runParameters) throws ApiException {
        okhttp3.Call localVarCall = jobDefinitionsRunValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, runParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This method runs a job instance of the given job definition.
     * @param dataServiceName The data service type of the job definition. (required)
     * @param jobDefinitionName Name of the job definition. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param runParameters Run time parameters for the job definition. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Job run accepted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Job run started. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call jobDefinitionsRunAsync(String dataServiceName, String jobDefinitionName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, RunParameters runParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = jobDefinitionsRunValidateBeforeCall(dataServiceName, jobDefinitionName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, runParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
