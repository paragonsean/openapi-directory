/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataStore;
import org.openapitools.client.model.DataStoreList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataStoresApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataStoresApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataStoresApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataStoresCreateOrUpdate
     * @param dataStoreName The data store/repository name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataStore The data store/repository object to be created or updated. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresCreateOrUpdateCall(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataStore dataStore, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataStore;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}"
            .replace("{" + "dataStoreName" + "}", localVarApiClient.escapeString(dataStoreName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataStoresCreateOrUpdateValidateBeforeCall(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataStore dataStore, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataStoreName' is set
        if (dataStoreName == null) {
            throw new ApiException("Missing the required parameter 'dataStoreName' when calling dataStoresCreateOrUpdate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataStoresCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataStoresCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataStoresCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataStoresCreateOrUpdate(Async)");
        }

        // verify the required parameter 'dataStore' is set
        if (dataStore == null) {
            throw new ApiException("Missing the required parameter 'dataStore' when calling dataStoresCreateOrUpdate(Async)");
        }

        return dataStoresCreateOrUpdateCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataStore, _callback);

    }

    /**
     * 
     * Creates or updates the data store/repository in the data manager.
     * @param dataStoreName The data store/repository name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataStore The data store/repository object to be created or updated. (required)
     * @return DataStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public DataStore dataStoresCreateOrUpdate(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataStore dataStore) throws ApiException {
        ApiResponse<DataStore> localVarResp = dataStoresCreateOrUpdateWithHttpInfo(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataStore);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the data store/repository in the data manager.
     * @param dataStoreName The data store/repository name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataStore The data store/repository object to be created or updated. (required)
     * @return ApiResponse&lt;DataStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataStore> dataStoresCreateOrUpdateWithHttpInfo(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataStore dataStore) throws ApiException {
        okhttp3.Call localVarCall = dataStoresCreateOrUpdateValidateBeforeCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataStore, null);
        Type localVarReturnType = new TypeToken<DataStore>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the data store/repository in the data manager.
     * @param dataStoreName The data store/repository name to be created or updated. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataStore The data store/repository object to be created or updated. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresCreateOrUpdateAsync(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataStore dataStore, final ApiCallback<DataStore> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataStoresCreateOrUpdateValidateBeforeCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataStore, _callback);
        Type localVarReturnType = new TypeToken<DataStore>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataStoresDelete
     * @param dataStoreName The data store/repository name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for DataStore deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> DataStore deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresDeleteCall(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}"
            .replace("{" + "dataStoreName" + "}", localVarApiClient.escapeString(dataStoreName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataStoresDeleteValidateBeforeCall(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataStoreName' is set
        if (dataStoreName == null) {
            throw new ApiException("Missing the required parameter 'dataStoreName' when calling dataStoresDelete(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataStoresDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataStoresDelete(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataStoresDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataStoresDelete(Async)");
        }

        return dataStoresDeleteCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * This method deletes the given data store/repository.
     * @param dataStoreName The data store/repository name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for DataStore deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> DataStore deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void dataStoresDelete(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        dataStoresDeleteWithHttpInfo(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion);
    }

    /**
     * 
     * This method deletes the given data store/repository.
     * @param dataStoreName The data store/repository name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for DataStore deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> DataStore deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataStoresDeleteWithHttpInfo(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataStoresDeleteValidateBeforeCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This method deletes the given data store/repository.
     * @param dataStoreName The data store/repository name to be deleted. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted request for DataStore deletion. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> DataStore deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresDeleteAsync(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataStoresDeleteValidateBeforeCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataStoresGet
     * @param dataStoreName The data store/repository name queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository which matches the name given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresGetCall(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores/{dataStoreName}"
            .replace("{" + "dataStoreName" + "}", localVarApiClient.escapeString(dataStoreName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataStoresGetValidateBeforeCall(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dataStoreName' is set
        if (dataStoreName == null) {
            throw new ApiException("Missing the required parameter 'dataStoreName' when calling dataStoresGet(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataStoresGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataStoresGet(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataStoresGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataStoresGet(Async)");
        }

        return dataStoresGetCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * This method gets the data store/repository by name.
     * @param dataStoreName The data store/repository name queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return DataStore
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository which matches the name given. </td><td>  -  </td></tr>
     </table>
     */
    public DataStore dataStoresGet(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        ApiResponse<DataStore> localVarResp = dataStoresGetWithHttpInfo(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * This method gets the data store/repository by name.
     * @param dataStoreName The data store/repository name queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;DataStore&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository which matches the name given. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataStore> dataStoresGetWithHttpInfo(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataStoresGetValidateBeforeCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataStore>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This method gets the data store/repository by name.
     * @param dataStoreName The data store/repository name queried. (required)
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The data store/repository which matches the name given. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresGetAsync(String dataStoreName, String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<DataStore> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataStoresGetValidateBeforeCall(dataStoreName, subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataStore>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataStoresListByDataManager
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of data stores/repositories in the given resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresListByDataManagerCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}/dataStores"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$filter", $filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataStoresListByDataManagerValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataStoresListByDataManager(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataStoresListByDataManager(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataStoresListByDataManager(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataStoresListByDataManager(Async)");
        }

        return dataStoresListByDataManagerCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);

    }

    /**
     * 
     * Gets all the data stores/repositories in the given resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return DataStoreList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of data stores/repositories in the given resource. </td><td>  -  </td></tr>
     </table>
     */
    public DataStoreList dataStoresListByDataManager(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        ApiResponse<DataStoreList> localVarResp = dataStoresListByDataManagerWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets all the data stores/repositories in the given resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @return ApiResponse&lt;DataStoreList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of data stores/repositories in the given resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataStoreList> dataStoresListByDataManagerWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter) throws ApiException {
        okhttp3.Call localVarCall = dataStoresListByDataManagerValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, null);
        Type localVarReturnType = new TypeToken<DataStoreList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets all the data stores/repositories in the given resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param $filter OData Filter options (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of data stores/repositories in the given resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataStoresListByDataManagerAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, String $filter, final ApiCallback<DataStoreList> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataStoresListByDataManagerValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, $filter, _callback);
        Type localVarReturnType = new TypeToken<DataStoreList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
