/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ErrorDetails;
import org.openapitools.client.model.JobDefinition;
import org.openapitools.client.model.JobStages;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:06.751898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobDetails {
  public static final String SERIALIZED_NAME_ERROR_DETAILS = "errorDetails";
  @SerializedName(SERIALIZED_NAME_ERROR_DETAILS)
  private List<ErrorDetails> errorDetails = new ArrayList<>();

  public static final String SERIALIZED_NAME_ITEM_DETAILS_LINK = "itemDetailsLink";
  @SerializedName(SERIALIZED_NAME_ITEM_DETAILS_LINK)
  private String itemDetailsLink;

  public static final String SERIALIZED_NAME_JOB_DEFINITION = "jobDefinition";
  @SerializedName(SERIALIZED_NAME_JOB_DEFINITION)
  private JobDefinition jobDefinition;

  public static final String SERIALIZED_NAME_JOB_STAGES = "jobStages";
  @SerializedName(SERIALIZED_NAME_JOB_STAGES)
  private List<JobStages> jobStages = new ArrayList<>();

  public JobDetails() {
  }

  public JobDetails errorDetails(List<ErrorDetails> errorDetails) {
    this.errorDetails = errorDetails;
    return this;
  }

  public JobDetails addErrorDetailsItem(ErrorDetails errorDetailsItem) {
    if (this.errorDetails == null) {
      this.errorDetails = new ArrayList<>();
    }
    this.errorDetails.add(errorDetailsItem);
    return this;
  }

  /**
   * Error details for failure. This is optional.
   * @return errorDetails
   */
  @javax.annotation.Nullable
  public List<ErrorDetails> getErrorDetails() {
    return errorDetails;
  }

  public void setErrorDetails(List<ErrorDetails> errorDetails) {
    this.errorDetails = errorDetails;
  }


  public JobDetails itemDetailsLink(String itemDetailsLink) {
    this.itemDetailsLink = itemDetailsLink;
    return this;
  }

  /**
   * Item Details Link to download files or see details
   * @return itemDetailsLink
   */
  @javax.annotation.Nullable
  public String getItemDetailsLink() {
    return itemDetailsLink;
  }

  public void setItemDetailsLink(String itemDetailsLink) {
    this.itemDetailsLink = itemDetailsLink;
  }


  public JobDetails jobDefinition(JobDefinition jobDefinition) {
    this.jobDefinition = jobDefinition;
    return this;
  }

  /**
   * Get jobDefinition
   * @return jobDefinition
   */
  @javax.annotation.Nullable
  public JobDefinition getJobDefinition() {
    return jobDefinition;
  }

  public void setJobDefinition(JobDefinition jobDefinition) {
    this.jobDefinition = jobDefinition;
  }


  public JobDetails jobStages(List<JobStages> jobStages) {
    this.jobStages = jobStages;
    return this;
  }

  public JobDetails addJobStagesItem(JobStages jobStagesItem) {
    if (this.jobStages == null) {
      this.jobStages = new ArrayList<>();
    }
    this.jobStages.add(jobStagesItem);
    return this;
  }

  /**
   * List of stages that ran in the job
   * @return jobStages
   */
  @javax.annotation.Nullable
  public List<JobStages> getJobStages() {
    return jobStages;
  }

  public void setJobStages(List<JobStages> jobStages) {
    this.jobStages = jobStages;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDetails jobDetails = (JobDetails) o;
    return Objects.equals(this.errorDetails, jobDetails.errorDetails) &&
        Objects.equals(this.itemDetailsLink, jobDetails.itemDetailsLink) &&
        Objects.equals(this.jobDefinition, jobDetails.jobDefinition) &&
        Objects.equals(this.jobStages, jobDetails.jobStages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(errorDetails, itemDetailsLink, jobDefinition, jobStages);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDetails {\n");
    sb.append("    errorDetails: ").append(toIndentedString(errorDetails)).append("\n");
    sb.append("    itemDetailsLink: ").append(toIndentedString(itemDetailsLink)).append("\n");
    sb.append("    jobDefinition: ").append(toIndentedString(jobDefinition)).append("\n");
    sb.append("    jobStages: ").append(toIndentedString(jobStages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("errorDetails");
    openapiFields.add("itemDetailsLink");
    openapiFields.add("jobDefinition");
    openapiFields.add("jobStages");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDetails is not found in the empty JSON string", JobDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("errorDetails") != null && !jsonObj.get("errorDetails").isJsonNull()) {
        JsonArray jsonArrayerrorDetails = jsonObj.getAsJsonArray("errorDetails");
        if (jsonArrayerrorDetails != null) {
          // ensure the json data is an array
          if (!jsonObj.get("errorDetails").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `errorDetails` to be an array in the JSON string but got `%s`", jsonObj.get("errorDetails").toString()));
          }

          // validate the optional field `errorDetails` (array)
          for (int i = 0; i < jsonArrayerrorDetails.size(); i++) {
            ErrorDetails.validateJsonElement(jsonArrayerrorDetails.get(i));
          };
        }
      }
      if ((jsonObj.get("itemDetailsLink") != null && !jsonObj.get("itemDetailsLink").isJsonNull()) && !jsonObj.get("itemDetailsLink").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `itemDetailsLink` to be a primitive type in the JSON string but got `%s`", jsonObj.get("itemDetailsLink").toString()));
      }
      // validate the optional field `jobDefinition`
      if (jsonObj.get("jobDefinition") != null && !jsonObj.get("jobDefinition").isJsonNull()) {
        JobDefinition.validateJsonElement(jsonObj.get("jobDefinition"));
      }
      if (jsonObj.get("jobStages") != null && !jsonObj.get("jobStages").isJsonNull()) {
        JsonArray jsonArrayjobStages = jsonObj.getAsJsonArray("jobStages");
        if (jsonArrayjobStages != null) {
          // ensure the json data is an array
          if (!jsonObj.get("jobStages").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `jobStages` to be an array in the JSON string but got `%s`", jsonObj.get("jobStages").toString()));
          }

          // validate the optional field `jobStages` (array)
          for (int i = 0; i < jsonArrayjobStages.size(); i++) {
            JobStages.validateJsonElement(jsonArrayjobStages.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDetails>() {
           @Override
           public void write(JsonWriter out, JobDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDetails
   * @throws IOException if the JSON string is invalid with respect to JobDetails
   */
  public static JobDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDetails.class);
  }

  /**
   * Convert an instance of JobDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

