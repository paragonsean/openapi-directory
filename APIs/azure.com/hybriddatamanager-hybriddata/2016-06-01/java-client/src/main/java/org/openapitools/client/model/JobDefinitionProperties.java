/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CustomerSecret;
import org.openapitools.client.model.Schedule;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job Definition
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:06.751898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobDefinitionProperties {
  public static final String SERIALIZED_NAME_CUSTOMER_SECRETS = "customerSecrets";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_SECRETS)
  private List<CustomerSecret> customerSecrets = new ArrayList<>();

  public static final String SERIALIZED_NAME_DATA_SERVICE_INPUT = "dataServiceInput";
  @SerializedName(SERIALIZED_NAME_DATA_SERVICE_INPUT)
  private Object dataServiceInput;

  public static final String SERIALIZED_NAME_DATA_SINK_ID = "dataSinkId";
  @SerializedName(SERIALIZED_NAME_DATA_SINK_ID)
  private String dataSinkId;

  public static final String SERIALIZED_NAME_DATA_SOURCE_ID = "dataSourceId";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_ID)
  private String dataSourceId;

  public static final String SERIALIZED_NAME_LAST_MODIFIED_TIME = "lastModifiedTime";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED_TIME)
  private OffsetDateTime lastModifiedTime;

  /**
   * This is the preferred geo location for the job to run.
   */
  @JsonAdapter(RunLocationEnum.Adapter.class)
  public enum RunLocationEnum {
    NONE("none"),
    
    AUSTRALIAEAST("australiaeast"),
    
    AUSTRALIASOUTHEAST("australiasoutheast"),
    
    BRAZILSOUTH("brazilsouth"),
    
    CANADACENTRAL("canadacentral"),
    
    CANADAEAST("canadaeast"),
    
    CENTRALINDIA("centralindia"),
    
    CENTRALUS("centralus"),
    
    EASTASIA("eastasia"),
    
    EASTUS("eastus"),
    
    EASTUS2("eastus2"),
    
    JAPANEAST("japaneast"),
    
    JAPANWEST("japanwest"),
    
    KOREACENTRAL("koreacentral"),
    
    KOREASOUTH("koreasouth"),
    
    SOUTHEASTASIA("southeastasia"),
    
    SOUTHCENTRALUS("southcentralus"),
    
    SOUTHINDIA("southindia"),
    
    NORTHCENTRALUS("northcentralus"),
    
    NORTHEUROPE("northeurope"),
    
    UKSOUTH("uksouth"),
    
    UKWEST("ukwest"),
    
    WESTCENTRALUS("westcentralus"),
    
    WESTEUROPE("westeurope"),
    
    WESTINDIA("westindia"),
    
    WESTUS("westus"),
    
    WESTUS2("westus2");

    private String value;

    RunLocationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RunLocationEnum fromValue(String value) {
      for (RunLocationEnum b : RunLocationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RunLocationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RunLocationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RunLocationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RunLocationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RunLocationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RUN_LOCATION = "runLocation";
  @SerializedName(SERIALIZED_NAME_RUN_LOCATION)
  private RunLocationEnum runLocation;

  public static final String SERIALIZED_NAME_SCHEDULES = "schedules";
  @SerializedName(SERIALIZED_NAME_SCHEDULES)
  private List<Schedule> schedules = new ArrayList<>();

  /**
   * State of the job definition.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled"),
    
    SUPPORTED("Supported");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  /**
   * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
   */
  @JsonAdapter(UserConfirmationEnum.Adapter.class)
  public enum UserConfirmationEnum {
    NOT_REQUIRED("NotRequired"),
    
    REQUIRED("Required");

    private String value;

    UserConfirmationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static UserConfirmationEnum fromValue(String value) {
      for (UserConfirmationEnum b : UserConfirmationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<UserConfirmationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final UserConfirmationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public UserConfirmationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return UserConfirmationEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      UserConfirmationEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_USER_CONFIRMATION = "userConfirmation";
  @SerializedName(SERIALIZED_NAME_USER_CONFIRMATION)
  private UserConfirmationEnum userConfirmation = UserConfirmationEnum.NOT_REQUIRED;

  public JobDefinitionProperties() {
  }

  public JobDefinitionProperties customerSecrets(List<CustomerSecret> customerSecrets) {
    this.customerSecrets = customerSecrets;
    return this;
  }

  public JobDefinitionProperties addCustomerSecretsItem(CustomerSecret customerSecretsItem) {
    if (this.customerSecrets == null) {
      this.customerSecrets = new ArrayList<>();
    }
    this.customerSecrets.add(customerSecretsItem);
    return this;
  }

  /**
   * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
   * @return customerSecrets
   */
  @javax.annotation.Nullable
  public List<CustomerSecret> getCustomerSecrets() {
    return customerSecrets;
  }

  public void setCustomerSecrets(List<CustomerSecret> customerSecrets) {
    this.customerSecrets = customerSecrets;
  }


  public JobDefinitionProperties dataServiceInput(Object dataServiceInput) {
    this.dataServiceInput = dataServiceInput;
    return this;
  }

  /**
   * A generic json used differently by each data service type.
   * @return dataServiceInput
   */
  @javax.annotation.Nullable
  public Object getDataServiceInput() {
    return dataServiceInput;
  }

  public void setDataServiceInput(Object dataServiceInput) {
    this.dataServiceInput = dataServiceInput;
  }


  public JobDefinitionProperties dataSinkId(String dataSinkId) {
    this.dataSinkId = dataSinkId;
    return this;
  }

  /**
   * Data Sink Id associated to the job definition.
   * @return dataSinkId
   */
  @javax.annotation.Nonnull
  public String getDataSinkId() {
    return dataSinkId;
  }

  public void setDataSinkId(String dataSinkId) {
    this.dataSinkId = dataSinkId;
  }


  public JobDefinitionProperties dataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
    return this;
  }

  /**
   * Data Source Id associated to the job definition.
   * @return dataSourceId
   */
  @javax.annotation.Nonnull
  public String getDataSourceId() {
    return dataSourceId;
  }

  public void setDataSourceId(String dataSourceId) {
    this.dataSourceId = dataSourceId;
  }


  public JobDefinitionProperties lastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
    return this;
  }

  /**
   * Last modified time of the job definition.
   * @return lastModifiedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModifiedTime() {
    return lastModifiedTime;
  }

  public void setLastModifiedTime(OffsetDateTime lastModifiedTime) {
    this.lastModifiedTime = lastModifiedTime;
  }


  public JobDefinitionProperties runLocation(RunLocationEnum runLocation) {
    this.runLocation = runLocation;
    return this;
  }

  /**
   * This is the preferred geo location for the job to run.
   * @return runLocation
   */
  @javax.annotation.Nullable
  public RunLocationEnum getRunLocation() {
    return runLocation;
  }

  public void setRunLocation(RunLocationEnum runLocation) {
    this.runLocation = runLocation;
  }


  public JobDefinitionProperties schedules(List<Schedule> schedules) {
    this.schedules = schedules;
    return this;
  }

  public JobDefinitionProperties addSchedulesItem(Schedule schedulesItem) {
    if (this.schedules == null) {
      this.schedules = new ArrayList<>();
    }
    this.schedules.add(schedulesItem);
    return this;
  }

  /**
   * Schedule for running the job definition
   * @return schedules
   */
  @javax.annotation.Nullable
  public List<Schedule> getSchedules() {
    return schedules;
  }

  public void setSchedules(List<Schedule> schedules) {
    this.schedules = schedules;
  }


  public JobDefinitionProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the job definition.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public JobDefinitionProperties userConfirmation(UserConfirmationEnum userConfirmation) {
    this.userConfirmation = userConfirmation;
    return this;
  }

  /**
   * Enum to detect if user confirmation is required. If not passed will default to NotRequired.
   * @return userConfirmation
   */
  @javax.annotation.Nullable
  public UserConfirmationEnum getUserConfirmation() {
    return userConfirmation;
  }

  public void setUserConfirmation(UserConfirmationEnum userConfirmation) {
    this.userConfirmation = userConfirmation;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobDefinitionProperties jobDefinitionProperties = (JobDefinitionProperties) o;
    return Objects.equals(this.customerSecrets, jobDefinitionProperties.customerSecrets) &&
        Objects.equals(this.dataServiceInput, jobDefinitionProperties.dataServiceInput) &&
        Objects.equals(this.dataSinkId, jobDefinitionProperties.dataSinkId) &&
        Objects.equals(this.dataSourceId, jobDefinitionProperties.dataSourceId) &&
        Objects.equals(this.lastModifiedTime, jobDefinitionProperties.lastModifiedTime) &&
        Objects.equals(this.runLocation, jobDefinitionProperties.runLocation) &&
        Objects.equals(this.schedules, jobDefinitionProperties.schedules) &&
        Objects.equals(this.state, jobDefinitionProperties.state) &&
        Objects.equals(this.userConfirmation, jobDefinitionProperties.userConfirmation);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerSecrets, dataServiceInput, dataSinkId, dataSourceId, lastModifiedTime, runLocation, schedules, state, userConfirmation);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobDefinitionProperties {\n");
    sb.append("    customerSecrets: ").append(toIndentedString(customerSecrets)).append("\n");
    sb.append("    dataServiceInput: ").append(toIndentedString(dataServiceInput)).append("\n");
    sb.append("    dataSinkId: ").append(toIndentedString(dataSinkId)).append("\n");
    sb.append("    dataSourceId: ").append(toIndentedString(dataSourceId)).append("\n");
    sb.append("    lastModifiedTime: ").append(toIndentedString(lastModifiedTime)).append("\n");
    sb.append("    runLocation: ").append(toIndentedString(runLocation)).append("\n");
    sb.append("    schedules: ").append(toIndentedString(schedules)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    userConfirmation: ").append(toIndentedString(userConfirmation)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerSecrets");
    openapiFields.add("dataServiceInput");
    openapiFields.add("dataSinkId");
    openapiFields.add("dataSourceId");
    openapiFields.add("lastModifiedTime");
    openapiFields.add("runLocation");
    openapiFields.add("schedules");
    openapiFields.add("state");
    openapiFields.add("userConfirmation");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSinkId");
    openapiRequiredFields.add("dataSourceId");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobDefinitionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobDefinitionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobDefinitionProperties is not found in the empty JSON string", JobDefinitionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobDefinitionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobDefinitionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobDefinitionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("customerSecrets") != null && !jsonObj.get("customerSecrets").isJsonNull()) {
        JsonArray jsonArraycustomerSecrets = jsonObj.getAsJsonArray("customerSecrets");
        if (jsonArraycustomerSecrets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("customerSecrets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `customerSecrets` to be an array in the JSON string but got `%s`", jsonObj.get("customerSecrets").toString()));
          }

          // validate the optional field `customerSecrets` (array)
          for (int i = 0; i < jsonArraycustomerSecrets.size(); i++) {
            CustomerSecret.validateJsonElement(jsonArraycustomerSecrets.get(i));
          };
        }
      }
      if (!jsonObj.get("dataSinkId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSinkId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSinkId").toString()));
      }
      if (!jsonObj.get("dataSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceId").toString()));
      }
      if ((jsonObj.get("runLocation") != null && !jsonObj.get("runLocation").isJsonNull()) && !jsonObj.get("runLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runLocation").toString()));
      }
      // validate the optional field `runLocation`
      if (jsonObj.get("runLocation") != null && !jsonObj.get("runLocation").isJsonNull()) {
        RunLocationEnum.validateJsonElement(jsonObj.get("runLocation"));
      }
      if (jsonObj.get("schedules") != null && !jsonObj.get("schedules").isJsonNull()) {
        JsonArray jsonArrayschedules = jsonObj.getAsJsonArray("schedules");
        if (jsonArrayschedules != null) {
          // ensure the json data is an array
          if (!jsonObj.get("schedules").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `schedules` to be an array in the JSON string but got `%s`", jsonObj.get("schedules").toString()));
          }

          // validate the optional field `schedules` (array)
          for (int i = 0; i < jsonArrayschedules.size(); i++) {
            Schedule.validateJsonElement(jsonArrayschedules.get(i));
          };
        }
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("userConfirmation") != null && !jsonObj.get("userConfirmation").isJsonNull()) && !jsonObj.get("userConfirmation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userConfirmation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userConfirmation").toString()));
      }
      // validate the optional field `userConfirmation`
      if (jsonObj.get("userConfirmation") != null && !jsonObj.get("userConfirmation").isJsonNull()) {
        UserConfirmationEnum.validateJsonElement(jsonObj.get("userConfirmation"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobDefinitionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobDefinitionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobDefinitionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobDefinitionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobDefinitionProperties>() {
           @Override
           public void write(JsonWriter out, JobDefinitionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobDefinitionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobDefinitionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobDefinitionProperties
   * @throws IOException if the JSON string is invalid with respect to JobDefinitionProperties
   */
  public static JobDefinitionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobDefinitionProperties.class);
  }

  /**
   * Convert an instance of JobDefinitionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

