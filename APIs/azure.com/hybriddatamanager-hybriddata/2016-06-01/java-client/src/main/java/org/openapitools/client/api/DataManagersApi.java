/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataManager;
import org.openapitools.client.model.DataManagerList;
import org.openapitools.client.model.DataManagerUpdateParameter;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataManagersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataManagersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataManagersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataManagersCreate
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManager Data manager resource details from request body. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersCreateCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManager dataManager, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataManager;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataManagersCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManager dataManager, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataManagersCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataManagersCreate(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataManagersCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataManagersCreate(Async)");
        }

        // verify the required parameter 'dataManager' is set
        if (dataManager == null) {
            throw new ApiException("Missing the required parameter 'dataManager' when calling dataManagersCreate(Async)");
        }

        return dataManagersCreateCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManager, _callback);

    }

    /**
     * 
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API  and should instead be updated with the Update data manager resource API.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManager Data manager resource details from request body. (required)
     * @return DataManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public DataManager dataManagersCreate(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManager dataManager) throws ApiException {
        ApiResponse<DataManager> localVarResp = dataManagersCreateWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManager);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API  and should instead be updated with the Update data manager resource API.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManager Data manager resource details from request body. (required)
     * @return ApiResponse&lt;DataManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataManager> dataManagersCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManager dataManager) throws ApiException {
        okhttp3.Call localVarCall = dataManagersCreateValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManager, null);
        Type localVarReturnType = new TypeToken<DataManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates a new data manager resource with the specified parameters. Existing resources cannot be updated with this API  and should instead be updated with the Update data manager resource API.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManager Data manager resource details from request body. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted request for create/update. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersCreateAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManager dataManager, final ApiCallback<DataManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataManagersCreateValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManager, _callback);
        Type localVarReturnType = new TypeToken<DataManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataManagersDelete
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersDeleteCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataManagersDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataManagersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataManagersDelete(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataManagersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataManagersDelete(Async)");
        }

        return dataManagersDeleteCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * Deletes a data manager resource in Microsoft Azure.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
     </table>
     */
    public void dataManagersDelete(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        dataManagersDeleteWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion);
    }

    /**
     * 
     * Deletes a data manager resource in Microsoft Azure.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataManagersDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataManagersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes a data manager resource in Microsoft Azure.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Data Manager Resource deleted. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersDeleteAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataManagersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataManagersGet
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersGetCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataManagersGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataManagersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataManagersGet(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataManagersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataManagersGet(Async)");
        }

        return dataManagersGetCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);

    }

    /**
     * 
     * Gets information about the specified data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return DataManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
     </table>
     */
    public DataManager dataManagersGet(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        ApiResponse<DataManager> localVarResp = dataManagersGetWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets information about the specified data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;DataManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataManager> dataManagersGetWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataManagersGetValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets information about the specified data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersGetAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, final ApiCallback<DataManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataManagersGetValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataManagersList
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources available under the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.HybridData/dataManagers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataManagersListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataManagersList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataManagersList(Async)");
        }

        return dataManagersListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the data manager resources available under the subscription.
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @return DataManagerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources available under the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public DataManagerList dataManagersList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<DataManagerList> localVarResp = dataManagersListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the data manager resources available under the subscription.
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;DataManagerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources available under the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataManagerList> dataManagersListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataManagersListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataManagerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the data manager resources available under the subscription.
     * @param subscriptionId The Subscription Id (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources available under the subscription. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersListAsync(String subscriptionId, String apiVersion, final ApiCallback<DataManagerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataManagersListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataManagerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataManagersListByResourceGroup
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources by resource group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersListByResourceGroupCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataManagersListByResourceGroupValidateBeforeCall(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataManagersListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataManagersListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataManagersListByResourceGroup(Async)");
        }

        return dataManagersListByResourceGroupCall(subscriptionId, resourceGroupName, apiVersion, _callback);

    }

    /**
     * 
     * Lists all the data manager resources available under the given resource group.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @return DataManagerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources by resource group. </td><td>  -  </td></tr>
     </table>
     */
    public DataManagerList dataManagersListByResourceGroup(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        ApiResponse<DataManagerList> localVarResp = dataManagersListByResourceGroupWithHttpInfo(subscriptionId, resourceGroupName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * Lists all the data manager resources available under the given resource group.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @return ApiResponse&lt;DataManagerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources by resource group. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataManagerList> dataManagersListByResourceGroupWithHttpInfo(String subscriptionId, String resourceGroupName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataManagersListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataManagerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Lists all the data manager resources available under the given resource group.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param apiVersion The API Version (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of data manager resources by resource group. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersListByResourceGroupAsync(String subscriptionId, String resourceGroupName, String apiVersion, final ApiCallback<DataManagerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataManagersListByResourceGroupValidateBeforeCall(subscriptionId, resourceGroupName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataManagerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataManagersUpdate
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManagerUpdateParameter Data manager resource details from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersUpdateCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataManagerUpdateParameter;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.HybridData/dataManagers/{dataManagerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "dataManagerName" + "}", localVarApiClient.escapeString(dataManagerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataManagersUpdateValidateBeforeCall(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataManagersUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataManagersUpdate(Async)");
        }

        // verify the required parameter 'dataManagerName' is set
        if (dataManagerName == null) {
            throw new ApiException("Missing the required parameter 'dataManagerName' when calling dataManagersUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataManagersUpdate(Async)");
        }

        // verify the required parameter 'dataManagerUpdateParameter' is set
        if (dataManagerUpdateParameter == null) {
            throw new ApiException("Missing the required parameter 'dataManagerUpdateParameter' when calling dataManagersUpdate(Async)");
        }

        return dataManagersUpdateCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManagerUpdateParameter, ifMatch, _callback);

    }

    /**
     * 
     * Updates the properties of an existing data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManagerUpdateParameter Data manager resource details from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value. (optional)
     * @return DataManager
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource updated. </td><td>  -  </td></tr>
     </table>
     */
    public DataManager dataManagersUpdate(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) throws ApiException {
        ApiResponse<DataManager> localVarResp = dataManagersUpdateWithHttpInfo(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManagerUpdateParameter, ifMatch);
        return localVarResp.getData();
    }

    /**
     * 
     * Updates the properties of an existing data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManagerUpdateParameter Data manager resource details from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value. (optional)
     * @return ApiResponse&lt;DataManager&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource updated. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataManager> dataManagersUpdateWithHttpInfo(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch) throws ApiException {
        okhttp3.Call localVarCall = dataManagersUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManagerUpdateParameter, ifMatch, null);
        Type localVarReturnType = new TypeToken<DataManager>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Updates the properties of an existing data manager resource.
     * @param subscriptionId The Subscription Id (required)
     * @param resourceGroupName The Resource Group Name (required)
     * @param dataManagerName The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only (required)
     * @param apiVersion The API Version (required)
     * @param dataManagerUpdateParameter Data manager resource details from request body. (required)
     * @param ifMatch Defines the If-Match condition. The patch will be performed only if the ETag of the data manager resource on the server matches this value. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Data Manager Resource object. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Data Manager Resource updated. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataManagersUpdateAsync(String subscriptionId, String resourceGroupName, String dataManagerName, String apiVersion, DataManagerUpdateParameter dataManagerUpdateParameter, String ifMatch, final ApiCallback<DataManager> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataManagersUpdateValidateBeforeCall(subscriptionId, resourceGroupName, dataManagerName, apiVersion, dataManagerUpdateParameter, ifMatch, _callback);
        Type localVarReturnType = new TypeToken<DataManager>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
