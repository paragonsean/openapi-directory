/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data Service properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:06.751898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DataServiceProperties {
  /**
   * State of the data service.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    DISABLED("Disabled"),
    
    ENABLED("Enabled"),
    
    SUPPORTED("Supported");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_SUPPORTED_DATA_SINK_TYPES = "supportedDataSinkTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DATA_SINK_TYPES)
  private List<String> supportedDataSinkTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTED_DATA_SOURCE_TYPES = "supportedDataSourceTypes";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_DATA_SOURCE_TYPES)
  private List<String> supportedDataSourceTypes = new ArrayList<>();

  public DataServiceProperties() {
  }

  public DataServiceProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * State of the data service.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public DataServiceProperties supportedDataSinkTypes(List<String> supportedDataSinkTypes) {
    this.supportedDataSinkTypes = supportedDataSinkTypes;
    return this;
  }

  public DataServiceProperties addSupportedDataSinkTypesItem(String supportedDataSinkTypesItem) {
    if (this.supportedDataSinkTypes == null) {
      this.supportedDataSinkTypes = new ArrayList<>();
    }
    this.supportedDataSinkTypes.add(supportedDataSinkTypesItem);
    return this;
  }

  /**
   * Supported data store types which can be used as a sink.
   * @return supportedDataSinkTypes
   */
  @javax.annotation.Nullable
  public List<String> getSupportedDataSinkTypes() {
    return supportedDataSinkTypes;
  }

  public void setSupportedDataSinkTypes(List<String> supportedDataSinkTypes) {
    this.supportedDataSinkTypes = supportedDataSinkTypes;
  }


  public DataServiceProperties supportedDataSourceTypes(List<String> supportedDataSourceTypes) {
    this.supportedDataSourceTypes = supportedDataSourceTypes;
    return this;
  }

  public DataServiceProperties addSupportedDataSourceTypesItem(String supportedDataSourceTypesItem) {
    if (this.supportedDataSourceTypes == null) {
      this.supportedDataSourceTypes = new ArrayList<>();
    }
    this.supportedDataSourceTypes.add(supportedDataSourceTypesItem);
    return this;
  }

  /**
   * Supported data store types which can be used as a source.
   * @return supportedDataSourceTypes
   */
  @javax.annotation.Nullable
  public List<String> getSupportedDataSourceTypes() {
    return supportedDataSourceTypes;
  }

  public void setSupportedDataSourceTypes(List<String> supportedDataSourceTypes) {
    this.supportedDataSourceTypes = supportedDataSourceTypes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataServiceProperties dataServiceProperties = (DataServiceProperties) o;
    return Objects.equals(this.state, dataServiceProperties.state) &&
        Objects.equals(this.supportedDataSinkTypes, dataServiceProperties.supportedDataSinkTypes) &&
        Objects.equals(this.supportedDataSourceTypes, dataServiceProperties.supportedDataSourceTypes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(state, supportedDataSinkTypes, supportedDataSourceTypes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataServiceProperties {\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    supportedDataSinkTypes: ").append(toIndentedString(supportedDataSinkTypes)).append("\n");
    sb.append("    supportedDataSourceTypes: ").append(toIndentedString(supportedDataSourceTypes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("state");
    openapiFields.add("supportedDataSinkTypes");
    openapiFields.add("supportedDataSourceTypes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DataServiceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DataServiceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataServiceProperties is not found in the empty JSON string", DataServiceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DataServiceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataServiceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataServiceProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedDataSinkTypes") != null && !jsonObj.get("supportedDataSinkTypes").isJsonNull() && !jsonObj.get("supportedDataSinkTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedDataSinkTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedDataSinkTypes").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supportedDataSourceTypes") != null && !jsonObj.get("supportedDataSourceTypes").isJsonNull() && !jsonObj.get("supportedDataSourceTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supportedDataSourceTypes` to be an array in the JSON string but got `%s`", jsonObj.get("supportedDataSourceTypes").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataServiceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataServiceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataServiceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataServiceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DataServiceProperties>() {
           @Override
           public void write(JsonWriter out, DataServiceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataServiceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DataServiceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DataServiceProperties
   * @throws IOException if the JSON string is invalid with respect to DataServiceProperties
   */
  public static DataServiceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataServiceProperties.class);
  }

  /**
   * Convert an instance of DataServiceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

