/*
 * HybridDataManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.JobDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Job Properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:06.751898-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class JobProperties {
  public static final String SERIALIZED_NAME_BYTES_PROCESSED = "bytesProcessed";
  @SerializedName(SERIALIZED_NAME_BYTES_PROCESSED)
  private Long bytesProcessed;

  public static final String SERIALIZED_NAME_DATA_SINK_NAME = "dataSinkName";
  @SerializedName(SERIALIZED_NAME_DATA_SINK_NAME)
  private String dataSinkName;

  public static final String SERIALIZED_NAME_DATA_SOURCE_NAME = "dataSourceName";
  @SerializedName(SERIALIZED_NAME_DATA_SOURCE_NAME)
  private String dataSourceName;

  public static final String SERIALIZED_NAME_DETAILS = "details";
  @SerializedName(SERIALIZED_NAME_DETAILS)
  private JobDetails details;

  /**
   * Describes whether the job is cancellable.
   */
  @JsonAdapter(IsCancellableEnum.Adapter.class)
  public enum IsCancellableEnum {
    NOT_CANCELLABLE("NotCancellable"),
    
    CANCELLABLE("Cancellable");

    private String value;

    IsCancellableEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsCancellableEnum fromValue(String value) {
      for (IsCancellableEnum b : IsCancellableEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsCancellableEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsCancellableEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsCancellableEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsCancellableEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      IsCancellableEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_IS_CANCELLABLE = "isCancellable";
  @SerializedName(SERIALIZED_NAME_IS_CANCELLABLE)
  private IsCancellableEnum isCancellable;

  public static final String SERIALIZED_NAME_ITEMS_PROCESSED = "itemsProcessed";
  @SerializedName(SERIALIZED_NAME_ITEMS_PROCESSED)
  private Long itemsProcessed;

  public static final String SERIALIZED_NAME_TOTAL_BYTES_TO_PROCESS = "totalBytesToProcess";
  @SerializedName(SERIALIZED_NAME_TOTAL_BYTES_TO_PROCESS)
  private Long totalBytesToProcess;

  public static final String SERIALIZED_NAME_TOTAL_ITEMS_TO_PROCESS = "totalItemsToProcess";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEMS_TO_PROCESS)
  private Long totalItemsToProcess;

  public JobProperties() {
  }

  public JobProperties bytesProcessed(Long bytesProcessed) {
    this.bytesProcessed = bytesProcessed;
    return this;
  }

  /**
   * Number of bytes processed by the job as of now.
   * @return bytesProcessed
   */
  @javax.annotation.Nullable
  public Long getBytesProcessed() {
    return bytesProcessed;
  }

  public void setBytesProcessed(Long bytesProcessed) {
    this.bytesProcessed = bytesProcessed;
  }


  public JobProperties dataSinkName(String dataSinkName) {
    this.dataSinkName = dataSinkName;
    return this;
  }

  /**
   * Name of the data sink on which the job was triggered.
   * @return dataSinkName
   */
  @javax.annotation.Nullable
  public String getDataSinkName() {
    return dataSinkName;
  }

  public void setDataSinkName(String dataSinkName) {
    this.dataSinkName = dataSinkName;
  }


  public JobProperties dataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
    return this;
  }

  /**
   * Name of the data source on which the job was triggered.
   * @return dataSourceName
   */
  @javax.annotation.Nullable
  public String getDataSourceName() {
    return dataSourceName;
  }

  public void setDataSourceName(String dataSourceName) {
    this.dataSourceName = dataSourceName;
  }


  public JobProperties details(JobDetails details) {
    this.details = details;
    return this;
  }

  /**
   * Get details
   * @return details
   */
  @javax.annotation.Nullable
  public JobDetails getDetails() {
    return details;
  }

  public void setDetails(JobDetails details) {
    this.details = details;
  }


  public JobProperties isCancellable(IsCancellableEnum isCancellable) {
    this.isCancellable = isCancellable;
    return this;
  }

  /**
   * Describes whether the job is cancellable.
   * @return isCancellable
   */
  @javax.annotation.Nonnull
  public IsCancellableEnum getIsCancellable() {
    return isCancellable;
  }

  public void setIsCancellable(IsCancellableEnum isCancellable) {
    this.isCancellable = isCancellable;
  }


  public JobProperties itemsProcessed(Long itemsProcessed) {
    this.itemsProcessed = itemsProcessed;
    return this;
  }

  /**
   * Number of items processed by the job as of now
   * @return itemsProcessed
   */
  @javax.annotation.Nullable
  public Long getItemsProcessed() {
    return itemsProcessed;
  }

  public void setItemsProcessed(Long itemsProcessed) {
    this.itemsProcessed = itemsProcessed;
  }


  public JobProperties totalBytesToProcess(Long totalBytesToProcess) {
    this.totalBytesToProcess = totalBytesToProcess;
    return this;
  }

  /**
   * Number of bytes to be processed by the job in total.
   * @return totalBytesToProcess
   */
  @javax.annotation.Nullable
  public Long getTotalBytesToProcess() {
    return totalBytesToProcess;
  }

  public void setTotalBytesToProcess(Long totalBytesToProcess) {
    this.totalBytesToProcess = totalBytesToProcess;
  }


  public JobProperties totalItemsToProcess(Long totalItemsToProcess) {
    this.totalItemsToProcess = totalItemsToProcess;
    return this;
  }

  /**
   * Number of items to be processed by the job in total
   * @return totalItemsToProcess
   */
  @javax.annotation.Nullable
  public Long getTotalItemsToProcess() {
    return totalItemsToProcess;
  }

  public void setTotalItemsToProcess(Long totalItemsToProcess) {
    this.totalItemsToProcess = totalItemsToProcess;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JobProperties jobProperties = (JobProperties) o;
    return Objects.equals(this.bytesProcessed, jobProperties.bytesProcessed) &&
        Objects.equals(this.dataSinkName, jobProperties.dataSinkName) &&
        Objects.equals(this.dataSourceName, jobProperties.dataSourceName) &&
        Objects.equals(this.details, jobProperties.details) &&
        Objects.equals(this.isCancellable, jobProperties.isCancellable) &&
        Objects.equals(this.itemsProcessed, jobProperties.itemsProcessed) &&
        Objects.equals(this.totalBytesToProcess, jobProperties.totalBytesToProcess) &&
        Objects.equals(this.totalItemsToProcess, jobProperties.totalItemsToProcess);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bytesProcessed, dataSinkName, dataSourceName, details, isCancellable, itemsProcessed, totalBytesToProcess, totalItemsToProcess);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JobProperties {\n");
    sb.append("    bytesProcessed: ").append(toIndentedString(bytesProcessed)).append("\n");
    sb.append("    dataSinkName: ").append(toIndentedString(dataSinkName)).append("\n");
    sb.append("    dataSourceName: ").append(toIndentedString(dataSourceName)).append("\n");
    sb.append("    details: ").append(toIndentedString(details)).append("\n");
    sb.append("    isCancellable: ").append(toIndentedString(isCancellable)).append("\n");
    sb.append("    itemsProcessed: ").append(toIndentedString(itemsProcessed)).append("\n");
    sb.append("    totalBytesToProcess: ").append(toIndentedString(totalBytesToProcess)).append("\n");
    sb.append("    totalItemsToProcess: ").append(toIndentedString(totalItemsToProcess)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bytesProcessed");
    openapiFields.add("dataSinkName");
    openapiFields.add("dataSourceName");
    openapiFields.add("details");
    openapiFields.add("isCancellable");
    openapiFields.add("itemsProcessed");
    openapiFields.add("totalBytesToProcess");
    openapiFields.add("totalItemsToProcess");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isCancellable");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to JobProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!JobProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in JobProperties is not found in the empty JSON string", JobProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!JobProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `JobProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : JobProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSinkName") != null && !jsonObj.get("dataSinkName").isJsonNull()) && !jsonObj.get("dataSinkName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSinkName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSinkName").toString()));
      }
      if ((jsonObj.get("dataSourceName") != null && !jsonObj.get("dataSourceName").isJsonNull()) && !jsonObj.get("dataSourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSourceName").toString()));
      }
      // validate the optional field `details`
      if (jsonObj.get("details") != null && !jsonObj.get("details").isJsonNull()) {
        JobDetails.validateJsonElement(jsonObj.get("details"));
      }
      if (!jsonObj.get("isCancellable").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isCancellable` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isCancellable").toString()));
      }
      // validate the required field `isCancellable`
      IsCancellableEnum.validateJsonElement(jsonObj.get("isCancellable"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!JobProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'JobProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<JobProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(JobProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<JobProperties>() {
           @Override
           public void write(JsonWriter out, JobProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public JobProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of JobProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of JobProperties
   * @throws IOException if the JSON string is invalid with respect to JobProperties
   */
  public static JobProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, JobProperties.class);
  }

  /**
   * Convert an instance of JobProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

