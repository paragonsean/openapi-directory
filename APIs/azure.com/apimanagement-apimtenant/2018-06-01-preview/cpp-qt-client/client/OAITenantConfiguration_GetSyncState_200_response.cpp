/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenantConfiguration_GetSyncState_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenantConfiguration_GetSyncState_200_response::OAITenantConfiguration_GetSyncState_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenantConfiguration_GetSyncState_200_response::OAITenantConfiguration_GetSyncState_200_response() {
    this->initializeModel();
}

OAITenantConfiguration_GetSyncState_200_response::~OAITenantConfiguration_GetSyncState_200_response() {}

void OAITenantConfiguration_GetSyncState_200_response::initializeModel() {

    m_branch_isSet = false;
    m_branch_isValid = false;

    m_commit_id_isSet = false;
    m_commit_id_isValid = false;

    m_configuration_change_date_isSet = false;
    m_configuration_change_date_isValid = false;

    m_is_export_isSet = false;
    m_is_export_isValid = false;

    m_is_git_enabled_isSet = false;
    m_is_git_enabled_isValid = false;

    m_is_synced_isSet = false;
    m_is_synced_isValid = false;

    m_sync_date_isSet = false;
    m_sync_date_isValid = false;
}

void OAITenantConfiguration_GetSyncState_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenantConfiguration_GetSyncState_200_response::fromJsonObject(QJsonObject json) {

    m_branch_isValid = ::OpenAPI::fromJsonValue(m_branch, json[QString("branch")]);
    m_branch_isSet = !json[QString("branch")].isNull() && m_branch_isValid;

    m_commit_id_isValid = ::OpenAPI::fromJsonValue(m_commit_id, json[QString("commitId")]);
    m_commit_id_isSet = !json[QString("commitId")].isNull() && m_commit_id_isValid;

    m_configuration_change_date_isValid = ::OpenAPI::fromJsonValue(m_configuration_change_date, json[QString("configurationChangeDate")]);
    m_configuration_change_date_isSet = !json[QString("configurationChangeDate")].isNull() && m_configuration_change_date_isValid;

    m_is_export_isValid = ::OpenAPI::fromJsonValue(m_is_export, json[QString("isExport")]);
    m_is_export_isSet = !json[QString("isExport")].isNull() && m_is_export_isValid;

    m_is_git_enabled_isValid = ::OpenAPI::fromJsonValue(m_is_git_enabled, json[QString("isGitEnabled")]);
    m_is_git_enabled_isSet = !json[QString("isGitEnabled")].isNull() && m_is_git_enabled_isValid;

    m_is_synced_isValid = ::OpenAPI::fromJsonValue(m_is_synced, json[QString("isSynced")]);
    m_is_synced_isSet = !json[QString("isSynced")].isNull() && m_is_synced_isValid;

    m_sync_date_isValid = ::OpenAPI::fromJsonValue(m_sync_date, json[QString("syncDate")]);
    m_sync_date_isSet = !json[QString("syncDate")].isNull() && m_sync_date_isValid;
}

QString OAITenantConfiguration_GetSyncState_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenantConfiguration_GetSyncState_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_branch_isSet) {
        obj.insert(QString("branch"), ::OpenAPI::toJsonValue(m_branch));
    }
    if (m_commit_id_isSet) {
        obj.insert(QString("commitId"), ::OpenAPI::toJsonValue(m_commit_id));
    }
    if (m_configuration_change_date_isSet) {
        obj.insert(QString("configurationChangeDate"), ::OpenAPI::toJsonValue(m_configuration_change_date));
    }
    if (m_is_export_isSet) {
        obj.insert(QString("isExport"), ::OpenAPI::toJsonValue(m_is_export));
    }
    if (m_is_git_enabled_isSet) {
        obj.insert(QString("isGitEnabled"), ::OpenAPI::toJsonValue(m_is_git_enabled));
    }
    if (m_is_synced_isSet) {
        obj.insert(QString("isSynced"), ::OpenAPI::toJsonValue(m_is_synced));
    }
    if (m_sync_date_isSet) {
        obj.insert(QString("syncDate"), ::OpenAPI::toJsonValue(m_sync_date));
    }
    return obj;
}

QString OAITenantConfiguration_GetSyncState_200_response::getBranch() const {
    return m_branch;
}
void OAITenantConfiguration_GetSyncState_200_response::setBranch(const QString &branch) {
    m_branch = branch;
    m_branch_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_branch_Set() const{
    return m_branch_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_branch_Valid() const{
    return m_branch_isValid;
}

QString OAITenantConfiguration_GetSyncState_200_response::getCommitId() const {
    return m_commit_id;
}
void OAITenantConfiguration_GetSyncState_200_response::setCommitId(const QString &commit_id) {
    m_commit_id = commit_id;
    m_commit_id_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_commit_id_Set() const{
    return m_commit_id_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_commit_id_Valid() const{
    return m_commit_id_isValid;
}

QDateTime OAITenantConfiguration_GetSyncState_200_response::getConfigurationChangeDate() const {
    return m_configuration_change_date;
}
void OAITenantConfiguration_GetSyncState_200_response::setConfigurationChangeDate(const QDateTime &configuration_change_date) {
    m_configuration_change_date = configuration_change_date;
    m_configuration_change_date_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_configuration_change_date_Set() const{
    return m_configuration_change_date_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_configuration_change_date_Valid() const{
    return m_configuration_change_date_isValid;
}

bool OAITenantConfiguration_GetSyncState_200_response::isIsExport() const {
    return m_is_export;
}
void OAITenantConfiguration_GetSyncState_200_response::setIsExport(const bool &is_export) {
    m_is_export = is_export;
    m_is_export_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_is_export_Set() const{
    return m_is_export_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_is_export_Valid() const{
    return m_is_export_isValid;
}

bool OAITenantConfiguration_GetSyncState_200_response::isIsGitEnabled() const {
    return m_is_git_enabled;
}
void OAITenantConfiguration_GetSyncState_200_response::setIsGitEnabled(const bool &is_git_enabled) {
    m_is_git_enabled = is_git_enabled;
    m_is_git_enabled_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_is_git_enabled_Set() const{
    return m_is_git_enabled_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_is_git_enabled_Valid() const{
    return m_is_git_enabled_isValid;
}

bool OAITenantConfiguration_GetSyncState_200_response::isIsSynced() const {
    return m_is_synced;
}
void OAITenantConfiguration_GetSyncState_200_response::setIsSynced(const bool &is_synced) {
    m_is_synced = is_synced;
    m_is_synced_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_is_synced_Set() const{
    return m_is_synced_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_is_synced_Valid() const{
    return m_is_synced_isValid;
}

QDateTime OAITenantConfiguration_GetSyncState_200_response::getSyncDate() const {
    return m_sync_date;
}
void OAITenantConfiguration_GetSyncState_200_response::setSyncDate(const QDateTime &sync_date) {
    m_sync_date = sync_date;
    m_sync_date_isSet = true;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_sync_date_Set() const{
    return m_sync_date_isSet;
}

bool OAITenantConfiguration_GetSyncState_200_response::is_sync_date_Valid() const{
    return m_sync_date_isValid;
}

bool OAITenantConfiguration_GetSyncState_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_branch_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_commit_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_configuration_change_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_export_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_git_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_synced_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sync_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenantConfiguration_GetSyncState_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
