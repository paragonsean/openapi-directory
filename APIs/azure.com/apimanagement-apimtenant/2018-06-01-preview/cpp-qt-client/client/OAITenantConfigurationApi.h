/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITenantConfigurationApi_H
#define OAI_OAITenantConfigurationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAITenantAccess_Get_default_response.h"
#include "OAITenantConfiguration_Deploy_200_response.h"
#include "OAITenantConfiguration_Deploy_request.h"
#include "OAITenantConfiguration_Save_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITenantConfigurationApi : public QObject {
    Q_OBJECT

public:
    OAITenantConfigurationApi(const int timeOut = 0);
    ~OAITenantConfigurationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  configuration_name QString [required]
    * @param[in]  parameters OAITenantConfiguration_Deploy_request [required]
    */
    virtual void tenantConfigurationDeploy(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &configuration_name, const OAITenantConfiguration_Deploy_request &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  configuration_name QString [required]
    * @param[in]  parameters OAITenantConfiguration_Save_request [required]
    */
    virtual void tenantConfigurationSave(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &configuration_name, const OAITenantConfiguration_Save_request &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  configuration_name QString [required]
    * @param[in]  parameters OAITenantConfiguration_Deploy_request [required]
    */
    virtual void tenantConfigurationValidate(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &configuration_name, const OAITenantConfiguration_Deploy_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tenantConfigurationDeployCallback(OAIHttpRequestWorker *worker);
    void tenantConfigurationSaveCallback(OAIHttpRequestWorker *worker);
    void tenantConfigurationValidateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tenantConfigurationDeploySignal(OAITenantConfiguration_Deploy_200_response summary);
    void tenantConfigurationSaveSignal(OAITenantConfiguration_Deploy_200_response summary);
    void tenantConfigurationValidateSignal(OAITenantConfiguration_Deploy_200_response summary);


    void tenantConfigurationDeploySignalFull(OAIHttpRequestWorker *worker, OAITenantConfiguration_Deploy_200_response summary);
    void tenantConfigurationSaveSignalFull(OAIHttpRequestWorker *worker, OAITenantConfiguration_Deploy_200_response summary);
    void tenantConfigurationValidateSignalFull(OAIHttpRequestWorker *worker, OAITenantConfiguration_Deploy_200_response summary);

    Q_DECL_DEPRECATED_X("Use tenantConfigurationDeploySignalError() instead")
    void tenantConfigurationDeploySignalE(OAITenantConfiguration_Deploy_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantConfigurationDeploySignalError(OAITenantConfiguration_Deploy_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantConfigurationSaveSignalError() instead")
    void tenantConfigurationSaveSignalE(OAITenantConfiguration_Deploy_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantConfigurationSaveSignalError(OAITenantConfiguration_Deploy_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantConfigurationValidateSignalError() instead")
    void tenantConfigurationValidateSignalE(OAITenantConfiguration_Deploy_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantConfigurationValidateSignalError(OAITenantConfiguration_Deploy_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tenantConfigurationDeploySignalErrorFull() instead")
    void tenantConfigurationDeploySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantConfigurationDeploySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantConfigurationSaveSignalErrorFull() instead")
    void tenantConfigurationSaveSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantConfigurationSaveSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantConfigurationValidateSignalErrorFull() instead")
    void tenantConfigurationValidateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantConfigurationValidateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
