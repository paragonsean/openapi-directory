/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenantAccess_Get_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenantAccess_Get_200_response::OAITenantAccess_Get_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenantAccess_Get_200_response::OAITenantAccess_Get_200_response() {
    this->initializeModel();
}

OAITenantAccess_Get_200_response::~OAITenantAccess_Get_200_response() {}

void OAITenantAccess_Get_200_response::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;
}

void OAITenantAccess_Get_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenantAccess_Get_200_response::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;
}

QString OAITenantAccess_Get_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenantAccess_Get_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    return obj;
}

bool OAITenantAccess_Get_200_response::isEnabled() const {
    return m_enabled;
}
void OAITenantAccess_Get_200_response::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAITenantAccess_Get_200_response::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAITenantAccess_Get_200_response::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAITenantAccess_Get_200_response::getId() const {
    return m_id;
}
void OAITenantAccess_Get_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITenantAccess_Get_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAITenantAccess_Get_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITenantAccess_Get_200_response::getPrimaryKey() const {
    return m_primary_key;
}
void OAITenantAccess_Get_200_response::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAITenantAccess_Get_200_response::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAITenantAccess_Get_200_response::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAITenantAccess_Get_200_response::getSecondaryKey() const {
    return m_secondary_key;
}
void OAITenantAccess_Get_200_response::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAITenantAccess_Get_200_response::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAITenantAccess_Get_200_response::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

bool OAITenantAccess_Get_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenantAccess_Get_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
