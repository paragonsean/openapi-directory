# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TenantConfigurationGetSyncState200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, commit_id: str=None, configuration_change_date: datetime=None, is_export: bool=None, is_git_enabled: bool=None, is_synced: bool=None, sync_date: datetime=None):
        """TenantConfigurationGetSyncState200Response - a model defined in OpenAPI

        :param branch: The branch of this TenantConfigurationGetSyncState200Response.
        :param commit_id: The commit_id of this TenantConfigurationGetSyncState200Response.
        :param configuration_change_date: The configuration_change_date of this TenantConfigurationGetSyncState200Response.
        :param is_export: The is_export of this TenantConfigurationGetSyncState200Response.
        :param is_git_enabled: The is_git_enabled of this TenantConfigurationGetSyncState200Response.
        :param is_synced: The is_synced of this TenantConfigurationGetSyncState200Response.
        :param sync_date: The sync_date of this TenantConfigurationGetSyncState200Response.
        """
        self.openapi_types = {
            'branch': str,
            'commit_id': str,
            'configuration_change_date': datetime,
            'is_export': bool,
            'is_git_enabled': bool,
            'is_synced': bool,
            'sync_date': datetime
        }

        self.attribute_map = {
            'branch': 'branch',
            'commit_id': 'commitId',
            'configuration_change_date': 'configurationChangeDate',
            'is_export': 'isExport',
            'is_git_enabled': 'isGitEnabled',
            'is_synced': 'isSynced',
            'sync_date': 'syncDate'
        }

        self._branch = branch
        self._commit_id = commit_id
        self._configuration_change_date = configuration_change_date
        self._is_export = is_export
        self._is_git_enabled = is_git_enabled
        self._is_synced = is_synced
        self._sync_date = sync_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantConfigurationGetSyncState200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenantConfiguration_GetSyncState_200_response of this TenantConfigurationGetSyncState200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this TenantConfigurationGetSyncState200Response.

        The name of Git branch.

        :return: The branch of this TenantConfigurationGetSyncState200Response.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this TenantConfigurationGetSyncState200Response.

        The name of Git branch.

        :param branch: The branch of this TenantConfigurationGetSyncState200Response.
        :type branch: str
        """

        self._branch = branch

    @property
    def commit_id(self):
        """Gets the commit_id of this TenantConfigurationGetSyncState200Response.

        The latest commit Id.

        :return: The commit_id of this TenantConfigurationGetSyncState200Response.
        :rtype: str
        """
        return self._commit_id

    @commit_id.setter
    def commit_id(self, commit_id):
        """Sets the commit_id of this TenantConfigurationGetSyncState200Response.

        The latest commit Id.

        :param commit_id: The commit_id of this TenantConfigurationGetSyncState200Response.
        :type commit_id: str
        """

        self._commit_id = commit_id

    @property
    def configuration_change_date(self):
        """Gets the configuration_change_date of this TenantConfigurationGetSyncState200Response.

        The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The configuration_change_date of this TenantConfigurationGetSyncState200Response.
        :rtype: datetime
        """
        return self._configuration_change_date

    @configuration_change_date.setter
    def configuration_change_date(self, configuration_change_date):
        """Sets the configuration_change_date of this TenantConfigurationGetSyncState200Response.

        The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param configuration_change_date: The configuration_change_date of this TenantConfigurationGetSyncState200Response.
        :type configuration_change_date: datetime
        """

        self._configuration_change_date = configuration_change_date

    @property
    def is_export(self):
        """Gets the is_export of this TenantConfigurationGetSyncState200Response.

        value indicating if last sync was save (true) or deploy (false) operation.

        :return: The is_export of this TenantConfigurationGetSyncState200Response.
        :rtype: bool
        """
        return self._is_export

    @is_export.setter
    def is_export(self, is_export):
        """Sets the is_export of this TenantConfigurationGetSyncState200Response.

        value indicating if last sync was save (true) or deploy (false) operation.

        :param is_export: The is_export of this TenantConfigurationGetSyncState200Response.
        :type is_export: bool
        """

        self._is_export = is_export

    @property
    def is_git_enabled(self):
        """Gets the is_git_enabled of this TenantConfigurationGetSyncState200Response.

        value indicating whether Git configuration access is enabled.

        :return: The is_git_enabled of this TenantConfigurationGetSyncState200Response.
        :rtype: bool
        """
        return self._is_git_enabled

    @is_git_enabled.setter
    def is_git_enabled(self, is_git_enabled):
        """Sets the is_git_enabled of this TenantConfigurationGetSyncState200Response.

        value indicating whether Git configuration access is enabled.

        :param is_git_enabled: The is_git_enabled of this TenantConfigurationGetSyncState200Response.
        :type is_git_enabled: bool
        """

        self._is_git_enabled = is_git_enabled

    @property
    def is_synced(self):
        """Gets the is_synced of this TenantConfigurationGetSyncState200Response.

        value indicating if last synchronization was later than the configuration change.

        :return: The is_synced of this TenantConfigurationGetSyncState200Response.
        :rtype: bool
        """
        return self._is_synced

    @is_synced.setter
    def is_synced(self, is_synced):
        """Sets the is_synced of this TenantConfigurationGetSyncState200Response.

        value indicating if last synchronization was later than the configuration change.

        :param is_synced: The is_synced of this TenantConfigurationGetSyncState200Response.
        :type is_synced: bool
        """

        self._is_synced = is_synced

    @property
    def sync_date(self):
        """Gets the sync_date of this TenantConfigurationGetSyncState200Response.

        The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The sync_date of this TenantConfigurationGetSyncState200Response.
        :rtype: datetime
        """
        return self._sync_date

    @sync_date.setter
    def sync_date(self, sync_date):
        """Sets the sync_date of this TenantConfigurationGetSyncState200Response.

        The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param sync_date: The sync_date of this TenantConfigurationGetSyncState200Response.
        :type sync_date: datetime
        """

        self._sync_date = sync_date
