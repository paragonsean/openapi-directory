/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ApiManagementClient);
  }
}(this, function(expect, ApiManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TenantConfigurationDeploy200Response', function() {
    it('should create an instance of TenantConfigurationDeploy200Response', function() {
      // uncomment below and update the code to test TenantConfigurationDeploy200Response
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be.a(ApiManagementClient.TenantConfigurationDeploy200Response);
    });

    it('should have the property actionLog (base name: "actionLog")', function() {
      // uncomment below and update the code to test the property actionLog
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

    it('should have the property error (base name: "error")', function() {
      // uncomment below and update the code to test the property error
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

    it('should have the property resultInfo (base name: "resultInfo")', function() {
      // uncomment below and update the code to test the property resultInfo
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

    it('should have the property started (base name: "started")', function() {
      // uncomment below and update the code to test the property started
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

    it('should have the property updated (base name: "updated")', function() {
      // uncomment below and update the code to test the property updated
      //var instance = new ApiManagementClient.TenantConfigurationDeploy200Response();
      //expect(instance).to.be();
    });

  });

}));
