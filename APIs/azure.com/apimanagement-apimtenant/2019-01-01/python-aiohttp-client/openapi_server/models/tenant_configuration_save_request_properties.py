# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TenantConfigurationSaveRequestProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, branch: str=None, force: bool=None):
        """TenantConfigurationSaveRequestProperties - a model defined in OpenAPI

        :param branch: The branch of this TenantConfigurationSaveRequestProperties.
        :param force: The force of this TenantConfigurationSaveRequestProperties.
        """
        self.openapi_types = {
            'branch': str,
            'force': bool
        }

        self.attribute_map = {
            'branch': 'branch',
            'force': 'force'
        }

        self._branch = branch
        self._force = force

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantConfigurationSaveRequestProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenantConfiguration_Save_request_properties of this TenantConfigurationSaveRequestProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def branch(self):
        """Gets the branch of this TenantConfigurationSaveRequestProperties.

        The name of the Git branch in which to commit the current configuration snapshot.

        :return: The branch of this TenantConfigurationSaveRequestProperties.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch):
        """Sets the branch of this TenantConfigurationSaveRequestProperties.

        The name of the Git branch in which to commit the current configuration snapshot.

        :param branch: The branch of this TenantConfigurationSaveRequestProperties.
        :type branch: str
        """
        if branch is None:
            raise ValueError("Invalid value for `branch`, must not be `None`")

        self._branch = branch

    @property
    def force(self):
        """Gets the force of this TenantConfigurationSaveRequestProperties.

        The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten.

        :return: The force of this TenantConfigurationSaveRequestProperties.
        :rtype: bool
        """
        return self._force

    @force.setter
    def force(self, force):
        """Sets the force of this TenantConfigurationSaveRequestProperties.

        The value if true, the current configuration database is committed to the Git repository, even if the Git repository has newer changes that would be overwritten.

        :param force: The force of this TenantConfigurationSaveRequestProperties.
        :type force: bool
        """

        self._force = force
