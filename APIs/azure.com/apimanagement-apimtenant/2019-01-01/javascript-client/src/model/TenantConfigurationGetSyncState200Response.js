/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TenantConfigurationGetSyncState200Response model module.
 * @module model/TenantConfigurationGetSyncState200Response
 * @version 2019-01-01
 */
class TenantConfigurationGetSyncState200Response {
    /**
     * Constructs a new <code>TenantConfigurationGetSyncState200Response</code>.
     * Tenant Configuration Synchronization State.
     * @alias module:model/TenantConfigurationGetSyncState200Response
     */
    constructor() { 
        
        TenantConfigurationGetSyncState200Response.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>TenantConfigurationGetSyncState200Response</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TenantConfigurationGetSyncState200Response} obj Optional instance to populate.
     * @return {module:model/TenantConfigurationGetSyncState200Response} The populated <code>TenantConfigurationGetSyncState200Response</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TenantConfigurationGetSyncState200Response();

            if (data.hasOwnProperty('branch')) {
                obj['branch'] = ApiClient.convertToType(data['branch'], 'String');
            }
            if (data.hasOwnProperty('commitId')) {
                obj['commitId'] = ApiClient.convertToType(data['commitId'], 'String');
            }
            if (data.hasOwnProperty('configurationChangeDate')) {
                obj['configurationChangeDate'] = ApiClient.convertToType(data['configurationChangeDate'], 'Date');
            }
            if (data.hasOwnProperty('isExport')) {
                obj['isExport'] = ApiClient.convertToType(data['isExport'], 'Boolean');
            }
            if (data.hasOwnProperty('isGitEnabled')) {
                obj['isGitEnabled'] = ApiClient.convertToType(data['isGitEnabled'], 'Boolean');
            }
            if (data.hasOwnProperty('isSynced')) {
                obj['isSynced'] = ApiClient.convertToType(data['isSynced'], 'Boolean');
            }
            if (data.hasOwnProperty('syncDate')) {
                obj['syncDate'] = ApiClient.convertToType(data['syncDate'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TenantConfigurationGetSyncState200Response</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TenantConfigurationGetSyncState200Response</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['branch'] && !(typeof data['branch'] === 'string' || data['branch'] instanceof String)) {
            throw new Error("Expected the field `branch` to be a primitive type in the JSON string but got " + data['branch']);
        }
        // ensure the json data is a string
        if (data['commitId'] && !(typeof data['commitId'] === 'string' || data['commitId'] instanceof String)) {
            throw new Error("Expected the field `commitId` to be a primitive type in the JSON string but got " + data['commitId']);
        }

        return true;
    }


}



/**
 * The name of Git branch.
 * @member {String} branch
 */
TenantConfigurationGetSyncState200Response.prototype['branch'] = undefined;

/**
 * The latest commit Id.
 * @member {String} commitId
 */
TenantConfigurationGetSyncState200Response.prototype['commitId'] = undefined;

/**
 * The date of the latest configuration change. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} configurationChangeDate
 */
TenantConfigurationGetSyncState200Response.prototype['configurationChangeDate'] = undefined;

/**
 * value indicating if last sync was save (true) or deploy (false) operation.
 * @member {Boolean} isExport
 */
TenantConfigurationGetSyncState200Response.prototype['isExport'] = undefined;

/**
 * value indicating whether Git configuration access is enabled.
 * @member {Boolean} isGitEnabled
 */
TenantConfigurationGetSyncState200Response.prototype['isGitEnabled'] = undefined;

/**
 * value indicating if last synchronization was later than the configuration change.
 * @member {Boolean} isSynced
 */
TenantConfigurationGetSyncState200Response.prototype['isSynced'] = undefined;

/**
 * The date of the latest synchronization. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} syncDate
 */
TenantConfigurationGetSyncState200Response.prototype['syncDate'] = undefined;






export default TenantConfigurationGetSyncState200Response;

