/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenantConfiguration_Deploy_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenantConfiguration_Deploy_200_response::OAITenantConfiguration_Deploy_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenantConfiguration_Deploy_200_response::OAITenantConfiguration_Deploy_200_response() {
    this->initializeModel();
}

OAITenantConfiguration_Deploy_200_response::~OAITenantConfiguration_Deploy_200_response() {}

void OAITenantConfiguration_Deploy_200_response::initializeModel() {

    m_action_log_isSet = false;
    m_action_log_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_result_info_isSet = false;
    m_result_info_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAITenantConfiguration_Deploy_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenantConfiguration_Deploy_200_response::fromJsonObject(QJsonObject json) {

    m_action_log_isValid = ::OpenAPI::fromJsonValue(m_action_log, json[QString("actionLog")]);
    m_action_log_isSet = !json[QString("actionLog")].isNull() && m_action_log_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_result_info_isValid = ::OpenAPI::fromJsonValue(m_result_info, json[QString("resultInfo")]);
    m_result_info_isSet = !json[QString("resultInfo")].isNull() && m_result_info_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAITenantConfiguration_Deploy_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenantConfiguration_Deploy_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_action_log.size() > 0) {
        obj.insert(QString("actionLog"), ::OpenAPI::toJsonValue(m_action_log));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_result_info_isSet) {
        obj.insert(QString("resultInfo"), ::OpenAPI::toJsonValue(m_result_info));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QList<OAITenantConfiguration_Deploy_200_response_actionLog_inner> OAITenantConfiguration_Deploy_200_response::getActionLog() const {
    return m_action_log;
}
void OAITenantConfiguration_Deploy_200_response::setActionLog(const QList<OAITenantConfiguration_Deploy_200_response_actionLog_inner> &action_log) {
    m_action_log = action_log;
    m_action_log_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_action_log_Set() const{
    return m_action_log_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_action_log_Valid() const{
    return m_action_log_isValid;
}

OAITenantAccess_Get_default_response_error OAITenantConfiguration_Deploy_200_response::getError() const {
    return m_error;
}
void OAITenantConfiguration_Deploy_200_response::setError(const OAITenantAccess_Get_default_response_error &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_error_Set() const{
    return m_error_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_error_Valid() const{
    return m_error_isValid;
}

QString OAITenantConfiguration_Deploy_200_response::getId() const {
    return m_id;
}
void OAITenantConfiguration_Deploy_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_id_Valid() const{
    return m_id_isValid;
}

QString OAITenantConfiguration_Deploy_200_response::getResultInfo() const {
    return m_result_info;
}
void OAITenantConfiguration_Deploy_200_response::setResultInfo(const QString &result_info) {
    m_result_info = result_info;
    m_result_info_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_result_info_Set() const{
    return m_result_info_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_result_info_Valid() const{
    return m_result_info_isValid;
}

QDateTime OAITenantConfiguration_Deploy_200_response::getStarted() const {
    return m_started;
}
void OAITenantConfiguration_Deploy_200_response::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_started_Set() const{
    return m_started_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_started_Valid() const{
    return m_started_isValid;
}

QString OAITenantConfiguration_Deploy_200_response::getStatus() const {
    return m_status;
}
void OAITenantConfiguration_Deploy_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAITenantConfiguration_Deploy_200_response::getUpdated() const {
    return m_updated;
}
void OAITenantConfiguration_Deploy_200_response::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAITenantConfiguration_Deploy_200_response::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAITenantConfiguration_Deploy_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_log.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenantConfiguration_Deploy_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
