/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2019-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITenantConfiguration_Deploy_200_response_actionLog_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITenantConfiguration_Deploy_200_response_actionLog_inner::OAITenantConfiguration_Deploy_200_response_actionLog_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITenantConfiguration_Deploy_200_response_actionLog_inner::OAITenantConfiguration_Deploy_200_response_actionLog_inner() {
    this->initializeModel();
}

OAITenantConfiguration_Deploy_200_response_actionLog_inner::~OAITenantConfiguration_Deploy_200_response_actionLog_inner() {}

void OAITenantConfiguration_Deploy_200_response_actionLog_inner::initializeModel() {

    m_action_isSet = false;
    m_action_isValid = false;

    m_object_key_isSet = false;
    m_object_key_isValid = false;

    m_object_type_isSet = false;
    m_object_type_isValid = false;
}

void OAITenantConfiguration_Deploy_200_response_actionLog_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITenantConfiguration_Deploy_200_response_actionLog_inner::fromJsonObject(QJsonObject json) {

    m_action_isValid = ::OpenAPI::fromJsonValue(m_action, json[QString("action")]);
    m_action_isSet = !json[QString("action")].isNull() && m_action_isValid;

    m_object_key_isValid = ::OpenAPI::fromJsonValue(m_object_key, json[QString("objectKey")]);
    m_object_key_isSet = !json[QString("objectKey")].isNull() && m_object_key_isValid;

    m_object_type_isValid = ::OpenAPI::fromJsonValue(m_object_type, json[QString("objectType")]);
    m_object_type_isSet = !json[QString("objectType")].isNull() && m_object_type_isValid;
}

QString OAITenantConfiguration_Deploy_200_response_actionLog_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITenantConfiguration_Deploy_200_response_actionLog_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_action_isSet) {
        obj.insert(QString("action"), ::OpenAPI::toJsonValue(m_action));
    }
    if (m_object_key_isSet) {
        obj.insert(QString("objectKey"), ::OpenAPI::toJsonValue(m_object_key));
    }
    if (m_object_type_isSet) {
        obj.insert(QString("objectType"), ::OpenAPI::toJsonValue(m_object_type));
    }
    return obj;
}

QString OAITenantConfiguration_Deploy_200_response_actionLog_inner::getAction() const {
    return m_action;
}
void OAITenantConfiguration_Deploy_200_response_actionLog_inner::setAction(const QString &action) {
    m_action = action;
    m_action_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::is_action_Set() const{
    return m_action_isSet;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::is_action_Valid() const{
    return m_action_isValid;
}

QString OAITenantConfiguration_Deploy_200_response_actionLog_inner::getObjectKey() const {
    return m_object_key;
}
void OAITenantConfiguration_Deploy_200_response_actionLog_inner::setObjectKey(const QString &object_key) {
    m_object_key = object_key;
    m_object_key_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::is_object_key_Set() const{
    return m_object_key_isSet;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::is_object_key_Valid() const{
    return m_object_key_isValid;
}

QString OAITenantConfiguration_Deploy_200_response_actionLog_inner::getObjectType() const {
    return m_object_type;
}
void OAITenantConfiguration_Deploy_200_response_actionLog_inner::setObjectType(const QString &object_type) {
    m_object_type = object_type;
    m_object_type_isSet = true;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::is_object_type_Set() const{
    return m_object_type_isSet;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::is_object_type_Valid() const{
    return m_object_type_isValid;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_object_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITenantConfiguration_Deploy_200_response_actionLog_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
