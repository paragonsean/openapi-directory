/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.TenantAccessGetDefaultResponse;
import org.openapitools.client.model.TenantConfigurationDeploy200Response;
import org.openapitools.client.model.TenantConfigurationDeployRequest;
import org.openapitools.client.model.TenantConfigurationSaveRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenantConfigurationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TenantConfigurationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TenantConfigurationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tenantConfigurationDeploy
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Deploy Configuration parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of applying changes from Git branch to database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To deploy any service configuration changes to the API Management service instance
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-deploy-any-service-configuration-changes-to-the-api-management-service-instance"> Documentation</a>
     */
    public okhttp3.Call tenantConfigurationDeployCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/deploy"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "configurationName" + "}", localVarApiClient.escapeString(configurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantConfigurationDeployValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tenantConfigurationDeploy(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tenantConfigurationDeploy(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantConfigurationDeploy(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tenantConfigurationDeploy(Async)");
        }

        // verify the required parameter 'configurationName' is set
        if (configurationName == null) {
            throw new ApiException("Missing the required parameter 'configurationName' when calling tenantConfigurationDeploy(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tenantConfigurationDeploy(Async)");
        }

        return tenantConfigurationDeployCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, _callback);

    }

    /**
     * 
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Deploy Configuration parameters. (required)
     * @return TenantConfigurationDeploy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of applying changes from Git branch to database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To deploy any service configuration changes to the API Management service instance
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-deploy-any-service-configuration-changes-to-the-api-management-service-instance"> Documentation</a>
     */
    public TenantConfigurationDeploy200Response tenantConfigurationDeploy(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters) throws ApiException {
        ApiResponse<TenantConfigurationDeploy200Response> localVarResp = tenantConfigurationDeployWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Deploy Configuration parameters. (required)
     * @return ApiResponse&lt;TenantConfigurationDeploy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of applying changes from Git branch to database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To deploy any service configuration changes to the API Management service instance
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-deploy-any-service-configuration-changes-to-the-api-management-service-instance"> Documentation</a>
     */
    public ApiResponse<TenantConfigurationDeploy200Response> tenantConfigurationDeployWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = tenantConfigurationDeployValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, null);
        Type localVarReturnType = new TypeToken<TenantConfigurationDeploy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Deploy Configuration parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of applying changes from Git branch to database. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To deploy any service configuration changes to the API Management service instance
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-deploy-any-service-configuration-changes-to-the-api-management-service-instance"> Documentation</a>
     */
    public okhttp3.Call tenantConfigurationDeployAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters, final ApiCallback<TenantConfigurationDeploy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantConfigurationDeployValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, _callback);
        Type localVarReturnType = new TypeToken<TenantConfigurationDeploy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantConfigurationSave
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Save Configuration parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of creating a commit in the repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To save the service configuration to the Git repository
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-save-the-service-configuration-to-the-git-repository"> Documentation</a>
     */
    public okhttp3.Call tenantConfigurationSaveCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationSaveRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/save"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "configurationName" + "}", localVarApiClient.escapeString(configurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantConfigurationSaveValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationSaveRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tenantConfigurationSave(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tenantConfigurationSave(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantConfigurationSave(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tenantConfigurationSave(Async)");
        }

        // verify the required parameter 'configurationName' is set
        if (configurationName == null) {
            throw new ApiException("Missing the required parameter 'configurationName' when calling tenantConfigurationSave(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tenantConfigurationSave(Async)");
        }

        return tenantConfigurationSaveCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, _callback);

    }

    /**
     * 
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Save Configuration parameters. (required)
     * @return TenantConfigurationDeploy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of creating a commit in the repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To save the service configuration to the Git repository
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-save-the-service-configuration-to-the-git-repository"> Documentation</a>
     */
    public TenantConfigurationDeploy200Response tenantConfigurationSave(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationSaveRequest parameters) throws ApiException {
        ApiResponse<TenantConfigurationDeploy200Response> localVarResp = tenantConfigurationSaveWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Save Configuration parameters. (required)
     * @return ApiResponse&lt;TenantConfigurationDeploy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of creating a commit in the repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To save the service configuration to the Git repository
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-save-the-service-configuration-to-the-git-repository"> Documentation</a>
     */
    public ApiResponse<TenantConfigurationDeploy200Response> tenantConfigurationSaveWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationSaveRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = tenantConfigurationSaveValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, null);
        Type localVarReturnType = new TypeToken<TenantConfigurationDeploy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Save Configuration parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of creating a commit in the repository. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     * To save the service configuration to the Git repository
     * @see <a href="https://azure.microsoft.com/en-us/documentation/articles/api-management-configuration-repository-git/#to-save-the-service-configuration-to-the-git-repository"> Documentation</a>
     */
    public okhttp3.Call tenantConfigurationSaveAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationSaveRequest parameters, final ApiCallback<TenantConfigurationDeploy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantConfigurationSaveValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, _callback);
        Type localVarReturnType = new TypeToken<TenantConfigurationDeploy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantConfigurationValidate
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Validate Configuration parameters. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of validating the changes in the specified Git branch. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantConfigurationValidateCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ApiManagement/service/{serviceName}/tenant/{configurationName}/validate"
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "serviceName" + "}", localVarApiClient.escapeString(serviceName.toString()))
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "configurationName" + "}", localVarApiClient.escapeString(configurationName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantConfigurationValidateValidateBeforeCall(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling tenantConfigurationValidate(Async)");
        }

        // verify the required parameter 'serviceName' is set
        if (serviceName == null) {
            throw new ApiException("Missing the required parameter 'serviceName' when calling tenantConfigurationValidate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantConfigurationValidate(Async)");
        }

        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling tenantConfigurationValidate(Async)");
        }

        // verify the required parameter 'configurationName' is set
        if (configurationName == null) {
            throw new ApiException("Missing the required parameter 'configurationName' when calling tenantConfigurationValidate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tenantConfigurationValidate(Async)");
        }

        return tenantConfigurationValidateCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, _callback);

    }

    /**
     * 
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Validate Configuration parameters. (required)
     * @return TenantConfigurationDeploy200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of validating the changes in the specified Git branch. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public TenantConfigurationDeploy200Response tenantConfigurationValidate(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters) throws ApiException {
        ApiResponse<TenantConfigurationDeploy200Response> localVarResp = tenantConfigurationValidateWithHttpInfo(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Validate Configuration parameters. (required)
     * @return ApiResponse&lt;TenantConfigurationDeploy200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of validating the changes in the specified Git branch. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TenantConfigurationDeploy200Response> tenantConfigurationValidateWithHttpInfo(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = tenantConfigurationValidateValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, null);
        Type localVarReturnType = new TypeToken<TenantConfigurationDeploy200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     * @param resourceGroupName The name of the resource group. (required)
     * @param serviceName The name of the API Management service. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param subscriptionId Subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param configurationName The identifier of the Git Configuration Operation. (required)
     * @param parameters Validate Configuration parameters. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Result of validating the changes in the specified Git branch. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted: Location header contains the URL where the status of the long running operation can be checked. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantConfigurationValidateAsync(String resourceGroupName, String serviceName, String apiVersion, String subscriptionId, String configurationName, TenantConfigurationDeployRequest parameters, final ApiCallback<TenantConfigurationDeploy200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantConfigurationValidateValidateBeforeCall(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters, _callback);
        Type localVarReturnType = new TypeToken<TenantConfigurationDeploy200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
