/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.TenantAccessGetDefaultResponse;
import org.openapitools.client.model.TenantConfigurationDeploy200Response;
import org.openapitools.client.model.TenantConfigurationDeployRequest;
import org.openapitools.client.model.TenantConfigurationSaveRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TenantConfigurationApi
 */
@Disabled
public class TenantConfigurationApiTest {

    private final TenantConfigurationApi api = new TenantConfigurationApi();

    /**
     * This operation applies changes from the specified Git branch to the configuration database. This is a long running operation and could take several minutes to complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantConfigurationDeployTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String configurationName = null;
        TenantConfigurationDeployRequest parameters = null;
        TenantConfigurationDeploy200Response response = api.tenantConfigurationDeploy(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters);
        // TODO: test validations
    }

    /**
     * This operation creates a commit with the current configuration snapshot to the specified branch in the repository. This is a long running operation and could take several minutes to complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantConfigurationSaveTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String configurationName = null;
        TenantConfigurationSaveRequest parameters = null;
        TenantConfigurationDeploy200Response response = api.tenantConfigurationSave(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters);
        // TODO: test validations
    }

    /**
     * This operation validates the changes in the specified Git branch. This is a long running operation and could take several minutes to complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tenantConfigurationValidateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String configurationName = null;
        TenantConfigurationDeployRequest parameters = null;
        TenantConfigurationDeploy200Response response = api.tenantConfigurationValidate(resourceGroupName, serviceName, apiVersion, subscriptionId, configurationName, parameters);
        // TODO: test validations
    }

}
