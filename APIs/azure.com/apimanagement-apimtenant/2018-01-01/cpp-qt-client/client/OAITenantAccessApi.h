/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2018-01-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITenantAccessApi_H
#define OAI_OAITenantAccessApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccessInformationContract.h"
#include "OAIAccessInformationUpdateParameters.h"
#include "OAITenantAccess_Update_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITenantAccessApi : public QObject {
    Q_OBJECT

public:
    OAITenantAccessApi(const int timeOut = 0);
    ~OAITenantAccessApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  access_name QString [required]
    */
    virtual void tenantAccessGet(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &access_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  access_name QString [required]
    */
    virtual void tenantAccessRegeneratePrimaryKey(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &access_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  access_name QString [required]
    */
    virtual void tenantAccessRegenerateSecondaryKey(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const QString &access_name);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  access_name QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIAccessInformationUpdateParameters [required]
    */
    virtual void tenantAccessUpdate(const QString &resource_group_name, const QString &service_name, const QString &access_name, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIAccessInformationUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void tenantAccessGetCallback(OAIHttpRequestWorker *worker);
    void tenantAccessRegeneratePrimaryKeyCallback(OAIHttpRequestWorker *worker);
    void tenantAccessRegenerateSecondaryKeyCallback(OAIHttpRequestWorker *worker);
    void tenantAccessUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void tenantAccessGetSignal(OAIAccessInformationContract summary);
    void tenantAccessRegeneratePrimaryKeySignal();
    void tenantAccessRegenerateSecondaryKeySignal();
    void tenantAccessUpdateSignal();


    void tenantAccessGetSignalFull(OAIHttpRequestWorker *worker, OAIAccessInformationContract summary);
    void tenantAccessRegeneratePrimaryKeySignalFull(OAIHttpRequestWorker *worker);
    void tenantAccessRegenerateSecondaryKeySignalFull(OAIHttpRequestWorker *worker);
    void tenantAccessUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use tenantAccessGetSignalError() instead")
    void tenantAccessGetSignalE(OAIAccessInformationContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessGetSignalError(OAIAccessInformationContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantAccessRegeneratePrimaryKeySignalError() instead")
    void tenantAccessRegeneratePrimaryKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessRegeneratePrimaryKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantAccessRegenerateSecondaryKeySignalError() instead")
    void tenantAccessRegenerateSecondaryKeySignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessRegenerateSecondaryKeySignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantAccessUpdateSignalError() instead")
    void tenantAccessUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use tenantAccessGetSignalErrorFull() instead")
    void tenantAccessGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantAccessRegeneratePrimaryKeySignalErrorFull() instead")
    void tenantAccessRegeneratePrimaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessRegeneratePrimaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantAccessRegenerateSecondaryKeySignalErrorFull() instead")
    void tenantAccessRegenerateSecondaryKeySignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessRegenerateSecondaryKeySignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tenantAccessUpdateSignalErrorFull() instead")
    void tenantAccessUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tenantAccessUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
