/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tenant Configuration Synchronization State.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:31:00.088185-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TenantConfigurationSyncStateContract {
  public static final String SERIALIZED_NAME_BRANCH = "branch";
  @SerializedName(SERIALIZED_NAME_BRANCH)
  private String branch;

  public static final String SERIALIZED_NAME_COMMIT_ID = "commitId";
  @SerializedName(SERIALIZED_NAME_COMMIT_ID)
  private String commitId;

  public static final String SERIALIZED_NAME_CONFIGURATION_CHANGE_DATE = "configurationChangeDate";
  @SerializedName(SERIALIZED_NAME_CONFIGURATION_CHANGE_DATE)
  private OffsetDateTime configurationChangeDate;

  public static final String SERIALIZED_NAME_IS_EXPORT = "isExport";
  @SerializedName(SERIALIZED_NAME_IS_EXPORT)
  private Boolean isExport;

  public static final String SERIALIZED_NAME_IS_GIT_ENABLED = "isGitEnabled";
  @SerializedName(SERIALIZED_NAME_IS_GIT_ENABLED)
  private Boolean isGitEnabled;

  public static final String SERIALIZED_NAME_IS_SYNCED = "isSynced";
  @SerializedName(SERIALIZED_NAME_IS_SYNCED)
  private Boolean isSynced;

  public static final String SERIALIZED_NAME_SYNC_DATE = "syncDate";
  @SerializedName(SERIALIZED_NAME_SYNC_DATE)
  private OffsetDateTime syncDate;

  public TenantConfigurationSyncStateContract() {
  }

  public TenantConfigurationSyncStateContract branch(String branch) {
    this.branch = branch;
    return this;
  }

  /**
   * The name of Git branch.
   * @return branch
   */
  @javax.annotation.Nullable
  public String getBranch() {
    return branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }


  public TenantConfigurationSyncStateContract commitId(String commitId) {
    this.commitId = commitId;
    return this;
  }

  /**
   * The latest commit Id.
   * @return commitId
   */
  @javax.annotation.Nullable
  public String getCommitId() {
    return commitId;
  }

  public void setCommitId(String commitId) {
    this.commitId = commitId;
  }


  public TenantConfigurationSyncStateContract configurationChangeDate(OffsetDateTime configurationChangeDate) {
    this.configurationChangeDate = configurationChangeDate;
    return this;
  }

  /**
   * The date of the latest configuration change. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return configurationChangeDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getConfigurationChangeDate() {
    return configurationChangeDate;
  }

  public void setConfigurationChangeDate(OffsetDateTime configurationChangeDate) {
    this.configurationChangeDate = configurationChangeDate;
  }


  public TenantConfigurationSyncStateContract isExport(Boolean isExport) {
    this.isExport = isExport;
    return this;
  }

  /**
   * value indicating if last sync was save (true) or deploy (false) operation.
   * @return isExport
   */
  @javax.annotation.Nullable
  public Boolean getIsExport() {
    return isExport;
  }

  public void setIsExport(Boolean isExport) {
    this.isExport = isExport;
  }


  public TenantConfigurationSyncStateContract isGitEnabled(Boolean isGitEnabled) {
    this.isGitEnabled = isGitEnabled;
    return this;
  }

  /**
   * value indicating whether Git configuration access is enabled.
   * @return isGitEnabled
   */
  @javax.annotation.Nullable
  public Boolean getIsGitEnabled() {
    return isGitEnabled;
  }

  public void setIsGitEnabled(Boolean isGitEnabled) {
    this.isGitEnabled = isGitEnabled;
  }


  public TenantConfigurationSyncStateContract isSynced(Boolean isSynced) {
    this.isSynced = isSynced;
    return this;
  }

  /**
   * value indicating if last synchronization was later than the configuration change.
   * @return isSynced
   */
  @javax.annotation.Nullable
  public Boolean getIsSynced() {
    return isSynced;
  }

  public void setIsSynced(Boolean isSynced) {
    this.isSynced = isSynced;
  }


  public TenantConfigurationSyncStateContract syncDate(OffsetDateTime syncDate) {
    this.syncDate = syncDate;
    return this;
  }

  /**
   * The date of the latest synchronization. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return syncDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSyncDate() {
    return syncDate;
  }

  public void setSyncDate(OffsetDateTime syncDate) {
    this.syncDate = syncDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TenantConfigurationSyncStateContract tenantConfigurationSyncStateContract = (TenantConfigurationSyncStateContract) o;
    return Objects.equals(this.branch, tenantConfigurationSyncStateContract.branch) &&
        Objects.equals(this.commitId, tenantConfigurationSyncStateContract.commitId) &&
        Objects.equals(this.configurationChangeDate, tenantConfigurationSyncStateContract.configurationChangeDate) &&
        Objects.equals(this.isExport, tenantConfigurationSyncStateContract.isExport) &&
        Objects.equals(this.isGitEnabled, tenantConfigurationSyncStateContract.isGitEnabled) &&
        Objects.equals(this.isSynced, tenantConfigurationSyncStateContract.isSynced) &&
        Objects.equals(this.syncDate, tenantConfigurationSyncStateContract.syncDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(branch, commitId, configurationChangeDate, isExport, isGitEnabled, isSynced, syncDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TenantConfigurationSyncStateContract {\n");
    sb.append("    branch: ").append(toIndentedString(branch)).append("\n");
    sb.append("    commitId: ").append(toIndentedString(commitId)).append("\n");
    sb.append("    configurationChangeDate: ").append(toIndentedString(configurationChangeDate)).append("\n");
    sb.append("    isExport: ").append(toIndentedString(isExport)).append("\n");
    sb.append("    isGitEnabled: ").append(toIndentedString(isGitEnabled)).append("\n");
    sb.append("    isSynced: ").append(toIndentedString(isSynced)).append("\n");
    sb.append("    syncDate: ").append(toIndentedString(syncDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("branch");
    openapiFields.add("commitId");
    openapiFields.add("configurationChangeDate");
    openapiFields.add("isExport");
    openapiFields.add("isGitEnabled");
    openapiFields.add("isSynced");
    openapiFields.add("syncDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TenantConfigurationSyncStateContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TenantConfigurationSyncStateContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TenantConfigurationSyncStateContract is not found in the empty JSON string", TenantConfigurationSyncStateContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TenantConfigurationSyncStateContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TenantConfigurationSyncStateContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("branch") != null && !jsonObj.get("branch").isJsonNull()) && !jsonObj.get("branch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `branch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("branch").toString()));
      }
      if ((jsonObj.get("commitId") != null && !jsonObj.get("commitId").isJsonNull()) && !jsonObj.get("commitId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `commitId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("commitId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TenantConfigurationSyncStateContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TenantConfigurationSyncStateContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TenantConfigurationSyncStateContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TenantConfigurationSyncStateContract.class));

       return (TypeAdapter<T>) new TypeAdapter<TenantConfigurationSyncStateContract>() {
           @Override
           public void write(JsonWriter out, TenantConfigurationSyncStateContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TenantConfigurationSyncStateContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TenantConfigurationSyncStateContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TenantConfigurationSyncStateContract
   * @throws IOException if the JSON string is invalid with respect to TenantConfigurationSyncStateContract
   */
  public static TenantConfigurationSyncStateContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TenantConfigurationSyncStateContract.class);
  }

  /**
   * Convert an instance of TenantConfigurationSyncStateContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

