/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AccessInformationContract from '../model/AccessInformationContract';
import TenantAccessUpdateDefaultResponse from '../model/TenantAccessUpdateDefaultResponse';

/**
* TenantAccessGit service.
* @module api/TenantAccessGitApi
* @version 2017-03-01
*/
export default class TenantAccessGitApi {

    /**
    * Constructs a new TenantAccessGitApi. 
    * @alias module:api/TenantAccessGitApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the tenantAccessGitGet operation.
     * @callback module:api/TenantAccessGitApi~tenantAccessGitGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AccessInformationContract} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the Git access configuration for the tenant.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/String} accessName The identifier of the Access configuration.
     * @param {module:api/TenantAccessGitApi~tenantAccessGitGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AccessInformationContract}
     */
    tenantAccessGitGet(apiVersion, accessName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tenantAccessGitGet");
      }
      // verify the required parameter 'accessName' is set
      if (accessName === undefined || accessName === null) {
        throw new Error("Missing the required parameter 'accessName' when calling tenantAccessGitGet");
      }

      let pathParams = {
        'accessName': accessName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AccessInformationContract;
      return this.apiClient.callApi(
        '/tenant/{accessName}/git', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantAccessGitRegeneratePrimaryKey operation.
     * @callback module:api/TenantAccessGitApi~tenantAccessGitRegeneratePrimaryKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate primary access key for GIT.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/String} accessName The identifier of the Access configuration.
     * @param {module:api/TenantAccessGitApi~tenantAccessGitRegeneratePrimaryKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenantAccessGitRegeneratePrimaryKey(apiVersion, accessName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tenantAccessGitRegeneratePrimaryKey");
      }
      // verify the required parameter 'accessName' is set
      if (accessName === undefined || accessName === null) {
        throw new Error("Missing the required parameter 'accessName' when calling tenantAccessGitRegeneratePrimaryKey");
      }

      let pathParams = {
        'accessName': accessName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenant/{accessName}/git/regeneratePrimaryKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tenantAccessGitRegenerateSecondaryKey operation.
     * @callback module:api/TenantAccessGitApi~tenantAccessGitRegenerateSecondaryKeyCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate secondary access key for GIT.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/String} accessName The identifier of the Access configuration.
     * @param {module:api/TenantAccessGitApi~tenantAccessGitRegenerateSecondaryKeyCallback} callback The callback function, accepting three arguments: error, data, response
     */
    tenantAccessGitRegenerateSecondaryKey(apiVersion, accessName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling tenantAccessGitRegenerateSecondaryKey");
      }
      // verify the required parameter 'accessName' is set
      if (accessName === undefined || accessName === null) {
        throw new Error("Missing the required parameter 'accessName' when calling tenantAccessGitRegenerateSecondaryKey");
      }

      let pathParams = {
        'accessName': accessName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/tenant/{accessName}/git/regenerateSecondaryKey', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
