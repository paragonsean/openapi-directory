/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessInformationContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessInformationContract::OAIAccessInformationContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessInformationContract::OAIAccessInformationContract() {
    this->initializeModel();
}

OAIAccessInformationContract::~OAIAccessInformationContract() {}

void OAIAccessInformationContract::initializeModel() {

    m_enabled_isSet = false;
    m_enabled_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_primary_key_isSet = false;
    m_primary_key_isValid = false;

    m_secondary_key_isSet = false;
    m_secondary_key_isValid = false;
}

void OAIAccessInformationContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessInformationContract::fromJsonObject(QJsonObject json) {

    m_enabled_isValid = ::OpenAPI::fromJsonValue(m_enabled, json[QString("enabled")]);
    m_enabled_isSet = !json[QString("enabled")].isNull() && m_enabled_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_primary_key_isValid = ::OpenAPI::fromJsonValue(m_primary_key, json[QString("primaryKey")]);
    m_primary_key_isSet = !json[QString("primaryKey")].isNull() && m_primary_key_isValid;

    m_secondary_key_isValid = ::OpenAPI::fromJsonValue(m_secondary_key, json[QString("secondaryKey")]);
    m_secondary_key_isSet = !json[QString("secondaryKey")].isNull() && m_secondary_key_isValid;
}

QString OAIAccessInformationContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessInformationContract::asJsonObject() const {
    QJsonObject obj;
    if (m_enabled_isSet) {
        obj.insert(QString("enabled"), ::OpenAPI::toJsonValue(m_enabled));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_primary_key_isSet) {
        obj.insert(QString("primaryKey"), ::OpenAPI::toJsonValue(m_primary_key));
    }
    if (m_secondary_key_isSet) {
        obj.insert(QString("secondaryKey"), ::OpenAPI::toJsonValue(m_secondary_key));
    }
    return obj;
}

bool OAIAccessInformationContract::isEnabled() const {
    return m_enabled;
}
void OAIAccessInformationContract::setEnabled(const bool &enabled) {
    m_enabled = enabled;
    m_enabled_isSet = true;
}

bool OAIAccessInformationContract::is_enabled_Set() const{
    return m_enabled_isSet;
}

bool OAIAccessInformationContract::is_enabled_Valid() const{
    return m_enabled_isValid;
}

QString OAIAccessInformationContract::getId() const {
    return m_id;
}
void OAIAccessInformationContract::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAccessInformationContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAccessInformationContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAccessInformationContract::getPrimaryKey() const {
    return m_primary_key;
}
void OAIAccessInformationContract::setPrimaryKey(const QString &primary_key) {
    m_primary_key = primary_key;
    m_primary_key_isSet = true;
}

bool OAIAccessInformationContract::is_primary_key_Set() const{
    return m_primary_key_isSet;
}

bool OAIAccessInformationContract::is_primary_key_Valid() const{
    return m_primary_key_isValid;
}

QString OAIAccessInformationContract::getSecondaryKey() const {
    return m_secondary_key;
}
void OAIAccessInformationContract::setSecondaryKey(const QString &secondary_key) {
    m_secondary_key = secondary_key;
    m_secondary_key_isSet = true;
}

bool OAIAccessInformationContract::is_secondary_key_Set() const{
    return m_secondary_key_isSet;
}

bool OAIAccessInformationContract::is_secondary_key_Valid() const{
    return m_secondary_key_isValid;
}

bool OAIAccessInformationContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_primary_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secondary_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessInformationContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
