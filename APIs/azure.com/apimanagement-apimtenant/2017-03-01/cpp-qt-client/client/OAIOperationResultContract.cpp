/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOperationResultContract.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOperationResultContract::OAIOperationResultContract(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOperationResultContract::OAIOperationResultContract() {
    this->initializeModel();
}

OAIOperationResultContract::~OAIOperationResultContract() {}

void OAIOperationResultContract::initializeModel() {

    m_action_log_isSet = false;
    m_action_log_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_result_info_isSet = false;
    m_result_info_isValid = false;

    m_started_isSet = false;
    m_started_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_isSet = false;
    m_updated_isValid = false;
}

void OAIOperationResultContract::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOperationResultContract::fromJsonObject(QJsonObject json) {

    m_action_log_isValid = ::OpenAPI::fromJsonValue(m_action_log, json[QString("actionLog")]);
    m_action_log_isSet = !json[QString("actionLog")].isNull() && m_action_log_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_result_info_isValid = ::OpenAPI::fromJsonValue(m_result_info, json[QString("resultInfo")]);
    m_result_info_isSet = !json[QString("resultInfo")].isNull() && m_result_info_isValid;

    m_started_isValid = ::OpenAPI::fromJsonValue(m_started, json[QString("started")]);
    m_started_isSet = !json[QString("started")].isNull() && m_started_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_isValid = ::OpenAPI::fromJsonValue(m_updated, json[QString("updated")]);
    m_updated_isSet = !json[QString("updated")].isNull() && m_updated_isValid;
}

QString OAIOperationResultContract::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOperationResultContract::asJsonObject() const {
    QJsonObject obj;
    if (m_action_log.size() > 0) {
        obj.insert(QString("actionLog"), ::OpenAPI::toJsonValue(m_action_log));
    }
    if (m_error.isSet()) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_result_info_isSet) {
        obj.insert(QString("resultInfo"), ::OpenAPI::toJsonValue(m_result_info));
    }
    if (m_started_isSet) {
        obj.insert(QString("started"), ::OpenAPI::toJsonValue(m_started));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_isSet) {
        obj.insert(QString("updated"), ::OpenAPI::toJsonValue(m_updated));
    }
    return obj;
}

QList<OAIOperationResultLogItemContract> OAIOperationResultContract::getActionLog() const {
    return m_action_log;
}
void OAIOperationResultContract::setActionLog(const QList<OAIOperationResultLogItemContract> &action_log) {
    m_action_log = action_log;
    m_action_log_isSet = true;
}

bool OAIOperationResultContract::is_action_log_Set() const{
    return m_action_log_isSet;
}

bool OAIOperationResultContract::is_action_log_Valid() const{
    return m_action_log_isValid;
}

OAITenantAccess_Update_default_response OAIOperationResultContract::getError() const {
    return m_error;
}
void OAIOperationResultContract::setError(const OAITenantAccess_Update_default_response &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAIOperationResultContract::is_error_Set() const{
    return m_error_isSet;
}

bool OAIOperationResultContract::is_error_Valid() const{
    return m_error_isValid;
}

QString OAIOperationResultContract::getId() const {
    return m_id;
}
void OAIOperationResultContract::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOperationResultContract::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOperationResultContract::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIOperationResultContract::getResultInfo() const {
    return m_result_info;
}
void OAIOperationResultContract::setResultInfo(const QString &result_info) {
    m_result_info = result_info;
    m_result_info_isSet = true;
}

bool OAIOperationResultContract::is_result_info_Set() const{
    return m_result_info_isSet;
}

bool OAIOperationResultContract::is_result_info_Valid() const{
    return m_result_info_isValid;
}

QDateTime OAIOperationResultContract::getStarted() const {
    return m_started;
}
void OAIOperationResultContract::setStarted(const QDateTime &started) {
    m_started = started;
    m_started_isSet = true;
}

bool OAIOperationResultContract::is_started_Set() const{
    return m_started_isSet;
}

bool OAIOperationResultContract::is_started_Valid() const{
    return m_started_isValid;
}

QString OAIOperationResultContract::getStatus() const {
    return m_status;
}
void OAIOperationResultContract::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOperationResultContract::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOperationResultContract::is_status_Valid() const{
    return m_status_isValid;
}

QDateTime OAIOperationResultContract::getUpdated() const {
    return m_updated;
}
void OAIOperationResultContract::setUpdated(const QDateTime &updated) {
    m_updated = updated;
    m_updated_isSet = true;
}

bool OAIOperationResultContract::is_updated_Set() const{
    return m_updated_isSet;
}

bool OAIOperationResultContract::is_updated_Valid() const{
    return m_updated_isValid;
}

bool OAIOperationResultContract::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_action_log.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_error.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_started_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOperationResultContract::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
