/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Tenant access information contract of the API Management service.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:56.582192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AccessInformationContract {
  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  private Boolean enabled;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private String primaryKey;

  public static final String SERIALIZED_NAME_SECONDARY_KEY = "secondaryKey";
  @SerializedName(SERIALIZED_NAME_SECONDARY_KEY)
  private String secondaryKey;

  public AccessInformationContract() {
  }

  public AccessInformationContract enabled(Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Tenant access information of the API Management service.
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(Boolean enabled) {
    this.enabled = enabled;
  }


  public AccessInformationContract id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public AccessInformationContract primaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  /**
   * Primary access key.
   * @return primaryKey
   */
  @javax.annotation.Nullable
  public String getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
  }


  public AccessInformationContract secondaryKey(String secondaryKey) {
    this.secondaryKey = secondaryKey;
    return this;
  }

  /**
   * Secondary access key.
   * @return secondaryKey
   */
  @javax.annotation.Nullable
  public String getSecondaryKey() {
    return secondaryKey;
  }

  public void setSecondaryKey(String secondaryKey) {
    this.secondaryKey = secondaryKey;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessInformationContract accessInformationContract = (AccessInformationContract) o;
    return Objects.equals(this.enabled, accessInformationContract.enabled) &&
        Objects.equals(this.id, accessInformationContract.id) &&
        Objects.equals(this.primaryKey, accessInformationContract.primaryKey) &&
        Objects.equals(this.secondaryKey, accessInformationContract.secondaryKey);
  }

  @Override
  public int hashCode() {
    return Objects.hash(enabled, id, primaryKey, secondaryKey);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessInformationContract {\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    secondaryKey: ").append(toIndentedString(secondaryKey)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("enabled");
    openapiFields.add("id");
    openapiFields.add("primaryKey");
    openapiFields.add("secondaryKey");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccessInformationContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AccessInformationContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccessInformationContract is not found in the empty JSON string", AccessInformationContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccessInformationContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccessInformationContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("primaryKey") != null && !jsonObj.get("primaryKey").isJsonNull()) && !jsonObj.get("primaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryKey").toString()));
      }
      if ((jsonObj.get("secondaryKey") != null && !jsonObj.get("secondaryKey").isJsonNull()) && !jsonObj.get("secondaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryKey").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccessInformationContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccessInformationContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccessInformationContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccessInformationContract.class));

       return (TypeAdapter<T>) new TypeAdapter<AccessInformationContract>() {
           @Override
           public void write(JsonWriter out, AccessInformationContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccessInformationContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccessInformationContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccessInformationContract
   * @throws IOException if the JSON string is invalid with respect to AccessInformationContract
   */
  public static AccessInformationContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccessInformationContract.class);
  }

  /**
   * Convert an instance of AccessInformationContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

