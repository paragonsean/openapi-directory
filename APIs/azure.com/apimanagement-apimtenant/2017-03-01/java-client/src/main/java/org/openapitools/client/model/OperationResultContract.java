/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.OperationResultLogItemContract;
import org.openapitools.client.model.TenantAccessUpdateDefaultResponse;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Operation Result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:30:56.582192-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OperationResultContract {
  public static final String SERIALIZED_NAME_ACTION_LOG = "actionLog";
  @SerializedName(SERIALIZED_NAME_ACTION_LOG)
  private List<OperationResultLogItemContract> actionLog = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private TenantAccessUpdateDefaultResponse error;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_RESULT_INFO = "resultInfo";
  @SerializedName(SERIALIZED_NAME_RESULT_INFO)
  private String resultInfo;

  public static final String SERIALIZED_NAME_STARTED = "started";
  @SerializedName(SERIALIZED_NAME_STARTED)
  private OffsetDateTime started;

  /**
   * Status of an async operation.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    STARTED("Started"),
    
    IN_PROGRESS("InProgress"),
    
    SUCCEEDED("Succeeded"),
    
    FAILED("Failed");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public static final String SERIALIZED_NAME_UPDATED = "updated";
  @SerializedName(SERIALIZED_NAME_UPDATED)
  private OffsetDateTime updated;

  public OperationResultContract() {
  }

  public OperationResultContract(
     List<OperationResultLogItemContract> actionLog
  ) {
    this();
    this.actionLog = actionLog;
  }

  /**
   * This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.
   * @return actionLog
   */
  @javax.annotation.Nullable
  public List<OperationResultLogItemContract> getActionLog() {
    return actionLog;
  }



  public OperationResultContract error(TenantAccessUpdateDefaultResponse error) {
    this.error = error;
    return this;
  }

  /**
   * Get error
   * @return error
   */
  @javax.annotation.Nullable
  public TenantAccessUpdateDefaultResponse getError() {
    return error;
  }

  public void setError(TenantAccessUpdateDefaultResponse error) {
    this.error = error;
  }


  public OperationResultContract id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Operation result identifier.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public OperationResultContract resultInfo(String resultInfo) {
    this.resultInfo = resultInfo;
    return this;
  }

  /**
   * Optional result info.
   * @return resultInfo
   */
  @javax.annotation.Nullable
  public String getResultInfo() {
    return resultInfo;
  }

  public void setResultInfo(String resultInfo) {
    this.resultInfo = resultInfo;
  }


  public OperationResultContract started(OffsetDateTime started) {
    this.started = started;
    return this;
  }

  /**
   * Start time of an async operation. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return started
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStarted() {
    return started;
  }

  public void setStarted(OffsetDateTime started) {
    this.started = started;
  }


  public OperationResultContract status(StatusEnum status) {
    this.status = status;
    return this;
  }

  /**
   * Status of an async operation.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }

  public void setStatus(StatusEnum status) {
    this.status = status;
  }


  public OperationResultContract updated(OffsetDateTime updated) {
    this.updated = updated;
    return this;
  }

  /**
   * Last update time of an async operation. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return updated
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdated() {
    return updated;
  }

  public void setUpdated(OffsetDateTime updated) {
    this.updated = updated;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OperationResultContract operationResultContract = (OperationResultContract) o;
    return Objects.equals(this.actionLog, operationResultContract.actionLog) &&
        Objects.equals(this.error, operationResultContract.error) &&
        Objects.equals(this.id, operationResultContract.id) &&
        Objects.equals(this.resultInfo, operationResultContract.resultInfo) &&
        Objects.equals(this.started, operationResultContract.started) &&
        Objects.equals(this.status, operationResultContract.status) &&
        Objects.equals(this.updated, operationResultContract.updated);
  }

  @Override
  public int hashCode() {
    return Objects.hash(actionLog, error, id, resultInfo, started, status, updated);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OperationResultContract {\n");
    sb.append("    actionLog: ").append(toIndentedString(actionLog)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    resultInfo: ").append(toIndentedString(resultInfo)).append("\n");
    sb.append("    started: ").append(toIndentedString(started)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    updated: ").append(toIndentedString(updated)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("actionLog");
    openapiFields.add("error");
    openapiFields.add("id");
    openapiFields.add("resultInfo");
    openapiFields.add("started");
    openapiFields.add("status");
    openapiFields.add("updated");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OperationResultContract
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OperationResultContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OperationResultContract is not found in the empty JSON string", OperationResultContract.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OperationResultContract.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OperationResultContract` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("actionLog") != null && !jsonObj.get("actionLog").isJsonNull()) {
        JsonArray jsonArrayactionLog = jsonObj.getAsJsonArray("actionLog");
        if (jsonArrayactionLog != null) {
          // ensure the json data is an array
          if (!jsonObj.get("actionLog").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `actionLog` to be an array in the JSON string but got `%s`", jsonObj.get("actionLog").toString()));
          }

          // validate the optional field `actionLog` (array)
          for (int i = 0; i < jsonArrayactionLog.size(); i++) {
            OperationResultLogItemContract.validateJsonElement(jsonArrayactionLog.get(i));
          };
        }
      }
      // validate the optional field `error`
      if (jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) {
        TenantAccessUpdateDefaultResponse.validateJsonElement(jsonObj.get("error"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("resultInfo") != null && !jsonObj.get("resultInfo").isJsonNull()) && !jsonObj.get("resultInfo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultInfo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultInfo").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OperationResultContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OperationResultContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OperationResultContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OperationResultContract.class));

       return (TypeAdapter<T>) new TypeAdapter<OperationResultContract>() {
           @Override
           public void write(JsonWriter out, OperationResultContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OperationResultContract read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OperationResultContract given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OperationResultContract
   * @throws IOException if the JSON string is invalid with respect to OperationResultContract
   */
  public static OperationResultContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OperationResultContract.class);
  }

  /**
   * Convert an instance of OperationResultContract to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

