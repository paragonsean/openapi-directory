/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessInformationContract;
import org.openapitools.client.model.AccessInformationUpdateParameters;
import org.openapitools.client.model.TenantAccessUpdateDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenantAccessApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TenantAccessApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TenantAccessApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tenantAccessGet
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tenant Access information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGetCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessGetValidateBeforeCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessGet(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessGet(Async)");
        }

        return tenantAccessGetCall(apiVersion, accessName, _callback);

    }

    /**
     * 
     * Get tenant access information details.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return AccessInformationContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tenant Access information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
     </table>
     */
    public AccessInformationContract tenantAccessGet(String apiVersion, String accessName) throws ApiException {
        ApiResponse<AccessInformationContract> localVarResp = tenantAccessGetWithHttpInfo(apiVersion, accessName);
        return localVarResp.getData();
    }

    /**
     * 
     * Get tenant access information details.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return ApiResponse&lt;AccessInformationContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tenant Access information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
     </table>
     */
    public ApiResponse<AccessInformationContract> tenantAccessGetWithHttpInfo(String apiVersion, String accessName) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessGetValidateBeforeCall(apiVersion, accessName, null);
        Type localVarReturnType = new TypeToken<AccessInformationContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get tenant access information details.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Tenant Access information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGetAsync(String apiVersion, String accessName, final ApiCallback<AccessInformationContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessGetValidateBeforeCall(apiVersion, accessName, _callback);
        Type localVarReturnType = new TypeToken<AccessInformationContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantAccessRegeneratePrimaryKey
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessRegeneratePrimaryKeyCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}/regeneratePrimaryKey"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessRegeneratePrimaryKeyValidateBeforeCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessRegeneratePrimaryKey(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessRegeneratePrimaryKey(Async)");
        }

        return tenantAccessRegeneratePrimaryKeyCall(apiVersion, accessName, _callback);

    }

    /**
     * 
     * Regenerate primary access key.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tenantAccessRegeneratePrimaryKey(String apiVersion, String accessName) throws ApiException {
        tenantAccessRegeneratePrimaryKeyWithHttpInfo(apiVersion, accessName);
    }

    /**
     * 
     * Regenerate primary access key.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tenantAccessRegeneratePrimaryKeyWithHttpInfo(String apiVersion, String accessName) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessRegeneratePrimaryKeyValidateBeforeCall(apiVersion, accessName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerate primary access key.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessRegeneratePrimaryKeyAsync(String apiVersion, String accessName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessRegeneratePrimaryKeyValidateBeforeCall(apiVersion, accessName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantAccessRegenerateSecondaryKey
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessRegenerateSecondaryKeyCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}/regenerateSecondaryKey"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessRegenerateSecondaryKeyValidateBeforeCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessRegenerateSecondaryKey(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessRegenerateSecondaryKey(Async)");
        }

        return tenantAccessRegenerateSecondaryKeyCall(apiVersion, accessName, _callback);

    }

    /**
     * 
     * Regenerate secondary access key.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tenantAccessRegenerateSecondaryKey(String apiVersion, String accessName) throws ApiException {
        tenantAccessRegenerateSecondaryKeyWithHttpInfo(apiVersion, accessName);
    }

    /**
     * 
     * Regenerate secondary access key.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tenantAccessRegenerateSecondaryKeyWithHttpInfo(String apiVersion, String accessName) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessRegenerateSecondaryKeyValidateBeforeCall(apiVersion, accessName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerate secondary access key.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessRegenerateSecondaryKeyAsync(String apiVersion, String accessName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessRegenerateSecondaryKeyValidateBeforeCall(apiVersion, accessName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantAccessUpdate
     * @param accessName The identifier of the Access configuration. (required)
     * @param ifMatch The entity state (Etag) version of the property to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters supplied to retrieve the Tenant Access Information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tenant&#39;s access information updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessUpdateCall(String accessName, String ifMatch, String apiVersion, AccessInformationUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessUpdateValidateBeforeCall(String accessName, String ifMatch, String apiVersion, AccessInformationUpdateParameters parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessUpdate(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling tenantAccessUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling tenantAccessUpdate(Async)");
        }

        return tenantAccessUpdateCall(accessName, ifMatch, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Update tenant access information details.
     * @param accessName The identifier of the Access configuration. (required)
     * @param ifMatch The entity state (Etag) version of the property to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters supplied to retrieve the Tenant Access Information. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tenant&#39;s access information updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tenantAccessUpdate(String accessName, String ifMatch, String apiVersion, AccessInformationUpdateParameters parameters) throws ApiException {
        tenantAccessUpdateWithHttpInfo(accessName, ifMatch, apiVersion, parameters);
    }

    /**
     * 
     * Update tenant access information details.
     * @param accessName The identifier of the Access configuration. (required)
     * @param ifMatch The entity state (Etag) version of the property to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters supplied to retrieve the Tenant Access Information. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tenant&#39;s access information updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tenantAccessUpdateWithHttpInfo(String accessName, String ifMatch, String apiVersion, AccessInformationUpdateParameters parameters) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessUpdateValidateBeforeCall(accessName, ifMatch, apiVersion, parameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update tenant access information details.
     * @param accessName The identifier of the Access configuration. (required)
     * @param ifMatch The entity state (Etag) version of the property to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters Parameters supplied to retrieve the Tenant Access Information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Tenant&#39;s access information updated successfully. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessUpdateAsync(String accessName, String ifMatch, String apiVersion, AccessInformationUpdateParameters parameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessUpdateValidateBeforeCall(accessName, ifMatch, apiVersion, parameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
