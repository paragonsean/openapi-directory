/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on tenant entity associated with your Azure API Management deployment. Using this entity you can manage properties and configuration that apply to the entire API Management service instance.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AccessInformationContract;
import org.openapitools.client.model.TenantAccessUpdateDefaultResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TenantAccessGitApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TenantAccessGitApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TenantAccessGitApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for tenantAccessGitGet
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Git Access Information for the Service. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGitGetCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}/git"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessGitGetValidateBeforeCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessGitGet(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessGitGet(Async)");
        }

        return tenantAccessGitGetCall(apiVersion, accessName, _callback);

    }

    /**
     * 
     * Gets the Git access configuration for the tenant.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return AccessInformationContract
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Git Access Information for the Service. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public AccessInformationContract tenantAccessGitGet(String apiVersion, String accessName) throws ApiException {
        ApiResponse<AccessInformationContract> localVarResp = tenantAccessGitGetWithHttpInfo(apiVersion, accessName);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets the Git access configuration for the tenant.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return ApiResponse&lt;AccessInformationContract&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Git Access Information for the Service. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AccessInformationContract> tenantAccessGitGetWithHttpInfo(String apiVersion, String accessName) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessGitGetValidateBeforeCall(apiVersion, accessName, null);
        Type localVarReturnType = new TypeToken<AccessInformationContract>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets the Git access configuration for the tenant.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Git Access Information for the Service. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGitGetAsync(String apiVersion, String accessName, final ApiCallback<AccessInformationContract> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessGitGetValidateBeforeCall(apiVersion, accessName, _callback);
        Type localVarReturnType = new TypeToken<AccessInformationContract>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantAccessGitRegeneratePrimaryKey
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGitRegeneratePrimaryKeyCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}/git/regeneratePrimaryKey"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessGitRegeneratePrimaryKeyValidateBeforeCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessGitRegeneratePrimaryKey(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessGitRegeneratePrimaryKey(Async)");
        }

        return tenantAccessGitRegeneratePrimaryKeyCall(apiVersion, accessName, _callback);

    }

    /**
     * 
     * Regenerate primary access key for GIT.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tenantAccessGitRegeneratePrimaryKey(String apiVersion, String accessName) throws ApiException {
        tenantAccessGitRegeneratePrimaryKeyWithHttpInfo(apiVersion, accessName);
    }

    /**
     * 
     * Regenerate primary access key for GIT.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tenantAccessGitRegeneratePrimaryKeyWithHttpInfo(String apiVersion, String accessName) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessGitRegeneratePrimaryKeyValidateBeforeCall(apiVersion, accessName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerate primary access key for GIT.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The primary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGitRegeneratePrimaryKeyAsync(String apiVersion, String accessName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessGitRegeneratePrimaryKeyValidateBeforeCall(apiVersion, accessName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for tenantAccessGitRegenerateSecondaryKey
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGitRegenerateSecondaryKeyCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenant/{accessName}/git/regenerateSecondaryKey"
            .replace("{" + "accessName" + "}", localVarApiClient.escapeString(accessName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tenantAccessGitRegenerateSecondaryKeyValidateBeforeCall(String apiVersion, String accessName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling tenantAccessGitRegenerateSecondaryKey(Async)");
        }

        // verify the required parameter 'accessName' is set
        if (accessName == null) {
            throw new ApiException("Missing the required parameter 'accessName' when calling tenantAccessGitRegenerateSecondaryKey(Async)");
        }

        return tenantAccessGitRegenerateSecondaryKeyCall(apiVersion, accessName, _callback);

    }

    /**
     * 
     * Regenerate secondary access key for GIT.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void tenantAccessGitRegenerateSecondaryKey(String apiVersion, String accessName) throws ApiException {
        tenantAccessGitRegenerateSecondaryKeyWithHttpInfo(apiVersion, accessName);
    }

    /**
     * 
     * Regenerate secondary access key for GIT.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> tenantAccessGitRegenerateSecondaryKeyWithHttpInfo(String apiVersion, String accessName) throws ApiException {
        okhttp3.Call localVarCall = tenantAccessGitRegenerateSecondaryKeyValidateBeforeCall(apiVersion, accessName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Regenerate secondary access key for GIT.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param accessName The identifier of the Access configuration. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> The secondary key was successfully regenerated. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tenantAccessGitRegenerateSecondaryKeyAsync(String apiVersion, String accessName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = tenantAccessGitRegenerateSecondaryKeyValidateBeforeCall(apiVersion, accessName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
