# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.tenant_access_get_default_response_error import TenantAccessGetDefaultResponseError
from openapi_server.models.tenant_configuration_deploy200_response_action_log_inner import TenantConfigurationDeploy200ResponseActionLogInner
from openapi_server import util


class TenantConfigurationDeploy200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_log: List[TenantConfigurationDeploy200ResponseActionLogInner]=None, error: TenantAccessGetDefaultResponseError=None, id: str=None, result_info: str=None, started: datetime=None, status: str=None, updated: datetime=None):
        """TenantConfigurationDeploy200Response - a model defined in OpenAPI

        :param action_log: The action_log of this TenantConfigurationDeploy200Response.
        :param error: The error of this TenantConfigurationDeploy200Response.
        :param id: The id of this TenantConfigurationDeploy200Response.
        :param result_info: The result_info of this TenantConfigurationDeploy200Response.
        :param started: The started of this TenantConfigurationDeploy200Response.
        :param status: The status of this TenantConfigurationDeploy200Response.
        :param updated: The updated of this TenantConfigurationDeploy200Response.
        """
        self.openapi_types = {
            'action_log': List[TenantConfigurationDeploy200ResponseActionLogInner],
            'error': TenantAccessGetDefaultResponseError,
            'id': str,
            'result_info': str,
            'started': datetime,
            'status': str,
            'updated': datetime
        }

        self.attribute_map = {
            'action_log': 'actionLog',
            'error': 'error',
            'id': 'id',
            'result_info': 'resultInfo',
            'started': 'started',
            'status': 'status',
            'updated': 'updated'
        }

        self._action_log = action_log
        self._error = error
        self._id = id
        self._result_info = result_info
        self._started = started
        self._status = status
        self._updated = updated

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TenantConfigurationDeploy200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TenantConfiguration_Deploy_200_response of this TenantConfigurationDeploy200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_log(self):
        """Gets the action_log of this TenantConfigurationDeploy200Response.

        This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.

        :return: The action_log of this TenantConfigurationDeploy200Response.
        :rtype: List[TenantConfigurationDeploy200ResponseActionLogInner]
        """
        return self._action_log

    @action_log.setter
    def action_log(self, action_log):
        """Sets the action_log of this TenantConfigurationDeploy200Response.

        This property if only provided as part of the TenantConfiguration_Validate operation. It contains the log the entities which will be updated/created/deleted as part of the TenantConfiguration_Deploy operation.

        :param action_log: The action_log of this TenantConfigurationDeploy200Response.
        :type action_log: List[TenantConfigurationDeploy200ResponseActionLogInner]
        """

        self._action_log = action_log

    @property
    def error(self):
        """Gets the error of this TenantConfigurationDeploy200Response.


        :return: The error of this TenantConfigurationDeploy200Response.
        :rtype: TenantAccessGetDefaultResponseError
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this TenantConfigurationDeploy200Response.


        :param error: The error of this TenantConfigurationDeploy200Response.
        :type error: TenantAccessGetDefaultResponseError
        """

        self._error = error

    @property
    def id(self):
        """Gets the id of this TenantConfigurationDeploy200Response.

        Operation result identifier.

        :return: The id of this TenantConfigurationDeploy200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TenantConfigurationDeploy200Response.

        Operation result identifier.

        :param id: The id of this TenantConfigurationDeploy200Response.
        :type id: str
        """

        self._id = id

    @property
    def result_info(self):
        """Gets the result_info of this TenantConfigurationDeploy200Response.

        Optional result info.

        :return: The result_info of this TenantConfigurationDeploy200Response.
        :rtype: str
        """
        return self._result_info

    @result_info.setter
    def result_info(self, result_info):
        """Sets the result_info of this TenantConfigurationDeploy200Response.

        Optional result info.

        :param result_info: The result_info of this TenantConfigurationDeploy200Response.
        :type result_info: str
        """

        self._result_info = result_info

    @property
    def started(self):
        """Gets the started of this TenantConfigurationDeploy200Response.

        Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The started of this TenantConfigurationDeploy200Response.
        :rtype: datetime
        """
        return self._started

    @started.setter
    def started(self, started):
        """Sets the started of this TenantConfigurationDeploy200Response.

        Start time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param started: The started of this TenantConfigurationDeploy200Response.
        :type started: datetime
        """

        self._started = started

    @property
    def status(self):
        """Gets the status of this TenantConfigurationDeploy200Response.

        Status of an async operation.

        :return: The status of this TenantConfigurationDeploy200Response.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TenantConfigurationDeploy200Response.

        Status of an async operation.

        :param status: The status of this TenantConfigurationDeploy200Response.
        :type status: str
        """
        allowed_values = ["Started", "InProgress", "Succeeded", "Failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def updated(self):
        """Gets the updated of this TenantConfigurationDeploy200Response.

        Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The updated of this TenantConfigurationDeploy200Response.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated):
        """Sets the updated of this TenantConfigurationDeploy200Response.

        Last update time of an async operation. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param updated: The updated of this TenantConfigurationDeploy200Response.
        :type updated: datetime
        """

        self._updated = updated
