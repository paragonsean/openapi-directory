/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Group entity in your Azure API Management deployment. Groups are used to manage the visibility of products to developers. Each API Management service instance comes with the following immutable system groups whose membership is automatically managed by API Management.  - **Administrators** - Azure subscription administrators are members of this group. - **Developers** - Authenticated developer portal users fall into this group. - **Guests** - Unauthenticated developer portal users are placed into this group. In addition to these system groups, administrators can create custom groups or [leverage external groups in associated Azure Active Directory tenants](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-add-an-external-azure-active-directory-group). Custom and external groups can be used alongside system groups in giving developers visibility and access to API products. For example, you could create one custom group for developers affiliated with a specific partner organization and allow them access to the APIs from a product containing relevant APIs only. A user can be a member of more than one group.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner() {
    this->initializeModel();
}

OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::~OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner() {}

void OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_provider_isSet = false;
    m_provider_isValid = false;
}

void OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_provider_isValid = ::OpenAPI::fromJsonValue(m_provider, json[QString("provider")]);
    m_provider_isSet = !json[QString("provider")].isNull() && m_provider_isValid;
}

QString OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_provider_isSet) {
        obj.insert(QString("provider"), ::OpenAPI::toJsonValue(m_provider));
    }
    return obj;
}

QString OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::getId() const {
    return m_id;
}
void OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::getProvider() const {
    return m_provider;
}
void OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::setProvider(const QString &provider) {
    m_provider = provider;
    m_provider_isSet = true;
}

bool OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::is_provider_Set() const{
    return m_provider_isSet;
}

bool OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::is_provider_Valid() const{
    return m_provider_isValid;
}

bool OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroupUsers_ListByGroups_200_response_value_inner_identities_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
