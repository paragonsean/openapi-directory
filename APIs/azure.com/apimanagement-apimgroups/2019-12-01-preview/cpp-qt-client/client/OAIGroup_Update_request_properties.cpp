/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Group entity in your Azure API Management deployment. Groups are used to manage the visibility of products to developers. Each API Management service instance comes with the following immutable system groups whose membership is automatically managed by API Management.  - **Administrators** - Azure subscription administrators are members of this group. - **Developers** - Authenticated developer portal users fall into this group. - **Guests** - Unauthenticated developer portal users are placed into this group. In addition to these system groups, administrators can create custom groups or [leverage external groups in associated Azure Active Directory tenants](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-add-an-external-azure-active-directory-group). Custom and external groups can be used alongside system groups in giving developers visibility and access to API products. For example, you could create one custom group for developers affiliated with a specific partner organization and allow them access to the APIs from a product containing relevant APIs only. A user can be a member of more than one group.
 *
 * The version of the OpenAPI document: 2019-12-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_Update_request_properties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_Update_request_properties::OAIGroup_Update_request_properties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_Update_request_properties::OAIGroup_Update_request_properties() {
    this->initializeModel();
}

OAIGroup_Update_request_properties::~OAIGroup_Update_request_properties() {}

void OAIGroup_Update_request_properties::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_external_id_isSet = false;
    m_external_id_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIGroup_Update_request_properties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_Update_request_properties::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_external_id_isValid = ::OpenAPI::fromJsonValue(m_external_id, json[QString("externalId")]);
    m_external_id_isSet = !json[QString("externalId")].isNull() && m_external_id_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIGroup_Update_request_properties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_Update_request_properties::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_external_id_isSet) {
        obj.insert(QString("externalId"), ::OpenAPI::toJsonValue(m_external_id));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIGroup_Update_request_properties::getDescription() const {
    return m_description;
}
void OAIGroup_Update_request_properties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIGroup_Update_request_properties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIGroup_Update_request_properties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIGroup_Update_request_properties::getDisplayName() const {
    return m_display_name;
}
void OAIGroup_Update_request_properties::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIGroup_Update_request_properties::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIGroup_Update_request_properties::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QString OAIGroup_Update_request_properties::getExternalId() const {
    return m_external_id;
}
void OAIGroup_Update_request_properties::setExternalId(const QString &external_id) {
    m_external_id = external_id;
    m_external_id_isSet = true;
}

bool OAIGroup_Update_request_properties::is_external_id_Set() const{
    return m_external_id_isSet;
}

bool OAIGroup_Update_request_properties::is_external_id_Valid() const{
    return m_external_id_isValid;
}

QString OAIGroup_Update_request_properties::getType() const {
    return m_type;
}
void OAIGroup_Update_request_properties::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIGroup_Update_request_properties::is_type_Set() const{
    return m_type_isSet;
}

bool OAIGroup_Update_request_properties::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIGroup_Update_request_properties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_external_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_Update_request_properties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
