/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Group entity in your Azure API Management deployment. Groups are used to manage the visibility of products to developers. Each API Management service instance comes with the following immutable system groups whose membership is automatically managed by API Management.  - **Administrators** - Azure subscription administrators are members of this group. - **Developers** - Authenticated developer portal users fall into this group. - **Guests** - Unauthenticated developer portal users are placed into this group. In addition to these system groups, administrators can create custom groups or [leverage external groups in associated Azure Active Directory tenants](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-add-an-external-azure-active-directory-group). Custom and external groups can be used alongside system groups in giving developers visibility and access to API products. For example, you could create one custom group for developers affiliated with a specific partner organization and allow them access to the APIs from a product containing relevant APIs only. A user can be a member of more than one group.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import GroupCollection from './model/GroupCollection';
import GroupContract from './model/GroupContract';
import GroupContractProperties from './model/GroupContractProperties';
import GroupCreateParameters from './model/GroupCreateParameters';
import GroupCreateParametersProperties from './model/GroupCreateParametersProperties';
import GroupGetDefaultResponse from './model/GroupGetDefaultResponse';
import GroupGetDefaultResponseError from './model/GroupGetDefaultResponseError';
import GroupGetDefaultResponseErrorDetailsInner from './model/GroupGetDefaultResponseErrorDetailsInner';
import GroupUpdateParameters from './model/GroupUpdateParameters';
import GroupUpdateParametersProperties from './model/GroupUpdateParametersProperties';
import GroupUserCreate200Response from './model/GroupUserCreate200Response';
import GroupUserList200Response from './model/GroupUserList200Response';
import GroupUserList200ResponseValueInner from './model/GroupUserList200ResponseValueInner';
import GroupUserList200ResponseValueInnerProperties from './model/GroupUserList200ResponseValueInnerProperties';
import GroupUserList200ResponseValueInnerPropertiesGroupsInner from './model/GroupUserList200ResponseValueInnerPropertiesGroupsInner';
import GroupUsersApi from './api/GroupUsersApi';
import GroupsApi from './api/GroupsApi';


/**
* Use these REST APIs for performing operations on Group entity in your Azure API Management deployment. Groups are used to manage the visibility of products to developers. Each API Management service instance comes with the following immutable system groups whose membership is automatically managed by API Management.  - **Administrators** - Azure subscription administrators are members of this group. - **Developers** - Authenticated developer portal users fall into this group. - **Guests** - Unauthenticated developer portal users are placed into this group. In addition to these system groups, administrators can create custom groups or [leverage external groups in associated Azure Active Directory tenants](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-add-an-external-azure-active-directory-group). Custom and external groups can be used alongside system groups in giving developers visibility and access to API products. For example, you could create one custom group for developers affiliated with a specific partner organization and allow them access to the APIs from a product containing relevant APIs only. A user can be a member of more than one group..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ApiManagementClient = require('index'); // See note below*.
* var xxxSvc = new ApiManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ApiManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ApiManagementClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ApiManagementClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2018-01-01
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The GroupCollection model constructor.
     * @property {module:model/GroupCollection}
     */
    GroupCollection,

    /**
     * The GroupContract model constructor.
     * @property {module:model/GroupContract}
     */
    GroupContract,

    /**
     * The GroupContractProperties model constructor.
     * @property {module:model/GroupContractProperties}
     */
    GroupContractProperties,

    /**
     * The GroupCreateParameters model constructor.
     * @property {module:model/GroupCreateParameters}
     */
    GroupCreateParameters,

    /**
     * The GroupCreateParametersProperties model constructor.
     * @property {module:model/GroupCreateParametersProperties}
     */
    GroupCreateParametersProperties,

    /**
     * The GroupGetDefaultResponse model constructor.
     * @property {module:model/GroupGetDefaultResponse}
     */
    GroupGetDefaultResponse,

    /**
     * The GroupGetDefaultResponseError model constructor.
     * @property {module:model/GroupGetDefaultResponseError}
     */
    GroupGetDefaultResponseError,

    /**
     * The GroupGetDefaultResponseErrorDetailsInner model constructor.
     * @property {module:model/GroupGetDefaultResponseErrorDetailsInner}
     */
    GroupGetDefaultResponseErrorDetailsInner,

    /**
     * The GroupUpdateParameters model constructor.
     * @property {module:model/GroupUpdateParameters}
     */
    GroupUpdateParameters,

    /**
     * The GroupUpdateParametersProperties model constructor.
     * @property {module:model/GroupUpdateParametersProperties}
     */
    GroupUpdateParametersProperties,

    /**
     * The GroupUserCreate200Response model constructor.
     * @property {module:model/GroupUserCreate200Response}
     */
    GroupUserCreate200Response,

    /**
     * The GroupUserList200Response model constructor.
     * @property {module:model/GroupUserList200Response}
     */
    GroupUserList200Response,

    /**
     * The GroupUserList200ResponseValueInner model constructor.
     * @property {module:model/GroupUserList200ResponseValueInner}
     */
    GroupUserList200ResponseValueInner,

    /**
     * The GroupUserList200ResponseValueInnerProperties model constructor.
     * @property {module:model/GroupUserList200ResponseValueInnerProperties}
     */
    GroupUserList200ResponseValueInnerProperties,

    /**
     * The GroupUserList200ResponseValueInnerPropertiesGroupsInner model constructor.
     * @property {module:model/GroupUserList200ResponseValueInnerPropertiesGroupsInner}
     */
    GroupUserList200ResponseValueInnerPropertiesGroupsInner,

    /**
    * The GroupUsersApi service constructor.
    * @property {module:api/GroupUsersApi}
    */
    GroupUsersApi,

    /**
    * The GroupsApi service constructor.
    * @property {module:api/GroupsApi}
    */
    GroupsApi
};
