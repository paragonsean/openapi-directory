# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.group_user_create200_response_all_of_all_of_identities_inner import GroupUserCreate200ResponseAllOfAllOfIdentitiesInner
from openapi_server.models.group_user_create200_response_all_of_groups_inner import GroupUserCreate200ResponseAllOfGroupsInner
from openapi_server import util


class GroupUserCreate200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, email: str=None, first_name: str=None, groups: List[GroupUserCreate200ResponseAllOfGroupsInner]=None, last_name: str=None, registration_date: datetime=None, identities: List[GroupUserCreate200ResponseAllOfAllOfIdentitiesInner]=None, note: str=None, state: str='active'):
        """GroupUserCreate200Response - a model defined in OpenAPI

        :param id: The id of this GroupUserCreate200Response.
        :param email: The email of this GroupUserCreate200Response.
        :param first_name: The first_name of this GroupUserCreate200Response.
        :param groups: The groups of this GroupUserCreate200Response.
        :param last_name: The last_name of this GroupUserCreate200Response.
        :param registration_date: The registration_date of this GroupUserCreate200Response.
        :param identities: The identities of this GroupUserCreate200Response.
        :param note: The note of this GroupUserCreate200Response.
        :param state: The state of this GroupUserCreate200Response.
        """
        self.openapi_types = {
            'id': str,
            'email': str,
            'first_name': str,
            'groups': List[GroupUserCreate200ResponseAllOfGroupsInner],
            'last_name': str,
            'registration_date': datetime,
            'identities': List[GroupUserCreate200ResponseAllOfAllOfIdentitiesInner],
            'note': str,
            'state': str
        }

        self.attribute_map = {
            'id': 'id',
            'email': 'email',
            'first_name': 'firstName',
            'groups': 'groups',
            'last_name': 'lastName',
            'registration_date': 'registrationDate',
            'identities': 'identities',
            'note': 'note',
            'state': 'state'
        }

        self._id = id
        self._email = email
        self._first_name = first_name
        self._groups = groups
        self._last_name = last_name
        self._registration_date = registration_date
        self._identities = identities
        self._note = note
        self._state = state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GroupUserCreate200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The GroupUser_Create_200_response of this GroupUserCreate200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this GroupUserCreate200Response.

        Identifier of the entity.

        :return: The id of this GroupUserCreate200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GroupUserCreate200Response.

        Identifier of the entity.

        :param id: The id of this GroupUserCreate200Response.
        :type id: str
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this GroupUserCreate200Response.

        Email address.

        :return: The email of this GroupUserCreate200Response.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this GroupUserCreate200Response.

        Email address.

        :param email: The email of this GroupUserCreate200Response.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this GroupUserCreate200Response.

        First name.

        :return: The first_name of this GroupUserCreate200Response.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this GroupUserCreate200Response.

        First name.

        :param first_name: The first_name of this GroupUserCreate200Response.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def groups(self):
        """Gets the groups of this GroupUserCreate200Response.

        Collection of groups user is part of.

        :return: The groups of this GroupUserCreate200Response.
        :rtype: List[GroupUserCreate200ResponseAllOfGroupsInner]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this GroupUserCreate200Response.

        Collection of groups user is part of.

        :param groups: The groups of this GroupUserCreate200Response.
        :type groups: List[GroupUserCreate200ResponseAllOfGroupsInner]
        """

        self._groups = groups

    @property
    def last_name(self):
        """Gets the last_name of this GroupUserCreate200Response.

        Last name.

        :return: The last_name of this GroupUserCreate200Response.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this GroupUserCreate200Response.

        Last name.

        :param last_name: The last_name of this GroupUserCreate200Response.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def registration_date(self):
        """Gets the registration_date of this GroupUserCreate200Response.

        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :return: The registration_date of this GroupUserCreate200Response.
        :rtype: datetime
        """
        return self._registration_date

    @registration_date.setter
    def registration_date(self, registration_date):
        """Sets the registration_date of this GroupUserCreate200Response.

        Date of user registration. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 

        :param registration_date: The registration_date of this GroupUserCreate200Response.
        :type registration_date: datetime
        """

        self._registration_date = registration_date

    @property
    def identities(self):
        """Gets the identities of this GroupUserCreate200Response.

        Collection of user identities.

        :return: The identities of this GroupUserCreate200Response.
        :rtype: List[GroupUserCreate200ResponseAllOfAllOfIdentitiesInner]
        """
        return self._identities

    @identities.setter
    def identities(self, identities):
        """Sets the identities of this GroupUserCreate200Response.

        Collection of user identities.

        :param identities: The identities of this GroupUserCreate200Response.
        :type identities: List[GroupUserCreate200ResponseAllOfAllOfIdentitiesInner]
        """

        self._identities = identities

    @property
    def note(self):
        """Gets the note of this GroupUserCreate200Response.

        Optional note about a user set by the administrator.

        :return: The note of this GroupUserCreate200Response.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this GroupUserCreate200Response.

        Optional note about a user set by the administrator.

        :param note: The note of this GroupUserCreate200Response.
        :type note: str
        """

        self._note = note

    @property
    def state(self):
        """Gets the state of this GroupUserCreate200Response.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :return: The state of this GroupUserCreate200Response.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this GroupUserCreate200Response.

        Account state. Specifies whether the user is active or not. Blocked users are unable to sign into the developer portal or call any APIs of subscribed products. Default state is Active.

        :param state: The state of this GroupUserCreate200Response.
        :type state: str
        """
        allowed_values = ["active", "blocked"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
