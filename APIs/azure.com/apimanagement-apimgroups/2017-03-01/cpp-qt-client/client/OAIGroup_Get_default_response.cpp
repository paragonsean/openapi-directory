/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Group entity in your Azure API Management deployment. Groups are used to manage the visibility of products to developers. Each API Management service instance comes with the following immutable system groups whose membership is automatically managed by API Management.  - **Administrators** - Azure subscription administrators are members of this group. - **Developers** - Authenticated developer portal users fall into this group. - **Guests** - Unauthenticated developer portal users are placed into this group. In addition to these system groups, administrators can create custom groups or [leverage external groups in associated Azure Active Directory tenants](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-add-an-external-azure-active-directory-group). Custom and external groups can be used alongside system groups in giving developers visibility and access to API products. For example, you could create one custom group for developers affiliated with a specific partner organization and allow them access to the APIs from a product containing relevant APIs only. A user can be a member of more than one group.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGroup_Get_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGroup_Get_default_response::OAIGroup_Get_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGroup_Get_default_response::OAIGroup_Get_default_response() {
    this->initializeModel();
}

OAIGroup_Get_default_response::~OAIGroup_Get_default_response() {}

void OAIGroup_Get_default_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;
}

void OAIGroup_Get_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGroup_Get_default_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;
}

QString OAIGroup_Get_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGroup_Get_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    return obj;
}

QString OAIGroup_Get_default_response::getCode() const {
    return m_code;
}
void OAIGroup_Get_default_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIGroup_Get_default_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIGroup_Get_default_response::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIGroup_Get_default_response_details_inner> OAIGroup_Get_default_response::getDetails() const {
    return m_details;
}
void OAIGroup_Get_default_response::setDetails(const QList<OAIGroup_Get_default_response_details_inner> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIGroup_Get_default_response::is_details_Set() const{
    return m_details_isSet;
}

bool OAIGroup_Get_default_response::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIGroup_Get_default_response::getMessage() const {
    return m_message;
}
void OAIGroup_Get_default_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIGroup_Get_default_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIGroup_Get_default_response::is_message_Valid() const{
    return m_message_isValid;
}

bool OAIGroup_Get_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGroup_Get_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
