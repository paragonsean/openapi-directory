/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Group entity in your Azure API Management deployment. Groups are used to manage the visibility of products to developers. Each API Management service instance comes with the following immutable system groups whose membership is automatically managed by API Management.  - **Administrators** - Azure subscription administrators are members of this group. - **Developers** - Authenticated developer portal users fall into this group. - **Guests** - Unauthenticated developer portal users are placed into this group. In addition to these system groups, administrators can create custom groups or [leverage external groups in associated Azure Active Directory tenants](https://docs.microsoft.com/en-us/azure/api-management/api-management-howto-aad#how-to-add-an-external-azure-active-directory-group). Custom and external groups can be used alongside system groups in giving developers visibility and access to API products. For example, you could create one custom group for developers affiliated with a specific partner organization and allow them access to the APIs from a product containing relevant APIs only. A user can be a member of more than one group.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.GroupListByServiceDefaultResponse;
import org.openapitools.client.model.GroupUserCreate200Response;
import org.openapitools.client.model.GroupUserList200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GroupUserApi
 */
@Disabled
public class GroupUserApiTest {

    private final GroupUserApi api = new GroupUserApi();

    /**
     * Checks that user entity specified by identifier is associated with the group entity.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupUserCheckEntityExistsTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String groupId = null;
        String userId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.groupUserCheckEntityExists(resourceGroupName, serviceName, groupId, userId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Add existing user to existing group
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupUserCreateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String groupId = null;
        String userId = null;
        String apiVersion = null;
        String subscriptionId = null;
        GroupUserCreate200Response response = api.groupUserCreate(resourceGroupName, serviceName, groupId, userId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Remove existing user from existing group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupUserDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String groupId = null;
        String userId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.groupUserDelete(resourceGroupName, serviceName, groupId, userId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of user entities associated with the group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void groupUserListTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String groupId = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        GroupUserList200Response response = api.groupUserList(resourceGroupName, serviceName, groupId, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

}
