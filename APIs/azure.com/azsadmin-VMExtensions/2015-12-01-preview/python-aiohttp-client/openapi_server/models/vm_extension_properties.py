# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.azure_blob import AzureBlob
from openapi_server import util


class VMExtensionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, compute_role: str=None, is_system_extension: bool=None, provisioning_state: str=None, source_blob: AzureBlob=None, support_multiple_extensions: bool=None, vm_os_type: str=None, vm_scale_set_enabled: bool=None):
        """VMExtensionProperties - a model defined in OpenAPI

        :param compute_role: The compute_role of this VMExtensionProperties.
        :param is_system_extension: The is_system_extension of this VMExtensionProperties.
        :param provisioning_state: The provisioning_state of this VMExtensionProperties.
        :param source_blob: The source_blob of this VMExtensionProperties.
        :param support_multiple_extensions: The support_multiple_extensions of this VMExtensionProperties.
        :param vm_os_type: The vm_os_type of this VMExtensionProperties.
        :param vm_scale_set_enabled: The vm_scale_set_enabled of this VMExtensionProperties.
        """
        self.openapi_types = {
            'compute_role': str,
            'is_system_extension': bool,
            'provisioning_state': str,
            'source_blob': AzureBlob,
            'support_multiple_extensions': bool,
            'vm_os_type': str,
            'vm_scale_set_enabled': bool
        }

        self.attribute_map = {
            'compute_role': 'computeRole',
            'is_system_extension': 'isSystemExtension',
            'provisioning_state': 'provisioningState',
            'source_blob': 'sourceBlob',
            'support_multiple_extensions': 'supportMultipleExtensions',
            'vm_os_type': 'vmOsType',
            'vm_scale_set_enabled': 'vmScaleSetEnabled'
        }

        self._compute_role = compute_role
        self._is_system_extension = is_system_extension
        self._provisioning_state = provisioning_state
        self._source_blob = source_blob
        self._support_multiple_extensions = support_multiple_extensions
        self._vm_os_type = vm_os_type
        self._vm_scale_set_enabled = vm_scale_set_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VMExtensionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VMExtensionProperties of this VMExtensionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def compute_role(self):
        """Gets the compute_role of this VMExtensionProperties.

        Compute role

        :return: The compute_role of this VMExtensionProperties.
        :rtype: str
        """
        return self._compute_role

    @compute_role.setter
    def compute_role(self, compute_role):
        """Sets the compute_role of this VMExtensionProperties.

        Compute role

        :param compute_role: The compute_role of this VMExtensionProperties.
        :type compute_role: str
        """

        self._compute_role = compute_role

    @property
    def is_system_extension(self):
        """Gets the is_system_extension of this VMExtensionProperties.

        Indicates if the extension is for the system.

        :return: The is_system_extension of this VMExtensionProperties.
        :rtype: bool
        """
        return self._is_system_extension

    @is_system_extension.setter
    def is_system_extension(self, is_system_extension):
        """Sets the is_system_extension of this VMExtensionProperties.

        Indicates if the extension is for the system.

        :param is_system_extension: The is_system_extension of this VMExtensionProperties.
        :type is_system_extension: bool
        """

        self._is_system_extension = is_system_extension

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VMExtensionProperties.

        The provisioning state of the resource.

        :return: The provisioning_state of this VMExtensionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VMExtensionProperties.

        The provisioning state of the resource.

        :param provisioning_state: The provisioning_state of this VMExtensionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Creating", "Failed", "Succeeded", "Canceled"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def source_blob(self):
        """Gets the source_blob of this VMExtensionProperties.


        :return: The source_blob of this VMExtensionProperties.
        :rtype: AzureBlob
        """
        return self._source_blob

    @source_blob.setter
    def source_blob(self, source_blob):
        """Sets the source_blob of this VMExtensionProperties.


        :param source_blob: The source_blob of this VMExtensionProperties.
        :type source_blob: AzureBlob
        """

        self._source_blob = source_blob

    @property
    def support_multiple_extensions(self):
        """Gets the support_multiple_extensions of this VMExtensionProperties.

        True if supports multiple extensions.

        :return: The support_multiple_extensions of this VMExtensionProperties.
        :rtype: bool
        """
        return self._support_multiple_extensions

    @support_multiple_extensions.setter
    def support_multiple_extensions(self, support_multiple_extensions):
        """Sets the support_multiple_extensions of this VMExtensionProperties.

        True if supports multiple extensions.

        :param support_multiple_extensions: The support_multiple_extensions of this VMExtensionProperties.
        :type support_multiple_extensions: bool
        """

        self._support_multiple_extensions = support_multiple_extensions

    @property
    def vm_os_type(self):
        """Gets the vm_os_type of this VMExtensionProperties.

        Operating system type.

        :return: The vm_os_type of this VMExtensionProperties.
        :rtype: str
        """
        return self._vm_os_type

    @vm_os_type.setter
    def vm_os_type(self, vm_os_type):
        """Sets the vm_os_type of this VMExtensionProperties.

        Operating system type.

        :param vm_os_type: The vm_os_type of this VMExtensionProperties.
        :type vm_os_type: str
        """
        allowed_values = ["Unknown", "Windows", "Linux"]  # noqa: E501
        if vm_os_type not in allowed_values:
            raise ValueError(
                "Invalid value for `vm_os_type` ({0}), must be one of {1}"
                .format(vm_os_type, allowed_values)
            )

        self._vm_os_type = vm_os_type

    @property
    def vm_scale_set_enabled(self):
        """Gets the vm_scale_set_enabled of this VMExtensionProperties.

        Value indicating whether the extension is enabled for virtual machine scale set support.

        :return: The vm_scale_set_enabled of this VMExtensionProperties.
        :rtype: bool
        """
        return self._vm_scale_set_enabled

    @vm_scale_set_enabled.setter
    def vm_scale_set_enabled(self, vm_scale_set_enabled):
        """Sets the vm_scale_set_enabled of this VMExtensionProperties.

        Value indicating whether the extension is enabled for virtual machine scale set support.

        :param vm_scale_set_enabled: The vm_scale_set_enabled of this VMExtensionProperties.
        :type vm_scale_set_enabled: bool
        """

        self._vm_scale_set_enabled = vm_scale_set_enabled
