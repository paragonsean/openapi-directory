/*
 * Compute Admin Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.AzureBlob;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of a Virtual Machine Extension Image.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:23:03.513132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VMExtensionProperties {
  public static final String SERIALIZED_NAME_COMPUTE_ROLE = "computeRole";
  @SerializedName(SERIALIZED_NAME_COMPUTE_ROLE)
  private String computeRole;

  public static final String SERIALIZED_NAME_IS_SYSTEM_EXTENSION = "isSystemExtension";
  @SerializedName(SERIALIZED_NAME_IS_SYSTEM_EXTENSION)
  private Boolean isSystemExtension;

  /**
   * The provisioning state of the resource.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    CREATING("Creating"),
    
    FAILED("Failed"),
    
    SUCCEEDED("Succeeded"),
    
    CANCELED("Canceled");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SOURCE_BLOB = "sourceBlob";
  @SerializedName(SERIALIZED_NAME_SOURCE_BLOB)
  private AzureBlob sourceBlob;

  public static final String SERIALIZED_NAME_SUPPORT_MULTIPLE_EXTENSIONS = "supportMultipleExtensions";
  @SerializedName(SERIALIZED_NAME_SUPPORT_MULTIPLE_EXTENSIONS)
  private Boolean supportMultipleExtensions;

  /**
   * Operating system type.
   */
  @JsonAdapter(VmOsTypeEnum.Adapter.class)
  public enum VmOsTypeEnum {
    UNKNOWN("Unknown"),
    
    WINDOWS("Windows"),
    
    LINUX("Linux");

    private String value;

    VmOsTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VmOsTypeEnum fromValue(String value) {
      for (VmOsTypeEnum b : VmOsTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VmOsTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VmOsTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VmOsTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VmOsTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      VmOsTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VM_OS_TYPE = "vmOsType";
  @SerializedName(SERIALIZED_NAME_VM_OS_TYPE)
  private VmOsTypeEnum vmOsType;

  public static final String SERIALIZED_NAME_VM_SCALE_SET_ENABLED = "vmScaleSetEnabled";
  @SerializedName(SERIALIZED_NAME_VM_SCALE_SET_ENABLED)
  private Boolean vmScaleSetEnabled;

  public VMExtensionProperties() {
  }

  public VMExtensionProperties computeRole(String computeRole) {
    this.computeRole = computeRole;
    return this;
  }

  /**
   * Compute role
   * @return computeRole
   */
  @javax.annotation.Nullable
  public String getComputeRole() {
    return computeRole;
  }

  public void setComputeRole(String computeRole) {
    this.computeRole = computeRole;
  }


  public VMExtensionProperties isSystemExtension(Boolean isSystemExtension) {
    this.isSystemExtension = isSystemExtension;
    return this;
  }

  /**
   * Indicates if the extension is for the system.
   * @return isSystemExtension
   */
  @javax.annotation.Nullable
  public Boolean getIsSystemExtension() {
    return isSystemExtension;
  }

  public void setIsSystemExtension(Boolean isSystemExtension) {
    this.isSystemExtension = isSystemExtension;
  }


  public VMExtensionProperties provisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * The provisioning state of the resource.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningStateEnum provisioningState) {
    this.provisioningState = provisioningState;
  }


  public VMExtensionProperties sourceBlob(AzureBlob sourceBlob) {
    this.sourceBlob = sourceBlob;
    return this;
  }

  /**
   * Get sourceBlob
   * @return sourceBlob
   */
  @javax.annotation.Nullable
  public AzureBlob getSourceBlob() {
    return sourceBlob;
  }

  public void setSourceBlob(AzureBlob sourceBlob) {
    this.sourceBlob = sourceBlob;
  }


  public VMExtensionProperties supportMultipleExtensions(Boolean supportMultipleExtensions) {
    this.supportMultipleExtensions = supportMultipleExtensions;
    return this;
  }

  /**
   * True if supports multiple extensions.
   * @return supportMultipleExtensions
   */
  @javax.annotation.Nullable
  public Boolean getSupportMultipleExtensions() {
    return supportMultipleExtensions;
  }

  public void setSupportMultipleExtensions(Boolean supportMultipleExtensions) {
    this.supportMultipleExtensions = supportMultipleExtensions;
  }


  public VMExtensionProperties vmOsType(VmOsTypeEnum vmOsType) {
    this.vmOsType = vmOsType;
    return this;
  }

  /**
   * Operating system type.
   * @return vmOsType
   */
  @javax.annotation.Nullable
  public VmOsTypeEnum getVmOsType() {
    return vmOsType;
  }

  public void setVmOsType(VmOsTypeEnum vmOsType) {
    this.vmOsType = vmOsType;
  }


  public VMExtensionProperties vmScaleSetEnabled(Boolean vmScaleSetEnabled) {
    this.vmScaleSetEnabled = vmScaleSetEnabled;
    return this;
  }

  /**
   * Value indicating whether the extension is enabled for virtual machine scale set support.
   * @return vmScaleSetEnabled
   */
  @javax.annotation.Nullable
  public Boolean getVmScaleSetEnabled() {
    return vmScaleSetEnabled;
  }

  public void setVmScaleSetEnabled(Boolean vmScaleSetEnabled) {
    this.vmScaleSetEnabled = vmScaleSetEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VMExtensionProperties vmExtensionProperties = (VMExtensionProperties) o;
    return Objects.equals(this.computeRole, vmExtensionProperties.computeRole) &&
        Objects.equals(this.isSystemExtension, vmExtensionProperties.isSystemExtension) &&
        Objects.equals(this.provisioningState, vmExtensionProperties.provisioningState) &&
        Objects.equals(this.sourceBlob, vmExtensionProperties.sourceBlob) &&
        Objects.equals(this.supportMultipleExtensions, vmExtensionProperties.supportMultipleExtensions) &&
        Objects.equals(this.vmOsType, vmExtensionProperties.vmOsType) &&
        Objects.equals(this.vmScaleSetEnabled, vmExtensionProperties.vmScaleSetEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(computeRole, isSystemExtension, provisioningState, sourceBlob, supportMultipleExtensions, vmOsType, vmScaleSetEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VMExtensionProperties {\n");
    sb.append("    computeRole: ").append(toIndentedString(computeRole)).append("\n");
    sb.append("    isSystemExtension: ").append(toIndentedString(isSystemExtension)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    sourceBlob: ").append(toIndentedString(sourceBlob)).append("\n");
    sb.append("    supportMultipleExtensions: ").append(toIndentedString(supportMultipleExtensions)).append("\n");
    sb.append("    vmOsType: ").append(toIndentedString(vmOsType)).append("\n");
    sb.append("    vmScaleSetEnabled: ").append(toIndentedString(vmScaleSetEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("computeRole");
    openapiFields.add("isSystemExtension");
    openapiFields.add("provisioningState");
    openapiFields.add("sourceBlob");
    openapiFields.add("supportMultipleExtensions");
    openapiFields.add("vmOsType");
    openapiFields.add("vmScaleSetEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VMExtensionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VMExtensionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VMExtensionProperties is not found in the empty JSON string", VMExtensionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VMExtensionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VMExtensionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("computeRole") != null && !jsonObj.get("computeRole").isJsonNull()) && !jsonObj.get("computeRole").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `computeRole` to be a primitive type in the JSON string but got `%s`", jsonObj.get("computeRole").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // validate the optional field `sourceBlob`
      if (jsonObj.get("sourceBlob") != null && !jsonObj.get("sourceBlob").isJsonNull()) {
        AzureBlob.validateJsonElement(jsonObj.get("sourceBlob"));
      }
      if ((jsonObj.get("vmOsType") != null && !jsonObj.get("vmOsType").isJsonNull()) && !jsonObj.get("vmOsType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `vmOsType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("vmOsType").toString()));
      }
      // validate the optional field `vmOsType`
      if (jsonObj.get("vmOsType") != null && !jsonObj.get("vmOsType").isJsonNull()) {
        VmOsTypeEnum.validateJsonElement(jsonObj.get("vmOsType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VMExtensionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VMExtensionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VMExtensionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VMExtensionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<VMExtensionProperties>() {
           @Override
           public void write(JsonWriter out, VMExtensionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VMExtensionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VMExtensionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VMExtensionProperties
   * @throws IOException if the JSON string is invalid with respect to VMExtensionProperties
   */
  public static VMExtensionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VMExtensionProperties.class);
  }

  /**
   * Convert an instance of VMExtensionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

