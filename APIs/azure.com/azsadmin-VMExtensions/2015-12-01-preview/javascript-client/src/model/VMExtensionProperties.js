/**
 * Compute Admin Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AzureBlob from './AzureBlob';

/**
 * The VMExtensionProperties model module.
 * @module model/VMExtensionProperties
 * @version 2015-12-01-preview
 */
class VMExtensionProperties {
    /**
     * Constructs a new <code>VMExtensionProperties</code>.
     * Properties of a Virtual Machine Extension Image.
     * @alias module:model/VMExtensionProperties
     */
    constructor() { 
        
        VMExtensionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>VMExtensionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VMExtensionProperties} obj Optional instance to populate.
     * @return {module:model/VMExtensionProperties} The populated <code>VMExtensionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VMExtensionProperties();

            if (data.hasOwnProperty('computeRole')) {
                obj['computeRole'] = ApiClient.convertToType(data['computeRole'], 'String');
            }
            if (data.hasOwnProperty('isSystemExtension')) {
                obj['isSystemExtension'] = ApiClient.convertToType(data['isSystemExtension'], 'Boolean');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('sourceBlob')) {
                obj['sourceBlob'] = AzureBlob.constructFromObject(data['sourceBlob']);
            }
            if (data.hasOwnProperty('supportMultipleExtensions')) {
                obj['supportMultipleExtensions'] = ApiClient.convertToType(data['supportMultipleExtensions'], 'Boolean');
            }
            if (data.hasOwnProperty('vmOsType')) {
                obj['vmOsType'] = ApiClient.convertToType(data['vmOsType'], 'String');
            }
            if (data.hasOwnProperty('vmScaleSetEnabled')) {
                obj['vmScaleSetEnabled'] = ApiClient.convertToType(data['vmScaleSetEnabled'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VMExtensionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VMExtensionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['computeRole'] && !(typeof data['computeRole'] === 'string' || data['computeRole'] instanceof String)) {
            throw new Error("Expected the field `computeRole` to be a primitive type in the JSON string but got " + data['computeRole']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // validate the optional field `sourceBlob`
        if (data['sourceBlob']) { // data not null
          AzureBlob.validateJSON(data['sourceBlob']);
        }
        // ensure the json data is a string
        if (data['vmOsType'] && !(typeof data['vmOsType'] === 'string' || data['vmOsType'] instanceof String)) {
            throw new Error("Expected the field `vmOsType` to be a primitive type in the JSON string but got " + data['vmOsType']);
        }

        return true;
    }


}



/**
 * Compute role
 * @member {String} computeRole
 */
VMExtensionProperties.prototype['computeRole'] = undefined;

/**
 * Indicates if the extension is for the system.
 * @member {Boolean} isSystemExtension
 */
VMExtensionProperties.prototype['isSystemExtension'] = undefined;

/**
 * The provisioning state of the resource.
 * @member {module:model/VMExtensionProperties.ProvisioningStateEnum} provisioningState
 */
VMExtensionProperties.prototype['provisioningState'] = undefined;

/**
 * @member {module:model/AzureBlob} sourceBlob
 */
VMExtensionProperties.prototype['sourceBlob'] = undefined;

/**
 * True if supports multiple extensions.
 * @member {Boolean} supportMultipleExtensions
 */
VMExtensionProperties.prototype['supportMultipleExtensions'] = undefined;

/**
 * Operating system type.
 * @member {module:model/VMExtensionProperties.VmOsTypeEnum} vmOsType
 */
VMExtensionProperties.prototype['vmOsType'] = undefined;

/**
 * Value indicating whether the extension is enabled for virtual machine scale set support.
 * @member {Boolean} vmScaleSetEnabled
 */
VMExtensionProperties.prototype['vmScaleSetEnabled'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
VMExtensionProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled"
};


/**
 * Allowed values for the <code>vmOsType</code> property.
 * @enum {String}
 * @readonly
 */
VMExtensionProperties['VmOsTypeEnum'] = {

    /**
     * value: "Unknown"
     * @const
     */
    "Unknown": "Unknown",

    /**
     * value: "Windows"
     * @const
     */
    "Windows": "Windows",

    /**
     * value: "Linux"
     * @const
     */
    "Linux": "Linux"
};



export default VMExtensionProperties;

