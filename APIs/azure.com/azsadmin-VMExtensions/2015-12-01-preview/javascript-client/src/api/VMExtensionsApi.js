/**
 * Compute Admin Client
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2015-12-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import VMExtension from '../model/VMExtension';
import VMExtensionParameters from '../model/VMExtensionParameters';

/**
* VMExtensions service.
* @module api/VMExtensionsApi
* @version 2015-12-01-preview
*/
export default class VMExtensionsApi {

    /**
    * Constructs a new VMExtensionsApi. 
    * @alias module:api/VMExtensionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the vMExtensionsCreate operation.
     * @callback module:api/VMExtensionsApi~vMExtensionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMExtension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Virtual Machine Extension Image.
     * Create a Virtual Machine Extension Image with publisher, version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} location Location of the resource.
     * @param {String} publisher Name of the publisher.
     * @param {String} type Type of extension.
     * @param {String} version The version of the resource.
     * @param {String} apiVersion Client API Version.
     * @param {module:model/VMExtensionParameters} extension Virtual Machine Extension Image creation properties.
     * @param {module:api/VMExtensionsApi~vMExtensionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMExtension}
     */
    vMExtensionsCreate(subscriptionId, location, publisher, type, version, apiVersion, extension, callback) {
      let postBody = extension;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMExtensionsCreate");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling vMExtensionsCreate");
      }
      // verify the required parameter 'publisher' is set
      if (publisher === undefined || publisher === null) {
        throw new Error("Missing the required parameter 'publisher' when calling vMExtensionsCreate");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling vMExtensionsCreate");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling vMExtensionsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMExtensionsCreate");
      }
      // verify the required parameter 'extension' is set
      if (extension === undefined || extension === null) {
        throw new Error("Missing the required parameter 'extension' when calling vMExtensionsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location,
        'publisher': publisher,
        'type': type,
        'version': version
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = VMExtension;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension/publishers/{publisher}/types/{type}/versions/{version}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMExtensionsDelete operation.
     * @callback module:api/VMExtensionsApi~vMExtensionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a Virtual Machine Extension Image.
     * Deletes specified Virtual Machine Extension Image.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} location Location of the resource.
     * @param {String} publisher Name of the publisher.
     * @param {String} type Type of extension.
     * @param {String} version The version of the resource.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/VMExtensionsApi~vMExtensionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    vMExtensionsDelete(subscriptionId, location, publisher, type, version, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMExtensionsDelete");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling vMExtensionsDelete");
      }
      // verify the required parameter 'publisher' is set
      if (publisher === undefined || publisher === null) {
        throw new Error("Missing the required parameter 'publisher' when calling vMExtensionsDelete");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling vMExtensionsDelete");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling vMExtensionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMExtensionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location,
        'publisher': publisher,
        'type': type,
        'version': version
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension/publishers/{publisher}/types/{type}/versions/{version}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMExtensionsGet operation.
     * @callback module:api/VMExtensionsApi~vMExtensionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VMExtension} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns requested Virtual Machine Extension Image.
     * Returns requested Virtual Machine Extension Image matching publisher, type, version.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} location Location of the resource.
     * @param {String} publisher Name of the publisher.
     * @param {String} type Type of extension.
     * @param {String} version The version of the resource.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/VMExtensionsApi~vMExtensionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VMExtension}
     */
    vMExtensionsGet(subscriptionId, location, publisher, type, version, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMExtensionsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling vMExtensionsGet");
      }
      // verify the required parameter 'publisher' is set
      if (publisher === undefined || publisher === null) {
        throw new Error("Missing the required parameter 'publisher' when calling vMExtensionsGet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling vMExtensionsGet");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling vMExtensionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMExtensionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location,
        'publisher': publisher,
        'type': type,
        'version': version
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VMExtension;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension/publishers/{publisher}/types/{type}/versions/{version}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the vMExtensionsList operation.
     * @callback module:api/VMExtensionsApi~vMExtensionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/VMExtension>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a list of all Virtual Machine Extension Images.
     * List of all Virtual Machine Extension Images for the current location are returned.
     * @param {String} subscriptionId Subscription credentials that uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} location Location of the resource.
     * @param {String} apiVersion Client API Version.
     * @param {module:api/VMExtensionsApi~vMExtensionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/VMExtension>}
     */
    vMExtensionsList(subscriptionId, location, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling vMExtensionsList");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling vMExtensionsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling vMExtensionsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'location': location
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [VMExtension];
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Compute.Admin/locations/{location}/artifactTypes/VMExtension', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
