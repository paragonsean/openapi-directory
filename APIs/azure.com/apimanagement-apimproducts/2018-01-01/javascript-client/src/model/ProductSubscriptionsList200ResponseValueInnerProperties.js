/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the product’s APIs.
 *
 * The version of the OpenAPI document: 2018-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductSubscriptionsList200ResponseValueInnerProperties model module.
 * @module model/ProductSubscriptionsList200ResponseValueInnerProperties
 * @version 2018-01-01
 */
class ProductSubscriptionsList200ResponseValueInnerProperties {
    /**
     * Constructs a new <code>ProductSubscriptionsList200ResponseValueInnerProperties</code>.
     * Subscription details.
     * @alias module:model/ProductSubscriptionsList200ResponseValueInnerProperties
     * @param primaryKey {String} Subscription primary key.
     * @param productId {String} The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.
     * @param secondaryKey {String} Subscription secondary key.
     * @param state {module:model/ProductSubscriptionsList200ResponseValueInnerProperties.StateEnum} Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
     * @param userId {String} The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.
     */
    constructor(primaryKey, productId, secondaryKey, state, userId) { 
        
        ProductSubscriptionsList200ResponseValueInnerProperties.initialize(this, primaryKey, productId, secondaryKey, state, userId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, primaryKey, productId, secondaryKey, state, userId) { 
        obj['primaryKey'] = primaryKey;
        obj['productId'] = productId;
        obj['secondaryKey'] = secondaryKey;
        obj['state'] = state;
        obj['userId'] = userId;
    }

    /**
     * Constructs a <code>ProductSubscriptionsList200ResponseValueInnerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductSubscriptionsList200ResponseValueInnerProperties} obj Optional instance to populate.
     * @return {module:model/ProductSubscriptionsList200ResponseValueInnerProperties} The populated <code>ProductSubscriptionsList200ResponseValueInnerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductSubscriptionsList200ResponseValueInnerProperties();

            if (data.hasOwnProperty('createdDate')) {
                obj['createdDate'] = ApiClient.convertToType(data['createdDate'], 'Date');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('endDate')) {
                obj['endDate'] = ApiClient.convertToType(data['endDate'], 'Date');
            }
            if (data.hasOwnProperty('expirationDate')) {
                obj['expirationDate'] = ApiClient.convertToType(data['expirationDate'], 'Date');
            }
            if (data.hasOwnProperty('notificationDate')) {
                obj['notificationDate'] = ApiClient.convertToType(data['notificationDate'], 'Date');
            }
            if (data.hasOwnProperty('primaryKey')) {
                obj['primaryKey'] = ApiClient.convertToType(data['primaryKey'], 'String');
            }
            if (data.hasOwnProperty('productId')) {
                obj['productId'] = ApiClient.convertToType(data['productId'], 'String');
            }
            if (data.hasOwnProperty('secondaryKey')) {
                obj['secondaryKey'] = ApiClient.convertToType(data['secondaryKey'], 'String');
            }
            if (data.hasOwnProperty('startDate')) {
                obj['startDate'] = ApiClient.convertToType(data['startDate'], 'Date');
            }
            if (data.hasOwnProperty('state')) {
                obj['state'] = ApiClient.convertToType(data['state'], 'String');
            }
            if (data.hasOwnProperty('stateComment')) {
                obj['stateComment'] = ApiClient.convertToType(data['stateComment'], 'String');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductSubscriptionsList200ResponseValueInnerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductSubscriptionsList200ResponseValueInnerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProductSubscriptionsList200ResponseValueInnerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['primaryKey'] && !(typeof data['primaryKey'] === 'string' || data['primaryKey'] instanceof String)) {
            throw new Error("Expected the field `primaryKey` to be a primitive type in the JSON string but got " + data['primaryKey']);
        }
        // ensure the json data is a string
        if (data['productId'] && !(typeof data['productId'] === 'string' || data['productId'] instanceof String)) {
            throw new Error("Expected the field `productId` to be a primitive type in the JSON string but got " + data['productId']);
        }
        // ensure the json data is a string
        if (data['secondaryKey'] && !(typeof data['secondaryKey'] === 'string' || data['secondaryKey'] instanceof String)) {
            throw new Error("Expected the field `secondaryKey` to be a primitive type in the JSON string but got " + data['secondaryKey']);
        }
        // ensure the json data is a string
        if (data['state'] && !(typeof data['state'] === 'string' || data['state'] instanceof String)) {
            throw new Error("Expected the field `state` to be a primitive type in the JSON string but got " + data['state']);
        }
        // ensure the json data is a string
        if (data['stateComment'] && !(typeof data['stateComment'] === 'string' || data['stateComment'] instanceof String)) {
            throw new Error("Expected the field `stateComment` to be a primitive type in the JSON string but got " + data['stateComment']);
        }
        // ensure the json data is a string
        if (data['userId'] && !(typeof data['userId'] === 'string' || data['userId'] instanceof String)) {
            throw new Error("Expected the field `userId` to be a primitive type in the JSON string but got " + data['userId']);
        }

        return true;
    }


}

ProductSubscriptionsList200ResponseValueInnerProperties.RequiredProperties = ["primaryKey", "productId", "secondaryKey", "state", "userId"];

/**
 * Subscription creation date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} createdDate
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['createdDate'] = undefined;

/**
 * The name of the subscription, or null if the subscription has no name.
 * @member {String} displayName
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['displayName'] = undefined;

/**
 * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} endDate
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['endDate'] = undefined;

/**
 * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} expirationDate
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['expirationDate'] = undefined;

/**
 * Upcoming subscription expiration notification date. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} notificationDate
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['notificationDate'] = undefined;

/**
 * Subscription primary key.
 * @member {String} primaryKey
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['primaryKey'] = undefined;

/**
 * The product resource identifier of the subscribed product. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.
 * @member {String} productId
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['productId'] = undefined;

/**
 * Subscription secondary key.
 * @member {String} secondaryKey
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['secondaryKey'] = undefined;

/**
 * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the `state` property. The date conforms to the following format: `yyyy-MM-ddTHH:mm:ssZ` as specified by the ISO 8601 standard. 
 * @member {Date} startDate
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['startDate'] = undefined;

/**
 * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
 * @member {module:model/ProductSubscriptionsList200ResponseValueInnerProperties.StateEnum} state
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['state'] = undefined;

/**
 * Optional subscription comment added by an administrator.
 * @member {String} stateComment
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['stateComment'] = undefined;

/**
 * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{uid} where {uid} is a user identifier.
 * @member {String} userId
 */
ProductSubscriptionsList200ResponseValueInnerProperties.prototype['userId'] = undefined;





/**
 * Allowed values for the <code>state</code> property.
 * @enum {String}
 * @readonly
 */
ProductSubscriptionsList200ResponseValueInnerProperties['StateEnum'] = {

    /**
     * value: "suspended"
     * @const
     */
    "suspended": "suspended",

    /**
     * value: "active"
     * @const
     */
    "active": "active",

    /**
     * value: "expired"
     * @const
     */
    "expired": "expired",

    /**
     * value: "submitted"
     * @const
     */
    "submitted": "submitted",

    /**
     * value: "rejected"
     * @const
     */
    "rejected": "rejected",

    /**
     * value: "cancelled"
     * @const
     */
    "cancelled": "cancelled"
};



export default ProductSubscriptionsList200ResponseValueInnerProperties;

