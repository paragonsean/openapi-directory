/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductListByServiceDefaultResponse;
import org.openapitools.client.model.TagGetByProduct200Response;
import org.openapitools.client.model.TagListByProduct200Response;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductTagApi
 */
@Disabled
public class ProductTagApiTest {

    private final ProductTagApi api = new ProductTagApi();

    /**
     * Assign tag to the Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagAssignToProductTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String tagId = null;
        String apiVersion = null;
        String subscriptionId = null;
        TagGetByProduct200Response response = api.tagAssignToProduct(resourceGroupName, serviceName, productId, tagId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Detach the tag from the Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagDetachFromProductTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String tagId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.tagDetachFromProduct(resourceGroupName, serviceName, productId, tagId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Get tag associated with the Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagGetByProductTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String tagId = null;
        String apiVersion = null;
        String subscriptionId = null;
        TagGetByProduct200Response response = api.tagGetByProduct(resourceGroupName, serviceName, productId, tagId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state version of the tag specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagGetEntityStateByProductTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String tagId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.tagGetEntityStateByProduct(resourceGroupName, serviceName, productId, tagId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all Tags associated with the Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tagListByProductTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        TagListByProduct200Response response = api.tagListByProduct(resourceGroupName, serviceName, productId, apiVersion, subscriptionId, $filter, $top, $skip);
        // TODO: test validations
    }

}
