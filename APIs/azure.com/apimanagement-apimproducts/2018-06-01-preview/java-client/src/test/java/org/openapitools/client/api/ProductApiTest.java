/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductGet200Response;
import org.openapitools.client.model.ProductListByService200Response;
import org.openapitools.client.model.ProductListByServiceDefaultResponse;
import org.openapitools.client.model.ProductUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductApi
 */
@Disabled
public class ProductApiTest {

    private final ProductApi api = new ProductApi();

    /**
     * Creates or Updates a product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ProductGet200Response parameters = null;
        String ifMatch = null;
        ProductGet200Response response = api.productCreateOrUpdate(resourceGroupName, serviceName, productId, apiVersion, subscriptionId, parameters, ifMatch);
        // TODO: test validations
    }

    /**
     * Delete product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        Boolean deleteSubscriptions = null;
        api.productDelete(resourceGroupName, serviceName, productId, ifMatch, apiVersion, subscriptionId, deleteSubscriptions);
        // TODO: test validations
    }

    /**
     * Gets the details of the product specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ProductGet200Response response = api.productGet(resourceGroupName, serviceName, productId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the entity state (Etag) version of the product specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productGetEntityTagTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.productGetEntityTag(resourceGroupName, serviceName, productId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of products in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean expandGroups = null;
        String tags = null;
        ProductListByService200Response response = api.productListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip, expandGroups, tags);
        // TODO: test validations
    }

    /**
     * Update existing product details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        ProductUpdateRequest parameters = null;
        api.productUpdate(resourceGroupName, serviceName, productId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
