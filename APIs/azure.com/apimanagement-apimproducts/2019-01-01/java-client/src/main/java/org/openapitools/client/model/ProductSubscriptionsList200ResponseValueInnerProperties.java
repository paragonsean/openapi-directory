/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the product’s APIs.
 *
 * The version of the OpenAPI document: 2019-01-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Subscription details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:22:22.149132-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProductSubscriptionsList200ResponseValueInnerProperties {
  public static final String SERIALIZED_NAME_ALLOW_TRACING = "allowTracing";
  @SerializedName(SERIALIZED_NAME_ALLOW_TRACING)
  private Boolean allowTracing;

  public static final String SERIALIZED_NAME_CREATED_DATE = "createdDate";
  @SerializedName(SERIALIZED_NAME_CREATED_DATE)
  private OffsetDateTime createdDate;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_EXPIRATION_DATE = "expirationDate";
  @SerializedName(SERIALIZED_NAME_EXPIRATION_DATE)
  private OffsetDateTime expirationDate;

  public static final String SERIALIZED_NAME_NOTIFICATION_DATE = "notificationDate";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_DATE)
  private OffsetDateTime notificationDate;

  public static final String SERIALIZED_NAME_OWNER_ID = "ownerId";
  @SerializedName(SERIALIZED_NAME_OWNER_ID)
  private String ownerId;

  public static final String SERIALIZED_NAME_PRIMARY_KEY = "primaryKey";
  @SerializedName(SERIALIZED_NAME_PRIMARY_KEY)
  private String primaryKey;

  public static final String SERIALIZED_NAME_SCOPE = "scope";
  @SerializedName(SERIALIZED_NAME_SCOPE)
  private String scope;

  public static final String SERIALIZED_NAME_SECONDARY_KEY = "secondaryKey";
  @SerializedName(SERIALIZED_NAME_SECONDARY_KEY)
  private String secondaryKey;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   */
  @JsonAdapter(StateEnum.Adapter.class)
  public enum StateEnum {
    SUSPENDED("suspended"),
    
    ACTIVE("active"),
    
    EXPIRED("expired"),
    
    SUBMITTED("submitted"),
    
    REJECTED("rejected"),
    
    CANCELLED("cancelled");

    private String value;

    StateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StateEnum fromValue(String value) {
      for (StateEnum b : StateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private StateEnum state;

  public static final String SERIALIZED_NAME_STATE_COMMENT = "stateComment";
  @SerializedName(SERIALIZED_NAME_STATE_COMMENT)
  private String stateComment;

  public ProductSubscriptionsList200ResponseValueInnerProperties() {
  }

  public ProductSubscriptionsList200ResponseValueInnerProperties(
     OffsetDateTime createdDate
  ) {
    this();
    this.createdDate = createdDate;
  }

  public ProductSubscriptionsList200ResponseValueInnerProperties allowTracing(Boolean allowTracing) {
    this.allowTracing = allowTracing;
    return this;
  }

  /**
   * Determines whether tracing is enabled
   * @return allowTracing
   */
  @javax.annotation.Nullable
  public Boolean getAllowTracing() {
    return allowTracing;
  }

  public void setAllowTracing(Boolean allowTracing) {
    this.allowTracing = allowTracing;
  }


  /**
   * Subscription creation date. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return createdDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedDate() {
    return createdDate;
  }



  public ProductSubscriptionsList200ResponseValueInnerProperties displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * The name of the subscription, or null if the subscription has no name.
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties endDate(OffsetDateTime endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Date when subscription was cancelled or expired. The setting is for audit purposes only and the subscription is not automatically cancelled. The subscription lifecycle can be managed by using the &#x60;state&#x60; property. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return endDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndDate() {
    return endDate;
  }

  public void setEndDate(OffsetDateTime endDate) {
    this.endDate = endDate;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties expirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
    return this;
  }

  /**
   * Subscription expiration date. The setting is for audit purposes only and the subscription is not automatically expired. The subscription lifecycle can be managed by using the &#x60;state&#x60; property. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return expirationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpirationDate() {
    return expirationDate;
  }

  public void setExpirationDate(OffsetDateTime expirationDate) {
    this.expirationDate = expirationDate;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties notificationDate(OffsetDateTime notificationDate) {
    this.notificationDate = notificationDate;
    return this;
  }

  /**
   * Upcoming subscription expiration notification date. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return notificationDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getNotificationDate() {
    return notificationDate;
  }

  public void setNotificationDate(OffsetDateTime notificationDate) {
    this.notificationDate = notificationDate;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties ownerId(String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  /**
   * The user resource identifier of the subscription owner. The value is a valid relative URL in the format of /users/{userId} where {userId} is a user identifier.
   * @return ownerId
   */
  @javax.annotation.Nullable
  public String getOwnerId() {
    return ownerId;
  }

  public void setOwnerId(String ownerId) {
    this.ownerId = ownerId;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties primaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
    return this;
  }

  /**
   * Subscription primary key.
   * @return primaryKey
   */
  @javax.annotation.Nonnull
  public String getPrimaryKey() {
    return primaryKey;
  }

  public void setPrimaryKey(String primaryKey) {
    this.primaryKey = primaryKey;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties scope(String scope) {
    this.scope = scope;
    return this;
  }

  /**
   * Scope like /products/{productId} or /apis or /apis/{apiId}.
   * @return scope
   */
  @javax.annotation.Nonnull
  public String getScope() {
    return scope;
  }

  public void setScope(String scope) {
    this.scope = scope;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties secondaryKey(String secondaryKey) {
    this.secondaryKey = secondaryKey;
    return this;
  }

  /**
   * Subscription secondary key.
   * @return secondaryKey
   */
  @javax.annotation.Nonnull
  public String getSecondaryKey() {
    return secondaryKey;
  }

  public void setSecondaryKey(String secondaryKey) {
    this.secondaryKey = secondaryKey;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties startDate(OffsetDateTime startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Subscription activation date. The setting is for audit purposes only and the subscription is not automatically activated. The subscription lifecycle can be managed by using the &#x60;state&#x60; property. The date conforms to the following format: &#x60;yyyy-MM-ddTHH:mm:ssZ&#x60; as specified by the ISO 8601 standard. 
   * @return startDate
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartDate() {
    return startDate;
  }

  public void setStartDate(OffsetDateTime startDate) {
    this.startDate = startDate;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties state(StateEnum state) {
    this.state = state;
    return this;
  }

  /**
   * Subscription state. Possible states are * active – the subscription is active, * suspended – the subscription is blocked, and the subscriber cannot call any APIs of the product, * submitted – the subscription request has been made by the developer, but has not yet been approved or rejected, * rejected – the subscription request has been denied by an administrator, * cancelled – the subscription has been cancelled by the developer or administrator, * expired – the subscription reached its expiration date and was deactivated.
   * @return state
   */
  @javax.annotation.Nonnull
  public StateEnum getState() {
    return state;
  }

  public void setState(StateEnum state) {
    this.state = state;
  }


  public ProductSubscriptionsList200ResponseValueInnerProperties stateComment(String stateComment) {
    this.stateComment = stateComment;
    return this;
  }

  /**
   * Optional subscription comment added by an administrator.
   * @return stateComment
   */
  @javax.annotation.Nullable
  public String getStateComment() {
    return stateComment;
  }

  public void setStateComment(String stateComment) {
    this.stateComment = stateComment;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProductSubscriptionsList200ResponseValueInnerProperties productSubscriptionsList200ResponseValueInnerProperties = (ProductSubscriptionsList200ResponseValueInnerProperties) o;
    return Objects.equals(this.allowTracing, productSubscriptionsList200ResponseValueInnerProperties.allowTracing) &&
        Objects.equals(this.createdDate, productSubscriptionsList200ResponseValueInnerProperties.createdDate) &&
        Objects.equals(this.displayName, productSubscriptionsList200ResponseValueInnerProperties.displayName) &&
        Objects.equals(this.endDate, productSubscriptionsList200ResponseValueInnerProperties.endDate) &&
        Objects.equals(this.expirationDate, productSubscriptionsList200ResponseValueInnerProperties.expirationDate) &&
        Objects.equals(this.notificationDate, productSubscriptionsList200ResponseValueInnerProperties.notificationDate) &&
        Objects.equals(this.ownerId, productSubscriptionsList200ResponseValueInnerProperties.ownerId) &&
        Objects.equals(this.primaryKey, productSubscriptionsList200ResponseValueInnerProperties.primaryKey) &&
        Objects.equals(this.scope, productSubscriptionsList200ResponseValueInnerProperties.scope) &&
        Objects.equals(this.secondaryKey, productSubscriptionsList200ResponseValueInnerProperties.secondaryKey) &&
        Objects.equals(this.startDate, productSubscriptionsList200ResponseValueInnerProperties.startDate) &&
        Objects.equals(this.state, productSubscriptionsList200ResponseValueInnerProperties.state) &&
        Objects.equals(this.stateComment, productSubscriptionsList200ResponseValueInnerProperties.stateComment);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowTracing, createdDate, displayName, endDate, expirationDate, notificationDate, ownerId, primaryKey, scope, secondaryKey, startDate, state, stateComment);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProductSubscriptionsList200ResponseValueInnerProperties {\n");
    sb.append("    allowTracing: ").append(toIndentedString(allowTracing)).append("\n");
    sb.append("    createdDate: ").append(toIndentedString(createdDate)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    expirationDate: ").append(toIndentedString(expirationDate)).append("\n");
    sb.append("    notificationDate: ").append(toIndentedString(notificationDate)).append("\n");
    sb.append("    ownerId: ").append(toIndentedString(ownerId)).append("\n");
    sb.append("    primaryKey: ").append(toIndentedString(primaryKey)).append("\n");
    sb.append("    scope: ").append(toIndentedString(scope)).append("\n");
    sb.append("    secondaryKey: ").append(toIndentedString(secondaryKey)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    stateComment: ").append(toIndentedString(stateComment)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowTracing");
    openapiFields.add("createdDate");
    openapiFields.add("displayName");
    openapiFields.add("endDate");
    openapiFields.add("expirationDate");
    openapiFields.add("notificationDate");
    openapiFields.add("ownerId");
    openapiFields.add("primaryKey");
    openapiFields.add("scope");
    openapiFields.add("secondaryKey");
    openapiFields.add("startDate");
    openapiFields.add("state");
    openapiFields.add("stateComment");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("primaryKey");
    openapiRequiredFields.add("scope");
    openapiRequiredFields.add("secondaryKey");
    openapiRequiredFields.add("state");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProductSubscriptionsList200ResponseValueInnerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProductSubscriptionsList200ResponseValueInnerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProductSubscriptionsList200ResponseValueInnerProperties is not found in the empty JSON string", ProductSubscriptionsList200ResponseValueInnerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProductSubscriptionsList200ResponseValueInnerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProductSubscriptionsList200ResponseValueInnerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProductSubscriptionsList200ResponseValueInnerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if ((jsonObj.get("ownerId") != null && !jsonObj.get("ownerId").isJsonNull()) && !jsonObj.get("ownerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ownerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ownerId").toString()));
      }
      if (!jsonObj.get("primaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryKey").toString()));
      }
      if (!jsonObj.get("scope").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scope` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scope").toString()));
      }
      if (!jsonObj.get("secondaryKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secondaryKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secondaryKey").toString()));
      }
      if (!jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      // validate the required field `state`
      StateEnum.validateJsonElement(jsonObj.get("state"));
      if ((jsonObj.get("stateComment") != null && !jsonObj.get("stateComment").isJsonNull()) && !jsonObj.get("stateComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateComment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProductSubscriptionsList200ResponseValueInnerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProductSubscriptionsList200ResponseValueInnerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProductSubscriptionsList200ResponseValueInnerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProductSubscriptionsList200ResponseValueInnerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProductSubscriptionsList200ResponseValueInnerProperties>() {
           @Override
           public void write(JsonWriter out, ProductSubscriptionsList200ResponseValueInnerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProductSubscriptionsList200ResponseValueInnerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProductSubscriptionsList200ResponseValueInnerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProductSubscriptionsList200ResponseValueInnerProperties
   * @throws IOException if the JSON string is invalid with respect to ProductSubscriptionsList200ResponseValueInnerProperties
   */
  public static ProductSubscriptionsList200ResponseValueInnerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProductSubscriptionsList200ResponseValueInnerProperties.class);
  }

  /**
   * Convert an instance of ProductSubscriptionsList200ResponseValueInnerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

