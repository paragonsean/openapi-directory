# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductContract(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, approval_required: bool=None, description: str=None, id: str=None, name: str=None, state: str='NotPublished', subscription_required: bool=True, subscriptions_limit: int=None, terms: str=None):
        """ProductContract - a model defined in OpenAPI

        :param approval_required: The approval_required of this ProductContract.
        :param description: The description of this ProductContract.
        :param id: The id of this ProductContract.
        :param name: The name of this ProductContract.
        :param state: The state of this ProductContract.
        :param subscription_required: The subscription_required of this ProductContract.
        :param subscriptions_limit: The subscriptions_limit of this ProductContract.
        :param terms: The terms of this ProductContract.
        """
        self.openapi_types = {
            'approval_required': bool,
            'description': str,
            'id': str,
            'name': str,
            'state': str,
            'subscription_required': bool,
            'subscriptions_limit': int,
            'terms': str
        }

        self.attribute_map = {
            'approval_required': 'approvalRequired',
            'description': 'description',
            'id': 'id',
            'name': 'name',
            'state': 'state',
            'subscription_required': 'subscriptionRequired',
            'subscriptions_limit': 'subscriptionsLimit',
            'terms': 'terms'
        }

        self._approval_required = approval_required
        self._description = description
        self._id = id
        self._name = name
        self._state = state
        self._subscription_required = subscription_required
        self._subscriptions_limit = subscriptions_limit
        self._terms = terms

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductContract':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductContract of this ProductContract.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def approval_required(self):
        """Gets the approval_required of this ProductContract.

        whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of true.

        :return: The approval_required of this ProductContract.
        :rtype: bool
        """
        return self._approval_required

    @approval_required.setter
    def approval_required(self, approval_required):
        """Sets the approval_required of this ProductContract.

        whether subscription approval is required. If false, new subscriptions will be approved automatically enabling developers to call the product’s APIs immediately after subscribing. If true, administrators must manually approve the subscription before the developer can any of the product’s APIs. Can be present only if subscriptionRequired property is present and has a value of true.

        :param approval_required: The approval_required of this ProductContract.
        :type approval_required: bool
        """

        self._approval_required = approval_required

    @property
    def description(self):
        """Gets the description of this ProductContract.

        Product description. May include HTML formatting tags.

        :return: The description of this ProductContract.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductContract.

        Product description. May include HTML formatting tags.

        :param description: The description of this ProductContract.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")
        if description is not None and len(description) < 1:
            raise ValueError("Invalid value for `description`, length must be greater than or equal to `1`")

        self._description = description

    @property
    def id(self):
        """Gets the id of this ProductContract.

        Uniquely identifies the product within the current API Management service instance. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.

        :return: The id of this ProductContract.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductContract.

        Uniquely identifies the product within the current API Management service instance. The value is a valid relative URL in the format of /products/{productId} where {productId} is a product identifier.

        :param id: The id of this ProductContract.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductContract.

        Product name.

        :return: The name of this ProductContract.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductContract.

        Product name.

        :param name: The name of this ProductContract.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def state(self):
        """Gets the state of this ProductContract.

        whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is NotPublished.

        :return: The state of this ProductContract.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ProductContract.

        whether product is published or not. Published products are discoverable by users of developer portal. Non published products are visible only to administrators. Default state of Product is NotPublished.

        :param state: The state of this ProductContract.
        :type state: str
        """
        allowed_values = ["NotPublished", "Published"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def subscription_required(self):
        """Gets the subscription_required of this ProductContract.

        Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.

        :return: The subscription_required of this ProductContract.
        :rtype: bool
        """
        return self._subscription_required

    @subscription_required.setter
    def subscription_required(self, subscription_required):
        """Sets the subscription_required of this ProductContract.

        Whether a product subscription is required for accessing APIs included in this product. If true, the product is referred to as \"protected\" and a valid subscription key is required for a request to an API included in the product to succeed. If false, the product is referred to as \"open\" and requests to an API included in the product can be made without a subscription key. If property is omitted when creating a new product it's value is assumed to be true.

        :param subscription_required: The subscription_required of this ProductContract.
        :type subscription_required: bool
        """

        self._subscription_required = subscription_required

    @property
    def subscriptions_limit(self):
        """Gets the subscriptions_limit of this ProductContract.

        Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of true.

        :return: The subscriptions_limit of this ProductContract.
        :rtype: int
        """
        return self._subscriptions_limit

    @subscriptions_limit.setter
    def subscriptions_limit(self, subscriptions_limit):
        """Sets the subscriptions_limit of this ProductContract.

        Whether the number of subscriptions a user can have to this product at the same time. Set to null or omit to allow unlimited per user subscriptions. Can be present only if subscriptionRequired property is present and has a value of true.

        :param subscriptions_limit: The subscriptions_limit of this ProductContract.
        :type subscriptions_limit: int
        """

        self._subscriptions_limit = subscriptions_limit

    @property
    def terms(self):
        """Gets the terms of this ProductContract.

        Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.

        :return: The terms of this ProductContract.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ProductContract.

        Product terms of use. Developers trying to subscribe to the product will be presented and required to accept these terms before they can complete the subscription process.

        :param terms: The terms of this ProductContract.
        :type terms: str
        """

        self._terms = terms
