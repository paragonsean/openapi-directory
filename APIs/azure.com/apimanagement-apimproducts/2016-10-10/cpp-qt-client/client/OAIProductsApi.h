/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2016-10-10
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductCollection.h"
#include "OAIProductContract.h"
#include "OAIProductUpdateParameters.h"
#include "OAIProducts_ListByService_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIProductContract [required]
    */
    virtual void productsCreateOrUpdate(const QString &resource_group_name, const QString &service_name, const QString &product_id, const QString &api_version, const QString &subscription_id, const OAIProductContract &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  delete_subscriptions bool [optional]
    */
    virtual void productsDelete(const QString &resource_group_name, const QString &service_name, const QString &product_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<bool> &delete_subscriptions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void productsGet(const QString &resource_group_name, const QString &service_name, const QString &product_id, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  expand_groups bool [optional]
    */
    virtual void productsListByService(const QString &resource_group_name, const QString &service_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &expand_groups = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  service_name QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIProductUpdateParameters [required]
    */
    virtual void productsUpdate(const QString &resource_group_name, const QString &service_name, const QString &product_id, const QString &if_match, const QString &api_version, const QString &subscription_id, const OAIProductUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void productsDeleteCallback(OAIHttpRequestWorker *worker);
    void productsGetCallback(OAIHttpRequestWorker *worker);
    void productsListByServiceCallback(OAIHttpRequestWorker *worker);
    void productsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productsCreateOrUpdateSignal();
    void productsDeleteSignal();
    void productsGetSignal(OAIProductContract summary);
    void productsListByServiceSignal(OAIProductCollection summary);
    void productsUpdateSignal();


    void productsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker);
    void productsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void productsGetSignalFull(OAIHttpRequestWorker *worker, OAIProductContract summary);
    void productsListByServiceSignalFull(OAIHttpRequestWorker *worker, OAIProductCollection summary);
    void productsUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productsCreateOrUpdateSignalError() instead")
    void productsCreateOrUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsCreateOrUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsDeleteSignalError() instead")
    void productsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetSignalError() instead")
    void productsGetSignalE(OAIProductContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSignalError(OAIProductContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByServiceSignalError() instead")
    void productsListByServiceSignalE(OAIProductCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByServiceSignalError(OAIProductCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsUpdateSignalError() instead")
    void productsUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productsUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productsCreateOrUpdateSignalErrorFull() instead")
    void productsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsDeleteSignalErrorFull() instead")
    void productsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsGetSignalErrorFull() instead")
    void productsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsListByServiceSignalErrorFull() instead")
    void productsListByServiceSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsListByServiceSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productsUpdateSignalErrorFull() instead")
    void productsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
