/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2016-10-10
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductCollection;
import org.openapitools.client.model.ProductContract;
import org.openapitools.client.model.ProductUpdateParameters;
import org.openapitools.client.model.ProductsListByServiceDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductsApi
 */
@Disabled
public class ProductsApiTest {

    private final ProductsApi api = new ProductsApi();

    /**
     * Creates or Updates a product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ProductContract parameters = null;
        api.productsCreateOrUpdate(resourceGroupName, serviceName, productId, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Delete product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        Boolean deleteSubscriptions = null;
        api.productsDelete(resourceGroupName, serviceName, productId, ifMatch, apiVersion, subscriptionId, deleteSubscriptions);
        // TODO: test validations
    }

    /**
     * Gets the details of the product specified by its identifier.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsGetTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String apiVersion = null;
        String subscriptionId = null;
        ProductContract response = api.productsGet(resourceGroupName, serviceName, productId, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists a collection of products in the specified service instance.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsListByServiceTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $filter = null;
        Integer $top = null;
        Integer $skip = null;
        Boolean expandGroups = null;
        ProductCollection response = api.productsListByService(resourceGroupName, serviceName, apiVersion, subscriptionId, $filter, $top, $skip, expandGroups);
        // TODO: test validations
    }

    /**
     * Update product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productsUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String serviceName = null;
        String productId = null;
        String ifMatch = null;
        String apiVersion = null;
        String subscriptionId = null;
        ProductUpdateParameters parameters = null;
        api.productsUpdate(resourceGroupName, serviceName, productId, ifMatch, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

}
