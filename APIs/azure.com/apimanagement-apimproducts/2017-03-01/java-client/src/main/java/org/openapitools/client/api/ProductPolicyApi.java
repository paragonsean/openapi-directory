/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ProductListDefaultResponse;
import org.openapitools.client.model.ProductPolicyListByProduct200Response;
import org.openapitools.client.model.ProductPolicyListByProduct200ResponseValueInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ProductPolicyApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ProductPolicyApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ProductPolicyApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for productPolicyCreateOrUpdate
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The policy contents to apply. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product policy configuration of the tenant was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Product policy configuration was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyCreateOrUpdateCall(String productId, String policyId, String apiVersion, ProductPolicyListByProduct200ResponseValueInner parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/products/{productId}/policies/{policyId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/vnd.ms-azure-apim.policy+xml",
            "application/vnd.ms-azure-apim.policy.raw+xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPolicyCreateOrUpdateValidateBeforeCall(String productId, String policyId, String apiVersion, ProductPolicyListByProduct200ResponseValueInner parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productPolicyCreateOrUpdate(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling productPolicyCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productPolicyCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling productPolicyCreateOrUpdate(Async)");
        }

        return productPolicyCreateOrUpdateCall(productId, policyId, apiVersion, parameters, _callback);

    }

    /**
     * 
     * Creates or updates policy configuration for the Product.
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The policy contents to apply. (required)
     * @return ProductPolicyListByProduct200ResponseValueInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product policy configuration of the tenant was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Product policy configuration was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductPolicyListByProduct200ResponseValueInner productPolicyCreateOrUpdate(String productId, String policyId, String apiVersion, ProductPolicyListByProduct200ResponseValueInner parameters) throws ApiException {
        ApiResponse<ProductPolicyListByProduct200ResponseValueInner> localVarResp = productPolicyCreateOrUpdateWithHttpInfo(productId, policyId, apiVersion, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates policy configuration for the Product.
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The policy contents to apply. (required)
     * @return ApiResponse&lt;ProductPolicyListByProduct200ResponseValueInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product policy configuration of the tenant was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Product policy configuration was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPolicyListByProduct200ResponseValueInner> productPolicyCreateOrUpdateWithHttpInfo(String productId, String policyId, String apiVersion, ProductPolicyListByProduct200ResponseValueInner parameters) throws ApiException {
        okhttp3.Call localVarCall = productPolicyCreateOrUpdateValidateBeforeCall(productId, policyId, apiVersion, parameters, null);
        Type localVarReturnType = new TypeToken<ProductPolicyListByProduct200ResponseValueInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates policy configuration for the Product.
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param parameters The policy contents to apply. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product policy configuration of the tenant was successfully updated. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Product policy configuration was successfully created. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyCreateOrUpdateAsync(String productId, String policyId, String apiVersion, ProductPolicyListByProduct200ResponseValueInner parameters, final ApiCallback<ProductPolicyListByProduct200ResponseValueInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPolicyCreateOrUpdateValidateBeforeCall(productId, policyId, apiVersion, parameters, _callback);
        Type localVarReturnType = new TypeToken<ProductPolicyListByProduct200ResponseValueInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPolicyDelete
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param ifMatch The entity state (Etag) version of the product policy to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the policy configuration at the Product level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyDeleteCall(String productId, String policyId, String ifMatch, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/policies/{policyId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if (ifMatch != null) {
            localVarHeaderParams.put("If-Match", localVarApiClient.parameterToString(ifMatch));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPolicyDeleteValidateBeforeCall(String productId, String policyId, String ifMatch, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productPolicyDelete(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling productPolicyDelete(Async)");
        }

        // verify the required parameter 'ifMatch' is set
        if (ifMatch == null) {
            throw new ApiException("Missing the required parameter 'ifMatch' when calling productPolicyDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productPolicyDelete(Async)");
        }

        return productPolicyDeleteCall(productId, policyId, ifMatch, apiVersion, _callback);

    }

    /**
     * 
     * Deletes the policy configuration at the Product.
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param ifMatch The entity state (Etag) version of the product policy to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the policy configuration at the Product level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public void productPolicyDelete(String productId, String policyId, String ifMatch, String apiVersion) throws ApiException {
        productPolicyDeleteWithHttpInfo(productId, policyId, ifMatch, apiVersion);
    }

    /**
     * 
     * Deletes the policy configuration at the Product.
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param ifMatch The entity state (Etag) version of the product policy to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the policy configuration at the Product level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> productPolicyDeleteWithHttpInfo(String productId, String policyId, String ifMatch, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = productPolicyDeleteValidateBeforeCall(productId, policyId, ifMatch, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the policy configuration at the Product.
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param ifMatch The entity state (Etag) version of the product policy to update. A value of \&quot;*\&quot; can be used for If-Match to unconditionally apply the operation. (required)
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted the policy configuration at the Product level. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyDeleteAsync(String productId, String policyId, String ifMatch, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPolicyDeleteValidateBeforeCall(productId, policyId, ifMatch, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPolicyGet
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyGetCall(String apiVersion, String productId, String policyId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/policies/{policyId}"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()))
            .replace("{" + "policyId" + "}", localVarApiClient.escapeString(policyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/vnd.ms-azure-apim.policy+xml",
            "application/vnd.ms-azure-apim.policy.raw+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPolicyGetValidateBeforeCall(String apiVersion, String productId, String policyId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productPolicyGet(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productPolicyGet(Async)");
        }

        // verify the required parameter 'policyId' is set
        if (policyId == null) {
            throw new ApiException("Missing the required parameter 'policyId' when calling productPolicyGet(Async)");
        }

        return productPolicyGetCall(apiVersion, productId, policyId, _callback);

    }

    /**
     * 
     * Get the policy configuration at the Product level.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @return ProductPolicyListByProduct200ResponseValueInner
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductPolicyListByProduct200ResponseValueInner productPolicyGet(String apiVersion, String productId, String policyId) throws ApiException {
        ApiResponse<ProductPolicyListByProduct200ResponseValueInner> localVarResp = productPolicyGetWithHttpInfo(apiVersion, productId, policyId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the policy configuration at the Product level.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @return ApiResponse&lt;ProductPolicyListByProduct200ResponseValueInner&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPolicyListByProduct200ResponseValueInner> productPolicyGetWithHttpInfo(String apiVersion, String productId, String policyId) throws ApiException {
        okhttp3.Call localVarCall = productPolicyGetValidateBeforeCall(apiVersion, productId, policyId, null);
        Type localVarReturnType = new TypeToken<ProductPolicyListByProduct200ResponseValueInner>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the policy configuration at the Product level.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param policyId The identifier of the Policy. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyGetAsync(String apiVersion, String productId, String policyId, final ApiCallback<ProductPolicyListByProduct200ResponseValueInner> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPolicyGetValidateBeforeCall(apiVersion, productId, policyId, _callback);
        Type localVarReturnType = new TypeToken<ProductPolicyListByProduct200ResponseValueInner>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for productPolicyListByProduct
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyListByProductCall(String apiVersion, String productId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/products/{productId}/policies"
            .replace("{" + "productId" + "}", localVarApiClient.escapeString(productId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call productPolicyListByProductValidateBeforeCall(String apiVersion, String productId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling productPolicyListByProduct(Async)");
        }

        // verify the required parameter 'productId' is set
        if (productId == null) {
            throw new ApiException("Missing the required parameter 'productId' when calling productPolicyListByProduct(Async)");
        }

        return productPolicyListByProductCall(apiVersion, productId, _callback);

    }

    /**
     * 
     * Get the policy configuration at the Product level.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @return ProductPolicyListByProduct200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ProductPolicyListByProduct200Response productPolicyListByProduct(String apiVersion, String productId) throws ApiException {
        ApiResponse<ProductPolicyListByProduct200Response> localVarResp = productPolicyListByProductWithHttpInfo(apiVersion, productId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the policy configuration at the Product level.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @return ApiResponse&lt;ProductPolicyListByProduct200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProductPolicyListByProduct200Response> productPolicyListByProductWithHttpInfo(String apiVersion, String productId) throws ApiException {
        okhttp3.Call localVarCall = productPolicyListByProductValidateBeforeCall(apiVersion, productId, null);
        Type localVarReturnType = new TypeToken<ProductPolicyListByProduct200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the policy configuration at the Product level.
     * @param apiVersion Version of the API to be used with the client request. (required)
     * @param productId Product identifier. Must be unique in the current API Management service instance. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Product Policy information. </td><td>  * ETag - Current entity state version. Should be treated as opaque and used to make conditional HTTP requests. <br>  </td></tr>
        <tr><td> 0 </td><td> Error response describing why the operation failed. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call productPolicyListByProductAsync(String apiVersion, String productId, final ApiCallback<ProductPolicyListByProduct200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = productPolicyListByProductValidateBeforeCall(apiVersion, productId, _callback);
        Type localVarReturnType = new TypeToken<ProductPolicyListByProduct200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
