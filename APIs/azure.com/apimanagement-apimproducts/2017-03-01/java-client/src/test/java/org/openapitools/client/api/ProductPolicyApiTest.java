/*
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ProductListDefaultResponse;
import org.openapitools.client.model.ProductPolicyListByProduct200Response;
import org.openapitools.client.model.ProductPolicyListByProduct200ResponseValueInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ProductPolicyApi
 */
@Disabled
public class ProductPolicyApiTest {

    private final ProductPolicyApi api = new ProductPolicyApi();

    /**
     * Creates or updates policy configuration for the Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPolicyCreateOrUpdateTest() throws ApiException {
        String productId = null;
        String policyId = null;
        String apiVersion = null;
        ProductPolicyListByProduct200ResponseValueInner parameters = null;
        ProductPolicyListByProduct200ResponseValueInner response = api.productPolicyCreateOrUpdate(productId, policyId, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the policy configuration at the Product.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPolicyDeleteTest() throws ApiException {
        String productId = null;
        String policyId = null;
        String ifMatch = null;
        String apiVersion = null;
        api.productPolicyDelete(productId, policyId, ifMatch, apiVersion);
        // TODO: test validations
    }

    /**
     * Get the policy configuration at the Product level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPolicyGetTest() throws ApiException {
        String apiVersion = null;
        String productId = null;
        String policyId = null;
        ProductPolicyListByProduct200ResponseValueInner response = api.productPolicyGet(apiVersion, productId, policyId);
        // TODO: test validations
    }

    /**
     * Get the policy configuration at the Product level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void productPolicyListByProductTest() throws ApiException {
        String apiVersion = null;
        String productId = null;
        ProductPolicyListByProduct200Response response = api.productPolicyListByProduct(apiVersion, productId);
        // TODO: test validations
    }

}
