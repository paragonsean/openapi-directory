# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.product_api_create_or_update200_response_all_of_all_of_authentication_settings import ProductApiCreateOrUpdate200ResponseAllOfAllOfAuthenticationSettings
from openapi_server.models.product_api_create_or_update200_response_all_of_all_of_subscription_key_parameter_names import ProductApiCreateOrUpdate200ResponseAllOfAllOfSubscriptionKeyParameterNames
from openapi_server import util


class ProductApiCreateOrUpdate200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, path: str=None, protocols: List[str]=None, service_url: str=None, api_revision: str=None, authentication_settings: ProductApiCreateOrUpdate200ResponseAllOfAllOfAuthenticationSettings=None, description: str=None, is_current: bool=None, is_online: bool=None, subscription_key_parameter_names: ProductApiCreateOrUpdate200ResponseAllOfAllOfSubscriptionKeyParameterNames=None, type: str=None):
        """ProductApiCreateOrUpdate200Response - a model defined in OpenAPI

        :param id: The id of this ProductApiCreateOrUpdate200Response.
        :param name: The name of this ProductApiCreateOrUpdate200Response.
        :param path: The path of this ProductApiCreateOrUpdate200Response.
        :param protocols: The protocols of this ProductApiCreateOrUpdate200Response.
        :param service_url: The service_url of this ProductApiCreateOrUpdate200Response.
        :param api_revision: The api_revision of this ProductApiCreateOrUpdate200Response.
        :param authentication_settings: The authentication_settings of this ProductApiCreateOrUpdate200Response.
        :param description: The description of this ProductApiCreateOrUpdate200Response.
        :param is_current: The is_current of this ProductApiCreateOrUpdate200Response.
        :param is_online: The is_online of this ProductApiCreateOrUpdate200Response.
        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ProductApiCreateOrUpdate200Response.
        :param type: The type of this ProductApiCreateOrUpdate200Response.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'path': str,
            'protocols': List[str],
            'service_url': str,
            'api_revision': str,
            'authentication_settings': ProductApiCreateOrUpdate200ResponseAllOfAllOfAuthenticationSettings,
            'description': str,
            'is_current': bool,
            'is_online': bool,
            'subscription_key_parameter_names': ProductApiCreateOrUpdate200ResponseAllOfAllOfSubscriptionKeyParameterNames,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'protocols': 'protocols',
            'service_url': 'serviceUrl',
            'api_revision': 'apiRevision',
            'authentication_settings': 'authenticationSettings',
            'description': 'description',
            'is_current': 'isCurrent',
            'is_online': 'isOnline',
            'subscription_key_parameter_names': 'subscriptionKeyParameterNames',
            'type': 'type'
        }

        self._id = id
        self._name = name
        self._path = path
        self._protocols = protocols
        self._service_url = service_url
        self._api_revision = api_revision
        self._authentication_settings = authentication_settings
        self._description = description
        self._is_current = is_current
        self._is_online = is_online
        self._subscription_key_parameter_names = subscription_key_parameter_names
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductApiCreateOrUpdate200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductApi_CreateOrUpdate_200_response of this ProductApiCreateOrUpdate200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProductApiCreateOrUpdate200Response.

        Identifier of the Entity

        :return: The id of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductApiCreateOrUpdate200Response.

        Identifier of the Entity

        :param id: The id of this ProductApiCreateOrUpdate200Response.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductApiCreateOrUpdate200Response.

        API name.

        :return: The name of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductApiCreateOrUpdate200Response.

        API name.

        :param name: The name of this ProductApiCreateOrUpdate200Response.
        :type name: str
        """
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def path(self):
        """Gets the path of this ProductApiCreateOrUpdate200Response.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :return: The path of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ProductApiCreateOrUpdate200Response.

        Relative URL uniquely identifying this API and all of its resource paths within the API Management service instance. It is appended to the API endpoint base URL specified during the service instance creation to form a public URL for this API.

        :param path: The path of this ProductApiCreateOrUpdate200Response.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")
        if path is not None and len(path) > 400:
            raise ValueError("Invalid value for `path`, length must be less than or equal to `400`")
        if path is not None and len(path) < 0:
            raise ValueError("Invalid value for `path`, length must be greater than or equal to `0`")

        self._path = path

    @property
    def protocols(self):
        """Gets the protocols of this ProductApiCreateOrUpdate200Response.

        Describes on which protocols the operations in this API can be invoked.

        :return: The protocols of this ProductApiCreateOrUpdate200Response.
        :rtype: List[str]
        """
        return self._protocols

    @protocols.setter
    def protocols(self, protocols):
        """Sets the protocols of this ProductApiCreateOrUpdate200Response.

        Describes on which protocols the operations in this API can be invoked.

        :param protocols: The protocols of this ProductApiCreateOrUpdate200Response.
        :type protocols: List[str]
        """
        allowed_values = ["http", "https"]  # noqa: E501
        if not set(protocols).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `protocols` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(protocols) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._protocols = protocols

    @property
    def service_url(self):
        """Gets the service_url of this ProductApiCreateOrUpdate200Response.

        Absolute URL of the backend service implementing this API.

        :return: The service_url of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._service_url

    @service_url.setter
    def service_url(self, service_url):
        """Sets the service_url of this ProductApiCreateOrUpdate200Response.

        Absolute URL of the backend service implementing this API.

        :param service_url: The service_url of this ProductApiCreateOrUpdate200Response.
        :type service_url: str
        """
        if service_url is not None and len(service_url) > 2000:
            raise ValueError("Invalid value for `service_url`, length must be less than or equal to `2000`")
        if service_url is not None and len(service_url) < 1:
            raise ValueError("Invalid value for `service_url`, length must be greater than or equal to `1`")

        self._service_url = service_url

    @property
    def api_revision(self):
        """Gets the api_revision of this ProductApiCreateOrUpdate200Response.

        Describes the Revision of the Api. If no value is provided, default revision 1 is created

        :return: The api_revision of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._api_revision

    @api_revision.setter
    def api_revision(self, api_revision):
        """Sets the api_revision of this ProductApiCreateOrUpdate200Response.

        Describes the Revision of the Api. If no value is provided, default revision 1 is created

        :param api_revision: The api_revision of this ProductApiCreateOrUpdate200Response.
        :type api_revision: str
        """
        if api_revision is not None and len(api_revision) > 100:
            raise ValueError("Invalid value for `api_revision`, length must be less than or equal to `100`")
        if api_revision is not None and len(api_revision) < 1:
            raise ValueError("Invalid value for `api_revision`, length must be greater than or equal to `1`")

        self._api_revision = api_revision

    @property
    def authentication_settings(self):
        """Gets the authentication_settings of this ProductApiCreateOrUpdate200Response.


        :return: The authentication_settings of this ProductApiCreateOrUpdate200Response.
        :rtype: ProductApiCreateOrUpdate200ResponseAllOfAllOfAuthenticationSettings
        """
        return self._authentication_settings

    @authentication_settings.setter
    def authentication_settings(self, authentication_settings):
        """Sets the authentication_settings of this ProductApiCreateOrUpdate200Response.


        :param authentication_settings: The authentication_settings of this ProductApiCreateOrUpdate200Response.
        :type authentication_settings: ProductApiCreateOrUpdate200ResponseAllOfAllOfAuthenticationSettings
        """

        self._authentication_settings = authentication_settings

    @property
    def description(self):
        """Gets the description of this ProductApiCreateOrUpdate200Response.

        Description of the API. May include HTML formatting tags.

        :return: The description of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductApiCreateOrUpdate200Response.

        Description of the API. May include HTML formatting tags.

        :param description: The description of this ProductApiCreateOrUpdate200Response.
        :type description: str
        """

        self._description = description

    @property
    def is_current(self):
        """Gets the is_current of this ProductApiCreateOrUpdate200Response.

        Indicates if API revision is current api revision.

        :return: The is_current of this ProductApiCreateOrUpdate200Response.
        :rtype: bool
        """
        return self._is_current

    @is_current.setter
    def is_current(self, is_current):
        """Sets the is_current of this ProductApiCreateOrUpdate200Response.

        Indicates if API revision is current api revision.

        :param is_current: The is_current of this ProductApiCreateOrUpdate200Response.
        :type is_current: bool
        """

        self._is_current = is_current

    @property
    def is_online(self):
        """Gets the is_online of this ProductApiCreateOrUpdate200Response.

        Indicates if API revision is accessible via the gateway.

        :return: The is_online of this ProductApiCreateOrUpdate200Response.
        :rtype: bool
        """
        return self._is_online

    @is_online.setter
    def is_online(self, is_online):
        """Sets the is_online of this ProductApiCreateOrUpdate200Response.

        Indicates if API revision is accessible via the gateway.

        :param is_online: The is_online of this ProductApiCreateOrUpdate200Response.
        :type is_online: bool
        """

        self._is_online = is_online

    @property
    def subscription_key_parameter_names(self):
        """Gets the subscription_key_parameter_names of this ProductApiCreateOrUpdate200Response.


        :return: The subscription_key_parameter_names of this ProductApiCreateOrUpdate200Response.
        :rtype: ProductApiCreateOrUpdate200ResponseAllOfAllOfSubscriptionKeyParameterNames
        """
        return self._subscription_key_parameter_names

    @subscription_key_parameter_names.setter
    def subscription_key_parameter_names(self, subscription_key_parameter_names):
        """Sets the subscription_key_parameter_names of this ProductApiCreateOrUpdate200Response.


        :param subscription_key_parameter_names: The subscription_key_parameter_names of this ProductApiCreateOrUpdate200Response.
        :type subscription_key_parameter_names: ProductApiCreateOrUpdate200ResponseAllOfAllOfSubscriptionKeyParameterNames
        """

        self._subscription_key_parameter_names = subscription_key_parameter_names

    @property
    def type(self):
        """Gets the type of this ProductApiCreateOrUpdate200Response.

        Type of API.

        :return: The type of this ProductApiCreateOrUpdate200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductApiCreateOrUpdate200Response.

        Type of API.

        :param type: The type of this ProductApiCreateOrUpdate200Response.
        :type type: str
        """
        allowed_values = ["http", "soap"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
