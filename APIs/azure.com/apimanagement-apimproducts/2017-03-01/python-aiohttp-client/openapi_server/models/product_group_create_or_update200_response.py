# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProductGroupCreateOrUpdate200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, built_in: bool=None, description: str=None, external_id: str=None, name: str=None, type: str=None):
        """ProductGroupCreateOrUpdate200Response - a model defined in OpenAPI

        :param id: The id of this ProductGroupCreateOrUpdate200Response.
        :param built_in: The built_in of this ProductGroupCreateOrUpdate200Response.
        :param description: The description of this ProductGroupCreateOrUpdate200Response.
        :param external_id: The external_id of this ProductGroupCreateOrUpdate200Response.
        :param name: The name of this ProductGroupCreateOrUpdate200Response.
        :param type: The type of this ProductGroupCreateOrUpdate200Response.
        """
        self.openapi_types = {
            'id': str,
            'built_in': bool,
            'description': str,
            'external_id': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'id': 'id',
            'built_in': 'builtIn',
            'description': 'description',
            'external_id': 'externalId',
            'name': 'name',
            'type': 'type'
        }

        self._id = id
        self._built_in = built_in
        self._description = description
        self._external_id = external_id
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProductGroupCreateOrUpdate200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProductGroup_CreateOrUpdate_200_response of this ProductGroupCreateOrUpdate200Response.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProductGroupCreateOrUpdate200Response.

        Identifier of the Group entity.

        :return: The id of this ProductGroupCreateOrUpdate200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductGroupCreateOrUpdate200Response.

        Identifier of the Group entity.

        :param id: The id of this ProductGroupCreateOrUpdate200Response.
        :type id: str
        """

        self._id = id

    @property
    def built_in(self):
        """Gets the built_in of this ProductGroupCreateOrUpdate200Response.

        true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.

        :return: The built_in of this ProductGroupCreateOrUpdate200Response.
        :rtype: bool
        """
        return self._built_in

    @built_in.setter
    def built_in(self, built_in):
        """Sets the built_in of this ProductGroupCreateOrUpdate200Response.

        true if the group is one of the three system groups (Administrators, Developers, or Guests); otherwise false.

        :param built_in: The built_in of this ProductGroupCreateOrUpdate200Response.
        :type built_in: bool
        """

        self._built_in = built_in

    @property
    def description(self):
        """Gets the description of this ProductGroupCreateOrUpdate200Response.

        Group description. Can contain HTML formatting tags.

        :return: The description of this ProductGroupCreateOrUpdate200Response.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductGroupCreateOrUpdate200Response.

        Group description. Can contain HTML formatting tags.

        :param description: The description of this ProductGroupCreateOrUpdate200Response.
        :type description: str
        """
        if description is not None and len(description) > 1000:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `1000`")

        self._description = description

    @property
    def external_id(self):
        """Gets the external_id of this ProductGroupCreateOrUpdate200Response.

        For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.

        :return: The external_id of this ProductGroupCreateOrUpdate200Response.
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this ProductGroupCreateOrUpdate200Response.

        For external groups, this property contains the id of the group from the external identity provider, e.g. for Azure Active Directory aad://<tenant>.onmicrosoft.com/groups/<group object id>; otherwise the value is null.

        :param external_id: The external_id of this ProductGroupCreateOrUpdate200Response.
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def name(self):
        """Gets the name of this ProductGroupCreateOrUpdate200Response.

        Group name.

        :return: The name of this ProductGroupCreateOrUpdate200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductGroupCreateOrUpdate200Response.

        Group name.

        :param name: The name of this ProductGroupCreateOrUpdate200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")
        if name is not None and len(name) > 300:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `300`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def type(self):
        """Gets the type of this ProductGroupCreateOrUpdate200Response.

        Group type.

        :return: The type of this ProductGroupCreateOrUpdate200Response.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ProductGroupCreateOrUpdate200Response.

        Group type.

        :param type: The type of this ProductGroupCreateOrUpdate200Response.
        :type type: str
        """
        allowed_values = ["custom", "system", "external"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
