/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductListDefaultResponse from '../model/ProductListDefaultResponse';
import ProductPolicyListByProduct200Response from '../model/ProductPolicyListByProduct200Response';
import ProductPolicyListByProduct200ResponseValueInner from '../model/ProductPolicyListByProduct200ResponseValueInner';

/**
* ProductPolicy service.
* @module api/ProductPolicyApi
* @version 2017-03-01
*/
export default class ProductPolicyApi {

    /**
    * Constructs a new ProductPolicyApi. 
    * @alias module:api/ProductPolicyApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productPolicyCreateOrUpdate operation.
     * @callback module:api/ProductPolicyApi~productPolicyCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductPolicyListByProduct200ResponseValueInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates policy configuration for the Product.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {module:model/String} policyId The identifier of the Policy.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:model/ProductPolicyListByProduct200ResponseValueInner} parameters The policy contents to apply.
     * @param {module:api/ProductPolicyApi~productPolicyCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductPolicyListByProduct200ResponseValueInner}
     */
    productPolicyCreateOrUpdate(productId, policyId, apiVersion, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productPolicyCreateOrUpdate");
      }
      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling productPolicyCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productPolicyCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling productPolicyCreateOrUpdate");
      }

      let pathParams = {
        'productId': productId,
        'policyId': policyId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'application/vnd.ms-azure-apim.policy+xml', 'application/vnd.ms-azure-apim.policy.raw+xml'];
      let accepts = ['application/json'];
      let returnType = ProductPolicyListByProduct200ResponseValueInner;
      return this.apiClient.callApi(
        '/products/{productId}/policies/{policyId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPolicyDelete operation.
     * @callback module:api/ProductPolicyApi~productPolicyDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the policy configuration at the Product.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {module:model/String} policyId The identifier of the Policy.
     * @param {String} ifMatch The entity state (Etag) version of the product policy to update. A value of \"*\" can be used for If-Match to unconditionally apply the operation.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ProductPolicyApi~productPolicyDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productPolicyDelete(productId, policyId, ifMatch, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productPolicyDelete");
      }
      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling productPolicyDelete");
      }
      // verify the required parameter 'ifMatch' is set
      if (ifMatch === undefined || ifMatch === null) {
        throw new Error("Missing the required parameter 'ifMatch' when calling productPolicyDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productPolicyDelete");
      }

      let pathParams = {
        'productId': productId,
        'policyId': policyId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
        'If-Match': ifMatch
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}/policies/{policyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPolicyGet operation.
     * @callback module:api/ProductPolicyApi~productPolicyGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductPolicyListByProduct200ResponseValueInner} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the policy configuration at the Product level.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {module:model/String} policyId The identifier of the Policy.
     * @param {module:api/ProductPolicyApi~productPolicyGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductPolicyListByProduct200ResponseValueInner}
     */
    productPolicyGet(apiVersion, productId, policyId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productPolicyGet");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productPolicyGet");
      }
      // verify the required parameter 'policyId' is set
      if (policyId === undefined || policyId === null) {
        throw new Error("Missing the required parameter 'policyId' when calling productPolicyGet");
      }

      let pathParams = {
        'productId': productId,
        'policyId': policyId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/vnd.ms-azure-apim.policy+xml', 'application/vnd.ms-azure-apim.policy.raw+xml'];
      let returnType = ProductPolicyListByProduct200ResponseValueInner;
      return this.apiClient.callApi(
        '/products/{productId}/policies/{policyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productPolicyListByProduct operation.
     * @callback module:api/ProductPolicyApi~productPolicyListByProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductPolicyListByProduct200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the policy configuration at the Product level.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {module:api/ProductPolicyApi~productPolicyListByProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductPolicyListByProduct200Response}
     */
    productPolicyListByProduct(apiVersion, productId, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productPolicyListByProduct");
      }
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productPolicyListByProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductPolicyListByProduct200Response;
      return this.apiClient.callApi(
        '/products/{productId}/policies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
