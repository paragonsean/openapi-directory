/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ProductGroupCreateOrUpdate200Response from '../model/ProductGroupCreateOrUpdate200Response';
import ProductGroupListByProduct200Response from '../model/ProductGroupListByProduct200Response';
import ProductListDefaultResponse from '../model/ProductListDefaultResponse';

/**
* ProductGroups service.
* @module api/ProductGroupsApi
* @version 2017-03-01
*/
export default class ProductGroupsApi {

    /**
    * Constructs a new ProductGroupsApi. 
    * @alias module:api/ProductGroupsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the productGroupCreateOrUpdate operation.
     * @callback module:api/ProductGroupsApi~productGroupCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductGroupCreateOrUpdate200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds the association between the specified developer group with the specified product.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {String} groupId Group identifier. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ProductGroupsApi~productGroupCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductGroupCreateOrUpdate200Response}
     */
    productGroupCreateOrUpdate(productId, groupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productGroupCreateOrUpdate");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling productGroupCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productGroupCreateOrUpdate");
      }

      let pathParams = {
        'productId': productId,
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductGroupCreateOrUpdate200Response;
      return this.apiClient.callApi(
        '/products/{productId}/groups/{groupId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productGroupDelete operation.
     * @callback module:api/ProductGroupsApi~productGroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the association between the specified group and product.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {String} groupId Group identifier. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {module:api/ProductGroupsApi~productGroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    productGroupDelete(productId, groupId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productGroupDelete");
      }
      // verify the required parameter 'groupId' is set
      if (groupId === undefined || groupId === null) {
        throw new Error("Missing the required parameter 'groupId' when calling productGroupDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productGroupDelete");
      }

      let pathParams = {
        'productId': productId,
        'groupId': groupId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/products/{productId}/groups/{groupId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the productGroupListByProduct operation.
     * @callback module:api/ProductGroupsApi~productGroupListByProductCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProductGroupListByProduct200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists the collection of developer groups associated with the specified product.
     * @param {String} productId Product identifier. Must be unique in the current API Management service instance.
     * @param {String} apiVersion Version of the API to be used with the client request.
     * @param {Object} opts Optional parameters
     * @param {String} [filter] | Field       | Supported operators    | Supported functions                         | |-------------|------------------------|---------------------------------------------| | id          | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | | name        | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | | description | ge, le, eq, ne, gt, lt | substringof, contains, startswith, endswith | | type        | eq, ne                 | N/A                                         |
     * @param {Number} [top] Number of records to return.
     * @param {Number} [skip] Number of records to skip.
     * @param {module:api/ProductGroupsApi~productGroupListByProductCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProductGroupListByProduct200Response}
     */
    productGroupListByProduct(productId, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'productId' is set
      if (productId === undefined || productId === null) {
        throw new Error("Missing the required parameter 'productId' when calling productGroupListByProduct");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling productGroupListByProduct");
      }

      let pathParams = {
        'productId': productId
      };
      let queryParams = {
        '$filter': opts['filter'],
        '$top': opts['top'],
        '$skip': opts['skip'],
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProductGroupListByProduct200Response;
      return this.apiClient.callApi(
        '/products/{productId}/groups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
