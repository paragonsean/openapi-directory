/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProductUpdateParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProductUpdateParameters::OAIProductUpdateParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProductUpdateParameters::OAIProductUpdateParameters() {
    this->initializeModel();
}

OAIProductUpdateParameters::~OAIProductUpdateParameters() {}

void OAIProductUpdateParameters::initializeModel() {

    m_name_isSet = false;
    m_name_isValid = false;

    m_approval_required_isSet = false;
    m_approval_required_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_state_isSet = false;
    m_state_isValid = false;

    m_subscription_required_isSet = false;
    m_subscription_required_isValid = false;

    m_subscriptions_limit_isSet = false;
    m_subscriptions_limit_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;
}

void OAIProductUpdateParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProductUpdateParameters::fromJsonObject(QJsonObject json) {

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_approval_required_isValid = ::OpenAPI::fromJsonValue(m_approval_required, json[QString("approvalRequired")]);
    m_approval_required_isSet = !json[QString("approvalRequired")].isNull() && m_approval_required_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_state_isValid = ::OpenAPI::fromJsonValue(m_state, json[QString("state")]);
    m_state_isSet = !json[QString("state")].isNull() && m_state_isValid;

    m_subscription_required_isValid = ::OpenAPI::fromJsonValue(m_subscription_required, json[QString("subscriptionRequired")]);
    m_subscription_required_isSet = !json[QString("subscriptionRequired")].isNull() && m_subscription_required_isValid;

    m_subscriptions_limit_isValid = ::OpenAPI::fromJsonValue(m_subscriptions_limit, json[QString("subscriptionsLimit")]);
    m_subscriptions_limit_isSet = !json[QString("subscriptionsLimit")].isNull() && m_subscriptions_limit_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("terms")]);
    m_terms_isSet = !json[QString("terms")].isNull() && m_terms_isValid;
}

QString OAIProductUpdateParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProductUpdateParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_approval_required_isSet) {
        obj.insert(QString("approvalRequired"), ::OpenAPI::toJsonValue(m_approval_required));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_state_isSet) {
        obj.insert(QString("state"), ::OpenAPI::toJsonValue(m_state));
    }
    if (m_subscription_required_isSet) {
        obj.insert(QString("subscriptionRequired"), ::OpenAPI::toJsonValue(m_subscription_required));
    }
    if (m_subscriptions_limit_isSet) {
        obj.insert(QString("subscriptionsLimit"), ::OpenAPI::toJsonValue(m_subscriptions_limit));
    }
    if (m_terms_isSet) {
        obj.insert(QString("terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    return obj;
}

QString OAIProductUpdateParameters::getName() const {
    return m_name;
}
void OAIProductUpdateParameters::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProductUpdateParameters::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProductUpdateParameters::is_name_Valid() const{
    return m_name_isValid;
}

bool OAIProductUpdateParameters::isApprovalRequired() const {
    return m_approval_required;
}
void OAIProductUpdateParameters::setApprovalRequired(const bool &approval_required) {
    m_approval_required = approval_required;
    m_approval_required_isSet = true;
}

bool OAIProductUpdateParameters::is_approval_required_Set() const{
    return m_approval_required_isSet;
}

bool OAIProductUpdateParameters::is_approval_required_Valid() const{
    return m_approval_required_isValid;
}

QString OAIProductUpdateParameters::getDescription() const {
    return m_description;
}
void OAIProductUpdateParameters::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIProductUpdateParameters::is_description_Set() const{
    return m_description_isSet;
}

bool OAIProductUpdateParameters::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIProductUpdateParameters::getState() const {
    return m_state;
}
void OAIProductUpdateParameters::setState(const QString &state) {
    m_state = state;
    m_state_isSet = true;
}

bool OAIProductUpdateParameters::is_state_Set() const{
    return m_state_isSet;
}

bool OAIProductUpdateParameters::is_state_Valid() const{
    return m_state_isValid;
}

bool OAIProductUpdateParameters::isSubscriptionRequired() const {
    return m_subscription_required;
}
void OAIProductUpdateParameters::setSubscriptionRequired(const bool &subscription_required) {
    m_subscription_required = subscription_required;
    m_subscription_required_isSet = true;
}

bool OAIProductUpdateParameters::is_subscription_required_Set() const{
    return m_subscription_required_isSet;
}

bool OAIProductUpdateParameters::is_subscription_required_Valid() const{
    return m_subscription_required_isValid;
}

qint32 OAIProductUpdateParameters::getSubscriptionsLimit() const {
    return m_subscriptions_limit;
}
void OAIProductUpdateParameters::setSubscriptionsLimit(const qint32 &subscriptions_limit) {
    m_subscriptions_limit = subscriptions_limit;
    m_subscriptions_limit_isSet = true;
}

bool OAIProductUpdateParameters::is_subscriptions_limit_Set() const{
    return m_subscriptions_limit_isSet;
}

bool OAIProductUpdateParameters::is_subscriptions_limit_Valid() const{
    return m_subscriptions_limit_isValid;
}

QString OAIProductUpdateParameters::getTerms() const {
    return m_terms;
}
void OAIProductUpdateParameters::setTerms(const QString &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIProductUpdateParameters::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIProductUpdateParameters::is_terms_Valid() const{
    return m_terms_isValid;
}

bool OAIProductUpdateParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_approval_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProductUpdateParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
