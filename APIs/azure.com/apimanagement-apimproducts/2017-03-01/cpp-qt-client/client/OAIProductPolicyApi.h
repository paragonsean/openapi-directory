/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductPolicyApi_H
#define OAI_OAIProductPolicyApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductPolicy_ListByProduct_200_response.h"
#include "OAIProductPolicy_ListByProduct_200_response_value_inner.h"
#include "OAIProduct_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductPolicyApi : public QObject {
    Q_OBJECT

public:
    OAIProductPolicyApi(const int timeOut = 0);
    ~OAIProductPolicyApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIProductPolicy_ListByProduct_200_response_value_inner [required]
    */
    virtual void productPolicyCreateOrUpdate(const QString &product_id, const QString &policy_id, const QString &api_version, const OAIProductPolicy_ListByProduct_200_response_value_inner &parameters);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  policy_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productPolicyDelete(const QString &product_id, const QString &policy_id, const QString &if_match, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  product_id QString [required]
    * @param[in]  policy_id QString [required]
    */
    virtual void productPolicyGet(const QString &api_version, const QString &product_id, const QString &policy_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  product_id QString [required]
    */
    virtual void productPolicyListByProduct(const QString &api_version, const QString &product_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productPolicyCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void productPolicyDeleteCallback(OAIHttpRequestWorker *worker);
    void productPolicyGetCallback(OAIHttpRequestWorker *worker);
    void productPolicyListByProductCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productPolicyCreateOrUpdateSignal(OAIProductPolicy_ListByProduct_200_response_value_inner summary);
    void productPolicyDeleteSignal();
    void productPolicyGetSignal(OAIProductPolicy_ListByProduct_200_response_value_inner summary);
    void productPolicyListByProductSignal(OAIProductPolicy_ListByProduct_200_response summary);


    void productPolicyCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProductPolicy_ListByProduct_200_response_value_inner summary);
    void productPolicyDeleteSignalFull(OAIHttpRequestWorker *worker);
    void productPolicyGetSignalFull(OAIHttpRequestWorker *worker, OAIProductPolicy_ListByProduct_200_response_value_inner summary);
    void productPolicyListByProductSignalFull(OAIHttpRequestWorker *worker, OAIProductPolicy_ListByProduct_200_response summary);

    Q_DECL_DEPRECATED_X("Use productPolicyCreateOrUpdateSignalError() instead")
    void productPolicyCreateOrUpdateSignalE(OAIProductPolicy_ListByProduct_200_response_value_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyCreateOrUpdateSignalError(OAIProductPolicy_ListByProduct_200_response_value_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPolicyDeleteSignalError() instead")
    void productPolicyDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPolicyGetSignalError() instead")
    void productPolicyGetSignalE(OAIProductPolicy_ListByProduct_200_response_value_inner summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyGetSignalError(OAIProductPolicy_ListByProduct_200_response_value_inner summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPolicyListByProductSignalError() instead")
    void productPolicyListByProductSignalE(OAIProductPolicy_ListByProduct_200_response summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyListByProductSignalError(OAIProductPolicy_ListByProduct_200_response summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productPolicyCreateOrUpdateSignalErrorFull() instead")
    void productPolicyCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPolicyDeleteSignalErrorFull() instead")
    void productPolicyDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPolicyGetSignalErrorFull() instead")
    void productPolicyGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productPolicyListByProductSignalErrorFull() instead")
    void productPolicyListByProductSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productPolicyListByProductSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
