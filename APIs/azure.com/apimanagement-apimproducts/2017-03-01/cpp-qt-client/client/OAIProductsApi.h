/**
 * ApiManagementClient
 * Use these REST APIs for performing operations on Product entity associated with your Azure API Management deployment. The Product entity represents a product in API Management. Products include one or more APIs and their associated terms of use. Once a product is published, developers can subscribe to the product and begin to use the productâ€™s APIs.
 *
 * The version of the OpenAPI document: 2017-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIProductsApi_H
#define OAI_OAIProductsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIProductCollection.h"
#include "OAIProductContract.h"
#include "OAIProductUpdateParameters.h"
#include "OAIProduct_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIProductsApi : public QObject {
    Q_OBJECT

public:
    OAIProductsApi(const int timeOut = 0);
    ~OAIProductsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIProductContract [required]
    */
    virtual void productCreateOrUpdate(const QString &product_id, const QString &api_version, const OAIProductContract &parameters);

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  delete_subscriptions bool [optional]
    */
    virtual void productDelete(const QString &product_id, const QString &if_match, const QString &api_version, const ::OpenAPI::OptionalParam<bool> &delete_subscriptions = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void productGet(const QString &product_id, const QString &api_version);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  filter QString [optional]
    * @param[in]  top qint32 [optional]
    * @param[in]  skip qint32 [optional]
    * @param[in]  expand_groups bool [optional]
    */
    virtual void productList(const QString &api_version, const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &top = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &skip = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &expand_groups = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  product_id QString [required]
    * @param[in]  if_match QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIProductUpdateParameters [required]
    */
    virtual void productUpdate(const QString &product_id, const QString &if_match, const QString &api_version, const OAIProductUpdateParameters &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void productCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void productDeleteCallback(OAIHttpRequestWorker *worker);
    void productGetCallback(OAIHttpRequestWorker *worker);
    void productListCallback(OAIHttpRequestWorker *worker);
    void productUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void productCreateOrUpdateSignal(OAIProductContract summary);
    void productDeleteSignal();
    void productGetSignal(OAIProductContract summary);
    void productListSignal(OAIProductCollection summary);
    void productUpdateSignal();


    void productCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIProductContract summary);
    void productDeleteSignalFull(OAIHttpRequestWorker *worker);
    void productGetSignalFull(OAIHttpRequestWorker *worker, OAIProductContract summary);
    void productListSignalFull(OAIHttpRequestWorker *worker, OAIProductCollection summary);
    void productUpdateSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use productCreateOrUpdateSignalError() instead")
    void productCreateOrUpdateSignalE(OAIProductContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productCreateOrUpdateSignalError(OAIProductContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeleteSignalError() instead")
    void productDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGetSignalError() instead")
    void productGetSignalE(OAIProductContract summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productGetSignalError(OAIProductContract summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productListSignalError() instead")
    void productListSignalE(OAIProductCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void productListSignalError(OAIProductCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productUpdateSignalError() instead")
    void productUpdateSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void productUpdateSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use productCreateOrUpdateSignalErrorFull() instead")
    void productCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productDeleteSignalErrorFull() instead")
    void productDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productGetSignalErrorFull() instead")
    void productGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productListSignalErrorFull() instead")
    void productListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use productUpdateSignalErrorFull() instead")
    void productUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void productUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
