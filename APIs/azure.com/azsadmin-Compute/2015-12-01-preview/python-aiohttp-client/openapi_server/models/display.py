# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Display(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, operation: str=None, provider: str=None, resource: str=None):
        """Display - a model defined in OpenAPI

        :param description: The description of this Display.
        :param operation: The operation of this Display.
        :param provider: The provider of this Display.
        :param resource: The resource of this Display.
        """
        self.openapi_types = {
            'description': str,
            'operation': str,
            'provider': str,
            'resource': str
        }

        self.attribute_map = {
            'description': 'description',
            'operation': 'operation',
            'provider': 'provider',
            'resource': 'resource'
        }

        self._description = description
        self._operation = operation
        self._provider = provider
        self._resource = resource

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Display':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Display of this Display.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this Display.

        The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.

        :return: The description of this Display.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Display.

        The localized, friendly description for the operation. The description will be displayed to the user. It should be thorough and concise for used in both tooltips and detailed views.

        :param description: The description of this Display.
        :type description: str
        """

        self._description = description

    @property
    def operation(self):
        """Gets the operation of this Display.

        The localized, friendly name for the operation. Use the name as it will displayed to the user.

        :return: The operation of this Display.
        :rtype: str
        """
        return self._operation

    @operation.setter
    def operation(self, operation):
        """Sets the operation of this Display.

        The localized, friendly name for the operation. Use the name as it will displayed to the user.

        :param operation: The operation of this Display.
        :type operation: str
        """

        self._operation = operation

    @property
    def provider(self):
        """Gets the provider of this Display.

        The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with \"Microsoft\" for first-party services. For example, the provider name may be\"Microsoft Monitoring Insights\" or \"Microsoft Compute.\"

        :return: The provider of this Display.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this Display.

        The localized, friendly version of the resource provider name. The provider name is expected to include the name of the publisher or company responsible. The provider name format should use title case and begin with \"Microsoft\" for first-party services. For example, the provider name may be\"Microsoft Monitoring Insights\" or \"Microsoft Compute.\"

        :param provider: The provider of this Display.
        :type provider: str
        """

        self._provider = provider

    @property
    def resource(self):
        """Gets the resource of this Display.

        The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.

        :return: The resource of this Display.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Display.

        The localized, friendly version of the resource type related to this action or operation; the resource type should match the public documentation for the resource provider.

        :param resource: The resource of this Display.
        :type resource: str
        """

        self._resource = resource
