/**
 * InfrastructureInsightsManagementClient
 * Region health operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionHealthModel_alertSummary.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionHealthModel_alertSummary::OAIRegionHealthModel_alertSummary(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionHealthModel_alertSummary::OAIRegionHealthModel_alertSummary() {
    this->initializeModel();
}

OAIRegionHealthModel_alertSummary::~OAIRegionHealthModel_alertSummary() {}

void OAIRegionHealthModel_alertSummary::initializeModel() {

    m_critical_alert_count_isSet = false;
    m_critical_alert_count_isValid = false;

    m_warning_alert_count_isSet = false;
    m_warning_alert_count_isValid = false;
}

void OAIRegionHealthModel_alertSummary::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionHealthModel_alertSummary::fromJsonObject(QJsonObject json) {

    m_critical_alert_count_isValid = ::OpenAPI::fromJsonValue(m_critical_alert_count, json[QString("criticalAlertCount")]);
    m_critical_alert_count_isSet = !json[QString("criticalAlertCount")].isNull() && m_critical_alert_count_isValid;

    m_warning_alert_count_isValid = ::OpenAPI::fromJsonValue(m_warning_alert_count, json[QString("warningAlertCount")]);
    m_warning_alert_count_isSet = !json[QString("warningAlertCount")].isNull() && m_warning_alert_count_isValid;
}

QString OAIRegionHealthModel_alertSummary::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionHealthModel_alertSummary::asJsonObject() const {
    QJsonObject obj;
    if (m_critical_alert_count_isSet) {
        obj.insert(QString("criticalAlertCount"), ::OpenAPI::toJsonValue(m_critical_alert_count));
    }
    if (m_warning_alert_count_isSet) {
        obj.insert(QString("warningAlertCount"), ::OpenAPI::toJsonValue(m_warning_alert_count));
    }
    return obj;
}

qint32 OAIRegionHealthModel_alertSummary::getCriticalAlertCount() const {
    return m_critical_alert_count;
}
void OAIRegionHealthModel_alertSummary::setCriticalAlertCount(const qint32 &critical_alert_count) {
    m_critical_alert_count = critical_alert_count;
    m_critical_alert_count_isSet = true;
}

bool OAIRegionHealthModel_alertSummary::is_critical_alert_count_Set() const{
    return m_critical_alert_count_isSet;
}

bool OAIRegionHealthModel_alertSummary::is_critical_alert_count_Valid() const{
    return m_critical_alert_count_isValid;
}

qint32 OAIRegionHealthModel_alertSummary::getWarningAlertCount() const {
    return m_warning_alert_count;
}
void OAIRegionHealthModel_alertSummary::setWarningAlertCount(const qint32 &warning_alert_count) {
    m_warning_alert_count = warning_alert_count;
    m_warning_alert_count_isSet = true;
}

bool OAIRegionHealthModel_alertSummary::is_warning_alert_count_Set() const{
    return m_warning_alert_count_isSet;
}

bool OAIRegionHealthModel_alertSummary::is_warning_alert_count_Valid() const{
    return m_warning_alert_count_isValid;
}

bool OAIRegionHealthModel_alertSummary::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_critical_alert_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_warning_alert_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionHealthModel_alertSummary::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
