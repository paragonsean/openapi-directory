/**
 * InfrastructureInsightsManagementClient
 * Region health operation endpoints and objects.
 *
 * The version of the OpenAPI document: 2016-05-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRegionHealthModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRegionHealthModel::OAIRegionHealthModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRegionHealthModel::OAIRegionHealthModel() {
    this->initializeModel();
}

OAIRegionHealthModel::~OAIRegionHealthModel() {}

void OAIRegionHealthModel::initializeModel() {

    m_alert_summary_isSet = false;
    m_alert_summary_isValid = false;

    m_usage_metrics_isSet = false;
    m_usage_metrics_isValid = false;
}

void OAIRegionHealthModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRegionHealthModel::fromJsonObject(QJsonObject json) {

    m_alert_summary_isValid = ::OpenAPI::fromJsonValue(m_alert_summary, json[QString("alertSummary")]);
    m_alert_summary_isSet = !json[QString("alertSummary")].isNull() && m_alert_summary_isValid;

    m_usage_metrics_isValid = ::OpenAPI::fromJsonValue(m_usage_metrics, json[QString("usageMetrics")]);
    m_usage_metrics_isSet = !json[QString("usageMetrics")].isNull() && m_usage_metrics_isValid;
}

QString OAIRegionHealthModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRegionHealthModel::asJsonObject() const {
    QJsonObject obj;
    if (m_alert_summary.isSet()) {
        obj.insert(QString("alertSummary"), ::OpenAPI::toJsonValue(m_alert_summary));
    }
    if (m_usage_metrics.size() > 0) {
        obj.insert(QString("usageMetrics"), ::OpenAPI::toJsonValue(m_usage_metrics));
    }
    return obj;
}

OAIRegionHealthModel_alertSummary OAIRegionHealthModel::getAlertSummary() const {
    return m_alert_summary;
}
void OAIRegionHealthModel::setAlertSummary(const OAIRegionHealthModel_alertSummary &alert_summary) {
    m_alert_summary = alert_summary;
    m_alert_summary_isSet = true;
}

bool OAIRegionHealthModel::is_alert_summary_Set() const{
    return m_alert_summary_isSet;
}

bool OAIRegionHealthModel::is_alert_summary_Valid() const{
    return m_alert_summary_isValid;
}

QList<OAIRegionHealthModel_usageMetrics_inner> OAIRegionHealthModel::getUsageMetrics() const {
    return m_usage_metrics;
}
void OAIRegionHealthModel::setUsageMetrics(const QList<OAIRegionHealthModel_usageMetrics_inner> &usage_metrics) {
    m_usage_metrics = usage_metrics;
    m_usage_metrics_isSet = true;
}

bool OAIRegionHealthModel::is_usage_metrics_Set() const{
    return m_usage_metrics_isSet;
}

bool OAIRegionHealthModel::is_usage_metrics_Valid() const{
    return m_usage_metrics_isValid;
}

bool OAIRegionHealthModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_alert_summary.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRegionHealthModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
