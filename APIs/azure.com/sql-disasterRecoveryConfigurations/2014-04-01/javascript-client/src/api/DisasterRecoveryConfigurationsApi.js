/**
 * Azure SQL Database disaster recovery configurations
 * Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DisasterRecoveryConfiguration from '../model/DisasterRecoveryConfiguration';
import DisasterRecoveryConfigurationListResult from '../model/DisasterRecoveryConfigurationListResult';

/**
* DisasterRecoveryConfigurations service.
* @module api/DisasterRecoveryConfigurationsApi
* @version 2014-04-01
*/
export default class DisasterRecoveryConfigurationsApi {

    /**
    * Constructs a new DisasterRecoveryConfigurationsApi. 
    * @alias module:api/DisasterRecoveryConfigurationsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the disasterRecoveryConfigurationsCreateOrUpdate operation.
     * @callback module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisasterRecoveryConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates a disaster recovery configuration.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} disasterRecoveryConfigurationName The name of the disaster recovery configuration to be created/updated.
     * @param {module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisasterRecoveryConfiguration}
     */
    disasterRecoveryConfigurationsCreateOrUpdate(apiVersion, subscriptionId, resourceGroupName, serverName, disasterRecoveryConfigurationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling disasterRecoveryConfigurationsCreateOrUpdate");
      }
      // verify the required parameter 'disasterRecoveryConfigurationName' is set
      if (disasterRecoveryConfigurationName === undefined || disasterRecoveryConfigurationName === null) {
        throw new Error("Missing the required parameter 'disasterRecoveryConfigurationName' when calling disasterRecoveryConfigurationsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'disasterRecoveryConfigurationName': disasterRecoveryConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisasterRecoveryConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{disasterRecoveryConfigurationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigurationsDelete operation.
     * @callback module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a disaster recovery configuration.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} disasterRecoveryConfigurationName The name of the disaster recovery configuration to be deleted.
     * @param {module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disasterRecoveryConfigurationsDelete(apiVersion, subscriptionId, resourceGroupName, serverName, disasterRecoveryConfigurationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigurationsDelete");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigurationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigurationsDelete");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling disasterRecoveryConfigurationsDelete");
      }
      // verify the required parameter 'disasterRecoveryConfigurationName' is set
      if (disasterRecoveryConfigurationName === undefined || disasterRecoveryConfigurationName === null) {
        throw new Error("Missing the required parameter 'disasterRecoveryConfigurationName' when calling disasterRecoveryConfigurationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'disasterRecoveryConfigurationName': disasterRecoveryConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{disasterRecoveryConfigurationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigurationsFailover operation.
     * @callback module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsFailoverCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fails over from the current primary server to this server.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} disasterRecoveryConfigurationName The name of the disaster recovery configuration to failover.
     * @param {module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsFailoverCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disasterRecoveryConfigurationsFailover(apiVersion, subscriptionId, resourceGroupName, serverName, disasterRecoveryConfigurationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigurationsFailover");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigurationsFailover");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigurationsFailover");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling disasterRecoveryConfigurationsFailover");
      }
      // verify the required parameter 'disasterRecoveryConfigurationName' is set
      if (disasterRecoveryConfigurationName === undefined || disasterRecoveryConfigurationName === null) {
        throw new Error("Missing the required parameter 'disasterRecoveryConfigurationName' when calling disasterRecoveryConfigurationsFailover");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'disasterRecoveryConfigurationName': disasterRecoveryConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{disasterRecoveryConfigurationName}/failover', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigurationsFailoverAllowDataLoss operation.
     * @callback module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsFailoverAllowDataLossCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fails over from the current primary server to this server. This operation might result in data loss.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} disasterRecoveryConfigurationName The name of the disaster recovery configuration to failover forcefully.
     * @param {module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsFailoverAllowDataLossCallback} callback The callback function, accepting three arguments: error, data, response
     */
    disasterRecoveryConfigurationsFailoverAllowDataLoss(apiVersion, subscriptionId, resourceGroupName, serverName, disasterRecoveryConfigurationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigurationsFailoverAllowDataLoss");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigurationsFailoverAllowDataLoss");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigurationsFailoverAllowDataLoss");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling disasterRecoveryConfigurationsFailoverAllowDataLoss");
      }
      // verify the required parameter 'disasterRecoveryConfigurationName' is set
      if (disasterRecoveryConfigurationName === undefined || disasterRecoveryConfigurationName === null) {
        throw new Error("Missing the required parameter 'disasterRecoveryConfigurationName' when calling disasterRecoveryConfigurationsFailoverAllowDataLoss");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'disasterRecoveryConfigurationName': disasterRecoveryConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{disasterRecoveryConfigurationName}/forceFailoverAllowDataLoss', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigurationsGet operation.
     * @callback module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisasterRecoveryConfiguration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a disaster recovery configuration.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {String} disasterRecoveryConfigurationName The name of the disaster recovery configuration.
     * @param {module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisasterRecoveryConfiguration}
     */
    disasterRecoveryConfigurationsGet(apiVersion, subscriptionId, resourceGroupName, serverName, disasterRecoveryConfigurationName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigurationsGet");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigurationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigurationsGet");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling disasterRecoveryConfigurationsGet");
      }
      // verify the required parameter 'disasterRecoveryConfigurationName' is set
      if (disasterRecoveryConfigurationName === undefined || disasterRecoveryConfigurationName === null) {
        throw new Error("Missing the required parameter 'disasterRecoveryConfigurationName' when calling disasterRecoveryConfigurationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName,
        'disasterRecoveryConfigurationName': disasterRecoveryConfigurationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisasterRecoveryConfiguration;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration/{disasterRecoveryConfigurationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the disasterRecoveryConfigurationsList operation.
     * @callback module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DisasterRecoveryConfigurationListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists a server's disaster recovery configuration.
     * @param {String} apiVersion The API version to use for the request.
     * @param {String} subscriptionId The subscription ID that identifies an Azure subscription.
     * @param {String} resourceGroupName The name of the resource group that contains the resource. You can obtain this value from the Azure Resource Manager API or the portal.
     * @param {String} serverName The name of the server.
     * @param {module:api/DisasterRecoveryConfigurationsApi~disasterRecoveryConfigurationsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DisasterRecoveryConfigurationListResult}
     */
    disasterRecoveryConfigurationsList(apiVersion, subscriptionId, resourceGroupName, serverName, callback) {
      let postBody = null;
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling disasterRecoveryConfigurationsList");
      }
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling disasterRecoveryConfigurationsList");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling disasterRecoveryConfigurationsList");
      }
      // verify the required parameter 'serverName' is set
      if (serverName === undefined || serverName === null) {
        throw new Error("Missing the required parameter 'serverName' when calling disasterRecoveryConfigurationsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'serverName': serverName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DisasterRecoveryConfigurationListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Sql/servers/{serverName}/disasterRecoveryConfiguration', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
