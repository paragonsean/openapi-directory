/**
 * Azure SQL Database disaster recovery configurations
 * Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The DisasterRecoveryConfigurationProperties model module.
 * @module model/DisasterRecoveryConfigurationProperties
 * @version 2014-04-01
 */
class DisasterRecoveryConfigurationProperties {
    /**
     * Constructs a new <code>DisasterRecoveryConfigurationProperties</code>.
     * Represents the properties of a disaster recovery configuration.
     * @alias module:model/DisasterRecoveryConfigurationProperties
     * @param autoFailover {module:model/DisasterRecoveryConfigurationProperties.AutoFailoverEnum} Whether or not failover can be done automatically.
     * @param failoverPolicy {module:model/DisasterRecoveryConfigurationProperties.FailoverPolicyEnum} How aggressive the automatic failover should be.
     * @param partnerServerId {String} Id of the partner server.
     */
    constructor(autoFailover, failoverPolicy, partnerServerId) { 
        
        DisasterRecoveryConfigurationProperties.initialize(this, autoFailover, failoverPolicy, partnerServerId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, autoFailover, failoverPolicy, partnerServerId) { 
        obj['autoFailover'] = autoFailover;
        obj['failoverPolicy'] = failoverPolicy;
        obj['partnerServerId'] = partnerServerId;
    }

    /**
     * Constructs a <code>DisasterRecoveryConfigurationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DisasterRecoveryConfigurationProperties} obj Optional instance to populate.
     * @return {module:model/DisasterRecoveryConfigurationProperties} The populated <code>DisasterRecoveryConfigurationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DisasterRecoveryConfigurationProperties();

            if (data.hasOwnProperty('autoFailover')) {
                obj['autoFailover'] = ApiClient.convertToType(data['autoFailover'], 'String');
            }
            if (data.hasOwnProperty('failoverPolicy')) {
                obj['failoverPolicy'] = ApiClient.convertToType(data['failoverPolicy'], 'String');
            }
            if (data.hasOwnProperty('logicalServerName')) {
                obj['logicalServerName'] = ApiClient.convertToType(data['logicalServerName'], 'String');
            }
            if (data.hasOwnProperty('partnerLogicalServerName')) {
                obj['partnerLogicalServerName'] = ApiClient.convertToType(data['partnerLogicalServerName'], 'String');
            }
            if (data.hasOwnProperty('partnerServerId')) {
                obj['partnerServerId'] = ApiClient.convertToType(data['partnerServerId'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DisasterRecoveryConfigurationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DisasterRecoveryConfigurationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DisasterRecoveryConfigurationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['autoFailover'] && !(typeof data['autoFailover'] === 'string' || data['autoFailover'] instanceof String)) {
            throw new Error("Expected the field `autoFailover` to be a primitive type in the JSON string but got " + data['autoFailover']);
        }
        // ensure the json data is a string
        if (data['failoverPolicy'] && !(typeof data['failoverPolicy'] === 'string' || data['failoverPolicy'] instanceof String)) {
            throw new Error("Expected the field `failoverPolicy` to be a primitive type in the JSON string but got " + data['failoverPolicy']);
        }
        // ensure the json data is a string
        if (data['logicalServerName'] && !(typeof data['logicalServerName'] === 'string' || data['logicalServerName'] instanceof String)) {
            throw new Error("Expected the field `logicalServerName` to be a primitive type in the JSON string but got " + data['logicalServerName']);
        }
        // ensure the json data is a string
        if (data['partnerLogicalServerName'] && !(typeof data['partnerLogicalServerName'] === 'string' || data['partnerLogicalServerName'] instanceof String)) {
            throw new Error("Expected the field `partnerLogicalServerName` to be a primitive type in the JSON string but got " + data['partnerLogicalServerName']);
        }
        // ensure the json data is a string
        if (data['partnerServerId'] && !(typeof data['partnerServerId'] === 'string' || data['partnerServerId'] instanceof String)) {
            throw new Error("Expected the field `partnerServerId` to be a primitive type in the JSON string but got " + data['partnerServerId']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }

        return true;
    }


}

DisasterRecoveryConfigurationProperties.RequiredProperties = ["autoFailover", "failoverPolicy", "partnerServerId"];

/**
 * Whether or not failover can be done automatically.
 * @member {module:model/DisasterRecoveryConfigurationProperties.AutoFailoverEnum} autoFailover
 */
DisasterRecoveryConfigurationProperties.prototype['autoFailover'] = undefined;

/**
 * How aggressive the automatic failover should be.
 * @member {module:model/DisasterRecoveryConfigurationProperties.FailoverPolicyEnum} failoverPolicy
 */
DisasterRecoveryConfigurationProperties.prototype['failoverPolicy'] = undefined;

/**
 * Logical name of the server.
 * @member {String} logicalServerName
 */
DisasterRecoveryConfigurationProperties.prototype['logicalServerName'] = undefined;

/**
 * Logical name of the partner server.
 * @member {String} partnerLogicalServerName
 */
DisasterRecoveryConfigurationProperties.prototype['partnerLogicalServerName'] = undefined;

/**
 * Id of the partner server.
 * @member {String} partnerServerId
 */
DisasterRecoveryConfigurationProperties.prototype['partnerServerId'] = undefined;

/**
 * The role of the current server in the disaster recovery configuration.
 * @member {module:model/DisasterRecoveryConfigurationProperties.RoleEnum} role
 */
DisasterRecoveryConfigurationProperties.prototype['role'] = undefined;

/**
 * The status of the disaster recovery configuration.
 * @member {module:model/DisasterRecoveryConfigurationProperties.StatusEnum} status
 */
DisasterRecoveryConfigurationProperties.prototype['status'] = undefined;





/**
 * Allowed values for the <code>autoFailover</code> property.
 * @enum {String}
 * @readonly
 */
DisasterRecoveryConfigurationProperties['AutoFailoverEnum'] = {

    /**
     * value: "Off"
     * @const
     */
    "Off": "Off",

    /**
     * value: "On"
     * @const
     */
    "On": "On"
};


/**
 * Allowed values for the <code>failoverPolicy</code> property.
 * @enum {String}
 * @readonly
 */
DisasterRecoveryConfigurationProperties['FailoverPolicyEnum'] = {

    /**
     * value: "Manual"
     * @const
     */
    "Manual": "Manual",

    /**
     * value: "Automatic"
     * @const
     */
    "Automatic": "Automatic"
};


/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
DisasterRecoveryConfigurationProperties['RoleEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "Primary"
     * @const
     */
    "Primary": "Primary",

    /**
     * value: "Secondary"
     * @const
     */
    "Secondary": "Secondary"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
DisasterRecoveryConfigurationProperties['StatusEnum'] = {

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Ready"
     * @const
     */
    "Ready": "Ready",

    /**
     * value: "FailingOver"
     * @const
     */
    "FailingOver": "FailingOver",

    /**
     * value: "Dropping"
     * @const
     */
    "Dropping": "Dropping"
};



export default DisasterRecoveryConfigurationProperties;

