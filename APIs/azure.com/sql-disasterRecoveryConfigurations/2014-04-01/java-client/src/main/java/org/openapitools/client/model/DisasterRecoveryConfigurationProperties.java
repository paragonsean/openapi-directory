/*
 * Azure SQL Database disaster recovery configurations
 * Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.
 *
 * The version of the OpenAPI document: 2014-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Represents the properties of a disaster recovery configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:56.894188-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DisasterRecoveryConfigurationProperties {
  /**
   * Whether or not failover can be done automatically.
   */
  @JsonAdapter(AutoFailoverEnum.Adapter.class)
  public enum AutoFailoverEnum {
    OFF("Off"),
    
    ON("On");

    private String value;

    AutoFailoverEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AutoFailoverEnum fromValue(String value) {
      for (AutoFailoverEnum b : AutoFailoverEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AutoFailoverEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AutoFailoverEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AutoFailoverEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AutoFailoverEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AutoFailoverEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUTO_FAILOVER = "autoFailover";
  @SerializedName(SERIALIZED_NAME_AUTO_FAILOVER)
  private AutoFailoverEnum autoFailover;

  /**
   * How aggressive the automatic failover should be.
   */
  @JsonAdapter(FailoverPolicyEnum.Adapter.class)
  public enum FailoverPolicyEnum {
    MANUAL("Manual"),
    
    AUTOMATIC("Automatic");

    private String value;

    FailoverPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FailoverPolicyEnum fromValue(String value) {
      for (FailoverPolicyEnum b : FailoverPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FailoverPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FailoverPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FailoverPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FailoverPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FailoverPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FAILOVER_POLICY = "failoverPolicy";
  @SerializedName(SERIALIZED_NAME_FAILOVER_POLICY)
  private FailoverPolicyEnum failoverPolicy;

  public static final String SERIALIZED_NAME_LOGICAL_SERVER_NAME = "logicalServerName";
  @SerializedName(SERIALIZED_NAME_LOGICAL_SERVER_NAME)
  private String logicalServerName;

  public static final String SERIALIZED_NAME_PARTNER_LOGICAL_SERVER_NAME = "partnerLogicalServerName";
  @SerializedName(SERIALIZED_NAME_PARTNER_LOGICAL_SERVER_NAME)
  private String partnerLogicalServerName;

  public static final String SERIALIZED_NAME_PARTNER_SERVER_ID = "partnerServerId";
  @SerializedName(SERIALIZED_NAME_PARTNER_SERVER_ID)
  private String partnerServerId;

  /**
   * The role of the current server in the disaster recovery configuration.
   */
  @JsonAdapter(RoleEnum.Adapter.class)
  public enum RoleEnum {
    NONE("None"),
    
    PRIMARY("Primary"),
    
    SECONDARY("Secondary");

    private String value;

    RoleEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RoleEnum fromValue(String value) {
      for (RoleEnum b : RoleEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RoleEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RoleEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RoleEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RoleEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RoleEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ROLE = "role";
  @SerializedName(SERIALIZED_NAME_ROLE)
  private RoleEnum role;

  /**
   * The status of the disaster recovery configuration.
   */
  @JsonAdapter(StatusEnum.Adapter.class)
  public enum StatusEnum {
    CREATING("Creating"),
    
    READY("Ready"),
    
    FAILING_OVER("FailingOver"),
    
    DROPPING("Dropping");

    private String value;

    StatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusEnum fromValue(String value) {
      for (StatusEnum b : StatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private StatusEnum status;

  public DisasterRecoveryConfigurationProperties() {
  }

  public DisasterRecoveryConfigurationProperties(
     String logicalServerName, 
     String partnerLogicalServerName, 
     RoleEnum role, 
     StatusEnum status
  ) {
    this();
    this.logicalServerName = logicalServerName;
    this.partnerLogicalServerName = partnerLogicalServerName;
    this.role = role;
    this.status = status;
  }

  public DisasterRecoveryConfigurationProperties autoFailover(AutoFailoverEnum autoFailover) {
    this.autoFailover = autoFailover;
    return this;
  }

  /**
   * Whether or not failover can be done automatically.
   * @return autoFailover
   */
  @javax.annotation.Nonnull
  public AutoFailoverEnum getAutoFailover() {
    return autoFailover;
  }

  public void setAutoFailover(AutoFailoverEnum autoFailover) {
    this.autoFailover = autoFailover;
  }


  public DisasterRecoveryConfigurationProperties failoverPolicy(FailoverPolicyEnum failoverPolicy) {
    this.failoverPolicy = failoverPolicy;
    return this;
  }

  /**
   * How aggressive the automatic failover should be.
   * @return failoverPolicy
   */
  @javax.annotation.Nonnull
  public FailoverPolicyEnum getFailoverPolicy() {
    return failoverPolicy;
  }

  public void setFailoverPolicy(FailoverPolicyEnum failoverPolicy) {
    this.failoverPolicy = failoverPolicy;
  }


  /**
   * Logical name of the server.
   * @return logicalServerName
   */
  @javax.annotation.Nullable
  public String getLogicalServerName() {
    return logicalServerName;
  }



  /**
   * Logical name of the partner server.
   * @return partnerLogicalServerName
   */
  @javax.annotation.Nullable
  public String getPartnerLogicalServerName() {
    return partnerLogicalServerName;
  }



  public DisasterRecoveryConfigurationProperties partnerServerId(String partnerServerId) {
    this.partnerServerId = partnerServerId;
    return this;
  }

  /**
   * Id of the partner server.
   * @return partnerServerId
   */
  @javax.annotation.Nonnull
  public String getPartnerServerId() {
    return partnerServerId;
  }

  public void setPartnerServerId(String partnerServerId) {
    this.partnerServerId = partnerServerId;
  }


  /**
   * The role of the current server in the disaster recovery configuration.
   * @return role
   */
  @javax.annotation.Nullable
  public RoleEnum getRole() {
    return role;
  }



  /**
   * The status of the disaster recovery configuration.
   * @return status
   */
  @javax.annotation.Nullable
  public StatusEnum getStatus() {
    return status;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DisasterRecoveryConfigurationProperties disasterRecoveryConfigurationProperties = (DisasterRecoveryConfigurationProperties) o;
    return Objects.equals(this.autoFailover, disasterRecoveryConfigurationProperties.autoFailover) &&
        Objects.equals(this.failoverPolicy, disasterRecoveryConfigurationProperties.failoverPolicy) &&
        Objects.equals(this.logicalServerName, disasterRecoveryConfigurationProperties.logicalServerName) &&
        Objects.equals(this.partnerLogicalServerName, disasterRecoveryConfigurationProperties.partnerLogicalServerName) &&
        Objects.equals(this.partnerServerId, disasterRecoveryConfigurationProperties.partnerServerId) &&
        Objects.equals(this.role, disasterRecoveryConfigurationProperties.role) &&
        Objects.equals(this.status, disasterRecoveryConfigurationProperties.status);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoFailover, failoverPolicy, logicalServerName, partnerLogicalServerName, partnerServerId, role, status);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DisasterRecoveryConfigurationProperties {\n");
    sb.append("    autoFailover: ").append(toIndentedString(autoFailover)).append("\n");
    sb.append("    failoverPolicy: ").append(toIndentedString(failoverPolicy)).append("\n");
    sb.append("    logicalServerName: ").append(toIndentedString(logicalServerName)).append("\n");
    sb.append("    partnerLogicalServerName: ").append(toIndentedString(partnerLogicalServerName)).append("\n");
    sb.append("    partnerServerId: ").append(toIndentedString(partnerServerId)).append("\n");
    sb.append("    role: ").append(toIndentedString(role)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("autoFailover");
    openapiFields.add("failoverPolicy");
    openapiFields.add("logicalServerName");
    openapiFields.add("partnerLogicalServerName");
    openapiFields.add("partnerServerId");
    openapiFields.add("role");
    openapiFields.add("status");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("autoFailover");
    openapiRequiredFields.add("failoverPolicy");
    openapiRequiredFields.add("partnerServerId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DisasterRecoveryConfigurationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DisasterRecoveryConfigurationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DisasterRecoveryConfigurationProperties is not found in the empty JSON string", DisasterRecoveryConfigurationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DisasterRecoveryConfigurationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DisasterRecoveryConfigurationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DisasterRecoveryConfigurationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("autoFailover").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `autoFailover` to be a primitive type in the JSON string but got `%s`", jsonObj.get("autoFailover").toString()));
      }
      // validate the required field `autoFailover`
      AutoFailoverEnum.validateJsonElement(jsonObj.get("autoFailover"));
      if (!jsonObj.get("failoverPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `failoverPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("failoverPolicy").toString()));
      }
      // validate the required field `failoverPolicy`
      FailoverPolicyEnum.validateJsonElement(jsonObj.get("failoverPolicy"));
      if ((jsonObj.get("logicalServerName") != null && !jsonObj.get("logicalServerName").isJsonNull()) && !jsonObj.get("logicalServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logicalServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logicalServerName").toString()));
      }
      if ((jsonObj.get("partnerLogicalServerName") != null && !jsonObj.get("partnerLogicalServerName").isJsonNull()) && !jsonObj.get("partnerLogicalServerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerLogicalServerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerLogicalServerName").toString()));
      }
      if (!jsonObj.get("partnerServerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `partnerServerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("partnerServerId").toString()));
      }
      if ((jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) && !jsonObj.get("role").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `role` to be a primitive type in the JSON string but got `%s`", jsonObj.get("role").toString()));
      }
      // validate the optional field `role`
      if (jsonObj.get("role") != null && !jsonObj.get("role").isJsonNull()) {
        RoleEnum.validateJsonElement(jsonObj.get("role"));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `status`
      if (jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) {
        StatusEnum.validateJsonElement(jsonObj.get("status"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DisasterRecoveryConfigurationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DisasterRecoveryConfigurationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DisasterRecoveryConfigurationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DisasterRecoveryConfigurationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<DisasterRecoveryConfigurationProperties>() {
           @Override
           public void write(JsonWriter out, DisasterRecoveryConfigurationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DisasterRecoveryConfigurationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DisasterRecoveryConfigurationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DisasterRecoveryConfigurationProperties
   * @throws IOException if the JSON string is invalid with respect to DisasterRecoveryConfigurationProperties
   */
  public static DisasterRecoveryConfigurationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DisasterRecoveryConfigurationProperties.class);
  }

  /**
   * Convert an instance of DisasterRecoveryConfigurationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

