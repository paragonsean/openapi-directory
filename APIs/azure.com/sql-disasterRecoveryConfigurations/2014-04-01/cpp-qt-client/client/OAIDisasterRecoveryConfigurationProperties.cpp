/**
 * Azure SQL Database disaster recovery configurations
 * Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDisasterRecoveryConfigurationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDisasterRecoveryConfigurationProperties::OAIDisasterRecoveryConfigurationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDisasterRecoveryConfigurationProperties::OAIDisasterRecoveryConfigurationProperties() {
    this->initializeModel();
}

OAIDisasterRecoveryConfigurationProperties::~OAIDisasterRecoveryConfigurationProperties() {}

void OAIDisasterRecoveryConfigurationProperties::initializeModel() {

    m_auto_failover_isSet = false;
    m_auto_failover_isValid = false;

    m_failover_policy_isSet = false;
    m_failover_policy_isValid = false;

    m_logical_server_name_isSet = false;
    m_logical_server_name_isValid = false;

    m_partner_logical_server_name_isSet = false;
    m_partner_logical_server_name_isValid = false;

    m_partner_server_id_isSet = false;
    m_partner_server_id_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;
}

void OAIDisasterRecoveryConfigurationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDisasterRecoveryConfigurationProperties::fromJsonObject(QJsonObject json) {

    m_auto_failover_isValid = ::OpenAPI::fromJsonValue(m_auto_failover, json[QString("autoFailover")]);
    m_auto_failover_isSet = !json[QString("autoFailover")].isNull() && m_auto_failover_isValid;

    m_failover_policy_isValid = ::OpenAPI::fromJsonValue(m_failover_policy, json[QString("failoverPolicy")]);
    m_failover_policy_isSet = !json[QString("failoverPolicy")].isNull() && m_failover_policy_isValid;

    m_logical_server_name_isValid = ::OpenAPI::fromJsonValue(m_logical_server_name, json[QString("logicalServerName")]);
    m_logical_server_name_isSet = !json[QString("logicalServerName")].isNull() && m_logical_server_name_isValid;

    m_partner_logical_server_name_isValid = ::OpenAPI::fromJsonValue(m_partner_logical_server_name, json[QString("partnerLogicalServerName")]);
    m_partner_logical_server_name_isSet = !json[QString("partnerLogicalServerName")].isNull() && m_partner_logical_server_name_isValid;

    m_partner_server_id_isValid = ::OpenAPI::fromJsonValue(m_partner_server_id, json[QString("partnerServerId")]);
    m_partner_server_id_isSet = !json[QString("partnerServerId")].isNull() && m_partner_server_id_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDisasterRecoveryConfigurationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_failover_isSet) {
        obj.insert(QString("autoFailover"), ::OpenAPI::toJsonValue(m_auto_failover));
    }
    if (m_failover_policy_isSet) {
        obj.insert(QString("failoverPolicy"), ::OpenAPI::toJsonValue(m_failover_policy));
    }
    if (m_logical_server_name_isSet) {
        obj.insert(QString("logicalServerName"), ::OpenAPI::toJsonValue(m_logical_server_name));
    }
    if (m_partner_logical_server_name_isSet) {
        obj.insert(QString("partnerLogicalServerName"), ::OpenAPI::toJsonValue(m_partner_logical_server_name));
    }
    if (m_partner_server_id_isSet) {
        obj.insert(QString("partnerServerId"), ::OpenAPI::toJsonValue(m_partner_server_id));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    return obj;
}

QString OAIDisasterRecoveryConfigurationProperties::getAutoFailover() const {
    return m_auto_failover;
}
void OAIDisasterRecoveryConfigurationProperties::setAutoFailover(const QString &auto_failover) {
    m_auto_failover = auto_failover;
    m_auto_failover_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_auto_failover_Set() const{
    return m_auto_failover_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_auto_failover_Valid() const{
    return m_auto_failover_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::getFailoverPolicy() const {
    return m_failover_policy;
}
void OAIDisasterRecoveryConfigurationProperties::setFailoverPolicy(const QString &failover_policy) {
    m_failover_policy = failover_policy;
    m_failover_policy_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_failover_policy_Set() const{
    return m_failover_policy_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_failover_policy_Valid() const{
    return m_failover_policy_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::getLogicalServerName() const {
    return m_logical_server_name;
}
void OAIDisasterRecoveryConfigurationProperties::setLogicalServerName(const QString &logical_server_name) {
    m_logical_server_name = logical_server_name;
    m_logical_server_name_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_logical_server_name_Set() const{
    return m_logical_server_name_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_logical_server_name_Valid() const{
    return m_logical_server_name_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::getPartnerLogicalServerName() const {
    return m_partner_logical_server_name;
}
void OAIDisasterRecoveryConfigurationProperties::setPartnerLogicalServerName(const QString &partner_logical_server_name) {
    m_partner_logical_server_name = partner_logical_server_name;
    m_partner_logical_server_name_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_partner_logical_server_name_Set() const{
    return m_partner_logical_server_name_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_partner_logical_server_name_Valid() const{
    return m_partner_logical_server_name_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::getPartnerServerId() const {
    return m_partner_server_id;
}
void OAIDisasterRecoveryConfigurationProperties::setPartnerServerId(const QString &partner_server_id) {
    m_partner_server_id = partner_server_id;
    m_partner_server_id_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_partner_server_id_Set() const{
    return m_partner_server_id_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_partner_server_id_Valid() const{
    return m_partner_server_id_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::getRole() const {
    return m_role;
}
void OAIDisasterRecoveryConfigurationProperties::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_role_Set() const{
    return m_role_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_role_Valid() const{
    return m_role_isValid;
}

QString OAIDisasterRecoveryConfigurationProperties::getStatus() const {
    return m_status;
}
void OAIDisasterRecoveryConfigurationProperties::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDisasterRecoveryConfigurationProperties::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDisasterRecoveryConfigurationProperties::is_status_Valid() const{
    return m_status_isValid;
}

bool OAIDisasterRecoveryConfigurationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_failover_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_failover_policy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logical_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_logical_server_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_server_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDisasterRecoveryConfigurationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_auto_failover_isValid && m_failover_policy_isValid && m_partner_server_id_isValid && true;
}

} // namespace OpenAPI
