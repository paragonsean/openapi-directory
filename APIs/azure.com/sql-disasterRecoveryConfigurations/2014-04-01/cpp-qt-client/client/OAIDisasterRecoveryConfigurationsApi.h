/**
 * Azure SQL Database disaster recovery configurations
 * Provides create, read, update, delete, and failover functionality for Azure SQL Database disaster recovery configurations.
 *
 * The version of the OpenAPI document: 2014-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDisasterRecoveryConfigurationsApi_H
#define OAI_OAIDisasterRecoveryConfigurationsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDisasterRecoveryConfiguration.h"
#include "OAIDisasterRecoveryConfigurationListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDisasterRecoveryConfigurationsApi : public QObject {
    Q_OBJECT

public:
    OAIDisasterRecoveryConfigurationsApi(const int timeOut = 0);
    ~OAIDisasterRecoveryConfigurationsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  disaster_recovery_configuration_name QString [required]
    */
    virtual void disasterRecoveryConfigurationsCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &disaster_recovery_configuration_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  disaster_recovery_configuration_name QString [required]
    */
    virtual void disasterRecoveryConfigurationsDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &disaster_recovery_configuration_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  disaster_recovery_configuration_name QString [required]
    */
    virtual void disasterRecoveryConfigurationsFailover(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &disaster_recovery_configuration_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  disaster_recovery_configuration_name QString [required]
    */
    virtual void disasterRecoveryConfigurationsFailoverAllowDataLoss(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &disaster_recovery_configuration_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    * @param[in]  disaster_recovery_configuration_name QString [required]
    */
    virtual void disasterRecoveryConfigurationsGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name, const QString &disaster_recovery_configuration_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  server_name QString [required]
    */
    virtual void disasterRecoveryConfigurationsList(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &server_name);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void disasterRecoveryConfigurationsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsDeleteCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsFailoverCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsFailoverAllowDataLossCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsGetCallback(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void disasterRecoveryConfigurationsCreateOrUpdateSignal(OAIDisasterRecoveryConfiguration summary);
    void disasterRecoveryConfigurationsDeleteSignal();
    void disasterRecoveryConfigurationsFailoverSignal();
    void disasterRecoveryConfigurationsFailoverAllowDataLossSignal();
    void disasterRecoveryConfigurationsGetSignal(OAIDisasterRecoveryConfiguration summary);
    void disasterRecoveryConfigurationsListSignal(OAIDisasterRecoveryConfigurationListResult summary);


    void disasterRecoveryConfigurationsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIDisasterRecoveryConfiguration summary);
    void disasterRecoveryConfigurationsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsFailoverSignalFull(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsFailoverAllowDataLossSignalFull(OAIHttpRequestWorker *worker);
    void disasterRecoveryConfigurationsGetSignalFull(OAIHttpRequestWorker *worker, OAIDisasterRecoveryConfiguration summary);
    void disasterRecoveryConfigurationsListSignalFull(OAIHttpRequestWorker *worker, OAIDisasterRecoveryConfigurationListResult summary);

    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsCreateOrUpdateSignalError() instead")
    void disasterRecoveryConfigurationsCreateOrUpdateSignalE(OAIDisasterRecoveryConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsCreateOrUpdateSignalError(OAIDisasterRecoveryConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsDeleteSignalError() instead")
    void disasterRecoveryConfigurationsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsFailoverSignalError() instead")
    void disasterRecoveryConfigurationsFailoverSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsFailoverSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsFailoverAllowDataLossSignalError() instead")
    void disasterRecoveryConfigurationsFailoverAllowDataLossSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsFailoverAllowDataLossSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsGetSignalError() instead")
    void disasterRecoveryConfigurationsGetSignalE(OAIDisasterRecoveryConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsGetSignalError(OAIDisasterRecoveryConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsListSignalError() instead")
    void disasterRecoveryConfigurationsListSignalE(OAIDisasterRecoveryConfigurationListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsListSignalError(OAIDisasterRecoveryConfigurationListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsCreateOrUpdateSignalErrorFull() instead")
    void disasterRecoveryConfigurationsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsDeleteSignalErrorFull() instead")
    void disasterRecoveryConfigurationsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsFailoverSignalErrorFull() instead")
    void disasterRecoveryConfigurationsFailoverSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsFailoverSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsFailoverAllowDataLossSignalErrorFull() instead")
    void disasterRecoveryConfigurationsFailoverAllowDataLossSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsFailoverAllowDataLossSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsGetSignalErrorFull() instead")
    void disasterRecoveryConfigurationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use disasterRecoveryConfigurationsListSignalErrorFull() instead")
    void disasterRecoveryConfigurationsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void disasterRecoveryConfigurationsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
