# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DisasterRecoveryConfigurationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_failover: str=None, failover_policy: str=None, logical_server_name: str=None, partner_logical_server_name: str=None, partner_server_id: str=None, role: str=None, status: str=None):
        """DisasterRecoveryConfigurationProperties - a model defined in OpenAPI

        :param auto_failover: The auto_failover of this DisasterRecoveryConfigurationProperties.
        :param failover_policy: The failover_policy of this DisasterRecoveryConfigurationProperties.
        :param logical_server_name: The logical_server_name of this DisasterRecoveryConfigurationProperties.
        :param partner_logical_server_name: The partner_logical_server_name of this DisasterRecoveryConfigurationProperties.
        :param partner_server_id: The partner_server_id of this DisasterRecoveryConfigurationProperties.
        :param role: The role of this DisasterRecoveryConfigurationProperties.
        :param status: The status of this DisasterRecoveryConfigurationProperties.
        """
        self.openapi_types = {
            'auto_failover': str,
            'failover_policy': str,
            'logical_server_name': str,
            'partner_logical_server_name': str,
            'partner_server_id': str,
            'role': str,
            'status': str
        }

        self.attribute_map = {
            'auto_failover': 'autoFailover',
            'failover_policy': 'failoverPolicy',
            'logical_server_name': 'logicalServerName',
            'partner_logical_server_name': 'partnerLogicalServerName',
            'partner_server_id': 'partnerServerId',
            'role': 'role',
            'status': 'status'
        }

        self._auto_failover = auto_failover
        self._failover_policy = failover_policy
        self._logical_server_name = logical_server_name
        self._partner_logical_server_name = partner_logical_server_name
        self._partner_server_id = partner_server_id
        self._role = role
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DisasterRecoveryConfigurationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DisasterRecoveryConfigurationProperties of this DisasterRecoveryConfigurationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_failover(self):
        """Gets the auto_failover of this DisasterRecoveryConfigurationProperties.

        Whether or not failover can be done automatically.

        :return: The auto_failover of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._auto_failover

    @auto_failover.setter
    def auto_failover(self, auto_failover):
        """Sets the auto_failover of this DisasterRecoveryConfigurationProperties.

        Whether or not failover can be done automatically.

        :param auto_failover: The auto_failover of this DisasterRecoveryConfigurationProperties.
        :type auto_failover: str
        """
        allowed_values = ["Off", "On"]  # noqa: E501
        if auto_failover not in allowed_values:
            raise ValueError(
                "Invalid value for `auto_failover` ({0}), must be one of {1}"
                .format(auto_failover, allowed_values)
            )

        self._auto_failover = auto_failover

    @property
    def failover_policy(self):
        """Gets the failover_policy of this DisasterRecoveryConfigurationProperties.

        How aggressive the automatic failover should be.

        :return: The failover_policy of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._failover_policy

    @failover_policy.setter
    def failover_policy(self, failover_policy):
        """Sets the failover_policy of this DisasterRecoveryConfigurationProperties.

        How aggressive the automatic failover should be.

        :param failover_policy: The failover_policy of this DisasterRecoveryConfigurationProperties.
        :type failover_policy: str
        """
        allowed_values = ["Manual", "Automatic"]  # noqa: E501
        if failover_policy not in allowed_values:
            raise ValueError(
                "Invalid value for `failover_policy` ({0}), must be one of {1}"
                .format(failover_policy, allowed_values)
            )

        self._failover_policy = failover_policy

    @property
    def logical_server_name(self):
        """Gets the logical_server_name of this DisasterRecoveryConfigurationProperties.

        Logical name of the server.

        :return: The logical_server_name of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._logical_server_name

    @logical_server_name.setter
    def logical_server_name(self, logical_server_name):
        """Sets the logical_server_name of this DisasterRecoveryConfigurationProperties.

        Logical name of the server.

        :param logical_server_name: The logical_server_name of this DisasterRecoveryConfigurationProperties.
        :type logical_server_name: str
        """

        self._logical_server_name = logical_server_name

    @property
    def partner_logical_server_name(self):
        """Gets the partner_logical_server_name of this DisasterRecoveryConfigurationProperties.

        Logical name of the partner server.

        :return: The partner_logical_server_name of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._partner_logical_server_name

    @partner_logical_server_name.setter
    def partner_logical_server_name(self, partner_logical_server_name):
        """Sets the partner_logical_server_name of this DisasterRecoveryConfigurationProperties.

        Logical name of the partner server.

        :param partner_logical_server_name: The partner_logical_server_name of this DisasterRecoveryConfigurationProperties.
        :type partner_logical_server_name: str
        """

        self._partner_logical_server_name = partner_logical_server_name

    @property
    def partner_server_id(self):
        """Gets the partner_server_id of this DisasterRecoveryConfigurationProperties.

        Id of the partner server.

        :return: The partner_server_id of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._partner_server_id

    @partner_server_id.setter
    def partner_server_id(self, partner_server_id):
        """Sets the partner_server_id of this DisasterRecoveryConfigurationProperties.

        Id of the partner server.

        :param partner_server_id: The partner_server_id of this DisasterRecoveryConfigurationProperties.
        :type partner_server_id: str
        """
        if partner_server_id is None:
            raise ValueError("Invalid value for `partner_server_id`, must not be `None`")

        self._partner_server_id = partner_server_id

    @property
    def role(self):
        """Gets the role of this DisasterRecoveryConfigurationProperties.

        The role of the current server in the disaster recovery configuration.

        :return: The role of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this DisasterRecoveryConfigurationProperties.

        The role of the current server in the disaster recovery configuration.

        :param role: The role of this DisasterRecoveryConfigurationProperties.
        :type role: str
        """
        allowed_values = ["None", "Primary", "Secondary"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def status(self):
        """Gets the status of this DisasterRecoveryConfigurationProperties.

        The status of the disaster recovery configuration.

        :return: The status of this DisasterRecoveryConfigurationProperties.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DisasterRecoveryConfigurationProperties.

        The status of the disaster recovery configuration.

        :param status: The status of this DisasterRecoveryConfigurationProperties.
        :type status: str
        """
        allowed_values = ["Creating", "Ready", "FailingOver", "Dropping"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
