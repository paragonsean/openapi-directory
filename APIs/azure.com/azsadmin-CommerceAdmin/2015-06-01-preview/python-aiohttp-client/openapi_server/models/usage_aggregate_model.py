# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsageAggregateModel(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instance_data: str=None, meter_id: str=None, quantity: str=None, subscription_id: str=None, usage_end_time: datetime=None, usage_start_time: datetime=None):
        """UsageAggregateModel - a model defined in OpenAPI

        :param instance_data: The instance_data of this UsageAggregateModel.
        :param meter_id: The meter_id of this UsageAggregateModel.
        :param quantity: The quantity of this UsageAggregateModel.
        :param subscription_id: The subscription_id of this UsageAggregateModel.
        :param usage_end_time: The usage_end_time of this UsageAggregateModel.
        :param usage_start_time: The usage_start_time of this UsageAggregateModel.
        """
        self.openapi_types = {
            'instance_data': str,
            'meter_id': str,
            'quantity': str,
            'subscription_id': str,
            'usage_end_time': datetime,
            'usage_start_time': datetime
        }

        self.attribute_map = {
            'instance_data': 'instanceData',
            'meter_id': 'meterId',
            'quantity': 'quantity',
            'subscription_id': 'subscriptionId',
            'usage_end_time': 'usageEndTime',
            'usage_start_time': 'usageStartTime'
        }

        self._instance_data = instance_data
        self._meter_id = meter_id
        self._quantity = quantity
        self._subscription_id = subscription_id
        self._usage_end_time = usage_end_time
        self._usage_start_time = usage_start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageAggregateModel':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageAggregateModel of this UsageAggregateModel.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instance_data(self):
        """Gets the instance_data of this UsageAggregateModel.

        Key-value pairs of instance details represented as a string.

        :return: The instance_data of this UsageAggregateModel.
        :rtype: str
        """
        return self._instance_data

    @instance_data.setter
    def instance_data(self, instance_data):
        """Sets the instance_data of this UsageAggregateModel.

        Key-value pairs of instance details represented as a string.

        :param instance_data: The instance_data of this UsageAggregateModel.
        :type instance_data: str
        """

        self._instance_data = instance_data

    @property
    def meter_id(self):
        """Gets the meter_id of this UsageAggregateModel.

        Unique ID for the resource that was consumed (aka ResourceID).

        :return: The meter_id of this UsageAggregateModel.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this UsageAggregateModel.

        Unique ID for the resource that was consumed (aka ResourceID).

        :param meter_id: The meter_id of this UsageAggregateModel.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def quantity(self):
        """Gets the quantity of this UsageAggregateModel.

        The amount of the resource consumption that occurred in this time frame.

        :return: The quantity of this UsageAggregateModel.
        :rtype: str
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this UsageAggregateModel.

        The amount of the resource consumption that occurred in this time frame.

        :param quantity: The quantity of this UsageAggregateModel.
        :type quantity: str
        """

        self._quantity = quantity

    @property
    def subscription_id(self):
        """Gets the subscription_id of this UsageAggregateModel.

        Subscription id of tenant using plan.

        :return: The subscription_id of this UsageAggregateModel.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this UsageAggregateModel.

        Subscription id of tenant using plan.

        :param subscription_id: The subscription_id of this UsageAggregateModel.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def usage_end_time(self):
        """Gets the usage_end_time of this UsageAggregateModel.

        UTC end time for the usage bucket to which this usage aggregate belongs.

        :return: The usage_end_time of this UsageAggregateModel.
        :rtype: datetime
        """
        return self._usage_end_time

    @usage_end_time.setter
    def usage_end_time(self, usage_end_time):
        """Sets the usage_end_time of this UsageAggregateModel.

        UTC end time for the usage bucket to which this usage aggregate belongs.

        :param usage_end_time: The usage_end_time of this UsageAggregateModel.
        :type usage_end_time: datetime
        """

        self._usage_end_time = usage_end_time

    @property
    def usage_start_time(self):
        """Gets the usage_start_time of this UsageAggregateModel.

        UTC start time for the usage bucket to which this usage aggregate belongs.

        :return: The usage_start_time of this UsageAggregateModel.
        :rtype: datetime
        """
        return self._usage_start_time

    @usage_start_time.setter
    def usage_start_time(self, usage_start_time):
        """Sets the usage_start_time of this UsageAggregateModel.

        UTC start time for the usage bucket to which this usage aggregate belongs.

        :param usage_start_time: The usage_start_time of this UsageAggregateModel.
        :type usage_start_time: datetime
        """

        self._usage_start_time = usage_start_time
