/**
 * CommerceManagementClient
 * The Admin Commerce Management Client.
 *
 * The version of the OpenAPI document: 2015-06-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUsageAggregateModel.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUsageAggregateModel::OAIUsageAggregateModel(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUsageAggregateModel::OAIUsageAggregateModel() {
    this->initializeModel();
}

OAIUsageAggregateModel::~OAIUsageAggregateModel() {}

void OAIUsageAggregateModel::initializeModel() {

    m_instance_data_isSet = false;
    m_instance_data_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_usage_end_time_isSet = false;
    m_usage_end_time_isValid = false;

    m_usage_start_time_isSet = false;
    m_usage_start_time_isValid = false;
}

void OAIUsageAggregateModel::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUsageAggregateModel::fromJsonObject(QJsonObject json) {

    m_instance_data_isValid = ::OpenAPI::fromJsonValue(m_instance_data, json[QString("instanceData")]);
    m_instance_data_isSet = !json[QString("instanceData")].isNull() && m_instance_data_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;

    m_usage_end_time_isValid = ::OpenAPI::fromJsonValue(m_usage_end_time, json[QString("usageEndTime")]);
    m_usage_end_time_isSet = !json[QString("usageEndTime")].isNull() && m_usage_end_time_isValid;

    m_usage_start_time_isValid = ::OpenAPI::fromJsonValue(m_usage_start_time, json[QString("usageStartTime")]);
    m_usage_start_time_isSet = !json[QString("usageStartTime")].isNull() && m_usage_start_time_isValid;
}

QString OAIUsageAggregateModel::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUsageAggregateModel::asJsonObject() const {
    QJsonObject obj;
    if (m_instance_data_isSet) {
        obj.insert(QString("instanceData"), ::OpenAPI::toJsonValue(m_instance_data));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_usage_end_time_isSet) {
        obj.insert(QString("usageEndTime"), ::OpenAPI::toJsonValue(m_usage_end_time));
    }
    if (m_usage_start_time_isSet) {
        obj.insert(QString("usageStartTime"), ::OpenAPI::toJsonValue(m_usage_start_time));
    }
    return obj;
}

QString OAIUsageAggregateModel::getInstanceData() const {
    return m_instance_data;
}
void OAIUsageAggregateModel::setInstanceData(const QString &instance_data) {
    m_instance_data = instance_data;
    m_instance_data_isSet = true;
}

bool OAIUsageAggregateModel::is_instance_data_Set() const{
    return m_instance_data_isSet;
}

bool OAIUsageAggregateModel::is_instance_data_Valid() const{
    return m_instance_data_isValid;
}

QString OAIUsageAggregateModel::getMeterId() const {
    return m_meter_id;
}
void OAIUsageAggregateModel::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIUsageAggregateModel::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIUsageAggregateModel::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIUsageAggregateModel::getQuantity() const {
    return m_quantity;
}
void OAIUsageAggregateModel::setQuantity(const QString &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIUsageAggregateModel::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIUsageAggregateModel::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIUsageAggregateModel::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIUsageAggregateModel::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIUsageAggregateModel::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIUsageAggregateModel::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QDateTime OAIUsageAggregateModel::getUsageEndTime() const {
    return m_usage_end_time;
}
void OAIUsageAggregateModel::setUsageEndTime(const QDateTime &usage_end_time) {
    m_usage_end_time = usage_end_time;
    m_usage_end_time_isSet = true;
}

bool OAIUsageAggregateModel::is_usage_end_time_Set() const{
    return m_usage_end_time_isSet;
}

bool OAIUsageAggregateModel::is_usage_end_time_Valid() const{
    return m_usage_end_time_isValid;
}

QDateTime OAIUsageAggregateModel::getUsageStartTime() const {
    return m_usage_start_time;
}
void OAIUsageAggregateModel::setUsageStartTime(const QDateTime &usage_start_time) {
    m_usage_start_time = usage_start_time;
    m_usage_start_time_isSet = true;
}

bool OAIUsageAggregateModel::is_usage_start_time_Set() const{
    return m_usage_start_time_isSet;
}

bool OAIUsageAggregateModel::is_usage_start_time_Valid() const{
    return m_usage_start_time_isValid;
}

bool OAIUsageAggregateModel::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instance_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_usage_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUsageAggregateModel::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
