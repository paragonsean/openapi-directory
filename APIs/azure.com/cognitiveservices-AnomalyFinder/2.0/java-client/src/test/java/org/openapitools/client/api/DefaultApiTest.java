/*
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.EntireDetectResponse;
import org.openapitools.client.model.LastDetectResponse;
import org.openapitools.client.model.Request;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Find anomalies for the entire series in batch.
     *
     * The operation will generate a model using the entire series, each point will be detected with the same model. In this method, points before and after a certain point will be used to determine whether it&#39;s an anomaly. The entire detection can give user an overall status of the time series.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entireDetectTest() throws ApiException {
        Request body = null;
        EntireDetectResponse response = api.entireDetect(body);
        // TODO: test validations
    }

    /**
     * Detect anomaly status of the latest point in time series.
     *
     * The operation will generate a model using points before the latest one, In this method, only history points are used for determine whether the target point is an anomaly. Latest point detecting matches the scenario of real-time monitoring of business metrics.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lastDetectTest() throws ApiException {
        Request body = null;
        LastDetectResponse response = api.lastDetect(body);
        // TODO: test validations
    }

}
