/*
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Point;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:50:31.711271-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Request {
  public static final String SERIALIZED_NAME_CUSTOM_INTERVAL = "customInterval";
  @SerializedName(SERIALIZED_NAME_CUSTOM_INTERVAL)
  private Integer customInterval;

  /**
   * Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.
   */
  @JsonAdapter(GranularityEnum.Adapter.class)
  public enum GranularityEnum {
    YEARLY("yearly"),
    
    MONTHLY("monthly"),
    
    WEEKLY("weekly"),
    
    DAILY("daily"),
    
    HOURLY("hourly"),
    
    MINUTELY("minutely");

    private String value;

    GranularityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static GranularityEnum fromValue(String value) {
      for (GranularityEnum b : GranularityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<GranularityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final GranularityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public GranularityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return GranularityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      GranularityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_GRANULARITY = "granularity";
  @SerializedName(SERIALIZED_NAME_GRANULARITY)
  private GranularityEnum granularity;

  public static final String SERIALIZED_NAME_MAX_ANOMALY_RATIO = "maxAnomalyRatio";
  @SerializedName(SERIALIZED_NAME_MAX_ANOMALY_RATIO)
  private Float maxAnomalyRatio;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  private Integer period;

  public static final String SERIALIZED_NAME_SENSITIVITY = "sensitivity";
  @SerializedName(SERIALIZED_NAME_SENSITIVITY)
  private Integer sensitivity;

  public static final String SERIALIZED_NAME_SERIES = "series";
  @SerializedName(SERIALIZED_NAME_SERIES)
  private List<Point> series = new ArrayList<>();

  public Request() {
  }

  public Request customInterval(Integer customInterval) {
    this.customInterval = customInterval;
    return this;
  }

  /**
   * Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\&quot;granularity\&quot;:\&quot;minutely\&quot;, \&quot;customInterval\&quot;:5}.
   * @return customInterval
   */
  @javax.annotation.Nullable
  public Integer getCustomInterval() {
    return customInterval;
  }

  public void setCustomInterval(Integer customInterval) {
    this.customInterval = customInterval;
  }


  public Request granularity(GranularityEnum granularity) {
    this.granularity = granularity;
    return this;
  }

  /**
   * Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.
   * @return granularity
   */
  @javax.annotation.Nonnull
  public GranularityEnum getGranularity() {
    return granularity;
  }

  public void setGranularity(GranularityEnum granularity) {
    this.granularity = granularity;
  }


  public Request maxAnomalyRatio(Float maxAnomalyRatio) {
    this.maxAnomalyRatio = maxAnomalyRatio;
    return this;
  }

  /**
   * Optional argument, advanced model parameter, max anomaly ratio in a time series.
   * @return maxAnomalyRatio
   */
  @javax.annotation.Nullable
  public Float getMaxAnomalyRatio() {
    return maxAnomalyRatio;
  }

  public void setMaxAnomalyRatio(Float maxAnomalyRatio) {
    this.maxAnomalyRatio = maxAnomalyRatio;
  }


  public Request period(Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(Integer period) {
    this.period = period;
  }


  public Request sensitivity(Integer sensitivity) {
    this.sensitivity = sensitivity;
    return this;
  }

  /**
   * Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted.
   * @return sensitivity
   */
  @javax.annotation.Nullable
  public Integer getSensitivity() {
    return sensitivity;
  }

  public void setSensitivity(Integer sensitivity) {
    this.sensitivity = sensitivity;
  }


  public Request series(List<Point> series) {
    this.series = series;
    return this;
  }

  public Request addSeriesItem(Point seriesItem) {
    if (this.series == null) {
      this.series = new ArrayList<>();
    }
    this.series.add(seriesItem);
    return this;
  }

  /**
   * Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.
   * @return series
   */
  @javax.annotation.Nonnull
  public List<Point> getSeries() {
    return series;
  }

  public void setSeries(List<Point> series) {
    this.series = series;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Request request = (Request) o;
    return Objects.equals(this.customInterval, request.customInterval) &&
        Objects.equals(this.granularity, request.granularity) &&
        Objects.equals(this.maxAnomalyRatio, request.maxAnomalyRatio) &&
        Objects.equals(this.period, request.period) &&
        Objects.equals(this.sensitivity, request.sensitivity) &&
        Objects.equals(this.series, request.series);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customInterval, granularity, maxAnomalyRatio, period, sensitivity, series);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Request {\n");
    sb.append("    customInterval: ").append(toIndentedString(customInterval)).append("\n");
    sb.append("    granularity: ").append(toIndentedString(granularity)).append("\n");
    sb.append("    maxAnomalyRatio: ").append(toIndentedString(maxAnomalyRatio)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    sensitivity: ").append(toIndentedString(sensitivity)).append("\n");
    sb.append("    series: ").append(toIndentedString(series)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customInterval");
    openapiFields.add("granularity");
    openapiFields.add("maxAnomalyRatio");
    openapiFields.add("period");
    openapiFields.add("sensitivity");
    openapiFields.add("series");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("granularity");
    openapiRequiredFields.add("series");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Request
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Request.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Request is not found in the empty JSON string", Request.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Request.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Request` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Request.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("granularity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `granularity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("granularity").toString()));
      }
      // validate the required field `granularity`
      GranularityEnum.validateJsonElement(jsonObj.get("granularity"));
      // ensure the json data is an array
      if (!jsonObj.get("series").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `series` to be an array in the JSON string but got `%s`", jsonObj.get("series").toString()));
      }

      JsonArray jsonArrayseries = jsonObj.getAsJsonArray("series");
      // validate the required field `series` (array)
      for (int i = 0; i < jsonArrayseries.size(); i++) {
        Point.validateJsonElement(jsonArrayseries.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Request.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Request' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Request> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Request.class));

       return (TypeAdapter<T>) new TypeAdapter<Request>() {
           @Override
           public void write(JsonWriter out, Request value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Request read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Request given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Request
   * @throws IOException if the JSON string is invalid with respect to Request
   */
  public static Request fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Request.class);
  }

  /**
   * Convert an instance of Request to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

