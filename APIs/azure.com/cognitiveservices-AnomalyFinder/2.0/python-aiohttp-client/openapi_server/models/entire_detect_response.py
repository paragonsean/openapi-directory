# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EntireDetectResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_values: List[float]=None, is_anomaly: List[bool]=None, is_negative_anomaly: List[bool]=None, is_positive_anomaly: List[bool]=None, lower_margins: List[float]=None, period: int=None, upper_margins: List[float]=None):
        """EntireDetectResponse - a model defined in OpenAPI

        :param expected_values: The expected_values of this EntireDetectResponse.
        :param is_anomaly: The is_anomaly of this EntireDetectResponse.
        :param is_negative_anomaly: The is_negative_anomaly of this EntireDetectResponse.
        :param is_positive_anomaly: The is_positive_anomaly of this EntireDetectResponse.
        :param lower_margins: The lower_margins of this EntireDetectResponse.
        :param period: The period of this EntireDetectResponse.
        :param upper_margins: The upper_margins of this EntireDetectResponse.
        """
        self.openapi_types = {
            'expected_values': List[float],
            'is_anomaly': List[bool],
            'is_negative_anomaly': List[bool],
            'is_positive_anomaly': List[bool],
            'lower_margins': List[float],
            'period': int,
            'upper_margins': List[float]
        }

        self.attribute_map = {
            'expected_values': 'expectedValues',
            'is_anomaly': 'isAnomaly',
            'is_negative_anomaly': 'isNegativeAnomaly',
            'is_positive_anomaly': 'isPositiveAnomaly',
            'lower_margins': 'lowerMargins',
            'period': 'period',
            'upper_margins': 'upperMargins'
        }

        self._expected_values = expected_values
        self._is_anomaly = is_anomaly
        self._is_negative_anomaly = is_negative_anomaly
        self._is_positive_anomaly = is_positive_anomaly
        self._lower_margins = lower_margins
        self._period = period
        self._upper_margins = upper_margins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EntireDetectResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EntireDetectResponse of this EntireDetectResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_values(self):
        """Gets the expected_values of this EntireDetectResponse.

        ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.

        :return: The expected_values of this EntireDetectResponse.
        :rtype: List[float]
        """
        return self._expected_values

    @expected_values.setter
    def expected_values(self, expected_values):
        """Sets the expected_values of this EntireDetectResponse.

        ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.

        :param expected_values: The expected_values of this EntireDetectResponse.
        :type expected_values: List[float]
        """
        if expected_values is None:
            raise ValueError("Invalid value for `expected_values`, must not be `None`")

        self._expected_values = expected_values

    @property
    def is_anomaly(self):
        """Gets the is_anomaly of this EntireDetectResponse.

        IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.

        :return: The is_anomaly of this EntireDetectResponse.
        :rtype: List[bool]
        """
        return self._is_anomaly

    @is_anomaly.setter
    def is_anomaly(self, is_anomaly):
        """Sets the is_anomaly of this EntireDetectResponse.

        IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.

        :param is_anomaly: The is_anomaly of this EntireDetectResponse.
        :type is_anomaly: List[bool]
        """
        if is_anomaly is None:
            raise ValueError("Invalid value for `is_anomaly`, must not be `None`")

        self._is_anomaly = is_anomaly

    @property
    def is_negative_anomaly(self):
        """Gets the is_negative_anomaly of this EntireDetectResponse.

        IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.

        :return: The is_negative_anomaly of this EntireDetectResponse.
        :rtype: List[bool]
        """
        return self._is_negative_anomaly

    @is_negative_anomaly.setter
    def is_negative_anomaly(self, is_negative_anomaly):
        """Sets the is_negative_anomaly of this EntireDetectResponse.

        IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.

        :param is_negative_anomaly: The is_negative_anomaly of this EntireDetectResponse.
        :type is_negative_anomaly: List[bool]
        """
        if is_negative_anomaly is None:
            raise ValueError("Invalid value for `is_negative_anomaly`, must not be `None`")

        self._is_negative_anomaly = is_negative_anomaly

    @property
    def is_positive_anomaly(self):
        """Gets the is_positive_anomaly of this EntireDetectResponse.

        IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.

        :return: The is_positive_anomaly of this EntireDetectResponse.
        :rtype: List[bool]
        """
        return self._is_positive_anomaly

    @is_positive_anomaly.setter
    def is_positive_anomaly(self, is_positive_anomaly):
        """Sets the is_positive_anomaly of this EntireDetectResponse.

        IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.

        :param is_positive_anomaly: The is_positive_anomaly of this EntireDetectResponse.
        :type is_positive_anomaly: List[bool]
        """
        if is_positive_anomaly is None:
            raise ValueError("Invalid value for `is_positive_anomaly`, must not be `None`")

        self._is_positive_anomaly = is_positive_anomaly

    @property
    def lower_margins(self):
        """Gets the lower_margins of this EntireDetectResponse.

        LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.

        :return: The lower_margins of this EntireDetectResponse.
        :rtype: List[float]
        """
        return self._lower_margins

    @lower_margins.setter
    def lower_margins(self, lower_margins):
        """Sets the lower_margins of this EntireDetectResponse.

        LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.

        :param lower_margins: The lower_margins of this EntireDetectResponse.
        :type lower_margins: List[float]
        """
        if lower_margins is None:
            raise ValueError("Invalid value for `lower_margins`, must not be `None`")

        self._lower_margins = lower_margins

    @property
    def period(self):
        """Gets the period of this EntireDetectResponse.

        Frequency extracted from the series, zero means no recurrent pattern has been found.

        :return: The period of this EntireDetectResponse.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this EntireDetectResponse.

        Frequency extracted from the series, zero means no recurrent pattern has been found.

        :param period: The period of this EntireDetectResponse.
        :type period: int
        """
        if period is None:
            raise ValueError("Invalid value for `period`, must not be `None`")

        self._period = period

    @property
    def upper_margins(self):
        """Gets the upper_margins of this EntireDetectResponse.

        UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting sensitivity value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.

        :return: The upper_margins of this EntireDetectResponse.
        :rtype: List[float]
        """
        return self._upper_margins

    @upper_margins.setter
    def upper_margins(self, upper_margins):
        """Sets the upper_margins of this EntireDetectResponse.

        UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting sensitivity value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.

        :param upper_margins: The upper_margins of this EntireDetectResponse.
        :type upper_margins: List[float]
        """
        if upper_margins is None:
            raise ValueError("Invalid value for `upper_margins`, must not be `None`")

        self._upper_margins = upper_margins
