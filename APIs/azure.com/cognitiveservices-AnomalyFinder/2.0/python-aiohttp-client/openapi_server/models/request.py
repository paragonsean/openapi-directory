# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.point import Point
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_interval: int=None, granularity: str=None, max_anomaly_ratio: float=None, period: int=None, sensitivity: int=None, series: List[Point]=None):
        """Request - a model defined in OpenAPI

        :param custom_interval: The custom_interval of this Request.
        :param granularity: The granularity of this Request.
        :param max_anomaly_ratio: The max_anomaly_ratio of this Request.
        :param period: The period of this Request.
        :param sensitivity: The sensitivity of this Request.
        :param series: The series of this Request.
        """
        self.openapi_types = {
            'custom_interval': int,
            'granularity': str,
            'max_anomaly_ratio': float,
            'period': int,
            'sensitivity': int,
            'series': List[Point]
        }

        self.attribute_map = {
            'custom_interval': 'customInterval',
            'granularity': 'granularity',
            'max_anomaly_ratio': 'maxAnomalyRatio',
            'period': 'period',
            'sensitivity': 'sensitivity',
            'series': 'series'
        }

        self._custom_interval = custom_interval
        self._granularity = granularity
        self._max_anomaly_ratio = max_anomaly_ratio
        self._period = period
        self._sensitivity = sensitivity
        self._series = series

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_interval(self):
        """Gets the custom_interval of this Request.

        Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.

        :return: The custom_interval of this Request.
        :rtype: int
        """
        return self._custom_interval

    @custom_interval.setter
    def custom_interval(self, custom_interval):
        """Sets the custom_interval of this Request.

        Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.

        :param custom_interval: The custom_interval of this Request.
        :type custom_interval: int
        """

        self._custom_interval = custom_interval

    @property
    def granularity(self):
        """Gets the granularity of this Request.

        Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.

        :return: The granularity of this Request.
        :rtype: str
        """
        return self._granularity

    @granularity.setter
    def granularity(self, granularity):
        """Sets the granularity of this Request.

        Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.

        :param granularity: The granularity of this Request.
        :type granularity: str
        """
        allowed_values = ["yearly", "monthly", "weekly", "daily", "hourly", "minutely"]  # noqa: E501
        if granularity not in allowed_values:
            raise ValueError(
                "Invalid value for `granularity` ({0}), must be one of {1}"
                .format(granularity, allowed_values)
            )

        self._granularity = granularity

    @property
    def max_anomaly_ratio(self):
        """Gets the max_anomaly_ratio of this Request.

        Optional argument, advanced model parameter, max anomaly ratio in a time series.

        :return: The max_anomaly_ratio of this Request.
        :rtype: float
        """
        return self._max_anomaly_ratio

    @max_anomaly_ratio.setter
    def max_anomaly_ratio(self, max_anomaly_ratio):
        """Sets the max_anomaly_ratio of this Request.

        Optional argument, advanced model parameter, max anomaly ratio in a time series.

        :param max_anomaly_ratio: The max_anomaly_ratio of this Request.
        :type max_anomaly_ratio: float
        """

        self._max_anomaly_ratio = max_anomaly_ratio

    @property
    def period(self):
        """Gets the period of this Request.

        Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.

        :return: The period of this Request.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this Request.

        Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.

        :param period: The period of this Request.
        :type period: int
        """

        self._period = period

    @property
    def sensitivity(self):
        """Gets the sensitivity of this Request.

        Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted.

        :return: The sensitivity of this Request.
        :rtype: int
        """
        return self._sensitivity

    @sensitivity.setter
    def sensitivity(self, sensitivity):
        """Sets the sensitivity of this Request.

        Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted.

        :param sensitivity: The sensitivity of this Request.
        :type sensitivity: int
        """

        self._sensitivity = sensitivity

    @property
    def series(self):
        """Gets the series of this Request.

        Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.

        :return: The series of this Request.
        :rtype: List[Point]
        """
        return self._series

    @series.setter
    def series(self, series):
        """Sets the series of this Request.

        Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.

        :param series: The series of this Request.
        :type series: List[Point]
        """
        if series is None:
            raise ValueError("Invalid value for `series`, must not be `None`")

        self._series = series
