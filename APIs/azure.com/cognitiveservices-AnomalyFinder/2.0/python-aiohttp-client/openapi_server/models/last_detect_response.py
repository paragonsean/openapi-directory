# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LastDetectResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expected_value: float=None, is_anomaly: bool=None, is_negative_anomaly: bool=None, is_positive_anomaly: bool=None, lower_margin: float=None, period: int=None, suggested_window: int=None, upper_margin: float=None):
        """LastDetectResponse - a model defined in OpenAPI

        :param expected_value: The expected_value of this LastDetectResponse.
        :param is_anomaly: The is_anomaly of this LastDetectResponse.
        :param is_negative_anomaly: The is_negative_anomaly of this LastDetectResponse.
        :param is_positive_anomaly: The is_positive_anomaly of this LastDetectResponse.
        :param lower_margin: The lower_margin of this LastDetectResponse.
        :param period: The period of this LastDetectResponse.
        :param suggested_window: The suggested_window of this LastDetectResponse.
        :param upper_margin: The upper_margin of this LastDetectResponse.
        """
        self.openapi_types = {
            'expected_value': float,
            'is_anomaly': bool,
            'is_negative_anomaly': bool,
            'is_positive_anomaly': bool,
            'lower_margin': float,
            'period': int,
            'suggested_window': int,
            'upper_margin': float
        }

        self.attribute_map = {
            'expected_value': 'expectedValue',
            'is_anomaly': 'isAnomaly',
            'is_negative_anomaly': 'isNegativeAnomaly',
            'is_positive_anomaly': 'isPositiveAnomaly',
            'lower_margin': 'lowerMargin',
            'period': 'period',
            'suggested_window': 'suggestedWindow',
            'upper_margin': 'upperMargin'
        }

        self._expected_value = expected_value
        self._is_anomaly = is_anomaly
        self._is_negative_anomaly = is_negative_anomaly
        self._is_positive_anomaly = is_positive_anomaly
        self._lower_margin = lower_margin
        self._period = period
        self._suggested_window = suggested_window
        self._upper_margin = upper_margin

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LastDetectResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LastDetectResponse of this LastDetectResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expected_value(self):
        """Gets the expected_value of this LastDetectResponse.

        Expected value of the latest point.

        :return: The expected_value of this LastDetectResponse.
        :rtype: float
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this LastDetectResponse.

        Expected value of the latest point.

        :param expected_value: The expected_value of this LastDetectResponse.
        :type expected_value: float
        """

        self._expected_value = expected_value

    @property
    def is_anomaly(self):
        """Gets the is_anomaly of this LastDetectResponse.

        Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.

        :return: The is_anomaly of this LastDetectResponse.
        :rtype: bool
        """
        return self._is_anomaly

    @is_anomaly.setter
    def is_anomaly(self, is_anomaly):
        """Sets the is_anomaly of this LastDetectResponse.

        Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.

        :param is_anomaly: The is_anomaly of this LastDetectResponse.
        :type is_anomaly: bool
        """

        self._is_anomaly = is_anomaly

    @property
    def is_negative_anomaly(self):
        """Gets the is_negative_anomaly of this LastDetectResponse.

        Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.

        :return: The is_negative_anomaly of this LastDetectResponse.
        :rtype: bool
        """
        return self._is_negative_anomaly

    @is_negative_anomaly.setter
    def is_negative_anomaly(self, is_negative_anomaly):
        """Sets the is_negative_anomaly of this LastDetectResponse.

        Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.

        :param is_negative_anomaly: The is_negative_anomaly of this LastDetectResponse.
        :type is_negative_anomaly: bool
        """

        self._is_negative_anomaly = is_negative_anomaly

    @property
    def is_positive_anomaly(self):
        """Gets the is_positive_anomaly of this LastDetectResponse.

        Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.

        :return: The is_positive_anomaly of this LastDetectResponse.
        :rtype: bool
        """
        return self._is_positive_anomaly

    @is_positive_anomaly.setter
    def is_positive_anomaly(self, is_positive_anomaly):
        """Sets the is_positive_anomaly of this LastDetectResponse.

        Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.

        :param is_positive_anomaly: The is_positive_anomaly of this LastDetectResponse.
        :type is_positive_anomaly: bool
        """

        self._is_positive_anomaly = is_positive_anomaly

    @property
    def lower_margin(self):
        """Gets the lower_margin of this LastDetectResponse.

        Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. 

        :return: The lower_margin of this LastDetectResponse.
        :rtype: float
        """
        return self._lower_margin

    @lower_margin.setter
    def lower_margin(self, lower_margin):
        """Sets the lower_margin of this LastDetectResponse.

        Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. 

        :param lower_margin: The lower_margin of this LastDetectResponse.
        :type lower_margin: float
        """

        self._lower_margin = lower_margin

    @property
    def period(self):
        """Gets the period of this LastDetectResponse.

        Frequency extracted from the series, zero means no recurrent pattern has been found.

        :return: The period of this LastDetectResponse.
        :rtype: int
        """
        return self._period

    @period.setter
    def period(self, period):
        """Sets the period of this LastDetectResponse.

        Frequency extracted from the series, zero means no recurrent pattern has been found.

        :param period: The period of this LastDetectResponse.
        :type period: int
        """

        self._period = period

    @property
    def suggested_window(self):
        """Gets the suggested_window of this LastDetectResponse.

        Suggested input series points needed for detecting the latest point.

        :return: The suggested_window of this LastDetectResponse.
        :rtype: int
        """
        return self._suggested_window

    @suggested_window.setter
    def suggested_window(self, suggested_window):
        """Sets the suggested_window of this LastDetectResponse.

        Suggested input series points needed for detecting the latest point.

        :param suggested_window: The suggested_window of this LastDetectResponse.
        :type suggested_window: int
        """

        self._suggested_window = suggested_window

    @property
    def upper_margin(self):
        """Gets the upper_margin of this LastDetectResponse.

        Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting sensitivity value, anomaly status of latest point can be changed.

        :return: The upper_margin of this LastDetectResponse.
        :rtype: float
        """
        return self._upper_margin

    @upper_margin.setter
    def upper_margin(self, upper_margin):
        """Sets the upper_margin of this LastDetectResponse.

        Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting sensitivity value, anomaly status of latest point can be changed.

        :param upper_margin: The upper_margin of this LastDetectResponse.
        :type upper_margin: float
        """

        self._upper_margin = upper_margin
