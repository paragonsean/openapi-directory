/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEntireDetectResponse.h
 *
 * 
 */

#ifndef OAIEntireDetectResponse_H
#define OAIEntireDetectResponse_H

#include <QJsonObject>

#include <QList>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEntireDetectResponse : public OAIObject {
public:
    OAIEntireDetectResponse();
    OAIEntireDetectResponse(QString json);
    ~OAIEntireDetectResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<float> getExpectedValues() const;
    void setExpectedValues(const QList<float> &expected_values);
    bool is_expected_values_Set() const;
    bool is_expected_values_Valid() const;

    QList<bool> getIsAnomaly() const;
    void setIsAnomaly(const QList<bool> &is_anomaly);
    bool is_is_anomaly_Set() const;
    bool is_is_anomaly_Valid() const;

    QList<bool> getIsNegativeAnomaly() const;
    void setIsNegativeAnomaly(const QList<bool> &is_negative_anomaly);
    bool is_is_negative_anomaly_Set() const;
    bool is_is_negative_anomaly_Valid() const;

    QList<bool> getIsPositiveAnomaly() const;
    void setIsPositiveAnomaly(const QList<bool> &is_positive_anomaly);
    bool is_is_positive_anomaly_Set() const;
    bool is_is_positive_anomaly_Valid() const;

    QList<float> getLowerMargins() const;
    void setLowerMargins(const QList<float> &lower_margins);
    bool is_lower_margins_Set() const;
    bool is_lower_margins_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    QList<float> getUpperMargins() const;
    void setUpperMargins(const QList<float> &upper_margins);
    bool is_upper_margins_Set() const;
    bool is_upper_margins_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<float> m_expected_values;
    bool m_expected_values_isSet;
    bool m_expected_values_isValid;

    QList<bool> m_is_anomaly;
    bool m_is_anomaly_isSet;
    bool m_is_anomaly_isValid;

    QList<bool> m_is_negative_anomaly;
    bool m_is_negative_anomaly_isSet;
    bool m_is_negative_anomaly_isValid;

    QList<bool> m_is_positive_anomaly;
    bool m_is_positive_anomaly_isSet;
    bool m_is_positive_anomaly_isValid;

    QList<float> m_lower_margins;
    bool m_lower_margins_isSet;
    bool m_lower_margins_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    QList<float> m_upper_margins;
    bool m_upper_margins_isSet;
    bool m_upper_margins_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEntireDetectResponse)

#endif // OAIEntireDetectResponse_H
