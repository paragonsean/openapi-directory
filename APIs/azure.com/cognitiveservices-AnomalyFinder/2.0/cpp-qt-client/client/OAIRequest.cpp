/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRequest::OAIRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRequest::OAIRequest() {
    this->initializeModel();
}

OAIRequest::~OAIRequest() {}

void OAIRequest::initializeModel() {

    m_custom_interval_isSet = false;
    m_custom_interval_isValid = false;

    m_granularity_isSet = false;
    m_granularity_isValid = false;

    m_max_anomaly_ratio_isSet = false;
    m_max_anomaly_ratio_isValid = false;

    m_period_isSet = false;
    m_period_isValid = false;

    m_sensitivity_isSet = false;
    m_sensitivity_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;
}

void OAIRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRequest::fromJsonObject(QJsonObject json) {

    m_custom_interval_isValid = ::OpenAPI::fromJsonValue(m_custom_interval, json[QString("customInterval")]);
    m_custom_interval_isSet = !json[QString("customInterval")].isNull() && m_custom_interval_isValid;

    m_granularity_isValid = ::OpenAPI::fromJsonValue(m_granularity, json[QString("granularity")]);
    m_granularity_isSet = !json[QString("granularity")].isNull() && m_granularity_isValid;

    m_max_anomaly_ratio_isValid = ::OpenAPI::fromJsonValue(m_max_anomaly_ratio, json[QString("maxAnomalyRatio")]);
    m_max_anomaly_ratio_isSet = !json[QString("maxAnomalyRatio")].isNull() && m_max_anomaly_ratio_isValid;

    m_period_isValid = ::OpenAPI::fromJsonValue(m_period, json[QString("period")]);
    m_period_isSet = !json[QString("period")].isNull() && m_period_isValid;

    m_sensitivity_isValid = ::OpenAPI::fromJsonValue(m_sensitivity, json[QString("sensitivity")]);
    m_sensitivity_isSet = !json[QString("sensitivity")].isNull() && m_sensitivity_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;
}

QString OAIRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_custom_interval_isSet) {
        obj.insert(QString("customInterval"), ::OpenAPI::toJsonValue(m_custom_interval));
    }
    if (m_granularity_isSet) {
        obj.insert(QString("granularity"), ::OpenAPI::toJsonValue(m_granularity));
    }
    if (m_max_anomaly_ratio_isSet) {
        obj.insert(QString("maxAnomalyRatio"), ::OpenAPI::toJsonValue(m_max_anomaly_ratio));
    }
    if (m_period_isSet) {
        obj.insert(QString("period"), ::OpenAPI::toJsonValue(m_period));
    }
    if (m_sensitivity_isSet) {
        obj.insert(QString("sensitivity"), ::OpenAPI::toJsonValue(m_sensitivity));
    }
    if (m_series.size() > 0) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    return obj;
}

qint32 OAIRequest::getCustomInterval() const {
    return m_custom_interval;
}
void OAIRequest::setCustomInterval(const qint32 &custom_interval) {
    m_custom_interval = custom_interval;
    m_custom_interval_isSet = true;
}

bool OAIRequest::is_custom_interval_Set() const{
    return m_custom_interval_isSet;
}

bool OAIRequest::is_custom_interval_Valid() const{
    return m_custom_interval_isValid;
}

QString OAIRequest::getGranularity() const {
    return m_granularity;
}
void OAIRequest::setGranularity(const QString &granularity) {
    m_granularity = granularity;
    m_granularity_isSet = true;
}

bool OAIRequest::is_granularity_Set() const{
    return m_granularity_isSet;
}

bool OAIRequest::is_granularity_Valid() const{
    return m_granularity_isValid;
}

float OAIRequest::getMaxAnomalyRatio() const {
    return m_max_anomaly_ratio;
}
void OAIRequest::setMaxAnomalyRatio(const float &max_anomaly_ratio) {
    m_max_anomaly_ratio = max_anomaly_ratio;
    m_max_anomaly_ratio_isSet = true;
}

bool OAIRequest::is_max_anomaly_ratio_Set() const{
    return m_max_anomaly_ratio_isSet;
}

bool OAIRequest::is_max_anomaly_ratio_Valid() const{
    return m_max_anomaly_ratio_isValid;
}

qint32 OAIRequest::getPeriod() const {
    return m_period;
}
void OAIRequest::setPeriod(const qint32 &period) {
    m_period = period;
    m_period_isSet = true;
}

bool OAIRequest::is_period_Set() const{
    return m_period_isSet;
}

bool OAIRequest::is_period_Valid() const{
    return m_period_isValid;
}

qint32 OAIRequest::getSensitivity() const {
    return m_sensitivity;
}
void OAIRequest::setSensitivity(const qint32 &sensitivity) {
    m_sensitivity = sensitivity;
    m_sensitivity_isSet = true;
}

bool OAIRequest::is_sensitivity_Set() const{
    return m_sensitivity_isSet;
}

bool OAIRequest::is_sensitivity_Valid() const{
    return m_sensitivity_isValid;
}

QList<OAIPoint> OAIRequest::getSeries() const {
    return m_series;
}
void OAIRequest::setSeries(const QList<OAIPoint> &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIRequest::is_series_Set() const{
    return m_series_isSet;
}

bool OAIRequest::is_series_Valid() const{
    return m_series_isValid;
}

bool OAIRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_custom_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_granularity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_anomaly_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_period_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensitivity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_granularity_isValid && m_series_isValid && true;
}

} // namespace OpenAPI
