/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPoint.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPoint::OAIPoint(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPoint::OAIPoint() {
    this->initializeModel();
}

OAIPoint::~OAIPoint() {}

void OAIPoint::initializeModel() {

    m_timestamp_isSet = false;
    m_timestamp_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIPoint::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPoint::fromJsonObject(QJsonObject json) {

    m_timestamp_isValid = ::OpenAPI::fromJsonValue(m_timestamp, json[QString("timestamp")]);
    m_timestamp_isSet = !json[QString("timestamp")].isNull() && m_timestamp_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIPoint::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPoint::asJsonObject() const {
    QJsonObject obj;
    if (m_timestamp_isSet) {
        obj.insert(QString("timestamp"), ::OpenAPI::toJsonValue(m_timestamp));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QDateTime OAIPoint::getTimestamp() const {
    return m_timestamp;
}
void OAIPoint::setTimestamp(const QDateTime &timestamp) {
    m_timestamp = timestamp;
    m_timestamp_isSet = true;
}

bool OAIPoint::is_timestamp_Set() const{
    return m_timestamp_isSet;
}

bool OAIPoint::is_timestamp_Valid() const{
    return m_timestamp_isValid;
}

float OAIPoint::getValue() const {
    return m_value;
}
void OAIPoint::setValue(const float &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIPoint::is_value_Set() const{
    return m_value_isSet;
}

bool OAIPoint::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIPoint::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPoint::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_timestamp_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
