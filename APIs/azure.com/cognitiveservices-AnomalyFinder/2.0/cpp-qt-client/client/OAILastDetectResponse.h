/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAILastDetectResponse.h
 *
 * 
 */

#ifndef OAILastDetectResponse_H
#define OAILastDetectResponse_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAILastDetectResponse : public OAIObject {
public:
    OAILastDetectResponse();
    OAILastDetectResponse(QString json);
    ~OAILastDetectResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    float getExpectedValue() const;
    void setExpectedValue(const float &expected_value);
    bool is_expected_value_Set() const;
    bool is_expected_value_Valid() const;

    bool isIsAnomaly() const;
    void setIsAnomaly(const bool &is_anomaly);
    bool is_is_anomaly_Set() const;
    bool is_is_anomaly_Valid() const;

    bool isIsNegativeAnomaly() const;
    void setIsNegativeAnomaly(const bool &is_negative_anomaly);
    bool is_is_negative_anomaly_Set() const;
    bool is_is_negative_anomaly_Valid() const;

    bool isIsPositiveAnomaly() const;
    void setIsPositiveAnomaly(const bool &is_positive_anomaly);
    bool is_is_positive_anomaly_Set() const;
    bool is_is_positive_anomaly_Valid() const;

    float getLowerMargin() const;
    void setLowerMargin(const float &lower_margin);
    bool is_lower_margin_Set() const;
    bool is_lower_margin_Valid() const;

    qint32 getPeriod() const;
    void setPeriod(const qint32 &period);
    bool is_period_Set() const;
    bool is_period_Valid() const;

    qint32 getSuggestedWindow() const;
    void setSuggestedWindow(const qint32 &suggested_window);
    bool is_suggested_window_Set() const;
    bool is_suggested_window_Valid() const;

    float getUpperMargin() const;
    void setUpperMargin(const float &upper_margin);
    bool is_upper_margin_Set() const;
    bool is_upper_margin_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    float m_expected_value;
    bool m_expected_value_isSet;
    bool m_expected_value_isValid;

    bool m_is_anomaly;
    bool m_is_anomaly_isSet;
    bool m_is_anomaly_isValid;

    bool m_is_negative_anomaly;
    bool m_is_negative_anomaly_isSet;
    bool m_is_negative_anomaly_isValid;

    bool m_is_positive_anomaly;
    bool m_is_positive_anomaly_isSet;
    bool m_is_positive_anomaly_isValid;

    float m_lower_margin;
    bool m_lower_margin_isSet;
    bool m_lower_margin_isValid;

    qint32 m_period;
    bool m_period_isSet;
    bool m_period_isValid;

    qint32 m_suggested_window;
    bool m_suggested_window_isSet;
    bool m_suggested_window_isValid;

    float m_upper_margin;
    bool m_upper_margin_isSet;
    bool m_upper_margin_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAILastDetectResponse)

#endif // OAILastDetectResponse_H
