/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import EntireDetectResponse from '../model/EntireDetectResponse';
import LastDetectResponse from '../model/LastDetectResponse';
import Request from '../model/Request';

/**
* Default service.
* @module api/DefaultApi
* @version 2.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the entireDetect operation.
     * @callback module:api/DefaultApi~entireDetectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntireDetectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find anomalies for the entire series in batch.
     * The operation will generate a model using the entire series, each point will be detected with the same model. In this method, points before and after a certain point will be used to determine whether it's an anomaly. The entire detection can give user an overall status of the time series.
     * @param {module:model/Request} body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param {module:api/DefaultApi~entireDetectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntireDetectResponse}
     */
    entireDetect(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling entireDetect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntireDetectResponse;
      return this.apiClient.callApi(
        '/timeseries/entire/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lastDetect operation.
     * @callback module:api/DefaultApi~lastDetectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LastDetectResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect anomaly status of the latest point in time series.
     * The operation will generate a model using points before the latest one, In this method, only history points are used for determine whether the target point is an anomaly. Latest point detecting matches the scenario of real-time monitoring of business metrics.
     * @param {module:model/Request} body Time series points and period if needed. Advanced model parameters can also be set in the request.
     * @param {module:api/DefaultApi~lastDetectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LastDetectResponse}
     */
    lastDetect(body, callback) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling lastDetect");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apiKeyHeader'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LastDetectResponse;
      return this.apiClient.callApi(
        '/timeseries/last/detect', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
