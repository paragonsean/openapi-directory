/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from './ApiClient';
import APIError from './model/APIError';
import EntireDetectResponse from './model/EntireDetectResponse';
import LastDetectResponse from './model/LastDetectResponse';
import Point from './model/Point';
import Request from './model/Request';
import DefaultApi from './api/DefaultApi';


/**
* The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis..<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var AnomalyFinderClient = require('index'); // See note below*.
* var xxxSvc = new AnomalyFinderClient.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new AnomalyFinderClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new AnomalyFinderClient.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new AnomalyFinderClient.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 2.0
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The APIError model constructor.
     * @property {module:model/APIError}
     */
    APIError,

    /**
     * The EntireDetectResponse model constructor.
     * @property {module:model/EntireDetectResponse}
     */
    EntireDetectResponse,

    /**
     * The LastDetectResponse model constructor.
     * @property {module:model/LastDetectResponse}
     */
    LastDetectResponse,

    /**
     * The Point model constructor.
     * @property {module:model/Point}
     */
    Point,

    /**
     * The Request model constructor.
     * @property {module:model/Request}
     */
    Request,

    /**
    * The DefaultApi service constructor.
    * @property {module:api/DefaultApi}
    */
    DefaultApi
};
