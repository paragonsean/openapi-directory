/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Point from './Point';

/**
 * The Request model module.
 * @module model/Request
 * @version 2.0
 */
class Request {
    /**
     * Constructs a new <code>Request</code>.
     * @alias module:model/Request
     * @param granularity {module:model/Request.GranularityEnum} Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.
     * @param series {Array.<module:model/Point>} Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.
     */
    constructor(granularity, series) { 
        
        Request.initialize(this, granularity, series);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, granularity, series) { 
        obj['granularity'] = granularity;
        obj['series'] = series;
    }

    /**
     * Constructs a <code>Request</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Request} obj Optional instance to populate.
     * @return {module:model/Request} The populated <code>Request</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Request();

            if (data.hasOwnProperty('customInterval')) {
                obj['customInterval'] = ApiClient.convertToType(data['customInterval'], 'Number');
            }
            if (data.hasOwnProperty('granularity')) {
                obj['granularity'] = ApiClient.convertToType(data['granularity'], 'String');
            }
            if (data.hasOwnProperty('maxAnomalyRatio')) {
                obj['maxAnomalyRatio'] = ApiClient.convertToType(data['maxAnomalyRatio'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('sensitivity')) {
                obj['sensitivity'] = ApiClient.convertToType(data['sensitivity'], 'Number');
            }
            if (data.hasOwnProperty('series')) {
                obj['series'] = ApiClient.convertToType(data['series'], [Point]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Request</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Request</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Request.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['granularity'] && !(typeof data['granularity'] === 'string' || data['granularity'] instanceof String)) {
            throw new Error("Expected the field `granularity` to be a primitive type in the JSON string but got " + data['granularity']);
        }
        if (data['series']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['series'])) {
                throw new Error("Expected the field `series` to be an array in the JSON data but got " + data['series']);
            }
            // validate the optional field `series` (array)
            for (const item of data['series']) {
                Point.validateJSON(item);
            };
        }

        return true;
    }


}

Request.RequiredProperties = ["granularity", "series"];

/**
 * Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}.
 * @member {Number} customInterval
 */
Request.prototype['customInterval'] = undefined;

/**
 * Can only be one of yearly, monthly, weekly, daily, hourly or minutely. Granularity is used for verify whether input series is valid.
 * @member {module:model/Request.GranularityEnum} granularity
 */
Request.prototype['granularity'] = undefined;

/**
 * Optional argument, advanced model parameter, max anomaly ratio in a time series.
 * @member {Number} maxAnomalyRatio
 */
Request.prototype['maxAnomalyRatio'] = undefined;

/**
 * Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically.
 * @member {Number} period
 */
Request.prototype['period'] = undefined;

/**
 * Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted.
 * @member {Number} sensitivity
 */
Request.prototype['sensitivity'] = undefined;

/**
 * Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned.
 * @member {Array.<module:model/Point>} series
 */
Request.prototype['series'] = undefined;





/**
 * Allowed values for the <code>granularity</code> property.
 * @enum {String}
 * @readonly
 */
Request['GranularityEnum'] = {

    /**
     * value: "yearly"
     * @const
     */
    "yearly": "yearly",

    /**
     * value: "monthly"
     * @const
     */
    "monthly": "monthly",

    /**
     * value: "weekly"
     * @const
     */
    "weekly": "weekly",

    /**
     * value: "daily"
     * @const
     */
    "daily": "daily",

    /**
     * value: "hourly"
     * @const
     */
    "hourly": "hourly",

    /**
     * value: "minutely"
     * @const
     */
    "minutely": "minutely"
};



export default Request;

