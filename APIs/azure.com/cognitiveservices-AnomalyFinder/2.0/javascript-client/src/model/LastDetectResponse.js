/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LastDetectResponse model module.
 * @module model/LastDetectResponse
 * @version 2.0
 */
class LastDetectResponse {
    /**
     * Constructs a new <code>LastDetectResponse</code>.
     * @alias module:model/LastDetectResponse
     */
    constructor() { 
        
        LastDetectResponse.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LastDetectResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LastDetectResponse} obj Optional instance to populate.
     * @return {module:model/LastDetectResponse} The populated <code>LastDetectResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LastDetectResponse();

            if (data.hasOwnProperty('expectedValue')) {
                obj['expectedValue'] = ApiClient.convertToType(data['expectedValue'], 'Number');
            }
            if (data.hasOwnProperty('isAnomaly')) {
                obj['isAnomaly'] = ApiClient.convertToType(data['isAnomaly'], 'Boolean');
            }
            if (data.hasOwnProperty('isNegativeAnomaly')) {
                obj['isNegativeAnomaly'] = ApiClient.convertToType(data['isNegativeAnomaly'], 'Boolean');
            }
            if (data.hasOwnProperty('isPositiveAnomaly')) {
                obj['isPositiveAnomaly'] = ApiClient.convertToType(data['isPositiveAnomaly'], 'Boolean');
            }
            if (data.hasOwnProperty('lowerMargin')) {
                obj['lowerMargin'] = ApiClient.convertToType(data['lowerMargin'], 'Number');
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('suggestedWindow')) {
                obj['suggestedWindow'] = ApiClient.convertToType(data['suggestedWindow'], 'Number');
            }
            if (data.hasOwnProperty('upperMargin')) {
                obj['upperMargin'] = ApiClient.convertToType(data['upperMargin'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LastDetectResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LastDetectResponse</code>.
     */
    static validateJSON(data) {

        return true;
    }


}



/**
 * Expected value of the latest point.
 * @member {Number} expectedValue
 */
LastDetectResponse.prototype['expectedValue'] = undefined;

/**
 * Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction.
 * @member {Boolean} isAnomaly
 */
LastDetectResponse.prototype['isAnomaly'] = undefined;

/**
 * Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one.
 * @member {Boolean} isNegativeAnomaly
 */
LastDetectResponse.prototype['isNegativeAnomaly'] = undefined;

/**
 * Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one.
 * @member {Boolean} isPositiveAnomaly
 */
LastDetectResponse.prototype['isPositiveAnomaly'] = undefined;

/**
 * Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. 
 * @member {Number} lowerMargin
 */
LastDetectResponse.prototype['lowerMargin'] = undefined;

/**
 * Frequency extracted from the series, zero means no recurrent pattern has been found.
 * @member {Number} period
 */
LastDetectResponse.prototype['period'] = undefined;

/**
 * Suggested input series points needed for detecting the latest point.
 * @member {Number} suggestedWindow
 */
LastDetectResponse.prototype['suggestedWindow'] = undefined;

/**
 * Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting sensitivity value, anomaly status of latest point can be changed.
 * @member {Number} upperMargin
 */
LastDetectResponse.prototype['upperMargin'] = undefined;






export default LastDetectResponse;

