/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EntireDetectResponse model module.
 * @module model/EntireDetectResponse
 * @version 2.0
 */
class EntireDetectResponse {
    /**
     * Constructs a new <code>EntireDetectResponse</code>.
     * @alias module:model/EntireDetectResponse
     * @param expectedValues {Array.<Number>} ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.
     * @param isAnomaly {Array.<Boolean>} IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.
     * @param isNegativeAnomaly {Array.<Boolean>} IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.
     * @param isPositiveAnomaly {Array.<Boolean>} IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.
     * @param lowerMargins {Array.<Number>} LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.
     * @param period {Number} Frequency extracted from the series, zero means no recurrent pattern has been found.
     * @param upperMargins {Array.<Number>} UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting sensitivity value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.
     */
    constructor(expectedValues, isAnomaly, isNegativeAnomaly, isPositiveAnomaly, lowerMargins, period, upperMargins) { 
        
        EntireDetectResponse.initialize(this, expectedValues, isAnomaly, isNegativeAnomaly, isPositiveAnomaly, lowerMargins, period, upperMargins);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expectedValues, isAnomaly, isNegativeAnomaly, isPositiveAnomaly, lowerMargins, period, upperMargins) { 
        obj['expectedValues'] = expectedValues;
        obj['isAnomaly'] = isAnomaly;
        obj['isNegativeAnomaly'] = isNegativeAnomaly;
        obj['isPositiveAnomaly'] = isPositiveAnomaly;
        obj['lowerMargins'] = lowerMargins;
        obj['period'] = period;
        obj['upperMargins'] = upperMargins;
    }

    /**
     * Constructs a <code>EntireDetectResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EntireDetectResponse} obj Optional instance to populate.
     * @return {module:model/EntireDetectResponse} The populated <code>EntireDetectResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EntireDetectResponse();

            if (data.hasOwnProperty('expectedValues')) {
                obj['expectedValues'] = ApiClient.convertToType(data['expectedValues'], ['Number']);
            }
            if (data.hasOwnProperty('isAnomaly')) {
                obj['isAnomaly'] = ApiClient.convertToType(data['isAnomaly'], ['Boolean']);
            }
            if (data.hasOwnProperty('isNegativeAnomaly')) {
                obj['isNegativeAnomaly'] = ApiClient.convertToType(data['isNegativeAnomaly'], ['Boolean']);
            }
            if (data.hasOwnProperty('isPositiveAnomaly')) {
                obj['isPositiveAnomaly'] = ApiClient.convertToType(data['isPositiveAnomaly'], ['Boolean']);
            }
            if (data.hasOwnProperty('lowerMargins')) {
                obj['lowerMargins'] = ApiClient.convertToType(data['lowerMargins'], ['Number']);
            }
            if (data.hasOwnProperty('period')) {
                obj['period'] = ApiClient.convertToType(data['period'], 'Number');
            }
            if (data.hasOwnProperty('upperMargins')) {
                obj['upperMargins'] = ApiClient.convertToType(data['upperMargins'], ['Number']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EntireDetectResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EntireDetectResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EntireDetectResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['expectedValues'])) {
            throw new Error("Expected the field `expectedValues` to be an array in the JSON data but got " + data['expectedValues']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['isAnomaly'])) {
            throw new Error("Expected the field `isAnomaly` to be an array in the JSON data but got " + data['isAnomaly']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['isNegativeAnomaly'])) {
            throw new Error("Expected the field `isNegativeAnomaly` to be an array in the JSON data but got " + data['isNegativeAnomaly']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['isPositiveAnomaly'])) {
            throw new Error("Expected the field `isPositiveAnomaly` to be an array in the JSON data but got " + data['isPositiveAnomaly']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lowerMargins'])) {
            throw new Error("Expected the field `lowerMargins` to be an array in the JSON data but got " + data['lowerMargins']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['upperMargins'])) {
            throw new Error("Expected the field `upperMargins` to be an array in the JSON data but got " + data['upperMargins']);
        }

        return true;
    }


}

EntireDetectResponse.RequiredProperties = ["expectedValues", "isAnomaly", "isNegativeAnomaly", "isPositiveAnomaly", "lowerMargins", "period", "upperMargins"];

/**
 * ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series.
 * @member {Array.<Number>} expectedValues
 */
EntireDetectResponse.prototype['expectedValues'] = undefined;

/**
 * IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series.
 * @member {Array.<Boolean>} isAnomaly
 */
EntireDetectResponse.prototype['isAnomaly'] = undefined;

/**
 * IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series.
 * @member {Array.<Boolean>} isNegativeAnomaly
 */
EntireDetectResponse.prototype['isNegativeAnomaly'] = undefined;

/**
 * IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series.
 * @member {Array.<Boolean>} isPositiveAnomaly
 */
EntireDetectResponse.prototype['isPositiveAnomaly'] = undefined;

/**
 * LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - sensitivity)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series.
 * @member {Array.<Number>} lowerMargins
 */
EntireDetectResponse.prototype['lowerMargins'] = undefined;

/**
 * Frequency extracted from the series, zero means no recurrent pattern has been found.
 * @member {Number} period
 */
EntireDetectResponse.prototype['period'] = undefined;

/**
 * UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - sensitivity)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting sensitivity value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series.
 * @member {Array.<Number>} upperMargins
 */
EntireDetectResponse.prototype['upperMargins'] = undefined;






export default EntireDetectResponse;

