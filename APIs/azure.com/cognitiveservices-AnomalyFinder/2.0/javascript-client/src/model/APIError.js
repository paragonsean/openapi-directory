/**
 * Anomaly Finder Client
 * The Anomaly Finder API detects anomalies automatically in time series data. It supports two functionalities, one is for detecting the whole series with model trained by the timeseries, another is detecting last point with model trained by points before. By using this service, business customers can discover incidents and establish a logic flow for root cause analysis.
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The APIError model module.
 * @module model/APIError
 * @version 2.0
 */
class APIError {
    /**
     * Constructs a new <code>APIError</code>.
     * Error information returned by the API.
     * @alias module:model/APIError
     */
    constructor() { 
        
        APIError.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>APIError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/APIError} obj Optional instance to populate.
     * @return {module:model/APIError} The populated <code>APIError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new APIError();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>APIError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>APIError</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }

        return true;
    }


}



/**
 * The error code.
 * @member {module:model/APIError.CodeEnum} code
 */
APIError.prototype['code'] = undefined;

/**
 * A message explaining the error reported by the service.
 * @member {String} message
 */
APIError.prototype['message'] = undefined;





/**
 * Allowed values for the <code>code</code> property.
 * @enum {String}
 * @readonly
 */
APIError['CodeEnum'] = {

    /**
     * value: "InvalidCustomInterval"
     * @const
     */
    "InvalidCustomInterval": "InvalidCustomInterval",

    /**
     * value: "BadArgument"
     * @const
     */
    "BadArgument": "BadArgument",

    /**
     * value: "InvalidGranularity"
     * @const
     */
    "InvalidGranularity": "InvalidGranularity",

    /**
     * value: "InvalidPeriod"
     * @const
     */
    "InvalidPeriod": "InvalidPeriod",

    /**
     * value: "InvalidModelArgument"
     * @const
     */
    "InvalidModelArgument": "InvalidModelArgument",

    /**
     * value: "InvalidSeries"
     * @const
     */
    "InvalidSeries": "InvalidSeries"
};



export default APIError;

