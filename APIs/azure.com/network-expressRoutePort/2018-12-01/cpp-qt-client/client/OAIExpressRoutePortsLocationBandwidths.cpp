/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRoutePortsLocationBandwidths.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRoutePortsLocationBandwidths::OAIExpressRoutePortsLocationBandwidths(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRoutePortsLocationBandwidths::OAIExpressRoutePortsLocationBandwidths() {
    this->initializeModel();
}

OAIExpressRoutePortsLocationBandwidths::~OAIExpressRoutePortsLocationBandwidths() {}

void OAIExpressRoutePortsLocationBandwidths::initializeModel() {

    m_offer_name_isSet = false;
    m_offer_name_isValid = false;

    m_value_in_gbps_isSet = false;
    m_value_in_gbps_isValid = false;
}

void OAIExpressRoutePortsLocationBandwidths::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRoutePortsLocationBandwidths::fromJsonObject(QJsonObject json) {

    m_offer_name_isValid = ::OpenAPI::fromJsonValue(m_offer_name, json[QString("offerName")]);
    m_offer_name_isSet = !json[QString("offerName")].isNull() && m_offer_name_isValid;

    m_value_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_value_in_gbps, json[QString("valueInGbps")]);
    m_value_in_gbps_isSet = !json[QString("valueInGbps")].isNull() && m_value_in_gbps_isValid;
}

QString OAIExpressRoutePortsLocationBandwidths::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRoutePortsLocationBandwidths::asJsonObject() const {
    QJsonObject obj;
    if (m_offer_name_isSet) {
        obj.insert(QString("offerName"), ::OpenAPI::toJsonValue(m_offer_name));
    }
    if (m_value_in_gbps_isSet) {
        obj.insert(QString("valueInGbps"), ::OpenAPI::toJsonValue(m_value_in_gbps));
    }
    return obj;
}

QString OAIExpressRoutePortsLocationBandwidths::getOfferName() const {
    return m_offer_name;
}
void OAIExpressRoutePortsLocationBandwidths::setOfferName(const QString &offer_name) {
    m_offer_name = offer_name;
    m_offer_name_isSet = true;
}

bool OAIExpressRoutePortsLocationBandwidths::is_offer_name_Set() const{
    return m_offer_name_isSet;
}

bool OAIExpressRoutePortsLocationBandwidths::is_offer_name_Valid() const{
    return m_offer_name_isValid;
}

qint32 OAIExpressRoutePortsLocationBandwidths::getValueInGbps() const {
    return m_value_in_gbps;
}
void OAIExpressRoutePortsLocationBandwidths::setValueInGbps(const qint32 &value_in_gbps) {
    m_value_in_gbps = value_in_gbps;
    m_value_in_gbps_isSet = true;
}

bool OAIExpressRoutePortsLocationBandwidths::is_value_in_gbps_Set() const{
    return m_value_in_gbps_isSet;
}

bool OAIExpressRoutePortsLocationBandwidths::is_value_in_gbps_Valid() const{
    return m_value_in_gbps_isValid;
}

bool OAIExpressRoutePortsLocationBandwidths::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_offer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRoutePortsLocationBandwidths::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
