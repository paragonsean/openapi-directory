# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteLinkPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, admin_state: str=None, connector_type: str=None, interface_name: str=None, patch_panel_id: str=None, provisioning_state: str=None, rack_id: str=None, router_name: str=None):
        """ExpressRouteLinkPropertiesFormat - a model defined in OpenAPI

        :param admin_state: The admin_state of this ExpressRouteLinkPropertiesFormat.
        :param connector_type: The connector_type of this ExpressRouteLinkPropertiesFormat.
        :param interface_name: The interface_name of this ExpressRouteLinkPropertiesFormat.
        :param patch_panel_id: The patch_panel_id of this ExpressRouteLinkPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ExpressRouteLinkPropertiesFormat.
        :param rack_id: The rack_id of this ExpressRouteLinkPropertiesFormat.
        :param router_name: The router_name of this ExpressRouteLinkPropertiesFormat.
        """
        self.openapi_types = {
            'admin_state': str,
            'connector_type': str,
            'interface_name': str,
            'patch_panel_id': str,
            'provisioning_state': str,
            'rack_id': str,
            'router_name': str
        }

        self.attribute_map = {
            'admin_state': 'adminState',
            'connector_type': 'connectorType',
            'interface_name': 'interfaceName',
            'patch_panel_id': 'patchPanelId',
            'provisioning_state': 'provisioningState',
            'rack_id': 'rackId',
            'router_name': 'routerName'
        }

        self._admin_state = admin_state
        self._connector_type = connector_type
        self._interface_name = interface_name
        self._patch_panel_id = patch_panel_id
        self._provisioning_state = provisioning_state
        self._rack_id = rack_id
        self._router_name = router_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteLinkPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteLinkPropertiesFormat of this ExpressRouteLinkPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def admin_state(self):
        """Gets the admin_state of this ExpressRouteLinkPropertiesFormat.

        Administrative state of the physical port

        :return: The admin_state of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._admin_state

    @admin_state.setter
    def admin_state(self, admin_state):
        """Sets the admin_state of this ExpressRouteLinkPropertiesFormat.

        Administrative state of the physical port

        :param admin_state: The admin_state of this ExpressRouteLinkPropertiesFormat.
        :type admin_state: str
        """
        allowed_values = ["Enabled", "Disabled"]  # noqa: E501
        if admin_state not in allowed_values:
            raise ValueError(
                "Invalid value for `admin_state` ({0}), must be one of {1}"
                .format(admin_state, allowed_values)
            )

        self._admin_state = admin_state

    @property
    def connector_type(self):
        """Gets the connector_type of this ExpressRouteLinkPropertiesFormat.

        Physical fiber port type.

        :return: The connector_type of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._connector_type

    @connector_type.setter
    def connector_type(self, connector_type):
        """Sets the connector_type of this ExpressRouteLinkPropertiesFormat.

        Physical fiber port type.

        :param connector_type: The connector_type of this ExpressRouteLinkPropertiesFormat.
        :type connector_type: str
        """
        allowed_values = ["LC", "SC"]  # noqa: E501
        if connector_type not in allowed_values:
            raise ValueError(
                "Invalid value for `connector_type` ({0}), must be one of {1}"
                .format(connector_type, allowed_values)
            )

        self._connector_type = connector_type

    @property
    def interface_name(self):
        """Gets the interface_name of this ExpressRouteLinkPropertiesFormat.

        Name of Azure router interface.

        :return: The interface_name of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._interface_name

    @interface_name.setter
    def interface_name(self, interface_name):
        """Sets the interface_name of this ExpressRouteLinkPropertiesFormat.

        Name of Azure router interface.

        :param interface_name: The interface_name of this ExpressRouteLinkPropertiesFormat.
        :type interface_name: str
        """

        self._interface_name = interface_name

    @property
    def patch_panel_id(self):
        """Gets the patch_panel_id of this ExpressRouteLinkPropertiesFormat.

        Mapping between physical port to patch panel port.

        :return: The patch_panel_id of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._patch_panel_id

    @patch_panel_id.setter
    def patch_panel_id(self, patch_panel_id):
        """Sets the patch_panel_id of this ExpressRouteLinkPropertiesFormat.

        Mapping between physical port to patch panel port.

        :param patch_panel_id: The patch_panel_id of this ExpressRouteLinkPropertiesFormat.
        :type patch_panel_id: str
        """

        self._patch_panel_id = patch_panel_id

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRouteLinkPropertiesFormat.

        The provisioning state of the ExpressRouteLink resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRouteLinkPropertiesFormat.

        The provisioning state of the ExpressRouteLink resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ExpressRouteLinkPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def rack_id(self):
        """Gets the rack_id of this ExpressRouteLinkPropertiesFormat.

        Mapping of physical patch panel to rack.

        :return: The rack_id of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._rack_id

    @rack_id.setter
    def rack_id(self, rack_id):
        """Sets the rack_id of this ExpressRouteLinkPropertiesFormat.

        Mapping of physical patch panel to rack.

        :param rack_id: The rack_id of this ExpressRouteLinkPropertiesFormat.
        :type rack_id: str
        """

        self._rack_id = rack_id

    @property
    def router_name(self):
        """Gets the router_name of this ExpressRouteLinkPropertiesFormat.

        Name of Azure router associated with physical port.

        :return: The router_name of this ExpressRouteLinkPropertiesFormat.
        :rtype: str
        """
        return self._router_name

    @router_name.setter
    def router_name(self, router_name):
        """Sets the router_name of this ExpressRouteLinkPropertiesFormat.

        Name of Azure router associated with physical port.

        :param router_name: The router_name of this ExpressRouteLinkPropertiesFormat.
        :type router_name: str
        """

        self._router_name = router_name
