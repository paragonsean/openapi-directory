/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ExpressRoutePort;
import org.openapitools.client.model.ExpressRoutePortListResult;
import org.openapitools.client.model.ExpressRoutePortsUpdateTagsRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpressRoutePortsApi
 */
@Disabled
public class ExpressRoutePortsApiTest {

    private final ExpressRoutePortsApi api = new ExpressRoutePortsApi();

    /**
     * Creates or updates the specified ExpressRoutePort resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRoutePortsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String expressRoutePortName = null;
        ExpressRoutePort parameters = null;
        ExpressRoutePort response = api.expressRoutePortsCreateOrUpdate(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified ExpressRoutePort resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRoutePortsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String expressRoutePortName = null;
        api.expressRoutePortsDelete(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName);
        // TODO: test validations
    }

    /**
     * Retrieves the requested ExpressRoutePort resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRoutePortsGetTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String expressRoutePortName = null;
        ExpressRoutePort response = api.expressRoutePortsGet(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName);
        // TODO: test validations
    }

    /**
     * List all the ExpressRoutePort resources in the specified subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRoutePortsListTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        ExpressRoutePortListResult response = api.expressRoutePortsList(subscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List all the ExpressRoutePort resources in the specified resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRoutePortsListByResourceGroupTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        ExpressRoutePortListResult response = api.expressRoutePortsListByResourceGroup(subscriptionId, apiVersion, resourceGroupName);
        // TODO: test validations
    }

    /**
     * Update ExpressRoutePort tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void expressRoutePortsUpdateTagsTest() throws ApiException {
        String subscriptionId = null;
        String apiVersion = null;
        String resourceGroupName = null;
        String expressRoutePortName = null;
        ExpressRoutePortsUpdateTagsRequest parameters = null;
        ExpressRoutePort response = api.expressRoutePortsUpdateTags(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters);
        // TODO: test validations
    }

}
