/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-06-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRoutePort;
import org.openapitools.client.model.ExpressRoutePortListResult;
import org.openapitools.client.model.ExpressRoutePortsUpdateTagsRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRoutePortsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRoutePortsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRoutePortsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRoutePortsCreateOrUpdate
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to the create ExpressRoutePort operation. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsCreateOrUpdateCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePort parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRoutePortName" + "}", localVarApiClient.escapeString(expressRoutePortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRoutePortsCreateOrUpdateValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePort parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRoutePortsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRoutePortsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'expressRoutePortName' is set
        if (expressRoutePortName == null) {
            throw new ApiException("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsCreateOrUpdate(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling expressRoutePortsCreateOrUpdate(Async)");
        }

        return expressRoutePortsCreateOrUpdateCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, _callback);

    }

    /**
     * 
     * Creates or updates the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to the create ExpressRoutePort operation. (required)
     * @return ExpressRoutePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRoutePort expressRoutePortsCreateOrUpdate(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePort parameters) throws ApiException {
        ApiResponse<ExpressRoutePort> localVarResp = expressRoutePortsCreateOrUpdateWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Creates or updates the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to the create ExpressRoutePort operation. (required)
     * @return ApiResponse&lt;ExpressRoutePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRoutePort> expressRoutePortsCreateOrUpdateWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePort parameters) throws ApiException {
        okhttp3.Call localVarCall = expressRoutePortsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, null);
        Type localVarReturnType = new TypeToken<ExpressRoutePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Creates or updates the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to the create ExpressRoutePort operation. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Create successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsCreateOrUpdateAsync(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePort parameters, final ApiCallback<ExpressRoutePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRoutePortsCreateOrUpdateValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRoutePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRoutePortsDelete
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsDeleteCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRoutePortName" + "}", localVarApiClient.escapeString(expressRoutePortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRoutePortsDeleteValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRoutePortsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRoutePortsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsDelete(Async)");
        }

        // verify the required parameter 'expressRoutePortName' is set
        if (expressRoutePortName == null) {
            throw new ApiException("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsDelete(Async)");
        }

        return expressRoutePortsDeleteCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, _callback);

    }

    /**
     * 
     * Deletes the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public void expressRoutePortsDelete(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName) throws ApiException {
        expressRoutePortsDeleteWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName);
    }

    /**
     * 
     * Deletes the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> expressRoutePortsDeleteWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName) throws ApiException {
        okhttp3.Call localVarCall = expressRoutePortsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Deletes the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Delete successful. </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted and the operation will complete asynchronously. </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Request successful. Resource does not exist. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsDeleteAsync(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRoutePortsDeleteValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRoutePortsGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of ExpressRoutePort. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRoutePortName" + "}", localVarApiClient.escapeString(expressRoutePortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRoutePortsGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRoutePortsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRoutePortsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsGet(Async)");
        }

        // verify the required parameter 'expressRoutePortName' is set
        if (expressRoutePortName == null) {
            throw new ApiException("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsGet(Async)");
        }

        return expressRoutePortsGetCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, _callback);

    }

    /**
     * 
     * Retrieves the requested ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of ExpressRoutePort. (required)
     * @return ExpressRoutePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRoutePort expressRoutePortsGet(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName) throws ApiException {
        ApiResponse<ExpressRoutePort> localVarResp = expressRoutePortsGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the requested ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of ExpressRoutePort. (required)
     * @return ApiResponse&lt;ExpressRoutePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRoutePort> expressRoutePortsGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName) throws ApiException {
        okhttp3.Call localVarCall = expressRoutePortsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, null);
        Type localVarReturnType = new TypeToken<ExpressRoutePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the requested ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of ExpressRoutePort. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback<ExpressRoutePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRoutePortsGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, _callback);
        Type localVarReturnType = new TypeToken<ExpressRoutePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRoutePortsList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsListCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePorts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRoutePortsListValidateBeforeCall(String subscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRoutePortsList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRoutePortsList(Async)");
        }

        return expressRoutePortsListCall(subscriptionId, apiVersion, _callback);

    }

    /**
     * 
     * List all the ExpressRoutePort resources in the specified subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ExpressRoutePortListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRoutePortListResult expressRoutePortsList(String subscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ExpressRoutePortListResult> localVarResp = expressRoutePortsListWithHttpInfo(subscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the ExpressRoutePort resources in the specified subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @return ApiResponse&lt;ExpressRoutePortListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRoutePortListResult> expressRoutePortsListWithHttpInfo(String subscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = expressRoutePortsListValidateBeforeCall(subscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ExpressRoutePortListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the ExpressRoutePort resources in the specified subscription.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsListAsync(String subscriptionId, String apiVersion, final ApiCallback<ExpressRoutePortListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRoutePortsListValidateBeforeCall(subscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ExpressRoutePortListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRoutePortsListByResourceGroup
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsListByResourceGroupCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRoutePortsListByResourceGroupValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRoutePortsListByResourceGroup(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRoutePortsListByResourceGroup(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsListByResourceGroup(Async)");
        }

        return expressRoutePortsListByResourceGroupCall(subscriptionId, apiVersion, resourceGroupName, _callback);

    }

    /**
     * 
     * List all the ExpressRoutePort resources in the specified resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @return ExpressRoutePortListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRoutePortListResult expressRoutePortsListByResourceGroup(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        ApiResponse<ExpressRoutePortListResult> localVarResp = expressRoutePortsListByResourceGroupWithHttpInfo(subscriptionId, apiVersion, resourceGroupName);
        return localVarResp.getData();
    }

    /**
     * 
     * List all the ExpressRoutePort resources in the specified resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @return ApiResponse&lt;ExpressRoutePortListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRoutePortListResult> expressRoutePortsListByResourceGroupWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName) throws ApiException {
        okhttp3.Call localVarCall = expressRoutePortsListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, null);
        Type localVarReturnType = new TypeToken<ExpressRoutePortListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List all the ExpressRoutePort resources in the specified resource group.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRoutePort resources. If there are no ExpressRoutePort resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsListByResourceGroupAsync(String subscriptionId, String apiVersion, String resourceGroupName, final ApiCallback<ExpressRoutePortListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRoutePortsListByResourceGroupValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, _callback);
        Type localVarReturnType = new TypeToken<ExpressRoutePortListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRoutePortsUpdateTags
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to update ExpressRoutePort resource tags. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsUpdateTagsCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePortsUpdateTagsRequest parameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = parameters;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRoutePortName" + "}", localVarApiClient.escapeString(expressRoutePortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRoutePortsUpdateTagsValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePortsUpdateTagsRequest parameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRoutePortsUpdateTags(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRoutePortsUpdateTags(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsUpdateTags(Async)");
        }

        // verify the required parameter 'expressRoutePortName' is set
        if (expressRoutePortName == null) {
            throw new ApiException("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsUpdateTags(Async)");
        }

        // verify the required parameter 'parameters' is set
        if (parameters == null) {
            throw new ApiException("Missing the required parameter 'parameters' when calling expressRoutePortsUpdateTags(Async)");
        }

        return expressRoutePortsUpdateTagsCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, _callback);

    }

    /**
     * 
     * Update ExpressRoutePort tags.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to update ExpressRoutePort resource tags. (required)
     * @return ExpressRoutePort
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRoutePort expressRoutePortsUpdateTags(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePortsUpdateTagsRequest parameters) throws ApiException {
        ApiResponse<ExpressRoutePort> localVarResp = expressRoutePortsUpdateTagsWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters);
        return localVarResp.getData();
    }

    /**
     * 
     * Update ExpressRoutePort tags.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to update ExpressRoutePort resource tags. (required)
     * @return ApiResponse&lt;ExpressRoutePort&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRoutePort> expressRoutePortsUpdateTagsWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePortsUpdateTagsRequest parameters) throws ApiException {
        okhttp3.Call localVarCall = expressRoutePortsUpdateTagsValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, null);
        Type localVarReturnType = new TypeToken<ExpressRoutePort>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update ExpressRoutePort tags.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param parameters Parameters supplied to update ExpressRoutePort resource tags. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Update successful. The operation returns the resulting ExpressRoutePort resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRoutePortsUpdateTagsAsync(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, ExpressRoutePortsUpdateTagsRequest parameters, final ApiCallback<ExpressRoutePort> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRoutePortsUpdateTagsValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, _callback);
        Type localVarReturnType = new TypeToken<ExpressRoutePort>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
