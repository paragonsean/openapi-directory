/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ExpressRouteLink from './ExpressRouteLink';
import ExpressRoutePortPropertiesFormatCircuitsInner from './ExpressRoutePortPropertiesFormatCircuitsInner';

/**
 * The ExpressRoutePortPropertiesFormat model module.
 * @module model/ExpressRoutePortPropertiesFormat
 * @version 2018-10-01
 */
class ExpressRoutePortPropertiesFormat {
    /**
     * Constructs a new <code>ExpressRoutePortPropertiesFormat</code>.
     * Properties specific to ExpressRoutePort resources.
     * @alias module:model/ExpressRoutePortPropertiesFormat
     */
    constructor() { 
        
        ExpressRoutePortPropertiesFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ExpressRoutePortPropertiesFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ExpressRoutePortPropertiesFormat} obj Optional instance to populate.
     * @return {module:model/ExpressRoutePortPropertiesFormat} The populated <code>ExpressRoutePortPropertiesFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ExpressRoutePortPropertiesFormat();

            if (data.hasOwnProperty('allocationDate')) {
                obj['allocationDate'] = ApiClient.convertToType(data['allocationDate'], 'String');
            }
            if (data.hasOwnProperty('bandwidthInGbps')) {
                obj['bandwidthInGbps'] = ApiClient.convertToType(data['bandwidthInGbps'], 'Number');
            }
            if (data.hasOwnProperty('circuits')) {
                obj['circuits'] = ApiClient.convertToType(data['circuits'], [ExpressRoutePortPropertiesFormatCircuitsInner]);
            }
            if (data.hasOwnProperty('encapsulation')) {
                obj['encapsulation'] = ApiClient.convertToType(data['encapsulation'], 'String');
            }
            if (data.hasOwnProperty('etherType')) {
                obj['etherType'] = ApiClient.convertToType(data['etherType'], 'String');
            }
            if (data.hasOwnProperty('links')) {
                obj['links'] = ApiClient.convertToType(data['links'], [ExpressRouteLink]);
            }
            if (data.hasOwnProperty('mtu')) {
                obj['mtu'] = ApiClient.convertToType(data['mtu'], 'String');
            }
            if (data.hasOwnProperty('peeringLocation')) {
                obj['peeringLocation'] = ApiClient.convertToType(data['peeringLocation'], 'String');
            }
            if (data.hasOwnProperty('provisionedBandwidthInGbps')) {
                obj['provisionedBandwidthInGbps'] = ApiClient.convertToType(data['provisionedBandwidthInGbps'], 'Number');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceGuid')) {
                obj['resourceGuid'] = ApiClient.convertToType(data['resourceGuid'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ExpressRoutePortPropertiesFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ExpressRoutePortPropertiesFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['allocationDate'] && !(typeof data['allocationDate'] === 'string' || data['allocationDate'] instanceof String)) {
            throw new Error("Expected the field `allocationDate` to be a primitive type in the JSON string but got " + data['allocationDate']);
        }
        if (data['circuits']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['circuits'])) {
                throw new Error("Expected the field `circuits` to be an array in the JSON data but got " + data['circuits']);
            }
            // validate the optional field `circuits` (array)
            for (const item of data['circuits']) {
                ExpressRoutePortPropertiesFormatCircuitsInner.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['encapsulation'] && !(typeof data['encapsulation'] === 'string' || data['encapsulation'] instanceof String)) {
            throw new Error("Expected the field `encapsulation` to be a primitive type in the JSON string but got " + data['encapsulation']);
        }
        // ensure the json data is a string
        if (data['etherType'] && !(typeof data['etherType'] === 'string' || data['etherType'] instanceof String)) {
            throw new Error("Expected the field `etherType` to be a primitive type in the JSON string but got " + data['etherType']);
        }
        if (data['links']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['links'])) {
                throw new Error("Expected the field `links` to be an array in the JSON data but got " + data['links']);
            }
            // validate the optional field `links` (array)
            for (const item of data['links']) {
                ExpressRouteLink.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['mtu'] && !(typeof data['mtu'] === 'string' || data['mtu'] instanceof String)) {
            throw new Error("Expected the field `mtu` to be a primitive type in the JSON string but got " + data['mtu']);
        }
        // ensure the json data is a string
        if (data['peeringLocation'] && !(typeof data['peeringLocation'] === 'string' || data['peeringLocation'] instanceof String)) {
            throw new Error("Expected the field `peeringLocation` to be a primitive type in the JSON string but got " + data['peeringLocation']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceGuid'] && !(typeof data['resourceGuid'] === 'string' || data['resourceGuid'] instanceof String)) {
            throw new Error("Expected the field `resourceGuid` to be a primitive type in the JSON string but got " + data['resourceGuid']);
        }

        return true;
    }


}



/**
 * Date of the physical port allocation to be used in Letter of Authorization.
 * @member {String} allocationDate
 */
ExpressRoutePortPropertiesFormat.prototype['allocationDate'] = undefined;

/**
 * Bandwidth of procured ports in Gbps
 * @member {Number} bandwidthInGbps
 */
ExpressRoutePortPropertiesFormat.prototype['bandwidthInGbps'] = undefined;

/**
 * Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.
 * @member {Array.<module:model/ExpressRoutePortPropertiesFormatCircuitsInner>} circuits
 */
ExpressRoutePortPropertiesFormat.prototype['circuits'] = undefined;

/**
 * Encapsulation method on physical ports.
 * @member {module:model/ExpressRoutePortPropertiesFormat.EncapsulationEnum} encapsulation
 */
ExpressRoutePortPropertiesFormat.prototype['encapsulation'] = undefined;

/**
 * Ether type of the physical port.
 * @member {String} etherType
 */
ExpressRoutePortPropertiesFormat.prototype['etherType'] = undefined;

/**
 * The set of physical links of the ExpressRoutePort resource
 * @member {Array.<module:model/ExpressRouteLink>} links
 */
ExpressRoutePortPropertiesFormat.prototype['links'] = undefined;

/**
 * Maximum transmission unit of the physical port pair(s)
 * @member {String} mtu
 */
ExpressRoutePortPropertiesFormat.prototype['mtu'] = undefined;

/**
 * The name of the peering location that the ExpressRoutePort is mapped to physically.
 * @member {String} peeringLocation
 */
ExpressRoutePortPropertiesFormat.prototype['peeringLocation'] = undefined;

/**
 * Aggregate Gbps of associated circuit bandwidths.
 * @member {Number} provisionedBandwidthInGbps
 */
ExpressRoutePortPropertiesFormat.prototype['provisionedBandwidthInGbps'] = undefined;

/**
 * The provisioning state of the ExpressRoutePort resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.
 * @member {String} provisioningState
 */
ExpressRoutePortPropertiesFormat.prototype['provisioningState'] = undefined;

/**
 * The resource GUID property of the ExpressRoutePort resource.
 * @member {String} resourceGuid
 */
ExpressRoutePortPropertiesFormat.prototype['resourceGuid'] = undefined;





/**
 * Allowed values for the <code>encapsulation</code> property.
 * @enum {String}
 * @readonly
 */
ExpressRoutePortPropertiesFormat['EncapsulationEnum'] = {

    /**
     * value: "Dot1Q"
     * @const
     */
    "Dot1Q": "Dot1Q",

    /**
     * value: "QinQ"
     * @const
     */
    "QinQ": "QinQ"
};



export default ExpressRoutePortPropertiesFormat;

