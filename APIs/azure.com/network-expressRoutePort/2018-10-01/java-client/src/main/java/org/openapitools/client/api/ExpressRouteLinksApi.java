/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-10-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ExpressRouteLink;
import org.openapitools.client.model.ExpressRouteLinkListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpressRouteLinksApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpressRouteLinksApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpressRouteLinksApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for expressRouteLinksGet
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param linkName The name of the ExpressRouteLink resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRouteLink resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteLinksGetCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, String linkName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}/links/{linkName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRoutePortName" + "}", localVarApiClient.escapeString(expressRoutePortName.toString()))
            .replace("{" + "linkName" + "}", localVarApiClient.escapeString(linkName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteLinksGetValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, String linkName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteLinksGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteLinksGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteLinksGet(Async)");
        }

        // verify the required parameter 'expressRoutePortName' is set
        if (expressRoutePortName == null) {
            throw new ApiException("Missing the required parameter 'expressRoutePortName' when calling expressRouteLinksGet(Async)");
        }

        // verify the required parameter 'linkName' is set
        if (linkName == null) {
            throw new ApiException("Missing the required parameter 'linkName' when calling expressRouteLinksGet(Async)");
        }

        return expressRouteLinksGetCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, linkName, _callback);

    }

    /**
     * 
     * Retrieves the specified ExpressRouteLink resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param linkName The name of the ExpressRouteLink resource. (required)
     * @return ExpressRouteLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRouteLink resource. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteLink expressRouteLinksGet(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, String linkName) throws ApiException {
        ApiResponse<ExpressRouteLink> localVarResp = expressRouteLinksGetWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, linkName);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieves the specified ExpressRouteLink resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param linkName The name of the ExpressRouteLink resource. (required)
     * @return ApiResponse&lt;ExpressRouteLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRouteLink resource. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteLink> expressRouteLinksGetWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, String linkName) throws ApiException {
        okhttp3.Call localVarCall = expressRouteLinksGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, linkName, null);
        Type localVarReturnType = new TypeToken<ExpressRouteLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieves the specified ExpressRouteLink resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param linkName The name of the ExpressRouteLink resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns the requested ExpressRouteLink resource. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteLinksGetAsync(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, String linkName, final ApiCallback<ExpressRouteLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteLinksGetValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, linkName, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for expressRouteLinksList
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteLink resources. If there are no ExpressRouteLink resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteLinksListCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}/links"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "expressRoutePortName" + "}", localVarApiClient.escapeString(expressRoutePortName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call expressRouteLinksListValidateBeforeCall(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling expressRouteLinksList(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling expressRouteLinksList(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling expressRouteLinksList(Async)");
        }

        // verify the required parameter 'expressRoutePortName' is set
        if (expressRoutePortName == null) {
            throw new ApiException("Missing the required parameter 'expressRoutePortName' when calling expressRouteLinksList(Async)");
        }

        return expressRouteLinksListCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, _callback);

    }

    /**
     * 
     * Retrieve the ExpressRouteLink sub-resources of the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @return ExpressRouteLinkListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteLink resources. If there are no ExpressRouteLink resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ExpressRouteLinkListResult expressRouteLinksList(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName) throws ApiException {
        ApiResponse<ExpressRouteLinkListResult> localVarResp = expressRouteLinksListWithHttpInfo(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve the ExpressRouteLink sub-resources of the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @return ApiResponse&lt;ExpressRouteLinkListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteLink resources. If there are no ExpressRouteLink resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExpressRouteLinkListResult> expressRouteLinksListWithHttpInfo(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName) throws ApiException {
        okhttp3.Call localVarCall = expressRouteLinksListValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, null);
        Type localVarReturnType = new TypeToken<ExpressRouteLinkListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve the ExpressRouteLink sub-resources of the specified ExpressRoutePort resource.
     * @param subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call. (required)
     * @param apiVersion Client API version. (required)
     * @param resourceGroupName The name of the resource group. (required)
     * @param expressRoutePortName The name of the ExpressRoutePort resource. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Request successful. The operation returns a list of ExpressRouteLink resources. If there are no ExpressRouteLink resources then an empty list is returned. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call expressRouteLinksListAsync(String subscriptionId, String apiVersion, String resourceGroupName, String expressRoutePortName, final ApiCallback<ExpressRouteLinkListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = expressRouteLinksListValidateBeforeCall(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, _callback);
        Type localVarReturnType = new TypeToken<ExpressRouteLinkListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
