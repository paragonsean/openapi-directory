/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties specific to ExpressRouteLink resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:28.109335-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteLinkPropertiesFormat {
  /**
   * Administrative state of the physical port
   */
  @JsonAdapter(AdminStateEnum.Adapter.class)
  public enum AdminStateEnum {
    ENABLED("Enabled"),
    
    DISABLED("Disabled");

    private String value;

    AdminStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdminStateEnum fromValue(String value) {
      for (AdminStateEnum b : AdminStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdminStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdminStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdminStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdminStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AdminStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADMIN_STATE = "adminState";
  @SerializedName(SERIALIZED_NAME_ADMIN_STATE)
  private AdminStateEnum adminState;

  /**
   * Physical fiber port type.
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    LC("LC"),
    
    SC("SC");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ConnectorTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private ConnectorTypeEnum connectorType;

  public static final String SERIALIZED_NAME_INTERFACE_NAME = "interfaceName";
  @SerializedName(SERIALIZED_NAME_INTERFACE_NAME)
  private String interfaceName;

  public static final String SERIALIZED_NAME_PATCH_PANEL_ID = "patchPanelId";
  @SerializedName(SERIALIZED_NAME_PATCH_PANEL_ID)
  private String patchPanelId;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public static final String SERIALIZED_NAME_RACK_ID = "rackId";
  @SerializedName(SERIALIZED_NAME_RACK_ID)
  private String rackId;

  public static final String SERIALIZED_NAME_ROUTER_NAME = "routerName";
  @SerializedName(SERIALIZED_NAME_ROUTER_NAME)
  private String routerName;

  public ExpressRouteLinkPropertiesFormat() {
  }

  public ExpressRouteLinkPropertiesFormat(
     ConnectorTypeEnum connectorType, 
     String interfaceName, 
     String patchPanelId, 
     String provisioningState, 
     String rackId, 
     String routerName
  ) {
    this();
    this.connectorType = connectorType;
    this.interfaceName = interfaceName;
    this.patchPanelId = patchPanelId;
    this.provisioningState = provisioningState;
    this.rackId = rackId;
    this.routerName = routerName;
  }

  public ExpressRouteLinkPropertiesFormat adminState(AdminStateEnum adminState) {
    this.adminState = adminState;
    return this;
  }

  /**
   * Administrative state of the physical port
   * @return adminState
   */
  @javax.annotation.Nullable
  public AdminStateEnum getAdminState() {
    return adminState;
  }

  public void setAdminState(AdminStateEnum adminState) {
    this.adminState = adminState;
  }


  /**
   * Physical fiber port type.
   * @return connectorType
   */
  @javax.annotation.Nullable
  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }



  /**
   * Name of Azure router interface.
   * @return interfaceName
   */
  @javax.annotation.Nullable
  public String getInterfaceName() {
    return interfaceName;
  }



  /**
   * Mapping between physical port to patch panel port.
   * @return patchPanelId
   */
  @javax.annotation.Nullable
  public String getPatchPanelId() {
    return patchPanelId;
  }



  /**
   * The provisioning state of the ExpressRouteLink resource. Possible values are: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }



  /**
   * Mapping of physical patch panel to rack.
   * @return rackId
   */
  @javax.annotation.Nullable
  public String getRackId() {
    return rackId;
  }



  /**
   * Name of Azure router associated with physical port.
   * @return routerName
   */
  @javax.annotation.Nullable
  public String getRouterName() {
    return routerName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteLinkPropertiesFormat expressRouteLinkPropertiesFormat = (ExpressRouteLinkPropertiesFormat) o;
    return Objects.equals(this.adminState, expressRouteLinkPropertiesFormat.adminState) &&
        Objects.equals(this.connectorType, expressRouteLinkPropertiesFormat.connectorType) &&
        Objects.equals(this.interfaceName, expressRouteLinkPropertiesFormat.interfaceName) &&
        Objects.equals(this.patchPanelId, expressRouteLinkPropertiesFormat.patchPanelId) &&
        Objects.equals(this.provisioningState, expressRouteLinkPropertiesFormat.provisioningState) &&
        Objects.equals(this.rackId, expressRouteLinkPropertiesFormat.rackId) &&
        Objects.equals(this.routerName, expressRouteLinkPropertiesFormat.routerName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adminState, connectorType, interfaceName, patchPanelId, provisioningState, rackId, routerName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteLinkPropertiesFormat {\n");
    sb.append("    adminState: ").append(toIndentedString(adminState)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    interfaceName: ").append(toIndentedString(interfaceName)).append("\n");
    sb.append("    patchPanelId: ").append(toIndentedString(patchPanelId)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    rackId: ").append(toIndentedString(rackId)).append("\n");
    sb.append("    routerName: ").append(toIndentedString(routerName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adminState");
    openapiFields.add("connectorType");
    openapiFields.add("interfaceName");
    openapiFields.add("patchPanelId");
    openapiFields.add("provisioningState");
    openapiFields.add("rackId");
    openapiFields.add("routerName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteLinkPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteLinkPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteLinkPropertiesFormat is not found in the empty JSON string", ExpressRouteLinkPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteLinkPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteLinkPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("adminState") != null && !jsonObj.get("adminState").isJsonNull()) && !jsonObj.get("adminState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adminState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adminState").toString()));
      }
      // validate the optional field `adminState`
      if (jsonObj.get("adminState") != null && !jsonObj.get("adminState").isJsonNull()) {
        AdminStateEnum.validateJsonElement(jsonObj.get("adminState"));
      }
      if ((jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) && !jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      // validate the optional field `connectorType`
      if (jsonObj.get("connectorType") != null && !jsonObj.get("connectorType").isJsonNull()) {
        ConnectorTypeEnum.validateJsonElement(jsonObj.get("connectorType"));
      }
      if ((jsonObj.get("interfaceName") != null && !jsonObj.get("interfaceName").isJsonNull()) && !jsonObj.get("interfaceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interfaceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interfaceName").toString()));
      }
      if ((jsonObj.get("patchPanelId") != null && !jsonObj.get("patchPanelId").isJsonNull()) && !jsonObj.get("patchPanelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `patchPanelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("patchPanelId").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      if ((jsonObj.get("rackId") != null && !jsonObj.get("rackId").isJsonNull()) && !jsonObj.get("rackId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rackId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rackId").toString()));
      }
      if ((jsonObj.get("routerName") != null && !jsonObj.get("routerName").isJsonNull()) && !jsonObj.get("routerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `routerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("routerName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteLinkPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteLinkPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteLinkPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteLinkPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteLinkPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ExpressRouteLinkPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteLinkPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteLinkPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteLinkPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteLinkPropertiesFormat
   */
  public static ExpressRouteLinkPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteLinkPropertiesFormat.class);
  }

  /**
   * Convert an instance of ExpressRouteLinkPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

