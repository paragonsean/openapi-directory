/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ExpressRoutePort from '../model/ExpressRoutePort';
import ExpressRoutePortListResult from '../model/ExpressRoutePortListResult';
import ExpressRoutePortsUpdateTagsRequest from '../model/ExpressRoutePortsUpdateTagsRequest';

/**
* ExpressRoutePorts service.
* @module api/ExpressRoutePortsApi
* @version 2018-11-01
*/
export default class ExpressRoutePortsApi {

    /**
    * Constructs a new ExpressRoutePortsApi. 
    * @alias module:api/ExpressRoutePortsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the expressRoutePortsCreateOrUpdate operation.
     * @callback module:api/ExpressRoutePortsApi~expressRoutePortsCreateOrUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRoutePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates or updates the specified ExpressRoutePort resource.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} expressRoutePortName The name of the ExpressRoutePort resource.
     * @param {module:model/ExpressRoutePort} parameters Parameters supplied to the create ExpressRoutePort operation.
     * @param {module:api/ExpressRoutePortsApi~expressRoutePortsCreateOrUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRoutePort}
     */
    expressRoutePortsCreateOrUpdate(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRoutePortsCreateOrUpdate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRoutePortsCreateOrUpdate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsCreateOrUpdate");
      }
      // verify the required parameter 'expressRoutePortName' is set
      if (expressRoutePortName === undefined || expressRoutePortName === null) {
        throw new Error("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsCreateOrUpdate");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling expressRoutePortsCreateOrUpdate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'expressRoutePortName': expressRoutePortName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpressRoutePort;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRoutePortsDelete operation.
     * @callback module:api/ExpressRoutePortsApi~expressRoutePortsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the specified ExpressRoutePort resource.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} expressRoutePortName The name of the ExpressRoutePort resource.
     * @param {module:api/ExpressRoutePortsApi~expressRoutePortsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    expressRoutePortsDelete(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRoutePortsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRoutePortsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsDelete");
      }
      // verify the required parameter 'expressRoutePortName' is set
      if (expressRoutePortName === undefined || expressRoutePortName === null) {
        throw new Error("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'expressRoutePortName': expressRoutePortName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRoutePortsGet operation.
     * @callback module:api/ExpressRoutePortsApi~expressRoutePortsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRoutePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieves the requested ExpressRoutePort resource.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} expressRoutePortName The name of ExpressRoutePort.
     * @param {module:api/ExpressRoutePortsApi~expressRoutePortsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRoutePort}
     */
    expressRoutePortsGet(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRoutePortsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRoutePortsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsGet");
      }
      // verify the required parameter 'expressRoutePortName' is set
      if (expressRoutePortName === undefined || expressRoutePortName === null) {
        throw new Error("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'expressRoutePortName': expressRoutePortName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRoutePort;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRoutePortsList operation.
     * @callback module:api/ExpressRoutePortsApi~expressRoutePortsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRoutePortListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the ExpressRoutePort resources in the specified subscription
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {module:api/ExpressRoutePortsApi~expressRoutePortsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRoutePortListResult}
     */
    expressRoutePortsList(subscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRoutePortsList");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRoutePortsList");
      }

      let pathParams = {
        'subscriptionId': subscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRoutePortListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/providers/Microsoft.Network/ExpressRoutePorts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRoutePortsListByResourceGroup operation.
     * @callback module:api/ExpressRoutePortsApi~expressRoutePortsListByResourceGroupCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRoutePortListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all the ExpressRoutePort resources in the specified resource group.
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {module:api/ExpressRoutePortsApi~expressRoutePortsListByResourceGroupCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRoutePortListResult}
     */
    expressRoutePortsListByResourceGroup(subscriptionId, apiVersion, resourceGroupName, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRoutePortsListByResourceGroup");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRoutePortsListByResourceGroup");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsListByResourceGroup");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ExpressRoutePortListResult;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the expressRoutePortsUpdateTags operation.
     * @callback module:api/ExpressRoutePortsApi~expressRoutePortsUpdateTagsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ExpressRoutePort} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update ExpressRoutePort tags
     * @param {String} subscriptionId The subscription credentials which uniquely identify the Microsoft Azure subscription. The subscription ID forms part of the URI for every service call.
     * @param {String} apiVersion Client API version.
     * @param {String} resourceGroupName The name of the resource group.
     * @param {String} expressRoutePortName The name of the ExpressRoutePort resource.
     * @param {module:model/ExpressRoutePortsUpdateTagsRequest} parameters Parameters supplied to update ExpressRoutePort resource tags.
     * @param {module:api/ExpressRoutePortsApi~expressRoutePortsUpdateTagsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ExpressRoutePort}
     */
    expressRoutePortsUpdateTags(subscriptionId, apiVersion, resourceGroupName, expressRoutePortName, parameters, callback) {
      let postBody = parameters;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling expressRoutePortsUpdateTags");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling expressRoutePortsUpdateTags");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling expressRoutePortsUpdateTags");
      }
      // verify the required parameter 'expressRoutePortName' is set
      if (expressRoutePortName === undefined || expressRoutePortName === null) {
        throw new Error("Missing the required parameter 'expressRoutePortName' when calling expressRoutePortsUpdateTags");
      }
      // verify the required parameter 'parameters' is set
      if (parameters === undefined || parameters === null) {
        throw new Error("Missing the required parameter 'parameters' when calling expressRoutePortsUpdateTags");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'expressRoutePortName': expressRoutePortName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ExpressRoutePort;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/ExpressRoutePorts/{expressRoutePortName}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
