/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2018-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIExpressRoutePortPropertiesFormat.h
 *
 * Properties specific to ExpressRoutePort resources.
 */

#ifndef OAIExpressRoutePortPropertiesFormat_H
#define OAIExpressRoutePortPropertiesFormat_H

#include <QJsonObject>

#include "OAIExpressRouteLink.h"
#include "OAIExpressRoutePortPropertiesFormat_circuits_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIExpressRoutePortPropertiesFormat_circuits_inner;
class OAIExpressRouteLink;

class OAIExpressRoutePortPropertiesFormat : public OAIObject {
public:
    OAIExpressRoutePortPropertiesFormat();
    OAIExpressRoutePortPropertiesFormat(QString json);
    ~OAIExpressRoutePortPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAllocationDate() const;
    void setAllocationDate(const QString &allocation_date);
    bool is_allocation_date_Set() const;
    bool is_allocation_date_Valid() const;

    qint32 getBandwidthInGbps() const;
    void setBandwidthInGbps(const qint32 &bandwidth_in_gbps);
    bool is_bandwidth_in_gbps_Set() const;
    bool is_bandwidth_in_gbps_Valid() const;

    QList<OAIExpressRoutePortPropertiesFormat_circuits_inner> getCircuits() const;
    void setCircuits(const QList<OAIExpressRoutePortPropertiesFormat_circuits_inner> &circuits);
    bool is_circuits_Set() const;
    bool is_circuits_Valid() const;

    QString getEncapsulation() const;
    void setEncapsulation(const QString &encapsulation);
    bool is_encapsulation_Set() const;
    bool is_encapsulation_Valid() const;

    QString getEtherType() const;
    void setEtherType(const QString &ether_type);
    bool is_ether_type_Set() const;
    bool is_ether_type_Valid() const;

    QList<OAIExpressRouteLink> getLinks() const;
    void setLinks(const QList<OAIExpressRouteLink> &links);
    bool is_links_Set() const;
    bool is_links_Valid() const;

    QString getMtu() const;
    void setMtu(const QString &mtu);
    bool is_mtu_Set() const;
    bool is_mtu_Valid() const;

    QString getPeeringLocation() const;
    void setPeeringLocation(const QString &peering_location);
    bool is_peering_location_Set() const;
    bool is_peering_location_Valid() const;

    double getProvisionedBandwidthInGbps() const;
    void setProvisionedBandwidthInGbps(const double &provisioned_bandwidth_in_gbps);
    bool is_provisioned_bandwidth_in_gbps_Set() const;
    bool is_provisioned_bandwidth_in_gbps_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    QString getResourceGuid() const;
    void setResourceGuid(const QString &resource_guid);
    bool is_resource_guid_Set() const;
    bool is_resource_guid_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_allocation_date;
    bool m_allocation_date_isSet;
    bool m_allocation_date_isValid;

    qint32 m_bandwidth_in_gbps;
    bool m_bandwidth_in_gbps_isSet;
    bool m_bandwidth_in_gbps_isValid;

    QList<OAIExpressRoutePortPropertiesFormat_circuits_inner> m_circuits;
    bool m_circuits_isSet;
    bool m_circuits_isValid;

    QString m_encapsulation;
    bool m_encapsulation_isSet;
    bool m_encapsulation_isValid;

    QString m_ether_type;
    bool m_ether_type_isSet;
    bool m_ether_type_isValid;

    QList<OAIExpressRouteLink> m_links;
    bool m_links_isSet;
    bool m_links_isValid;

    QString m_mtu;
    bool m_mtu_isSet;
    bool m_mtu_isValid;

    QString m_peering_location;
    bool m_peering_location_isSet;
    bool m_peering_location_isValid;

    double m_provisioned_bandwidth_in_gbps;
    bool m_provisioned_bandwidth_in_gbps_isSet;
    bool m_provisioned_bandwidth_in_gbps_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    QString m_resource_guid;
    bool m_resource_guid_isSet;
    bool m_resource_guid_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIExpressRoutePortPropertiesFormat)

#endif // OAIExpressRoutePortPropertiesFormat_H
