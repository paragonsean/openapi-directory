/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-02-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRoutePortPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRoutePortPropertiesFormat::OAIExpressRoutePortPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRoutePortPropertiesFormat::OAIExpressRoutePortPropertiesFormat() {
    this->initializeModel();
}

OAIExpressRoutePortPropertiesFormat::~OAIExpressRoutePortPropertiesFormat() {}

void OAIExpressRoutePortPropertiesFormat::initializeModel() {

    m_allocation_date_isSet = false;
    m_allocation_date_isValid = false;

    m_bandwidth_in_gbps_isSet = false;
    m_bandwidth_in_gbps_isValid = false;

    m_circuits_isSet = false;
    m_circuits_isValid = false;

    m_encapsulation_isSet = false;
    m_encapsulation_isValid = false;

    m_ether_type_isSet = false;
    m_ether_type_isValid = false;

    m_links_isSet = false;
    m_links_isValid = false;

    m_mtu_isSet = false;
    m_mtu_isValid = false;

    m_peering_location_isSet = false;
    m_peering_location_isValid = false;

    m_provisioned_bandwidth_in_gbps_isSet = false;
    m_provisioned_bandwidth_in_gbps_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_guid_isSet = false;
    m_resource_guid_isValid = false;
}

void OAIExpressRoutePortPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRoutePortPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_allocation_date_isValid = ::OpenAPI::fromJsonValue(m_allocation_date, json[QString("allocationDate")]);
    m_allocation_date_isSet = !json[QString("allocationDate")].isNull() && m_allocation_date_isValid;

    m_bandwidth_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_bandwidth_in_gbps, json[QString("bandwidthInGbps")]);
    m_bandwidth_in_gbps_isSet = !json[QString("bandwidthInGbps")].isNull() && m_bandwidth_in_gbps_isValid;

    m_circuits_isValid = ::OpenAPI::fromJsonValue(m_circuits, json[QString("circuits")]);
    m_circuits_isSet = !json[QString("circuits")].isNull() && m_circuits_isValid;

    m_encapsulation_isValid = ::OpenAPI::fromJsonValue(m_encapsulation, json[QString("encapsulation")]);
    m_encapsulation_isSet = !json[QString("encapsulation")].isNull() && m_encapsulation_isValid;

    m_ether_type_isValid = ::OpenAPI::fromJsonValue(m_ether_type, json[QString("etherType")]);
    m_ether_type_isSet = !json[QString("etherType")].isNull() && m_ether_type_isValid;

    m_links_isValid = ::OpenAPI::fromJsonValue(m_links, json[QString("links")]);
    m_links_isSet = !json[QString("links")].isNull() && m_links_isValid;

    m_mtu_isValid = ::OpenAPI::fromJsonValue(m_mtu, json[QString("mtu")]);
    m_mtu_isSet = !json[QString("mtu")].isNull() && m_mtu_isValid;

    m_peering_location_isValid = ::OpenAPI::fromJsonValue(m_peering_location, json[QString("peeringLocation")]);
    m_peering_location_isSet = !json[QString("peeringLocation")].isNull() && m_peering_location_isValid;

    m_provisioned_bandwidth_in_gbps_isValid = ::OpenAPI::fromJsonValue(m_provisioned_bandwidth_in_gbps, json[QString("provisionedBandwidthInGbps")]);
    m_provisioned_bandwidth_in_gbps_isSet = !json[QString("provisionedBandwidthInGbps")].isNull() && m_provisioned_bandwidth_in_gbps_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_guid_isValid = ::OpenAPI::fromJsonValue(m_resource_guid, json[QString("resourceGuid")]);
    m_resource_guid_isSet = !json[QString("resourceGuid")].isNull() && m_resource_guid_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRoutePortPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_allocation_date_isSet) {
        obj.insert(QString("allocationDate"), ::OpenAPI::toJsonValue(m_allocation_date));
    }
    if (m_bandwidth_in_gbps_isSet) {
        obj.insert(QString("bandwidthInGbps"), ::OpenAPI::toJsonValue(m_bandwidth_in_gbps));
    }
    if (m_circuits.size() > 0) {
        obj.insert(QString("circuits"), ::OpenAPI::toJsonValue(m_circuits));
    }
    if (m_encapsulation_isSet) {
        obj.insert(QString("encapsulation"), ::OpenAPI::toJsonValue(m_encapsulation));
    }
    if (m_ether_type_isSet) {
        obj.insert(QString("etherType"), ::OpenAPI::toJsonValue(m_ether_type));
    }
    if (m_links.size() > 0) {
        obj.insert(QString("links"), ::OpenAPI::toJsonValue(m_links));
    }
    if (m_mtu_isSet) {
        obj.insert(QString("mtu"), ::OpenAPI::toJsonValue(m_mtu));
    }
    if (m_peering_location_isSet) {
        obj.insert(QString("peeringLocation"), ::OpenAPI::toJsonValue(m_peering_location));
    }
    if (m_provisioned_bandwidth_in_gbps_isSet) {
        obj.insert(QString("provisionedBandwidthInGbps"), ::OpenAPI::toJsonValue(m_provisioned_bandwidth_in_gbps));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_guid_isSet) {
        obj.insert(QString("resourceGuid"), ::OpenAPI::toJsonValue(m_resource_guid));
    }
    return obj;
}

QString OAIExpressRoutePortPropertiesFormat::getAllocationDate() const {
    return m_allocation_date;
}
void OAIExpressRoutePortPropertiesFormat::setAllocationDate(const QString &allocation_date) {
    m_allocation_date = allocation_date;
    m_allocation_date_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_allocation_date_Set() const{
    return m_allocation_date_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_allocation_date_Valid() const{
    return m_allocation_date_isValid;
}

qint32 OAIExpressRoutePortPropertiesFormat::getBandwidthInGbps() const {
    return m_bandwidth_in_gbps;
}
void OAIExpressRoutePortPropertiesFormat::setBandwidthInGbps(const qint32 &bandwidth_in_gbps) {
    m_bandwidth_in_gbps = bandwidth_in_gbps;
    m_bandwidth_in_gbps_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_bandwidth_in_gbps_Set() const{
    return m_bandwidth_in_gbps_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_bandwidth_in_gbps_Valid() const{
    return m_bandwidth_in_gbps_isValid;
}

QList<OAIExpressRoutePortPropertiesFormat_circuits_inner> OAIExpressRoutePortPropertiesFormat::getCircuits() const {
    return m_circuits;
}
void OAIExpressRoutePortPropertiesFormat::setCircuits(const QList<OAIExpressRoutePortPropertiesFormat_circuits_inner> &circuits) {
    m_circuits = circuits;
    m_circuits_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_circuits_Set() const{
    return m_circuits_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_circuits_Valid() const{
    return m_circuits_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::getEncapsulation() const {
    return m_encapsulation;
}
void OAIExpressRoutePortPropertiesFormat::setEncapsulation(const QString &encapsulation) {
    m_encapsulation = encapsulation;
    m_encapsulation_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_encapsulation_Set() const{
    return m_encapsulation_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_encapsulation_Valid() const{
    return m_encapsulation_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::getEtherType() const {
    return m_ether_type;
}
void OAIExpressRoutePortPropertiesFormat::setEtherType(const QString &ether_type) {
    m_ether_type = ether_type;
    m_ether_type_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_ether_type_Set() const{
    return m_ether_type_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_ether_type_Valid() const{
    return m_ether_type_isValid;
}

QList<OAIExpressRouteLink> OAIExpressRoutePortPropertiesFormat::getLinks() const {
    return m_links;
}
void OAIExpressRoutePortPropertiesFormat::setLinks(const QList<OAIExpressRouteLink> &links) {
    m_links = links;
    m_links_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_links_Set() const{
    return m_links_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_links_Valid() const{
    return m_links_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::getMtu() const {
    return m_mtu;
}
void OAIExpressRoutePortPropertiesFormat::setMtu(const QString &mtu) {
    m_mtu = mtu;
    m_mtu_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_mtu_Set() const{
    return m_mtu_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_mtu_Valid() const{
    return m_mtu_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::getPeeringLocation() const {
    return m_peering_location;
}
void OAIExpressRoutePortPropertiesFormat::setPeeringLocation(const QString &peering_location) {
    m_peering_location = peering_location;
    m_peering_location_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_peering_location_Set() const{
    return m_peering_location_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_peering_location_Valid() const{
    return m_peering_location_isValid;
}

double OAIExpressRoutePortPropertiesFormat::getProvisionedBandwidthInGbps() const {
    return m_provisioned_bandwidth_in_gbps;
}
void OAIExpressRoutePortPropertiesFormat::setProvisionedBandwidthInGbps(const double &provisioned_bandwidth_in_gbps) {
    m_provisioned_bandwidth_in_gbps = provisioned_bandwidth_in_gbps;
    m_provisioned_bandwidth_in_gbps_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_provisioned_bandwidth_in_gbps_Set() const{
    return m_provisioned_bandwidth_in_gbps_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_provisioned_bandwidth_in_gbps_Valid() const{
    return m_provisioned_bandwidth_in_gbps_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRoutePortPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIExpressRoutePortPropertiesFormat::getResourceGuid() const {
    return m_resource_guid;
}
void OAIExpressRoutePortPropertiesFormat::setResourceGuid(const QString &resource_guid) {
    m_resource_guid = resource_guid;
    m_resource_guid_isSet = true;
}

bool OAIExpressRoutePortPropertiesFormat::is_resource_guid_Set() const{
    return m_resource_guid_isSet;
}

bool OAIExpressRoutePortPropertiesFormat::is_resource_guid_Valid() const{
    return m_resource_guid_isValid;
}

bool OAIExpressRoutePortPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allocation_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bandwidth_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_circuits.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_encapsulation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ether_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_links.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_mtu_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peering_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioned_bandwidth_in_gbps_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_guid_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRoutePortPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
