# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_link import ExpressRouteLink
from openapi_server.models.express_route_port_properties_format_circuits_inner import ExpressRoutePortPropertiesFormatCircuitsInner
from openapi_server import util


class ExpressRoutePortPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allocation_date: str=None, bandwidth_in_gbps: int=None, circuits: List[ExpressRoutePortPropertiesFormatCircuitsInner]=None, encapsulation: str=None, ether_type: str=None, links: List[ExpressRouteLink]=None, mtu: str=None, peering_location: str=None, provisioned_bandwidth_in_gbps: float=None, provisioning_state: str=None, resource_guid: str=None):
        """ExpressRoutePortPropertiesFormat - a model defined in OpenAPI

        :param allocation_date: The allocation_date of this ExpressRoutePortPropertiesFormat.
        :param bandwidth_in_gbps: The bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.
        :param circuits: The circuits of this ExpressRoutePortPropertiesFormat.
        :param encapsulation: The encapsulation of this ExpressRoutePortPropertiesFormat.
        :param ether_type: The ether_type of this ExpressRoutePortPropertiesFormat.
        :param links: The links of this ExpressRoutePortPropertiesFormat.
        :param mtu: The mtu of this ExpressRoutePortPropertiesFormat.
        :param peering_location: The peering_location of this ExpressRoutePortPropertiesFormat.
        :param provisioned_bandwidth_in_gbps: The provisioned_bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ExpressRoutePortPropertiesFormat.
        :param resource_guid: The resource_guid of this ExpressRoutePortPropertiesFormat.
        """
        self.openapi_types = {
            'allocation_date': str,
            'bandwidth_in_gbps': int,
            'circuits': List[ExpressRoutePortPropertiesFormatCircuitsInner],
            'encapsulation': str,
            'ether_type': str,
            'links': List[ExpressRouteLink],
            'mtu': str,
            'peering_location': str,
            'provisioned_bandwidth_in_gbps': float,
            'provisioning_state': str,
            'resource_guid': str
        }

        self.attribute_map = {
            'allocation_date': 'allocationDate',
            'bandwidth_in_gbps': 'bandwidthInGbps',
            'circuits': 'circuits',
            'encapsulation': 'encapsulation',
            'ether_type': 'etherType',
            'links': 'links',
            'mtu': 'mtu',
            'peering_location': 'peeringLocation',
            'provisioned_bandwidth_in_gbps': 'provisionedBandwidthInGbps',
            'provisioning_state': 'provisioningState',
            'resource_guid': 'resourceGuid'
        }

        self._allocation_date = allocation_date
        self._bandwidth_in_gbps = bandwidth_in_gbps
        self._circuits = circuits
        self._encapsulation = encapsulation
        self._ether_type = ether_type
        self._links = links
        self._mtu = mtu
        self._peering_location = peering_location
        self._provisioned_bandwidth_in_gbps = provisioned_bandwidth_in_gbps
        self._provisioning_state = provisioning_state
        self._resource_guid = resource_guid

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRoutePortPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRoutePortPropertiesFormat of this ExpressRoutePortPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allocation_date(self):
        """Gets the allocation_date of this ExpressRoutePortPropertiesFormat.

        Date of the physical port allocation to be used in Letter of Authorization.

        :return: The allocation_date of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._allocation_date

    @allocation_date.setter
    def allocation_date(self, allocation_date):
        """Sets the allocation_date of this ExpressRoutePortPropertiesFormat.

        Date of the physical port allocation to be used in Letter of Authorization.

        :param allocation_date: The allocation_date of this ExpressRoutePortPropertiesFormat.
        :type allocation_date: str
        """

        self._allocation_date = allocation_date

    @property
    def bandwidth_in_gbps(self):
        """Gets the bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.

        Bandwidth of procured ports in Gbps

        :return: The bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.
        :rtype: int
        """
        return self._bandwidth_in_gbps

    @bandwidth_in_gbps.setter
    def bandwidth_in_gbps(self, bandwidth_in_gbps):
        """Sets the bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.

        Bandwidth of procured ports in Gbps

        :param bandwidth_in_gbps: The bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.
        :type bandwidth_in_gbps: int
        """

        self._bandwidth_in_gbps = bandwidth_in_gbps

    @property
    def circuits(self):
        """Gets the circuits of this ExpressRoutePortPropertiesFormat.

        Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.

        :return: The circuits of this ExpressRoutePortPropertiesFormat.
        :rtype: List[ExpressRoutePortPropertiesFormatCircuitsInner]
        """
        return self._circuits

    @circuits.setter
    def circuits(self, circuits):
        """Sets the circuits of this ExpressRoutePortPropertiesFormat.

        Reference the ExpressRoute circuit(s) that are provisioned on this ExpressRoutePort resource.

        :param circuits: The circuits of this ExpressRoutePortPropertiesFormat.
        :type circuits: List[ExpressRoutePortPropertiesFormatCircuitsInner]
        """

        self._circuits = circuits

    @property
    def encapsulation(self):
        """Gets the encapsulation of this ExpressRoutePortPropertiesFormat.

        Encapsulation method on physical ports.

        :return: The encapsulation of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._encapsulation

    @encapsulation.setter
    def encapsulation(self, encapsulation):
        """Sets the encapsulation of this ExpressRoutePortPropertiesFormat.

        Encapsulation method on physical ports.

        :param encapsulation: The encapsulation of this ExpressRoutePortPropertiesFormat.
        :type encapsulation: str
        """
        allowed_values = ["Dot1Q", "QinQ"]  # noqa: E501
        if encapsulation not in allowed_values:
            raise ValueError(
                "Invalid value for `encapsulation` ({0}), must be one of {1}"
                .format(encapsulation, allowed_values)
            )

        self._encapsulation = encapsulation

    @property
    def ether_type(self):
        """Gets the ether_type of this ExpressRoutePortPropertiesFormat.

        Ether type of the physical port.

        :return: The ether_type of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._ether_type

    @ether_type.setter
    def ether_type(self, ether_type):
        """Sets the ether_type of this ExpressRoutePortPropertiesFormat.

        Ether type of the physical port.

        :param ether_type: The ether_type of this ExpressRoutePortPropertiesFormat.
        :type ether_type: str
        """

        self._ether_type = ether_type

    @property
    def links(self):
        """Gets the links of this ExpressRoutePortPropertiesFormat.

        The set of physical links of the ExpressRoutePort resource

        :return: The links of this ExpressRoutePortPropertiesFormat.
        :rtype: List[ExpressRouteLink]
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this ExpressRoutePortPropertiesFormat.

        The set of physical links of the ExpressRoutePort resource

        :param links: The links of this ExpressRoutePortPropertiesFormat.
        :type links: List[ExpressRouteLink]
        """

        self._links = links

    @property
    def mtu(self):
        """Gets the mtu of this ExpressRoutePortPropertiesFormat.

        Maximum transmission unit of the physical port pair(s)

        :return: The mtu of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._mtu

    @mtu.setter
    def mtu(self, mtu):
        """Sets the mtu of this ExpressRoutePortPropertiesFormat.

        Maximum transmission unit of the physical port pair(s)

        :param mtu: The mtu of this ExpressRoutePortPropertiesFormat.
        :type mtu: str
        """

        self._mtu = mtu

    @property
    def peering_location(self):
        """Gets the peering_location of this ExpressRoutePortPropertiesFormat.

        The name of the peering location that the ExpressRoutePort is mapped to physically.

        :return: The peering_location of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._peering_location

    @peering_location.setter
    def peering_location(self, peering_location):
        """Sets the peering_location of this ExpressRoutePortPropertiesFormat.

        The name of the peering location that the ExpressRoutePort is mapped to physically.

        :param peering_location: The peering_location of this ExpressRoutePortPropertiesFormat.
        :type peering_location: str
        """

        self._peering_location = peering_location

    @property
    def provisioned_bandwidth_in_gbps(self):
        """Gets the provisioned_bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.

        Aggregate Gbps of associated circuit bandwidths.

        :return: The provisioned_bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.
        :rtype: float
        """
        return self._provisioned_bandwidth_in_gbps

    @provisioned_bandwidth_in_gbps.setter
    def provisioned_bandwidth_in_gbps(self, provisioned_bandwidth_in_gbps):
        """Sets the provisioned_bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.

        Aggregate Gbps of associated circuit bandwidths.

        :param provisioned_bandwidth_in_gbps: The provisioned_bandwidth_in_gbps of this ExpressRoutePortPropertiesFormat.
        :type provisioned_bandwidth_in_gbps: float
        """

        self._provisioned_bandwidth_in_gbps = provisioned_bandwidth_in_gbps

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRoutePortPropertiesFormat.

        The provisioning state of the ExpressRoutePort resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.

        :return: The provisioning_state of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRoutePortPropertiesFormat.

        The provisioning state of the ExpressRoutePort resource. Possible values are: 'Succeeded', 'Updating', 'Deleting', and 'Failed'.

        :param provisioning_state: The provisioning_state of this ExpressRoutePortPropertiesFormat.
        :type provisioning_state: str
        """

        self._provisioning_state = provisioning_state

    @property
    def resource_guid(self):
        """Gets the resource_guid of this ExpressRoutePortPropertiesFormat.

        The resource GUID property of the ExpressRoutePort resource.

        :return: The resource_guid of this ExpressRoutePortPropertiesFormat.
        :rtype: str
        """
        return self._resource_guid

    @resource_guid.setter
    def resource_guid(self, resource_guid):
        """Sets the resource_guid of this ExpressRoutePortPropertiesFormat.

        The resource GUID property of the ExpressRoutePort resource.

        :param resource_guid: The resource_guid of this ExpressRoutePortPropertiesFormat.
        :type resource_guid: str
        """

        self._resource_guid = resource_guid
