# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.express_route_ports_location_bandwidths import ExpressRoutePortsLocationBandwidths
from openapi_server import util


class ExpressRoutePortsLocationPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address: str=None, available_bandwidths: List[ExpressRoutePortsLocationBandwidths]=None, contact: str=None, provisioning_state: str=None):
        """ExpressRoutePortsLocationPropertiesFormat - a model defined in OpenAPI

        :param address: The address of this ExpressRoutePortsLocationPropertiesFormat.
        :param available_bandwidths: The available_bandwidths of this ExpressRoutePortsLocationPropertiesFormat.
        :param contact: The contact of this ExpressRoutePortsLocationPropertiesFormat.
        :param provisioning_state: The provisioning_state of this ExpressRoutePortsLocationPropertiesFormat.
        """
        self.openapi_types = {
            'address': str,
            'available_bandwidths': List[ExpressRoutePortsLocationBandwidths],
            'contact': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'address': 'address',
            'available_bandwidths': 'availableBandwidths',
            'contact': 'contact',
            'provisioning_state': 'provisioningState'
        }

        self._address = address
        self._available_bandwidths = available_bandwidths
        self._contact = contact
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRoutePortsLocationPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRoutePortsLocationPropertiesFormat of this ExpressRoutePortsLocationPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address(self):
        """Gets the address of this ExpressRoutePortsLocationPropertiesFormat.

        Address of peering location.

        :return: The address of this ExpressRoutePortsLocationPropertiesFormat.
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ExpressRoutePortsLocationPropertiesFormat.

        Address of peering location.

        :param address: The address of this ExpressRoutePortsLocationPropertiesFormat.
        :type address: str
        """

        self._address = address

    @property
    def available_bandwidths(self):
        """Gets the available_bandwidths of this ExpressRoutePortsLocationPropertiesFormat.

        The inventory of available ExpressRoutePort bandwidths.

        :return: The available_bandwidths of this ExpressRoutePortsLocationPropertiesFormat.
        :rtype: List[ExpressRoutePortsLocationBandwidths]
        """
        return self._available_bandwidths

    @available_bandwidths.setter
    def available_bandwidths(self, available_bandwidths):
        """Sets the available_bandwidths of this ExpressRoutePortsLocationPropertiesFormat.

        The inventory of available ExpressRoutePort bandwidths.

        :param available_bandwidths: The available_bandwidths of this ExpressRoutePortsLocationPropertiesFormat.
        :type available_bandwidths: List[ExpressRoutePortsLocationBandwidths]
        """

        self._available_bandwidths = available_bandwidths

    @property
    def contact(self):
        """Gets the contact of this ExpressRoutePortsLocationPropertiesFormat.

        Contact details of peering locations.

        :return: The contact of this ExpressRoutePortsLocationPropertiesFormat.
        :rtype: str
        """
        return self._contact

    @contact.setter
    def contact(self, contact):
        """Sets the contact of this ExpressRoutePortsLocationPropertiesFormat.

        Contact details of peering locations.

        :param contact: The contact of this ExpressRoutePortsLocationPropertiesFormat.
        :type contact: str
        """

        self._contact = contact

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ExpressRoutePortsLocationPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this ExpressRoutePortsLocationPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ExpressRoutePortsLocationPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this ExpressRoutePortsLocationPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
