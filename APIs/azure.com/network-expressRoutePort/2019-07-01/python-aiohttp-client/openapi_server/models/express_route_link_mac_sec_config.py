# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ExpressRouteLinkMacSecConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cak_secret_identifier: str=None, cipher: str=None, ckn_secret_identifier: str=None):
        """ExpressRouteLinkMacSecConfig - a model defined in OpenAPI

        :param cak_secret_identifier: The cak_secret_identifier of this ExpressRouteLinkMacSecConfig.
        :param cipher: The cipher of this ExpressRouteLinkMacSecConfig.
        :param ckn_secret_identifier: The ckn_secret_identifier of this ExpressRouteLinkMacSecConfig.
        """
        self.openapi_types = {
            'cak_secret_identifier': str,
            'cipher': str,
            'ckn_secret_identifier': str
        }

        self.attribute_map = {
            'cak_secret_identifier': 'cakSecretIdentifier',
            'cipher': 'cipher',
            'ckn_secret_identifier': 'cknSecretIdentifier'
        }

        self._cak_secret_identifier = cak_secret_identifier
        self._cipher = cipher
        self._ckn_secret_identifier = ckn_secret_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ExpressRouteLinkMacSecConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ExpressRouteLinkMacSecConfig of this ExpressRouteLinkMacSecConfig.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cak_secret_identifier(self):
        """Gets the cak_secret_identifier of this ExpressRouteLinkMacSecConfig.

        Keyvault Secret Identifier URL containing Mac security CAK key.

        :return: The cak_secret_identifier of this ExpressRouteLinkMacSecConfig.
        :rtype: str
        """
        return self._cak_secret_identifier

    @cak_secret_identifier.setter
    def cak_secret_identifier(self, cak_secret_identifier):
        """Sets the cak_secret_identifier of this ExpressRouteLinkMacSecConfig.

        Keyvault Secret Identifier URL containing Mac security CAK key.

        :param cak_secret_identifier: The cak_secret_identifier of this ExpressRouteLinkMacSecConfig.
        :type cak_secret_identifier: str
        """

        self._cak_secret_identifier = cak_secret_identifier

    @property
    def cipher(self):
        """Gets the cipher of this ExpressRouteLinkMacSecConfig.

        Mac security cipher.

        :return: The cipher of this ExpressRouteLinkMacSecConfig.
        :rtype: str
        """
        return self._cipher

    @cipher.setter
    def cipher(self, cipher):
        """Sets the cipher of this ExpressRouteLinkMacSecConfig.

        Mac security cipher.

        :param cipher: The cipher of this ExpressRouteLinkMacSecConfig.
        :type cipher: str
        """
        allowed_values = ["gcm-aes-128", "gcm-aes-256"]  # noqa: E501
        if cipher not in allowed_values:
            raise ValueError(
                "Invalid value for `cipher` ({0}), must be one of {1}"
                .format(cipher, allowed_values)
            )

        self._cipher = cipher

    @property
    def ckn_secret_identifier(self):
        """Gets the ckn_secret_identifier of this ExpressRouteLinkMacSecConfig.

        Keyvault Secret Identifier URL containing Mac security CKN key.

        :return: The ckn_secret_identifier of this ExpressRouteLinkMacSecConfig.
        :rtype: str
        """
        return self._ckn_secret_identifier

    @ckn_secret_identifier.setter
    def ckn_secret_identifier(self, ckn_secret_identifier):
        """Sets the ckn_secret_identifier of this ExpressRouteLinkMacSecConfig.

        Keyvault Secret Identifier URL containing Mac security CKN key.

        :param ckn_secret_identifier: The ckn_secret_identifier of this ExpressRouteLinkMacSecConfig.
        :type ckn_secret_identifier: str
        """

        self._ckn_secret_identifier = ckn_secret_identifier
