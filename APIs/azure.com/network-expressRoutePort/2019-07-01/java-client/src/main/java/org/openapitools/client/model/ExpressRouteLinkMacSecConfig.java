/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ExpressRouteLink Mac Security Configuration.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:38.666085-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRouteLinkMacSecConfig {
  public static final String SERIALIZED_NAME_CAK_SECRET_IDENTIFIER = "cakSecretIdentifier";
  @SerializedName(SERIALIZED_NAME_CAK_SECRET_IDENTIFIER)
  private String cakSecretIdentifier;

  /**
   * Mac security cipher.
   */
  @JsonAdapter(CipherEnum.Adapter.class)
  public enum CipherEnum {
    _128("gcm-aes-128"),
    
    _256("gcm-aes-256");

    private String value;

    CipherEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CipherEnum fromValue(String value) {
      for (CipherEnum b : CipherEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CipherEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CipherEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CipherEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CipherEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      CipherEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CIPHER = "cipher";
  @SerializedName(SERIALIZED_NAME_CIPHER)
  private CipherEnum cipher;

  public static final String SERIALIZED_NAME_CKN_SECRET_IDENTIFIER = "cknSecretIdentifier";
  @SerializedName(SERIALIZED_NAME_CKN_SECRET_IDENTIFIER)
  private String cknSecretIdentifier;

  public ExpressRouteLinkMacSecConfig() {
  }

  public ExpressRouteLinkMacSecConfig cakSecretIdentifier(String cakSecretIdentifier) {
    this.cakSecretIdentifier = cakSecretIdentifier;
    return this;
  }

  /**
   * Keyvault Secret Identifier URL containing Mac security CAK key.
   * @return cakSecretIdentifier
   */
  @javax.annotation.Nullable
  public String getCakSecretIdentifier() {
    return cakSecretIdentifier;
  }

  public void setCakSecretIdentifier(String cakSecretIdentifier) {
    this.cakSecretIdentifier = cakSecretIdentifier;
  }


  public ExpressRouteLinkMacSecConfig cipher(CipherEnum cipher) {
    this.cipher = cipher;
    return this;
  }

  /**
   * Mac security cipher.
   * @return cipher
   */
  @javax.annotation.Nullable
  public CipherEnum getCipher() {
    return cipher;
  }

  public void setCipher(CipherEnum cipher) {
    this.cipher = cipher;
  }


  public ExpressRouteLinkMacSecConfig cknSecretIdentifier(String cknSecretIdentifier) {
    this.cknSecretIdentifier = cknSecretIdentifier;
    return this;
  }

  /**
   * Keyvault Secret Identifier URL containing Mac security CKN key.
   * @return cknSecretIdentifier
   */
  @javax.annotation.Nullable
  public String getCknSecretIdentifier() {
    return cknSecretIdentifier;
  }

  public void setCknSecretIdentifier(String cknSecretIdentifier) {
    this.cknSecretIdentifier = cknSecretIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRouteLinkMacSecConfig expressRouteLinkMacSecConfig = (ExpressRouteLinkMacSecConfig) o;
    return Objects.equals(this.cakSecretIdentifier, expressRouteLinkMacSecConfig.cakSecretIdentifier) &&
        Objects.equals(this.cipher, expressRouteLinkMacSecConfig.cipher) &&
        Objects.equals(this.cknSecretIdentifier, expressRouteLinkMacSecConfig.cknSecretIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cakSecretIdentifier, cipher, cknSecretIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRouteLinkMacSecConfig {\n");
    sb.append("    cakSecretIdentifier: ").append(toIndentedString(cakSecretIdentifier)).append("\n");
    sb.append("    cipher: ").append(toIndentedString(cipher)).append("\n");
    sb.append("    cknSecretIdentifier: ").append(toIndentedString(cknSecretIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cakSecretIdentifier");
    openapiFields.add("cipher");
    openapiFields.add("cknSecretIdentifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRouteLinkMacSecConfig
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRouteLinkMacSecConfig.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRouteLinkMacSecConfig is not found in the empty JSON string", ExpressRouteLinkMacSecConfig.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRouteLinkMacSecConfig.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRouteLinkMacSecConfig` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("cakSecretIdentifier") != null && !jsonObj.get("cakSecretIdentifier").isJsonNull()) && !jsonObj.get("cakSecretIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cakSecretIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cakSecretIdentifier").toString()));
      }
      if ((jsonObj.get("cipher") != null && !jsonObj.get("cipher").isJsonNull()) && !jsonObj.get("cipher").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cipher` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cipher").toString()));
      }
      // validate the optional field `cipher`
      if (jsonObj.get("cipher") != null && !jsonObj.get("cipher").isJsonNull()) {
        CipherEnum.validateJsonElement(jsonObj.get("cipher"));
      }
      if ((jsonObj.get("cknSecretIdentifier") != null && !jsonObj.get("cknSecretIdentifier").isJsonNull()) && !jsonObj.get("cknSecretIdentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cknSecretIdentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cknSecretIdentifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRouteLinkMacSecConfig.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRouteLinkMacSecConfig' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRouteLinkMacSecConfig> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRouteLinkMacSecConfig.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRouteLinkMacSecConfig>() {
           @Override
           public void write(JsonWriter out, ExpressRouteLinkMacSecConfig value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRouteLinkMacSecConfig read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRouteLinkMacSecConfig given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRouteLinkMacSecConfig
   * @throws IOException if the JSON string is invalid with respect to ExpressRouteLinkMacSecConfig
   */
  public static ExpressRouteLinkMacSecConfig fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRouteLinkMacSecConfig.class);
  }

  /**
   * Convert an instance of ExpressRouteLinkMacSecConfig to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

