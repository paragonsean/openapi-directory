/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIExpressRoutePortsApi_H
#define OAI_OAIExpressRoutePortsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIExpressRoutePort.h"
#include "OAIExpressRoutePortListResult.h"
#include "OAIExpressRoutePorts_UpdateTags_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIExpressRoutePortsApi : public QObject {
    Q_OBJECT

public:
    OAIExpressRoutePortsApi(const int timeOut = 0);
    ~OAIExpressRoutePortsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_port_name QString [required]
    * @param[in]  parameters OAIExpressRoutePort [required]
    */
    virtual void expressRoutePortsCreateOrUpdate(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &express_route_port_name, const OAIExpressRoutePort &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_port_name QString [required]
    */
    virtual void expressRoutePortsDelete(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &express_route_port_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_port_name QString [required]
    */
    virtual void expressRoutePortsGet(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &express_route_port_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void expressRoutePortsList(const QString &subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    */
    virtual void expressRoutePortsListByResourceGroup(const QString &subscription_id, const QString &api_version, const QString &resource_group_name);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  express_route_port_name QString [required]
    * @param[in]  parameters OAIExpressRoutePorts_UpdateTags_request [required]
    */
    virtual void expressRoutePortsUpdateTags(const QString &subscription_id, const QString &api_version, const QString &resource_group_name, const QString &express_route_port_name, const OAIExpressRoutePorts_UpdateTags_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void expressRoutePortsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void expressRoutePortsDeleteCallback(OAIHttpRequestWorker *worker);
    void expressRoutePortsGetCallback(OAIHttpRequestWorker *worker);
    void expressRoutePortsListCallback(OAIHttpRequestWorker *worker);
    void expressRoutePortsListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void expressRoutePortsUpdateTagsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void expressRoutePortsCreateOrUpdateSignal(OAIExpressRoutePort summary);
    void expressRoutePortsDeleteSignal();
    void expressRoutePortsGetSignal(OAIExpressRoutePort summary);
    void expressRoutePortsListSignal(OAIExpressRoutePortListResult summary);
    void expressRoutePortsListByResourceGroupSignal(OAIExpressRoutePortListResult summary);
    void expressRoutePortsUpdateTagsSignal(OAIExpressRoutePort summary);


    void expressRoutePortsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIExpressRoutePort summary);
    void expressRoutePortsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void expressRoutePortsGetSignalFull(OAIHttpRequestWorker *worker, OAIExpressRoutePort summary);
    void expressRoutePortsListSignalFull(OAIHttpRequestWorker *worker, OAIExpressRoutePortListResult summary);
    void expressRoutePortsListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIExpressRoutePortListResult summary);
    void expressRoutePortsUpdateTagsSignalFull(OAIHttpRequestWorker *worker, OAIExpressRoutePort summary);

    Q_DECL_DEPRECATED_X("Use expressRoutePortsCreateOrUpdateSignalError() instead")
    void expressRoutePortsCreateOrUpdateSignalE(OAIExpressRoutePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsCreateOrUpdateSignalError(OAIExpressRoutePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsDeleteSignalError() instead")
    void expressRoutePortsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsGetSignalError() instead")
    void expressRoutePortsGetSignalE(OAIExpressRoutePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsGetSignalError(OAIExpressRoutePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsListSignalError() instead")
    void expressRoutePortsListSignalE(OAIExpressRoutePortListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsListSignalError(OAIExpressRoutePortListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsListByResourceGroupSignalError() instead")
    void expressRoutePortsListByResourceGroupSignalE(OAIExpressRoutePortListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsListByResourceGroupSignalError(OAIExpressRoutePortListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsUpdateTagsSignalError() instead")
    void expressRoutePortsUpdateTagsSignalE(OAIExpressRoutePort summary, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsUpdateTagsSignalError(OAIExpressRoutePort summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use expressRoutePortsCreateOrUpdateSignalErrorFull() instead")
    void expressRoutePortsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsDeleteSignalErrorFull() instead")
    void expressRoutePortsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsGetSignalErrorFull() instead")
    void expressRoutePortsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsListSignalErrorFull() instead")
    void expressRoutePortsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsListByResourceGroupSignalErrorFull() instead")
    void expressRoutePortsListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use expressRoutePortsUpdateTagsSignalErrorFull() instead")
    void expressRoutePortsUpdateTagsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void expressRoutePortsUpdateTagsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
