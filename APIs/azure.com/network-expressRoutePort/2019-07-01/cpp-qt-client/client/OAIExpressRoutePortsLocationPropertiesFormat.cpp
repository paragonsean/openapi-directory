/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRoutePortsLocationPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRoutePortsLocationPropertiesFormat::OAIExpressRoutePortsLocationPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRoutePortsLocationPropertiesFormat::OAIExpressRoutePortsLocationPropertiesFormat() {
    this->initializeModel();
}

OAIExpressRoutePortsLocationPropertiesFormat::~OAIExpressRoutePortsLocationPropertiesFormat() {}

void OAIExpressRoutePortsLocationPropertiesFormat::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_available_bandwidths_isSet = false;
    m_available_bandwidths_isValid = false;

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIExpressRoutePortsLocationPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRoutePortsLocationPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("address")]);
    m_address_isSet = !json[QString("address")].isNull() && m_address_isValid;

    m_available_bandwidths_isValid = ::OpenAPI::fromJsonValue(m_available_bandwidths, json[QString("availableBandwidths")]);
    m_available_bandwidths_isSet = !json[QString("availableBandwidths")].isNull() && m_available_bandwidths_isValid;

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIExpressRoutePortsLocationPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRoutePortsLocationPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_address_isSet) {
        obj.insert(QString("address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_available_bandwidths.size() > 0) {
        obj.insert(QString("availableBandwidths"), ::OpenAPI::toJsonValue(m_available_bandwidths));
    }
    if (m_contact_isSet) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIExpressRoutePortsLocationPropertiesFormat::getAddress() const {
    return m_address;
}
void OAIExpressRoutePortsLocationPropertiesFormat::setAddress(const QString &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_address_Set() const{
    return m_address_isSet;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIExpressRoutePortsLocationBandwidths> OAIExpressRoutePortsLocationPropertiesFormat::getAvailableBandwidths() const {
    return m_available_bandwidths;
}
void OAIExpressRoutePortsLocationPropertiesFormat::setAvailableBandwidths(const QList<OAIExpressRoutePortsLocationBandwidths> &available_bandwidths) {
    m_available_bandwidths = available_bandwidths;
    m_available_bandwidths_isSet = true;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_available_bandwidths_Set() const{
    return m_available_bandwidths_isSet;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_available_bandwidths_Valid() const{
    return m_available_bandwidths_isValid;
}

QString OAIExpressRoutePortsLocationPropertiesFormat::getContact() const {
    return m_contact;
}
void OAIExpressRoutePortsLocationPropertiesFormat::setContact(const QString &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_contact_Valid() const{
    return m_contact_isValid;
}

QString OAIExpressRoutePortsLocationPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRoutePortsLocationPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_available_bandwidths.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contact_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRoutePortsLocationPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
