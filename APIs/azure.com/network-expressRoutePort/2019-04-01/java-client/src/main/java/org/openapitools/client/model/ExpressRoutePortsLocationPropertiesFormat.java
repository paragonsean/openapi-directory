/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ExpressRoutePortsLocationBandwidths;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties specific to ExpressRoutePorts peering location resources.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:21:31.836996-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ExpressRoutePortsLocationPropertiesFormat {
  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_AVAILABLE_BANDWIDTHS = "availableBandwidths";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_BANDWIDTHS)
  private List<ExpressRoutePortsLocationBandwidths> availableBandwidths = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private String contact;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private String provisioningState;

  public ExpressRoutePortsLocationPropertiesFormat() {
  }

  public ExpressRoutePortsLocationPropertiesFormat(
     String address, 
     String contact, 
     String provisioningState
  ) {
    this();
    this.address = address;
    this.contact = contact;
    this.provisioningState = provisioningState;
  }

  /**
   * Address of peering location.
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }



  public ExpressRoutePortsLocationPropertiesFormat availableBandwidths(List<ExpressRoutePortsLocationBandwidths> availableBandwidths) {
    this.availableBandwidths = availableBandwidths;
    return this;
  }

  public ExpressRoutePortsLocationPropertiesFormat addAvailableBandwidthsItem(ExpressRoutePortsLocationBandwidths availableBandwidthsItem) {
    if (this.availableBandwidths == null) {
      this.availableBandwidths = new ArrayList<>();
    }
    this.availableBandwidths.add(availableBandwidthsItem);
    return this;
  }

  /**
   * The inventory of available ExpressRoutePort bandwidths.
   * @return availableBandwidths
   */
  @javax.annotation.Nullable
  public List<ExpressRoutePortsLocationBandwidths> getAvailableBandwidths() {
    return availableBandwidths;
  }

  public void setAvailableBandwidths(List<ExpressRoutePortsLocationBandwidths> availableBandwidths) {
    this.availableBandwidths = availableBandwidths;
  }


  /**
   * Contact details of peering locations.
   * @return contact
   */
  @javax.annotation.Nullable
  public String getContact() {
    return contact;
  }



  /**
   * The provisioning state of the ExpressRoutePortLocation resource. Possible values are: &#39;Succeeded&#39;, &#39;Updating&#39;, &#39;Deleting&#39;, and &#39;Failed&#39;.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public String getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExpressRoutePortsLocationPropertiesFormat expressRoutePortsLocationPropertiesFormat = (ExpressRoutePortsLocationPropertiesFormat) o;
    return Objects.equals(this.address, expressRoutePortsLocationPropertiesFormat.address) &&
        Objects.equals(this.availableBandwidths, expressRoutePortsLocationPropertiesFormat.availableBandwidths) &&
        Objects.equals(this.contact, expressRoutePortsLocationPropertiesFormat.contact) &&
        Objects.equals(this.provisioningState, expressRoutePortsLocationPropertiesFormat.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, availableBandwidths, contact, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExpressRoutePortsLocationPropertiesFormat {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    availableBandwidths: ").append(toIndentedString(availableBandwidths)).append("\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address");
    openapiFields.add("availableBandwidths");
    openapiFields.add("contact");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExpressRoutePortsLocationPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ExpressRoutePortsLocationPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExpressRoutePortsLocationPropertiesFormat is not found in the empty JSON string", ExpressRoutePortsLocationPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExpressRoutePortsLocationPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExpressRoutePortsLocationPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if (jsonObj.get("availableBandwidths") != null && !jsonObj.get("availableBandwidths").isJsonNull()) {
        JsonArray jsonArrayavailableBandwidths = jsonObj.getAsJsonArray("availableBandwidths");
        if (jsonArrayavailableBandwidths != null) {
          // ensure the json data is an array
          if (!jsonObj.get("availableBandwidths").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `availableBandwidths` to be an array in the JSON string but got `%s`", jsonObj.get("availableBandwidths").toString()));
          }

          // validate the optional field `availableBandwidths` (array)
          for (int i = 0; i < jsonArrayavailableBandwidths.size(); i++) {
            ExpressRoutePortsLocationBandwidths.validateJsonElement(jsonArrayavailableBandwidths.get(i));
          };
        }
      }
      if ((jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) && !jsonObj.get("contact").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contact` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contact").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExpressRoutePortsLocationPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExpressRoutePortsLocationPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExpressRoutePortsLocationPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExpressRoutePortsLocationPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<ExpressRoutePortsLocationPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, ExpressRoutePortsLocationPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExpressRoutePortsLocationPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExpressRoutePortsLocationPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExpressRoutePortsLocationPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to ExpressRoutePortsLocationPropertiesFormat
   */
  public static ExpressRoutePortsLocationPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExpressRoutePortsLocationPropertiesFormat.class);
  }

  /**
   * Convert an instance of ExpressRoutePortsLocationPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

