/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.NetworkManagementClient);
  }
}(this, function(expect, NetworkManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ExpressRoutePortPropertiesFormat', function() {
    it('should create an instance of ExpressRoutePortPropertiesFormat', function() {
      // uncomment below and update the code to test ExpressRoutePortPropertiesFormat
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be.a(NetworkManagementClient.ExpressRoutePortPropertiesFormat);
    });

    it('should have the property allocationDate (base name: "allocationDate")', function() {
      // uncomment below and update the code to test the property allocationDate
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property bandwidthInGbps (base name: "bandwidthInGbps")', function() {
      // uncomment below and update the code to test the property bandwidthInGbps
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property circuits (base name: "circuits")', function() {
      // uncomment below and update the code to test the property circuits
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property encapsulation (base name: "encapsulation")', function() {
      // uncomment below and update the code to test the property encapsulation
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property etherType (base name: "etherType")', function() {
      // uncomment below and update the code to test the property etherType
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property links (base name: "links")', function() {
      // uncomment below and update the code to test the property links
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property mtu (base name: "mtu")', function() {
      // uncomment below and update the code to test the property mtu
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property peeringLocation (base name: "peeringLocation")', function() {
      // uncomment below and update the code to test the property peeringLocation
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property provisionedBandwidthInGbps (base name: "provisionedBandwidthInGbps")', function() {
      // uncomment below and update the code to test the property provisionedBandwidthInGbps
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property provisioningState (base name: "provisioningState")', function() {
      // uncomment below and update the code to test the property provisioningState
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

    it('should have the property resourceGuid (base name: "resourceGuid")', function() {
      // uncomment below and update the code to test the property resourceGuid
      //var instance = new NetworkManagementClient.ExpressRoutePortPropertiesFormat();
      //expect(instance).to.be();
    });

  });

}));
