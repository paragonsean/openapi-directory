/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteLinkPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteLinkPropertiesFormat::OAIExpressRouteLinkPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteLinkPropertiesFormat::OAIExpressRouteLinkPropertiesFormat() {
    this->initializeModel();
}

OAIExpressRouteLinkPropertiesFormat::~OAIExpressRouteLinkPropertiesFormat() {}

void OAIExpressRouteLinkPropertiesFormat::initializeModel() {

    m_admin_state_isSet = false;
    m_admin_state_isValid = false;

    m_connector_type_isSet = false;
    m_connector_type_isValid = false;

    m_interface_name_isSet = false;
    m_interface_name_isValid = false;

    m_mac_sec_config_isSet = false;
    m_mac_sec_config_isValid = false;

    m_patch_panel_id_isSet = false;
    m_patch_panel_id_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_rack_id_isSet = false;
    m_rack_id_isValid = false;

    m_router_name_isSet = false;
    m_router_name_isValid = false;
}

void OAIExpressRouteLinkPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteLinkPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_admin_state_isValid = ::OpenAPI::fromJsonValue(m_admin_state, json[QString("adminState")]);
    m_admin_state_isSet = !json[QString("adminState")].isNull() && m_admin_state_isValid;

    m_connector_type_isValid = ::OpenAPI::fromJsonValue(m_connector_type, json[QString("connectorType")]);
    m_connector_type_isSet = !json[QString("connectorType")].isNull() && m_connector_type_isValid;

    m_interface_name_isValid = ::OpenAPI::fromJsonValue(m_interface_name, json[QString("interfaceName")]);
    m_interface_name_isSet = !json[QString("interfaceName")].isNull() && m_interface_name_isValid;

    m_mac_sec_config_isValid = ::OpenAPI::fromJsonValue(m_mac_sec_config, json[QString("macSecConfig")]);
    m_mac_sec_config_isSet = !json[QString("macSecConfig")].isNull() && m_mac_sec_config_isValid;

    m_patch_panel_id_isValid = ::OpenAPI::fromJsonValue(m_patch_panel_id, json[QString("patchPanelId")]);
    m_patch_panel_id_isSet = !json[QString("patchPanelId")].isNull() && m_patch_panel_id_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_rack_id_isValid = ::OpenAPI::fromJsonValue(m_rack_id, json[QString("rackId")]);
    m_rack_id_isSet = !json[QString("rackId")].isNull() && m_rack_id_isValid;

    m_router_name_isValid = ::OpenAPI::fromJsonValue(m_router_name, json[QString("routerName")]);
    m_router_name_isSet = !json[QString("routerName")].isNull() && m_router_name_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteLinkPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_admin_state_isSet) {
        obj.insert(QString("adminState"), ::OpenAPI::toJsonValue(m_admin_state));
    }
    if (m_connector_type_isSet) {
        obj.insert(QString("connectorType"), ::OpenAPI::toJsonValue(m_connector_type));
    }
    if (m_interface_name_isSet) {
        obj.insert(QString("interfaceName"), ::OpenAPI::toJsonValue(m_interface_name));
    }
    if (m_mac_sec_config.isSet()) {
        obj.insert(QString("macSecConfig"), ::OpenAPI::toJsonValue(m_mac_sec_config));
    }
    if (m_patch_panel_id_isSet) {
        obj.insert(QString("patchPanelId"), ::OpenAPI::toJsonValue(m_patch_panel_id));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_rack_id_isSet) {
        obj.insert(QString("rackId"), ::OpenAPI::toJsonValue(m_rack_id));
    }
    if (m_router_name_isSet) {
        obj.insert(QString("routerName"), ::OpenAPI::toJsonValue(m_router_name));
    }
    return obj;
}

QString OAIExpressRouteLinkPropertiesFormat::getAdminState() const {
    return m_admin_state;
}
void OAIExpressRouteLinkPropertiesFormat::setAdminState(const QString &admin_state) {
    m_admin_state = admin_state;
    m_admin_state_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_admin_state_Set() const{
    return m_admin_state_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_admin_state_Valid() const{
    return m_admin_state_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::getConnectorType() const {
    return m_connector_type;
}
void OAIExpressRouteLinkPropertiesFormat::setConnectorType(const QString &connector_type) {
    m_connector_type = connector_type;
    m_connector_type_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_connector_type_Set() const{
    return m_connector_type_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_connector_type_Valid() const{
    return m_connector_type_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::getInterfaceName() const {
    return m_interface_name;
}
void OAIExpressRouteLinkPropertiesFormat::setInterfaceName(const QString &interface_name) {
    m_interface_name = interface_name;
    m_interface_name_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_interface_name_Set() const{
    return m_interface_name_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_interface_name_Valid() const{
    return m_interface_name_isValid;
}

OAIExpressRouteLinkMacSecConfig OAIExpressRouteLinkPropertiesFormat::getMacSecConfig() const {
    return m_mac_sec_config;
}
void OAIExpressRouteLinkPropertiesFormat::setMacSecConfig(const OAIExpressRouteLinkMacSecConfig &mac_sec_config) {
    m_mac_sec_config = mac_sec_config;
    m_mac_sec_config_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_mac_sec_config_Set() const{
    return m_mac_sec_config_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_mac_sec_config_Valid() const{
    return m_mac_sec_config_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::getPatchPanelId() const {
    return m_patch_panel_id;
}
void OAIExpressRouteLinkPropertiesFormat::setPatchPanelId(const QString &patch_panel_id) {
    m_patch_panel_id = patch_panel_id;
    m_patch_panel_id_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_patch_panel_id_Set() const{
    return m_patch_panel_id_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_patch_panel_id_Valid() const{
    return m_patch_panel_id_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIExpressRouteLinkPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::getRackId() const {
    return m_rack_id;
}
void OAIExpressRouteLinkPropertiesFormat::setRackId(const QString &rack_id) {
    m_rack_id = rack_id;
    m_rack_id_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_rack_id_Set() const{
    return m_rack_id_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_rack_id_Valid() const{
    return m_rack_id_isValid;
}

QString OAIExpressRouteLinkPropertiesFormat::getRouterName() const {
    return m_router_name;
}
void OAIExpressRouteLinkPropertiesFormat::setRouterName(const QString &router_name) {
    m_router_name = router_name;
    m_router_name_isSet = true;
}

bool OAIExpressRouteLinkPropertiesFormat::is_router_name_Set() const{
    return m_router_name_isSet;
}

bool OAIExpressRouteLinkPropertiesFormat::is_router_name_Valid() const{
    return m_router_name_isValid;
}

bool OAIExpressRouteLinkPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_admin_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_connector_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interface_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mac_sec_config.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patch_panel_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rack_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_router_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteLinkPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
