/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRouteLinkMacSecConfig.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRouteLinkMacSecConfig::OAIExpressRouteLinkMacSecConfig(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRouteLinkMacSecConfig::OAIExpressRouteLinkMacSecConfig() {
    this->initializeModel();
}

OAIExpressRouteLinkMacSecConfig::~OAIExpressRouteLinkMacSecConfig() {}

void OAIExpressRouteLinkMacSecConfig::initializeModel() {

    m_cak_secret_identifier_isSet = false;
    m_cak_secret_identifier_isValid = false;

    m_cipher_isSet = false;
    m_cipher_isValid = false;

    m_ckn_secret_identifier_isSet = false;
    m_ckn_secret_identifier_isValid = false;
}

void OAIExpressRouteLinkMacSecConfig::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRouteLinkMacSecConfig::fromJsonObject(QJsonObject json) {

    m_cak_secret_identifier_isValid = ::OpenAPI::fromJsonValue(m_cak_secret_identifier, json[QString("cakSecretIdentifier")]);
    m_cak_secret_identifier_isSet = !json[QString("cakSecretIdentifier")].isNull() && m_cak_secret_identifier_isValid;

    m_cipher_isValid = ::OpenAPI::fromJsonValue(m_cipher, json[QString("cipher")]);
    m_cipher_isSet = !json[QString("cipher")].isNull() && m_cipher_isValid;

    m_ckn_secret_identifier_isValid = ::OpenAPI::fromJsonValue(m_ckn_secret_identifier, json[QString("cknSecretIdentifier")]);
    m_ckn_secret_identifier_isSet = !json[QString("cknSecretIdentifier")].isNull() && m_ckn_secret_identifier_isValid;
}

QString OAIExpressRouteLinkMacSecConfig::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRouteLinkMacSecConfig::asJsonObject() const {
    QJsonObject obj;
    if (m_cak_secret_identifier_isSet) {
        obj.insert(QString("cakSecretIdentifier"), ::OpenAPI::toJsonValue(m_cak_secret_identifier));
    }
    if (m_cipher_isSet) {
        obj.insert(QString("cipher"), ::OpenAPI::toJsonValue(m_cipher));
    }
    if (m_ckn_secret_identifier_isSet) {
        obj.insert(QString("cknSecretIdentifier"), ::OpenAPI::toJsonValue(m_ckn_secret_identifier));
    }
    return obj;
}

QString OAIExpressRouteLinkMacSecConfig::getCakSecretIdentifier() const {
    return m_cak_secret_identifier;
}
void OAIExpressRouteLinkMacSecConfig::setCakSecretIdentifier(const QString &cak_secret_identifier) {
    m_cak_secret_identifier = cak_secret_identifier;
    m_cak_secret_identifier_isSet = true;
}

bool OAIExpressRouteLinkMacSecConfig::is_cak_secret_identifier_Set() const{
    return m_cak_secret_identifier_isSet;
}

bool OAIExpressRouteLinkMacSecConfig::is_cak_secret_identifier_Valid() const{
    return m_cak_secret_identifier_isValid;
}

QString OAIExpressRouteLinkMacSecConfig::getCipher() const {
    return m_cipher;
}
void OAIExpressRouteLinkMacSecConfig::setCipher(const QString &cipher) {
    m_cipher = cipher;
    m_cipher_isSet = true;
}

bool OAIExpressRouteLinkMacSecConfig::is_cipher_Set() const{
    return m_cipher_isSet;
}

bool OAIExpressRouteLinkMacSecConfig::is_cipher_Valid() const{
    return m_cipher_isValid;
}

QString OAIExpressRouteLinkMacSecConfig::getCknSecretIdentifier() const {
    return m_ckn_secret_identifier;
}
void OAIExpressRouteLinkMacSecConfig::setCknSecretIdentifier(const QString &ckn_secret_identifier) {
    m_ckn_secret_identifier = ckn_secret_identifier;
    m_ckn_secret_identifier_isSet = true;
}

bool OAIExpressRouteLinkMacSecConfig::is_ckn_secret_identifier_Set() const{
    return m_ckn_secret_identifier_isSet;
}

bool OAIExpressRouteLinkMacSecConfig::is_ckn_secret_identifier_Valid() const{
    return m_ckn_secret_identifier_isValid;
}

bool OAIExpressRouteLinkMacSecConfig::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cak_secret_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cipher_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ckn_secret_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRouteLinkMacSecConfig::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
