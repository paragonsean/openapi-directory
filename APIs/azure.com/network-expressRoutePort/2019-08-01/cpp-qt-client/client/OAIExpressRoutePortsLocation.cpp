/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIExpressRoutePortsLocation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIExpressRoutePortsLocation::OAIExpressRoutePortsLocation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIExpressRoutePortsLocation::OAIExpressRoutePortsLocation() {
    this->initializeModel();
}

OAIExpressRoutePortsLocation::~OAIExpressRoutePortsLocation() {}

void OAIExpressRoutePortsLocation::initializeModel() {

    m_properties_isSet = false;
    m_properties_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIExpressRoutePortsLocation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIExpressRoutePortsLocation::fromJsonObject(QJsonObject json) {

    m_properties_isValid = ::OpenAPI::fromJsonValue(m_properties, json[QString("properties")]);
    m_properties_isSet = !json[QString("properties")].isNull() && m_properties_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIExpressRoutePortsLocation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIExpressRoutePortsLocation::asJsonObject() const {
    QJsonObject obj;
    if (m_properties.isSet()) {
        obj.insert(QString("properties"), ::OpenAPI::toJsonValue(m_properties));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

OAIExpressRoutePortsLocationPropertiesFormat OAIExpressRoutePortsLocation::getProperties() const {
    return m_properties;
}
void OAIExpressRoutePortsLocation::setProperties(const OAIExpressRoutePortsLocationPropertiesFormat &properties) {
    m_properties = properties;
    m_properties_isSet = true;
}

bool OAIExpressRoutePortsLocation::is_properties_Set() const{
    return m_properties_isSet;
}

bool OAIExpressRoutePortsLocation::is_properties_Valid() const{
    return m_properties_isValid;
}

QString OAIExpressRoutePortsLocation::getId() const {
    return m_id;
}
void OAIExpressRoutePortsLocation::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIExpressRoutePortsLocation::is_id_Set() const{
    return m_id_isSet;
}

bool OAIExpressRoutePortsLocation::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIExpressRoutePortsLocation::getLocation() const {
    return m_location;
}
void OAIExpressRoutePortsLocation::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIExpressRoutePortsLocation::is_location_Set() const{
    return m_location_isSet;
}

bool OAIExpressRoutePortsLocation::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIExpressRoutePortsLocation::getName() const {
    return m_name;
}
void OAIExpressRoutePortsLocation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIExpressRoutePortsLocation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIExpressRoutePortsLocation::is_name_Valid() const{
    return m_name_isValid;
}

QMap<QString, QString> OAIExpressRoutePortsLocation::getTags() const {
    return m_tags;
}
void OAIExpressRoutePortsLocation::setTags(const QMap<QString, QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIExpressRoutePortsLocation::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIExpressRoutePortsLocation::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIExpressRoutePortsLocation::getType() const {
    return m_type;
}
void OAIExpressRoutePortsLocation::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIExpressRoutePortsLocation::is_type_Set() const{
    return m_type_isSet;
}

bool OAIExpressRoutePortsLocation::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIExpressRoutePortsLocation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_properties.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIExpressRoutePortsLocation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
