/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualRouterPeeringProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualRouterPeeringProperties::OAIVirtualRouterPeeringProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualRouterPeeringProperties::OAIVirtualRouterPeeringProperties() {
    this->initializeModel();
}

OAIVirtualRouterPeeringProperties::~OAIVirtualRouterPeeringProperties() {}

void OAIVirtualRouterPeeringProperties::initializeModel() {

    m_peer_asn_isSet = false;
    m_peer_asn_isValid = false;

    m_peer_ip_isSet = false;
    m_peer_ip_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIVirtualRouterPeeringProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualRouterPeeringProperties::fromJsonObject(QJsonObject json) {

    m_peer_asn_isValid = ::OpenAPI::fromJsonValue(m_peer_asn, json[QString("peerAsn")]);
    m_peer_asn_isSet = !json[QString("peerAsn")].isNull() && m_peer_asn_isValid;

    m_peer_ip_isValid = ::OpenAPI::fromJsonValue(m_peer_ip, json[QString("peerIp")]);
    m_peer_ip_isSet = !json[QString("peerIp")].isNull() && m_peer_ip_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIVirtualRouterPeeringProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualRouterPeeringProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_peer_asn_isSet) {
        obj.insert(QString("peerAsn"), ::OpenAPI::toJsonValue(m_peer_asn));
    }
    if (m_peer_ip_isSet) {
        obj.insert(QString("peerIp"), ::OpenAPI::toJsonValue(m_peer_ip));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

qint64 OAIVirtualRouterPeeringProperties::getPeerAsn() const {
    return m_peer_asn;
}
void OAIVirtualRouterPeeringProperties::setPeerAsn(const qint64 &peer_asn) {
    m_peer_asn = peer_asn;
    m_peer_asn_isSet = true;
}

bool OAIVirtualRouterPeeringProperties::is_peer_asn_Set() const{
    return m_peer_asn_isSet;
}

bool OAIVirtualRouterPeeringProperties::is_peer_asn_Valid() const{
    return m_peer_asn_isValid;
}

QString OAIVirtualRouterPeeringProperties::getPeerIp() const {
    return m_peer_ip;
}
void OAIVirtualRouterPeeringProperties::setPeerIp(const QString &peer_ip) {
    m_peer_ip = peer_ip;
    m_peer_ip_isSet = true;
}

bool OAIVirtualRouterPeeringProperties::is_peer_ip_Set() const{
    return m_peer_ip_isSet;
}

bool OAIVirtualRouterPeeringProperties::is_peer_ip_Valid() const{
    return m_peer_ip_isValid;
}

QString OAIVirtualRouterPeeringProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualRouterPeeringProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualRouterPeeringProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualRouterPeeringProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIVirtualRouterPeeringProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_peer_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_peer_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualRouterPeeringProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
