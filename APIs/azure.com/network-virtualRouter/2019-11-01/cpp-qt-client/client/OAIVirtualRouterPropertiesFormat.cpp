/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualRouterPropertiesFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualRouterPropertiesFormat::OAIVirtualRouterPropertiesFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualRouterPropertiesFormat::OAIVirtualRouterPropertiesFormat() {
    this->initializeModel();
}

OAIVirtualRouterPropertiesFormat::~OAIVirtualRouterPropertiesFormat() {}

void OAIVirtualRouterPropertiesFormat::initializeModel() {

    m_hosted_gateway_isSet = false;
    m_hosted_gateway_isValid = false;

    m_hosted_subnet_isSet = false;
    m_hosted_subnet_isValid = false;

    m_peerings_isSet = false;
    m_peerings_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_virtual_router_asn_isSet = false;
    m_virtual_router_asn_isValid = false;

    m_virtual_router_ips_isSet = false;
    m_virtual_router_ips_isValid = false;
}

void OAIVirtualRouterPropertiesFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualRouterPropertiesFormat::fromJsonObject(QJsonObject json) {

    m_hosted_gateway_isValid = ::OpenAPI::fromJsonValue(m_hosted_gateway, json[QString("hostedGateway")]);
    m_hosted_gateway_isSet = !json[QString("hostedGateway")].isNull() && m_hosted_gateway_isValid;

    m_hosted_subnet_isValid = ::OpenAPI::fromJsonValue(m_hosted_subnet, json[QString("hostedSubnet")]);
    m_hosted_subnet_isSet = !json[QString("hostedSubnet")].isNull() && m_hosted_subnet_isValid;

    m_peerings_isValid = ::OpenAPI::fromJsonValue(m_peerings, json[QString("peerings")]);
    m_peerings_isSet = !json[QString("peerings")].isNull() && m_peerings_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_virtual_router_asn_isValid = ::OpenAPI::fromJsonValue(m_virtual_router_asn, json[QString("virtualRouterAsn")]);
    m_virtual_router_asn_isSet = !json[QString("virtualRouterAsn")].isNull() && m_virtual_router_asn_isValid;

    m_virtual_router_ips_isValid = ::OpenAPI::fromJsonValue(m_virtual_router_ips, json[QString("virtualRouterIps")]);
    m_virtual_router_ips_isSet = !json[QString("virtualRouterIps")].isNull() && m_virtual_router_ips_isValid;
}

QString OAIVirtualRouterPropertiesFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualRouterPropertiesFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_hosted_gateway.isSet()) {
        obj.insert(QString("hostedGateway"), ::OpenAPI::toJsonValue(m_hosted_gateway));
    }
    if (m_hosted_subnet.isSet()) {
        obj.insert(QString("hostedSubnet"), ::OpenAPI::toJsonValue(m_hosted_subnet));
    }
    if (m_peerings.size() > 0) {
        obj.insert(QString("peerings"), ::OpenAPI::toJsonValue(m_peerings));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_virtual_router_asn_isSet) {
        obj.insert(QString("virtualRouterAsn"), ::OpenAPI::toJsonValue(m_virtual_router_asn));
    }
    if (m_virtual_router_ips.size() > 0) {
        obj.insert(QString("virtualRouterIps"), ::OpenAPI::toJsonValue(m_virtual_router_ips));
    }
    return obj;
}

OAIVirtualRouterPropertiesFormat_hostedGateway OAIVirtualRouterPropertiesFormat::getHostedGateway() const {
    return m_hosted_gateway;
}
void OAIVirtualRouterPropertiesFormat::setHostedGateway(const OAIVirtualRouterPropertiesFormat_hostedGateway &hosted_gateway) {
    m_hosted_gateway = hosted_gateway;
    m_hosted_gateway_isSet = true;
}

bool OAIVirtualRouterPropertiesFormat::is_hosted_gateway_Set() const{
    return m_hosted_gateway_isSet;
}

bool OAIVirtualRouterPropertiesFormat::is_hosted_gateway_Valid() const{
    return m_hosted_gateway_isValid;
}

OAIVirtualRouterPropertiesFormat_hostedGateway OAIVirtualRouterPropertiesFormat::getHostedSubnet() const {
    return m_hosted_subnet;
}
void OAIVirtualRouterPropertiesFormat::setHostedSubnet(const OAIVirtualRouterPropertiesFormat_hostedGateway &hosted_subnet) {
    m_hosted_subnet = hosted_subnet;
    m_hosted_subnet_isSet = true;
}

bool OAIVirtualRouterPropertiesFormat::is_hosted_subnet_Set() const{
    return m_hosted_subnet_isSet;
}

bool OAIVirtualRouterPropertiesFormat::is_hosted_subnet_Valid() const{
    return m_hosted_subnet_isValid;
}

QList<OAIVirtualRouterPropertiesFormat_hostedGateway> OAIVirtualRouterPropertiesFormat::getPeerings() const {
    return m_peerings;
}
void OAIVirtualRouterPropertiesFormat::setPeerings(const QList<OAIVirtualRouterPropertiesFormat_hostedGateway> &peerings) {
    m_peerings = peerings;
    m_peerings_isSet = true;
}

bool OAIVirtualRouterPropertiesFormat::is_peerings_Set() const{
    return m_peerings_isSet;
}

bool OAIVirtualRouterPropertiesFormat::is_peerings_Valid() const{
    return m_peerings_isValid;
}

QString OAIVirtualRouterPropertiesFormat::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIVirtualRouterPropertiesFormat::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIVirtualRouterPropertiesFormat::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIVirtualRouterPropertiesFormat::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

qint64 OAIVirtualRouterPropertiesFormat::getVirtualRouterAsn() const {
    return m_virtual_router_asn;
}
void OAIVirtualRouterPropertiesFormat::setVirtualRouterAsn(const qint64 &virtual_router_asn) {
    m_virtual_router_asn = virtual_router_asn;
    m_virtual_router_asn_isSet = true;
}

bool OAIVirtualRouterPropertiesFormat::is_virtual_router_asn_Set() const{
    return m_virtual_router_asn_isSet;
}

bool OAIVirtualRouterPropertiesFormat::is_virtual_router_asn_Valid() const{
    return m_virtual_router_asn_isValid;
}

QList<QString> OAIVirtualRouterPropertiesFormat::getVirtualRouterIps() const {
    return m_virtual_router_ips;
}
void OAIVirtualRouterPropertiesFormat::setVirtualRouterIps(const QList<QString> &virtual_router_ips) {
    m_virtual_router_ips = virtual_router_ips;
    m_virtual_router_ips_isSet = true;
}

bool OAIVirtualRouterPropertiesFormat::is_virtual_router_ips_Set() const{
    return m_virtual_router_ips_isSet;
}

bool OAIVirtualRouterPropertiesFormat::is_virtual_router_ips_Valid() const{
    return m_virtual_router_ips_isValid;
}

bool OAIVirtualRouterPropertiesFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_hosted_gateway.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hosted_subnet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_peerings.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router_asn_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_virtual_router_ips.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualRouterPropertiesFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
