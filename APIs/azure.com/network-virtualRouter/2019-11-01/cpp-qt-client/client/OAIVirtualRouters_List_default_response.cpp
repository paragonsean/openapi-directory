/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVirtualRouters_List_default_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVirtualRouters_List_default_response::OAIVirtualRouters_List_default_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVirtualRouters_List_default_response::OAIVirtualRouters_List_default_response() {
    this->initializeModel();
}

OAIVirtualRouters_List_default_response::~OAIVirtualRouters_List_default_response() {}

void OAIVirtualRouters_List_default_response::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_inner_error_isSet = false;
    m_inner_error_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_target_isSet = false;
    m_target_isValid = false;
}

void OAIVirtualRouters_List_default_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVirtualRouters_List_default_response::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_inner_error_isValid = ::OpenAPI::fromJsonValue(m_inner_error, json[QString("innerError")]);
    m_inner_error_isSet = !json[QString("innerError")].isNull() && m_inner_error_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_target_isValid = ::OpenAPI::fromJsonValue(m_target, json[QString("target")]);
    m_target_isSet = !json[QString("target")].isNull() && m_target_isValid;
}

QString OAIVirtualRouters_List_default_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVirtualRouters_List_default_response::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_inner_error_isSet) {
        obj.insert(QString("innerError"), ::OpenAPI::toJsonValue(m_inner_error));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_target_isSet) {
        obj.insert(QString("target"), ::OpenAPI::toJsonValue(m_target));
    }
    return obj;
}

QString OAIVirtualRouters_List_default_response::getCode() const {
    return m_code;
}
void OAIVirtualRouters_List_default_response::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIVirtualRouters_List_default_response::is_code_Set() const{
    return m_code_isSet;
}

bool OAIVirtualRouters_List_default_response::is_code_Valid() const{
    return m_code_isValid;
}

QList<OAIVirtualRouters_List_default_response_details_inner> OAIVirtualRouters_List_default_response::getDetails() const {
    return m_details;
}
void OAIVirtualRouters_List_default_response::setDetails(const QList<OAIVirtualRouters_List_default_response_details_inner> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIVirtualRouters_List_default_response::is_details_Set() const{
    return m_details_isSet;
}

bool OAIVirtualRouters_List_default_response::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIVirtualRouters_List_default_response::getInnerError() const {
    return m_inner_error;
}
void OAIVirtualRouters_List_default_response::setInnerError(const QString &inner_error) {
    m_inner_error = inner_error;
    m_inner_error_isSet = true;
}

bool OAIVirtualRouters_List_default_response::is_inner_error_Set() const{
    return m_inner_error_isSet;
}

bool OAIVirtualRouters_List_default_response::is_inner_error_Valid() const{
    return m_inner_error_isValid;
}

QString OAIVirtualRouters_List_default_response::getMessage() const {
    return m_message;
}
void OAIVirtualRouters_List_default_response::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIVirtualRouters_List_default_response::is_message_Set() const{
    return m_message_isSet;
}

bool OAIVirtualRouters_List_default_response::is_message_Valid() const{
    return m_message_isValid;
}

QString OAIVirtualRouters_List_default_response::getTarget() const {
    return m_target;
}
void OAIVirtualRouters_List_default_response::setTarget(const QString &target) {
    m_target = target;
    m_target_isSet = true;
}

bool OAIVirtualRouters_List_default_response::is_target_Set() const{
    return m_target_isSet;
}

bool OAIVirtualRouters_List_default_response::is_target_Valid() const{
    return m_target_isValid;
}

bool OAIVirtualRouters_List_default_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_inner_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVirtualRouters_List_default_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
