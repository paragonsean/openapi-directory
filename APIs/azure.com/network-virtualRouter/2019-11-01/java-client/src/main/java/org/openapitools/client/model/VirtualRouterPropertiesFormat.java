/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.VirtualRouterPropertiesFormatHostedGateway;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Virtual Router definition.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:29:21.096219-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VirtualRouterPropertiesFormat {
  public static final String SERIALIZED_NAME_HOSTED_GATEWAY = "hostedGateway";
  @SerializedName(SERIALIZED_NAME_HOSTED_GATEWAY)
  private VirtualRouterPropertiesFormatHostedGateway hostedGateway;

  public static final String SERIALIZED_NAME_HOSTED_SUBNET = "hostedSubnet";
  @SerializedName(SERIALIZED_NAME_HOSTED_SUBNET)
  private VirtualRouterPropertiesFormatHostedGateway hostedSubnet;

  public static final String SERIALIZED_NAME_PEERINGS = "peerings";
  @SerializedName(SERIALIZED_NAME_PEERINGS)
  private List<VirtualRouterPropertiesFormatHostedGateway> peerings = new ArrayList<>();

  /**
   * The current provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    UPDATING("Updating"),
    
    DELETING("Deleting"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_VIRTUAL_ROUTER_ASN = "virtualRouterAsn";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ROUTER_ASN)
  private Long virtualRouterAsn;

  public static final String SERIALIZED_NAME_VIRTUAL_ROUTER_IPS = "virtualRouterIps";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_ROUTER_IPS)
  private List<String> virtualRouterIps = new ArrayList<>();

  public VirtualRouterPropertiesFormat() {
  }

  public VirtualRouterPropertiesFormat(
     List<VirtualRouterPropertiesFormatHostedGateway> peerings, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.peerings = peerings;
    this.provisioningState = provisioningState;
  }

  public VirtualRouterPropertiesFormat hostedGateway(VirtualRouterPropertiesFormatHostedGateway hostedGateway) {
    this.hostedGateway = hostedGateway;
    return this;
  }

  /**
   * Get hostedGateway
   * @return hostedGateway
   */
  @javax.annotation.Nullable
  public VirtualRouterPropertiesFormatHostedGateway getHostedGateway() {
    return hostedGateway;
  }

  public void setHostedGateway(VirtualRouterPropertiesFormatHostedGateway hostedGateway) {
    this.hostedGateway = hostedGateway;
  }


  public VirtualRouterPropertiesFormat hostedSubnet(VirtualRouterPropertiesFormatHostedGateway hostedSubnet) {
    this.hostedSubnet = hostedSubnet;
    return this;
  }

  /**
   * Get hostedSubnet
   * @return hostedSubnet
   */
  @javax.annotation.Nullable
  public VirtualRouterPropertiesFormatHostedGateway getHostedSubnet() {
    return hostedSubnet;
  }

  public void setHostedSubnet(VirtualRouterPropertiesFormatHostedGateway hostedSubnet) {
    this.hostedSubnet = hostedSubnet;
  }


  /**
   * List of references to VirtualRouterPeerings.
   * @return peerings
   */
  @javax.annotation.Nullable
  public List<VirtualRouterPropertiesFormatHostedGateway> getPeerings() {
    return peerings;
  }



  /**
   * The current provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public VirtualRouterPropertiesFormat virtualRouterAsn(Long virtualRouterAsn) {
    this.virtualRouterAsn = virtualRouterAsn;
    return this;
  }

  /**
   * VirtualRouter ASN.
   * minimum: 0
   * maximum: 4294967295
   * @return virtualRouterAsn
   */
  @javax.annotation.Nullable
  public Long getVirtualRouterAsn() {
    return virtualRouterAsn;
  }

  public void setVirtualRouterAsn(Long virtualRouterAsn) {
    this.virtualRouterAsn = virtualRouterAsn;
  }


  public VirtualRouterPropertiesFormat virtualRouterIps(List<String> virtualRouterIps) {
    this.virtualRouterIps = virtualRouterIps;
    return this;
  }

  public VirtualRouterPropertiesFormat addVirtualRouterIpsItem(String virtualRouterIpsItem) {
    if (this.virtualRouterIps == null) {
      this.virtualRouterIps = new ArrayList<>();
    }
    this.virtualRouterIps.add(virtualRouterIpsItem);
    return this;
  }

  /**
   * VirtualRouter IPs.
   * @return virtualRouterIps
   */
  @javax.annotation.Nullable
  public List<String> getVirtualRouterIps() {
    return virtualRouterIps;
  }

  public void setVirtualRouterIps(List<String> virtualRouterIps) {
    this.virtualRouterIps = virtualRouterIps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VirtualRouterPropertiesFormat virtualRouterPropertiesFormat = (VirtualRouterPropertiesFormat) o;
    return Objects.equals(this.hostedGateway, virtualRouterPropertiesFormat.hostedGateway) &&
        Objects.equals(this.hostedSubnet, virtualRouterPropertiesFormat.hostedSubnet) &&
        Objects.equals(this.peerings, virtualRouterPropertiesFormat.peerings) &&
        Objects.equals(this.provisioningState, virtualRouterPropertiesFormat.provisioningState) &&
        Objects.equals(this.virtualRouterAsn, virtualRouterPropertiesFormat.virtualRouterAsn) &&
        Objects.equals(this.virtualRouterIps, virtualRouterPropertiesFormat.virtualRouterIps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hostedGateway, hostedSubnet, peerings, provisioningState, virtualRouterAsn, virtualRouterIps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VirtualRouterPropertiesFormat {\n");
    sb.append("    hostedGateway: ").append(toIndentedString(hostedGateway)).append("\n");
    sb.append("    hostedSubnet: ").append(toIndentedString(hostedSubnet)).append("\n");
    sb.append("    peerings: ").append(toIndentedString(peerings)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    virtualRouterAsn: ").append(toIndentedString(virtualRouterAsn)).append("\n");
    sb.append("    virtualRouterIps: ").append(toIndentedString(virtualRouterIps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hostedGateway");
    openapiFields.add("hostedSubnet");
    openapiFields.add("peerings");
    openapiFields.add("provisioningState");
    openapiFields.add("virtualRouterAsn");
    openapiFields.add("virtualRouterIps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VirtualRouterPropertiesFormat
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VirtualRouterPropertiesFormat.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VirtualRouterPropertiesFormat is not found in the empty JSON string", VirtualRouterPropertiesFormat.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VirtualRouterPropertiesFormat.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VirtualRouterPropertiesFormat` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `hostedGateway`
      if (jsonObj.get("hostedGateway") != null && !jsonObj.get("hostedGateway").isJsonNull()) {
        VirtualRouterPropertiesFormatHostedGateway.validateJsonElement(jsonObj.get("hostedGateway"));
      }
      // validate the optional field `hostedSubnet`
      if (jsonObj.get("hostedSubnet") != null && !jsonObj.get("hostedSubnet").isJsonNull()) {
        VirtualRouterPropertiesFormatHostedGateway.validateJsonElement(jsonObj.get("hostedSubnet"));
      }
      if (jsonObj.get("peerings") != null && !jsonObj.get("peerings").isJsonNull()) {
        JsonArray jsonArraypeerings = jsonObj.getAsJsonArray("peerings");
        if (jsonArraypeerings != null) {
          // ensure the json data is an array
          if (!jsonObj.get("peerings").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `peerings` to be an array in the JSON string but got `%s`", jsonObj.get("peerings").toString()));
          }

          // validate the optional field `peerings` (array)
          for (int i = 0; i < jsonArraypeerings.size(); i++) {
            VirtualRouterPropertiesFormatHostedGateway.validateJsonElement(jsonArraypeerings.get(i));
          };
        }
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("virtualRouterIps") != null && !jsonObj.get("virtualRouterIps").isJsonNull() && !jsonObj.get("virtualRouterIps").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `virtualRouterIps` to be an array in the JSON string but got `%s`", jsonObj.get("virtualRouterIps").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VirtualRouterPropertiesFormat.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VirtualRouterPropertiesFormat' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VirtualRouterPropertiesFormat> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VirtualRouterPropertiesFormat.class));

       return (TypeAdapter<T>) new TypeAdapter<VirtualRouterPropertiesFormat>() {
           @Override
           public void write(JsonWriter out, VirtualRouterPropertiesFormat value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VirtualRouterPropertiesFormat read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VirtualRouterPropertiesFormat given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VirtualRouterPropertiesFormat
   * @throws IOException if the JSON string is invalid with respect to VirtualRouterPropertiesFormat
   */
  public static VirtualRouterPropertiesFormat fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VirtualRouterPropertiesFormat.class);
  }

  /**
   * Convert an instance of VirtualRouterPropertiesFormat to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

