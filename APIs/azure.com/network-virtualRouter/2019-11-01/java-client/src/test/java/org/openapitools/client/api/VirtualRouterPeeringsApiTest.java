/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.VirtualRouterPeering;
import org.openapitools.client.model.VirtualRouterPeeringListResult;
import org.openapitools.client.model.VirtualRoutersListDefaultResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualRouterPeeringsApi
 */
@Disabled
public class VirtualRouterPeeringsApiTest {

    private final VirtualRouterPeeringsApi api = new VirtualRouterPeeringsApi();

    /**
     * Creates or updates the specified Virtual Router Peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRouterPeeringsCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String peeringName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualRouterPeering parameters = null;
        VirtualRouterPeering response = api.virtualRouterPeeringsCreateOrUpdate(resourceGroupName, virtualRouterName, peeringName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified peering from a Virtual Router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRouterPeeringsDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String peeringName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualRouterPeeringsDelete(resourceGroupName, virtualRouterName, peeringName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified Virtual Router Peering.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRouterPeeringsGetTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String peeringName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualRouterPeering response = api.virtualRouterPeeringsGet(resourceGroupName, virtualRouterName, peeringName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all Virtual Router Peerings in a Virtual Router resource.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRouterPeeringsListTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualRouterPeeringListResult response = api.virtualRouterPeeringsList(resourceGroupName, virtualRouterName, apiVersion, subscriptionId);
        // TODO: test validations
    }

}
