# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.virtual_router_properties_format_hosted_gateway import VirtualRouterPropertiesFormatHostedGateway
from openapi_server import util


class VirtualRouterPropertiesFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hosted_gateway: VirtualRouterPropertiesFormatHostedGateway=None, hosted_subnet: VirtualRouterPropertiesFormatHostedGateway=None, peerings: List[VirtualRouterPropertiesFormatHostedGateway]=None, provisioning_state: str=None, virtual_router_asn: int=None, virtual_router_ips: List[str]=None):
        """VirtualRouterPropertiesFormat - a model defined in OpenAPI

        :param hosted_gateway: The hosted_gateway of this VirtualRouterPropertiesFormat.
        :param hosted_subnet: The hosted_subnet of this VirtualRouterPropertiesFormat.
        :param peerings: The peerings of this VirtualRouterPropertiesFormat.
        :param provisioning_state: The provisioning_state of this VirtualRouterPropertiesFormat.
        :param virtual_router_asn: The virtual_router_asn of this VirtualRouterPropertiesFormat.
        :param virtual_router_ips: The virtual_router_ips of this VirtualRouterPropertiesFormat.
        """
        self.openapi_types = {
            'hosted_gateway': VirtualRouterPropertiesFormatHostedGateway,
            'hosted_subnet': VirtualRouterPropertiesFormatHostedGateway,
            'peerings': List[VirtualRouterPropertiesFormatHostedGateway],
            'provisioning_state': str,
            'virtual_router_asn': int,
            'virtual_router_ips': List[str]
        }

        self.attribute_map = {
            'hosted_gateway': 'hostedGateway',
            'hosted_subnet': 'hostedSubnet',
            'peerings': 'peerings',
            'provisioning_state': 'provisioningState',
            'virtual_router_asn': 'virtualRouterAsn',
            'virtual_router_ips': 'virtualRouterIps'
        }

        self._hosted_gateway = hosted_gateway
        self._hosted_subnet = hosted_subnet
        self._peerings = peerings
        self._provisioning_state = provisioning_state
        self._virtual_router_asn = virtual_router_asn
        self._virtual_router_ips = virtual_router_ips

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualRouterPropertiesFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualRouterPropertiesFormat of this VirtualRouterPropertiesFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hosted_gateway(self):
        """Gets the hosted_gateway of this VirtualRouterPropertiesFormat.


        :return: The hosted_gateway of this VirtualRouterPropertiesFormat.
        :rtype: VirtualRouterPropertiesFormatHostedGateway
        """
        return self._hosted_gateway

    @hosted_gateway.setter
    def hosted_gateway(self, hosted_gateway):
        """Sets the hosted_gateway of this VirtualRouterPropertiesFormat.


        :param hosted_gateway: The hosted_gateway of this VirtualRouterPropertiesFormat.
        :type hosted_gateway: VirtualRouterPropertiesFormatHostedGateway
        """

        self._hosted_gateway = hosted_gateway

    @property
    def hosted_subnet(self):
        """Gets the hosted_subnet of this VirtualRouterPropertiesFormat.


        :return: The hosted_subnet of this VirtualRouterPropertiesFormat.
        :rtype: VirtualRouterPropertiesFormatHostedGateway
        """
        return self._hosted_subnet

    @hosted_subnet.setter
    def hosted_subnet(self, hosted_subnet):
        """Sets the hosted_subnet of this VirtualRouterPropertiesFormat.


        :param hosted_subnet: The hosted_subnet of this VirtualRouterPropertiesFormat.
        :type hosted_subnet: VirtualRouterPropertiesFormatHostedGateway
        """

        self._hosted_subnet = hosted_subnet

    @property
    def peerings(self):
        """Gets the peerings of this VirtualRouterPropertiesFormat.

        List of references to VirtualRouterPeerings.

        :return: The peerings of this VirtualRouterPropertiesFormat.
        :rtype: List[VirtualRouterPropertiesFormatHostedGateway]
        """
        return self._peerings

    @peerings.setter
    def peerings(self, peerings):
        """Sets the peerings of this VirtualRouterPropertiesFormat.

        List of references to VirtualRouterPeerings.

        :param peerings: The peerings of this VirtualRouterPropertiesFormat.
        :type peerings: List[VirtualRouterPropertiesFormatHostedGateway]
        """

        self._peerings = peerings

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualRouterPropertiesFormat.

        The current provisioning state.

        :return: The provisioning_state of this VirtualRouterPropertiesFormat.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualRouterPropertiesFormat.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this VirtualRouterPropertiesFormat.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def virtual_router_asn(self):
        """Gets the virtual_router_asn of this VirtualRouterPropertiesFormat.

        VirtualRouter ASN.

        :return: The virtual_router_asn of this VirtualRouterPropertiesFormat.
        :rtype: int
        """
        return self._virtual_router_asn

    @virtual_router_asn.setter
    def virtual_router_asn(self, virtual_router_asn):
        """Sets the virtual_router_asn of this VirtualRouterPropertiesFormat.

        VirtualRouter ASN.

        :param virtual_router_asn: The virtual_router_asn of this VirtualRouterPropertiesFormat.
        :type virtual_router_asn: int
        """
        if virtual_router_asn is not None and virtual_router_asn > 4294967295:
            raise ValueError("Invalid value for `virtual_router_asn`, must be a value less than or equal to `4294967295`")
        if virtual_router_asn is not None and virtual_router_asn < 0:
            raise ValueError("Invalid value for `virtual_router_asn`, must be a value greater than or equal to `0`")

        self._virtual_router_asn = virtual_router_asn

    @property
    def virtual_router_ips(self):
        """Gets the virtual_router_ips of this VirtualRouterPropertiesFormat.

        VirtualRouter IPs.

        :return: The virtual_router_ips of this VirtualRouterPropertiesFormat.
        :rtype: List[str]
        """
        return self._virtual_router_ips

    @virtual_router_ips.setter
    def virtual_router_ips(self, virtual_router_ips):
        """Sets the virtual_router_ips of this VirtualRouterPropertiesFormat.

        VirtualRouter IPs.

        :param virtual_router_ips: The virtual_router_ips of this VirtualRouterPropertiesFormat.
        :type virtual_router_ips: List[str]
        """

        self._virtual_router_ips = virtual_router_ips
