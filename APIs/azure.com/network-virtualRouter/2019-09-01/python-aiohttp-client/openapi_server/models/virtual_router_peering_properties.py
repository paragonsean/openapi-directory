# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class VirtualRouterPeeringProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, peer_asn: int=None, peer_ip: str=None, provisioning_state: str=None):
        """VirtualRouterPeeringProperties - a model defined in OpenAPI

        :param peer_asn: The peer_asn of this VirtualRouterPeeringProperties.
        :param peer_ip: The peer_ip of this VirtualRouterPeeringProperties.
        :param provisioning_state: The provisioning_state of this VirtualRouterPeeringProperties.
        """
        self.openapi_types = {
            'peer_asn': int,
            'peer_ip': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'peer_asn': 'peerAsn',
            'peer_ip': 'peerIp',
            'provisioning_state': 'provisioningState'
        }

        self._peer_asn = peer_asn
        self._peer_ip = peer_ip
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'VirtualRouterPeeringProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The VirtualRouterPeeringProperties of this VirtualRouterPeeringProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def peer_asn(self):
        """Gets the peer_asn of this VirtualRouterPeeringProperties.

        Peer ASN.

        :return: The peer_asn of this VirtualRouterPeeringProperties.
        :rtype: int
        """
        return self._peer_asn

    @peer_asn.setter
    def peer_asn(self, peer_asn):
        """Sets the peer_asn of this VirtualRouterPeeringProperties.

        Peer ASN.

        :param peer_asn: The peer_asn of this VirtualRouterPeeringProperties.
        :type peer_asn: int
        """
        if peer_asn is not None and peer_asn > 4294967295:
            raise ValueError("Invalid value for `peer_asn`, must be a value less than or equal to `4294967295`")
        if peer_asn is not None and peer_asn < 0:
            raise ValueError("Invalid value for `peer_asn`, must be a value greater than or equal to `0`")

        self._peer_asn = peer_asn

    @property
    def peer_ip(self):
        """Gets the peer_ip of this VirtualRouterPeeringProperties.

        Peer IP.

        :return: The peer_ip of this VirtualRouterPeeringProperties.
        :rtype: str
        """
        return self._peer_ip

    @peer_ip.setter
    def peer_ip(self, peer_ip):
        """Sets the peer_ip of this VirtualRouterPeeringProperties.

        Peer IP.

        :param peer_ip: The peer_ip of this VirtualRouterPeeringProperties.
        :type peer_ip: str
        """

        self._peer_ip = peer_ip

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this VirtualRouterPeeringProperties.

        The current provisioning state.

        :return: The provisioning_state of this VirtualRouterPeeringProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this VirtualRouterPeeringProperties.

        The current provisioning state.

        :param provisioning_state: The provisioning_state of this VirtualRouterPeeringProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Updating", "Deleting", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
