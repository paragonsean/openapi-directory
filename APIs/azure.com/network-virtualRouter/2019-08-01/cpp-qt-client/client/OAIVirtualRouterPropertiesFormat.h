/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVirtualRouterPropertiesFormat.h
 *
 * Virtual Router definition
 */

#ifndef OAIVirtualRouterPropertiesFormat_H
#define OAIVirtualRouterPropertiesFormat_H

#include <QJsonObject>

#include "OAIVirtualRouterPropertiesFormat_hostedGateway.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVirtualRouterPropertiesFormat_hostedGateway;

class OAIVirtualRouterPropertiesFormat : public OAIObject {
public:
    OAIVirtualRouterPropertiesFormat();
    OAIVirtualRouterPropertiesFormat(QString json);
    ~OAIVirtualRouterPropertiesFormat() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVirtualRouterPropertiesFormat_hostedGateway getHostedGateway() const;
    void setHostedGateway(const OAIVirtualRouterPropertiesFormat_hostedGateway &hosted_gateway);
    bool is_hosted_gateway_Set() const;
    bool is_hosted_gateway_Valid() const;

    OAIVirtualRouterPropertiesFormat_hostedGateway getHostedSubnet() const;
    void setHostedSubnet(const OAIVirtualRouterPropertiesFormat_hostedGateway &hosted_subnet);
    bool is_hosted_subnet_Set() const;
    bool is_hosted_subnet_Valid() const;

    QList<OAIVirtualRouterPropertiesFormat_hostedGateway> getPeerings() const;
    void setPeerings(const QList<OAIVirtualRouterPropertiesFormat_hostedGateway> &peerings);
    bool is_peerings_Set() const;
    bool is_peerings_Valid() const;

    QString getProvisioningState() const;
    void setProvisioningState(const QString &provisioning_state);
    bool is_provisioning_state_Set() const;
    bool is_provisioning_state_Valid() const;

    qint64 getVirtualRouterAsn() const;
    void setVirtualRouterAsn(const qint64 &virtual_router_asn);
    bool is_virtual_router_asn_Set() const;
    bool is_virtual_router_asn_Valid() const;

    QList<QString> getVirtualRouterIps() const;
    void setVirtualRouterIps(const QList<QString> &virtual_router_ips);
    bool is_virtual_router_ips_Set() const;
    bool is_virtual_router_ips_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVirtualRouterPropertiesFormat_hostedGateway m_hosted_gateway;
    bool m_hosted_gateway_isSet;
    bool m_hosted_gateway_isValid;

    OAIVirtualRouterPropertiesFormat_hostedGateway m_hosted_subnet;
    bool m_hosted_subnet_isSet;
    bool m_hosted_subnet_isValid;

    QList<OAIVirtualRouterPropertiesFormat_hostedGateway> m_peerings;
    bool m_peerings_isSet;
    bool m_peerings_isValid;

    QString m_provisioning_state;
    bool m_provisioning_state_isSet;
    bool m_provisioning_state_isValid;

    qint64 m_virtual_router_asn;
    bool m_virtual_router_asn_isSet;
    bool m_virtual_router_asn_isValid;

    QList<QString> m_virtual_router_ips;
    bool m_virtual_router_ips_isSet;
    bool m_virtual_router_ips_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVirtualRouterPropertiesFormat)

#endif // OAIVirtualRouterPropertiesFormat_H
