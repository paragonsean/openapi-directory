/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-08-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualRouterPeeringsApi_H
#define OAI_OAIVirtualRouterPeeringsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualRouterPeering.h"
#include "OAIVirtualRouterPeeringListResult.h"
#include "OAIVirtualRouters_List_default_response.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualRouterPeeringsApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualRouterPeeringsApi(const int timeOut = 0);
    ~OAIVirtualRouterPeeringsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualRouterPeering [required]
    */
    virtual void virtualRouterPeeringsCreateOrUpdate(const QString &resource_group_name, const QString &virtual_router_name, const QString &peering_name, const QString &api_version, const QString &subscription_id, const OAIVirtualRouterPeering &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualRouterPeeringsDelete(const QString &resource_group_name, const QString &virtual_router_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualRouterPeeringsGet(const QString &resource_group_name, const QString &virtual_router_name, const QString &peering_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualRouterPeeringsList(const QString &resource_group_name, const QString &virtual_router_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  peering_name QString [required]
    * @param[in]  parameters OAIVirtualRouterPeering [required]
    */
    virtual void virtualRouterPeeringsUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_router_name, const QString &api_version, const QString &peering_name, const OAIVirtualRouterPeering &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualRouterPeeringsCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualRouterPeeringsDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualRouterPeeringsGetCallback(OAIHttpRequestWorker *worker);
    void virtualRouterPeeringsListCallback(OAIHttpRequestWorker *worker);
    void virtualRouterPeeringsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualRouterPeeringsCreateOrUpdateSignal(OAIVirtualRouterPeering summary);
    void virtualRouterPeeringsDeleteSignal();
    void virtualRouterPeeringsGetSignal(OAIVirtualRouterPeering summary);
    void virtualRouterPeeringsListSignal(OAIVirtualRouterPeeringListResult summary);
    void virtualRouterPeeringsUpdateSignal(OAIVirtualRouterPeering summary);


    void virtualRouterPeeringsCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouterPeering summary);
    void virtualRouterPeeringsDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualRouterPeeringsGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouterPeering summary);
    void virtualRouterPeeringsListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouterPeeringListResult summary);
    void virtualRouterPeeringsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouterPeering summary);

    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsCreateOrUpdateSignalError() instead")
    void virtualRouterPeeringsCreateOrUpdateSignalE(OAIVirtualRouterPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsCreateOrUpdateSignalError(OAIVirtualRouterPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsDeleteSignalError() instead")
    void virtualRouterPeeringsDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsGetSignalError() instead")
    void virtualRouterPeeringsGetSignalE(OAIVirtualRouterPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsGetSignalError(OAIVirtualRouterPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsListSignalError() instead")
    void virtualRouterPeeringsListSignalE(OAIVirtualRouterPeeringListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsListSignalError(OAIVirtualRouterPeeringListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsUpdateSignalError() instead")
    void virtualRouterPeeringsUpdateSignalE(OAIVirtualRouterPeering summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsUpdateSignalError(OAIVirtualRouterPeering summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsCreateOrUpdateSignalErrorFull() instead")
    void virtualRouterPeeringsCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsDeleteSignalErrorFull() instead")
    void virtualRouterPeeringsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsGetSignalErrorFull() instead")
    void virtualRouterPeeringsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsListSignalErrorFull() instead")
    void virtualRouterPeeringsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRouterPeeringsUpdateSignalErrorFull() instead")
    void virtualRouterPeeringsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRouterPeeringsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
