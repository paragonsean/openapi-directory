/*
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.VirtualRouter;
import org.openapitools.client.model.VirtualRouterListResult;
import org.openapitools.client.model.VirtualRoutersListDefaultResponse;
import org.openapitools.client.model.VirtualRoutersUpdateRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VirtualRoutersApi
 */
@Disabled
public class VirtualRoutersApiTest {

    private final VirtualRoutersApi api = new VirtualRoutersApi();

    /**
     * Creates or updates the specified Virtual Router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRoutersCreateOrUpdateTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualRouter parameters = null;
        VirtualRouter response = api.virtualRoutersCreateOrUpdate(resourceGroupName, virtualRouterName, apiVersion, subscriptionId, parameters);
        // TODO: test validations
    }

    /**
     * Deletes the specified Virtual Router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRoutersDeleteTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        api.virtualRoutersDelete(resourceGroupName, virtualRouterName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Gets the specified Virtual Router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRoutersGetTest() throws ApiException {
        String resourceGroupName = null;
        String virtualRouterName = null;
        String apiVersion = null;
        String subscriptionId = null;
        String $expand = null;
        VirtualRouter response = api.virtualRoutersGet(resourceGroupName, virtualRouterName, apiVersion, subscriptionId, $expand);
        // TODO: test validations
    }

    /**
     * Gets all the Virtual Routers in a subscription.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRoutersListTest() throws ApiException {
        String apiVersion = null;
        String subscriptionId = null;
        VirtualRouterListResult response = api.virtualRoutersList(apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Lists all Virtual Routers in a resource group.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRoutersListByResourceGroupTest() throws ApiException {
        String resourceGroupName = null;
        String apiVersion = null;
        String subscriptionId = null;
        VirtualRouterListResult response = api.virtualRoutersListByResourceGroup(resourceGroupName, apiVersion, subscriptionId);
        // TODO: test validations
    }

    /**
     * Updates a Virtual Router.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void virtualRoutersUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String virtualRouterName = null;
        String apiVersion = null;
        VirtualRoutersUpdateRequest parameters = null;
        VirtualRouter response = api.virtualRoutersUpdate(subscriptionId, resourceGroupName, virtualRouterName, apiVersion, parameters);
        // TODO: test validations
    }

}
