/**
 * NetworkManagementClient
 * The Microsoft Azure Network management API provides a RESTful set of web services that interact with Microsoft Azure Networks service to manage your network resources. The API has entities that capture the relationship between an end user and the Microsoft Azure Networks service.
 *
 * The version of the OpenAPI document: 2019-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVirtualRoutersApi_H
#define OAI_OAIVirtualRoutersApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIVirtualRouter.h"
#include "OAIVirtualRouterListResult.h"
#include "OAIVirtualRouters_List_default_response.h"
#include "OAIVirtualRouters_Update_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVirtualRoutersApi : public QObject {
    Q_OBJECT

public:
    OAIVirtualRoutersApi(const int timeOut = 0);
    ~OAIVirtualRoutersApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  parameters OAIVirtualRouter [required]
    */
    virtual void virtualRoutersCreateOrUpdate(const QString &resource_group_name, const QString &virtual_router_name, const QString &api_version, const QString &subscription_id, const OAIVirtualRouter &parameters);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualRoutersDelete(const QString &resource_group_name, const QString &virtual_router_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  expand QString [optional]
    */
    virtual void virtualRoutersGet(const QString &resource_group_name, const QString &virtual_router_name, const QString &api_version, const QString &subscription_id, const ::OpenAPI::OptionalParam<QString> &expand = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualRoutersList(const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  resource_group_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    */
    virtual void virtualRoutersListByResourceGroup(const QString &resource_group_name, const QString &api_version, const QString &subscription_id);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  virtual_router_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIVirtualRouters_Update_request [required]
    */
    virtual void virtualRoutersUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &virtual_router_name, const QString &api_version, const OAIVirtualRouters_Update_request &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void virtualRoutersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void virtualRoutersDeleteCallback(OAIHttpRequestWorker *worker);
    void virtualRoutersGetCallback(OAIHttpRequestWorker *worker);
    void virtualRoutersListCallback(OAIHttpRequestWorker *worker);
    void virtualRoutersListByResourceGroupCallback(OAIHttpRequestWorker *worker);
    void virtualRoutersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void virtualRoutersCreateOrUpdateSignal(OAIVirtualRouter summary);
    void virtualRoutersDeleteSignal();
    void virtualRoutersGetSignal(OAIVirtualRouter summary);
    void virtualRoutersListSignal(OAIVirtualRouterListResult summary);
    void virtualRoutersListByResourceGroupSignal(OAIVirtualRouterListResult summary);
    void virtualRoutersUpdateSignal(OAIVirtualRouter summary);


    void virtualRoutersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouter summary);
    void virtualRoutersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void virtualRoutersGetSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouter summary);
    void virtualRoutersListSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouterListResult summary);
    void virtualRoutersListByResourceGroupSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouterListResult summary);
    void virtualRoutersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIVirtualRouter summary);

    Q_DECL_DEPRECATED_X("Use virtualRoutersCreateOrUpdateSignalError() instead")
    void virtualRoutersCreateOrUpdateSignalE(OAIVirtualRouter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersCreateOrUpdateSignalError(OAIVirtualRouter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersDeleteSignalError() instead")
    void virtualRoutersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersGetSignalError() instead")
    void virtualRoutersGetSignalE(OAIVirtualRouter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersGetSignalError(OAIVirtualRouter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersListSignalError() instead")
    void virtualRoutersListSignalE(OAIVirtualRouterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersListSignalError(OAIVirtualRouterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersListByResourceGroupSignalError() instead")
    void virtualRoutersListByResourceGroupSignalE(OAIVirtualRouterListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersListByResourceGroupSignalError(OAIVirtualRouterListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersUpdateSignalError() instead")
    void virtualRoutersUpdateSignalE(OAIVirtualRouter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersUpdateSignalError(OAIVirtualRouter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use virtualRoutersCreateOrUpdateSignalErrorFull() instead")
    void virtualRoutersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersDeleteSignalErrorFull() instead")
    void virtualRoutersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersGetSignalErrorFull() instead")
    void virtualRoutersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersListSignalErrorFull() instead")
    void virtualRoutersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersListByResourceGroupSignalErrorFull() instead")
    void virtualRoutersListByResourceGroupSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersListByResourceGroupSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use virtualRoutersUpdateSignalErrorFull() instead")
    void virtualRoutersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void virtualRoutersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
