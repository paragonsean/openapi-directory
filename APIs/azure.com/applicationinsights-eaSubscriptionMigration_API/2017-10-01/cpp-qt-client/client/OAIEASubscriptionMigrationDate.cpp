/**
 * ApplicationInsightsManagementClient
 * Apis for customer in enterprise agreement migrate to new pricing model or rollback to legacy pricing model.
 *
 * The version of the OpenAPI document: 2017-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEASubscriptionMigrationDate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEASubscriptionMigrationDate::OAIEASubscriptionMigrationDate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEASubscriptionMigrationDate::OAIEASubscriptionMigrationDate() {
    this->initializeModel();
}

OAIEASubscriptionMigrationDate::~OAIEASubscriptionMigrationDate() {}

void OAIEASubscriptionMigrationDate::initializeModel() {

    m_is_grand_fatherable_subscription_isSet = false;
    m_is_grand_fatherable_subscription_isValid = false;

    m_opted_in_date_isSet = false;
    m_opted_in_date_isValid = false;
}

void OAIEASubscriptionMigrationDate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEASubscriptionMigrationDate::fromJsonObject(QJsonObject json) {

    m_is_grand_fatherable_subscription_isValid = ::OpenAPI::fromJsonValue(m_is_grand_fatherable_subscription, json[QString("isGrandFatherableSubscription")]);
    m_is_grand_fatherable_subscription_isSet = !json[QString("isGrandFatherableSubscription")].isNull() && m_is_grand_fatherable_subscription_isValid;

    m_opted_in_date_isValid = ::OpenAPI::fromJsonValue(m_opted_in_date, json[QString("optedInDate")]);
    m_opted_in_date_isSet = !json[QString("optedInDate")].isNull() && m_opted_in_date_isValid;
}

QString OAIEASubscriptionMigrationDate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEASubscriptionMigrationDate::asJsonObject() const {
    QJsonObject obj;
    if (m_is_grand_fatherable_subscription_isSet) {
        obj.insert(QString("isGrandFatherableSubscription"), ::OpenAPI::toJsonValue(m_is_grand_fatherable_subscription));
    }
    if (m_opted_in_date_isSet) {
        obj.insert(QString("optedInDate"), ::OpenAPI::toJsonValue(m_opted_in_date));
    }
    return obj;
}

bool OAIEASubscriptionMigrationDate::isIsGrandFatherableSubscription() const {
    return m_is_grand_fatherable_subscription;
}
void OAIEASubscriptionMigrationDate::setIsGrandFatherableSubscription(const bool &is_grand_fatherable_subscription) {
    m_is_grand_fatherable_subscription = is_grand_fatherable_subscription;
    m_is_grand_fatherable_subscription_isSet = true;
}

bool OAIEASubscriptionMigrationDate::is_is_grand_fatherable_subscription_Set() const{
    return m_is_grand_fatherable_subscription_isSet;
}

bool OAIEASubscriptionMigrationDate::is_is_grand_fatherable_subscription_Valid() const{
    return m_is_grand_fatherable_subscription_isValid;
}

QDateTime OAIEASubscriptionMigrationDate::getOptedInDate() const {
    return m_opted_in_date;
}
void OAIEASubscriptionMigrationDate::setOptedInDate(const QDateTime &opted_in_date) {
    m_opted_in_date = opted_in_date;
    m_opted_in_date_isSet = true;
}

bool OAIEASubscriptionMigrationDate::is_opted_in_date_Set() const{
    return m_opted_in_date_isSet;
}

bool OAIEASubscriptionMigrationDate::is_opted_in_date_Valid() const{
    return m_opted_in_date_isValid;
}

bool OAIEASubscriptionMigrationDate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_is_grand_fatherable_subscription_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_opted_in_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEASubscriptionMigrationDate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
