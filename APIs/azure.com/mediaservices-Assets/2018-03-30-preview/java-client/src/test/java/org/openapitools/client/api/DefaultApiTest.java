/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Asset;
import org.openapitools.client.model.AssetCollection;
import org.openapitools.client.model.AssetContainerSas;
import org.openapitools.client.model.AssetStorageEncryptionKey;
import org.openapitools.client.model.AssetsListDefaultResponse;
import org.openapitools.client.model.ListContainerSasInput;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Create or update an Asset
     *
     * Creates or updates an Asset in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsCreateOrUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String assetName = null;
        String apiVersion = null;
        Asset parameters = null;
        Asset response = api.assetsCreateOrUpdate(subscriptionId, resourceGroupName, accountName, assetName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Delete an Asset.
     *
     * Deletes an Asset in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String assetName = null;
        String apiVersion = null;
        api.assetsDelete(subscriptionId, resourceGroupName, accountName, assetName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get an Asset
     *
     * Get the details of an Asset in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String assetName = null;
        String apiVersion = null;
        Asset response = api.assetsGet(subscriptionId, resourceGroupName, accountName, assetName, apiVersion);
        // TODO: test validations
    }

    /**
     * Gets the Asset storage key
     *
     * Gets the Asset storage encryption keys used to decrypt content created by version 2 of the Media Services API
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsGetEncryptionKeyTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String assetName = null;
        String apiVersion = null;
        AssetStorageEncryptionKey response = api.assetsGetEncryptionKey(subscriptionId, resourceGroupName, accountName, assetName, apiVersion);
        // TODO: test validations
    }

    /**
     * List Assets
     *
     * List Assets in the Media Services account with optional filtering and ordering
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsListTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $filter = null;
        Integer $top = null;
        String $orderby = null;
        AssetCollection response = api.assetsList(subscriptionId, resourceGroupName, accountName, apiVersion, $filter, $top, $orderby);
        // TODO: test validations
    }

    /**
     * List the Asset URLs
     *
     * Lists storage container URLs with shared access signatures (SAS) for uploading and downloading Asset content. The signatures are derived from the storage account keys.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsListContainerSasTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String assetName = null;
        String apiVersion = null;
        ListContainerSasInput parameters = null;
        AssetContainerSas response = api.assetsListContainerSas(subscriptionId, resourceGroupName, accountName, assetName, apiVersion, parameters);
        // TODO: test validations
    }

    /**
     * Update an Asset
     *
     * Updates an existing Asset in the Media Services account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void assetsUpdateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String assetName = null;
        String apiVersion = null;
        Asset parameters = null;
        Asset response = api.assetsUpdate(subscriptionId, resourceGroupName, accountName, assetName, apiVersion, parameters);
        // TODO: test validations
    }

}
