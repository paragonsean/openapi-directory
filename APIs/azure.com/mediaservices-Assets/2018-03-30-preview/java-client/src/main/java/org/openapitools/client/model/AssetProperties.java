/*
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-03-30-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Asset properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:55:58.940803-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AssetProperties {
  public static final String SERIALIZED_NAME_ALTERNATE_ID = "alternateId";
  @SerializedName(SERIALIZED_NAME_ALTERNATE_ID)
  private String alternateId;

  public static final String SERIALIZED_NAME_ASSET_ID = "assetId";
  @SerializedName(SERIALIZED_NAME_ASSET_ID)
  private UUID assetId;

  public static final String SERIALIZED_NAME_CONTAINER = "container";
  @SerializedName(SERIALIZED_NAME_CONTAINER)
  private String container;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_LAST_MODIFIED = "lastModified";
  @SerializedName(SERIALIZED_NAME_LAST_MODIFIED)
  private OffsetDateTime lastModified;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_NAME = "storageAccountName";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_NAME)
  private String storageAccountName;

  /**
   * The Asset encryption format. One of None or MediaStorageEncryption.
   */
  @JsonAdapter(StorageEncryptionFormatEnum.Adapter.class)
  public enum StorageEncryptionFormatEnum {
    NONE("None"),
    
    MEDIA_STORAGE_CLIENT_ENCRYPTION("MediaStorageClientEncryption");

    private String value;

    StorageEncryptionFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StorageEncryptionFormatEnum fromValue(String value) {
      for (StorageEncryptionFormatEnum b : StorageEncryptionFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<StorageEncryptionFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StorageEncryptionFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StorageEncryptionFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StorageEncryptionFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      StorageEncryptionFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STORAGE_ENCRYPTION_FORMAT = "storageEncryptionFormat";
  @SerializedName(SERIALIZED_NAME_STORAGE_ENCRYPTION_FORMAT)
  private StorageEncryptionFormatEnum storageEncryptionFormat;

  public AssetProperties() {
  }

  public AssetProperties(
     UUID assetId, 
     OffsetDateTime created, 
     OffsetDateTime lastModified, 
     StorageEncryptionFormatEnum storageEncryptionFormat
  ) {
    this();
    this.assetId = assetId;
    this.created = created;
    this.lastModified = lastModified;
    this.storageEncryptionFormat = storageEncryptionFormat;
  }

  public AssetProperties alternateId(String alternateId) {
    this.alternateId = alternateId;
    return this;
  }

  /**
   * The alternate ID of the Asset.
   * @return alternateId
   */
  @javax.annotation.Nullable
  public String getAlternateId() {
    return alternateId;
  }

  public void setAlternateId(String alternateId) {
    this.alternateId = alternateId;
  }


  /**
   * The Asset ID.
   * @return assetId
   */
  @javax.annotation.Nullable
  public UUID getAssetId() {
    return assetId;
  }



  public AssetProperties container(String container) {
    this.container = container;
    return this;
  }

  /**
   * The name of the asset blob container.
   * @return container
   */
  @javax.annotation.Nullable
  public String getContainer() {
    return container;
  }

  public void setContainer(String container) {
    this.container = container;
  }


  /**
   * The creation date of the Asset.
   * @return created
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreated() {
    return created;
  }



  public AssetProperties description(String description) {
    this.description = description;
    return this;
  }

  /**
   * The Asset description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  /**
   * The last modified date of the Asset.
   * @return lastModified
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastModified() {
    return lastModified;
  }



  public AssetProperties storageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
    return this;
  }

  /**
   * The name of the storage account.
   * @return storageAccountName
   */
  @javax.annotation.Nullable
  public String getStorageAccountName() {
    return storageAccountName;
  }

  public void setStorageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
  }


  /**
   * The Asset encryption format. One of None or MediaStorageEncryption.
   * @return storageEncryptionFormat
   */
  @javax.annotation.Nullable
  public StorageEncryptionFormatEnum getStorageEncryptionFormat() {
    return storageEncryptionFormat;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AssetProperties assetProperties = (AssetProperties) o;
    return Objects.equals(this.alternateId, assetProperties.alternateId) &&
        Objects.equals(this.assetId, assetProperties.assetId) &&
        Objects.equals(this.container, assetProperties.container) &&
        Objects.equals(this.created, assetProperties.created) &&
        Objects.equals(this.description, assetProperties.description) &&
        Objects.equals(this.lastModified, assetProperties.lastModified) &&
        Objects.equals(this.storageAccountName, assetProperties.storageAccountName) &&
        Objects.equals(this.storageEncryptionFormat, assetProperties.storageEncryptionFormat);
  }

  @Override
  public int hashCode() {
    return Objects.hash(alternateId, assetId, container, created, description, lastModified, storageAccountName, storageEncryptionFormat);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AssetProperties {\n");
    sb.append("    alternateId: ").append(toIndentedString(alternateId)).append("\n");
    sb.append("    assetId: ").append(toIndentedString(assetId)).append("\n");
    sb.append("    container: ").append(toIndentedString(container)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    lastModified: ").append(toIndentedString(lastModified)).append("\n");
    sb.append("    storageAccountName: ").append(toIndentedString(storageAccountName)).append("\n");
    sb.append("    storageEncryptionFormat: ").append(toIndentedString(storageEncryptionFormat)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("alternateId");
    openapiFields.add("assetId");
    openapiFields.add("container");
    openapiFields.add("created");
    openapiFields.add("description");
    openapiFields.add("lastModified");
    openapiFields.add("storageAccountName");
    openapiFields.add("storageEncryptionFormat");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AssetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AssetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AssetProperties is not found in the empty JSON string", AssetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AssetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AssetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("alternateId") != null && !jsonObj.get("alternateId").isJsonNull()) && !jsonObj.get("alternateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `alternateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("alternateId").toString()));
      }
      if ((jsonObj.get("assetId") != null && !jsonObj.get("assetId").isJsonNull()) && !jsonObj.get("assetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `assetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("assetId").toString()));
      }
      if ((jsonObj.get("container") != null && !jsonObj.get("container").isJsonNull()) && !jsonObj.get("container").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `container` to be a primitive type in the JSON string but got `%s`", jsonObj.get("container").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("storageAccountName") != null && !jsonObj.get("storageAccountName").isJsonNull()) && !jsonObj.get("storageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountName").toString()));
      }
      if ((jsonObj.get("storageEncryptionFormat") != null && !jsonObj.get("storageEncryptionFormat").isJsonNull()) && !jsonObj.get("storageEncryptionFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageEncryptionFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageEncryptionFormat").toString()));
      }
      // validate the optional field `storageEncryptionFormat`
      if (jsonObj.get("storageEncryptionFormat") != null && !jsonObj.get("storageEncryptionFormat").isJsonNull()) {
        StorageEncryptionFormatEnum.validateJsonElement(jsonObj.get("storageEncryptionFormat"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AssetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AssetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AssetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AssetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<AssetProperties>() {
           @Override
           public void write(JsonWriter out, AssetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AssetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AssetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AssetProperties
   * @throws IOException if the JSON string is invalid with respect to AssetProperties
   */
  public static AssetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AssetProperties.class);
  }

  /**
   * Convert an instance of AssetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

