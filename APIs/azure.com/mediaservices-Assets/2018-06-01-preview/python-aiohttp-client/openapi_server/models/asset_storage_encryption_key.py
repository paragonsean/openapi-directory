# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AssetStorageEncryptionKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_encryption_key: str=None):
        """AssetStorageEncryptionKey - a model defined in OpenAPI

        :param storage_encryption_key: The storage_encryption_key of this AssetStorageEncryptionKey.
        """
        self.openapi_types = {
            'storage_encryption_key': str
        }

        self.attribute_map = {
            'storage_encryption_key': 'storageEncryptionKey'
        }

        self._storage_encryption_key = storage_encryption_key

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AssetStorageEncryptionKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AssetStorageEncryptionKey of this AssetStorageEncryptionKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_encryption_key(self):
        """Gets the storage_encryption_key of this AssetStorageEncryptionKey.

        The Asset storage encryption key.

        :return: The storage_encryption_key of this AssetStorageEncryptionKey.
        :rtype: str
        """
        return self._storage_encryption_key

    @storage_encryption_key.setter
    def storage_encryption_key(self, storage_encryption_key):
        """Sets the storage_encryption_key of this AssetStorageEncryptionKey.

        The Asset storage encryption key.

        :param storage_encryption_key: The storage_encryption_key of this AssetStorageEncryptionKey.
        :type storage_encryption_key: str
        """

        self._storage_encryption_key = storage_encryption_key
