/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-06-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AssetProperties model module.
 * @module model/AssetProperties
 * @version 2018-06-01-preview
 */
class AssetProperties {
    /**
     * Constructs a new <code>AssetProperties</code>.
     * The Asset properties.
     * @alias module:model/AssetProperties
     */
    constructor() { 
        
        AssetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AssetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AssetProperties} obj Optional instance to populate.
     * @return {module:model/AssetProperties} The populated <code>AssetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AssetProperties();

            if (data.hasOwnProperty('alternateId')) {
                obj['alternateId'] = ApiClient.convertToType(data['alternateId'], 'String');
            }
            if (data.hasOwnProperty('assetId')) {
                obj['assetId'] = ApiClient.convertToType(data['assetId'], 'String');
            }
            if (data.hasOwnProperty('container')) {
                obj['container'] = ApiClient.convertToType(data['container'], 'String');
            }
            if (data.hasOwnProperty('created')) {
                obj['created'] = ApiClient.convertToType(data['created'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('lastModified')) {
                obj['lastModified'] = ApiClient.convertToType(data['lastModified'], 'Date');
            }
            if (data.hasOwnProperty('storageAccountName')) {
                obj['storageAccountName'] = ApiClient.convertToType(data['storageAccountName'], 'String');
            }
            if (data.hasOwnProperty('storageEncryptionFormat')) {
                obj['storageEncryptionFormat'] = ApiClient.convertToType(data['storageEncryptionFormat'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AssetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AssetProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['alternateId'] && !(typeof data['alternateId'] === 'string' || data['alternateId'] instanceof String)) {
            throw new Error("Expected the field `alternateId` to be a primitive type in the JSON string but got " + data['alternateId']);
        }
        // ensure the json data is a string
        if (data['assetId'] && !(typeof data['assetId'] === 'string' || data['assetId'] instanceof String)) {
            throw new Error("Expected the field `assetId` to be a primitive type in the JSON string but got " + data['assetId']);
        }
        // ensure the json data is a string
        if (data['container'] && !(typeof data['container'] === 'string' || data['container'] instanceof String)) {
            throw new Error("Expected the field `container` to be a primitive type in the JSON string but got " + data['container']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['storageAccountName'] && !(typeof data['storageAccountName'] === 'string' || data['storageAccountName'] instanceof String)) {
            throw new Error("Expected the field `storageAccountName` to be a primitive type in the JSON string but got " + data['storageAccountName']);
        }
        // ensure the json data is a string
        if (data['storageEncryptionFormat'] && !(typeof data['storageEncryptionFormat'] === 'string' || data['storageEncryptionFormat'] instanceof String)) {
            throw new Error("Expected the field `storageEncryptionFormat` to be a primitive type in the JSON string but got " + data['storageEncryptionFormat']);
        }

        return true;
    }


}



/**
 * The alternate ID of the Asset.
 * @member {String} alternateId
 */
AssetProperties.prototype['alternateId'] = undefined;

/**
 * The Asset ID.
 * @member {String} assetId
 */
AssetProperties.prototype['assetId'] = undefined;

/**
 * The name of the asset blob container.
 * @member {String} container
 */
AssetProperties.prototype['container'] = undefined;

/**
 * The creation date of the Asset.
 * @member {Date} created
 */
AssetProperties.prototype['created'] = undefined;

/**
 * The Asset description.
 * @member {String} description
 */
AssetProperties.prototype['description'] = undefined;

/**
 * The last modified date of the Asset.
 * @member {Date} lastModified
 */
AssetProperties.prototype['lastModified'] = undefined;

/**
 * The name of the storage account.
 * @member {String} storageAccountName
 */
AssetProperties.prototype['storageAccountName'] = undefined;

/**
 * The Asset encryption format. One of None or MediaStorageEncryption.
 * @member {module:model/AssetProperties.StorageEncryptionFormatEnum} storageEncryptionFormat
 */
AssetProperties.prototype['storageEncryptionFormat'] = undefined;





/**
 * Allowed values for the <code>storageEncryptionFormat</code> property.
 * @enum {String}
 * @readonly
 */
AssetProperties['StorageEncryptionFormatEnum'] = {

    /**
     * value: "None"
     * @const
     */
    "None": "None",

    /**
     * value: "MediaStorageClientEncryption"
     * @const
     */
    "MediaStorageClientEncryption": "MediaStorageClientEncryption"
};



export default AssetProperties;

