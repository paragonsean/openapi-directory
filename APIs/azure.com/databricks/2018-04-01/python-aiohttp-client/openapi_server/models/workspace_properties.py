# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.provisioning_state import ProvisioningState
from openapi_server.models.workspace_custom_parameters import WorkspaceCustomParameters
from openapi_server.models.workspace_provider_authorization import WorkspaceProviderAuthorization
from openapi_server import util


class WorkspaceProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorizations: List[WorkspaceProviderAuthorization]=None, managed_resource_group_id: str=None, parameters: WorkspaceCustomParameters=None, provisioning_state: ProvisioningState=None, ui_definition_uri: str=None):
        """WorkspaceProperties - a model defined in OpenAPI

        :param authorizations: The authorizations of this WorkspaceProperties.
        :param managed_resource_group_id: The managed_resource_group_id of this WorkspaceProperties.
        :param parameters: The parameters of this WorkspaceProperties.
        :param provisioning_state: The provisioning_state of this WorkspaceProperties.
        :param ui_definition_uri: The ui_definition_uri of this WorkspaceProperties.
        """
        self.openapi_types = {
            'authorizations': List[WorkspaceProviderAuthorization],
            'managed_resource_group_id': str,
            'parameters': WorkspaceCustomParameters,
            'provisioning_state': ProvisioningState,
            'ui_definition_uri': str
        }

        self.attribute_map = {
            'authorizations': 'authorizations',
            'managed_resource_group_id': 'managedResourceGroupId',
            'parameters': 'parameters',
            'provisioning_state': 'provisioningState',
            'ui_definition_uri': 'uiDefinitionUri'
        }

        self._authorizations = authorizations
        self._managed_resource_group_id = managed_resource_group_id
        self._parameters = parameters
        self._provisioning_state = provisioning_state
        self._ui_definition_uri = ui_definition_uri

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceProperties of this WorkspaceProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorizations(self):
        """Gets the authorizations of this WorkspaceProperties.

        The workspace provider authorizations.

        :return: The authorizations of this WorkspaceProperties.
        :rtype: List[WorkspaceProviderAuthorization]
        """
        return self._authorizations

    @authorizations.setter
    def authorizations(self, authorizations):
        """Sets the authorizations of this WorkspaceProperties.

        The workspace provider authorizations.

        :param authorizations: The authorizations of this WorkspaceProperties.
        :type authorizations: List[WorkspaceProviderAuthorization]
        """

        self._authorizations = authorizations

    @property
    def managed_resource_group_id(self):
        """Gets the managed_resource_group_id of this WorkspaceProperties.

        The managed resource group Id.

        :return: The managed_resource_group_id of this WorkspaceProperties.
        :rtype: str
        """
        return self._managed_resource_group_id

    @managed_resource_group_id.setter
    def managed_resource_group_id(self, managed_resource_group_id):
        """Sets the managed_resource_group_id of this WorkspaceProperties.

        The managed resource group Id.

        :param managed_resource_group_id: The managed_resource_group_id of this WorkspaceProperties.
        :type managed_resource_group_id: str
        """
        if managed_resource_group_id is None:
            raise ValueError("Invalid value for `managed_resource_group_id`, must not be `None`")

        self._managed_resource_group_id = managed_resource_group_id

    @property
    def parameters(self):
        """Gets the parameters of this WorkspaceProperties.


        :return: The parameters of this WorkspaceProperties.
        :rtype: WorkspaceCustomParameters
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this WorkspaceProperties.


        :param parameters: The parameters of this WorkspaceProperties.
        :type parameters: WorkspaceCustomParameters
        """

        self._parameters = parameters

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this WorkspaceProperties.


        :return: The provisioning_state of this WorkspaceProperties.
        :rtype: ProvisioningState
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this WorkspaceProperties.


        :param provisioning_state: The provisioning_state of this WorkspaceProperties.
        :type provisioning_state: ProvisioningState
        """

        self._provisioning_state = provisioning_state

    @property
    def ui_definition_uri(self):
        """Gets the ui_definition_uri of this WorkspaceProperties.

        The blob URI where the UI definition file is located.

        :return: The ui_definition_uri of this WorkspaceProperties.
        :rtype: str
        """
        return self._ui_definition_uri

    @ui_definition_uri.setter
    def ui_definition_uri(self, ui_definition_uri):
        """Sets the ui_definition_uri of this WorkspaceProperties.

        The blob URI where the UI definition file is located.

        :param ui_definition_uri: The ui_definition_uri of this WorkspaceProperties.
        :type ui_definition_uri: str
        """

        self._ui_definition_uri = ui_definition_uri
