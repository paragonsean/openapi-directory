# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkspaceProviderAuthorization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, principal_id: str=None, role_definition_id: str=None):
        """WorkspaceProviderAuthorization - a model defined in OpenAPI

        :param principal_id: The principal_id of this WorkspaceProviderAuthorization.
        :param role_definition_id: The role_definition_id of this WorkspaceProviderAuthorization.
        """
        self.openapi_types = {
            'principal_id': str,
            'role_definition_id': str
        }

        self.attribute_map = {
            'principal_id': 'principalId',
            'role_definition_id': 'roleDefinitionId'
        }

        self._principal_id = principal_id
        self._role_definition_id = role_definition_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'WorkspaceProviderAuthorization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The WorkspaceProviderAuthorization of this WorkspaceProviderAuthorization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def principal_id(self):
        """Gets the principal_id of this WorkspaceProviderAuthorization.

        The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the workspace resources.

        :return: The principal_id of this WorkspaceProviderAuthorization.
        :rtype: str
        """
        return self._principal_id

    @principal_id.setter
    def principal_id(self, principal_id):
        """Sets the principal_id of this WorkspaceProviderAuthorization.

        The provider's principal identifier. This is the identity that the provider will use to call ARM to manage the workspace resources.

        :param principal_id: The principal_id of this WorkspaceProviderAuthorization.
        :type principal_id: str
        """
        if principal_id is None:
            raise ValueError("Invalid value for `principal_id`, must not be `None`")

        self._principal_id = principal_id

    @property
    def role_definition_id(self):
        """Gets the role_definition_id of this WorkspaceProviderAuthorization.

        The provider's role definition identifier. This role will define all the permissions that the provider must have on the workspace's container resource group. This role definition cannot have permission to delete the resource group.

        :return: The role_definition_id of this WorkspaceProviderAuthorization.
        :rtype: str
        """
        return self._role_definition_id

    @role_definition_id.setter
    def role_definition_id(self, role_definition_id):
        """Sets the role_definition_id of this WorkspaceProviderAuthorization.

        The provider's role definition identifier. This role will define all the permissions that the provider must have on the workspace's container resource group. This role definition cannot have permission to delete the resource group.

        :param role_definition_id: The role_definition_id of this WorkspaceProviderAuthorization.
        :type role_definition_id: str
        """
        if role_definition_id is None:
            raise ValueError("Invalid value for `role_definition_id`, must not be `None`")

        self._role_definition_id = role_definition_id
