/*
 * DatabricksClient
 * ARM Databricks
 *
 * The version of the OpenAPI document: 2018-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProvisioningState;
import org.openapitools.client.model.WorkspaceCustomParameters;
import org.openapitools.client.model.WorkspaceProviderAuthorization;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The workspace properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:07:02.062254-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class WorkspaceProperties {
  public static final String SERIALIZED_NAME_AUTHORIZATIONS = "authorizations";
  @SerializedName(SERIALIZED_NAME_AUTHORIZATIONS)
  private List<WorkspaceProviderAuthorization> authorizations = new ArrayList<>();

  public static final String SERIALIZED_NAME_MANAGED_RESOURCE_GROUP_ID = "managedResourceGroupId";
  @SerializedName(SERIALIZED_NAME_MANAGED_RESOURCE_GROUP_ID)
  private String managedResourceGroupId;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private WorkspaceCustomParameters parameters;

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningState provisioningState;

  public static final String SERIALIZED_NAME_UI_DEFINITION_URI = "uiDefinitionUri";
  @SerializedName(SERIALIZED_NAME_UI_DEFINITION_URI)
  private String uiDefinitionUri;

  public WorkspaceProperties() {
  }

  public WorkspaceProperties authorizations(List<WorkspaceProviderAuthorization> authorizations) {
    this.authorizations = authorizations;
    return this;
  }

  public WorkspaceProperties addAuthorizationsItem(WorkspaceProviderAuthorization authorizationsItem) {
    if (this.authorizations == null) {
      this.authorizations = new ArrayList<>();
    }
    this.authorizations.add(authorizationsItem);
    return this;
  }

  /**
   * The workspace provider authorizations.
   * @return authorizations
   */
  @javax.annotation.Nullable
  public List<WorkspaceProviderAuthorization> getAuthorizations() {
    return authorizations;
  }

  public void setAuthorizations(List<WorkspaceProviderAuthorization> authorizations) {
    this.authorizations = authorizations;
  }


  public WorkspaceProperties managedResourceGroupId(String managedResourceGroupId) {
    this.managedResourceGroupId = managedResourceGroupId;
    return this;
  }

  /**
   * The managed resource group Id.
   * @return managedResourceGroupId
   */
  @javax.annotation.Nonnull
  public String getManagedResourceGroupId() {
    return managedResourceGroupId;
  }

  public void setManagedResourceGroupId(String managedResourceGroupId) {
    this.managedResourceGroupId = managedResourceGroupId;
  }


  public WorkspaceProperties parameters(WorkspaceCustomParameters parameters) {
    this.parameters = parameters;
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nullable
  public WorkspaceCustomParameters getParameters() {
    return parameters;
  }

  public void setParameters(WorkspaceCustomParameters parameters) {
    this.parameters = parameters;
  }


  public WorkspaceProperties provisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
    return this;
  }

  /**
   * Get provisioningState
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningState getProvisioningState() {
    return provisioningState;
  }

  public void setProvisioningState(ProvisioningState provisioningState) {
    this.provisioningState = provisioningState;
  }


  public WorkspaceProperties uiDefinitionUri(String uiDefinitionUri) {
    this.uiDefinitionUri = uiDefinitionUri;
    return this;
  }

  /**
   * The blob URI where the UI definition file is located.
   * @return uiDefinitionUri
   */
  @javax.annotation.Nullable
  public String getUiDefinitionUri() {
    return uiDefinitionUri;
  }

  public void setUiDefinitionUri(String uiDefinitionUri) {
    this.uiDefinitionUri = uiDefinitionUri;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkspaceProperties workspaceProperties = (WorkspaceProperties) o;
    return Objects.equals(this.authorizations, workspaceProperties.authorizations) &&
        Objects.equals(this.managedResourceGroupId, workspaceProperties.managedResourceGroupId) &&
        Objects.equals(this.parameters, workspaceProperties.parameters) &&
        Objects.equals(this.provisioningState, workspaceProperties.provisioningState) &&
        Objects.equals(this.uiDefinitionUri, workspaceProperties.uiDefinitionUri);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authorizations, managedResourceGroupId, parameters, provisioningState, uiDefinitionUri);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkspaceProperties {\n");
    sb.append("    authorizations: ").append(toIndentedString(authorizations)).append("\n");
    sb.append("    managedResourceGroupId: ").append(toIndentedString(managedResourceGroupId)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    uiDefinitionUri: ").append(toIndentedString(uiDefinitionUri)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("authorizations");
    openapiFields.add("managedResourceGroupId");
    openapiFields.add("parameters");
    openapiFields.add("provisioningState");
    openapiFields.add("uiDefinitionUri");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("managedResourceGroupId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WorkspaceProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!WorkspaceProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WorkspaceProperties is not found in the empty JSON string", WorkspaceProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WorkspaceProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WorkspaceProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WorkspaceProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("authorizations") != null && !jsonObj.get("authorizations").isJsonNull()) {
        JsonArray jsonArrayauthorizations = jsonObj.getAsJsonArray("authorizations");
        if (jsonArrayauthorizations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("authorizations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `authorizations` to be an array in the JSON string but got `%s`", jsonObj.get("authorizations").toString()));
          }

          // validate the optional field `authorizations` (array)
          for (int i = 0; i < jsonArrayauthorizations.size(); i++) {
            WorkspaceProviderAuthorization.validateJsonElement(jsonArrayauthorizations.get(i));
          };
        }
      }
      if (!jsonObj.get("managedResourceGroupId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `managedResourceGroupId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("managedResourceGroupId").toString()));
      }
      // validate the optional field `parameters`
      if (jsonObj.get("parameters") != null && !jsonObj.get("parameters").isJsonNull()) {
        WorkspaceCustomParameters.validateJsonElement(jsonObj.get("parameters"));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningState.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("uiDefinitionUri") != null && !jsonObj.get("uiDefinitionUri").isJsonNull()) && !jsonObj.get("uiDefinitionUri").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uiDefinitionUri` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uiDefinitionUri").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WorkspaceProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WorkspaceProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WorkspaceProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WorkspaceProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<WorkspaceProperties>() {
           @Override
           public void write(JsonWriter out, WorkspaceProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WorkspaceProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WorkspaceProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WorkspaceProperties
   * @throws IOException if the JSON string is invalid with respect to WorkspaceProperties
   */
  public static WorkspaceProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WorkspaceProperties.class);
  }

  /**
   * Convert an instance of WorkspaceProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

