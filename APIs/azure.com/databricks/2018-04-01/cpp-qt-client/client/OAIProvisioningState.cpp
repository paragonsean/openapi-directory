/**
 * DatabricksClient
 * ARM Databricks
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProvisioningState.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProvisioningState::OAIProvisioningState(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProvisioningState::OAIProvisioningState() {
    this->initializeModel();
}

OAIProvisioningState::~OAIProvisioningState() {}

void OAIProvisioningState::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAIProvisioningState::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAIProvisioningState::fromJson(QString jsonString) {
    
    if ( jsonString.compare("Accepted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::ACCEPTED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Running", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::RUNNING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Ready", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::READY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Creating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::CREATING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Created", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::CREATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleting", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::DELETING;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Deleted", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::DELETED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Canceled", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::CANCELED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Failed", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::FAILED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Succeeded", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::SUCCEEDED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("Updating", Qt::CaseInsensitive) == 0) {
        m_value = eOAIProvisioningState::UPDATING;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAIProvisioningState::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAIProvisioningState::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAIProvisioningState::ACCEPTED:
            val = "Accepted";
            break;
        case eOAIProvisioningState::RUNNING:
            val = "Running";
            break;
        case eOAIProvisioningState::READY:
            val = "Ready";
            break;
        case eOAIProvisioningState::CREATING:
            val = "Creating";
            break;
        case eOAIProvisioningState::CREATED:
            val = "Created";
            break;
        case eOAIProvisioningState::DELETING:
            val = "Deleting";
            break;
        case eOAIProvisioningState::DELETED:
            val = "Deleted";
            break;
        case eOAIProvisioningState::CANCELED:
            val = "Canceled";
            break;
        case eOAIProvisioningState::FAILED:
            val = "Failed";
            break;
        case eOAIProvisioningState::SUCCEEDED:
            val = "Succeeded";
            break;
        case eOAIProvisioningState::UPDATING:
            val = "Updating";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAIProvisioningState::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAIProvisioningState::eOAIProvisioningState OAIProvisioningState::getValue() const {
    return m_value;
}

void OAIProvisioningState::setValue(const OAIProvisioningState::eOAIProvisioningState& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAIProvisioningState::isSet() const {
    
    return m_value_isSet;
}

bool OAIProvisioningState::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
