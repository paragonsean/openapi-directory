/**
 * DatabricksClient
 * ARM Databricks
 *
 * The version of the OpenAPI document: 2018-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIWorkspaceProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIWorkspaceProperties::OAIWorkspaceProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIWorkspaceProperties::OAIWorkspaceProperties() {
    this->initializeModel();
}

OAIWorkspaceProperties::~OAIWorkspaceProperties() {}

void OAIWorkspaceProperties::initializeModel() {

    m_authorizations_isSet = false;
    m_authorizations_isValid = false;

    m_managed_resource_group_id_isSet = false;
    m_managed_resource_group_id_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_ui_definition_uri_isSet = false;
    m_ui_definition_uri_isValid = false;
}

void OAIWorkspaceProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIWorkspaceProperties::fromJsonObject(QJsonObject json) {

    m_authorizations_isValid = ::OpenAPI::fromJsonValue(m_authorizations, json[QString("authorizations")]);
    m_authorizations_isSet = !json[QString("authorizations")].isNull() && m_authorizations_isValid;

    m_managed_resource_group_id_isValid = ::OpenAPI::fromJsonValue(m_managed_resource_group_id, json[QString("managedResourceGroupId")]);
    m_managed_resource_group_id_isSet = !json[QString("managedResourceGroupId")].isNull() && m_managed_resource_group_id_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_ui_definition_uri_isValid = ::OpenAPI::fromJsonValue(m_ui_definition_uri, json[QString("uiDefinitionUri")]);
    m_ui_definition_uri_isSet = !json[QString("uiDefinitionUri")].isNull() && m_ui_definition_uri_isValid;
}

QString OAIWorkspaceProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIWorkspaceProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_authorizations.size() > 0) {
        obj.insert(QString("authorizations"), ::OpenAPI::toJsonValue(m_authorizations));
    }
    if (m_managed_resource_group_id_isSet) {
        obj.insert(QString("managedResourceGroupId"), ::OpenAPI::toJsonValue(m_managed_resource_group_id));
    }
    if (m_parameters.isSet()) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_provisioning_state.isSet()) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_ui_definition_uri_isSet) {
        obj.insert(QString("uiDefinitionUri"), ::OpenAPI::toJsonValue(m_ui_definition_uri));
    }
    return obj;
}

QList<OAIWorkspaceProviderAuthorization> OAIWorkspaceProperties::getAuthorizations() const {
    return m_authorizations;
}
void OAIWorkspaceProperties::setAuthorizations(const QList<OAIWorkspaceProviderAuthorization> &authorizations) {
    m_authorizations = authorizations;
    m_authorizations_isSet = true;
}

bool OAIWorkspaceProperties::is_authorizations_Set() const{
    return m_authorizations_isSet;
}

bool OAIWorkspaceProperties::is_authorizations_Valid() const{
    return m_authorizations_isValid;
}

QString OAIWorkspaceProperties::getManagedResourceGroupId() const {
    return m_managed_resource_group_id;
}
void OAIWorkspaceProperties::setManagedResourceGroupId(const QString &managed_resource_group_id) {
    m_managed_resource_group_id = managed_resource_group_id;
    m_managed_resource_group_id_isSet = true;
}

bool OAIWorkspaceProperties::is_managed_resource_group_id_Set() const{
    return m_managed_resource_group_id_isSet;
}

bool OAIWorkspaceProperties::is_managed_resource_group_id_Valid() const{
    return m_managed_resource_group_id_isValid;
}

OAIWorkspaceCustomParameters OAIWorkspaceProperties::getParameters() const {
    return m_parameters;
}
void OAIWorkspaceProperties::setParameters(const OAIWorkspaceCustomParameters &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIWorkspaceProperties::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIWorkspaceProperties::is_parameters_Valid() const{
    return m_parameters_isValid;
}

OAIProvisioningState OAIWorkspaceProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIWorkspaceProperties::setProvisioningState(const OAIProvisioningState &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIWorkspaceProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIWorkspaceProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIWorkspaceProperties::getUiDefinitionUri() const {
    return m_ui_definition_uri;
}
void OAIWorkspaceProperties::setUiDefinitionUri(const QString &ui_definition_uri) {
    m_ui_definition_uri = ui_definition_uri;
    m_ui_definition_uri_isSet = true;
}

bool OAIWorkspaceProperties::is_ui_definition_uri_Set() const{
    return m_ui_definition_uri_isSet;
}

bool OAIWorkspaceProperties::is_ui_definition_uri_Valid() const{
    return m_ui_definition_uri_isValid;
}

bool OAIWorkspaceProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_authorizations.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_managed_resource_group_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_ui_definition_uri_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIWorkspaceProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_managed_resource_group_id_isValid && true;
}

} // namespace OpenAPI
