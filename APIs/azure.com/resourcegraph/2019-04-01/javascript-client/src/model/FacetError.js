/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ErrorDetails from './ErrorDetails';
import Facet from './Facet';

/**
 * The FacetError model module.
 * @module model/FacetError
 * @version 2019-04-01
 */
class FacetError {
    /**
     * Constructs a new <code>FacetError</code>.
     * A facet whose execution resulted in an error.
     * @alias module:model/FacetError
     * @extends module:model/Facet
     * @implements module:model/Facet
     * @param expression {String} Facet expression, same as in the corresponding facet request.
     * @param resultType {String} Result type
     */
    constructor(expression, resultType) { 
        Facet.initialize(this, expression, resultType);
        FacetError.initialize(this, expression, resultType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression, resultType) { 
        obj['errors'] = errors;
    }

    /**
     * Constructs a <code>FacetError</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacetError} obj Optional instance to populate.
     * @return {module:model/FacetError} The populated <code>FacetError</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacetError();
            Facet.constructFromObject(data, obj);
            Facet.constructFromObject(data, obj);

            if (data.hasOwnProperty('errors')) {
                obj['errors'] = ApiClient.convertToType(data['errors'], [ErrorDetails]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FacetError</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FacetError</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FacetError.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['errors'])) {
            throw new Error("Expected the field `errors` to be an array in the JSON data but got " + data['errors']);
        }

        return true;
    }


}

FacetError.RequiredProperties = ["errors", "expression", "resultType"];

/**
 * An array containing detected facet errors with details.
 * @member {Array.<module:model/ErrorDetails>} errors
 */
FacetError.prototype['errors'] = undefined;


// Implement Facet interface:
/**
 * Facet expression, same as in the corresponding facet request.
 * @member {String} expression
 */
Facet.prototype['expression'] = undefined;
/**
 * Result type
 * @member {String} resultType
 */
Facet.prototype['resultType'] = undefined;




export default FacetError;

