/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Facet from './Facet';

/**
 * The FacetResult model module.
 * @module model/FacetResult
 * @version 2019-04-01
 */
class FacetResult {
    /**
     * Constructs a new <code>FacetResult</code>.
     * Successfully executed facet containing additional statistics on the response of a query.
     * @alias module:model/FacetResult
     * @extends module:model/Facet
     * @implements module:model/Facet
     * @param expression {String} Facet expression, same as in the corresponding facet request.
     * @param resultType {String} Result type
     */
    constructor(expression, resultType) { 
        Facet.initialize(this, expression, resultType);
        FacetResult.initialize(this, expression, resultType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, expression, resultType) { 
        obj['count'] = count;
        obj['data'] = data;
        obj['totalRecords'] = totalRecords;
    }

    /**
     * Constructs a <code>FacetResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/FacetResult} obj Optional instance to populate.
     * @return {module:model/FacetResult} The populated <code>FacetResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new FacetResult();
            Facet.constructFromObject(data, obj);
            Facet.constructFromObject(data, obj);

            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], Object);
            }
            if (data.hasOwnProperty('totalRecords')) {
                obj['totalRecords'] = ApiClient.convertToType(data['totalRecords'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>FacetResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>FacetResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of FacetResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }

        return true;
    }


}

FacetResult.RequiredProperties = ["count", "data", "totalRecords", "expression", "resultType"];

/**
 * Number of records returned in the facet response.
 * @member {Number} count
 */
FacetResult.prototype['count'] = undefined;

/**
 * A table containing the desired facets. Only present if the facet is valid.
 * @member {Object} data
 */
FacetResult.prototype['data'] = undefined;

/**
 * Number of total records in the facet results.
 * @member {Number} totalRecords
 */
FacetResult.prototype['totalRecords'] = undefined;


// Implement Facet interface:
/**
 * Facet expression, same as in the corresponding facet request.
 * @member {String} expression
 */
Facet.prototype['expression'] = undefined;
/**
 * Result type
 * @member {String} resultType
 */
Facet.prototype['resultType'] = undefined;




export default FacetResult;

