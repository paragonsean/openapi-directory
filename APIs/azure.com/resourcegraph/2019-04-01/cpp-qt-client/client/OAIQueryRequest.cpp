/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryRequest::OAIQueryRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryRequest::OAIQueryRequest() {
    this->initializeModel();
}

OAIQueryRequest::~OAIQueryRequest() {}

void OAIQueryRequest::initializeModel() {

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_subscriptions_isSet = false;
    m_subscriptions_isValid = false;
}

void OAIQueryRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryRequest::fromJsonObject(QJsonObject json) {

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_subscriptions_isValid = ::OpenAPI::fromJsonValue(m_subscriptions, json[QString("subscriptions")]);
    m_subscriptions_isSet = !json[QString("subscriptions")].isNull() && m_subscriptions_isValid;
}

QString OAIQueryRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_subscriptions.size() > 0) {
        obj.insert(QString("subscriptions"), ::OpenAPI::toJsonValue(m_subscriptions));
    }
    return obj;
}

QList<OAIFacetRequest> OAIQueryRequest::getFacets() const {
    return m_facets;
}
void OAIQueryRequest::setFacets(const QList<OAIFacetRequest> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAIQueryRequest::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAIQueryRequest::is_facets_Valid() const{
    return m_facets_isValid;
}

OAIQueryRequestOptions OAIQueryRequest::getOptions() const {
    return m_options;
}
void OAIQueryRequest::setOptions(const OAIQueryRequestOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIQueryRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAIQueryRequest::is_options_Valid() const{
    return m_options_isValid;
}

QString OAIQueryRequest::getQuery() const {
    return m_query;
}
void OAIQueryRequest::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIQueryRequest::is_query_Set() const{
    return m_query_isSet;
}

bool OAIQueryRequest::is_query_Valid() const{
    return m_query_isValid;
}

QList<QString> OAIQueryRequest::getSubscriptions() const {
    return m_subscriptions;
}
void OAIQueryRequest::setSubscriptions(const QList<QString> &subscriptions) {
    m_subscriptions = subscriptions;
    m_subscriptions_isSet = true;
}

bool OAIQueryRequest::is_subscriptions_Set() const{
    return m_subscriptions_isSet;
}

bool OAIQueryRequest::is_subscriptions_Valid() const{
    return m_subscriptions_isValid;
}

bool OAIQueryRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscriptions.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_query_isValid && m_subscriptions_isValid && true;
}

} // namespace OpenAPI
