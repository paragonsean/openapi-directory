/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetError.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetError::OAIFacetError(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetError::OAIFacetError() {
    this->initializeModel();
}

OAIFacetError::~OAIFacetError() {}

void OAIFacetError::initializeModel() {

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;
}

void OAIFacetError::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetError::fromJsonObject(QJsonObject json) {

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("resultType")]);
    m_result_type_isSet = !json[QString("resultType")].isNull() && m_result_type_isValid;
}

QString OAIFacetError::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetError::asJsonObject() const {
    QJsonObject obj;
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("resultType"), ::OpenAPI::toJsonValue(m_result_type));
    }
    return obj;
}

QList<OAIErrorDetails> OAIFacetError::getErrors() const {
    return m_errors;
}
void OAIFacetError::setErrors(const QList<OAIErrorDetails> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAIFacetError::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAIFacetError::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAIFacetError::getExpression() const {
    return m_expression;
}
void OAIFacetError::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIFacetError::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIFacetError::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIFacetError::getResultType() const {
    return m_result_type;
}
void OAIFacetError::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIFacetError::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIFacetError::is_result_type_Valid() const{
    return m_result_type_isValid;
}

bool OAIFacetError::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetError::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_errors_isValid && m_expression_isValid && m_result_type_isValid && true;
}

} // namespace OpenAPI
