/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2019-04-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetRequestOptions.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetRequestOptions::OAIFacetRequestOptions(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetRequestOptions::OAIFacetRequestOptions() {
    this->initializeModel();
}

OAIFacetRequestOptions::~OAIFacetRequestOptions() {}

void OAIFacetRequestOptions::initializeModel() {

    m_top_isSet = false;
    m_top_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_sort_by_isSet = false;
    m_sort_by_isValid = false;

    m_sort_order_isSet = false;
    m_sort_order_isValid = false;
}

void OAIFacetRequestOptions::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetRequestOptions::fromJsonObject(QJsonObject json) {

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("$top")]);
    m_top_isSet = !json[QString("$top")].isNull() && m_top_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_sort_by_isValid = ::OpenAPI::fromJsonValue(m_sort_by, json[QString("sortBy")]);
    m_sort_by_isSet = !json[QString("sortBy")].isNull() && m_sort_by_isValid;

    m_sort_order_isValid = ::OpenAPI::fromJsonValue(m_sort_order, json[QString("sortOrder")]);
    m_sort_order_isSet = !json[QString("sortOrder")].isNull() && m_sort_order_isValid;
}

QString OAIFacetRequestOptions::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetRequestOptions::asJsonObject() const {
    QJsonObject obj;
    if (m_top_isSet) {
        obj.insert(QString("$top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_sort_by_isSet) {
        obj.insert(QString("sortBy"), ::OpenAPI::toJsonValue(m_sort_by));
    }
    if (m_sort_order_isSet) {
        obj.insert(QString("sortOrder"), ::OpenAPI::toJsonValue(m_sort_order));
    }
    return obj;
}

qint32 OAIFacetRequestOptions::getTop() const {
    return m_top;
}
void OAIFacetRequestOptions::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIFacetRequestOptions::is_top_Set() const{
    return m_top_isSet;
}

bool OAIFacetRequestOptions::is_top_Valid() const{
    return m_top_isValid;
}

QString OAIFacetRequestOptions::getFilter() const {
    return m_filter;
}
void OAIFacetRequestOptions::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAIFacetRequestOptions::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAIFacetRequestOptions::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAIFacetRequestOptions::getSortBy() const {
    return m_sort_by;
}
void OAIFacetRequestOptions::setSortBy(const QString &sort_by) {
    m_sort_by = sort_by;
    m_sort_by_isSet = true;
}

bool OAIFacetRequestOptions::is_sort_by_Set() const{
    return m_sort_by_isSet;
}

bool OAIFacetRequestOptions::is_sort_by_Valid() const{
    return m_sort_by_isValid;
}

QString OAIFacetRequestOptions::getSortOrder() const {
    return m_sort_order;
}
void OAIFacetRequestOptions::setSortOrder(const QString &sort_order) {
    m_sort_order = sort_order;
    m_sort_order_isSet = true;
}

bool OAIFacetRequestOptions::is_sort_order_Set() const{
    return m_sort_order_isSet;
}

bool OAIFacetRequestOptions::is_sort_order_Valid() const{
    return m_sort_order_isValid;
}

bool OAIFacetRequestOptions::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_order_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetRequestOptions::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
