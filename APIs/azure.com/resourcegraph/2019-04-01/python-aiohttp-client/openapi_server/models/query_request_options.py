# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryRequestOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skip: int=None, skip_token: str=None, top: int=None, result_format: str=None):
        """QueryRequestOptions - a model defined in OpenAPI

        :param skip: The skip of this QueryRequestOptions.
        :param skip_token: The skip_token of this QueryRequestOptions.
        :param top: The top of this QueryRequestOptions.
        :param result_format: The result_format of this QueryRequestOptions.
        """
        self.openapi_types = {
            'skip': int,
            'skip_token': str,
            'top': int,
            'result_format': str
        }

        self.attribute_map = {
            'skip': '$skip',
            'skip_token': '$skipToken',
            'top': '$top',
            'result_format': 'resultFormat'
        }

        self._skip = skip
        self._skip_token = skip_token
        self._top = top
        self._result_format = result_format

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRequestOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRequestOptions of this QueryRequestOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skip(self):
        """Gets the skip of this QueryRequestOptions.

        The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.

        :return: The skip of this QueryRequestOptions.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this QueryRequestOptions.

        The number of rows to skip from the beginning of the results. Overrides the next page offset when ```$skipToken``` property is present.

        :param skip: The skip of this QueryRequestOptions.
        :type skip: int
        """
        if skip is not None and skip < 0:
            raise ValueError("Invalid value for `skip`, must be a value greater than or equal to `0`")

        self._skip = skip

    @property
    def skip_token(self):
        """Gets the skip_token of this QueryRequestOptions.

        Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.

        :return: The skip_token of this QueryRequestOptions.
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this QueryRequestOptions.

        Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.

        :param skip_token: The skip_token of this QueryRequestOptions.
        :type skip_token: str
        """

        self._skip_token = skip_token

    @property
    def top(self):
        """Gets the top of this QueryRequestOptions.

        The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.

        :return: The top of this QueryRequestOptions.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this QueryRequestOptions.

        The maximum number of rows that the query should return. Overrides the page size when ```$skipToken``` property is present.

        :param top: The top of this QueryRequestOptions.
        :type top: int
        """
        if top is not None and top > 1000:
            raise ValueError("Invalid value for `top`, must be a value less than or equal to `1000`")
        if top is not None and top < 1:
            raise ValueError("Invalid value for `top`, must be a value greater than or equal to `1`")

        self._top = top

    @property
    def result_format(self):
        """Gets the result_format of this QueryRequestOptions.

        Defines in which format query result returned.

        :return: The result_format of this QueryRequestOptions.
        :rtype: str
        """
        return self._result_format

    @result_format.setter
    def result_format(self, result_format):
        """Sets the result_format of this QueryRequestOptions.

        Defines in which format query result returned.

        :param result_format: The result_format of this QueryRequestOptions.
        :type result_format: str
        """
        allowed_values = ["table", "objectArray"]  # noqa: E501
        if result_format not in allowed_values:
            raise ValueError(
                "Invalid value for `result_format` ({0}), must be one of {1}"
                .format(result_format, allowed_values)
            )

        self._result_format = result_format
