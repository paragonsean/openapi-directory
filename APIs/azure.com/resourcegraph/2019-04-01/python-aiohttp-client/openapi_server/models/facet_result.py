# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet import Facet
from openapi_server import util


class FacetResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, data: object=None, total_records: int=None, expression: str=None, result_type: str=None):
        """FacetResult - a model defined in OpenAPI

        :param count: The count of this FacetResult.
        :param data: The data of this FacetResult.
        :param total_records: The total_records of this FacetResult.
        :param expression: The expression of this FacetResult.
        :param result_type: The result_type of this FacetResult.
        """
        self.openapi_types = {
            'count': int,
            'data': object,
            'total_records': int,
            'expression': str,
            'result_type': str
        }

        self.attribute_map = {
            'count': 'count',
            'data': 'data',
            'total_records': 'totalRecords',
            'expression': 'expression',
            'result_type': 'resultType'
        }

        self._count = count
        self._data = data
        self._total_records = total_records
        self._expression = expression
        self._result_type = result_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetResult of this FacetResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this FacetResult.

        Number of records returned in the facet response.

        :return: The count of this FacetResult.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FacetResult.

        Number of records returned in the facet response.

        :param count: The count of this FacetResult.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def data(self):
        """Gets the data of this FacetResult.

        A table containing the desired facets. Only present if the facet is valid.

        :return: The data of this FacetResult.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this FacetResult.

        A table containing the desired facets. Only present if the facet is valid.

        :param data: The data of this FacetResult.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def total_records(self):
        """Gets the total_records of this FacetResult.

        Number of total records in the facet results.

        :return: The total_records of this FacetResult.
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this FacetResult.

        Number of total records in the facet results.

        :param total_records: The total_records of this FacetResult.
        :type total_records: int
        """
        if total_records is None:
            raise ValueError("Invalid value for `total_records`, must not be `None`")

        self._total_records = total_records

    @property
    def expression(self):
        """Gets the expression of this FacetResult.

        Facet expression, same as in the corresponding facet request.

        :return: The expression of this FacetResult.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this FacetResult.

        Facet expression, same as in the corresponding facet request.

        :param expression: The expression of this FacetResult.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def result_type(self):
        """Gets the result_type of this FacetResult.

        Result type

        :return: The result_type of this FacetResult.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this FacetResult.

        Result type

        :param result_type: The result_type of this FacetResult.
        :type result_type: str
        """
        if result_type is None:
            raise ValueError("Invalid value for `result_type`, must not be `None`")

        self._result_type = result_type
