# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet import Facet
from openapi_server import util


class QueryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skip_token: str=None, count: int=None, data: object=None, facets: List[Facet]=None, result_truncated: str=None, total_records: int=None):
        """QueryResponse - a model defined in OpenAPI

        :param skip_token: The skip_token of this QueryResponse.
        :param count: The count of this QueryResponse.
        :param data: The data of this QueryResponse.
        :param facets: The facets of this QueryResponse.
        :param result_truncated: The result_truncated of this QueryResponse.
        :param total_records: The total_records of this QueryResponse.
        """
        self.openapi_types = {
            'skip_token': str,
            'count': int,
            'data': object,
            'facets': List[Facet],
            'result_truncated': str,
            'total_records': int
        }

        self.attribute_map = {
            'skip_token': '$skipToken',
            'count': 'count',
            'data': 'data',
            'facets': 'facets',
            'result_truncated': 'resultTruncated',
            'total_records': 'totalRecords'
        }

        self._skip_token = skip_token
        self._count = count
        self._data = data
        self._facets = facets
        self._result_truncated = result_truncated
        self._total_records = total_records

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryResponse of this QueryResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skip_token(self):
        """Gets the skip_token of this QueryResponse.

        When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.

        :return: The skip_token of this QueryResponse.
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this QueryResponse.

        When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.

        :param skip_token: The skip_token of this QueryResponse.
        :type skip_token: str
        """

        self._skip_token = skip_token

    @property
    def count(self):
        """Gets the count of this QueryResponse.

        Number of records returned in the current response. In the case of paging, this is the number of records in the current page.

        :return: The count of this QueryResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this QueryResponse.

        Number of records returned in the current response. In the case of paging, this is the number of records in the current page.

        :param count: The count of this QueryResponse.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def data(self):
        """Gets the data of this QueryResponse.

        Query output in tabular format.

        :return: The data of this QueryResponse.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this QueryResponse.

        Query output in tabular format.

        :param data: The data of this QueryResponse.
        :type data: object
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def facets(self):
        """Gets the facets of this QueryResponse.

        Query facets.

        :return: The facets of this QueryResponse.
        :rtype: List[Facet]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this QueryResponse.

        Query facets.

        :param facets: The facets of this QueryResponse.
        :type facets: List[Facet]
        """

        self._facets = facets

    @property
    def result_truncated(self):
        """Gets the result_truncated of this QueryResponse.

        Indicates whether the query results are truncated.

        :return: The result_truncated of this QueryResponse.
        :rtype: str
        """
        return self._result_truncated

    @result_truncated.setter
    def result_truncated(self, result_truncated):
        """Sets the result_truncated of this QueryResponse.

        Indicates whether the query results are truncated.

        :param result_truncated: The result_truncated of this QueryResponse.
        :type result_truncated: str
        """
        allowed_values = ["true", "false"]  # noqa: E501
        if result_truncated not in allowed_values:
            raise ValueError(
                "Invalid value for `result_truncated` ({0}), must be one of {1}"
                .format(result_truncated, allowed_values)
            )

        self._result_truncated = result_truncated

    @property
    def total_records(self):
        """Gets the total_records of this QueryResponse.

        Number of total records matching the query.

        :return: The total_records of this QueryResponse.
        :rtype: int
        """
        return self._total_records

    @total_records.setter
    def total_records(self, total_records):
        """Sets the total_records of this QueryResponse.

        Number of total records matching the query.

        :param total_records: The total_records of this QueryResponse.
        :type total_records: int
        """
        if total_records is None:
            raise ValueError("Invalid value for `total_records`, must not be `None`")

        self._total_records = total_records
