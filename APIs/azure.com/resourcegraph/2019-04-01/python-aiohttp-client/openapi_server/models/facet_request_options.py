# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FacetRequestOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, top: int=None, filter: str=None, sort_by: str=None, sort_order: str='desc'):
        """FacetRequestOptions - a model defined in OpenAPI

        :param top: The top of this FacetRequestOptions.
        :param filter: The filter of this FacetRequestOptions.
        :param sort_by: The sort_by of this FacetRequestOptions.
        :param sort_order: The sort_order of this FacetRequestOptions.
        """
        self.openapi_types = {
            'top': int,
            'filter': str,
            'sort_by': str,
            'sort_order': str
        }

        self.attribute_map = {
            'top': '$top',
            'filter': 'filter',
            'sort_by': 'sortBy',
            'sort_order': 'sortOrder'
        }

        self._top = top
        self._filter = filter
        self._sort_by = sort_by
        self._sort_order = sort_order

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetRequestOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetRequestOptions of this FacetRequestOptions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def top(self):
        """Gets the top of this FacetRequestOptions.

        The maximum number of facet rows that should be returned.

        :return: The top of this FacetRequestOptions.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this FacetRequestOptions.

        The maximum number of facet rows that should be returned.

        :param top: The top of this FacetRequestOptions.
        :type top: int
        """
        if top is not None and top > 1000:
            raise ValueError("Invalid value for `top`, must be a value less than or equal to `1000`")
        if top is not None and top < 1:
            raise ValueError("Invalid value for `top`, must be a value greater than or equal to `1`")

        self._top = top

    @property
    def filter(self):
        """Gets the filter of this FacetRequestOptions.

        Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.

        :return: The filter of this FacetRequestOptions.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this FacetRequestOptions.

        Specifies the filter condition for the 'where' clause which will be run on main query's result, just before the actual faceting.

        :param filter: The filter of this FacetRequestOptions.
        :type filter: str
        """

        self._filter = filter

    @property
    def sort_by(self):
        """Gets the sort_by of this FacetRequestOptions.

        The column name or query expression to sort on. Defaults to count if not present.

        :return: The sort_by of this FacetRequestOptions.
        :rtype: str
        """
        return self._sort_by

    @sort_by.setter
    def sort_by(self, sort_by):
        """Sets the sort_by of this FacetRequestOptions.

        The column name or query expression to sort on. Defaults to count if not present.

        :param sort_by: The sort_by of this FacetRequestOptions.
        :type sort_by: str
        """

        self._sort_by = sort_by

    @property
    def sort_order(self):
        """Gets the sort_order of this FacetRequestOptions.

        The sorting order by the selected column (count by default).

        :return: The sort_order of this FacetRequestOptions.
        :rtype: str
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this FacetRequestOptions.

        The sorting order by the selected column (count by default).

        :param sort_order: The sort_order of this FacetRequestOptions.
        :type sort_order: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if sort_order not in allowed_values:
            raise ValueError(
                "Invalid value for `sort_order` ({0}), must be one of {1}"
                .format(sort_order, allowed_values)
            )

        self._sort_order = sort_order
