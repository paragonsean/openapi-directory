/*
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2019-04-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Facet;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Query result.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:06.382387-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryResponse {
  public static final String SERIALIZED_NAME_$_SKIP_TOKEN = "$skipToken";
  @SerializedName(SERIALIZED_NAME_$_SKIP_TOKEN)
  private String $skipToken;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Long count;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private Object data;

  public static final String SERIALIZED_NAME_FACETS = "facets";
  @SerializedName(SERIALIZED_NAME_FACETS)
  private List<Facet> facets = new ArrayList<>();

  /**
   * Indicates whether the query results are truncated.
   */
  @JsonAdapter(ResultTruncatedEnum.Adapter.class)
  public enum ResultTruncatedEnum {
    TRUE("true"),
    
    FALSE("false");

    private String value;

    ResultTruncatedEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultTruncatedEnum fromValue(String value) {
      for (ResultTruncatedEnum b : ResultTruncatedEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ResultTruncatedEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultTruncatedEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultTruncatedEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultTruncatedEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ResultTruncatedEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT_TRUNCATED = "resultTruncated";
  @SerializedName(SERIALIZED_NAME_RESULT_TRUNCATED)
  private ResultTruncatedEnum resultTruncated;

  public static final String SERIALIZED_NAME_TOTAL_RECORDS = "totalRecords";
  @SerializedName(SERIALIZED_NAME_TOTAL_RECORDS)
  private Long totalRecords;

  public QueryResponse() {
  }

  public QueryResponse $skipToken(String $skipToken) {
    this.$skipToken = $skipToken;
    return this;
  }

  /**
   * When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.
   * @return $skipToken
   */
  @javax.annotation.Nullable
  public String get$SkipToken() {
    return $skipToken;
  }

  public void set$SkipToken(String $skipToken) {
    this.$skipToken = $skipToken;
  }


  public QueryResponse count(Long count) {
    this.count = count;
    return this;
  }

  /**
   * Number of records returned in the current response. In the case of paging, this is the number of records in the current page.
   * @return count
   */
  @javax.annotation.Nonnull
  public Long getCount() {
    return count;
  }

  public void setCount(Long count) {
    this.count = count;
  }


  public QueryResponse data(Object data) {
    this.data = data;
    return this;
  }

  /**
   * Query output in tabular format.
   * @return data
   */
  @javax.annotation.Nonnull
  public Object getData() {
    return data;
  }

  public void setData(Object data) {
    this.data = data;
  }


  public QueryResponse facets(List<Facet> facets) {
    this.facets = facets;
    return this;
  }

  public QueryResponse addFacetsItem(Facet facetsItem) {
    if (this.facets == null) {
      this.facets = new ArrayList<>();
    }
    this.facets.add(facetsItem);
    return this;
  }

  /**
   * Query facets.
   * @return facets
   */
  @javax.annotation.Nullable
  public List<Facet> getFacets() {
    return facets;
  }

  public void setFacets(List<Facet> facets) {
    this.facets = facets;
  }


  public QueryResponse resultTruncated(ResultTruncatedEnum resultTruncated) {
    this.resultTruncated = resultTruncated;
    return this;
  }

  /**
   * Indicates whether the query results are truncated.
   * @return resultTruncated
   */
  @javax.annotation.Nonnull
  public ResultTruncatedEnum getResultTruncated() {
    return resultTruncated;
  }

  public void setResultTruncated(ResultTruncatedEnum resultTruncated) {
    this.resultTruncated = resultTruncated;
  }


  public QueryResponse totalRecords(Long totalRecords) {
    this.totalRecords = totalRecords;
    return this;
  }

  /**
   * Number of total records matching the query.
   * @return totalRecords
   */
  @javax.annotation.Nonnull
  public Long getTotalRecords() {
    return totalRecords;
  }

  public void setTotalRecords(Long totalRecords) {
    this.totalRecords = totalRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryResponse queryResponse = (QueryResponse) o;
    return Objects.equals(this.$skipToken, queryResponse.$skipToken) &&
        Objects.equals(this.count, queryResponse.count) &&
        Objects.equals(this.data, queryResponse.data) &&
        Objects.equals(this.facets, queryResponse.facets) &&
        Objects.equals(this.resultTruncated, queryResponse.resultTruncated) &&
        Objects.equals(this.totalRecords, queryResponse.totalRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash($skipToken, count, data, facets, resultTruncated, totalRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryResponse {\n");
    sb.append("    $skipToken: ").append(toIndentedString($skipToken)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    facets: ").append(toIndentedString(facets)).append("\n");
    sb.append("    resultTruncated: ").append(toIndentedString(resultTruncated)).append("\n");
    sb.append("    totalRecords: ").append(toIndentedString(totalRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$skipToken");
    openapiFields.add("count");
    openapiFields.add("data");
    openapiFields.add("facets");
    openapiFields.add("resultTruncated");
    openapiFields.add("totalRecords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("data");
    openapiRequiredFields.add("resultTruncated");
    openapiRequiredFields.add("totalRecords");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryResponse is not found in the empty JSON string", QueryResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : QueryResponse.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("$skipToken") != null && !jsonObj.get("$skipToken").isJsonNull()) && !jsonObj.get("$skipToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$skipToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$skipToken").toString()));
      }
      if (jsonObj.get("facets") != null && !jsonObj.get("facets").isJsonNull()) {
        JsonArray jsonArrayfacets = jsonObj.getAsJsonArray("facets");
        if (jsonArrayfacets != null) {
          // ensure the json data is an array
          if (!jsonObj.get("facets").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `facets` to be an array in the JSON string but got `%s`", jsonObj.get("facets").toString()));
          }

          // validate the optional field `facets` (array)
          for (int i = 0; i < jsonArrayfacets.size(); i++) {
            Facet.validateJsonElement(jsonArrayfacets.get(i));
          };
        }
      }
      if (!jsonObj.get("resultTruncated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultTruncated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultTruncated").toString()));
      }
      // validate the required field `resultTruncated`
      ResultTruncatedEnum.validateJsonElement(jsonObj.get("resultTruncated"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryResponse>() {
           @Override
           public void write(JsonWriter out, QueryResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryResponse
   * @throws IOException if the JSON string is invalid with respect to QueryResponse
   */
  public static QueryResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryResponse.class);
  }

  /**
   * Convert an instance of QueryResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

