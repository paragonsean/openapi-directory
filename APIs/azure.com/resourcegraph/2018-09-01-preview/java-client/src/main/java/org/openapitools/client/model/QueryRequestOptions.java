/*
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The options for query evaluation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:13:09.735113-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class QueryRequestOptions {
  public static final String SERIALIZED_NAME_$_SKIP = "$skip";
  @SerializedName(SERIALIZED_NAME_$_SKIP)
  private Integer $skip;

  public static final String SERIALIZED_NAME_$_SKIP_TOKEN = "$skipToken";
  @SerializedName(SERIALIZED_NAME_$_SKIP_TOKEN)
  private String $skipToken;

  public static final String SERIALIZED_NAME_$_TOP = "$top";
  @SerializedName(SERIALIZED_NAME_$_TOP)
  private Integer $top;

  public QueryRequestOptions() {
  }

  public QueryRequestOptions $skip(Integer $skip) {
    this.$skip = $skip;
    return this;
  }

  /**
   * The number of rows to skip from the beginning of the results. Overrides the next page offset when &#x60;&#x60;&#x60;$skipToken&#x60;&#x60;&#x60; property is present.
   * minimum: 0
   * @return $skip
   */
  @javax.annotation.Nullable
  public Integer get$Skip() {
    return $skip;
  }

  public void set$Skip(Integer $skip) {
    this.$skip = $skip;
  }


  public QueryRequestOptions $skipToken(String $skipToken) {
    this.$skipToken = $skipToken;
    return this;
  }

  /**
   * Continuation token for pagination, capturing the next page size and offset, as well as the context of the query.
   * @return $skipToken
   */
  @javax.annotation.Nullable
  public String get$SkipToken() {
    return $skipToken;
  }

  public void set$SkipToken(String $skipToken) {
    this.$skipToken = $skipToken;
  }


  public QueryRequestOptions $top(Integer $top) {
    this.$top = $top;
    return this;
  }

  /**
   * The maximum number of rows that the query should return. Overrides the page size when &#x60;&#x60;&#x60;$skipToken&#x60;&#x60;&#x60; property is present.
   * minimum: 1
   * maximum: 1000
   * @return $top
   */
  @javax.annotation.Nullable
  public Integer get$Top() {
    return $top;
  }

  public void set$Top(Integer $top) {
    this.$top = $top;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    QueryRequestOptions queryRequestOptions = (QueryRequestOptions) o;
    return Objects.equals(this.$skip, queryRequestOptions.$skip) &&
        Objects.equals(this.$skipToken, queryRequestOptions.$skipToken) &&
        Objects.equals(this.$top, queryRequestOptions.$top);
  }

  @Override
  public int hashCode() {
    return Objects.hash($skip, $skipToken, $top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class QueryRequestOptions {\n");
    sb.append("    $skip: ").append(toIndentedString($skip)).append("\n");
    sb.append("    $skipToken: ").append(toIndentedString($skipToken)).append("\n");
    sb.append("    $top: ").append(toIndentedString($top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("$skip");
    openapiFields.add("$skipToken");
    openapiFields.add("$top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to QueryRequestOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!QueryRequestOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in QueryRequestOptions is not found in the empty JSON string", QueryRequestOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!QueryRequestOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `QueryRequestOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("$skipToken") != null && !jsonObj.get("$skipToken").isJsonNull()) && !jsonObj.get("$skipToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `$skipToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("$skipToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!QueryRequestOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'QueryRequestOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<QueryRequestOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(QueryRequestOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<QueryRequestOptions>() {
           @Override
           public void write(JsonWriter out, QueryRequestOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public QueryRequestOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of QueryRequestOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of QueryRequestOptions
   * @throws IOException if the JSON string is invalid with respect to QueryRequestOptions
   */
  public static QueryRequestOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, QueryRequestOptions.class);
  }

  /**
   * Convert an instance of QueryRequestOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

