# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_request import FacetRequest
from openapi_server.models.query_request_options import QueryRequestOptions
from openapi_server import util


class QueryRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facets: List[FacetRequest]=None, options: QueryRequestOptions=None, query: str=None, subscriptions: List[str]=None):
        """QueryRequest - a model defined in OpenAPI

        :param facets: The facets of this QueryRequest.
        :param options: The options of this QueryRequest.
        :param query: The query of this QueryRequest.
        :param subscriptions: The subscriptions of this QueryRequest.
        """
        self.openapi_types = {
            'facets': List[FacetRequest],
            'options': QueryRequestOptions,
            'query': str,
            'subscriptions': List[str]
        }

        self.attribute_map = {
            'facets': 'facets',
            'options': 'options',
            'query': 'query',
            'subscriptions': 'subscriptions'
        }

        self._facets = facets
        self._options = options
        self._query = query
        self._subscriptions = subscriptions

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QueryRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QueryRequest of this QueryRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facets(self):
        """Gets the facets of this QueryRequest.

        An array of facet requests to be computed against the query result.

        :return: The facets of this QueryRequest.
        :rtype: List[FacetRequest]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this QueryRequest.

        An array of facet requests to be computed against the query result.

        :param facets: The facets of this QueryRequest.
        :type facets: List[FacetRequest]
        """

        self._facets = facets

    @property
    def options(self):
        """Gets the options of this QueryRequest.


        :return: The options of this QueryRequest.
        :rtype: QueryRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this QueryRequest.


        :param options: The options of this QueryRequest.
        :type options: QueryRequestOptions
        """

        self._options = options

    @property
    def query(self):
        """Gets the query of this QueryRequest.

        The resources query.

        :return: The query of this QueryRequest.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this QueryRequest.

        The resources query.

        :param query: The query of this QueryRequest.
        :type query: str
        """
        if query is None:
            raise ValueError("Invalid value for `query`, must not be `None`")

        self._query = query

    @property
    def subscriptions(self):
        """Gets the subscriptions of this QueryRequest.

        Azure subscriptions against which to execute the query.

        :return: The subscriptions of this QueryRequest.
        :rtype: List[str]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this QueryRequest.

        Azure subscriptions against which to execute the query.

        :param subscriptions: The subscriptions of this QueryRequest.
        :type subscriptions: List[str]
        """
        if subscriptions is None:
            raise ValueError("Invalid value for `subscriptions`, must not be `None`")

        self._subscriptions = subscriptions
