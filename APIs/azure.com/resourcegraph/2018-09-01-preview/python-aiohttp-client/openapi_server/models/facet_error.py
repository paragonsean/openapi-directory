# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error_details import ErrorDetails
from openapi_server.models.facet import Facet
from openapi_server import util


class FacetError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors: List[ErrorDetails]=None, expression: str=None, result_type: str=None):
        """FacetError - a model defined in OpenAPI

        :param errors: The errors of this FacetError.
        :param expression: The expression of this FacetError.
        :param result_type: The result_type of this FacetError.
        """
        self.openapi_types = {
            'errors': List[ErrorDetails],
            'expression': str,
            'result_type': str
        }

        self.attribute_map = {
            'errors': 'errors',
            'expression': 'expression',
            'result_type': 'resultType'
        }

        self._errors = errors
        self._expression = expression
        self._result_type = result_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetError':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetError of this FacetError.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self):
        """Gets the errors of this FacetError.

        An array containing detected facet errors with details.

        :return: The errors of this FacetError.
        :rtype: List[ErrorDetails]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this FacetError.

        An array containing detected facet errors with details.

        :param errors: The errors of this FacetError.
        :type errors: List[ErrorDetails]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")

        self._errors = errors

    @property
    def expression(self):
        """Gets the expression of this FacetError.

        Facet expression, same as in the corresponding facet request.

        :return: The expression of this FacetError.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this FacetError.

        Facet expression, same as in the corresponding facet request.

        :param expression: The expression of this FacetError.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def result_type(self):
        """Gets the result_type of this FacetError.

        Result type

        :return: The result_type of this FacetError.
        :rtype: str
        """
        return self._result_type

    @result_type.setter
    def result_type(self, result_type):
        """Sets the result_type of this FacetError.

        Result type

        :param result_type: The result_type of this FacetError.
        :type result_type: str
        """
        if result_type is None:
            raise ValueError("Invalid value for `result_type`, must not be `None`")

        self._result_type = result_type
