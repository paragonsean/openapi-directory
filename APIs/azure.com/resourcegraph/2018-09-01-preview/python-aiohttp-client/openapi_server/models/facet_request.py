# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.facet_request_options import FacetRequestOptions
from openapi_server import util


class FacetRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expression: str=None, options: FacetRequestOptions=None):
        """FacetRequest - a model defined in OpenAPI

        :param expression: The expression of this FacetRequest.
        :param options: The options of this FacetRequest.
        """
        self.openapi_types = {
            'expression': str,
            'options': FacetRequestOptions
        }

        self.attribute_map = {
            'expression': 'expression',
            'options': 'options'
        }

        self._expression = expression
        self._options = options

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FacetRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FacetRequest of this FacetRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expression(self):
        """Gets the expression of this FacetRequest.

        The column or list of columns to summarize by

        :return: The expression of this FacetRequest.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression):
        """Sets the expression of this FacetRequest.

        The column or list of columns to summarize by

        :param expression: The expression of this FacetRequest.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")

        self._expression = expression

    @property
    def options(self):
        """Gets the options of this FacetRequest.


        :return: The options of this FacetRequest.
        :rtype: FacetRequestOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FacetRequest.


        :param options: The options of this FacetRequest.
        :type options: FacetRequestOptions
        """

        self._options = options
