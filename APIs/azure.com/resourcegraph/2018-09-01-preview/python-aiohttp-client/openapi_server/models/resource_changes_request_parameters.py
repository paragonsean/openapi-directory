# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.date_time_interval import DateTimeInterval
from openapi_server import util


class ResourceChangesRequestParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, skip_token: str=None, top: int=None, interval: DateTimeInterval=None, resource_id: str=None):
        """ResourceChangesRequestParameters - a model defined in OpenAPI

        :param skip_token: The skip_token of this ResourceChangesRequestParameters.
        :param top: The top of this ResourceChangesRequestParameters.
        :param interval: The interval of this ResourceChangesRequestParameters.
        :param resource_id: The resource_id of this ResourceChangesRequestParameters.
        """
        self.openapi_types = {
            'skip_token': str,
            'top': int,
            'interval': DateTimeInterval,
            'resource_id': str
        }

        self.attribute_map = {
            'skip_token': '$skipToken',
            'top': '$top',
            'interval': 'interval',
            'resource_id': 'resourceId'
        }

        self._skip_token = skip_token
        self._top = top
        self._interval = interval
        self._resource_id = resource_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceChangesRequestParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceChangesRequestParameters of this ResourceChangesRequestParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def skip_token(self):
        """Gets the skip_token of this ResourceChangesRequestParameters.

        Acts as the continuation token for paged responses.

        :return: The skip_token of this ResourceChangesRequestParameters.
        :rtype: str
        """
        return self._skip_token

    @skip_token.setter
    def skip_token(self, skip_token):
        """Sets the skip_token of this ResourceChangesRequestParameters.

        Acts as the continuation token for paged responses.

        :param skip_token: The skip_token of this ResourceChangesRequestParameters.
        :type skip_token: str
        """

        self._skip_token = skip_token

    @property
    def top(self):
        """Gets the top of this ResourceChangesRequestParameters.

        The maximum number of changes the client can accept in a paged response.

        :return: The top of this ResourceChangesRequestParameters.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this ResourceChangesRequestParameters.

        The maximum number of changes the client can accept in a paged response.

        :param top: The top of this ResourceChangesRequestParameters.
        :type top: int
        """
        if top is not None and top > 1000:
            raise ValueError("Invalid value for `top`, must be a value less than or equal to `1000`")
        if top is not None and top < 1:
            raise ValueError("Invalid value for `top`, must be a value greater than or equal to `1`")

        self._top = top

    @property
    def interval(self):
        """Gets the interval of this ResourceChangesRequestParameters.

        Specifies the date and time interval for a changes request.

        :return: The interval of this ResourceChangesRequestParameters.
        :rtype: DateTimeInterval
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this ResourceChangesRequestParameters.

        Specifies the date and time interval for a changes request.

        :param interval: The interval of this ResourceChangesRequestParameters.
        :type interval: DateTimeInterval
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def resource_id(self):
        """Gets the resource_id of this ResourceChangesRequestParameters.

        Specifies the resource for a changes request.

        :return: The resource_id of this ResourceChangesRequestParameters.
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ResourceChangesRequestParameters.

        Specifies the resource for a changes request.

        :param resource_id: The resource_id of this ResourceChangesRequestParameters.
        :type resource_id: str
        """
        if resource_id is None:
            raise ValueError("Invalid value for `resource_id`, must not be `None`")

        self._resource_id = resource_id
