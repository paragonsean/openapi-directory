# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.resource_snapshot_data import ResourceSnapshotData
from openapi_server import util


class ResourceChangeData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_snapshot: ResourceSnapshotData=None, before_snapshot: ResourceSnapshotData=None, change_id: str=None):
        """ResourceChangeData - a model defined in OpenAPI

        :param after_snapshot: The after_snapshot of this ResourceChangeData.
        :param before_snapshot: The before_snapshot of this ResourceChangeData.
        :param change_id: The change_id of this ResourceChangeData.
        """
        self.openapi_types = {
            'after_snapshot': ResourceSnapshotData,
            'before_snapshot': ResourceSnapshotData,
            'change_id': str
        }

        self.attribute_map = {
            'after_snapshot': 'afterSnapshot',
            'before_snapshot': 'beforeSnapshot',
            'change_id': 'changeId'
        }

        self._after_snapshot = after_snapshot
        self._before_snapshot = before_snapshot
        self._change_id = change_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResourceChangeData':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ResourceChangeData of this ResourceChangeData.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_snapshot(self):
        """Gets the after_snapshot of this ResourceChangeData.

        The snapshot after the change.

        :return: The after_snapshot of this ResourceChangeData.
        :rtype: ResourceSnapshotData
        """
        return self._after_snapshot

    @after_snapshot.setter
    def after_snapshot(self, after_snapshot):
        """Sets the after_snapshot of this ResourceChangeData.

        The snapshot after the change.

        :param after_snapshot: The after_snapshot of this ResourceChangeData.
        :type after_snapshot: ResourceSnapshotData
        """
        if after_snapshot is None:
            raise ValueError("Invalid value for `after_snapshot`, must not be `None`")

        self._after_snapshot = after_snapshot

    @property
    def before_snapshot(self):
        """Gets the before_snapshot of this ResourceChangeData.

        The snapshot before the change.

        :return: The before_snapshot of this ResourceChangeData.
        :rtype: ResourceSnapshotData
        """
        return self._before_snapshot

    @before_snapshot.setter
    def before_snapshot(self, before_snapshot):
        """Sets the before_snapshot of this ResourceChangeData.

        The snapshot before the change.

        :param before_snapshot: The before_snapshot of this ResourceChangeData.
        :type before_snapshot: ResourceSnapshotData
        """
        if before_snapshot is None:
            raise ValueError("Invalid value for `before_snapshot`, must not be `None`")

        self._before_snapshot = before_snapshot

    @property
    def change_id(self):
        """Gets the change_id of this ResourceChangeData.

        The change ID. Valid and unique within the specified resource only.

        :return: The change_id of this ResourceChangeData.
        :rtype: str
        """
        return self._change_id

    @change_id.setter
    def change_id(self, change_id):
        """Sets the change_id of this ResourceChangeData.

        The change ID. Valid and unique within the specified resource only.

        :param change_id: The change_id of this ResourceChangeData.
        :type change_id: str
        """
        if change_id is None:
            raise ValueError("Invalid value for `change_id`, must not be `None`")

        self._change_id = change_id
