/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Facet from './Facet';
import Table from './Table';

/**
 * The QueryResponse model module.
 * @module model/QueryResponse
 * @version 2018-09-01-preview
 */
class QueryResponse {
    /**
     * Constructs a new <code>QueryResponse</code>.
     * Query result.
     * @alias module:model/QueryResponse
     * @param count {Number} Number of records returned in the current response. In the case of paging, this is the number of records in the current page.
     * @param data {module:model/Table} 
     * @param resultTruncated {module:model/QueryResponse.ResultTruncatedEnum} Indicates whether the query results are truncated.
     * @param totalRecords {Number} Number of total records matching the query.
     */
    constructor(count, data, resultTruncated, totalRecords) { 
        
        QueryResponse.initialize(this, count, data, resultTruncated, totalRecords);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, count, data, resultTruncated, totalRecords) { 
        obj['count'] = count;
        obj['data'] = data;
        obj['resultTruncated'] = resultTruncated;
        obj['totalRecords'] = totalRecords;
    }

    /**
     * Constructs a <code>QueryResponse</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryResponse} obj Optional instance to populate.
     * @return {module:model/QueryResponse} The populated <code>QueryResponse</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryResponse();

            if (data.hasOwnProperty('$skipToken')) {
                obj['$skipToken'] = ApiClient.convertToType(data['$skipToken'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = Table.constructFromObject(data['data']);
            }
            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], [Facet]);
            }
            if (data.hasOwnProperty('resultTruncated')) {
                obj['resultTruncated'] = ApiClient.convertToType(data['resultTruncated'], 'String');
            }
            if (data.hasOwnProperty('totalRecords')) {
                obj['totalRecords'] = ApiClient.convertToType(data['totalRecords'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryResponse</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryResponse</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryResponse.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['$skipToken'] && !(typeof data['$skipToken'] === 'string' || data['$skipToken'] instanceof String)) {
            throw new Error("Expected the field `$skipToken` to be a primitive type in the JSON string but got " + data['$skipToken']);
        }
        // validate the optional field `data`
        if (data['data']) { // data not null
          Table.validateJSON(data['data']);
        }
        if (data['facets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facets'])) {
                throw new Error("Expected the field `facets` to be an array in the JSON data but got " + data['facets']);
            }
            // validate the optional field `facets` (array)
            for (const item of data['facets']) {
                Facet.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['resultTruncated'] && !(typeof data['resultTruncated'] === 'string' || data['resultTruncated'] instanceof String)) {
            throw new Error("Expected the field `resultTruncated` to be a primitive type in the JSON string but got " + data['resultTruncated']);
        }

        return true;
    }


}

QueryResponse.RequiredProperties = ["count", "data", "resultTruncated", "totalRecords"];

/**
 * When present, the value can be passed to a subsequent query call (together with the same query and subscriptions used in the current request) to retrieve the next page of data.
 * @member {String} $skipToken
 */
QueryResponse.prototype['$skipToken'] = undefined;

/**
 * Number of records returned in the current response. In the case of paging, this is the number of records in the current page.
 * @member {Number} count
 */
QueryResponse.prototype['count'] = undefined;

/**
 * @member {module:model/Table} data
 */
QueryResponse.prototype['data'] = undefined;

/**
 * Query facets.
 * @member {Array.<module:model/Facet>} facets
 */
QueryResponse.prototype['facets'] = undefined;

/**
 * Indicates whether the query results are truncated.
 * @member {module:model/QueryResponse.ResultTruncatedEnum} resultTruncated
 */
QueryResponse.prototype['resultTruncated'] = undefined;

/**
 * Number of total records matching the query.
 * @member {Number} totalRecords
 */
QueryResponse.prototype['totalRecords'] = undefined;





/**
 * Allowed values for the <code>resultTruncated</code> property.
 * @enum {String}
 * @readonly
 */
QueryResponse['ResultTruncatedEnum'] = {

    /**
     * value: "true"
     * @const
     */
    "true": "true",

    /**
     * value: "false"
     * @const
     */
    "false": "false"
};



export default QueryResponse;

