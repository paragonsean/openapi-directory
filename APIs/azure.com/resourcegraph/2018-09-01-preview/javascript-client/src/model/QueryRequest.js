/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import FacetRequest from './FacetRequest';
import QueryRequestOptions from './QueryRequestOptions';

/**
 * The QueryRequest model module.
 * @module model/QueryRequest
 * @version 2018-09-01-preview
 */
class QueryRequest {
    /**
     * Constructs a new <code>QueryRequest</code>.
     * Describes a query to be executed.
     * @alias module:model/QueryRequest
     * @param query {String} The resources query.
     * @param subscriptions {Array.<String>} Azure subscriptions against which to execute the query.
     */
    constructor(query, subscriptions) { 
        
        QueryRequest.initialize(this, query, subscriptions);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, query, subscriptions) { 
        obj['query'] = query;
        obj['subscriptions'] = subscriptions;
    }

    /**
     * Constructs a <code>QueryRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/QueryRequest} obj Optional instance to populate.
     * @return {module:model/QueryRequest} The populated <code>QueryRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new QueryRequest();

            if (data.hasOwnProperty('facets')) {
                obj['facets'] = ApiClient.convertToType(data['facets'], [FacetRequest]);
            }
            if (data.hasOwnProperty('options')) {
                obj['options'] = QueryRequestOptions.constructFromObject(data['options']);
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('subscriptions')) {
                obj['subscriptions'] = ApiClient.convertToType(data['subscriptions'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>QueryRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>QueryRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of QueryRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['facets']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['facets'])) {
                throw new Error("Expected the field `facets` to be an array in the JSON data but got " + data['facets']);
            }
            // validate the optional field `facets` (array)
            for (const item of data['facets']) {
                FacetRequest.validateJSON(item);
            };
        }
        // validate the optional field `options`
        if (data['options']) { // data not null
          QueryRequestOptions.validateJSON(data['options']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subscriptions'])) {
            throw new Error("Expected the field `subscriptions` to be an array in the JSON data but got " + data['subscriptions']);
        }

        return true;
    }


}

QueryRequest.RequiredProperties = ["query", "subscriptions"];

/**
 * An array of facet requests to be computed against the query result.
 * @member {Array.<module:model/FacetRequest>} facets
 */
QueryRequest.prototype['facets'] = undefined;

/**
 * @member {module:model/QueryRequestOptions} options
 */
QueryRequest.prototype['options'] = undefined;

/**
 * The resources query.
 * @member {String} query
 */
QueryRequest.prototype['query'] = undefined;

/**
 * Azure subscriptions against which to execute the query.
 * @member {Array.<String>} subscriptions
 */
QueryRequest.prototype['subscriptions'] = undefined;






export default QueryRequest;

