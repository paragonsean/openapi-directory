/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetResult::OAIFacetResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetResult::OAIFacetResult() {
    this->initializeModel();
}

OAIFacetResult::~OAIFacetResult() {}

void OAIFacetResult::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_total_records_isSet = false;
    m_total_records_isValid = false;

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_result_type_isSet = false;
    m_result_type_isValid = false;
}

void OAIFacetResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetResult::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_total_records_isValid = ::OpenAPI::fromJsonValue(m_total_records, json[QString("totalRecords")]);
    m_total_records_isSet = !json[QString("totalRecords")].isNull() && m_total_records_isValid;

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_result_type_isValid = ::OpenAPI::fromJsonValue(m_result_type, json[QString("resultType")]);
    m_result_type_isSet = !json[QString("resultType")].isNull() && m_result_type_isValid;
}

QString OAIFacetResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetResult::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_data.isSet()) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_total_records_isSet) {
        obj.insert(QString("totalRecords"), ::OpenAPI::toJsonValue(m_total_records));
    }
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_result_type_isSet) {
        obj.insert(QString("resultType"), ::OpenAPI::toJsonValue(m_result_type));
    }
    return obj;
}

qint32 OAIFacetResult::getCount() const {
    return m_count;
}
void OAIFacetResult::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIFacetResult::is_count_Set() const{
    return m_count_isSet;
}

bool OAIFacetResult::is_count_Valid() const{
    return m_count_isValid;
}

OAITable OAIFacetResult::getData() const {
    return m_data;
}
void OAIFacetResult::setData(const OAITable &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAIFacetResult::is_data_Set() const{
    return m_data_isSet;
}

bool OAIFacetResult::is_data_Valid() const{
    return m_data_isValid;
}

qint64 OAIFacetResult::getTotalRecords() const {
    return m_total_records;
}
void OAIFacetResult::setTotalRecords(const qint64 &total_records) {
    m_total_records = total_records;
    m_total_records_isSet = true;
}

bool OAIFacetResult::is_total_records_Set() const{
    return m_total_records_isSet;
}

bool OAIFacetResult::is_total_records_Valid() const{
    return m_total_records_isValid;
}

QString OAIFacetResult::getExpression() const {
    return m_expression;
}
void OAIFacetResult::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIFacetResult::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIFacetResult::is_expression_Valid() const{
    return m_expression_isValid;
}

QString OAIFacetResult::getResultType() const {
    return m_result_type;
}
void OAIFacetResult::setResultType(const QString &result_type) {
    m_result_type = result_type;
    m_result_type_isSet = true;
}

bool OAIFacetResult::is_result_type_Set() const{
    return m_result_type_isSet;
}

bool OAIFacetResult::is_result_type_Valid() const{
    return m_result_type_isValid;
}

bool OAIFacetResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_records_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_data_isValid && m_total_records_isValid && m_expression_isValid && m_result_type_isValid && true;
}

} // namespace OpenAPI
