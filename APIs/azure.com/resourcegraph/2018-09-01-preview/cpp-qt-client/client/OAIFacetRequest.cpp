/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFacetRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFacetRequest::OAIFacetRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFacetRequest::OAIFacetRequest() {
    this->initializeModel();
}

OAIFacetRequest::~OAIFacetRequest() {}

void OAIFacetRequest::initializeModel() {

    m_expression_isSet = false;
    m_expression_isValid = false;

    m_options_isSet = false;
    m_options_isValid = false;
}

void OAIFacetRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFacetRequest::fromJsonObject(QJsonObject json) {

    m_expression_isValid = ::OpenAPI::fromJsonValue(m_expression, json[QString("expression")]);
    m_expression_isSet = !json[QString("expression")].isNull() && m_expression_isValid;

    m_options_isValid = ::OpenAPI::fromJsonValue(m_options, json[QString("options")]);
    m_options_isSet = !json[QString("options")].isNull() && m_options_isValid;
}

QString OAIFacetRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFacetRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_expression_isSet) {
        obj.insert(QString("expression"), ::OpenAPI::toJsonValue(m_expression));
    }
    if (m_options.isSet()) {
        obj.insert(QString("options"), ::OpenAPI::toJsonValue(m_options));
    }
    return obj;
}

QString OAIFacetRequest::getExpression() const {
    return m_expression;
}
void OAIFacetRequest::setExpression(const QString &expression) {
    m_expression = expression;
    m_expression_isSet = true;
}

bool OAIFacetRequest::is_expression_Set() const{
    return m_expression_isSet;
}

bool OAIFacetRequest::is_expression_Valid() const{
    return m_expression_isValid;
}

OAIFacetRequestOptions OAIFacetRequest::getOptions() const {
    return m_options;
}
void OAIFacetRequest::setOptions(const OAIFacetRequestOptions &options) {
    m_options = options;
    m_options_isSet = true;
}

bool OAIFacetRequest::is_options_Set() const{
    return m_options_isSet;
}

bool OAIFacetRequest::is_options_Valid() const{
    return m_options_isValid;
}

bool OAIFacetRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_expression_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_options.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFacetRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_expression_isValid && true;
}

} // namespace OpenAPI
