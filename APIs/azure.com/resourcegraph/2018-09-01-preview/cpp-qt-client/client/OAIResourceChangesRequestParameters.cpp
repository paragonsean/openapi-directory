/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceChangesRequestParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceChangesRequestParameters::OAIResourceChangesRequestParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceChangesRequestParameters::OAIResourceChangesRequestParameters() {
    this->initializeModel();
}

OAIResourceChangesRequestParameters::~OAIResourceChangesRequestParameters() {}

void OAIResourceChangesRequestParameters::initializeModel() {

    m_skip_token_isSet = false;
    m_skip_token_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_resource_id_isSet = false;
    m_resource_id_isValid = false;
}

void OAIResourceChangesRequestParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceChangesRequestParameters::fromJsonObject(QJsonObject json) {

    m_skip_token_isValid = ::OpenAPI::fromJsonValue(m_skip_token, json[QString("$skipToken")]);
    m_skip_token_isSet = !json[QString("$skipToken")].isNull() && m_skip_token_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("$top")]);
    m_top_isSet = !json[QString("$top")].isNull() && m_top_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_resource_id_isValid = ::OpenAPI::fromJsonValue(m_resource_id, json[QString("resourceId")]);
    m_resource_id_isSet = !json[QString("resourceId")].isNull() && m_resource_id_isValid;
}

QString OAIResourceChangesRequestParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceChangesRequestParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_skip_token_isSet) {
        obj.insert(QString("$skipToken"), ::OpenAPI::toJsonValue(m_skip_token));
    }
    if (m_top_isSet) {
        obj.insert(QString("$top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_interval.isSet()) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_resource_id_isSet) {
        obj.insert(QString("resourceId"), ::OpenAPI::toJsonValue(m_resource_id));
    }
    return obj;
}

QString OAIResourceChangesRequestParameters::getSkipToken() const {
    return m_skip_token;
}
void OAIResourceChangesRequestParameters::setSkipToken(const QString &skip_token) {
    m_skip_token = skip_token;
    m_skip_token_isSet = true;
}

bool OAIResourceChangesRequestParameters::is_skip_token_Set() const{
    return m_skip_token_isSet;
}

bool OAIResourceChangesRequestParameters::is_skip_token_Valid() const{
    return m_skip_token_isValid;
}

qint32 OAIResourceChangesRequestParameters::getTop() const {
    return m_top;
}
void OAIResourceChangesRequestParameters::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAIResourceChangesRequestParameters::is_top_Set() const{
    return m_top_isSet;
}

bool OAIResourceChangesRequestParameters::is_top_Valid() const{
    return m_top_isValid;
}

OAIDateTimeInterval OAIResourceChangesRequestParameters::getInterval() const {
    return m_interval;
}
void OAIResourceChangesRequestParameters::setInterval(const OAIDateTimeInterval &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIResourceChangesRequestParameters::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIResourceChangesRequestParameters::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIResourceChangesRequestParameters::getResourceId() const {
    return m_resource_id;
}
void OAIResourceChangesRequestParameters::setResourceId(const QString &resource_id) {
    m_resource_id = resource_id;
    m_resource_id_isSet = true;
}

bool OAIResourceChangesRequestParameters::is_resource_id_Set() const{
    return m_resource_id_isSet;
}

bool OAIResourceChangesRequestParameters::is_resource_id_Valid() const{
    return m_resource_id_isValid;
}

bool OAIResourceChangesRequestParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_skip_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceChangesRequestParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_interval_isValid && m_resource_id_isValid && true;
}

} // namespace OpenAPI
