/**
 * Azure Resource Graph
 * Azure Resource Graph API Reference
 *
 * The version of the OpenAPI document: 2018-09-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIResourceChangeList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIResourceChangeList::OAIResourceChangeList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIResourceChangeList::OAIResourceChangeList() {
    this->initializeModel();
}

OAIResourceChangeList::~OAIResourceChangeList() {}

void OAIResourceChangeList::initializeModel() {

    m_skip_token_isSet = false;
    m_skip_token_isValid = false;

    m_changes_isSet = false;
    m_changes_isValid = false;
}

void OAIResourceChangeList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIResourceChangeList::fromJsonObject(QJsonObject json) {

    m_skip_token_isValid = ::OpenAPI::fromJsonValue(m_skip_token, json[QString("$skipToken")]);
    m_skip_token_isSet = !json[QString("$skipToken")].isNull() && m_skip_token_isValid;

    m_changes_isValid = ::OpenAPI::fromJsonValue(m_changes, json[QString("changes")]);
    m_changes_isSet = !json[QString("changes")].isNull() && m_changes_isValid;
}

QString OAIResourceChangeList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIResourceChangeList::asJsonObject() const {
    QJsonObject obj;
    if (m_skip_token_isSet) {
        obj.insert(QString("$skipToken"), ::OpenAPI::toJsonValue(m_skip_token));
    }
    if (m_changes.size() > 0) {
        obj.insert(QString("changes"), ::OpenAPI::toJsonValue(m_changes));
    }
    return obj;
}

OAIObject OAIResourceChangeList::getSkipToken() const {
    return m_skip_token;
}
void OAIResourceChangeList::setSkipToken(const OAIObject &skip_token) {
    m_skip_token = skip_token;
    m_skip_token_isSet = true;
}

bool OAIResourceChangeList::is_skip_token_Set() const{
    return m_skip_token_isSet;
}

bool OAIResourceChangeList::is_skip_token_Valid() const{
    return m_skip_token_isValid;
}

QList<OAIResourceChangeData> OAIResourceChangeList::getChanges() const {
    return m_changes;
}
void OAIResourceChangeList::setChanges(const QList<OAIResourceChangeData> &changes) {
    m_changes = changes;
    m_changes_isSet = true;
}

bool OAIResourceChangeList::is_changes_Set() const{
    return m_changes_isSet;
}

bool OAIResourceChangeList::is_changes_Valid() const{
    return m_changes_isValid;
}

bool OAIResourceChangeList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_skip_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIResourceChangeList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
