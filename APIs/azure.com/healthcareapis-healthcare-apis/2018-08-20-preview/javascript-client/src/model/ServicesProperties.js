/**
 * HealthcareApisClient
 * Use this API to manage Microsoft HealthcareApis services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-08-20-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ServiceAccessPolicyEntry from './ServiceAccessPolicyEntry';
import ServiceAuthenticationConfigurationInfo from './ServiceAuthenticationConfigurationInfo';
import ServiceCorsConfigurationInfo from './ServiceCorsConfigurationInfo';
import ServiceCosmosDbConfigurationInfo from './ServiceCosmosDbConfigurationInfo';

/**
 * The ServicesProperties model module.
 * @module model/ServicesProperties
 * @version 2018-08-20-preview
 */
class ServicesProperties {
    /**
     * Constructs a new <code>ServicesProperties</code>.
     * The properties of a service instance.
     * @alias module:model/ServicesProperties
     * @param accessPolicies {Array.<module:model/ServiceAccessPolicyEntry>} The access policies of the service instance.
     */
    constructor(accessPolicies) { 
        
        ServicesProperties.initialize(this, accessPolicies);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, accessPolicies) { 
        obj['accessPolicies'] = accessPolicies;
    }

    /**
     * Constructs a <code>ServicesProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServicesProperties} obj Optional instance to populate.
     * @return {module:model/ServicesProperties} The populated <code>ServicesProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServicesProperties();

            if (data.hasOwnProperty('accessPolicies')) {
                obj['accessPolicies'] = ApiClient.convertToType(data['accessPolicies'], [ServiceAccessPolicyEntry]);
            }
            if (data.hasOwnProperty('authenticationConfiguration')) {
                obj['authenticationConfiguration'] = ServiceAuthenticationConfigurationInfo.constructFromObject(data['authenticationConfiguration']);
            }
            if (data.hasOwnProperty('corsConfiguration')) {
                obj['corsConfiguration'] = ServiceCorsConfigurationInfo.constructFromObject(data['corsConfiguration']);
            }
            if (data.hasOwnProperty('cosmosDbConfiguration')) {
                obj['cosmosDbConfiguration'] = ServiceCosmosDbConfigurationInfo.constructFromObject(data['cosmosDbConfiguration']);
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServicesProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServicesProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServicesProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['accessPolicies']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['accessPolicies'])) {
                throw new Error("Expected the field `accessPolicies` to be an array in the JSON data but got " + data['accessPolicies']);
            }
            // validate the optional field `accessPolicies` (array)
            for (const item of data['accessPolicies']) {
                ServiceAccessPolicyEntry.validateJSON(item);
            };
        }
        // validate the optional field `authenticationConfiguration`
        if (data['authenticationConfiguration']) { // data not null
          ServiceAuthenticationConfigurationInfo.validateJSON(data['authenticationConfiguration']);
        }
        // validate the optional field `corsConfiguration`
        if (data['corsConfiguration']) { // data not null
          ServiceCorsConfigurationInfo.validateJSON(data['corsConfiguration']);
        }
        // validate the optional field `cosmosDbConfiguration`
        if (data['cosmosDbConfiguration']) { // data not null
          ServiceCosmosDbConfigurationInfo.validateJSON(data['cosmosDbConfiguration']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }

        return true;
    }


}

ServicesProperties.RequiredProperties = ["accessPolicies"];

/**
 * The access policies of the service instance.
 * @member {Array.<module:model/ServiceAccessPolicyEntry>} accessPolicies
 */
ServicesProperties.prototype['accessPolicies'] = undefined;

/**
 * @member {module:model/ServiceAuthenticationConfigurationInfo} authenticationConfiguration
 */
ServicesProperties.prototype['authenticationConfiguration'] = undefined;

/**
 * @member {module:model/ServiceCorsConfigurationInfo} corsConfiguration
 */
ServicesProperties.prototype['corsConfiguration'] = undefined;

/**
 * @member {module:model/ServiceCosmosDbConfigurationInfo} cosmosDbConfiguration
 */
ServicesProperties.prototype['cosmosDbConfiguration'] = undefined;

/**
 * The provisioning state.
 * @member {module:model/ServicesProperties.ProvisioningStateEnum} provisioningState
 */
ServicesProperties.prototype['provisioningState'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ServicesProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Verifying"
     * @const
     */
    "Verifying": "Verifying",

    /**
     * value: "Updating"
     * @const
     */
    "Updating": "Updating",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed",

    /**
     * value: "Canceled"
     * @const
     */
    "Canceled": "Canceled",

    /**
     * value: "Deprovisioned"
     * @const
     */
    "Deprovisioned": "Deprovisioned"
};



export default ServicesProperties;

