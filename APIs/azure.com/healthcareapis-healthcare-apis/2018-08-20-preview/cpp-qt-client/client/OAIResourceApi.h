/**
 * HealthcareApisClient
 * Use this API to manage Microsoft HealthcareApis services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-08-20-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIResourceApi_H
#define OAI_OAIResourceApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIErrorDetails.h"
#include "OAIOperationResultsDescription.h"
#include "OAIServicesDescription.h"
#include "OAIServicesPatchDescription.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIResourceApi : public QObject {
    Q_OBJECT

public:
    OAIResourceApi(const int timeOut = 0);
    ~OAIResourceApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  location_name QString [required]
    * @param[in]  operation_result_id QString [required]
    */
    virtual void operationResultsGet(const QString &api_version, const QString &subscription_id, const QString &location_name, const QString &operation_result_id);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  service_description OAIServicesDescription [required]
    */
    virtual void servicesCreateOrUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIServicesDescription &service_description);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void servicesDelete(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    */
    virtual void servicesGet(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name);

    /**
    * @param[in]  api_version QString [required]
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  resource_name QString [required]
    * @param[in]  service_patch_description OAIServicesPatchDescription [required]
    */
    virtual void servicesUpdate(const QString &api_version, const QString &subscription_id, const QString &resource_group_name, const QString &resource_name, const OAIServicesPatchDescription &service_patch_description);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void operationResultsGetCallback(OAIHttpRequestWorker *worker);
    void servicesCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void servicesDeleteCallback(OAIHttpRequestWorker *worker);
    void servicesGetCallback(OAIHttpRequestWorker *worker);
    void servicesUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void operationResultsGetSignal(OAIOperationResultsDescription summary);
    void servicesCreateOrUpdateSignal(OAIServicesDescription summary);
    void servicesDeleteSignal();
    void servicesGetSignal(OAIServicesDescription summary);
    void servicesUpdateSignal(OAIServicesDescription summary);


    void operationResultsGetSignalFull(OAIHttpRequestWorker *worker, OAIOperationResultsDescription summary);
    void servicesCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServicesDescription summary);
    void servicesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void servicesGetSignalFull(OAIHttpRequestWorker *worker, OAIServicesDescription summary);
    void servicesUpdateSignalFull(OAIHttpRequestWorker *worker, OAIServicesDescription summary);

    Q_DECL_DEPRECATED_X("Use operationResultsGetSignalError() instead")
    void operationResultsGetSignalE(OAIOperationResultsDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void operationResultsGetSignalError(OAIOperationResultsDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCreateOrUpdateSignalError() instead")
    void servicesCreateOrUpdateSignalE(OAIServicesDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateOrUpdateSignalError(OAIServicesDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalError() instead")
    void servicesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalError() instead")
    void servicesGetSignalE(OAIServicesDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalError(OAIServicesDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalError() instead")
    void servicesUpdateSignalE(OAIServicesDescription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalError(OAIServicesDescription summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use operationResultsGetSignalErrorFull() instead")
    void operationResultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void operationResultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesCreateOrUpdateSignalErrorFull() instead")
    void servicesCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesDeleteSignalErrorFull() instead")
    void servicesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesGetSignalErrorFull() instead")
    void servicesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use servicesUpdateSignalErrorFull() instead")
    void servicesUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void servicesUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
