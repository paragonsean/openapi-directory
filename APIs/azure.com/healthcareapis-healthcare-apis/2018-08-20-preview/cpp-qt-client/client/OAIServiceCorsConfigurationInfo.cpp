/**
 * HealthcareApisClient
 * Use this API to manage Microsoft HealthcareApis services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-08-20-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceCorsConfigurationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceCorsConfigurationInfo::OAIServiceCorsConfigurationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceCorsConfigurationInfo::OAIServiceCorsConfigurationInfo() {
    this->initializeModel();
}

OAIServiceCorsConfigurationInfo::~OAIServiceCorsConfigurationInfo() {}

void OAIServiceCorsConfigurationInfo::initializeModel() {

    m_allow_credentials_isSet = false;
    m_allow_credentials_isValid = false;

    m_headers_isSet = false;
    m_headers_isValid = false;

    m_max_age_isSet = false;
    m_max_age_isValid = false;

    m_methods_isSet = false;
    m_methods_isValid = false;

    m_origins_isSet = false;
    m_origins_isValid = false;
}

void OAIServiceCorsConfigurationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceCorsConfigurationInfo::fromJsonObject(QJsonObject json) {

    m_allow_credentials_isValid = ::OpenAPI::fromJsonValue(m_allow_credentials, json[QString("allowCredentials")]);
    m_allow_credentials_isSet = !json[QString("allowCredentials")].isNull() && m_allow_credentials_isValid;

    m_headers_isValid = ::OpenAPI::fromJsonValue(m_headers, json[QString("headers")]);
    m_headers_isSet = !json[QString("headers")].isNull() && m_headers_isValid;

    m_max_age_isValid = ::OpenAPI::fromJsonValue(m_max_age, json[QString("maxAge")]);
    m_max_age_isSet = !json[QString("maxAge")].isNull() && m_max_age_isValid;

    m_methods_isValid = ::OpenAPI::fromJsonValue(m_methods, json[QString("methods")]);
    m_methods_isSet = !json[QString("methods")].isNull() && m_methods_isValid;

    m_origins_isValid = ::OpenAPI::fromJsonValue(m_origins, json[QString("origins")]);
    m_origins_isSet = !json[QString("origins")].isNull() && m_origins_isValid;
}

QString OAIServiceCorsConfigurationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceCorsConfigurationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_credentials_isSet) {
        obj.insert(QString("allowCredentials"), ::OpenAPI::toJsonValue(m_allow_credentials));
    }
    if (m_headers.size() > 0) {
        obj.insert(QString("headers"), ::OpenAPI::toJsonValue(m_headers));
    }
    if (m_max_age_isSet) {
        obj.insert(QString("maxAge"), ::OpenAPI::toJsonValue(m_max_age));
    }
    if (m_methods.size() > 0) {
        obj.insert(QString("methods"), ::OpenAPI::toJsonValue(m_methods));
    }
    if (m_origins.size() > 0) {
        obj.insert(QString("origins"), ::OpenAPI::toJsonValue(m_origins));
    }
    return obj;
}

bool OAIServiceCorsConfigurationInfo::isAllowCredentials() const {
    return m_allow_credentials;
}
void OAIServiceCorsConfigurationInfo::setAllowCredentials(const bool &allow_credentials) {
    m_allow_credentials = allow_credentials;
    m_allow_credentials_isSet = true;
}

bool OAIServiceCorsConfigurationInfo::is_allow_credentials_Set() const{
    return m_allow_credentials_isSet;
}

bool OAIServiceCorsConfigurationInfo::is_allow_credentials_Valid() const{
    return m_allow_credentials_isValid;
}

QList<QString> OAIServiceCorsConfigurationInfo::getHeaders() const {
    return m_headers;
}
void OAIServiceCorsConfigurationInfo::setHeaders(const QList<QString> &headers) {
    m_headers = headers;
    m_headers_isSet = true;
}

bool OAIServiceCorsConfigurationInfo::is_headers_Set() const{
    return m_headers_isSet;
}

bool OAIServiceCorsConfigurationInfo::is_headers_Valid() const{
    return m_headers_isValid;
}

qint32 OAIServiceCorsConfigurationInfo::getMaxAge() const {
    return m_max_age;
}
void OAIServiceCorsConfigurationInfo::setMaxAge(const qint32 &max_age) {
    m_max_age = max_age;
    m_max_age_isSet = true;
}

bool OAIServiceCorsConfigurationInfo::is_max_age_Set() const{
    return m_max_age_isSet;
}

bool OAIServiceCorsConfigurationInfo::is_max_age_Valid() const{
    return m_max_age_isValid;
}

QList<QString> OAIServiceCorsConfigurationInfo::getMethods() const {
    return m_methods;
}
void OAIServiceCorsConfigurationInfo::setMethods(const QList<QString> &methods) {
    m_methods = methods;
    m_methods_isSet = true;
}

bool OAIServiceCorsConfigurationInfo::is_methods_Set() const{
    return m_methods_isSet;
}

bool OAIServiceCorsConfigurationInfo::is_methods_Valid() const{
    return m_methods_isValid;
}

QList<QString> OAIServiceCorsConfigurationInfo::getOrigins() const {
    return m_origins;
}
void OAIServiceCorsConfigurationInfo::setOrigins(const QList<QString> &origins) {
    m_origins = origins;
    m_origins_isSet = true;
}

bool OAIServiceCorsConfigurationInfo::is_origins_Set() const{
    return m_origins_isSet;
}

bool OAIServiceCorsConfigurationInfo::is_origins_Valid() const{
    return m_origins_isValid;
}

bool OAIServiceCorsConfigurationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_credentials_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_headers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_methods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_origins.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceCorsConfigurationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
