/**
 * HealthcareApisClient
 * Use this API to manage Microsoft HealthcareApis services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-08-20-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServiceAuthenticationConfigurationInfo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServiceAuthenticationConfigurationInfo::OAIServiceAuthenticationConfigurationInfo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServiceAuthenticationConfigurationInfo::OAIServiceAuthenticationConfigurationInfo() {
    this->initializeModel();
}

OAIServiceAuthenticationConfigurationInfo::~OAIServiceAuthenticationConfigurationInfo() {}

void OAIServiceAuthenticationConfigurationInfo::initializeModel() {

    m_audience_isSet = false;
    m_audience_isValid = false;

    m_authority_isSet = false;
    m_authority_isValid = false;

    m_smart_proxy_enabled_isSet = false;
    m_smart_proxy_enabled_isValid = false;
}

void OAIServiceAuthenticationConfigurationInfo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServiceAuthenticationConfigurationInfo::fromJsonObject(QJsonObject json) {

    m_audience_isValid = ::OpenAPI::fromJsonValue(m_audience, json[QString("audience")]);
    m_audience_isSet = !json[QString("audience")].isNull() && m_audience_isValid;

    m_authority_isValid = ::OpenAPI::fromJsonValue(m_authority, json[QString("authority")]);
    m_authority_isSet = !json[QString("authority")].isNull() && m_authority_isValid;

    m_smart_proxy_enabled_isValid = ::OpenAPI::fromJsonValue(m_smart_proxy_enabled, json[QString("smartProxyEnabled")]);
    m_smart_proxy_enabled_isSet = !json[QString("smartProxyEnabled")].isNull() && m_smart_proxy_enabled_isValid;
}

QString OAIServiceAuthenticationConfigurationInfo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServiceAuthenticationConfigurationInfo::asJsonObject() const {
    QJsonObject obj;
    if (m_audience_isSet) {
        obj.insert(QString("audience"), ::OpenAPI::toJsonValue(m_audience));
    }
    if (m_authority_isSet) {
        obj.insert(QString("authority"), ::OpenAPI::toJsonValue(m_authority));
    }
    if (m_smart_proxy_enabled_isSet) {
        obj.insert(QString("smartProxyEnabled"), ::OpenAPI::toJsonValue(m_smart_proxy_enabled));
    }
    return obj;
}

QString OAIServiceAuthenticationConfigurationInfo::getAudience() const {
    return m_audience;
}
void OAIServiceAuthenticationConfigurationInfo::setAudience(const QString &audience) {
    m_audience = audience;
    m_audience_isSet = true;
}

bool OAIServiceAuthenticationConfigurationInfo::is_audience_Set() const{
    return m_audience_isSet;
}

bool OAIServiceAuthenticationConfigurationInfo::is_audience_Valid() const{
    return m_audience_isValid;
}

QString OAIServiceAuthenticationConfigurationInfo::getAuthority() const {
    return m_authority;
}
void OAIServiceAuthenticationConfigurationInfo::setAuthority(const QString &authority) {
    m_authority = authority;
    m_authority_isSet = true;
}

bool OAIServiceAuthenticationConfigurationInfo::is_authority_Set() const{
    return m_authority_isSet;
}

bool OAIServiceAuthenticationConfigurationInfo::is_authority_Valid() const{
    return m_authority_isValid;
}

bool OAIServiceAuthenticationConfigurationInfo::isSmartProxyEnabled() const {
    return m_smart_proxy_enabled;
}
void OAIServiceAuthenticationConfigurationInfo::setSmartProxyEnabled(const bool &smart_proxy_enabled) {
    m_smart_proxy_enabled = smart_proxy_enabled;
    m_smart_proxy_enabled_isSet = true;
}

bool OAIServiceAuthenticationConfigurationInfo::is_smart_proxy_enabled_Set() const{
    return m_smart_proxy_enabled_isSet;
}

bool OAIServiceAuthenticationConfigurationInfo::is_smart_proxy_enabled_Valid() const{
    return m_smart_proxy_enabled_isValid;
}

bool OAIServiceAuthenticationConfigurationInfo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audience_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authority_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_smart_proxy_enabled_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServiceAuthenticationConfigurationInfo::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
