/*
 * HealthcareApisClient
 * Use this API to manage Microsoft HealthcareApis services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2018-08-20-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ServiceAccessPolicyEntry;
import org.openapitools.client.model.ServiceAuthenticationConfigurationInfo;
import org.openapitools.client.model.ServiceCorsConfigurationInfo;
import org.openapitools.client.model.ServiceCosmosDbConfigurationInfo;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of a service instance.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:18:02.062739-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ServicesProperties {
  public static final String SERIALIZED_NAME_ACCESS_POLICIES = "accessPolicies";
  @SerializedName(SERIALIZED_NAME_ACCESS_POLICIES)
  private List<ServiceAccessPolicyEntry> accessPolicies = new ArrayList<>();

  public static final String SERIALIZED_NAME_AUTHENTICATION_CONFIGURATION = "authenticationConfiguration";
  @SerializedName(SERIALIZED_NAME_AUTHENTICATION_CONFIGURATION)
  private ServiceAuthenticationConfigurationInfo authenticationConfiguration;

  public static final String SERIALIZED_NAME_CORS_CONFIGURATION = "corsConfiguration";
  @SerializedName(SERIALIZED_NAME_CORS_CONFIGURATION)
  private ServiceCorsConfigurationInfo corsConfiguration;

  public static final String SERIALIZED_NAME_COSMOS_DB_CONFIGURATION = "cosmosDbConfiguration";
  @SerializedName(SERIALIZED_NAME_COSMOS_DB_CONFIGURATION)
  private ServiceCosmosDbConfigurationInfo cosmosDbConfiguration;

  /**
   * The provisioning state.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    DELETING("Deleting"),
    
    SUCCEEDED("Succeeded"),
    
    CREATING("Creating"),
    
    ACCEPTED("Accepted"),
    
    VERIFYING("Verifying"),
    
    UPDATING("Updating"),
    
    FAILED("Failed"),
    
    CANCELED("Canceled"),
    
    DEPROVISIONED("Deprovisioned");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public ServicesProperties() {
  }

  public ServicesProperties(
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.provisioningState = provisioningState;
  }

  public ServicesProperties accessPolicies(List<ServiceAccessPolicyEntry> accessPolicies) {
    this.accessPolicies = accessPolicies;
    return this;
  }

  public ServicesProperties addAccessPoliciesItem(ServiceAccessPolicyEntry accessPoliciesItem) {
    if (this.accessPolicies == null) {
      this.accessPolicies = new ArrayList<>();
    }
    this.accessPolicies.add(accessPoliciesItem);
    return this;
  }

  /**
   * The access policies of the service instance.
   * @return accessPolicies
   */
  @javax.annotation.Nonnull
  public List<ServiceAccessPolicyEntry> getAccessPolicies() {
    return accessPolicies;
  }

  public void setAccessPolicies(List<ServiceAccessPolicyEntry> accessPolicies) {
    this.accessPolicies = accessPolicies;
  }


  public ServicesProperties authenticationConfiguration(ServiceAuthenticationConfigurationInfo authenticationConfiguration) {
    this.authenticationConfiguration = authenticationConfiguration;
    return this;
  }

  /**
   * Get authenticationConfiguration
   * @return authenticationConfiguration
   */
  @javax.annotation.Nullable
  public ServiceAuthenticationConfigurationInfo getAuthenticationConfiguration() {
    return authenticationConfiguration;
  }

  public void setAuthenticationConfiguration(ServiceAuthenticationConfigurationInfo authenticationConfiguration) {
    this.authenticationConfiguration = authenticationConfiguration;
  }


  public ServicesProperties corsConfiguration(ServiceCorsConfigurationInfo corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
    return this;
  }

  /**
   * Get corsConfiguration
   * @return corsConfiguration
   */
  @javax.annotation.Nullable
  public ServiceCorsConfigurationInfo getCorsConfiguration() {
    return corsConfiguration;
  }

  public void setCorsConfiguration(ServiceCorsConfigurationInfo corsConfiguration) {
    this.corsConfiguration = corsConfiguration;
  }


  public ServicesProperties cosmosDbConfiguration(ServiceCosmosDbConfigurationInfo cosmosDbConfiguration) {
    this.cosmosDbConfiguration = cosmosDbConfiguration;
    return this;
  }

  /**
   * Get cosmosDbConfiguration
   * @return cosmosDbConfiguration
   */
  @javax.annotation.Nullable
  public ServiceCosmosDbConfigurationInfo getCosmosDbConfiguration() {
    return cosmosDbConfiguration;
  }

  public void setCosmosDbConfiguration(ServiceCosmosDbConfigurationInfo cosmosDbConfiguration) {
    this.cosmosDbConfiguration = cosmosDbConfiguration;
  }


  /**
   * The provisioning state.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServicesProperties servicesProperties = (ServicesProperties) o;
    return Objects.equals(this.accessPolicies, servicesProperties.accessPolicies) &&
        Objects.equals(this.authenticationConfiguration, servicesProperties.authenticationConfiguration) &&
        Objects.equals(this.corsConfiguration, servicesProperties.corsConfiguration) &&
        Objects.equals(this.cosmosDbConfiguration, servicesProperties.cosmosDbConfiguration) &&
        Objects.equals(this.provisioningState, servicesProperties.provisioningState);
  }

  @Override
  public int hashCode() {
    return Objects.hash(accessPolicies, authenticationConfiguration, corsConfiguration, cosmosDbConfiguration, provisioningState);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServicesProperties {\n");
    sb.append("    accessPolicies: ").append(toIndentedString(accessPolicies)).append("\n");
    sb.append("    authenticationConfiguration: ").append(toIndentedString(authenticationConfiguration)).append("\n");
    sb.append("    corsConfiguration: ").append(toIndentedString(corsConfiguration)).append("\n");
    sb.append("    cosmosDbConfiguration: ").append(toIndentedString(cosmosDbConfiguration)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("accessPolicies");
    openapiFields.add("authenticationConfiguration");
    openapiFields.add("corsConfiguration");
    openapiFields.add("cosmosDbConfiguration");
    openapiFields.add("provisioningState");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("accessPolicies");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServicesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServicesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServicesProperties is not found in the empty JSON string", ServicesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServicesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServicesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServicesProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("accessPolicies").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `accessPolicies` to be an array in the JSON string but got `%s`", jsonObj.get("accessPolicies").toString()));
      }

      JsonArray jsonArrayaccessPolicies = jsonObj.getAsJsonArray("accessPolicies");
      // validate the required field `accessPolicies` (array)
      for (int i = 0; i < jsonArrayaccessPolicies.size(); i++) {
        ServiceAccessPolicyEntry.validateJsonElement(jsonArrayaccessPolicies.get(i));
      };
      // validate the optional field `authenticationConfiguration`
      if (jsonObj.get("authenticationConfiguration") != null && !jsonObj.get("authenticationConfiguration").isJsonNull()) {
        ServiceAuthenticationConfigurationInfo.validateJsonElement(jsonObj.get("authenticationConfiguration"));
      }
      // validate the optional field `corsConfiguration`
      if (jsonObj.get("corsConfiguration") != null && !jsonObj.get("corsConfiguration").isJsonNull()) {
        ServiceCorsConfigurationInfo.validateJsonElement(jsonObj.get("corsConfiguration"));
      }
      // validate the optional field `cosmosDbConfiguration`
      if (jsonObj.get("cosmosDbConfiguration") != null && !jsonObj.get("cosmosDbConfiguration").isJsonNull()) {
        ServiceCosmosDbConfigurationInfo.validateJsonElement(jsonObj.get("cosmosDbConfiguration"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServicesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServicesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServicesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServicesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ServicesProperties>() {
           @Override
           public void write(JsonWriter out, ServicesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServicesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServicesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServicesProperties
   * @throws IOException if the JSON string is invalid with respect to ServicesProperties
   */
  public static ServicesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServicesProperties.class);
  }

  /**
   * Convert an instance of ServicesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

