# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.service_access_policy_entry import ServiceAccessPolicyEntry
from openapi_server.models.service_authentication_configuration_info import ServiceAuthenticationConfigurationInfo
from openapi_server.models.service_cors_configuration_info import ServiceCorsConfigurationInfo
from openapi_server.models.service_cosmos_db_configuration_info import ServiceCosmosDbConfigurationInfo
from openapi_server import util


class ServicesProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, access_policies: List[ServiceAccessPolicyEntry]=None, authentication_configuration: ServiceAuthenticationConfigurationInfo=None, cors_configuration: ServiceCorsConfigurationInfo=None, cosmos_db_configuration: ServiceCosmosDbConfigurationInfo=None, provisioning_state: str=None):
        """ServicesProperties - a model defined in OpenAPI

        :param access_policies: The access_policies of this ServicesProperties.
        :param authentication_configuration: The authentication_configuration of this ServicesProperties.
        :param cors_configuration: The cors_configuration of this ServicesProperties.
        :param cosmos_db_configuration: The cosmos_db_configuration of this ServicesProperties.
        :param provisioning_state: The provisioning_state of this ServicesProperties.
        """
        self.openapi_types = {
            'access_policies': List[ServiceAccessPolicyEntry],
            'authentication_configuration': ServiceAuthenticationConfigurationInfo,
            'cors_configuration': ServiceCorsConfigurationInfo,
            'cosmos_db_configuration': ServiceCosmosDbConfigurationInfo,
            'provisioning_state': str
        }

        self.attribute_map = {
            'access_policies': 'accessPolicies',
            'authentication_configuration': 'authenticationConfiguration',
            'cors_configuration': 'corsConfiguration',
            'cosmos_db_configuration': 'cosmosDbConfiguration',
            'provisioning_state': 'provisioningState'
        }

        self._access_policies = access_policies
        self._authentication_configuration = authentication_configuration
        self._cors_configuration = cors_configuration
        self._cosmos_db_configuration = cosmos_db_configuration
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServicesProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServicesProperties of this ServicesProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def access_policies(self):
        """Gets the access_policies of this ServicesProperties.

        The access policies of the service instance.

        :return: The access_policies of this ServicesProperties.
        :rtype: List[ServiceAccessPolicyEntry]
        """
        return self._access_policies

    @access_policies.setter
    def access_policies(self, access_policies):
        """Sets the access_policies of this ServicesProperties.

        The access policies of the service instance.

        :param access_policies: The access_policies of this ServicesProperties.
        :type access_policies: List[ServiceAccessPolicyEntry]
        """
        if access_policies is None:
            raise ValueError("Invalid value for `access_policies`, must not be `None`")
        if access_policies is not None and len(access_policies) < 1:
            raise ValueError("Invalid value for `access_policies`, number of items must be greater than or equal to `1`")

        self._access_policies = access_policies

    @property
    def authentication_configuration(self):
        """Gets the authentication_configuration of this ServicesProperties.


        :return: The authentication_configuration of this ServicesProperties.
        :rtype: ServiceAuthenticationConfigurationInfo
        """
        return self._authentication_configuration

    @authentication_configuration.setter
    def authentication_configuration(self, authentication_configuration):
        """Sets the authentication_configuration of this ServicesProperties.


        :param authentication_configuration: The authentication_configuration of this ServicesProperties.
        :type authentication_configuration: ServiceAuthenticationConfigurationInfo
        """

        self._authentication_configuration = authentication_configuration

    @property
    def cors_configuration(self):
        """Gets the cors_configuration of this ServicesProperties.


        :return: The cors_configuration of this ServicesProperties.
        :rtype: ServiceCorsConfigurationInfo
        """
        return self._cors_configuration

    @cors_configuration.setter
    def cors_configuration(self, cors_configuration):
        """Sets the cors_configuration of this ServicesProperties.


        :param cors_configuration: The cors_configuration of this ServicesProperties.
        :type cors_configuration: ServiceCorsConfigurationInfo
        """

        self._cors_configuration = cors_configuration

    @property
    def cosmos_db_configuration(self):
        """Gets the cosmos_db_configuration of this ServicesProperties.


        :return: The cosmos_db_configuration of this ServicesProperties.
        :rtype: ServiceCosmosDbConfigurationInfo
        """
        return self._cosmos_db_configuration

    @cosmos_db_configuration.setter
    def cosmos_db_configuration(self, cosmos_db_configuration):
        """Sets the cosmos_db_configuration of this ServicesProperties.


        :param cosmos_db_configuration: The cosmos_db_configuration of this ServicesProperties.
        :type cosmos_db_configuration: ServiceCosmosDbConfigurationInfo
        """

        self._cosmos_db_configuration = cosmos_db_configuration

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ServicesProperties.

        The provisioning state.

        :return: The provisioning_state of this ServicesProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ServicesProperties.

        The provisioning state.

        :param provisioning_state: The provisioning_state of this ServicesProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Deleting", "Succeeded", "Creating", "Accepted", "Verifying", "Updating", "Failed", "Canceled", "Deprovisioned"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
