# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceCosmosDbConfigurationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, offer_throughput: int=None):
        """ServiceCosmosDbConfigurationInfo - a model defined in OpenAPI

        :param offer_throughput: The offer_throughput of this ServiceCosmosDbConfigurationInfo.
        """
        self.openapi_types = {
            'offer_throughput': int
        }

        self.attribute_map = {
            'offer_throughput': 'offerThroughput'
        }

        self._offer_throughput = offer_throughput

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceCosmosDbConfigurationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceCosmosDbConfigurationInfo of this ServiceCosmosDbConfigurationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def offer_throughput(self):
        """Gets the offer_throughput of this ServiceCosmosDbConfigurationInfo.

        The provisioned throughput for the backing database.

        :return: The offer_throughput of this ServiceCosmosDbConfigurationInfo.
        :rtype: int
        """
        return self._offer_throughput

    @offer_throughput.setter
    def offer_throughput(self, offer_throughput):
        """Sets the offer_throughput of this ServiceCosmosDbConfigurationInfo.

        The provisioned throughput for the backing database.

        :param offer_throughput: The offer_throughput of this ServiceCosmosDbConfigurationInfo.
        :type offer_throughput: int
        """
        if offer_throughput is not None and offer_throughput > 10000:
            raise ValueError("Invalid value for `offer_throughput`, must be a value less than or equal to `10000`")
        if offer_throughput is not None and offer_throughput < 400:
            raise ValueError("Invalid value for `offer_throughput`, must be a value greater than or equal to `400`")

        self._offer_throughput = offer_throughput
