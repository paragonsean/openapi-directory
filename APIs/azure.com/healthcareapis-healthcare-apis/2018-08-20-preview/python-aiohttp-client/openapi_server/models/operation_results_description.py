# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class OperationResultsDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, properties: object=None, start_time: str=None, status: str=None):
        """OperationResultsDescription - a model defined in OpenAPI

        :param id: The id of this OperationResultsDescription.
        :param name: The name of this OperationResultsDescription.
        :param properties: The properties of this OperationResultsDescription.
        :param start_time: The start_time of this OperationResultsDescription.
        :param status: The status of this OperationResultsDescription.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'properties': object,
            'start_time': str,
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'properties': 'properties',
            'start_time': 'startTime',
            'status': 'status'
        }

        self._id = id
        self._name = name
        self._properties = properties
        self._start_time = start_time
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OperationResultsDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OperationResultsDescription of this OperationResultsDescription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this OperationResultsDescription.

        The ID of the operation returned.

        :return: The id of this OperationResultsDescription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OperationResultsDescription.

        The ID of the operation returned.

        :param id: The id of this OperationResultsDescription.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this OperationResultsDescription.

        The name of the operation result.

        :return: The name of this OperationResultsDescription.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this OperationResultsDescription.

        The name of the operation result.

        :param name: The name of this OperationResultsDescription.
        :type name: str
        """

        self._name = name

    @property
    def properties(self):
        """Gets the properties of this OperationResultsDescription.

        Additional properties of the operation result.

        :return: The properties of this OperationResultsDescription.
        :rtype: object
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OperationResultsDescription.

        Additional properties of the operation result.

        :param properties: The properties of this OperationResultsDescription.
        :type properties: object
        """

        self._properties = properties

    @property
    def start_time(self):
        """Gets the start_time of this OperationResultsDescription.

        The time that the operation was started.

        :return: The start_time of this OperationResultsDescription.
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this OperationResultsDescription.

        The time that the operation was started.

        :param start_time: The start_time of this OperationResultsDescription.
        :type start_time: str
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this OperationResultsDescription.

        The status of the operation being performed.

        :return: The status of this OperationResultsDescription.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OperationResultsDescription.

        The status of the operation being performed.

        :param status: The status of this OperationResultsDescription.
        :type status: str
        """
        allowed_values = ["Canceled", "Succeeded", "Failed", "Requested", "Running"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
