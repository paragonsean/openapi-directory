/**
 * HealthcareApisClient
 * Use this API to manage Microsoft HealthcareApis services in your Azure subscription.
 *
 * The version of the OpenAPI document: 2019-09-16
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIServicesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIServicesProperties::OAIServicesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIServicesProperties::OAIServicesProperties() {
    this->initializeModel();
}

OAIServicesProperties::~OAIServicesProperties() {}

void OAIServicesProperties::initializeModel() {

    m_access_policies_isSet = false;
    m_access_policies_isValid = false;

    m_authentication_configuration_isSet = false;
    m_authentication_configuration_isValid = false;

    m_cors_configuration_isSet = false;
    m_cors_configuration_isValid = false;

    m_cosmos_db_configuration_isSet = false;
    m_cosmos_db_configuration_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIServicesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIServicesProperties::fromJsonObject(QJsonObject json) {

    m_access_policies_isValid = ::OpenAPI::fromJsonValue(m_access_policies, json[QString("accessPolicies")]);
    m_access_policies_isSet = !json[QString("accessPolicies")].isNull() && m_access_policies_isValid;

    m_authentication_configuration_isValid = ::OpenAPI::fromJsonValue(m_authentication_configuration, json[QString("authenticationConfiguration")]);
    m_authentication_configuration_isSet = !json[QString("authenticationConfiguration")].isNull() && m_authentication_configuration_isValid;

    m_cors_configuration_isValid = ::OpenAPI::fromJsonValue(m_cors_configuration, json[QString("corsConfiguration")]);
    m_cors_configuration_isSet = !json[QString("corsConfiguration")].isNull() && m_cors_configuration_isValid;

    m_cosmos_db_configuration_isValid = ::OpenAPI::fromJsonValue(m_cosmos_db_configuration, json[QString("cosmosDbConfiguration")]);
    m_cosmos_db_configuration_isSet = !json[QString("cosmosDbConfiguration")].isNull() && m_cosmos_db_configuration_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIServicesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIServicesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_access_policies.size() > 0) {
        obj.insert(QString("accessPolicies"), ::OpenAPI::toJsonValue(m_access_policies));
    }
    if (m_authentication_configuration.isSet()) {
        obj.insert(QString("authenticationConfiguration"), ::OpenAPI::toJsonValue(m_authentication_configuration));
    }
    if (m_cors_configuration.isSet()) {
        obj.insert(QString("corsConfiguration"), ::OpenAPI::toJsonValue(m_cors_configuration));
    }
    if (m_cosmos_db_configuration.isSet()) {
        obj.insert(QString("cosmosDbConfiguration"), ::OpenAPI::toJsonValue(m_cosmos_db_configuration));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QList<OAIServiceAccessPolicyEntry> OAIServicesProperties::getAccessPolicies() const {
    return m_access_policies;
}
void OAIServicesProperties::setAccessPolicies(const QList<OAIServiceAccessPolicyEntry> &access_policies) {
    m_access_policies = access_policies;
    m_access_policies_isSet = true;
}

bool OAIServicesProperties::is_access_policies_Set() const{
    return m_access_policies_isSet;
}

bool OAIServicesProperties::is_access_policies_Valid() const{
    return m_access_policies_isValid;
}

OAIServiceAuthenticationConfigurationInfo OAIServicesProperties::getAuthenticationConfiguration() const {
    return m_authentication_configuration;
}
void OAIServicesProperties::setAuthenticationConfiguration(const OAIServiceAuthenticationConfigurationInfo &authentication_configuration) {
    m_authentication_configuration = authentication_configuration;
    m_authentication_configuration_isSet = true;
}

bool OAIServicesProperties::is_authentication_configuration_Set() const{
    return m_authentication_configuration_isSet;
}

bool OAIServicesProperties::is_authentication_configuration_Valid() const{
    return m_authentication_configuration_isValid;
}

OAIServiceCorsConfigurationInfo OAIServicesProperties::getCorsConfiguration() const {
    return m_cors_configuration;
}
void OAIServicesProperties::setCorsConfiguration(const OAIServiceCorsConfigurationInfo &cors_configuration) {
    m_cors_configuration = cors_configuration;
    m_cors_configuration_isSet = true;
}

bool OAIServicesProperties::is_cors_configuration_Set() const{
    return m_cors_configuration_isSet;
}

bool OAIServicesProperties::is_cors_configuration_Valid() const{
    return m_cors_configuration_isValid;
}

OAIServiceCosmosDbConfigurationInfo OAIServicesProperties::getCosmosDbConfiguration() const {
    return m_cosmos_db_configuration;
}
void OAIServicesProperties::setCosmosDbConfiguration(const OAIServiceCosmosDbConfigurationInfo &cosmos_db_configuration) {
    m_cosmos_db_configuration = cosmos_db_configuration;
    m_cosmos_db_configuration_isSet = true;
}

bool OAIServicesProperties::is_cosmos_db_configuration_Set() const{
    return m_cosmos_db_configuration_isSet;
}

bool OAIServicesProperties::is_cosmos_db_configuration_Valid() const{
    return m_cosmos_db_configuration_isValid;
}

QString OAIServicesProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIServicesProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIServicesProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIServicesProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIServicesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_access_policies.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentication_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cors_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_cosmos_db_configuration.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIServicesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_access_policies_isValid && true;
}

} // namespace OpenAPI
