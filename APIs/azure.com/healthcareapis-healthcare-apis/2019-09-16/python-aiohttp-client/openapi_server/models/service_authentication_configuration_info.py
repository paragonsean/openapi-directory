# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceAuthenticationConfigurationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audience: str=None, authority: str=None, smart_proxy_enabled: bool=None):
        """ServiceAuthenticationConfigurationInfo - a model defined in OpenAPI

        :param audience: The audience of this ServiceAuthenticationConfigurationInfo.
        :param authority: The authority of this ServiceAuthenticationConfigurationInfo.
        :param smart_proxy_enabled: The smart_proxy_enabled of this ServiceAuthenticationConfigurationInfo.
        """
        self.openapi_types = {
            'audience': str,
            'authority': str,
            'smart_proxy_enabled': bool
        }

        self.attribute_map = {
            'audience': 'audience',
            'authority': 'authority',
            'smart_proxy_enabled': 'smartProxyEnabled'
        }

        self._audience = audience
        self._authority = authority
        self._smart_proxy_enabled = smart_proxy_enabled

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceAuthenticationConfigurationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceAuthenticationConfigurationInfo of this ServiceAuthenticationConfigurationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audience(self):
        """Gets the audience of this ServiceAuthenticationConfigurationInfo.

        The audience url for the service

        :return: The audience of this ServiceAuthenticationConfigurationInfo.
        :rtype: str
        """
        return self._audience

    @audience.setter
    def audience(self, audience):
        """Sets the audience of this ServiceAuthenticationConfigurationInfo.

        The audience url for the service

        :param audience: The audience of this ServiceAuthenticationConfigurationInfo.
        :type audience: str
        """

        self._audience = audience

    @property
    def authority(self):
        """Gets the authority of this ServiceAuthenticationConfigurationInfo.

        The authority url for the service

        :return: The authority of this ServiceAuthenticationConfigurationInfo.
        :rtype: str
        """
        return self._authority

    @authority.setter
    def authority(self, authority):
        """Sets the authority of this ServiceAuthenticationConfigurationInfo.

        The authority url for the service

        :param authority: The authority of this ServiceAuthenticationConfigurationInfo.
        :type authority: str
        """

        self._authority = authority

    @property
    def smart_proxy_enabled(self):
        """Gets the smart_proxy_enabled of this ServiceAuthenticationConfigurationInfo.

        If the SMART on FHIR proxy is enabled

        :return: The smart_proxy_enabled of this ServiceAuthenticationConfigurationInfo.
        :rtype: bool
        """
        return self._smart_proxy_enabled

    @smart_proxy_enabled.setter
    def smart_proxy_enabled(self, smart_proxy_enabled):
        """Sets the smart_proxy_enabled of this ServiceAuthenticationConfigurationInfo.

        If the SMART on FHIR proxy is enabled

        :param smart_proxy_enabled: The smart_proxy_enabled of this ServiceAuthenticationConfigurationInfo.
        :type smart_proxy_enabled: bool
        """

        self._smart_proxy_enabled = smart_proxy_enabled
