# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceCorsConfigurationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_credentials: bool=None, headers: List[str]=None, max_age: int=None, methods: List[str]=None, origins: List[str]=None):
        """ServiceCorsConfigurationInfo - a model defined in OpenAPI

        :param allow_credentials: The allow_credentials of this ServiceCorsConfigurationInfo.
        :param headers: The headers of this ServiceCorsConfigurationInfo.
        :param max_age: The max_age of this ServiceCorsConfigurationInfo.
        :param methods: The methods of this ServiceCorsConfigurationInfo.
        :param origins: The origins of this ServiceCorsConfigurationInfo.
        """
        self.openapi_types = {
            'allow_credentials': bool,
            'headers': List[str],
            'max_age': int,
            'methods': List[str],
            'origins': List[str]
        }

        self.attribute_map = {
            'allow_credentials': 'allowCredentials',
            'headers': 'headers',
            'max_age': 'maxAge',
            'methods': 'methods',
            'origins': 'origins'
        }

        self._allow_credentials = allow_credentials
        self._headers = headers
        self._max_age = max_age
        self._methods = methods
        self._origins = origins

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ServiceCorsConfigurationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ServiceCorsConfigurationInfo of this ServiceCorsConfigurationInfo.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_credentials(self):
        """Gets the allow_credentials of this ServiceCorsConfigurationInfo.

        If credentials are allowed via CORS.

        :return: The allow_credentials of this ServiceCorsConfigurationInfo.
        :rtype: bool
        """
        return self._allow_credentials

    @allow_credentials.setter
    def allow_credentials(self, allow_credentials):
        """Sets the allow_credentials of this ServiceCorsConfigurationInfo.

        If credentials are allowed via CORS.

        :param allow_credentials: The allow_credentials of this ServiceCorsConfigurationInfo.
        :type allow_credentials: bool
        """

        self._allow_credentials = allow_credentials

    @property
    def headers(self):
        """Gets the headers of this ServiceCorsConfigurationInfo.

        The headers to be allowed via CORS.

        :return: The headers of this ServiceCorsConfigurationInfo.
        :rtype: List[str]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ServiceCorsConfigurationInfo.

        The headers to be allowed via CORS.

        :param headers: The headers of this ServiceCorsConfigurationInfo.
        :type headers: List[str]
        """

        self._headers = headers

    @property
    def max_age(self):
        """Gets the max_age of this ServiceCorsConfigurationInfo.

        The max age to be allowed via CORS.

        :return: The max_age of this ServiceCorsConfigurationInfo.
        :rtype: int
        """
        return self._max_age

    @max_age.setter
    def max_age(self, max_age):
        """Sets the max_age of this ServiceCorsConfigurationInfo.

        The max age to be allowed via CORS.

        :param max_age: The max_age of this ServiceCorsConfigurationInfo.
        :type max_age: int
        """
        if max_age is not None and max_age > 99999:
            raise ValueError("Invalid value for `max_age`, must be a value less than or equal to `99999`")
        if max_age is not None and max_age < 0:
            raise ValueError("Invalid value for `max_age`, must be a value greater than or equal to `0`")

        self._max_age = max_age

    @property
    def methods(self):
        """Gets the methods of this ServiceCorsConfigurationInfo.

        The methods to be allowed via CORS.

        :return: The methods of this ServiceCorsConfigurationInfo.
        :rtype: List[str]
        """
        return self._methods

    @methods.setter
    def methods(self, methods):
        """Sets the methods of this ServiceCorsConfigurationInfo.

        The methods to be allowed via CORS.

        :param methods: The methods of this ServiceCorsConfigurationInfo.
        :type methods: List[str]
        """

        self._methods = methods

    @property
    def origins(self):
        """Gets the origins of this ServiceCorsConfigurationInfo.

        The origins to be allowed via CORS.

        :return: The origins of this ServiceCorsConfigurationInfo.
        :rtype: List[str]
        """
        return self._origins

    @origins.setter
    def origins(self, origins):
        """Sets the origins of this ServiceCorsConfigurationInfo.

        The origins to be allowed via CORS.

        :param origins: The origins of this ServiceCorsConfigurationInfo.
        :type origins: List[str]
        """

        self._origins = origins
