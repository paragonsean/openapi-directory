# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BackupStorageConfigProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_model_type: str=None, storage_type: str=None, storage_type_state: str=None):
        """BackupStorageConfigProperties - a model defined in OpenAPI

        :param storage_model_type: The storage_model_type of this BackupStorageConfigProperties.
        :param storage_type: The storage_type of this BackupStorageConfigProperties.
        :param storage_type_state: The storage_type_state of this BackupStorageConfigProperties.
        """
        self.openapi_types = {
            'storage_model_type': str,
            'storage_type': str,
            'storage_type_state': str
        }

        self.attribute_map = {
            'storage_model_type': 'storageModelType',
            'storage_type': 'storageType',
            'storage_type_state': 'storageTypeState'
        }

        self._storage_model_type = storage_model_type
        self._storage_type = storage_type
        self._storage_type_state = storage_type_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BackupStorageConfigProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BackupStorageConfigProperties of this BackupStorageConfigProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_model_type(self):
        """Gets the storage_model_type of this BackupStorageConfigProperties.

        Storage model type.

        :return: The storage_model_type of this BackupStorageConfigProperties.
        :rtype: str
        """
        return self._storage_model_type

    @storage_model_type.setter
    def storage_model_type(self, storage_model_type):
        """Sets the storage_model_type of this BackupStorageConfigProperties.

        Storage model type.

        :param storage_model_type: The storage_model_type of this BackupStorageConfigProperties.
        :type storage_model_type: str
        """
        allowed_values = ["Invalid", "GeoRedundant", "LocallyRedundant"]  # noqa: E501
        if storage_model_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_model_type` ({0}), must be one of {1}"
                .format(storage_model_type, allowed_values)
            )

        self._storage_model_type = storage_model_type

    @property
    def storage_type(self):
        """Gets the storage_type of this BackupStorageConfigProperties.

        Storage type.

        :return: The storage_type of this BackupStorageConfigProperties.
        :rtype: str
        """
        return self._storage_type

    @storage_type.setter
    def storage_type(self, storage_type):
        """Sets the storage_type of this BackupStorageConfigProperties.

        Storage type.

        :param storage_type: The storage_type of this BackupStorageConfigProperties.
        :type storage_type: str
        """
        allowed_values = ["Invalid", "GeoRedundant", "LocallyRedundant"]  # noqa: E501
        if storage_type not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type` ({0}), must be one of {1}"
                .format(storage_type, allowed_values)
            )

        self._storage_type = storage_type

    @property
    def storage_type_state(self):
        """Gets the storage_type_state of this BackupStorageConfigProperties.

        Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked.

        :return: The storage_type_state of this BackupStorageConfigProperties.
        :rtype: str
        """
        return self._storage_type_state

    @storage_type_state.setter
    def storage_type_state(self, storage_type_state):
        """Sets the storage_type_state of this BackupStorageConfigProperties.

        Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked.

        :param storage_type_state: The storage_type_state of this BackupStorageConfigProperties.
        :type storage_type_state: str
        """
        allowed_values = ["Invalid", "Locked", "Unlocked"]  # noqa: E501
        if storage_type_state not in allowed_values:
            raise ValueError(
                "Invalid value for `storage_type_state` ({0}), must be one of {1}"
                .format(storage_type_state, allowed_values)
            )

        self._storage_type_state = storage_type_state
