/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBackupStorageConfigProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBackupStorageConfigProperties::OAIBackupStorageConfigProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBackupStorageConfigProperties::OAIBackupStorageConfigProperties() {
    this->initializeModel();
}

OAIBackupStorageConfigProperties::~OAIBackupStorageConfigProperties() {}

void OAIBackupStorageConfigProperties::initializeModel() {

    m_storage_model_type_isSet = false;
    m_storage_model_type_isValid = false;

    m_storage_type_isSet = false;
    m_storage_type_isValid = false;

    m_storage_type_state_isSet = false;
    m_storage_type_state_isValid = false;
}

void OAIBackupStorageConfigProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBackupStorageConfigProperties::fromJsonObject(QJsonObject json) {

    m_storage_model_type_isValid = ::OpenAPI::fromJsonValue(m_storage_model_type, json[QString("storageModelType")]);
    m_storage_model_type_isSet = !json[QString("storageModelType")].isNull() && m_storage_model_type_isValid;

    m_storage_type_isValid = ::OpenAPI::fromJsonValue(m_storage_type, json[QString("storageType")]);
    m_storage_type_isSet = !json[QString("storageType")].isNull() && m_storage_type_isValid;

    m_storage_type_state_isValid = ::OpenAPI::fromJsonValue(m_storage_type_state, json[QString("storageTypeState")]);
    m_storage_type_state_isSet = !json[QString("storageTypeState")].isNull() && m_storage_type_state_isValid;
}

QString OAIBackupStorageConfigProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBackupStorageConfigProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_storage_model_type_isSet) {
        obj.insert(QString("storageModelType"), ::OpenAPI::toJsonValue(m_storage_model_type));
    }
    if (m_storage_type_isSet) {
        obj.insert(QString("storageType"), ::OpenAPI::toJsonValue(m_storage_type));
    }
    if (m_storage_type_state_isSet) {
        obj.insert(QString("storageTypeState"), ::OpenAPI::toJsonValue(m_storage_type_state));
    }
    return obj;
}

QString OAIBackupStorageConfigProperties::getStorageModelType() const {
    return m_storage_model_type;
}
void OAIBackupStorageConfigProperties::setStorageModelType(const QString &storage_model_type) {
    m_storage_model_type = storage_model_type;
    m_storage_model_type_isSet = true;
}

bool OAIBackupStorageConfigProperties::is_storage_model_type_Set() const{
    return m_storage_model_type_isSet;
}

bool OAIBackupStorageConfigProperties::is_storage_model_type_Valid() const{
    return m_storage_model_type_isValid;
}

QString OAIBackupStorageConfigProperties::getStorageType() const {
    return m_storage_type;
}
void OAIBackupStorageConfigProperties::setStorageType(const QString &storage_type) {
    m_storage_type = storage_type;
    m_storage_type_isSet = true;
}

bool OAIBackupStorageConfigProperties::is_storage_type_Set() const{
    return m_storage_type_isSet;
}

bool OAIBackupStorageConfigProperties::is_storage_type_Valid() const{
    return m_storage_type_isValid;
}

QString OAIBackupStorageConfigProperties::getStorageTypeState() const {
    return m_storage_type_state;
}
void OAIBackupStorageConfigProperties::setStorageTypeState(const QString &storage_type_state) {
    m_storage_type_state = storage_type_state;
    m_storage_type_state_isSet = true;
}

bool OAIBackupStorageConfigProperties::is_storage_type_state_Set() const{
    return m_storage_type_state_isSet;
}

bool OAIBackupStorageConfigProperties::is_storage_type_state_Valid() const{
    return m_storage_type_state_isValid;
}

bool OAIBackupStorageConfigProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_storage_model_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_type_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBackupStorageConfigProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
