/**
 * RecoveryServicesBackupClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2016-12-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BackupVaultConfigProperties model module.
 * @module model/BackupVaultConfigProperties
 * @version 2016-12-01
 */
class BackupVaultConfigProperties {
    /**
     * Constructs a new <code>BackupVaultConfigProperties</code>.
     * Backup vault config details.
     * @alias module:model/BackupVaultConfigProperties
     */
    constructor() { 
        
        BackupVaultConfigProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>BackupVaultConfigProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BackupVaultConfigProperties} obj Optional instance to populate.
     * @return {module:model/BackupVaultConfigProperties} The populated <code>BackupVaultConfigProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BackupVaultConfigProperties();

            if (data.hasOwnProperty('enhancedSecurityState')) {
                obj['enhancedSecurityState'] = ApiClient.convertToType(data['enhancedSecurityState'], 'String');
            }
            if (data.hasOwnProperty('storageType')) {
                obj['storageType'] = ApiClient.convertToType(data['storageType'], 'String');
            }
            if (data.hasOwnProperty('storageTypeState')) {
                obj['storageTypeState'] = ApiClient.convertToType(data['storageTypeState'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BackupVaultConfigProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BackupVaultConfigProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['enhancedSecurityState'] && !(typeof data['enhancedSecurityState'] === 'string' || data['enhancedSecurityState'] instanceof String)) {
            throw new Error("Expected the field `enhancedSecurityState` to be a primitive type in the JSON string but got " + data['enhancedSecurityState']);
        }
        // ensure the json data is a string
        if (data['storageType'] && !(typeof data['storageType'] === 'string' || data['storageType'] instanceof String)) {
            throw new Error("Expected the field `storageType` to be a primitive type in the JSON string but got " + data['storageType']);
        }
        // ensure the json data is a string
        if (data['storageTypeState'] && !(typeof data['storageTypeState'] === 'string' || data['storageTypeState'] instanceof String)) {
            throw new Error("Expected the field `storageTypeState` to be a primitive type in the JSON string but got " + data['storageTypeState']);
        }

        return true;
    }


}



/**
 * Enabled or Disabled.
 * @member {module:model/BackupVaultConfigProperties.EnhancedSecurityStateEnum} enhancedSecurityState
 */
BackupVaultConfigProperties.prototype['enhancedSecurityState'] = undefined;

/**
 * Storage type.
 * @member {module:model/BackupVaultConfigProperties.StorageTypeEnum} storageType
 */
BackupVaultConfigProperties.prototype['storageType'] = undefined;

/**
 * Locked or Unlocked. Once a machine is registered against a resource, the storageTypeState is always Locked.
 * @member {module:model/BackupVaultConfigProperties.StorageTypeStateEnum} storageTypeState
 */
BackupVaultConfigProperties.prototype['storageTypeState'] = undefined;





/**
 * Allowed values for the <code>enhancedSecurityState</code> property.
 * @enum {String}
 * @readonly
 */
BackupVaultConfigProperties['EnhancedSecurityStateEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Enabled"
     * @const
     */
    "Enabled": "Enabled",

    /**
     * value: "Disabled"
     * @const
     */
    "Disabled": "Disabled"
};


/**
 * Allowed values for the <code>storageType</code> property.
 * @enum {String}
 * @readonly
 */
BackupVaultConfigProperties['StorageTypeEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "GeoRedundant"
     * @const
     */
    "GeoRedundant": "GeoRedundant",

    /**
     * value: "LocallyRedundant"
     * @const
     */
    "LocallyRedundant": "LocallyRedundant"
};


/**
 * Allowed values for the <code>storageTypeState</code> property.
 * @enum {String}
 * @readonly
 */
BackupVaultConfigProperties['StorageTypeStateEnum'] = {

    /**
     * value: "Invalid"
     * @const
     */
    "Invalid": "Invalid",

    /**
     * value: "Locked"
     * @const
     */
    "Locked": "Locked",

    /**
     * value: "Unlocked"
     * @const
     */
    "Unlocked": "Unlocked"
};



export default BackupVaultConfigProperties;

