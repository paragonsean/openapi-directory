/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataShareError from '../model/DataShareError';
import OperationResponse from '../model/OperationResponse';
import ProviderShareSubscription from '../model/ProviderShareSubscription';
import ProviderShareSubscriptionList from '../model/ProviderShareSubscriptionList';
import Share from '../model/Share';
import ShareList from '../model/ShareList';
import ShareSynchronization from '../model/ShareSynchronization';
import ShareSynchronizationList from '../model/ShareSynchronizationList';
import SynchronizationDetailsList from '../model/SynchronizationDetailsList';

/**
* Share service.
* @module api/ShareApi
* @version 2019-11-01
*/
export default class ShareApi {

    /**
    * Constructs a new ShareApi. 
    * @alias module:api/ShareApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the providerShareSubscriptionsGetByShare operation.
     * @callback module:api/ShareApi~providerShareSubscriptionsGetByShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderShareSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get share subscription in a provider share.
     * Get share subscription in a provider share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} providerShareSubscriptionId To locate shareSubscription
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareApi~providerShareSubscriptionsGetByShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderShareSubscription}
     */
    providerShareSubscriptionsGetByShare(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsGetByShare");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsGetByShare");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling providerShareSubscriptionsGetByShare");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling providerShareSubscriptionsGetByShare");
      }
      // verify the required parameter 'providerShareSubscriptionId' is set
      if (providerShareSubscriptionId === undefined || providerShareSubscriptionId === null) {
        throw new Error("Missing the required parameter 'providerShareSubscriptionId' when calling providerShareSubscriptionsGetByShare");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsGetByShare");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'providerShareSubscriptionId': providerShareSubscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderShareSubscription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the providerShareSubscriptionsListByShare operation.
     * @callback module:api/ShareApi~providerShareSubscriptionsListByShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderShareSubscriptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available share subscriptions to a provider share.
     * List share subscriptions in a provider share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation Token
     * @param {module:api/ShareApi~providerShareSubscriptionsListByShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderShareSubscriptionList}
     */
    providerShareSubscriptionsListByShare(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsListByShare");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsListByShare");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling providerShareSubscriptionsListByShare");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling providerShareSubscriptionsListByShare");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsListByShare");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderShareSubscriptionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the providerShareSubscriptionsReinstate operation.
     * @callback module:api/ShareApi~providerShareSubscriptionsReinstateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderShareSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reinstate share subscription in a provider share.
     * Reinstate share subscription in a provider share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} providerShareSubscriptionId To locate shareSubscription
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareApi~providerShareSubscriptionsReinstateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderShareSubscription}
     */
    providerShareSubscriptionsReinstate(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsReinstate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsReinstate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling providerShareSubscriptionsReinstate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling providerShareSubscriptionsReinstate");
      }
      // verify the required parameter 'providerShareSubscriptionId' is set
      if (providerShareSubscriptionId === undefined || providerShareSubscriptionId === null) {
        throw new Error("Missing the required parameter 'providerShareSubscriptionId' when calling providerShareSubscriptionsReinstate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsReinstate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'providerShareSubscriptionId': providerShareSubscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderShareSubscription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}/reinstate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the providerShareSubscriptionsRevoke operation.
     * @callback module:api/ShareApi~providerShareSubscriptionsRevokeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProviderShareSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Revoke share subscription in a provider share.
     * Revoke share subscription in a provider share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} providerShareSubscriptionId To locate shareSubscription
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareApi~providerShareSubscriptionsRevokeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProviderShareSubscription}
     */
    providerShareSubscriptionsRevoke(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsRevoke");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsRevoke");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling providerShareSubscriptionsRevoke");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling providerShareSubscriptionsRevoke");
      }
      // verify the required parameter 'providerShareSubscriptionId' is set
      if (providerShareSubscriptionId === undefined || providerShareSubscriptionId === null) {
        throw new Error("Missing the required parameter 'providerShareSubscriptionId' when calling providerShareSubscriptionsRevoke");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsRevoke");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'providerShareSubscriptionId': providerShareSubscriptionId
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ProviderShareSubscription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}/revoke', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharesCreate operation.
     * @callback module:api/ShareApi~sharesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Share} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a share in the given account.
     * Create a share 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/Share} share The share payload
     * @param {module:api/ShareApi~sharesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Share}
     */
    sharesCreate(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, share, callback) {
      let postBody = share;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sharesCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sharesCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sharesCreate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling sharesCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sharesCreate");
      }
      // verify the required parameter 'share' is set
      if (share === undefined || share === null) {
        throw new Error("Missing the required parameter 'share' when calling sharesCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Share;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharesDelete operation.
     * @callback module:api/ShareApi~sharesDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a share
     * Delete a share 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareApi~sharesDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResponse}
     */
    sharesDelete(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sharesDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sharesDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sharesDelete");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling sharesDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sharesDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharesGet operation.
     * @callback module:api/ShareApi~sharesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Share} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get a specified share
     * Get a share 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share to retrieve.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareApi~sharesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Share}
     */
    sharesGet(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sharesGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sharesGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sharesGet");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling sharesGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sharesGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Share;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharesListByAccount operation.
     * @callback module:api/ShareApi~sharesListByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available shares under an account.
     * List shares in an account
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation Token
     * @param {module:api/ShareApi~sharesListByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareList}
     */
    sharesListByAccount(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sharesListByAccount");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sharesListByAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sharesListByAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sharesListByAccount");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShareList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharesListSynchronizationDetails operation.
     * @callback module:api/ShareApi~sharesListSynchronizationDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationDetailsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List data set level details for a share synchronization
     * List synchronization details
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/ShareSynchronization} shareSynchronization Share Synchronization payload.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/ShareApi~sharesListSynchronizationDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationDetailsList}
     */
    sharesListSynchronizationDetails(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, shareSynchronization, opts, callback) {
      opts = opts || {};
      let postBody = shareSynchronization;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sharesListSynchronizationDetails");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sharesListSynchronizationDetails");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sharesListSynchronizationDetails");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling sharesListSynchronizationDetails");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sharesListSynchronizationDetails");
      }
      // verify the required parameter 'shareSynchronization' is set
      if (shareSynchronization === undefined || shareSynchronization === null) {
        throw new Error("Missing the required parameter 'shareSynchronization' when calling sharesListSynchronizationDetails");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SynchronizationDetailsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizationDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sharesListSynchronizations operation.
     * @callback module:api/ShareApi~sharesListSynchronizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSynchronizationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Synchronizations in a share
     * List synchronizations of a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/ShareApi~sharesListSynchronizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSynchronizationList}
     */
    sharesListSynchronizations(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling sharesListSynchronizations");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling sharesListSynchronizations");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling sharesListSynchronizations");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling sharesListSynchronizations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling sharesListSynchronizations");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShareSynchronizationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
