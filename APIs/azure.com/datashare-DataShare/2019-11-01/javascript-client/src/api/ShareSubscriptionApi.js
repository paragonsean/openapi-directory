/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ConsumerSourceDataSetList from '../model/ConsumerSourceDataSetList';
import DataShareError from '../model/DataShareError';
import OperationResponse from '../model/OperationResponse';
import ShareSubscription from '../model/ShareSubscription';
import ShareSubscriptionList from '../model/ShareSubscriptionList';
import ShareSubscriptionSynchronization from '../model/ShareSubscriptionSynchronization';
import ShareSubscriptionSynchronizationList from '../model/ShareSubscriptionSynchronizationList';
import SourceShareSynchronizationSettingList from '../model/SourceShareSynchronizationSettingList';
import SynchronizationDetailsList from '../model/SynchronizationDetailsList';
import Synchronize from '../model/Synchronize';

/**
* ShareSubscription service.
* @module api/ShareSubscriptionApi
* @version 2019-11-01
*/
export default class ShareSubscriptionApi {

    /**
    * Constructs a new ShareSubscriptionApi. 
    * @alias module:api/ShareSubscriptionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the consumerSourceDataSetsListByShareSubscription operation.
     * @callback module:api/ShareSubscriptionApi~consumerSourceDataSetsListByShareSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConsumerSourceDataSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source dataSets of a shareSubscription.
     * Get source dataSets of a shareSubscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/ShareSubscriptionApi~consumerSourceDataSetsListByShareSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConsumerSourceDataSetList}
     */
    consumerSourceDataSetsListByShareSubscription(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling consumerSourceDataSetsListByShareSubscription");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling consumerSourceDataSetsListByShareSubscription");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling consumerSourceDataSetsListByShareSubscription");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling consumerSourceDataSetsListByShareSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling consumerSourceDataSetsListByShareSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ConsumerSourceDataSetList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/ConsumerSourceDataSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsCancelSynchronization operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsCancelSynchronizationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSubscriptionSynchronization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request cancellation of a data share snapshot
     * Request to cancel a synchronization.
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/ShareSubscriptionSynchronization} shareSubscriptionSynchronization Share Subscription Synchronization payload.
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsCancelSynchronizationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSubscriptionSynchronization}
     */
    shareSubscriptionsCancelSynchronization(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, callback) {
      let postBody = shareSubscriptionSynchronization;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsCancelSynchronization");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsCancelSynchronization");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsCancelSynchronization");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsCancelSynchronization");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsCancelSynchronization");
      }
      // verify the required parameter 'shareSubscriptionSynchronization' is set
      if (shareSubscriptionSynchronization === undefined || shareSubscriptionSynchronization === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionSynchronization' when calling shareSubscriptionsCancelSynchronization");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShareSubscriptionSynchronization;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/cancelSynchronization', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsCreate operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create shareSubscription in an account.
     * Create a shareSubscription in an account
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/ShareSubscription} shareSubscription create parameters for shareSubscription
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSubscription}
     */
    shareSubscriptionsCreate(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscription, callback) {
      let postBody = shareSubscription;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsCreate");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsCreate");
      }
      // verify the required parameter 'shareSubscription' is set
      if (shareSubscription === undefined || shareSubscription === null) {
        throw new Error("Missing the required parameter 'shareSubscription' when calling shareSubscriptionsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShareSubscription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsDelete operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete shareSubscription in an account.
     * Delete a shareSubscription in an account
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResponse}
     */
    shareSubscriptionsDelete(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsDelete");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsGet operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSubscription} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get shareSubscription in an account.
     * Get a shareSubscription in an account
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSubscription}
     */
    shareSubscriptionsGet(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsGet");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShareSubscription;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsListByAccount operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsListByAccountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSubscriptionList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List of available share subscriptions under an account.
     * List share subscriptions in an account
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation Token
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsListByAccountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSubscriptionList}
     */
    shareSubscriptionsListByAccount(subscriptionId, resourceGroupName, accountName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListByAccount");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListByAccount");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsListByAccount");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListByAccount");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShareSubscriptionList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsListSourceShareSynchronizationSettings operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsListSourceShareSynchronizationSettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SourceShareSynchronizationSettingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source share synchronization settings for a shareSubscription.
     * Get synchronization settings set on a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsListSourceShareSynchronizationSettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SourceShareSynchronizationSettingList}
     */
    shareSubscriptionsListSourceShareSynchronizationSettings(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListSourceShareSynchronizationSettings");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListSourceShareSynchronizationSettings");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsListSourceShareSynchronizationSettings");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsListSourceShareSynchronizationSettings");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListSourceShareSynchronizationSettings");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SourceShareSynchronizationSettingList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSourceShareSynchronizationSettings', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsListSynchronizationDetails operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsListSynchronizationDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationDetailsList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List data set level details for a share subscription synchronization
     * List synchronization details
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the share subscription.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/ShareSubscriptionSynchronization} shareSubscriptionSynchronization Share Subscription Synchronization payload.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsListSynchronizationDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationDetailsList}
     */
    shareSubscriptionsListSynchronizationDetails(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, opts, callback) {
      opts = opts || {};
      let postBody = shareSubscriptionSynchronization;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListSynchronizationDetails");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListSynchronizationDetails");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsListSynchronizationDetails");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsListSynchronizationDetails");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListSynchronizationDetails");
      }
      // verify the required parameter 'shareSubscriptionSynchronization' is set
      if (shareSubscriptionSynchronization === undefined || shareSubscriptionSynchronization === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionSynchronization' when calling shareSubscriptionsListSynchronizationDetails");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SynchronizationDetailsList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizationDetails', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsListSynchronizations operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsListSynchronizationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSubscriptionSynchronizationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Synchronizations in a share subscription.
     * List synchronizations of a share subscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the share subscription.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsListSynchronizationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSubscriptionSynchronizationList}
     */
    shareSubscriptionsListSynchronizations(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListSynchronizations");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListSynchronizations");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsListSynchronizations");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsListSynchronizations");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListSynchronizations");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ShareSubscriptionSynchronizationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizations', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shareSubscriptionsSynchronize operation.
     * @callback module:api/ShareSubscriptionApi~shareSubscriptionsSynchronizeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ShareSubscriptionSynchronization} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate an asynchronous data share job
     * Initiate a copy
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of share subscription
     * @param {String} apiVersion The api version to use.
     * @param {module:model/Synchronize} synchronize Synchronize payload
     * @param {module:api/ShareSubscriptionApi~shareSubscriptionsSynchronizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ShareSubscriptionSynchronization}
     */
    shareSubscriptionsSynchronize(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, synchronize, callback) {
      let postBody = synchronize;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsSynchronize");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsSynchronize");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling shareSubscriptionsSynchronize");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsSynchronize");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling shareSubscriptionsSynchronize");
      }
      // verify the required parameter 'synchronize' is set
      if (synchronize === undefined || synchronize === null) {
        throw new Error("Missing the required parameter 'synchronize' when calling shareSubscriptionsSynchronize");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ShareSubscriptionSynchronization;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/Synchronize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
