/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataShareError from '../model/DataShareError';
import OperationResponse from '../model/OperationResponse';
import SynchronizationSetting from '../model/SynchronizationSetting';
import SynchronizationSettingList from '../model/SynchronizationSettingList';

/**
* SynchronizationSetting service.
* @module api/SynchronizationSettingApi
* @version 2019-11-01
*/
export default class SynchronizationSettingApi {

    /**
    * Constructs a new SynchronizationSettingApi. 
    * @alias module:api/SynchronizationSettingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the synchronizationSettingsCreate operation.
     * @callback module:api/SynchronizationSettingApi~synchronizationSettingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new synchronization setting to an existing share or updates it if existing.
     * Create or update a synchronizationSetting 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share to add the synchronization setting to.
     * @param {String} synchronizationSettingName The name of the synchronizationSetting.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/SynchronizationSetting} synchronizationSetting The new synchronization setting information.
     * @param {module:api/SynchronizationSettingApi~synchronizationSettingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationSetting}
     */
    synchronizationSettingsCreate(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, synchronizationSetting, callback) {
      let postBody = synchronizationSetting;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling synchronizationSettingsCreate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling synchronizationSettingsCreate");
      }
      // verify the required parameter 'synchronizationSettingName' is set
      if (synchronizationSettingName === undefined || synchronizationSettingName === null) {
        throw new Error("Missing the required parameter 'synchronizationSettingName' when calling synchronizationSettingsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling synchronizationSettingsCreate");
      }
      // verify the required parameter 'synchronizationSetting' is set
      if (synchronizationSetting === undefined || synchronizationSetting === null) {
        throw new Error("Missing the required parameter 'synchronizationSetting' when calling synchronizationSettingsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'synchronizationSettingName': synchronizationSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SynchronizationSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the synchronizationSettingsDelete operation.
     * @callback module:api/SynchronizationSettingApi~synchronizationSettingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete synchronizationSetting in a share.
     * Delete a synchronizationSetting in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} synchronizationSettingName The name of the synchronizationSetting .
     * @param {String} apiVersion The api version to use.
     * @param {module:api/SynchronizationSettingApi~synchronizationSettingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResponse}
     */
    synchronizationSettingsDelete(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling synchronizationSettingsDelete");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling synchronizationSettingsDelete");
      }
      // verify the required parameter 'synchronizationSettingName' is set
      if (synchronizationSettingName === undefined || synchronizationSettingName === null) {
        throw new Error("Missing the required parameter 'synchronizationSettingName' when calling synchronizationSettingsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling synchronizationSettingsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'synchronizationSettingName': synchronizationSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the synchronizationSettingsGet operation.
     * @callback module:api/SynchronizationSettingApi~synchronizationSettingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationSetting} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get synchronizationSetting in a share.
     * Get a synchronizationSetting in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} synchronizationSettingName The name of the synchronizationSetting.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/SynchronizationSettingApi~synchronizationSettingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationSetting}
     */
    synchronizationSettingsGet(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling synchronizationSettingsGet");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling synchronizationSettingsGet");
      }
      // verify the required parameter 'synchronizationSettingName' is set
      if (synchronizationSettingName === undefined || synchronizationSettingName === null) {
        throw new Error("Missing the required parameter 'synchronizationSettingName' when calling synchronizationSettingsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling synchronizationSettingsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'synchronizationSettingName': synchronizationSettingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SynchronizationSetting;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the synchronizationSettingsListByShare operation.
     * @callback module:api/SynchronizationSettingApi~synchronizationSettingsListByShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SynchronizationSettingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List synchronizationSettings in a share.
     * List synchronizationSettings in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] continuation token
     * @param {module:api/SynchronizationSettingApi~synchronizationSettingsListByShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SynchronizationSettingList}
     */
    synchronizationSettingsListByShare(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsListByShare");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsListByShare");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling synchronizationSettingsListByShare");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling synchronizationSettingsListByShare");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling synchronizationSettingsListByShare");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SynchronizationSettingList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
