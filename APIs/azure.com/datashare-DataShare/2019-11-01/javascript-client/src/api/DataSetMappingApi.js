/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataSetMapping from '../model/DataSetMapping';
import DataSetMappingList from '../model/DataSetMappingList';
import DataShareError from '../model/DataShareError';

/**
* DataSetMapping service.
* @module api/DataSetMappingApi
* @version 2019-11-01
*/
export default class DataSetMappingApi {

    /**
    * Constructs a new DataSetMappingApi. 
    * @alias module:api/DataSetMappingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataSetMappingsCreate operation.
     * @callback module:api/DataSetMappingApi~dataSetMappingsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSetMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Maps a source data set in the source share to a sink data set in the share subscription.  Enables copying the data set from source to destination.
     * Create a DataSetMapping 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the share subscription which will hold the data set sink.
     * @param {String} dataSetMappingName The name of the data set mapping to be created.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/DataSetMapping} dataSetMapping Destination data set configuration details.
     * @param {module:api/DataSetMappingApi~dataSetMappingsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSetMapping}
     */
    dataSetMappingsCreate(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, dataSetMapping, callback) {
      let postBody = dataSetMapping;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetMappingsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetMappingsCreate");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsCreate");
      }
      // verify the required parameter 'dataSetMappingName' is set
      if (dataSetMappingName === undefined || dataSetMappingName === null) {
        throw new Error("Missing the required parameter 'dataSetMappingName' when calling dataSetMappingsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetMappingsCreate");
      }
      // verify the required parameter 'dataSetMapping' is set
      if (dataSetMapping === undefined || dataSetMapping === null) {
        throw new Error("Missing the required parameter 'dataSetMapping' when calling dataSetMappingsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName,
        'dataSetMappingName': dataSetMappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataSetMapping;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataSetMappingsDelete operation.
     * @callback module:api/DataSetMappingApi~dataSetMappingsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DataSetMapping in a shareSubscription.
     * Delete a DataSetMapping in a shareSubscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} dataSetMappingName The name of the dataSetMapping.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/DataSetMappingApi~dataSetMappingsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataSetMappingsDelete(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetMappingsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetMappingsDelete");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsDelete");
      }
      // verify the required parameter 'dataSetMappingName' is set
      if (dataSetMappingName === undefined || dataSetMappingName === null) {
        throw new Error("Missing the required parameter 'dataSetMappingName' when calling dataSetMappingsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetMappingsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName,
        'dataSetMappingName': dataSetMappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataSetMappingsGet operation.
     * @callback module:api/DataSetMappingApi~dataSetMappingsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSetMapping} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DataSetMapping in a shareSubscription.
     * Get a DataSetMapping in a shareSubscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} dataSetMappingName The name of the dataSetMapping.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/DataSetMappingApi~dataSetMappingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSetMapping}
     */
    dataSetMappingsGet(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetMappingsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetMappingsGet");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsGet");
      }
      // verify the required parameter 'dataSetMappingName' is set
      if (dataSetMappingName === undefined || dataSetMappingName === null) {
        throw new Error("Missing the required parameter 'dataSetMappingName' when calling dataSetMappingsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetMappingsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName,
        'dataSetMappingName': dataSetMappingName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSetMapping;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataSetMappingsListByShareSubscription operation.
     * @callback module:api/DataSetMappingApi~dataSetMappingsListByShareSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSetMappingList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List DataSetMappings in a share subscription.
     * List DataSetMappings in a share subscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the share subscription.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/DataSetMappingApi~dataSetMappingsListByShareSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSetMappingList}
     */
    dataSetMappingsListByShareSubscription(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetMappingsListByShareSubscription");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsListByShareSubscription");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetMappingsListByShareSubscription");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsListByShareSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetMappingsListByShareSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSetMappingList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
