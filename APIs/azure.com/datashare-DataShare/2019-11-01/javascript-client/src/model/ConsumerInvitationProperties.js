/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsumerInvitationProperties model module.
 * @module model/ConsumerInvitationProperties
 * @version 2019-11-01
 */
class ConsumerInvitationProperties {
    /**
     * Constructs a new <code>ConsumerInvitationProperties</code>.
     * Properties of consumer invitation
     * @alias module:model/ConsumerInvitationProperties
     * @param invitationId {String} Unique id of the invitation.
     */
    constructor(invitationId) { 
        
        ConsumerInvitationProperties.initialize(this, invitationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, invitationId) { 
        obj['invitationId'] = invitationId;
    }

    /**
     * Constructs a <code>ConsumerInvitationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsumerInvitationProperties} obj Optional instance to populate.
     * @return {module:model/ConsumerInvitationProperties} The populated <code>ConsumerInvitationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsumerInvitationProperties();

            if (data.hasOwnProperty('dataSetCount')) {
                obj['dataSetCount'] = ApiClient.convertToType(data['dataSetCount'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('invitationId')) {
                obj['invitationId'] = ApiClient.convertToType(data['invitationId'], 'String');
            }
            if (data.hasOwnProperty('invitationStatus')) {
                obj['invitationStatus'] = ApiClient.convertToType(data['invitationStatus'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('providerEmail')) {
                obj['providerEmail'] = ApiClient.convertToType(data['providerEmail'], 'String');
            }
            if (data.hasOwnProperty('providerName')) {
                obj['providerName'] = ApiClient.convertToType(data['providerName'], 'String');
            }
            if (data.hasOwnProperty('providerTenantName')) {
                obj['providerTenantName'] = ApiClient.convertToType(data['providerTenantName'], 'String');
            }
            if (data.hasOwnProperty('respondedAt')) {
                obj['respondedAt'] = ApiClient.convertToType(data['respondedAt'], 'Date');
            }
            if (data.hasOwnProperty('sentAt')) {
                obj['sentAt'] = ApiClient.convertToType(data['sentAt'], 'Date');
            }
            if (data.hasOwnProperty('shareName')) {
                obj['shareName'] = ApiClient.convertToType(data['shareName'], 'String');
            }
            if (data.hasOwnProperty('termsOfUse')) {
                obj['termsOfUse'] = ApiClient.convertToType(data['termsOfUse'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsumerInvitationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsumerInvitationProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ConsumerInvitationProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['invitationId'] && !(typeof data['invitationId'] === 'string' || data['invitationId'] instanceof String)) {
            throw new Error("Expected the field `invitationId` to be a primitive type in the JSON string but got " + data['invitationId']);
        }
        // ensure the json data is a string
        if (data['invitationStatus'] && !(typeof data['invitationStatus'] === 'string' || data['invitationStatus'] instanceof String)) {
            throw new Error("Expected the field `invitationStatus` to be a primitive type in the JSON string but got " + data['invitationStatus']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['providerEmail'] && !(typeof data['providerEmail'] === 'string' || data['providerEmail'] instanceof String)) {
            throw new Error("Expected the field `providerEmail` to be a primitive type in the JSON string but got " + data['providerEmail']);
        }
        // ensure the json data is a string
        if (data['providerName'] && !(typeof data['providerName'] === 'string' || data['providerName'] instanceof String)) {
            throw new Error("Expected the field `providerName` to be a primitive type in the JSON string but got " + data['providerName']);
        }
        // ensure the json data is a string
        if (data['providerTenantName'] && !(typeof data['providerTenantName'] === 'string' || data['providerTenantName'] instanceof String)) {
            throw new Error("Expected the field `providerTenantName` to be a primitive type in the JSON string but got " + data['providerTenantName']);
        }
        // ensure the json data is a string
        if (data['shareName'] && !(typeof data['shareName'] === 'string' || data['shareName'] instanceof String)) {
            throw new Error("Expected the field `shareName` to be a primitive type in the JSON string but got " + data['shareName']);
        }
        // ensure the json data is a string
        if (data['termsOfUse'] && !(typeof data['termsOfUse'] === 'string' || data['termsOfUse'] instanceof String)) {
            throw new Error("Expected the field `termsOfUse` to be a primitive type in the JSON string but got " + data['termsOfUse']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

ConsumerInvitationProperties.RequiredProperties = ["invitationId"];

/**
 * Number of data sets in a share
 * @member {Number} dataSetCount
 */
ConsumerInvitationProperties.prototype['dataSetCount'] = undefined;

/**
 * Description shared when the invitation was created
 * @member {String} description
 */
ConsumerInvitationProperties.prototype['description'] = undefined;

/**
 * Unique id of the invitation.
 * @member {String} invitationId
 */
ConsumerInvitationProperties.prototype['invitationId'] = undefined;

/**
 * The status of the invitation.
 * @member {module:model/ConsumerInvitationProperties.InvitationStatusEnum} invitationStatus
 */
ConsumerInvitationProperties.prototype['invitationStatus'] = undefined;

/**
 * invitation location
 * @member {String} location
 */
ConsumerInvitationProperties.prototype['location'] = undefined;

/**
 * Email of the provider who created the resource
 * @member {String} providerEmail
 */
ConsumerInvitationProperties.prototype['providerEmail'] = undefined;

/**
 * Name of the provider who created the resource
 * @member {String} providerName
 */
ConsumerInvitationProperties.prototype['providerName'] = undefined;

/**
 * Tenant name of the provider who created the resource
 * @member {String} providerTenantName
 */
ConsumerInvitationProperties.prototype['providerTenantName'] = undefined;

/**
 * The time the recipient responded to the invitation.
 * @member {Date} respondedAt
 */
ConsumerInvitationProperties.prototype['respondedAt'] = undefined;

/**
 * Gets the time at which the invitation was sent.
 * @member {Date} sentAt
 */
ConsumerInvitationProperties.prototype['sentAt'] = undefined;

/**
 * Gets the source share Name.
 * @member {String} shareName
 */
ConsumerInvitationProperties.prototype['shareName'] = undefined;

/**
 * Terms of use shared when the invitation was created
 * @member {String} termsOfUse
 */
ConsumerInvitationProperties.prototype['termsOfUse'] = undefined;

/**
 * Email of the user who created the resource
 * @member {String} userEmail
 */
ConsumerInvitationProperties.prototype['userEmail'] = undefined;

/**
 * Name of the user who created the resource
 * @member {String} userName
 */
ConsumerInvitationProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>invitationStatus</code> property.
 * @enum {String}
 * @readonly
 */
ConsumerInvitationProperties['InvitationStatusEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Rejected"
     * @const
     */
    "Rejected": "Rejected",

    /**
     * value: "Withdrawn"
     * @const
     */
    "Withdrawn": "Withdrawn"
};



export default ConsumerInvitationProperties;

