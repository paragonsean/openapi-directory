/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ScheduledTriggerProperties model module.
 * @module model/ScheduledTriggerProperties
 * @version 2019-11-01
 */
class ScheduledTriggerProperties {
    /**
     * Constructs a new <code>ScheduledTriggerProperties</code>.
     * A Scheduled trigger data transfer object.
     * @alias module:model/ScheduledTriggerProperties
     * @param recurrenceInterval {module:model/ScheduledTriggerProperties.RecurrenceIntervalEnum} Recurrence Interval
     * @param synchronizationTime {Date} Synchronization time
     */
    constructor(recurrenceInterval, synchronizationTime) { 
        
        ScheduledTriggerProperties.initialize(this, recurrenceInterval, synchronizationTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, recurrenceInterval, synchronizationTime) { 
        obj['recurrenceInterval'] = recurrenceInterval;
        obj['synchronizationTime'] = synchronizationTime;
    }

    /**
     * Constructs a <code>ScheduledTriggerProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ScheduledTriggerProperties} obj Optional instance to populate.
     * @return {module:model/ScheduledTriggerProperties} The populated <code>ScheduledTriggerProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ScheduledTriggerProperties();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('recurrenceInterval')) {
                obj['recurrenceInterval'] = ApiClient.convertToType(data['recurrenceInterval'], 'String');
            }
            if (data.hasOwnProperty('synchronizationMode')) {
                obj['synchronizationMode'] = ApiClient.convertToType(data['synchronizationMode'], 'String');
            }
            if (data.hasOwnProperty('synchronizationTime')) {
                obj['synchronizationTime'] = ApiClient.convertToType(data['synchronizationTime'], 'Date');
            }
            if (data.hasOwnProperty('triggerStatus')) {
                obj['triggerStatus'] = ApiClient.convertToType(data['triggerStatus'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ScheduledTriggerProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ScheduledTriggerProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ScheduledTriggerProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['recurrenceInterval'] && !(typeof data['recurrenceInterval'] === 'string' || data['recurrenceInterval'] instanceof String)) {
            throw new Error("Expected the field `recurrenceInterval` to be a primitive type in the JSON string but got " + data['recurrenceInterval']);
        }
        // ensure the json data is a string
        if (data['synchronizationMode'] && !(typeof data['synchronizationMode'] === 'string' || data['synchronizationMode'] instanceof String)) {
            throw new Error("Expected the field `synchronizationMode` to be a primitive type in the JSON string but got " + data['synchronizationMode']);
        }
        // ensure the json data is a string
        if (data['triggerStatus'] && !(typeof data['triggerStatus'] === 'string' || data['triggerStatus'] instanceof String)) {
            throw new Error("Expected the field `triggerStatus` to be a primitive type in the JSON string but got " + data['triggerStatus']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

ScheduledTriggerProperties.RequiredProperties = ["recurrenceInterval", "synchronizationTime"];

/**
 * Time at which the trigger was created.
 * @member {Date} createdAt
 */
ScheduledTriggerProperties.prototype['createdAt'] = undefined;

/**
 * Gets the provisioning state
 * @member {module:model/ScheduledTriggerProperties.ProvisioningStateEnum} provisioningState
 */
ScheduledTriggerProperties.prototype['provisioningState'] = undefined;

/**
 * Recurrence Interval
 * @member {module:model/ScheduledTriggerProperties.RecurrenceIntervalEnum} recurrenceInterval
 */
ScheduledTriggerProperties.prototype['recurrenceInterval'] = undefined;

/**
 * Synchronization mode
 * @member {module:model/ScheduledTriggerProperties.SynchronizationModeEnum} synchronizationMode
 */
ScheduledTriggerProperties.prototype['synchronizationMode'] = undefined;

/**
 * Synchronization time
 * @member {Date} synchronizationTime
 */
ScheduledTriggerProperties.prototype['synchronizationTime'] = undefined;

/**
 * Gets the trigger state
 * @member {module:model/ScheduledTriggerProperties.TriggerStatusEnum} triggerStatus
 */
ScheduledTriggerProperties.prototype['triggerStatus'] = undefined;

/**
 * Name of the user who created the trigger.
 * @member {String} userName
 */
ScheduledTriggerProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ScheduledTriggerProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>recurrenceInterval</code> property.
 * @enum {String}
 * @readonly
 */
ScheduledTriggerProperties['RecurrenceIntervalEnum'] = {

    /**
     * value: "Hour"
     * @const
     */
    "Hour": "Hour",

    /**
     * value: "Day"
     * @const
     */
    "Day": "Day"
};


/**
 * Allowed values for the <code>synchronizationMode</code> property.
 * @enum {String}
 * @readonly
 */
ScheduledTriggerProperties['SynchronizationModeEnum'] = {

    /**
     * value: "Incremental"
     * @const
     */
    "Incremental": "Incremental",

    /**
     * value: "FullSync"
     * @const
     */
    "FullSync": "FullSync"
};


/**
 * Allowed values for the <code>triggerStatus</code> property.
 * @enum {String}
 * @readonly
 */
ScheduledTriggerProperties['TriggerStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Inactive"
     * @const
     */
    "Inactive": "Inactive",

    /**
     * value: "SourceSynchronizationSettingDeleted"
     * @const
     */
    "SourceSynchronizationSettingDeleted": "SourceSynchronizationSettingDeleted"
};



export default ScheduledTriggerProperties;

