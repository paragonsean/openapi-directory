/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The BlobMappingProperties model module.
 * @module model/BlobMappingProperties
 * @version 2019-11-01
 */
class BlobMappingProperties {
    /**
     * Constructs a new <code>BlobMappingProperties</code>.
     * Azure storage Blob data set mapping property bag.
     * @alias module:model/BlobMappingProperties
     * @param containerName {String} Container that has the file path.
     * @param dataSetId {String} The id of the source data set.
     * @param filePath {String} File path within the source data set
     * @param resourceGroup {String} Resource group of storage account.
     * @param storageAccountName {String} Storage account name of the source data set.
     * @param subscriptionId {String} Subscription id of storage account.
     */
    constructor(containerName, dataSetId, filePath, resourceGroup, storageAccountName, subscriptionId) { 
        
        BlobMappingProperties.initialize(this, containerName, dataSetId, filePath, resourceGroup, storageAccountName, subscriptionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, containerName, dataSetId, filePath, resourceGroup, storageAccountName, subscriptionId) { 
        obj['containerName'] = containerName;
        obj['dataSetId'] = dataSetId;
        obj['filePath'] = filePath;
        obj['resourceGroup'] = resourceGroup;
        obj['storageAccountName'] = storageAccountName;
        obj['subscriptionId'] = subscriptionId;
    }

    /**
     * Constructs a <code>BlobMappingProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/BlobMappingProperties} obj Optional instance to populate.
     * @return {module:model/BlobMappingProperties} The populated <code>BlobMappingProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new BlobMappingProperties();

            if (data.hasOwnProperty('containerName')) {
                obj['containerName'] = ApiClient.convertToType(data['containerName'], 'String');
            }
            if (data.hasOwnProperty('dataSetId')) {
                obj['dataSetId'] = ApiClient.convertToType(data['dataSetId'], 'String');
            }
            if (data.hasOwnProperty('dataSetMappingStatus')) {
                obj['dataSetMappingStatus'] = ApiClient.convertToType(data['dataSetMappingStatus'], 'String');
            }
            if (data.hasOwnProperty('filePath')) {
                obj['filePath'] = ApiClient.convertToType(data['filePath'], 'String');
            }
            if (data.hasOwnProperty('outputType')) {
                obj['outputType'] = ApiClient.convertToType(data['outputType'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('resourceGroup')) {
                obj['resourceGroup'] = ApiClient.convertToType(data['resourceGroup'], 'String');
            }
            if (data.hasOwnProperty('storageAccountName')) {
                obj['storageAccountName'] = ApiClient.convertToType(data['storageAccountName'], 'String');
            }
            if (data.hasOwnProperty('subscriptionId')) {
                obj['subscriptionId'] = ApiClient.convertToType(data['subscriptionId'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>BlobMappingProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>BlobMappingProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of BlobMappingProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['containerName'] && !(typeof data['containerName'] === 'string' || data['containerName'] instanceof String)) {
            throw new Error("Expected the field `containerName` to be a primitive type in the JSON string but got " + data['containerName']);
        }
        // ensure the json data is a string
        if (data['dataSetId'] && !(typeof data['dataSetId'] === 'string' || data['dataSetId'] instanceof String)) {
            throw new Error("Expected the field `dataSetId` to be a primitive type in the JSON string but got " + data['dataSetId']);
        }
        // ensure the json data is a string
        if (data['dataSetMappingStatus'] && !(typeof data['dataSetMappingStatus'] === 'string' || data['dataSetMappingStatus'] instanceof String)) {
            throw new Error("Expected the field `dataSetMappingStatus` to be a primitive type in the JSON string but got " + data['dataSetMappingStatus']);
        }
        // ensure the json data is a string
        if (data['filePath'] && !(typeof data['filePath'] === 'string' || data['filePath'] instanceof String)) {
            throw new Error("Expected the field `filePath` to be a primitive type in the JSON string but got " + data['filePath']);
        }
        // ensure the json data is a string
        if (data['outputType'] && !(typeof data['outputType'] === 'string' || data['outputType'] instanceof String)) {
            throw new Error("Expected the field `outputType` to be a primitive type in the JSON string but got " + data['outputType']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['resourceGroup'] && !(typeof data['resourceGroup'] === 'string' || data['resourceGroup'] instanceof String)) {
            throw new Error("Expected the field `resourceGroup` to be a primitive type in the JSON string but got " + data['resourceGroup']);
        }
        // ensure the json data is a string
        if (data['storageAccountName'] && !(typeof data['storageAccountName'] === 'string' || data['storageAccountName'] instanceof String)) {
            throw new Error("Expected the field `storageAccountName` to be a primitive type in the JSON string but got " + data['storageAccountName']);
        }
        // ensure the json data is a string
        if (data['subscriptionId'] && !(typeof data['subscriptionId'] === 'string' || data['subscriptionId'] instanceof String)) {
            throw new Error("Expected the field `subscriptionId` to be a primitive type in the JSON string but got " + data['subscriptionId']);
        }

        return true;
    }


}

BlobMappingProperties.RequiredProperties = ["containerName", "dataSetId", "filePath", "resourceGroup", "storageAccountName", "subscriptionId"];

/**
 * Container that has the file path.
 * @member {String} containerName
 */
BlobMappingProperties.prototype['containerName'] = undefined;

/**
 * The id of the source data set.
 * @member {String} dataSetId
 */
BlobMappingProperties.prototype['dataSetId'] = undefined;

/**
 * Gets the status of the data set mapping.
 * @member {module:model/BlobMappingProperties.DataSetMappingStatusEnum} dataSetMappingStatus
 */
BlobMappingProperties.prototype['dataSetMappingStatus'] = undefined;

/**
 * File path within the source data set
 * @member {String} filePath
 */
BlobMappingProperties.prototype['filePath'] = undefined;

/**
 * File output type
 * @member {module:model/BlobMappingProperties.OutputTypeEnum} outputType
 */
BlobMappingProperties.prototype['outputType'] = undefined;

/**
 * Provisioning state of the data set mapping.
 * @member {module:model/BlobMappingProperties.ProvisioningStateEnum} provisioningState
 */
BlobMappingProperties.prototype['provisioningState'] = undefined;

/**
 * Resource group of storage account.
 * @member {String} resourceGroup
 */
BlobMappingProperties.prototype['resourceGroup'] = undefined;

/**
 * Storage account name of the source data set.
 * @member {String} storageAccountName
 */
BlobMappingProperties.prototype['storageAccountName'] = undefined;

/**
 * Subscription id of storage account.
 * @member {String} subscriptionId
 */
BlobMappingProperties.prototype['subscriptionId'] = undefined;





/**
 * Allowed values for the <code>dataSetMappingStatus</code> property.
 * @enum {String}
 * @readonly
 */
BlobMappingProperties['DataSetMappingStatusEnum'] = {

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "Broken"
     * @const
     */
    "Broken": "Broken"
};


/**
 * Allowed values for the <code>outputType</code> property.
 * @enum {String}
 * @readonly
 */
BlobMappingProperties['OutputTypeEnum'] = {

    /**
     * value: "Csv"
     * @const
     */
    "Csv": "Csv",

    /**
     * value: "Parquet"
     * @const
     */
    "Parquet": "Parquet"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
BlobMappingProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default BlobMappingProperties;

