/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InvitationProperties model module.
 * @module model/InvitationProperties
 * @version 2019-11-01
 */
class InvitationProperties {
    /**
     * Constructs a new <code>InvitationProperties</code>.
     * Invitation property bag.
     * @alias module:model/InvitationProperties
     */
    constructor() { 
        
        InvitationProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvitationProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvitationProperties} obj Optional instance to populate.
     * @return {module:model/InvitationProperties} The populated <code>InvitationProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvitationProperties();

            if (data.hasOwnProperty('invitationId')) {
                obj['invitationId'] = ApiClient.convertToType(data['invitationId'], 'String');
            }
            if (data.hasOwnProperty('invitationStatus')) {
                obj['invitationStatus'] = ApiClient.convertToType(data['invitationStatus'], 'String');
            }
            if (data.hasOwnProperty('respondedAt')) {
                obj['respondedAt'] = ApiClient.convertToType(data['respondedAt'], 'Date');
            }
            if (data.hasOwnProperty('sentAt')) {
                obj['sentAt'] = ApiClient.convertToType(data['sentAt'], 'Date');
            }
            if (data.hasOwnProperty('targetActiveDirectoryId')) {
                obj['targetActiveDirectoryId'] = ApiClient.convertToType(data['targetActiveDirectoryId'], 'String');
            }
            if (data.hasOwnProperty('targetEmail')) {
                obj['targetEmail'] = ApiClient.convertToType(data['targetEmail'], 'String');
            }
            if (data.hasOwnProperty('targetObjectId')) {
                obj['targetObjectId'] = ApiClient.convertToType(data['targetObjectId'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvitationProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvitationProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['invitationId'] && !(typeof data['invitationId'] === 'string' || data['invitationId'] instanceof String)) {
            throw new Error("Expected the field `invitationId` to be a primitive type in the JSON string but got " + data['invitationId']);
        }
        // ensure the json data is a string
        if (data['invitationStatus'] && !(typeof data['invitationStatus'] === 'string' || data['invitationStatus'] instanceof String)) {
            throw new Error("Expected the field `invitationStatus` to be a primitive type in the JSON string but got " + data['invitationStatus']);
        }
        // ensure the json data is a string
        if (data['targetActiveDirectoryId'] && !(typeof data['targetActiveDirectoryId'] === 'string' || data['targetActiveDirectoryId'] instanceof String)) {
            throw new Error("Expected the field `targetActiveDirectoryId` to be a primitive type in the JSON string but got " + data['targetActiveDirectoryId']);
        }
        // ensure the json data is a string
        if (data['targetEmail'] && !(typeof data['targetEmail'] === 'string' || data['targetEmail'] instanceof String)) {
            throw new Error("Expected the field `targetEmail` to be a primitive type in the JSON string but got " + data['targetEmail']);
        }
        // ensure the json data is a string
        if (data['targetObjectId'] && !(typeof data['targetObjectId'] === 'string' || data['targetObjectId'] instanceof String)) {
            throw new Error("Expected the field `targetObjectId` to be a primitive type in the JSON string but got " + data['targetObjectId']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}



/**
 * unique invitation id
 * @member {String} invitationId
 */
InvitationProperties.prototype['invitationId'] = undefined;

/**
 * The status of the invitation.
 * @member {module:model/InvitationProperties.InvitationStatusEnum} invitationStatus
 */
InvitationProperties.prototype['invitationStatus'] = undefined;

/**
 * The time the recipient responded to the invitation.
 * @member {Date} respondedAt
 */
InvitationProperties.prototype['respondedAt'] = undefined;

/**
 * Gets the time at which the invitation was sent.
 * @member {Date} sentAt
 */
InvitationProperties.prototype['sentAt'] = undefined;

/**
 * The target Azure AD Id. Can't be combined with email.
 * @member {String} targetActiveDirectoryId
 */
InvitationProperties.prototype['targetActiveDirectoryId'] = undefined;

/**
 * The email the invitation is directed to.
 * @member {String} targetEmail
 */
InvitationProperties.prototype['targetEmail'] = undefined;

/**
 * The target user or application Id that invitation is being sent to.  Must be specified along TargetActiveDirectoryId. This enables sending  invitations to specific users or applications in an AD tenant.
 * @member {String} targetObjectId
 */
InvitationProperties.prototype['targetObjectId'] = undefined;

/**
 * Email of the user who created the resource
 * @member {String} userEmail
 */
InvitationProperties.prototype['userEmail'] = undefined;

/**
 * Name of the user who created the resource
 * @member {String} userName
 */
InvitationProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>invitationStatus</code> property.
 * @enum {String}
 * @readonly
 */
InvitationProperties['InvitationStatusEnum'] = {

    /**
     * value: "Pending"
     * @const
     */
    "Pending": "Pending",

    /**
     * value: "Accepted"
     * @const
     */
    "Accepted": "Accepted",

    /**
     * value: "Rejected"
     * @const
     */
    "Rejected": "Rejected",

    /**
     * value: "Withdrawn"
     * @const
     */
    "Withdrawn": "Withdrawn"
};



export default InvitationProperties;

