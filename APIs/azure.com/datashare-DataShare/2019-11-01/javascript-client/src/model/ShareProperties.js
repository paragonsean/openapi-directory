/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShareProperties model module.
 * @module model/ShareProperties
 * @version 2019-11-01
 */
class ShareProperties {
    /**
     * Constructs a new <code>ShareProperties</code>.
     * Share property bag.
     * @alias module:model/ShareProperties
     */
    constructor() { 
        
        ShareProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShareProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareProperties} obj Optional instance to populate.
     * @return {module:model/ShareProperties} The populated <code>ShareProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareProperties();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('shareKind')) {
                obj['shareKind'] = ApiClient.convertToType(data['shareKind'], 'String');
            }
            if (data.hasOwnProperty('terms')) {
                obj['terms'] = ApiClient.convertToType(data['terms'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['shareKind'] && !(typeof data['shareKind'] === 'string' || data['shareKind'] instanceof String)) {
            throw new Error("Expected the field `shareKind` to be a primitive type in the JSON string but got " + data['shareKind']);
        }
        // ensure the json data is a string
        if (data['terms'] && !(typeof data['terms'] === 'string' || data['terms'] instanceof String)) {
            throw new Error("Expected the field `terms` to be a primitive type in the JSON string but got " + data['terms']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}



/**
 * Time at which the share was created.
 * @member {Date} createdAt
 */
ShareProperties.prototype['createdAt'] = undefined;

/**
 * Share description.
 * @member {String} description
 */
ShareProperties.prototype['description'] = undefined;

/**
 * Gets or sets the provisioning state
 * @member {module:model/ShareProperties.ProvisioningStateEnum} provisioningState
 */
ShareProperties.prototype['provisioningState'] = undefined;

/**
 * Share kind.
 * @member {module:model/ShareProperties.ShareKindEnum} shareKind
 */
ShareProperties.prototype['shareKind'] = undefined;

/**
 * Share terms.
 * @member {String} terms
 */
ShareProperties.prototype['terms'] = undefined;

/**
 * Email of the user who created the resource
 * @member {String} userEmail
 */
ShareProperties.prototype['userEmail'] = undefined;

/**
 * Name of the user who created the resource
 * @member {String} userName
 */
ShareProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>shareKind</code> property.
 * @enum {String}
 * @readonly
 */
ShareProperties['ShareKindEnum'] = {

    /**
     * value: "CopyBased"
     * @const
     */
    "CopyBased": "CopyBased",

    /**
     * value: "InPlace"
     * @const
     */
    "InPlace": "InPlace"
};



export default ShareProperties;

