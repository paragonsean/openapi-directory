/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShareSynchronization model module.
 * @module model/ShareSynchronization
 * @version 2019-11-01
 */
class ShareSynchronization {
    /**
     * Constructs a new <code>ShareSynchronization</code>.
     * A ShareSynchronization data transfer object.
     * @alias module:model/ShareSynchronization
     */
    constructor() { 
        
        ShareSynchronization.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ShareSynchronization</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareSynchronization} obj Optional instance to populate.
     * @return {module:model/ShareSynchronization} The populated <code>ShareSynchronization</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareSynchronization();

            if (data.hasOwnProperty('consumerEmail')) {
                obj['consumerEmail'] = ApiClient.convertToType(data['consumerEmail'], 'String');
            }
            if (data.hasOwnProperty('consumerName')) {
                obj['consumerName'] = ApiClient.convertToType(data['consumerName'], 'String');
            }
            if (data.hasOwnProperty('consumerTenantName')) {
                obj['consumerTenantName'] = ApiClient.convertToType(data['consumerTenantName'], 'String');
            }
            if (data.hasOwnProperty('durationMs')) {
                obj['durationMs'] = ApiClient.convertToType(data['durationMs'], 'Number');
            }
            if (data.hasOwnProperty('endTime')) {
                obj['endTime'] = ApiClient.convertToType(data['endTime'], 'Date');
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('startTime')) {
                obj['startTime'] = ApiClient.convertToType(data['startTime'], 'Date');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('synchronizationId')) {
                obj['synchronizationId'] = ApiClient.convertToType(data['synchronizationId'], 'String');
            }
            if (data.hasOwnProperty('synchronizationMode')) {
                obj['synchronizationMode'] = ApiClient.convertToType(data['synchronizationMode'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareSynchronization</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareSynchronization</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consumerEmail'] && !(typeof data['consumerEmail'] === 'string' || data['consumerEmail'] instanceof String)) {
            throw new Error("Expected the field `consumerEmail` to be a primitive type in the JSON string but got " + data['consumerEmail']);
        }
        // ensure the json data is a string
        if (data['consumerName'] && !(typeof data['consumerName'] === 'string' || data['consumerName'] instanceof String)) {
            throw new Error("Expected the field `consumerName` to be a primitive type in the JSON string but got " + data['consumerName']);
        }
        // ensure the json data is a string
        if (data['consumerTenantName'] && !(typeof data['consumerTenantName'] === 'string' || data['consumerTenantName'] instanceof String)) {
            throw new Error("Expected the field `consumerTenantName` to be a primitive type in the JSON string but got " + data['consumerTenantName']);
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['synchronizationId'] && !(typeof data['synchronizationId'] === 'string' || data['synchronizationId'] instanceof String)) {
            throw new Error("Expected the field `synchronizationId` to be a primitive type in the JSON string but got " + data['synchronizationId']);
        }
        // ensure the json data is a string
        if (data['synchronizationMode'] && !(typeof data['synchronizationMode'] === 'string' || data['synchronizationMode'] instanceof String)) {
            throw new Error("Expected the field `synchronizationMode` to be a primitive type in the JSON string but got " + data['synchronizationMode']);
        }

        return true;
    }


}



/**
 * Email of the user who created the synchronization
 * @member {String} consumerEmail
 */
ShareSynchronization.prototype['consumerEmail'] = undefined;

/**
 * Name of the user who created the synchronization
 * @member {String} consumerName
 */
ShareSynchronization.prototype['consumerName'] = undefined;

/**
 * Tenant name of the consumer who created the synchronization
 * @member {String} consumerTenantName
 */
ShareSynchronization.prototype['consumerTenantName'] = undefined;

/**
 * synchronization duration
 * @member {Number} durationMs
 */
ShareSynchronization.prototype['durationMs'] = undefined;

/**
 * End time of synchronization
 * @member {Date} endTime
 */
ShareSynchronization.prototype['endTime'] = undefined;

/**
 * message of synchronization
 * @member {String} message
 */
ShareSynchronization.prototype['message'] = undefined;

/**
 * start time of synchronization
 * @member {Date} startTime
 */
ShareSynchronization.prototype['startTime'] = undefined;

/**
 * Raw Status
 * @member {String} status
 */
ShareSynchronization.prototype['status'] = undefined;

/**
 * Synchronization id
 * @member {String} synchronizationId
 */
ShareSynchronization.prototype['synchronizationId'] = undefined;

/**
 * Synchronization mode
 * @member {module:model/ShareSynchronization.SynchronizationModeEnum} synchronizationMode
 */
ShareSynchronization.prototype['synchronizationMode'] = undefined;





/**
 * Allowed values for the <code>synchronizationMode</code> property.
 * @enum {String}
 * @readonly
 */
ShareSynchronization['SynchronizationModeEnum'] = {

    /**
     * value: "Incremental"
     * @const
     */
    "Incremental": "Incremental",

    /**
     * value: "FullSync"
     * @const
     */
    "FullSync": "FullSync"
};



export default ShareSynchronization;

