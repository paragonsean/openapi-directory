# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SqlDBTableProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_id: str=None, database_name: str=None, schema_name: str=None, sql_server_resource_id: str=None, table_name: str=None):
        """SqlDBTableProperties - a model defined in OpenAPI

        :param data_set_id: The data_set_id of this SqlDBTableProperties.
        :param database_name: The database_name of this SqlDBTableProperties.
        :param schema_name: The schema_name of this SqlDBTableProperties.
        :param sql_server_resource_id: The sql_server_resource_id of this SqlDBTableProperties.
        :param table_name: The table_name of this SqlDBTableProperties.
        """
        self.openapi_types = {
            'data_set_id': str,
            'database_name': str,
            'schema_name': str,
            'sql_server_resource_id': str,
            'table_name': str
        }

        self.attribute_map = {
            'data_set_id': 'dataSetId',
            'database_name': 'databaseName',
            'schema_name': 'schemaName',
            'sql_server_resource_id': 'sqlServerResourceId',
            'table_name': 'tableName'
        }

        self._data_set_id = data_set_id
        self._database_name = database_name
        self._schema_name = schema_name
        self._sql_server_resource_id = sql_server_resource_id
        self._table_name = table_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SqlDBTableProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SqlDBTableProperties of this SqlDBTableProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_id(self):
        """Gets the data_set_id of this SqlDBTableProperties.

        Unique id for identifying a data set resource

        :return: The data_set_id of this SqlDBTableProperties.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this SqlDBTableProperties.

        Unique id for identifying a data set resource

        :param data_set_id: The data_set_id of this SqlDBTableProperties.
        :type data_set_id: str
        """

        self._data_set_id = data_set_id

    @property
    def database_name(self):
        """Gets the database_name of this SqlDBTableProperties.

        Database name of the source data set

        :return: The database_name of this SqlDBTableProperties.
        :rtype: str
        """
        return self._database_name

    @database_name.setter
    def database_name(self, database_name):
        """Sets the database_name of this SqlDBTableProperties.

        Database name of the source data set

        :param database_name: The database_name of this SqlDBTableProperties.
        :type database_name: str
        """
        if database_name is None:
            raise ValueError("Invalid value for `database_name`, must not be `None`")

        self._database_name = database_name

    @property
    def schema_name(self):
        """Gets the schema_name of this SqlDBTableProperties.

        Schema of the table. Default value is dbo.

        :return: The schema_name of this SqlDBTableProperties.
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this SqlDBTableProperties.

        Schema of the table. Default value is dbo.

        :param schema_name: The schema_name of this SqlDBTableProperties.
        :type schema_name: str
        """
        if schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")

        self._schema_name = schema_name

    @property
    def sql_server_resource_id(self):
        """Gets the sql_server_resource_id of this SqlDBTableProperties.

        Resource id of SQL server

        :return: The sql_server_resource_id of this SqlDBTableProperties.
        :rtype: str
        """
        return self._sql_server_resource_id

    @sql_server_resource_id.setter
    def sql_server_resource_id(self, sql_server_resource_id):
        """Sets the sql_server_resource_id of this SqlDBTableProperties.

        Resource id of SQL server

        :param sql_server_resource_id: The sql_server_resource_id of this SqlDBTableProperties.
        :type sql_server_resource_id: str
        """
        if sql_server_resource_id is None:
            raise ValueError("Invalid value for `sql_server_resource_id`, must not be `None`")

        self._sql_server_resource_id = sql_server_resource_id

    @property
    def table_name(self):
        """Gets the table_name of this SqlDBTableProperties.

        SQL DB table name.

        :return: The table_name of this SqlDBTableProperties.
        :rtype: str
        """
        return self._table_name

    @table_name.setter
    def table_name(self, table_name):
        """Sets the table_name of this SqlDBTableProperties.

        SQL DB table name.

        :param table_name: The table_name of this SqlDBTableProperties.
        :type table_name: str
        """
        if table_name is None:
            raise ValueError("Invalid value for `table_name`, must not be `None`")

        self._table_name = table_name
