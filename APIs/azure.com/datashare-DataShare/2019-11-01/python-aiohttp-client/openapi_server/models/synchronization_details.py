# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SynchronizationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_id: str=None, data_set_type: str=None, duration_ms: int=None, end_time: datetime=None, files_read: int=None, files_written: int=None, message: str=None, name: str=None, rows_copied: int=None, rows_read: int=None, size_read: int=None, size_written: int=None, start_time: datetime=None, status: str=None, v_core: int=None):
        """SynchronizationDetails - a model defined in OpenAPI

        :param data_set_id: The data_set_id of this SynchronizationDetails.
        :param data_set_type: The data_set_type of this SynchronizationDetails.
        :param duration_ms: The duration_ms of this SynchronizationDetails.
        :param end_time: The end_time of this SynchronizationDetails.
        :param files_read: The files_read of this SynchronizationDetails.
        :param files_written: The files_written of this SynchronizationDetails.
        :param message: The message of this SynchronizationDetails.
        :param name: The name of this SynchronizationDetails.
        :param rows_copied: The rows_copied of this SynchronizationDetails.
        :param rows_read: The rows_read of this SynchronizationDetails.
        :param size_read: The size_read of this SynchronizationDetails.
        :param size_written: The size_written of this SynchronizationDetails.
        :param start_time: The start_time of this SynchronizationDetails.
        :param status: The status of this SynchronizationDetails.
        :param v_core: The v_core of this SynchronizationDetails.
        """
        self.openapi_types = {
            'data_set_id': str,
            'data_set_type': str,
            'duration_ms': int,
            'end_time': datetime,
            'files_read': int,
            'files_written': int,
            'message': str,
            'name': str,
            'rows_copied': int,
            'rows_read': int,
            'size_read': int,
            'size_written': int,
            'start_time': datetime,
            'status': str,
            'v_core': int
        }

        self.attribute_map = {
            'data_set_id': 'dataSetId',
            'data_set_type': 'dataSetType',
            'duration_ms': 'durationMs',
            'end_time': 'endTime',
            'files_read': 'filesRead',
            'files_written': 'filesWritten',
            'message': 'message',
            'name': 'name',
            'rows_copied': 'rowsCopied',
            'rows_read': 'rowsRead',
            'size_read': 'sizeRead',
            'size_written': 'sizeWritten',
            'start_time': 'startTime',
            'status': 'status',
            'v_core': 'vCore'
        }

        self._data_set_id = data_set_id
        self._data_set_type = data_set_type
        self._duration_ms = duration_ms
        self._end_time = end_time
        self._files_read = files_read
        self._files_written = files_written
        self._message = message
        self._name = name
        self._rows_copied = rows_copied
        self._rows_read = rows_read
        self._size_read = size_read
        self._size_written = size_written
        self._start_time = start_time
        self._status = status
        self._v_core = v_core

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SynchronizationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SynchronizationDetails of this SynchronizationDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_id(self):
        """Gets the data_set_id of this SynchronizationDetails.

        Id of data set

        :return: The data_set_id of this SynchronizationDetails.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this SynchronizationDetails.

        Id of data set

        :param data_set_id: The data_set_id of this SynchronizationDetails.
        :type data_set_id: str
        """

        self._data_set_id = data_set_id

    @property
    def data_set_type(self):
        """Gets the data_set_type of this SynchronizationDetails.

        Type of the data set

        :return: The data_set_type of this SynchronizationDetails.
        :rtype: str
        """
        return self._data_set_type

    @data_set_type.setter
    def data_set_type(self, data_set_type):
        """Sets the data_set_type of this SynchronizationDetails.

        Type of the data set

        :param data_set_type: The data_set_type of this SynchronizationDetails.
        :type data_set_type: str
        """
        allowed_values = ["Blob", "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "AdlsGen1Folder", "AdlsGen1File", "KustoCluster", "KustoDatabase", "SqlDBTable", "SqlDWTable"]  # noqa: E501
        if data_set_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_set_type` ({0}), must be one of {1}"
                .format(data_set_type, allowed_values)
            )

        self._data_set_type = data_set_type

    @property
    def duration_ms(self):
        """Gets the duration_ms of this SynchronizationDetails.

        Duration of data set level copy

        :return: The duration_ms of this SynchronizationDetails.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this SynchronizationDetails.

        Duration of data set level copy

        :param duration_ms: The duration_ms of this SynchronizationDetails.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def end_time(self):
        """Gets the end_time of this SynchronizationDetails.

        End time of data set level copy

        :return: The end_time of this SynchronizationDetails.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this SynchronizationDetails.

        End time of data set level copy

        :param end_time: The end_time of this SynchronizationDetails.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def files_read(self):
        """Gets the files_read of this SynchronizationDetails.

        The number of files read from the source data set

        :return: The files_read of this SynchronizationDetails.
        :rtype: int
        """
        return self._files_read

    @files_read.setter
    def files_read(self, files_read):
        """Sets the files_read of this SynchronizationDetails.

        The number of files read from the source data set

        :param files_read: The files_read of this SynchronizationDetails.
        :type files_read: int
        """

        self._files_read = files_read

    @property
    def files_written(self):
        """Gets the files_written of this SynchronizationDetails.

        The number of files written into the sink data set

        :return: The files_written of this SynchronizationDetails.
        :rtype: int
        """
        return self._files_written

    @files_written.setter
    def files_written(self, files_written):
        """Sets the files_written of this SynchronizationDetails.

        The number of files written into the sink data set

        :param files_written: The files_written of this SynchronizationDetails.
        :type files_written: int
        """

        self._files_written = files_written

    @property
    def message(self):
        """Gets the message of this SynchronizationDetails.

        Error message if any

        :return: The message of this SynchronizationDetails.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SynchronizationDetails.

        Error message if any

        :param message: The message of this SynchronizationDetails.
        :type message: str
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this SynchronizationDetails.

        Name of the data set

        :return: The name of this SynchronizationDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SynchronizationDetails.

        Name of the data set

        :param name: The name of this SynchronizationDetails.
        :type name: str
        """

        self._name = name

    @property
    def rows_copied(self):
        """Gets the rows_copied of this SynchronizationDetails.

        The number of files copied into the sink data set

        :return: The rows_copied of this SynchronizationDetails.
        :rtype: int
        """
        return self._rows_copied

    @rows_copied.setter
    def rows_copied(self, rows_copied):
        """Sets the rows_copied of this SynchronizationDetails.

        The number of files copied into the sink data set

        :param rows_copied: The rows_copied of this SynchronizationDetails.
        :type rows_copied: int
        """

        self._rows_copied = rows_copied

    @property
    def rows_read(self):
        """Gets the rows_read of this SynchronizationDetails.

        The number of rows read from the source data set.

        :return: The rows_read of this SynchronizationDetails.
        :rtype: int
        """
        return self._rows_read

    @rows_read.setter
    def rows_read(self, rows_read):
        """Sets the rows_read of this SynchronizationDetails.

        The number of rows read from the source data set.

        :param rows_read: The rows_read of this SynchronizationDetails.
        :type rows_read: int
        """

        self._rows_read = rows_read

    @property
    def size_read(self):
        """Gets the size_read of this SynchronizationDetails.

        The size of the data read from the source data set in bytes

        :return: The size_read of this SynchronizationDetails.
        :rtype: int
        """
        return self._size_read

    @size_read.setter
    def size_read(self, size_read):
        """Sets the size_read of this SynchronizationDetails.

        The size of the data read from the source data set in bytes

        :param size_read: The size_read of this SynchronizationDetails.
        :type size_read: int
        """

        self._size_read = size_read

    @property
    def size_written(self):
        """Gets the size_written of this SynchronizationDetails.

        The size of the data written into the sink data set in bytes

        :return: The size_written of this SynchronizationDetails.
        :rtype: int
        """
        return self._size_written

    @size_written.setter
    def size_written(self, size_written):
        """Sets the size_written of this SynchronizationDetails.

        The size of the data written into the sink data set in bytes

        :param size_written: The size_written of this SynchronizationDetails.
        :type size_written: int
        """

        self._size_written = size_written

    @property
    def start_time(self):
        """Gets the start_time of this SynchronizationDetails.

        Start time of data set level copy

        :return: The start_time of this SynchronizationDetails.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this SynchronizationDetails.

        Start time of data set level copy

        :param start_time: The start_time of this SynchronizationDetails.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this SynchronizationDetails.

        Raw Status

        :return: The status of this SynchronizationDetails.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this SynchronizationDetails.

        Raw Status

        :param status: The status of this SynchronizationDetails.
        :type status: str
        """

        self._status = status

    @property
    def v_core(self):
        """Gets the v_core of this SynchronizationDetails.

        The vCore units consumed for the data set synchronization

        :return: The v_core of this SynchronizationDetails.
        :rtype: int
        """
        return self._v_core

    @v_core.setter
    def v_core(self, v_core):
        """Sets the v_core of this SynchronizationDetails.

        The vCore units consumed for the data set synchronization

        :param v_core: The v_core of this SynchronizationDetails.
        :type v_core: int
        """

        self._v_core = v_core
