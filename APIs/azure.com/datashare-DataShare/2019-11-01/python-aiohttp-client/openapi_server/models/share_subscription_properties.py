# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareSubscriptionProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, invitation_id: str=None, provider_email: str=None, provider_name: str=None, provider_tenant_name: str=None, provisioning_state: str=None, share_description: str=None, share_kind: str=None, share_name: str=None, share_subscription_status: str=None, share_terms: str=None, source_share_location: str=None, user_email: str=None, user_name: str=None):
        """ShareSubscriptionProperties - a model defined in OpenAPI

        :param created_at: The created_at of this ShareSubscriptionProperties.
        :param invitation_id: The invitation_id of this ShareSubscriptionProperties.
        :param provider_email: The provider_email of this ShareSubscriptionProperties.
        :param provider_name: The provider_name of this ShareSubscriptionProperties.
        :param provider_tenant_name: The provider_tenant_name of this ShareSubscriptionProperties.
        :param provisioning_state: The provisioning_state of this ShareSubscriptionProperties.
        :param share_description: The share_description of this ShareSubscriptionProperties.
        :param share_kind: The share_kind of this ShareSubscriptionProperties.
        :param share_name: The share_name of this ShareSubscriptionProperties.
        :param share_subscription_status: The share_subscription_status of this ShareSubscriptionProperties.
        :param share_terms: The share_terms of this ShareSubscriptionProperties.
        :param source_share_location: The source_share_location of this ShareSubscriptionProperties.
        :param user_email: The user_email of this ShareSubscriptionProperties.
        :param user_name: The user_name of this ShareSubscriptionProperties.
        """
        self.openapi_types = {
            'created_at': datetime,
            'invitation_id': str,
            'provider_email': str,
            'provider_name': str,
            'provider_tenant_name': str,
            'provisioning_state': str,
            'share_description': str,
            'share_kind': str,
            'share_name': str,
            'share_subscription_status': str,
            'share_terms': str,
            'source_share_location': str,
            'user_email': str,
            'user_name': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'invitation_id': 'invitationId',
            'provider_email': 'providerEmail',
            'provider_name': 'providerName',
            'provider_tenant_name': 'providerTenantName',
            'provisioning_state': 'provisioningState',
            'share_description': 'shareDescription',
            'share_kind': 'shareKind',
            'share_name': 'shareName',
            'share_subscription_status': 'shareSubscriptionStatus',
            'share_terms': 'shareTerms',
            'source_share_location': 'sourceShareLocation',
            'user_email': 'userEmail',
            'user_name': 'userName'
        }

        self._created_at = created_at
        self._invitation_id = invitation_id
        self._provider_email = provider_email
        self._provider_name = provider_name
        self._provider_tenant_name = provider_tenant_name
        self._provisioning_state = provisioning_state
        self._share_description = share_description
        self._share_kind = share_kind
        self._share_name = share_name
        self._share_subscription_status = share_subscription_status
        self._share_terms = share_terms
        self._source_share_location = source_share_location
        self._user_email = user_email
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareSubscriptionProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareSubscriptionProperties of this ShareSubscriptionProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ShareSubscriptionProperties.

        Time at which the share subscription was created.

        :return: The created_at of this ShareSubscriptionProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ShareSubscriptionProperties.

        Time at which the share subscription was created.

        :param created_at: The created_at of this ShareSubscriptionProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def invitation_id(self):
        """Gets the invitation_id of this ShareSubscriptionProperties.

        The invitation id.

        :return: The invitation_id of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this ShareSubscriptionProperties.

        The invitation id.

        :param invitation_id: The invitation_id of this ShareSubscriptionProperties.
        :type invitation_id: str
        """
        if invitation_id is None:
            raise ValueError("Invalid value for `invitation_id`, must not be `None`")

        self._invitation_id = invitation_id

    @property
    def provider_email(self):
        """Gets the provider_email of this ShareSubscriptionProperties.

        Email of the provider who created the resource

        :return: The provider_email of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._provider_email

    @provider_email.setter
    def provider_email(self, provider_email):
        """Sets the provider_email of this ShareSubscriptionProperties.

        Email of the provider who created the resource

        :param provider_email: The provider_email of this ShareSubscriptionProperties.
        :type provider_email: str
        """

        self._provider_email = provider_email

    @property
    def provider_name(self):
        """Gets the provider_name of this ShareSubscriptionProperties.

        Name of the provider who created the resource

        :return: The provider_name of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this ShareSubscriptionProperties.

        Name of the provider who created the resource

        :param provider_name: The provider_name of this ShareSubscriptionProperties.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def provider_tenant_name(self):
        """Gets the provider_tenant_name of this ShareSubscriptionProperties.

        Tenant name of the provider who created the resource

        :return: The provider_tenant_name of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._provider_tenant_name

    @provider_tenant_name.setter
    def provider_tenant_name(self, provider_tenant_name):
        """Sets the provider_tenant_name of this ShareSubscriptionProperties.

        Tenant name of the provider who created the resource

        :param provider_tenant_name: The provider_tenant_name of this ShareSubscriptionProperties.
        :type provider_tenant_name: str
        """

        self._provider_tenant_name = provider_tenant_name

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ShareSubscriptionProperties.

        Provisioning state of the share subscription

        :return: The provisioning_state of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ShareSubscriptionProperties.

        Provisioning state of the share subscription

        :param provisioning_state: The provisioning_state of this ShareSubscriptionProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Creating", "Deleting", "Moving", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def share_description(self):
        """Gets the share_description of this ShareSubscriptionProperties.

        Description of share

        :return: The share_description of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._share_description

    @share_description.setter
    def share_description(self, share_description):
        """Sets the share_description of this ShareSubscriptionProperties.

        Description of share

        :param share_description: The share_description of this ShareSubscriptionProperties.
        :type share_description: str
        """

        self._share_description = share_description

    @property
    def share_kind(self):
        """Gets the share_kind of this ShareSubscriptionProperties.

        Kind of share

        :return: The share_kind of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._share_kind

    @share_kind.setter
    def share_kind(self, share_kind):
        """Sets the share_kind of this ShareSubscriptionProperties.

        Kind of share

        :param share_kind: The share_kind of this ShareSubscriptionProperties.
        :type share_kind: str
        """
        allowed_values = ["CopyBased", "InPlace"]  # noqa: E501
        if share_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `share_kind` ({0}), must be one of {1}"
                .format(share_kind, allowed_values)
            )

        self._share_kind = share_kind

    @property
    def share_name(self):
        """Gets the share_name of this ShareSubscriptionProperties.

        Name of the share

        :return: The share_name of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this ShareSubscriptionProperties.

        Name of the share

        :param share_name: The share_name of this ShareSubscriptionProperties.
        :type share_name: str
        """

        self._share_name = share_name

    @property
    def share_subscription_status(self):
        """Gets the share_subscription_status of this ShareSubscriptionProperties.

        Gets the current status of share subscription.

        :return: The share_subscription_status of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._share_subscription_status

    @share_subscription_status.setter
    def share_subscription_status(self, share_subscription_status):
        """Sets the share_subscription_status of this ShareSubscriptionProperties.

        Gets the current status of share subscription.

        :param share_subscription_status: The share_subscription_status of this ShareSubscriptionProperties.
        :type share_subscription_status: str
        """
        allowed_values = ["Active", "Revoked", "SourceDeleted", "Revoking"]  # noqa: E501
        if share_subscription_status not in allowed_values:
            raise ValueError(
                "Invalid value for `share_subscription_status` ({0}), must be one of {1}"
                .format(share_subscription_status, allowed_values)
            )

        self._share_subscription_status = share_subscription_status

    @property
    def share_terms(self):
        """Gets the share_terms of this ShareSubscriptionProperties.

        Terms of a share

        :return: The share_terms of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._share_terms

    @share_terms.setter
    def share_terms(self, share_terms):
        """Sets the share_terms of this ShareSubscriptionProperties.

        Terms of a share

        :param share_terms: The share_terms of this ShareSubscriptionProperties.
        :type share_terms: str
        """

        self._share_terms = share_terms

    @property
    def source_share_location(self):
        """Gets the source_share_location of this ShareSubscriptionProperties.

        Source share location.

        :return: The source_share_location of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._source_share_location

    @source_share_location.setter
    def source_share_location(self, source_share_location):
        """Sets the source_share_location of this ShareSubscriptionProperties.

        Source share location.

        :param source_share_location: The source_share_location of this ShareSubscriptionProperties.
        :type source_share_location: str
        """
        if source_share_location is None:
            raise ValueError("Invalid value for `source_share_location`, must not be `None`")

        self._source_share_location = source_share_location

    @property
    def user_email(self):
        """Gets the user_email of this ShareSubscriptionProperties.

        Email of the user who created the resource

        :return: The user_email of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ShareSubscriptionProperties.

        Email of the user who created the resource

        :param user_email: The user_email of this ShareSubscriptionProperties.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this ShareSubscriptionProperties.

        Name of the user who created the resource

        :return: The user_name of this ShareSubscriptionProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ShareSubscriptionProperties.

        Name of the user who created the resource

        :param user_name: The user_name of this ShareSubscriptionProperties.
        :type user_name: str
        """

        self._user_name = user_name
