# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsumerInvitationProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_count: int=None, description: str=None, invitation_id: str=None, invitation_status: str=None, location: str=None, provider_email: str=None, provider_name: str=None, provider_tenant_name: str=None, responded_at: datetime=None, sent_at: datetime=None, share_name: str=None, terms_of_use: str=None, user_email: str=None, user_name: str=None):
        """ConsumerInvitationProperties - a model defined in OpenAPI

        :param data_set_count: The data_set_count of this ConsumerInvitationProperties.
        :param description: The description of this ConsumerInvitationProperties.
        :param invitation_id: The invitation_id of this ConsumerInvitationProperties.
        :param invitation_status: The invitation_status of this ConsumerInvitationProperties.
        :param location: The location of this ConsumerInvitationProperties.
        :param provider_email: The provider_email of this ConsumerInvitationProperties.
        :param provider_name: The provider_name of this ConsumerInvitationProperties.
        :param provider_tenant_name: The provider_tenant_name of this ConsumerInvitationProperties.
        :param responded_at: The responded_at of this ConsumerInvitationProperties.
        :param sent_at: The sent_at of this ConsumerInvitationProperties.
        :param share_name: The share_name of this ConsumerInvitationProperties.
        :param terms_of_use: The terms_of_use of this ConsumerInvitationProperties.
        :param user_email: The user_email of this ConsumerInvitationProperties.
        :param user_name: The user_name of this ConsumerInvitationProperties.
        """
        self.openapi_types = {
            'data_set_count': int,
            'description': str,
            'invitation_id': str,
            'invitation_status': str,
            'location': str,
            'provider_email': str,
            'provider_name': str,
            'provider_tenant_name': str,
            'responded_at': datetime,
            'sent_at': datetime,
            'share_name': str,
            'terms_of_use': str,
            'user_email': str,
            'user_name': str
        }

        self.attribute_map = {
            'data_set_count': 'dataSetCount',
            'description': 'description',
            'invitation_id': 'invitationId',
            'invitation_status': 'invitationStatus',
            'location': 'location',
            'provider_email': 'providerEmail',
            'provider_name': 'providerName',
            'provider_tenant_name': 'providerTenantName',
            'responded_at': 'respondedAt',
            'sent_at': 'sentAt',
            'share_name': 'shareName',
            'terms_of_use': 'termsOfUse',
            'user_email': 'userEmail',
            'user_name': 'userName'
        }

        self._data_set_count = data_set_count
        self._description = description
        self._invitation_id = invitation_id
        self._invitation_status = invitation_status
        self._location = location
        self._provider_email = provider_email
        self._provider_name = provider_name
        self._provider_tenant_name = provider_tenant_name
        self._responded_at = responded_at
        self._sent_at = sent_at
        self._share_name = share_name
        self._terms_of_use = terms_of_use
        self._user_email = user_email
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerInvitationProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerInvitationProperties of this ConsumerInvitationProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_count(self):
        """Gets the data_set_count of this ConsumerInvitationProperties.

        Number of data sets in a share

        :return: The data_set_count of this ConsumerInvitationProperties.
        :rtype: int
        """
        return self._data_set_count

    @data_set_count.setter
    def data_set_count(self, data_set_count):
        """Sets the data_set_count of this ConsumerInvitationProperties.

        Number of data sets in a share

        :param data_set_count: The data_set_count of this ConsumerInvitationProperties.
        :type data_set_count: int
        """

        self._data_set_count = data_set_count

    @property
    def description(self):
        """Gets the description of this ConsumerInvitationProperties.

        Description shared when the invitation was created

        :return: The description of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ConsumerInvitationProperties.

        Description shared when the invitation was created

        :param description: The description of this ConsumerInvitationProperties.
        :type description: str
        """

        self._description = description

    @property
    def invitation_id(self):
        """Gets the invitation_id of this ConsumerInvitationProperties.

        Unique id of the invitation.

        :return: The invitation_id of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._invitation_id

    @invitation_id.setter
    def invitation_id(self, invitation_id):
        """Sets the invitation_id of this ConsumerInvitationProperties.

        Unique id of the invitation.

        :param invitation_id: The invitation_id of this ConsumerInvitationProperties.
        :type invitation_id: str
        """
        if invitation_id is None:
            raise ValueError("Invalid value for `invitation_id`, must not be `None`")

        self._invitation_id = invitation_id

    @property
    def invitation_status(self):
        """Gets the invitation_status of this ConsumerInvitationProperties.

        The status of the invitation.

        :return: The invitation_status of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._invitation_status

    @invitation_status.setter
    def invitation_status(self, invitation_status):
        """Sets the invitation_status of this ConsumerInvitationProperties.

        The status of the invitation.

        :param invitation_status: The invitation_status of this ConsumerInvitationProperties.
        :type invitation_status: str
        """
        allowed_values = ["Pending", "Accepted", "Rejected", "Withdrawn"]  # noqa: E501
        if invitation_status not in allowed_values:
            raise ValueError(
                "Invalid value for `invitation_status` ({0}), must be one of {1}"
                .format(invitation_status, allowed_values)
            )

        self._invitation_status = invitation_status

    @property
    def location(self):
        """Gets the location of this ConsumerInvitationProperties.

        invitation location

        :return: The location of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ConsumerInvitationProperties.

        invitation location

        :param location: The location of this ConsumerInvitationProperties.
        :type location: str
        """

        self._location = location

    @property
    def provider_email(self):
        """Gets the provider_email of this ConsumerInvitationProperties.

        Email of the provider who created the resource

        :return: The provider_email of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._provider_email

    @provider_email.setter
    def provider_email(self, provider_email):
        """Sets the provider_email of this ConsumerInvitationProperties.

        Email of the provider who created the resource

        :param provider_email: The provider_email of this ConsumerInvitationProperties.
        :type provider_email: str
        """

        self._provider_email = provider_email

    @property
    def provider_name(self):
        """Gets the provider_name of this ConsumerInvitationProperties.

        Name of the provider who created the resource

        :return: The provider_name of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """Sets the provider_name of this ConsumerInvitationProperties.

        Name of the provider who created the resource

        :param provider_name: The provider_name of this ConsumerInvitationProperties.
        :type provider_name: str
        """

        self._provider_name = provider_name

    @property
    def provider_tenant_name(self):
        """Gets the provider_tenant_name of this ConsumerInvitationProperties.

        Tenant name of the provider who created the resource

        :return: The provider_tenant_name of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._provider_tenant_name

    @provider_tenant_name.setter
    def provider_tenant_name(self, provider_tenant_name):
        """Sets the provider_tenant_name of this ConsumerInvitationProperties.

        Tenant name of the provider who created the resource

        :param provider_tenant_name: The provider_tenant_name of this ConsumerInvitationProperties.
        :type provider_tenant_name: str
        """

        self._provider_tenant_name = provider_tenant_name

    @property
    def responded_at(self):
        """Gets the responded_at of this ConsumerInvitationProperties.

        The time the recipient responded to the invitation.

        :return: The responded_at of this ConsumerInvitationProperties.
        :rtype: datetime
        """
        return self._responded_at

    @responded_at.setter
    def responded_at(self, responded_at):
        """Sets the responded_at of this ConsumerInvitationProperties.

        The time the recipient responded to the invitation.

        :param responded_at: The responded_at of this ConsumerInvitationProperties.
        :type responded_at: datetime
        """

        self._responded_at = responded_at

    @property
    def sent_at(self):
        """Gets the sent_at of this ConsumerInvitationProperties.

        Gets the time at which the invitation was sent.

        :return: The sent_at of this ConsumerInvitationProperties.
        :rtype: datetime
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at):
        """Sets the sent_at of this ConsumerInvitationProperties.

        Gets the time at which the invitation was sent.

        :param sent_at: The sent_at of this ConsumerInvitationProperties.
        :type sent_at: datetime
        """

        self._sent_at = sent_at

    @property
    def share_name(self):
        """Gets the share_name of this ConsumerInvitationProperties.

        Gets the source share Name.

        :return: The share_name of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._share_name

    @share_name.setter
    def share_name(self, share_name):
        """Sets the share_name of this ConsumerInvitationProperties.

        Gets the source share Name.

        :param share_name: The share_name of this ConsumerInvitationProperties.
        :type share_name: str
        """

        self._share_name = share_name

    @property
    def terms_of_use(self):
        """Gets the terms_of_use of this ConsumerInvitationProperties.

        Terms of use shared when the invitation was created

        :return: The terms_of_use of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._terms_of_use

    @terms_of_use.setter
    def terms_of_use(self, terms_of_use):
        """Sets the terms_of_use of this ConsumerInvitationProperties.

        Terms of use shared when the invitation was created

        :param terms_of_use: The terms_of_use of this ConsumerInvitationProperties.
        :type terms_of_use: str
        """

        self._terms_of_use = terms_of_use

    @property
    def user_email(self):
        """Gets the user_email of this ConsumerInvitationProperties.

        Email of the user who created the resource

        :return: The user_email of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ConsumerInvitationProperties.

        Email of the user who created the resource

        :param user_email: The user_email of this ConsumerInvitationProperties.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this ConsumerInvitationProperties.

        Name of the user who created the resource

        :return: The user_name of this ConsumerInvitationProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ConsumerInvitationProperties.

        Name of the user who created the resource

        :param user_name: The user_name of this ConsumerInvitationProperties.
        :type user_name: str
        """

        self._user_name = user_name
