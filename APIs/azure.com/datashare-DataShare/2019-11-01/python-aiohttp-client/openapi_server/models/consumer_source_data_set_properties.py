# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ConsumerSourceDataSetProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_id: str=None, data_set_location: str=None, data_set_name: str=None, data_set_path: str=None, data_set_type: str=None):
        """ConsumerSourceDataSetProperties - a model defined in OpenAPI

        :param data_set_id: The data_set_id of this ConsumerSourceDataSetProperties.
        :param data_set_location: The data_set_location of this ConsumerSourceDataSetProperties.
        :param data_set_name: The data_set_name of this ConsumerSourceDataSetProperties.
        :param data_set_path: The data_set_path of this ConsumerSourceDataSetProperties.
        :param data_set_type: The data_set_type of this ConsumerSourceDataSetProperties.
        """
        self.openapi_types = {
            'data_set_id': str,
            'data_set_location': str,
            'data_set_name': str,
            'data_set_path': str,
            'data_set_type': str
        }

        self.attribute_map = {
            'data_set_id': 'dataSetId',
            'data_set_location': 'dataSetLocation',
            'data_set_name': 'dataSetName',
            'data_set_path': 'dataSetPath',
            'data_set_type': 'dataSetType'
        }

        self._data_set_id = data_set_id
        self._data_set_location = data_set_location
        self._data_set_name = data_set_name
        self._data_set_path = data_set_path
        self._data_set_type = data_set_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConsumerSourceDataSetProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ConsumerSourceDataSetProperties of this ConsumerSourceDataSetProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_id(self):
        """Gets the data_set_id of this ConsumerSourceDataSetProperties.

        DataSet Id

        :return: The data_set_id of this ConsumerSourceDataSetProperties.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this ConsumerSourceDataSetProperties.

        DataSet Id

        :param data_set_id: The data_set_id of this ConsumerSourceDataSetProperties.
        :type data_set_id: str
        """

        self._data_set_id = data_set_id

    @property
    def data_set_location(self):
        """Gets the data_set_location of this ConsumerSourceDataSetProperties.

        Location of the data set.

        :return: The data_set_location of this ConsumerSourceDataSetProperties.
        :rtype: str
        """
        return self._data_set_location

    @data_set_location.setter
    def data_set_location(self, data_set_location):
        """Sets the data_set_location of this ConsumerSourceDataSetProperties.

        Location of the data set.

        :param data_set_location: The data_set_location of this ConsumerSourceDataSetProperties.
        :type data_set_location: str
        """

        self._data_set_location = data_set_location

    @property
    def data_set_name(self):
        """Gets the data_set_name of this ConsumerSourceDataSetProperties.

        DataSet name

        :return: The data_set_name of this ConsumerSourceDataSetProperties.
        :rtype: str
        """
        return self._data_set_name

    @data_set_name.setter
    def data_set_name(self, data_set_name):
        """Sets the data_set_name of this ConsumerSourceDataSetProperties.

        DataSet name

        :param data_set_name: The data_set_name of this ConsumerSourceDataSetProperties.
        :type data_set_name: str
        """

        self._data_set_name = data_set_name

    @property
    def data_set_path(self):
        """Gets the data_set_path of this ConsumerSourceDataSetProperties.

        DataSet path

        :return: The data_set_path of this ConsumerSourceDataSetProperties.
        :rtype: str
        """
        return self._data_set_path

    @data_set_path.setter
    def data_set_path(self, data_set_path):
        """Sets the data_set_path of this ConsumerSourceDataSetProperties.

        DataSet path

        :param data_set_path: The data_set_path of this ConsumerSourceDataSetProperties.
        :type data_set_path: str
        """

        self._data_set_path = data_set_path

    @property
    def data_set_type(self):
        """Gets the data_set_type of this ConsumerSourceDataSetProperties.

        Type of data set

        :return: The data_set_type of this ConsumerSourceDataSetProperties.
        :rtype: str
        """
        return self._data_set_type

    @data_set_type.setter
    def data_set_type(self, data_set_type):
        """Sets the data_set_type of this ConsumerSourceDataSetProperties.

        Type of data set

        :param data_set_type: The data_set_type of this ConsumerSourceDataSetProperties.
        :type data_set_type: str
        """
        allowed_values = ["Blob", "Container", "BlobFolder", "AdlsGen2FileSystem", "AdlsGen2Folder", "AdlsGen2File", "AdlsGen1Folder", "AdlsGen1File", "KustoCluster", "KustoDatabase", "SqlDBTable", "SqlDWTable"]  # noqa: E501
        if data_set_type not in allowed_values:
            raise ValueError(
                "Invalid value for `data_set_type` ({0}), must be one of {1}"
                .format(data_set_type, allowed_values)
            )

        self._data_set_type = data_set_type
