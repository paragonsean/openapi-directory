# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class KustoClusterDataSetMappingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data_set_id: str=None, data_set_mapping_status: str=None, kusto_cluster_resource_id: str=None, location: str=None, provisioning_state: str=None):
        """KustoClusterDataSetMappingProperties - a model defined in OpenAPI

        :param data_set_id: The data_set_id of this KustoClusterDataSetMappingProperties.
        :param data_set_mapping_status: The data_set_mapping_status of this KustoClusterDataSetMappingProperties.
        :param kusto_cluster_resource_id: The kusto_cluster_resource_id of this KustoClusterDataSetMappingProperties.
        :param location: The location of this KustoClusterDataSetMappingProperties.
        :param provisioning_state: The provisioning_state of this KustoClusterDataSetMappingProperties.
        """
        self.openapi_types = {
            'data_set_id': str,
            'data_set_mapping_status': str,
            'kusto_cluster_resource_id': str,
            'location': str,
            'provisioning_state': str
        }

        self.attribute_map = {
            'data_set_id': 'dataSetId',
            'data_set_mapping_status': 'dataSetMappingStatus',
            'kusto_cluster_resource_id': 'kustoClusterResourceId',
            'location': 'location',
            'provisioning_state': 'provisioningState'
        }

        self._data_set_id = data_set_id
        self._data_set_mapping_status = data_set_mapping_status
        self._kusto_cluster_resource_id = kusto_cluster_resource_id
        self._location = location
        self._provisioning_state = provisioning_state

    @classmethod
    def from_dict(cls, dikt: dict) -> 'KustoClusterDataSetMappingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The KustoClusterDataSetMappingProperties of this KustoClusterDataSetMappingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data_set_id(self):
        """Gets the data_set_id of this KustoClusterDataSetMappingProperties.

        The id of the source data set.

        :return: The data_set_id of this KustoClusterDataSetMappingProperties.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this KustoClusterDataSetMappingProperties.

        The id of the source data set.

        :param data_set_id: The data_set_id of this KustoClusterDataSetMappingProperties.
        :type data_set_id: str
        """
        if data_set_id is None:
            raise ValueError("Invalid value for `data_set_id`, must not be `None`")

        self._data_set_id = data_set_id

    @property
    def data_set_mapping_status(self):
        """Gets the data_set_mapping_status of this KustoClusterDataSetMappingProperties.

        Gets the status of the data set mapping.

        :return: The data_set_mapping_status of this KustoClusterDataSetMappingProperties.
        :rtype: str
        """
        return self._data_set_mapping_status

    @data_set_mapping_status.setter
    def data_set_mapping_status(self, data_set_mapping_status):
        """Sets the data_set_mapping_status of this KustoClusterDataSetMappingProperties.

        Gets the status of the data set mapping.

        :param data_set_mapping_status: The data_set_mapping_status of this KustoClusterDataSetMappingProperties.
        :type data_set_mapping_status: str
        """
        allowed_values = ["Ok", "Broken"]  # noqa: E501
        if data_set_mapping_status not in allowed_values:
            raise ValueError(
                "Invalid value for `data_set_mapping_status` ({0}), must be one of {1}"
                .format(data_set_mapping_status, allowed_values)
            )

        self._data_set_mapping_status = data_set_mapping_status

    @property
    def kusto_cluster_resource_id(self):
        """Gets the kusto_cluster_resource_id of this KustoClusterDataSetMappingProperties.

        Resource id of the sink kusto cluster.

        :return: The kusto_cluster_resource_id of this KustoClusterDataSetMappingProperties.
        :rtype: str
        """
        return self._kusto_cluster_resource_id

    @kusto_cluster_resource_id.setter
    def kusto_cluster_resource_id(self, kusto_cluster_resource_id):
        """Sets the kusto_cluster_resource_id of this KustoClusterDataSetMappingProperties.

        Resource id of the sink kusto cluster.

        :param kusto_cluster_resource_id: The kusto_cluster_resource_id of this KustoClusterDataSetMappingProperties.
        :type kusto_cluster_resource_id: str
        """
        if kusto_cluster_resource_id is None:
            raise ValueError("Invalid value for `kusto_cluster_resource_id`, must not be `None`")

        self._kusto_cluster_resource_id = kusto_cluster_resource_id

    @property
    def location(self):
        """Gets the location of this KustoClusterDataSetMappingProperties.

        Location of the sink kusto cluster.

        :return: The location of this KustoClusterDataSetMappingProperties.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this KustoClusterDataSetMappingProperties.

        Location of the sink kusto cluster.

        :param location: The location of this KustoClusterDataSetMappingProperties.
        :type location: str
        """

        self._location = location

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this KustoClusterDataSetMappingProperties.

        Provisioning state of the data set mapping.

        :return: The provisioning_state of this KustoClusterDataSetMappingProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this KustoClusterDataSetMappingProperties.

        Provisioning state of the data set mapping.

        :param provisioning_state: The provisioning_state of this KustoClusterDataSetMappingProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Creating", "Deleting", "Moving", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state
