/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A Scheduled trigger data transfer object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ScheduledTriggerProperties {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets the provisioning state
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    MOVING("Moving"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  /**
   * Recurrence Interval
   */
  @JsonAdapter(RecurrenceIntervalEnum.Adapter.class)
  public enum RecurrenceIntervalEnum {
    HOUR("Hour"),
    
    DAY("Day");

    private String value;

    RecurrenceIntervalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RecurrenceIntervalEnum fromValue(String value) {
      for (RecurrenceIntervalEnum b : RecurrenceIntervalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RecurrenceIntervalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RecurrenceIntervalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RecurrenceIntervalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RecurrenceIntervalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RecurrenceIntervalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RECURRENCE_INTERVAL = "recurrenceInterval";
  @SerializedName(SERIALIZED_NAME_RECURRENCE_INTERVAL)
  private RecurrenceIntervalEnum recurrenceInterval;

  /**
   * Synchronization mode
   */
  @JsonAdapter(SynchronizationModeEnum.Adapter.class)
  public enum SynchronizationModeEnum {
    INCREMENTAL("Incremental"),
    
    FULL_SYNC("FullSync");

    private String value;

    SynchronizationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SynchronizationModeEnum fromValue(String value) {
      for (SynchronizationModeEnum b : SynchronizationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SynchronizationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SynchronizationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SynchronizationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SynchronizationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SynchronizationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNCHRONIZATION_MODE = "synchronizationMode";
  @SerializedName(SERIALIZED_NAME_SYNCHRONIZATION_MODE)
  private SynchronizationModeEnum synchronizationMode;

  public static final String SERIALIZED_NAME_SYNCHRONIZATION_TIME = "synchronizationTime";
  @SerializedName(SERIALIZED_NAME_SYNCHRONIZATION_TIME)
  private OffsetDateTime synchronizationTime;

  /**
   * Gets the trigger state
   */
  @JsonAdapter(TriggerStatusEnum.Adapter.class)
  public enum TriggerStatusEnum {
    ACTIVE("Active"),
    
    INACTIVE("Inactive"),
    
    SOURCE_SYNCHRONIZATION_SETTING_DELETED("SourceSynchronizationSettingDeleted");

    private String value;

    TriggerStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerStatusEnum fromValue(String value) {
      for (TriggerStatusEnum b : TriggerStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TriggerStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_STATUS = "triggerStatus";
  @SerializedName(SERIALIZED_NAME_TRIGGER_STATUS)
  private TriggerStatusEnum triggerStatus;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ScheduledTriggerProperties() {
  }

  public ScheduledTriggerProperties(
     OffsetDateTime createdAt, 
     ProvisioningStateEnum provisioningState, 
     TriggerStatusEnum triggerStatus, 
     String userName
  ) {
    this();
    this.createdAt = createdAt;
    this.provisioningState = provisioningState;
    this.triggerStatus = triggerStatus;
    this.userName = userName;
  }

  /**
   * Time at which the trigger was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Gets the provisioning state
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ScheduledTriggerProperties recurrenceInterval(RecurrenceIntervalEnum recurrenceInterval) {
    this.recurrenceInterval = recurrenceInterval;
    return this;
  }

  /**
   * Recurrence Interval
   * @return recurrenceInterval
   */
  @javax.annotation.Nonnull
  public RecurrenceIntervalEnum getRecurrenceInterval() {
    return recurrenceInterval;
  }

  public void setRecurrenceInterval(RecurrenceIntervalEnum recurrenceInterval) {
    this.recurrenceInterval = recurrenceInterval;
  }


  public ScheduledTriggerProperties synchronizationMode(SynchronizationModeEnum synchronizationMode) {
    this.synchronizationMode = synchronizationMode;
    return this;
  }

  /**
   * Synchronization mode
   * @return synchronizationMode
   */
  @javax.annotation.Nullable
  public SynchronizationModeEnum getSynchronizationMode() {
    return synchronizationMode;
  }

  public void setSynchronizationMode(SynchronizationModeEnum synchronizationMode) {
    this.synchronizationMode = synchronizationMode;
  }


  public ScheduledTriggerProperties synchronizationTime(OffsetDateTime synchronizationTime) {
    this.synchronizationTime = synchronizationTime;
    return this;
  }

  /**
   * Synchronization time
   * @return synchronizationTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSynchronizationTime() {
    return synchronizationTime;
  }

  public void setSynchronizationTime(OffsetDateTime synchronizationTime) {
    this.synchronizationTime = synchronizationTime;
  }


  /**
   * Gets the trigger state
   * @return triggerStatus
   */
  @javax.annotation.Nullable
  public TriggerStatusEnum getTriggerStatus() {
    return triggerStatus;
  }



  /**
   * Name of the user who created the trigger.
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ScheduledTriggerProperties scheduledTriggerProperties = (ScheduledTriggerProperties) o;
    return Objects.equals(this.createdAt, scheduledTriggerProperties.createdAt) &&
        Objects.equals(this.provisioningState, scheduledTriggerProperties.provisioningState) &&
        Objects.equals(this.recurrenceInterval, scheduledTriggerProperties.recurrenceInterval) &&
        Objects.equals(this.synchronizationMode, scheduledTriggerProperties.synchronizationMode) &&
        Objects.equals(this.synchronizationTime, scheduledTriggerProperties.synchronizationTime) &&
        Objects.equals(this.triggerStatus, scheduledTriggerProperties.triggerStatus) &&
        Objects.equals(this.userName, scheduledTriggerProperties.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, provisioningState, recurrenceInterval, synchronizationMode, synchronizationTime, triggerStatus, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ScheduledTriggerProperties {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    recurrenceInterval: ").append(toIndentedString(recurrenceInterval)).append("\n");
    sb.append("    synchronizationMode: ").append(toIndentedString(synchronizationMode)).append("\n");
    sb.append("    synchronizationTime: ").append(toIndentedString(synchronizationTime)).append("\n");
    sb.append("    triggerStatus: ").append(toIndentedString(triggerStatus)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("provisioningState");
    openapiFields.add("recurrenceInterval");
    openapiFields.add("synchronizationMode");
    openapiFields.add("synchronizationTime");
    openapiFields.add("triggerStatus");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("recurrenceInterval");
    openapiRequiredFields.add("synchronizationTime");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ScheduledTriggerProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ScheduledTriggerProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ScheduledTriggerProperties is not found in the empty JSON string", ScheduledTriggerProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ScheduledTriggerProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ScheduledTriggerProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ScheduledTriggerProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (!jsonObj.get("recurrenceInterval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recurrenceInterval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recurrenceInterval").toString()));
      }
      // validate the required field `recurrenceInterval`
      RecurrenceIntervalEnum.validateJsonElement(jsonObj.get("recurrenceInterval"));
      if ((jsonObj.get("synchronizationMode") != null && !jsonObj.get("synchronizationMode").isJsonNull()) && !jsonObj.get("synchronizationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synchronizationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synchronizationMode").toString()));
      }
      // validate the optional field `synchronizationMode`
      if (jsonObj.get("synchronizationMode") != null && !jsonObj.get("synchronizationMode").isJsonNull()) {
        SynchronizationModeEnum.validateJsonElement(jsonObj.get("synchronizationMode"));
      }
      if ((jsonObj.get("triggerStatus") != null && !jsonObj.get("triggerStatus").isJsonNull()) && !jsonObj.get("triggerStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerStatus").toString()));
      }
      // validate the optional field `triggerStatus`
      if (jsonObj.get("triggerStatus") != null && !jsonObj.get("triggerStatus").isJsonNull()) {
        TriggerStatusEnum.validateJsonElement(jsonObj.get("triggerStatus"));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ScheduledTriggerProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ScheduledTriggerProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ScheduledTriggerProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ScheduledTriggerProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ScheduledTriggerProperties>() {
           @Override
           public void write(JsonWriter out, ScheduledTriggerProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ScheduledTriggerProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ScheduledTriggerProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ScheduledTriggerProperties
   * @throws IOException if the JSON string is invalid with respect to ScheduledTriggerProperties
   */
  public static ScheduledTriggerProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ScheduledTriggerProperties.class);
  }

  /**
   * Convert an instance of ScheduledTriggerProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

