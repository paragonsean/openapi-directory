/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Invitation property bag.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvitationProperties {
  public static final String SERIALIZED_NAME_INVITATION_ID = "invitationId";
  @SerializedName(SERIALIZED_NAME_INVITATION_ID)
  private String invitationId;

  /**
   * The status of the invitation.
   */
  @JsonAdapter(InvitationStatusEnum.Adapter.class)
  public enum InvitationStatusEnum {
    PENDING("Pending"),
    
    ACCEPTED("Accepted"),
    
    REJECTED("Rejected"),
    
    WITHDRAWN("Withdrawn");

    private String value;

    InvitationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvitationStatusEnum fromValue(String value) {
      for (InvitationStatusEnum b : InvitationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvitationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvitationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvitationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvitationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvitationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVITATION_STATUS = "invitationStatus";
  @SerializedName(SERIALIZED_NAME_INVITATION_STATUS)
  private InvitationStatusEnum invitationStatus;

  public static final String SERIALIZED_NAME_RESPONDED_AT = "respondedAt";
  @SerializedName(SERIALIZED_NAME_RESPONDED_AT)
  private OffsetDateTime respondedAt;

  public static final String SERIALIZED_NAME_SENT_AT = "sentAt";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private OffsetDateTime sentAt;

  public static final String SERIALIZED_NAME_TARGET_ACTIVE_DIRECTORY_ID = "targetActiveDirectoryId";
  @SerializedName(SERIALIZED_NAME_TARGET_ACTIVE_DIRECTORY_ID)
  private String targetActiveDirectoryId;

  public static final String SERIALIZED_NAME_TARGET_EMAIL = "targetEmail";
  @SerializedName(SERIALIZED_NAME_TARGET_EMAIL)
  private String targetEmail;

  public static final String SERIALIZED_NAME_TARGET_OBJECT_ID = "targetObjectId";
  @SerializedName(SERIALIZED_NAME_TARGET_OBJECT_ID)
  private String targetObjectId;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public InvitationProperties() {
  }

  public InvitationProperties(
     String invitationId, 
     InvitationStatusEnum invitationStatus, 
     OffsetDateTime respondedAt, 
     OffsetDateTime sentAt, 
     String userEmail, 
     String userName
  ) {
    this();
    this.invitationId = invitationId;
    this.invitationStatus = invitationStatus;
    this.respondedAt = respondedAt;
    this.sentAt = sentAt;
    this.userEmail = userEmail;
    this.userName = userName;
  }

  /**
   * unique invitation id
   * @return invitationId
   */
  @javax.annotation.Nullable
  public String getInvitationId() {
    return invitationId;
  }



  /**
   * The status of the invitation.
   * @return invitationStatus
   */
  @javax.annotation.Nullable
  public InvitationStatusEnum getInvitationStatus() {
    return invitationStatus;
  }



  /**
   * The time the recipient responded to the invitation.
   * @return respondedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRespondedAt() {
    return respondedAt;
  }



  /**
   * Gets the time at which the invitation was sent.
   * @return sentAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSentAt() {
    return sentAt;
  }



  public InvitationProperties targetActiveDirectoryId(String targetActiveDirectoryId) {
    this.targetActiveDirectoryId = targetActiveDirectoryId;
    return this;
  }

  /**
   * The target Azure AD Id. Can&#39;t be combined with email.
   * @return targetActiveDirectoryId
   */
  @javax.annotation.Nullable
  public String getTargetActiveDirectoryId() {
    return targetActiveDirectoryId;
  }

  public void setTargetActiveDirectoryId(String targetActiveDirectoryId) {
    this.targetActiveDirectoryId = targetActiveDirectoryId;
  }


  public InvitationProperties targetEmail(String targetEmail) {
    this.targetEmail = targetEmail;
    return this;
  }

  /**
   * The email the invitation is directed to.
   * @return targetEmail
   */
  @javax.annotation.Nullable
  public String getTargetEmail() {
    return targetEmail;
  }

  public void setTargetEmail(String targetEmail) {
    this.targetEmail = targetEmail;
  }


  public InvitationProperties targetObjectId(String targetObjectId) {
    this.targetObjectId = targetObjectId;
    return this;
  }

  /**
   * The target user or application Id that invitation is being sent to.  Must be specified along TargetActiveDirectoryId. This enables sending  invitations to specific users or applications in an AD tenant.
   * @return targetObjectId
   */
  @javax.annotation.Nullable
  public String getTargetObjectId() {
    return targetObjectId;
  }

  public void setTargetObjectId(String targetObjectId) {
    this.targetObjectId = targetObjectId;
  }


  /**
   * Email of the user who created the resource
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }



  /**
   * Name of the user who created the resource
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvitationProperties invitationProperties = (InvitationProperties) o;
    return Objects.equals(this.invitationId, invitationProperties.invitationId) &&
        Objects.equals(this.invitationStatus, invitationProperties.invitationStatus) &&
        Objects.equals(this.respondedAt, invitationProperties.respondedAt) &&
        Objects.equals(this.sentAt, invitationProperties.sentAt) &&
        Objects.equals(this.targetActiveDirectoryId, invitationProperties.targetActiveDirectoryId) &&
        Objects.equals(this.targetEmail, invitationProperties.targetEmail) &&
        Objects.equals(this.targetObjectId, invitationProperties.targetObjectId) &&
        Objects.equals(this.userEmail, invitationProperties.userEmail) &&
        Objects.equals(this.userName, invitationProperties.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(invitationId, invitationStatus, respondedAt, sentAt, targetActiveDirectoryId, targetEmail, targetObjectId, userEmail, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvitationProperties {\n");
    sb.append("    invitationId: ").append(toIndentedString(invitationId)).append("\n");
    sb.append("    invitationStatus: ").append(toIndentedString(invitationStatus)).append("\n");
    sb.append("    respondedAt: ").append(toIndentedString(respondedAt)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    targetActiveDirectoryId: ").append(toIndentedString(targetActiveDirectoryId)).append("\n");
    sb.append("    targetEmail: ").append(toIndentedString(targetEmail)).append("\n");
    sb.append("    targetObjectId: ").append(toIndentedString(targetObjectId)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("invitationId");
    openapiFields.add("invitationStatus");
    openapiFields.add("respondedAt");
    openapiFields.add("sentAt");
    openapiFields.add("targetActiveDirectoryId");
    openapiFields.add("targetEmail");
    openapiFields.add("targetObjectId");
    openapiFields.add("userEmail");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvitationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvitationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvitationProperties is not found in the empty JSON string", InvitationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvitationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvitationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("invitationId") != null && !jsonObj.get("invitationId").isJsonNull()) && !jsonObj.get("invitationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationId").toString()));
      }
      if ((jsonObj.get("invitationStatus") != null && !jsonObj.get("invitationStatus").isJsonNull()) && !jsonObj.get("invitationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationStatus").toString()));
      }
      // validate the optional field `invitationStatus`
      if (jsonObj.get("invitationStatus") != null && !jsonObj.get("invitationStatus").isJsonNull()) {
        InvitationStatusEnum.validateJsonElement(jsonObj.get("invitationStatus"));
      }
      if ((jsonObj.get("targetActiveDirectoryId") != null && !jsonObj.get("targetActiveDirectoryId").isJsonNull()) && !jsonObj.get("targetActiveDirectoryId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetActiveDirectoryId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetActiveDirectoryId").toString()));
      }
      if ((jsonObj.get("targetEmail") != null && !jsonObj.get("targetEmail").isJsonNull()) && !jsonObj.get("targetEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetEmail").toString()));
      }
      if ((jsonObj.get("targetObjectId") != null && !jsonObj.get("targetObjectId").isJsonNull()) && !jsonObj.get("targetObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `targetObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("targetObjectId").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvitationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvitationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvitationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvitationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<InvitationProperties>() {
           @Override
           public void write(JsonWriter out, InvitationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvitationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvitationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvitationProperties
   * @throws IOException if the JSON string is invalid with respect to InvitationProperties
   */
  public static InvitationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvitationProperties.class);
  }

  /**
   * Convert an instance of InvitationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

