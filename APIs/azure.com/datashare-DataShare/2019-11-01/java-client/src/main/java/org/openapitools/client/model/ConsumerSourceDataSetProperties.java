/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of consumer source dataSet
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsumerSourceDataSetProperties {
  public static final String SERIALIZED_NAME_DATA_SET_ID = "dataSetId";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ID)
  private String dataSetId;

  public static final String SERIALIZED_NAME_DATA_SET_LOCATION = "dataSetLocation";
  @SerializedName(SERIALIZED_NAME_DATA_SET_LOCATION)
  private String dataSetLocation;

  public static final String SERIALIZED_NAME_DATA_SET_NAME = "dataSetName";
  @SerializedName(SERIALIZED_NAME_DATA_SET_NAME)
  private String dataSetName;

  public static final String SERIALIZED_NAME_DATA_SET_PATH = "dataSetPath";
  @SerializedName(SERIALIZED_NAME_DATA_SET_PATH)
  private String dataSetPath;

  /**
   * Type of data set
   */
  @JsonAdapter(DataSetTypeEnum.Adapter.class)
  public enum DataSetTypeEnum {
    BLOB("Blob"),
    
    CONTAINER("Container"),
    
    BLOB_FOLDER("BlobFolder"),
    
    ADLS_GEN2_FILE_SYSTEM("AdlsGen2FileSystem"),
    
    ADLS_GEN2_FOLDER("AdlsGen2Folder"),
    
    ADLS_GEN2_FILE("AdlsGen2File"),
    
    ADLS_GEN1_FOLDER("AdlsGen1Folder"),
    
    ADLS_GEN1_FILE("AdlsGen1File"),
    
    KUSTO_CLUSTER("KustoCluster"),
    
    KUSTO_DATABASE("KustoDatabase"),
    
    SQL_DB_TABLE("SqlDBTable"),
    
    SQL_DW_TABLE("SqlDWTable");

    private String value;

    DataSetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSetTypeEnum fromValue(String value) {
      for (DataSetTypeEnum b : DataSetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SET_TYPE = "dataSetType";
  @SerializedName(SERIALIZED_NAME_DATA_SET_TYPE)
  private DataSetTypeEnum dataSetType;

  public ConsumerSourceDataSetProperties() {
  }

  public ConsumerSourceDataSetProperties(
     String dataSetId, 
     String dataSetLocation, 
     String dataSetName, 
     String dataSetPath, 
     DataSetTypeEnum dataSetType
  ) {
    this();
    this.dataSetId = dataSetId;
    this.dataSetLocation = dataSetLocation;
    this.dataSetName = dataSetName;
    this.dataSetPath = dataSetPath;
    this.dataSetType = dataSetType;
  }

  /**
   * DataSet Id
   * @return dataSetId
   */
  @javax.annotation.Nullable
  public String getDataSetId() {
    return dataSetId;
  }



  /**
   * Location of the data set.
   * @return dataSetLocation
   */
  @javax.annotation.Nullable
  public String getDataSetLocation() {
    return dataSetLocation;
  }



  /**
   * DataSet name
   * @return dataSetName
   */
  @javax.annotation.Nullable
  public String getDataSetName() {
    return dataSetName;
  }



  /**
   * DataSet path
   * @return dataSetPath
   */
  @javax.annotation.Nullable
  public String getDataSetPath() {
    return dataSetPath;
  }



  /**
   * Type of data set
   * @return dataSetType
   */
  @javax.annotation.Nullable
  public DataSetTypeEnum getDataSetType() {
    return dataSetType;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerSourceDataSetProperties consumerSourceDataSetProperties = (ConsumerSourceDataSetProperties) o;
    return Objects.equals(this.dataSetId, consumerSourceDataSetProperties.dataSetId) &&
        Objects.equals(this.dataSetLocation, consumerSourceDataSetProperties.dataSetLocation) &&
        Objects.equals(this.dataSetName, consumerSourceDataSetProperties.dataSetName) &&
        Objects.equals(this.dataSetPath, consumerSourceDataSetProperties.dataSetPath) &&
        Objects.equals(this.dataSetType, consumerSourceDataSetProperties.dataSetType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetId, dataSetLocation, dataSetName, dataSetPath, dataSetType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerSourceDataSetProperties {\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    dataSetLocation: ").append(toIndentedString(dataSetLocation)).append("\n");
    sb.append("    dataSetName: ").append(toIndentedString(dataSetName)).append("\n");
    sb.append("    dataSetPath: ").append(toIndentedString(dataSetPath)).append("\n");
    sb.append("    dataSetType: ").append(toIndentedString(dataSetType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetId");
    openapiFields.add("dataSetLocation");
    openapiFields.add("dataSetName");
    openapiFields.add("dataSetPath");
    openapiFields.add("dataSetType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsumerSourceDataSetProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumerSourceDataSetProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumerSourceDataSetProperties is not found in the empty JSON string", ConsumerSourceDataSetProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsumerSourceDataSetProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsumerSourceDataSetProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSetId") != null && !jsonObj.get("dataSetId").isJsonNull()) && !jsonObj.get("dataSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetId").toString()));
      }
      if ((jsonObj.get("dataSetLocation") != null && !jsonObj.get("dataSetLocation").isJsonNull()) && !jsonObj.get("dataSetLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetLocation").toString()));
      }
      if ((jsonObj.get("dataSetName") != null && !jsonObj.get("dataSetName").isJsonNull()) && !jsonObj.get("dataSetName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetName").toString()));
      }
      if ((jsonObj.get("dataSetPath") != null && !jsonObj.get("dataSetPath").isJsonNull()) && !jsonObj.get("dataSetPath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetPath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetPath").toString()));
      }
      if ((jsonObj.get("dataSetType") != null && !jsonObj.get("dataSetType").isJsonNull()) && !jsonObj.get("dataSetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetType").toString()));
      }
      // validate the optional field `dataSetType`
      if (jsonObj.get("dataSetType") != null && !jsonObj.get("dataSetType").isJsonNull()) {
        DataSetTypeEnum.validateJsonElement(jsonObj.get("dataSetType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumerSourceDataSetProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumerSourceDataSetProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumerSourceDataSetProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumerSourceDataSetProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumerSourceDataSetProperties>() {
           @Override
           public void write(JsonWriter out, ConsumerSourceDataSetProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumerSourceDataSetProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsumerSourceDataSetProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsumerSourceDataSetProperties
   * @throws IOException if the JSON string is invalid with respect to ConsumerSourceDataSetProperties
   */
  public static ConsumerSourceDataSetProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumerSourceDataSetProperties.class);
  }

  /**
   * Convert an instance of ConsumerSourceDataSetProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

