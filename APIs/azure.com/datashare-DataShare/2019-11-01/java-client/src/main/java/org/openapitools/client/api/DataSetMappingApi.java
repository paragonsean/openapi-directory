/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataSetMapping;
import org.openapitools.client.model.DataSetMappingList;
import org.openapitools.client.model.DataShareError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataSetMappingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataSetMappingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataSetMappingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataSetMappingsCreate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param dataSetMappingName The name of the data set mapping to be created. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSetMapping Destination data set configuration details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, DataSetMapping dataSetMapping, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSetMapping;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()))
            .replace("{" + "dataSetMappingName" + "}", localVarApiClient.escapeString(dataSetMappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetMappingsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, DataSetMapping dataSetMapping, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetMappingsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetMappingsCreate(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsCreate(Async)");
        }

        // verify the required parameter 'dataSetMappingName' is set
        if (dataSetMappingName == null) {
            throw new ApiException("Missing the required parameter 'dataSetMappingName' when calling dataSetMappingsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetMappingsCreate(Async)");
        }

        // verify the required parameter 'dataSetMapping' is set
        if (dataSetMapping == null) {
            throw new ApiException("Missing the required parameter 'dataSetMapping' when calling dataSetMappingsCreate(Async)");
        }

        return dataSetMappingsCreateCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, dataSetMapping, _callback);

    }

    /**
     * Maps a source data set in the source share to a sink data set in the share subscription.  Enables copying the data set from source to destination.
     * Create a DataSetMapping 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param dataSetMappingName The name of the data set mapping to be created. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSetMapping Destination data set configuration details. (required)
     * @return DataSetMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public DataSetMapping dataSetMappingsCreate(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, DataSetMapping dataSetMapping) throws ApiException {
        ApiResponse<DataSetMapping> localVarResp = dataSetMappingsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, dataSetMapping);
        return localVarResp.getData();
    }

    /**
     * Maps a source data set in the source share to a sink data set in the share subscription.  Enables copying the data set from source to destination.
     * Create a DataSetMapping 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param dataSetMappingName The name of the data set mapping to be created. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSetMapping Destination data set configuration details. (required)
     * @return ApiResponse&lt;DataSetMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSetMapping> dataSetMappingsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, DataSetMapping dataSetMapping) throws ApiException {
        okhttp3.Call localVarCall = dataSetMappingsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, dataSetMapping, null);
        Type localVarReturnType = new TypeToken<DataSetMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Maps a source data set in the source share to a sink data set in the share subscription.  Enables copying the data set from source to destination. (asynchronously)
     * Create a DataSetMapping 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param dataSetMappingName The name of the data set mapping to be created. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSetMapping Destination data set configuration details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, DataSetMapping dataSetMapping, final ApiCallback<DataSetMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetMappingsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, dataSetMapping, _callback);
        Type localVarReturnType = new TypeToken<DataSetMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSetMappingsDelete
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()))
            .replace("{" + "dataSetMappingName" + "}", localVarApiClient.escapeString(dataSetMappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetMappingsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetMappingsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetMappingsDelete(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsDelete(Async)");
        }

        // verify the required parameter 'dataSetMappingName' is set
        if (dataSetMappingName == null) {
            throw new ApiException("Missing the required parameter 'dataSetMappingName' when calling dataSetMappingsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetMappingsDelete(Async)");
        }

        return dataSetMappingsDeleteCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, _callback);

    }

    /**
     * Delete DataSetMapping in a shareSubscription.
     * Delete a DataSetMapping in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public void dataSetMappingsDelete(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion) throws ApiException {
        dataSetMappingsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion);
    }

    /**
     * Delete DataSetMapping in a shareSubscription.
     * Delete a DataSetMapping in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSetMappingsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataSetMappingsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete DataSetMapping in a shareSubscription. (asynchronously)
     * Delete a DataSetMapping in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetMappingsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSetMappingsGet
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsGetCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings/{dataSetMappingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()))
            .replace("{" + "dataSetMappingName" + "}", localVarApiClient.escapeString(dataSetMappingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetMappingsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetMappingsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetMappingsGet(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsGet(Async)");
        }

        // verify the required parameter 'dataSetMappingName' is set
        if (dataSetMappingName == null) {
            throw new ApiException("Missing the required parameter 'dataSetMappingName' when calling dataSetMappingsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetMappingsGet(Async)");
        }

        return dataSetMappingsGetCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, _callback);

    }

    /**
     * Get DataSetMapping in a shareSubscription.
     * Get a DataSetMapping in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @return DataSetMapping
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public DataSetMapping dataSetMappingsGet(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion) throws ApiException {
        ApiResponse<DataSetMapping> localVarResp = dataSetMappingsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get DataSetMapping in a shareSubscription.
     * Get a DataSetMapping in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;DataSetMapping&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSetMapping> dataSetMappingsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataSetMappingsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataSetMapping>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DataSetMapping in a shareSubscription. (asynchronously)
     * Get a DataSetMapping in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param dataSetMappingName The name of the dataSetMapping. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String dataSetMappingName, String apiVersion, final ApiCallback<DataSetMapping> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetMappingsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, dataSetMappingName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataSetMapping>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSetMappingsListByShareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsListByShareSubscriptionCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/dataSetMappings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetMappingsListByShareSubscriptionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetMappingsListByShareSubscription(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetMappingsListByShareSubscription(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetMappingsListByShareSubscription(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling dataSetMappingsListByShareSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetMappingsListByShareSubscription(Async)");
        }

        return dataSetMappingsListByShareSubscriptionCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);

    }

    /**
     * List DataSetMappings in a share subscription.
     * List DataSetMappings in a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return DataSetMappingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public DataSetMappingList dataSetMappingsListByShareSubscription(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<DataSetMappingList> localVarResp = dataSetMappingsListByShareSubscriptionWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List DataSetMappings in a share subscription.
     * List DataSetMappings in a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;DataSetMappingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSetMappingList> dataSetMappingsListByShareSubscriptionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = dataSetMappingsListByShareSubscriptionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<DataSetMappingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List DataSetMappings in a share subscription. (asynchronously)
     * List DataSetMappings in a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetMappingsListByShareSubscriptionAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback<DataSetMappingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetMappingsListByShareSubscriptionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<DataSetMappingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
