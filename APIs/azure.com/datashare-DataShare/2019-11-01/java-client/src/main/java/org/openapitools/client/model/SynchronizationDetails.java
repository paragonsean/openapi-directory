/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Synchronization details at data set level
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SynchronizationDetails {
  public static final String SERIALIZED_NAME_DATA_SET_ID = "dataSetId";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ID)
  private String dataSetId;

  /**
   * Type of the data set
   */
  @JsonAdapter(DataSetTypeEnum.Adapter.class)
  public enum DataSetTypeEnum {
    BLOB("Blob"),
    
    CONTAINER("Container"),
    
    BLOB_FOLDER("BlobFolder"),
    
    ADLS_GEN2_FILE_SYSTEM("AdlsGen2FileSystem"),
    
    ADLS_GEN2_FOLDER("AdlsGen2Folder"),
    
    ADLS_GEN2_FILE("AdlsGen2File"),
    
    ADLS_GEN1_FOLDER("AdlsGen1Folder"),
    
    ADLS_GEN1_FILE("AdlsGen1File"),
    
    KUSTO_CLUSTER("KustoCluster"),
    
    KUSTO_DATABASE("KustoDatabase"),
    
    SQL_DB_TABLE("SqlDBTable"),
    
    SQL_DW_TABLE("SqlDWTable");

    private String value;

    DataSetTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSetTypeEnum fromValue(String value) {
      for (DataSetTypeEnum b : DataSetTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSetTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSetTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSetTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSetTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSetTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SET_TYPE = "dataSetType";
  @SerializedName(SERIALIZED_NAME_DATA_SET_TYPE)
  private DataSetTypeEnum dataSetType;

  public static final String SERIALIZED_NAME_DURATION_MS = "durationMs";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_FILES_READ = "filesRead";
  @SerializedName(SERIALIZED_NAME_FILES_READ)
  private Long filesRead;

  public static final String SERIALIZED_NAME_FILES_WRITTEN = "filesWritten";
  @SerializedName(SERIALIZED_NAME_FILES_WRITTEN)
  private Long filesWritten;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_ROWS_COPIED = "rowsCopied";
  @SerializedName(SERIALIZED_NAME_ROWS_COPIED)
  private Long rowsCopied;

  public static final String SERIALIZED_NAME_ROWS_READ = "rowsRead";
  @SerializedName(SERIALIZED_NAME_ROWS_READ)
  private Long rowsRead;

  public static final String SERIALIZED_NAME_SIZE_READ = "sizeRead";
  @SerializedName(SERIALIZED_NAME_SIZE_READ)
  private Long sizeRead;

  public static final String SERIALIZED_NAME_SIZE_WRITTEN = "sizeWritten";
  @SerializedName(SERIALIZED_NAME_SIZE_WRITTEN)
  private Long sizeWritten;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_V_CORE = "vCore";
  @SerializedName(SERIALIZED_NAME_V_CORE)
  private Long vCore;

  public SynchronizationDetails() {
  }

  public SynchronizationDetails(
     String dataSetId, 
     DataSetTypeEnum dataSetType, 
     Integer durationMs, 
     OffsetDateTime endTime, 
     Long filesRead, 
     Long filesWritten, 
     String message, 
     String name, 
     Long rowsCopied, 
     Long rowsRead, 
     Long sizeRead, 
     Long sizeWritten, 
     OffsetDateTime startTime, 
     String status, 
     Long vCore
  ) {
    this();
    this.dataSetId = dataSetId;
    this.dataSetType = dataSetType;
    this.durationMs = durationMs;
    this.endTime = endTime;
    this.filesRead = filesRead;
    this.filesWritten = filesWritten;
    this.message = message;
    this.name = name;
    this.rowsCopied = rowsCopied;
    this.rowsRead = rowsRead;
    this.sizeRead = sizeRead;
    this.sizeWritten = sizeWritten;
    this.startTime = startTime;
    this.status = status;
    this.vCore = vCore;
  }

  /**
   * Id of data set
   * @return dataSetId
   */
  @javax.annotation.Nullable
  public String getDataSetId() {
    return dataSetId;
  }



  /**
   * Type of the data set
   * @return dataSetType
   */
  @javax.annotation.Nullable
  public DataSetTypeEnum getDataSetType() {
    return dataSetType;
  }



  /**
   * Duration of data set level copy
   * @return durationMs
   */
  @javax.annotation.Nullable
  public Integer getDurationMs() {
    return durationMs;
  }



  /**
   * End time of data set level copy
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * The number of files read from the source data set
   * @return filesRead
   */
  @javax.annotation.Nullable
  public Long getFilesRead() {
    return filesRead;
  }



  /**
   * The number of files written into the sink data set
   * @return filesWritten
   */
  @javax.annotation.Nullable
  public Long getFilesWritten() {
    return filesWritten;
  }



  /**
   * Error message if any
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * Name of the data set
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }



  /**
   * The number of files copied into the sink data set
   * @return rowsCopied
   */
  @javax.annotation.Nullable
  public Long getRowsCopied() {
    return rowsCopied;
  }



  /**
   * The number of rows read from the source data set.
   * @return rowsRead
   */
  @javax.annotation.Nullable
  public Long getRowsRead() {
    return rowsRead;
  }



  /**
   * The size of the data read from the source data set in bytes
   * @return sizeRead
   */
  @javax.annotation.Nullable
  public Long getSizeRead() {
    return sizeRead;
  }



  /**
   * The size of the data written into the sink data set in bytes
   * @return sizeWritten
   */
  @javax.annotation.Nullable
  public Long getSizeWritten() {
    return sizeWritten;
  }



  /**
   * Start time of data set level copy
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * Raw Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  /**
   * The vCore units consumed for the data set synchronization
   * @return vCore
   */
  @javax.annotation.Nullable
  public Long getvCore() {
    return vCore;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SynchronizationDetails synchronizationDetails = (SynchronizationDetails) o;
    return Objects.equals(this.dataSetId, synchronizationDetails.dataSetId) &&
        Objects.equals(this.dataSetType, synchronizationDetails.dataSetType) &&
        Objects.equals(this.durationMs, synchronizationDetails.durationMs) &&
        Objects.equals(this.endTime, synchronizationDetails.endTime) &&
        Objects.equals(this.filesRead, synchronizationDetails.filesRead) &&
        Objects.equals(this.filesWritten, synchronizationDetails.filesWritten) &&
        Objects.equals(this.message, synchronizationDetails.message) &&
        Objects.equals(this.name, synchronizationDetails.name) &&
        Objects.equals(this.rowsCopied, synchronizationDetails.rowsCopied) &&
        Objects.equals(this.rowsRead, synchronizationDetails.rowsRead) &&
        Objects.equals(this.sizeRead, synchronizationDetails.sizeRead) &&
        Objects.equals(this.sizeWritten, synchronizationDetails.sizeWritten) &&
        Objects.equals(this.startTime, synchronizationDetails.startTime) &&
        Objects.equals(this.status, synchronizationDetails.status) &&
        Objects.equals(this.vCore, synchronizationDetails.vCore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetId, dataSetType, durationMs, endTime, filesRead, filesWritten, message, name, rowsCopied, rowsRead, sizeRead, sizeWritten, startTime, status, vCore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SynchronizationDetails {\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    dataSetType: ").append(toIndentedString(dataSetType)).append("\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    filesRead: ").append(toIndentedString(filesRead)).append("\n");
    sb.append("    filesWritten: ").append(toIndentedString(filesWritten)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    rowsCopied: ").append(toIndentedString(rowsCopied)).append("\n");
    sb.append("    rowsRead: ").append(toIndentedString(rowsRead)).append("\n");
    sb.append("    sizeRead: ").append(toIndentedString(sizeRead)).append("\n");
    sb.append("    sizeWritten: ").append(toIndentedString(sizeWritten)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    vCore: ").append(toIndentedString(vCore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetId");
    openapiFields.add("dataSetType");
    openapiFields.add("durationMs");
    openapiFields.add("endTime");
    openapiFields.add("filesRead");
    openapiFields.add("filesWritten");
    openapiFields.add("message");
    openapiFields.add("name");
    openapiFields.add("rowsCopied");
    openapiFields.add("rowsRead");
    openapiFields.add("sizeRead");
    openapiFields.add("sizeWritten");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("vCore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SynchronizationDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SynchronizationDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SynchronizationDetails is not found in the empty JSON string", SynchronizationDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SynchronizationDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SynchronizationDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("dataSetId") != null && !jsonObj.get("dataSetId").isJsonNull()) && !jsonObj.get("dataSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetId").toString()));
      }
      if ((jsonObj.get("dataSetType") != null && !jsonObj.get("dataSetType").isJsonNull()) && !jsonObj.get("dataSetType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetType").toString()));
      }
      // validate the optional field `dataSetType`
      if (jsonObj.get("dataSetType") != null && !jsonObj.get("dataSetType").isJsonNull()) {
        DataSetTypeEnum.validateJsonElement(jsonObj.get("dataSetType"));
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SynchronizationDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SynchronizationDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SynchronizationDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SynchronizationDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SynchronizationDetails>() {
           @Override
           public void write(JsonWriter out, SynchronizationDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SynchronizationDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SynchronizationDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SynchronizationDetails
   * @throws IOException if the JSON string is invalid with respect to SynchronizationDetails
   */
  public static SynchronizationDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SynchronizationDetails.class);
  }

  /**
   * Convert an instance of SynchronizationDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

