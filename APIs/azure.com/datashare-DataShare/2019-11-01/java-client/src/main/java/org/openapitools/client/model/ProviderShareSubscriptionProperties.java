/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Provider share subscription properties
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProviderShareSubscriptionProperties {
  public static final String SERIALIZED_NAME_CONSUMER_EMAIL = "consumerEmail";
  @SerializedName(SERIALIZED_NAME_CONSUMER_EMAIL)
  private String consumerEmail;

  public static final String SERIALIZED_NAME_CONSUMER_NAME = "consumerName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_NAME)
  private String consumerName;

  public static final String SERIALIZED_NAME_CONSUMER_TENANT_NAME = "consumerTenantName";
  @SerializedName(SERIALIZED_NAME_CONSUMER_TENANT_NAME)
  private String consumerTenantName;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PROVIDER_EMAIL = "providerEmail";
  @SerializedName(SERIALIZED_NAME_PROVIDER_EMAIL)
  private String providerEmail;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_SHARE_SUBSCRIPTION_OBJECT_ID = "shareSubscriptionObjectId";
  @SerializedName(SERIALIZED_NAME_SHARE_SUBSCRIPTION_OBJECT_ID)
  private String shareSubscriptionObjectId;

  /**
   * Gets the status of share subscription
   */
  @JsonAdapter(ShareSubscriptionStatusEnum.Adapter.class)
  public enum ShareSubscriptionStatusEnum {
    ACTIVE("Active"),
    
    REVOKED("Revoked"),
    
    SOURCE_DELETED("SourceDeleted"),
    
    REVOKING("Revoking");

    private String value;

    ShareSubscriptionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareSubscriptionStatusEnum fromValue(String value) {
      for (ShareSubscriptionStatusEnum b : ShareSubscriptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareSubscriptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareSubscriptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareSubscriptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareSubscriptionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareSubscriptionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_SUBSCRIPTION_STATUS = "shareSubscriptionStatus";
  @SerializedName(SERIALIZED_NAME_SHARE_SUBSCRIPTION_STATUS)
  private ShareSubscriptionStatusEnum shareSubscriptionStatus;

  public static final String SERIALIZED_NAME_SHARED_AT = "sharedAt";
  @SerializedName(SERIALIZED_NAME_SHARED_AT)
  private OffsetDateTime sharedAt;

  public ProviderShareSubscriptionProperties() {
  }

  public ProviderShareSubscriptionProperties(
     String consumerEmail, 
     String consumerName, 
     String consumerTenantName, 
     OffsetDateTime createdAt, 
     String providerEmail, 
     String providerName, 
     String shareSubscriptionObjectId, 
     ShareSubscriptionStatusEnum shareSubscriptionStatus, 
     OffsetDateTime sharedAt
  ) {
    this();
    this.consumerEmail = consumerEmail;
    this.consumerName = consumerName;
    this.consumerTenantName = consumerTenantName;
    this.createdAt = createdAt;
    this.providerEmail = providerEmail;
    this.providerName = providerName;
    this.shareSubscriptionObjectId = shareSubscriptionObjectId;
    this.shareSubscriptionStatus = shareSubscriptionStatus;
    this.sharedAt = sharedAt;
  }

  /**
   * Email of the consumer who created the share subscription
   * @return consumerEmail
   */
  @javax.annotation.Nullable
  public String getConsumerEmail() {
    return consumerEmail;
  }



  /**
   * Name of the consumer who created the share subscription
   * @return consumerName
   */
  @javax.annotation.Nullable
  public String getConsumerName() {
    return consumerName;
  }



  /**
   * Tenant name of the consumer who created the share subscription
   * @return consumerTenantName
   */
  @javax.annotation.Nullable
  public String getConsumerTenantName() {
    return consumerTenantName;
  }



  /**
   * created at
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  /**
   * Email of the provider who created the share
   * @return providerEmail
   */
  @javax.annotation.Nullable
  public String getProviderEmail() {
    return providerEmail;
  }



  /**
   * Name of the provider who created the share
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }



  /**
   * share Subscription Object Id
   * @return shareSubscriptionObjectId
   */
  @javax.annotation.Nullable
  public String getShareSubscriptionObjectId() {
    return shareSubscriptionObjectId;
  }



  /**
   * Gets the status of share subscription
   * @return shareSubscriptionStatus
   */
  @javax.annotation.Nullable
  public ShareSubscriptionStatusEnum getShareSubscriptionStatus() {
    return shareSubscriptionStatus;
  }



  /**
   * Shared at
   * @return sharedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSharedAt() {
    return sharedAt;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderShareSubscriptionProperties providerShareSubscriptionProperties = (ProviderShareSubscriptionProperties) o;
    return Objects.equals(this.consumerEmail, providerShareSubscriptionProperties.consumerEmail) &&
        Objects.equals(this.consumerName, providerShareSubscriptionProperties.consumerName) &&
        Objects.equals(this.consumerTenantName, providerShareSubscriptionProperties.consumerTenantName) &&
        Objects.equals(this.createdAt, providerShareSubscriptionProperties.createdAt) &&
        Objects.equals(this.providerEmail, providerShareSubscriptionProperties.providerEmail) &&
        Objects.equals(this.providerName, providerShareSubscriptionProperties.providerName) &&
        Objects.equals(this.shareSubscriptionObjectId, providerShareSubscriptionProperties.shareSubscriptionObjectId) &&
        Objects.equals(this.shareSubscriptionStatus, providerShareSubscriptionProperties.shareSubscriptionStatus) &&
        Objects.equals(this.sharedAt, providerShareSubscriptionProperties.sharedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(consumerEmail, consumerName, consumerTenantName, createdAt, providerEmail, providerName, shareSubscriptionObjectId, shareSubscriptionStatus, sharedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderShareSubscriptionProperties {\n");
    sb.append("    consumerEmail: ").append(toIndentedString(consumerEmail)).append("\n");
    sb.append("    consumerName: ").append(toIndentedString(consumerName)).append("\n");
    sb.append("    consumerTenantName: ").append(toIndentedString(consumerTenantName)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    providerEmail: ").append(toIndentedString(providerEmail)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    shareSubscriptionObjectId: ").append(toIndentedString(shareSubscriptionObjectId)).append("\n");
    sb.append("    shareSubscriptionStatus: ").append(toIndentedString(shareSubscriptionStatus)).append("\n");
    sb.append("    sharedAt: ").append(toIndentedString(sharedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("consumerEmail");
    openapiFields.add("consumerName");
    openapiFields.add("consumerTenantName");
    openapiFields.add("createdAt");
    openapiFields.add("providerEmail");
    openapiFields.add("providerName");
    openapiFields.add("shareSubscriptionObjectId");
    openapiFields.add("shareSubscriptionStatus");
    openapiFields.add("sharedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderShareSubscriptionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProviderShareSubscriptionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderShareSubscriptionProperties is not found in the empty JSON string", ProviderShareSubscriptionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderShareSubscriptionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderShareSubscriptionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("consumerEmail") != null && !jsonObj.get("consumerEmail").isJsonNull()) && !jsonObj.get("consumerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerEmail").toString()));
      }
      if ((jsonObj.get("consumerName") != null && !jsonObj.get("consumerName").isJsonNull()) && !jsonObj.get("consumerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerName").toString()));
      }
      if ((jsonObj.get("consumerTenantName") != null && !jsonObj.get("consumerTenantName").isJsonNull()) && !jsonObj.get("consumerTenantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `consumerTenantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("consumerTenantName").toString()));
      }
      if ((jsonObj.get("providerEmail") != null && !jsonObj.get("providerEmail").isJsonNull()) && !jsonObj.get("providerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerEmail").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("shareSubscriptionObjectId") != null && !jsonObj.get("shareSubscriptionObjectId").isJsonNull()) && !jsonObj.get("shareSubscriptionObjectId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareSubscriptionObjectId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareSubscriptionObjectId").toString()));
      }
      if ((jsonObj.get("shareSubscriptionStatus") != null && !jsonObj.get("shareSubscriptionStatus").isJsonNull()) && !jsonObj.get("shareSubscriptionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareSubscriptionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareSubscriptionStatus").toString()));
      }
      // validate the optional field `shareSubscriptionStatus`
      if (jsonObj.get("shareSubscriptionStatus") != null && !jsonObj.get("shareSubscriptionStatus").isJsonNull()) {
        ShareSubscriptionStatusEnum.validateJsonElement(jsonObj.get("shareSubscriptionStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderShareSubscriptionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderShareSubscriptionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderShareSubscriptionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderShareSubscriptionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderShareSubscriptionProperties>() {
           @Override
           public void write(JsonWriter out, ProviderShareSubscriptionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderShareSubscriptionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderShareSubscriptionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderShareSubscriptionProperties
   * @throws IOException if the JSON string is invalid with respect to ProviderShareSubscriptionProperties
   */
  public static ProviderShareSubscriptionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderShareSubscriptionProperties.class);
  }

  /**
   * Convert an instance of ProviderShareSubscriptionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

