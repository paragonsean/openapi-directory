/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ConsumerSourceDataSetList;
import org.openapitools.client.model.DataShareError;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.ShareSubscription;
import org.openapitools.client.model.ShareSubscriptionList;
import org.openapitools.client.model.ShareSubscriptionSynchronization;
import org.openapitools.client.model.ShareSubscriptionSynchronizationList;
import org.openapitools.client.model.SourceShareSynchronizationSettingList;
import org.openapitools.client.model.SynchronizationDetailsList;
import org.openapitools.client.model.Synchronize;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShareSubscriptionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShareSubscriptionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShareSubscriptionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for consumerSourceDataSetsListByShareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerSourceDataSetsListByShareSubscriptionCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/ConsumerSourceDataSets"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call consumerSourceDataSetsListByShareSubscriptionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling consumerSourceDataSetsListByShareSubscription(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling consumerSourceDataSetsListByShareSubscription(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling consumerSourceDataSetsListByShareSubscription(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling consumerSourceDataSetsListByShareSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling consumerSourceDataSetsListByShareSubscription(Async)");
        }

        return consumerSourceDataSetsListByShareSubscriptionCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);

    }

    /**
     * Get source dataSets of a shareSubscription.
     * Get source dataSets of a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ConsumerSourceDataSetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ConsumerSourceDataSetList consumerSourceDataSetsListByShareSubscription(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<ConsumerSourceDataSetList> localVarResp = consumerSourceDataSetsListByShareSubscriptionWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Get source dataSets of a shareSubscription.
     * Get source dataSets of a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;ConsumerSourceDataSetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConsumerSourceDataSetList> consumerSourceDataSetsListByShareSubscriptionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = consumerSourceDataSetsListByShareSubscriptionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<ConsumerSourceDataSetList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source dataSets of a shareSubscription. (asynchronously)
     * Get source dataSets of a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call consumerSourceDataSetsListByShareSubscriptionAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback<ConsumerSourceDataSetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = consumerSourceDataSetsListByShareSubscriptionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ConsumerSourceDataSetList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsCancelSynchronization
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsCancelSynchronizationCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareSubscriptionSynchronization;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/cancelSynchronization"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsCancelSynchronizationValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsCancelSynchronization(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsCancelSynchronization(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsCancelSynchronization(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsCancelSynchronization(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsCancelSynchronization(Async)");
        }

        // verify the required parameter 'shareSubscriptionSynchronization' is set
        if (shareSubscriptionSynchronization == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionSynchronization' when calling shareSubscriptionsCancelSynchronization(Async)");
        }

        return shareSubscriptionsCancelSynchronizationCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, _callback);

    }

    /**
     * Request cancellation of a data share snapshot
     * Request to cancel a synchronization.
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @return ShareSubscriptionSynchronization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSubscriptionSynchronization shareSubscriptionsCancelSynchronization(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization) throws ApiException {
        ApiResponse<ShareSubscriptionSynchronization> localVarResp = shareSubscriptionsCancelSynchronizationWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization);
        return localVarResp.getData();
    }

    /**
     * Request cancellation of a data share snapshot
     * Request to cancel a synchronization.
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @return ApiResponse&lt;ShareSubscriptionSynchronization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSubscriptionSynchronization> shareSubscriptionsCancelSynchronizationWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsCancelSynchronizationValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, null);
        Type localVarReturnType = new TypeToken<ShareSubscriptionSynchronization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Request cancellation of a data share snapshot (asynchronously)
     * Request to cancel a synchronization.
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsCancelSynchronizationAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, final ApiCallback<ShareSubscriptionSynchronization> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsCancelSynchronizationValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, _callback);
        Type localVarReturnType = new TypeToken<ShareSubscriptionSynchronization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsCreate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscription create parameters for shareSubscription (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscription shareSubscription, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareSubscription;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscription shareSubscription, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsCreate(Async)");
        }

        // verify the required parameter 'shareSubscription' is set
        if (shareSubscription == null) {
            throw new ApiException("Missing the required parameter 'shareSubscription' when calling shareSubscriptionsCreate(Async)");
        }

        return shareSubscriptionsCreateCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscription, _callback);

    }

    /**
     * Create shareSubscription in an account.
     * Create a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscription create parameters for shareSubscription (required)
     * @return ShareSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSubscription shareSubscriptionsCreate(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscription shareSubscription) throws ApiException {
        ApiResponse<ShareSubscription> localVarResp = shareSubscriptionsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscription);
        return localVarResp.getData();
    }

    /**
     * Create shareSubscription in an account.
     * Create a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscription create parameters for shareSubscription (required)
     * @return ApiResponse&lt;ShareSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSubscription> shareSubscriptionsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscription shareSubscription) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscription, null);
        Type localVarReturnType = new TypeToken<ShareSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create shareSubscription in an account. (asynchronously)
     * Create a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscription create parameters for shareSubscription (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscription shareSubscription, final ApiCallback<ShareSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscription, _callback);
        Type localVarReturnType = new TypeToken<ShareSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsDelete
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsDelete(Async)");
        }

        return shareSubscriptionsDeleteCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, _callback);

    }

    /**
     * Delete shareSubscription in an account.
     * Delete a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @return OperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public OperationResponse shareSubscriptionsDelete(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion) throws ApiException {
        ApiResponse<OperationResponse> localVarResp = shareSubscriptionsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete shareSubscription in an account.
     * Delete a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;OperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResponse> shareSubscriptionsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete shareSubscription in an account. (asynchronously)
     * Delete a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, final ApiCallback<OperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsGet
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsGetCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsGet(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsGet(Async)");
        }

        return shareSubscriptionsGetCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, _callback);

    }

    /**
     * Get shareSubscription in an account.
     * Get a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @return ShareSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSubscription shareSubscriptionsGet(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion) throws ApiException {
        ApiResponse<ShareSubscription> localVarResp = shareSubscriptionsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get shareSubscription in an account.
     * Get a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;ShareSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSubscription> shareSubscriptionsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, null);
        Type localVarReturnType = new TypeToken<ShareSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get shareSubscription in an account. (asynchronously)
     * Get a shareSubscription in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, final ApiCallback<ShareSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ShareSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsListByAccount
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListByAccountCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsListByAccountValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListByAccount(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListByAccount(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsListByAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListByAccount(Async)");
        }

        return shareSubscriptionsListByAccountCall(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken, _callback);

    }

    /**
     * List of available share subscriptions under an account.
     * List share subscriptions in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @return ShareSubscriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSubscriptionList shareSubscriptionsListByAccount(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<ShareSubscriptionList> localVarResp = shareSubscriptionsListByAccountWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List of available share subscriptions under an account.
     * List share subscriptions in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @return ApiResponse&lt;ShareSubscriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSubscriptionList> shareSubscriptionsListByAccountWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsListByAccountValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<ShareSubscriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of available share subscriptions under an account. (asynchronously)
     * List share subscriptions in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListByAccountAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken, final ApiCallback<ShareSubscriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsListByAccountValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ShareSubscriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsListSourceShareSynchronizationSettings
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListSourceShareSynchronizationSettingsCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSourceShareSynchronizationSettings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsListSourceShareSynchronizationSettingsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListSourceShareSynchronizationSettings(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListSourceShareSynchronizationSettings(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsListSourceShareSynchronizationSettings(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsListSourceShareSynchronizationSettings(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListSourceShareSynchronizationSettings(Async)");
        }

        return shareSubscriptionsListSourceShareSynchronizationSettingsCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);

    }

    /**
     * Get source share synchronization settings for a shareSubscription.
     * Get synchronization settings set on a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return SourceShareSynchronizationSettingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public SourceShareSynchronizationSettingList shareSubscriptionsListSourceShareSynchronizationSettings(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<SourceShareSynchronizationSettingList> localVarResp = shareSubscriptionsListSourceShareSynchronizationSettingsWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * Get source share synchronization settings for a shareSubscription.
     * Get synchronization settings set on a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;SourceShareSynchronizationSettingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SourceShareSynchronizationSettingList> shareSubscriptionsListSourceShareSynchronizationSettingsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsListSourceShareSynchronizationSettingsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<SourceShareSynchronizationSettingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get source share synchronization settings for a shareSubscription. (asynchronously)
     * Get synchronization settings set on a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListSourceShareSynchronizationSettingsAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback<SourceShareSynchronizationSettingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsListSourceShareSynchronizationSettingsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<SourceShareSynchronizationSettingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsListSynchronizationDetails
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListSynchronizationDetailsCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareSubscriptionSynchronization;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizationDetails"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsListSynchronizationDetailsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'shareSubscriptionSynchronization' is set
        if (shareSubscriptionSynchronization == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionSynchronization' when calling shareSubscriptionsListSynchronizationDetails(Async)");
        }

        return shareSubscriptionsListSynchronizationDetailsCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, $skipToken, _callback);

    }

    /**
     * List data set level details for a share subscription synchronization
     * List synchronization details
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @return SynchronizationDetailsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public SynchronizationDetailsList shareSubscriptionsListSynchronizationDetails(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, String $skipToken) throws ApiException {
        ApiResponse<SynchronizationDetailsList> localVarResp = shareSubscriptionsListSynchronizationDetailsWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List data set level details for a share subscription synchronization
     * List synchronization details
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;SynchronizationDetailsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SynchronizationDetailsList> shareSubscriptionsListSynchronizationDetailsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsListSynchronizationDetailsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, $skipToken, null);
        Type localVarReturnType = new TypeToken<SynchronizationDetailsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List data set level details for a share subscription synchronization (asynchronously)
     * List synchronization details
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSubscriptionSynchronization Share Subscription Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListSynchronizationDetailsAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, ShareSubscriptionSynchronization shareSubscriptionSynchronization, String $skipToken, final ApiCallback<SynchronizationDetailsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsListSynchronizationDetailsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<SynchronizationDetailsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsListSynchronizations
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListSynchronizationsCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/listSynchronizations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsListSynchronizationsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsListSynchronizations(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsListSynchronizations(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsListSynchronizations(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsListSynchronizations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsListSynchronizations(Async)");
        }

        return shareSubscriptionsListSynchronizationsCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);

    }

    /**
     * List Synchronizations in a share subscription.
     * List synchronizations of a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ShareSubscriptionSynchronizationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSubscriptionSynchronizationList shareSubscriptionsListSynchronizations(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<ShareSubscriptionSynchronizationList> localVarResp = shareSubscriptionsListSynchronizationsWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List Synchronizations in a share subscription.
     * List synchronizations of a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;ShareSubscriptionSynchronizationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSubscriptionSynchronizationList> shareSubscriptionsListSynchronizationsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsListSynchronizationsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<ShareSubscriptionSynchronizationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Synchronizations in a share subscription. (asynchronously)
     * List synchronizations of a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsListSynchronizationsAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback<ShareSubscriptionSynchronizationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsListSynchronizationsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ShareSubscriptionSynchronizationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for shareSubscriptionsSynchronize
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of share subscription (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronize Synchronize payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsSynchronizeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, Synchronize synchronize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = synchronize;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/Synchronize"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call shareSubscriptionsSynchronizeValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, Synchronize synchronize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling shareSubscriptionsSynchronize(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling shareSubscriptionsSynchronize(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling shareSubscriptionsSynchronize(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling shareSubscriptionsSynchronize(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling shareSubscriptionsSynchronize(Async)");
        }

        // verify the required parameter 'synchronize' is set
        if (synchronize == null) {
            throw new ApiException("Missing the required parameter 'synchronize' when calling shareSubscriptionsSynchronize(Async)");
        }

        return shareSubscriptionsSynchronizeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, synchronize, _callback);

    }

    /**
     * Initiate an asynchronous data share job
     * Initiate a copy
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of share subscription (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronize Synchronize payload (required)
     * @return ShareSubscriptionSynchronization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSubscriptionSynchronization shareSubscriptionsSynchronize(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, Synchronize synchronize) throws ApiException {
        ApiResponse<ShareSubscriptionSynchronization> localVarResp = shareSubscriptionsSynchronizeWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, synchronize);
        return localVarResp.getData();
    }

    /**
     * Initiate an asynchronous data share job
     * Initiate a copy
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of share subscription (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronize Synchronize payload (required)
     * @return ApiResponse&lt;ShareSubscriptionSynchronization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSubscriptionSynchronization> shareSubscriptionsSynchronizeWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, Synchronize synchronize) throws ApiException {
        okhttp3.Call localVarCall = shareSubscriptionsSynchronizeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, synchronize, null);
        Type localVarReturnType = new TypeToken<ShareSubscriptionSynchronization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Initiate an asynchronous data share job (asynchronously)
     * Initiate a copy
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of share subscription (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronize Synchronize payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call shareSubscriptionsSynchronizeAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, Synchronize synchronize, final ApiCallback<ShareSubscriptionSynchronization> _callback) throws ApiException {

        okhttp3.Call localVarCall = shareSubscriptionsSynchronizeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, synchronize, _callback);
        Type localVarReturnType = new TypeToken<ShareSubscriptionSynchronization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
