/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of the SQL DW table data set mapping.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SqlDWTableDataSetMappingProperties {
  public static final String SERIALIZED_NAME_DATA_SET_ID = "dataSetId";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ID)
  private String dataSetId;

  /**
   * Gets the status of the data set mapping.
   */
  @JsonAdapter(DataSetMappingStatusEnum.Adapter.class)
  public enum DataSetMappingStatusEnum {
    OK("Ok"),
    
    BROKEN("Broken");

    private String value;

    DataSetMappingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSetMappingStatusEnum fromValue(String value) {
      for (DataSetMappingStatusEnum b : DataSetMappingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSetMappingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSetMappingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSetMappingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSetMappingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSetMappingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SET_MAPPING_STATUS = "dataSetMappingStatus";
  @SerializedName(SERIALIZED_NAME_DATA_SET_MAPPING_STATUS)
  private DataSetMappingStatusEnum dataSetMappingStatus;

  public static final String SERIALIZED_NAME_DATA_WAREHOUSE_NAME = "dataWarehouseName";
  @SerializedName(SERIALIZED_NAME_DATA_WAREHOUSE_NAME)
  private String dataWarehouseName;

  /**
   * Provisioning state of the data set mapping.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    MOVING("Moving"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SCHEMA_NAME = "schemaName";
  @SerializedName(SERIALIZED_NAME_SCHEMA_NAME)
  private String schemaName;

  public static final String SERIALIZED_NAME_SQL_SERVER_RESOURCE_ID = "sqlServerResourceId";
  @SerializedName(SERIALIZED_NAME_SQL_SERVER_RESOURCE_ID)
  private String sqlServerResourceId;

  public static final String SERIALIZED_NAME_TABLE_NAME = "tableName";
  @SerializedName(SERIALIZED_NAME_TABLE_NAME)
  private String tableName;

  public SqlDWTableDataSetMappingProperties() {
  }

  public SqlDWTableDataSetMappingProperties(
     DataSetMappingStatusEnum dataSetMappingStatus, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.dataSetMappingStatus = dataSetMappingStatus;
    this.provisioningState = provisioningState;
  }

  public SqlDWTableDataSetMappingProperties dataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
    return this;
  }

  /**
   * The id of the source data set.
   * @return dataSetId
   */
  @javax.annotation.Nonnull
  public String getDataSetId() {
    return dataSetId;
  }

  public void setDataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
  }


  /**
   * Gets the status of the data set mapping.
   * @return dataSetMappingStatus
   */
  @javax.annotation.Nullable
  public DataSetMappingStatusEnum getDataSetMappingStatus() {
    return dataSetMappingStatus;
  }



  public SqlDWTableDataSetMappingProperties dataWarehouseName(String dataWarehouseName) {
    this.dataWarehouseName = dataWarehouseName;
    return this;
  }

  /**
   * DataWarehouse name of the source data set
   * @return dataWarehouseName
   */
  @javax.annotation.Nonnull
  public String getDataWarehouseName() {
    return dataWarehouseName;
  }

  public void setDataWarehouseName(String dataWarehouseName) {
    this.dataWarehouseName = dataWarehouseName;
  }


  /**
   * Provisioning state of the data set mapping.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public SqlDWTableDataSetMappingProperties schemaName(String schemaName) {
    this.schemaName = schemaName;
    return this;
  }

  /**
   * Schema of the table. Default value is dbo.
   * @return schemaName
   */
  @javax.annotation.Nonnull
  public String getSchemaName() {
    return schemaName;
  }

  public void setSchemaName(String schemaName) {
    this.schemaName = schemaName;
  }


  public SqlDWTableDataSetMappingProperties sqlServerResourceId(String sqlServerResourceId) {
    this.sqlServerResourceId = sqlServerResourceId;
    return this;
  }

  /**
   * Resource id of SQL server
   * @return sqlServerResourceId
   */
  @javax.annotation.Nonnull
  public String getSqlServerResourceId() {
    return sqlServerResourceId;
  }

  public void setSqlServerResourceId(String sqlServerResourceId) {
    this.sqlServerResourceId = sqlServerResourceId;
  }


  public SqlDWTableDataSetMappingProperties tableName(String tableName) {
    this.tableName = tableName;
    return this;
  }

  /**
   * SQL DW table name.
   * @return tableName
   */
  @javax.annotation.Nonnull
  public String getTableName() {
    return tableName;
  }

  public void setTableName(String tableName) {
    this.tableName = tableName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SqlDWTableDataSetMappingProperties sqlDWTableDataSetMappingProperties = (SqlDWTableDataSetMappingProperties) o;
    return Objects.equals(this.dataSetId, sqlDWTableDataSetMappingProperties.dataSetId) &&
        Objects.equals(this.dataSetMappingStatus, sqlDWTableDataSetMappingProperties.dataSetMappingStatus) &&
        Objects.equals(this.dataWarehouseName, sqlDWTableDataSetMappingProperties.dataWarehouseName) &&
        Objects.equals(this.provisioningState, sqlDWTableDataSetMappingProperties.provisioningState) &&
        Objects.equals(this.schemaName, sqlDWTableDataSetMappingProperties.schemaName) &&
        Objects.equals(this.sqlServerResourceId, sqlDWTableDataSetMappingProperties.sqlServerResourceId) &&
        Objects.equals(this.tableName, sqlDWTableDataSetMappingProperties.tableName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetId, dataSetMappingStatus, dataWarehouseName, provisioningState, schemaName, sqlServerResourceId, tableName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SqlDWTableDataSetMappingProperties {\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    dataSetMappingStatus: ").append(toIndentedString(dataSetMappingStatus)).append("\n");
    sb.append("    dataWarehouseName: ").append(toIndentedString(dataWarehouseName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    schemaName: ").append(toIndentedString(schemaName)).append("\n");
    sb.append("    sqlServerResourceId: ").append(toIndentedString(sqlServerResourceId)).append("\n");
    sb.append("    tableName: ").append(toIndentedString(tableName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetId");
    openapiFields.add("dataSetMappingStatus");
    openapiFields.add("dataWarehouseName");
    openapiFields.add("provisioningState");
    openapiFields.add("schemaName");
    openapiFields.add("sqlServerResourceId");
    openapiFields.add("tableName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSetId");
    openapiRequiredFields.add("dataWarehouseName");
    openapiRequiredFields.add("schemaName");
    openapiRequiredFields.add("sqlServerResourceId");
    openapiRequiredFields.add("tableName");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SqlDWTableDataSetMappingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SqlDWTableDataSetMappingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SqlDWTableDataSetMappingProperties is not found in the empty JSON string", SqlDWTableDataSetMappingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SqlDWTableDataSetMappingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SqlDWTableDataSetMappingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SqlDWTableDataSetMappingProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetId").toString()));
      }
      if ((jsonObj.get("dataSetMappingStatus") != null && !jsonObj.get("dataSetMappingStatus").isJsonNull()) && !jsonObj.get("dataSetMappingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetMappingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetMappingStatus").toString()));
      }
      // validate the optional field `dataSetMappingStatus`
      if (jsonObj.get("dataSetMappingStatus") != null && !jsonObj.get("dataSetMappingStatus").isJsonNull()) {
        DataSetMappingStatusEnum.validateJsonElement(jsonObj.get("dataSetMappingStatus"));
      }
      if (!jsonObj.get("dataWarehouseName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataWarehouseName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataWarehouseName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (!jsonObj.get("schemaName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `schemaName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("schemaName").toString()));
      }
      if (!jsonObj.get("sqlServerResourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sqlServerResourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sqlServerResourceId").toString()));
      }
      if (!jsonObj.get("tableName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tableName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tableName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SqlDWTableDataSetMappingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SqlDWTableDataSetMappingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SqlDWTableDataSetMappingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SqlDWTableDataSetMappingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<SqlDWTableDataSetMappingProperties>() {
           @Override
           public void write(JsonWriter out, SqlDWTableDataSetMappingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SqlDWTableDataSetMappingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SqlDWTableDataSetMappingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SqlDWTableDataSetMappingProperties
   * @throws IOException if the JSON string is invalid with respect to SqlDWTableDataSetMappingProperties
   */
  public static SqlDWTableDataSetMappingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SqlDWTableDataSetMappingProperties.class);
  }

  /**
   * Convert an instance of SqlDWTableDataSetMappingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

