/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Share subscription property bag.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:04.081401-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareSubscriptionProperties {
  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_INVITATION_ID = "invitationId";
  @SerializedName(SERIALIZED_NAME_INVITATION_ID)
  private String invitationId;

  public static final String SERIALIZED_NAME_PROVIDER_EMAIL = "providerEmail";
  @SerializedName(SERIALIZED_NAME_PROVIDER_EMAIL)
  private String providerEmail;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_PROVIDER_TENANT_NAME = "providerTenantName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TENANT_NAME)
  private String providerTenantName;

  /**
   * Provisioning state of the share subscription
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    MOVING("Moving"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_SHARE_DESCRIPTION = "shareDescription";
  @SerializedName(SERIALIZED_NAME_SHARE_DESCRIPTION)
  private String shareDescription;

  /**
   * Kind of share
   */
  @JsonAdapter(ShareKindEnum.Adapter.class)
  public enum ShareKindEnum {
    COPY_BASED("CopyBased"),
    
    IN_PLACE("InPlace");

    private String value;

    ShareKindEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareKindEnum fromValue(String value) {
      for (ShareKindEnum b : ShareKindEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareKindEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareKindEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareKindEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareKindEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareKindEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_KIND = "shareKind";
  @SerializedName(SERIALIZED_NAME_SHARE_KIND)
  private ShareKindEnum shareKind;

  public static final String SERIALIZED_NAME_SHARE_NAME = "shareName";
  @SerializedName(SERIALIZED_NAME_SHARE_NAME)
  private String shareName;

  /**
   * Gets the current status of share subscription.
   */
  @JsonAdapter(ShareSubscriptionStatusEnum.Adapter.class)
  public enum ShareSubscriptionStatusEnum {
    ACTIVE("Active"),
    
    REVOKED("Revoked"),
    
    SOURCE_DELETED("SourceDeleted"),
    
    REVOKING("Revoking");

    private String value;

    ShareSubscriptionStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ShareSubscriptionStatusEnum fromValue(String value) {
      for (ShareSubscriptionStatusEnum b : ShareSubscriptionStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ShareSubscriptionStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ShareSubscriptionStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ShareSubscriptionStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ShareSubscriptionStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ShareSubscriptionStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SHARE_SUBSCRIPTION_STATUS = "shareSubscriptionStatus";
  @SerializedName(SERIALIZED_NAME_SHARE_SUBSCRIPTION_STATUS)
  private ShareSubscriptionStatusEnum shareSubscriptionStatus;

  public static final String SERIALIZED_NAME_SHARE_TERMS = "shareTerms";
  @SerializedName(SERIALIZED_NAME_SHARE_TERMS)
  private String shareTerms;

  public static final String SERIALIZED_NAME_SOURCE_SHARE_LOCATION = "sourceShareLocation";
  @SerializedName(SERIALIZED_NAME_SOURCE_SHARE_LOCATION)
  private String sourceShareLocation;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ShareSubscriptionProperties() {
  }

  public ShareSubscriptionProperties(
     OffsetDateTime createdAt, 
     String providerEmail, 
     String providerName, 
     String providerTenantName, 
     ProvisioningStateEnum provisioningState, 
     String shareDescription, 
     ShareKindEnum shareKind, 
     String shareName, 
     ShareSubscriptionStatusEnum shareSubscriptionStatus, 
     String shareTerms, 
     String userEmail, 
     String userName
  ) {
    this();
    this.createdAt = createdAt;
    this.providerEmail = providerEmail;
    this.providerName = providerName;
    this.providerTenantName = providerTenantName;
    this.provisioningState = provisioningState;
    this.shareDescription = shareDescription;
    this.shareKind = shareKind;
    this.shareName = shareName;
    this.shareSubscriptionStatus = shareSubscriptionStatus;
    this.shareTerms = shareTerms;
    this.userEmail = userEmail;
    this.userName = userName;
  }

  /**
   * Time at which the share subscription was created.
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }



  public ShareSubscriptionProperties invitationId(String invitationId) {
    this.invitationId = invitationId;
    return this;
  }

  /**
   * The invitation id.
   * @return invitationId
   */
  @javax.annotation.Nonnull
  public String getInvitationId() {
    return invitationId;
  }

  public void setInvitationId(String invitationId) {
    this.invitationId = invitationId;
  }


  /**
   * Email of the provider who created the resource
   * @return providerEmail
   */
  @javax.annotation.Nullable
  public String getProviderEmail() {
    return providerEmail;
  }



  /**
   * Name of the provider who created the resource
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }



  /**
   * Tenant name of the provider who created the resource
   * @return providerTenantName
   */
  @javax.annotation.Nullable
  public String getProviderTenantName() {
    return providerTenantName;
  }



  /**
   * Provisioning state of the share subscription
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  /**
   * Description of share
   * @return shareDescription
   */
  @javax.annotation.Nullable
  public String getShareDescription() {
    return shareDescription;
  }



  /**
   * Kind of share
   * @return shareKind
   */
  @javax.annotation.Nullable
  public ShareKindEnum getShareKind() {
    return shareKind;
  }



  /**
   * Name of the share
   * @return shareName
   */
  @javax.annotation.Nullable
  public String getShareName() {
    return shareName;
  }



  /**
   * Gets the current status of share subscription.
   * @return shareSubscriptionStatus
   */
  @javax.annotation.Nullable
  public ShareSubscriptionStatusEnum getShareSubscriptionStatus() {
    return shareSubscriptionStatus;
  }



  /**
   * Terms of a share
   * @return shareTerms
   */
  @javax.annotation.Nullable
  public String getShareTerms() {
    return shareTerms;
  }



  public ShareSubscriptionProperties sourceShareLocation(String sourceShareLocation) {
    this.sourceShareLocation = sourceShareLocation;
    return this;
  }

  /**
   * Source share location.
   * @return sourceShareLocation
   */
  @javax.annotation.Nonnull
  public String getSourceShareLocation() {
    return sourceShareLocation;
  }

  public void setSourceShareLocation(String sourceShareLocation) {
    this.sourceShareLocation = sourceShareLocation;
  }


  /**
   * Email of the user who created the resource
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }



  /**
   * Name of the user who created the resource
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareSubscriptionProperties shareSubscriptionProperties = (ShareSubscriptionProperties) o;
    return Objects.equals(this.createdAt, shareSubscriptionProperties.createdAt) &&
        Objects.equals(this.invitationId, shareSubscriptionProperties.invitationId) &&
        Objects.equals(this.providerEmail, shareSubscriptionProperties.providerEmail) &&
        Objects.equals(this.providerName, shareSubscriptionProperties.providerName) &&
        Objects.equals(this.providerTenantName, shareSubscriptionProperties.providerTenantName) &&
        Objects.equals(this.provisioningState, shareSubscriptionProperties.provisioningState) &&
        Objects.equals(this.shareDescription, shareSubscriptionProperties.shareDescription) &&
        Objects.equals(this.shareKind, shareSubscriptionProperties.shareKind) &&
        Objects.equals(this.shareName, shareSubscriptionProperties.shareName) &&
        Objects.equals(this.shareSubscriptionStatus, shareSubscriptionProperties.shareSubscriptionStatus) &&
        Objects.equals(this.shareTerms, shareSubscriptionProperties.shareTerms) &&
        Objects.equals(this.sourceShareLocation, shareSubscriptionProperties.sourceShareLocation) &&
        Objects.equals(this.userEmail, shareSubscriptionProperties.userEmail) &&
        Objects.equals(this.userName, shareSubscriptionProperties.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createdAt, invitationId, providerEmail, providerName, providerTenantName, provisioningState, shareDescription, shareKind, shareName, shareSubscriptionStatus, shareTerms, sourceShareLocation, userEmail, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareSubscriptionProperties {\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    invitationId: ").append(toIndentedString(invitationId)).append("\n");
    sb.append("    providerEmail: ").append(toIndentedString(providerEmail)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    providerTenantName: ").append(toIndentedString(providerTenantName)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    shareDescription: ").append(toIndentedString(shareDescription)).append("\n");
    sb.append("    shareKind: ").append(toIndentedString(shareKind)).append("\n");
    sb.append("    shareName: ").append(toIndentedString(shareName)).append("\n");
    sb.append("    shareSubscriptionStatus: ").append(toIndentedString(shareSubscriptionStatus)).append("\n");
    sb.append("    shareTerms: ").append(toIndentedString(shareTerms)).append("\n");
    sb.append("    sourceShareLocation: ").append(toIndentedString(sourceShareLocation)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createdAt");
    openapiFields.add("invitationId");
    openapiFields.add("providerEmail");
    openapiFields.add("providerName");
    openapiFields.add("providerTenantName");
    openapiFields.add("provisioningState");
    openapiFields.add("shareDescription");
    openapiFields.add("shareKind");
    openapiFields.add("shareName");
    openapiFields.add("shareSubscriptionStatus");
    openapiFields.add("shareTerms");
    openapiFields.add("sourceShareLocation");
    openapiFields.add("userEmail");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("invitationId");
    openapiRequiredFields.add("sourceShareLocation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareSubscriptionProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareSubscriptionProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareSubscriptionProperties is not found in the empty JSON string", ShareSubscriptionProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareSubscriptionProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareSubscriptionProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShareSubscriptionProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("invitationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationId").toString()));
      }
      if ((jsonObj.get("providerEmail") != null && !jsonObj.get("providerEmail").isJsonNull()) && !jsonObj.get("providerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerEmail").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("providerTenantName") != null && !jsonObj.get("providerTenantName").isJsonNull()) && !jsonObj.get("providerTenantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerTenantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerTenantName").toString()));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if ((jsonObj.get("shareDescription") != null && !jsonObj.get("shareDescription").isJsonNull()) && !jsonObj.get("shareDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareDescription").toString()));
      }
      if ((jsonObj.get("shareKind") != null && !jsonObj.get("shareKind").isJsonNull()) && !jsonObj.get("shareKind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareKind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareKind").toString()));
      }
      // validate the optional field `shareKind`
      if (jsonObj.get("shareKind") != null && !jsonObj.get("shareKind").isJsonNull()) {
        ShareKindEnum.validateJsonElement(jsonObj.get("shareKind"));
      }
      if ((jsonObj.get("shareName") != null && !jsonObj.get("shareName").isJsonNull()) && !jsonObj.get("shareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareName").toString()));
      }
      if ((jsonObj.get("shareSubscriptionStatus") != null && !jsonObj.get("shareSubscriptionStatus").isJsonNull()) && !jsonObj.get("shareSubscriptionStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareSubscriptionStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareSubscriptionStatus").toString()));
      }
      // validate the optional field `shareSubscriptionStatus`
      if (jsonObj.get("shareSubscriptionStatus") != null && !jsonObj.get("shareSubscriptionStatus").isJsonNull()) {
        ShareSubscriptionStatusEnum.validateJsonElement(jsonObj.get("shareSubscriptionStatus"));
      }
      if ((jsonObj.get("shareTerms") != null && !jsonObj.get("shareTerms").isJsonNull()) && !jsonObj.get("shareTerms").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareTerms` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareTerms").toString()));
      }
      if (!jsonObj.get("sourceShareLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceShareLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceShareLocation").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareSubscriptionProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareSubscriptionProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareSubscriptionProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareSubscriptionProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareSubscriptionProperties>() {
           @Override
           public void write(JsonWriter out, ShareSubscriptionProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareSubscriptionProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareSubscriptionProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareSubscriptionProperties
   * @throws IOException if the JSON string is invalid with respect to ShareSubscriptionProperties
   */
  public static ShareSubscriptionProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareSubscriptionProperties.class);
  }

  /**
   * Convert an instance of ShareSubscriptionProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

