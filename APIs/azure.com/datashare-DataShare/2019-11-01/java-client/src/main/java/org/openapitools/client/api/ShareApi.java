/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataShareError;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.ProviderShareSubscription;
import org.openapitools.client.model.ProviderShareSubscriptionList;
import org.openapitools.client.model.Share;
import org.openapitools.client.model.ShareList;
import org.openapitools.client.model.ShareSynchronization;
import org.openapitools.client.model.ShareSynchronizationList;
import org.openapitools.client.model.SynchronizationDetailsList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ShareApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ShareApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ShareApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for providerShareSubscriptionsGetByShare
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsGetByShareCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "providerShareSubscriptionId" + "}", localVarApiClient.escapeString(providerShareSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providerShareSubscriptionsGetByShareValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsGetByShare(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsGetByShare(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling providerShareSubscriptionsGetByShare(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling providerShareSubscriptionsGetByShare(Async)");
        }

        // verify the required parameter 'providerShareSubscriptionId' is set
        if (providerShareSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'providerShareSubscriptionId' when calling providerShareSubscriptionsGetByShare(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsGetByShare(Async)");
        }

        return providerShareSubscriptionsGetByShareCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, _callback);

    }

    /**
     * Get share subscription in a provider share.
     * Get share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @return ProviderShareSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ProviderShareSubscription providerShareSubscriptionsGetByShare(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProviderShareSubscription> localVarResp = providerShareSubscriptionsGetByShareWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get share subscription in a provider share.
     * Get share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;ProviderShareSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderShareSubscription> providerShareSubscriptionsGetByShareWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = providerShareSubscriptionsGetByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProviderShareSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get share subscription in a provider share. (asynchronously)
     * Get share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsGetByShareAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback<ProviderShareSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = providerShareSubscriptionsGetByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProviderShareSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providerShareSubscriptionsListByShare
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsListByShareCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providerShareSubscriptionsListByShareValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsListByShare(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsListByShare(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling providerShareSubscriptionsListByShare(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling providerShareSubscriptionsListByShare(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsListByShare(Async)");
        }

        return providerShareSubscriptionsListByShareCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);

    }

    /**
     * List of available share subscriptions to a provider share.
     * List share subscriptions in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @return ProviderShareSubscriptionList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ProviderShareSubscriptionList providerShareSubscriptionsListByShare(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<ProviderShareSubscriptionList> localVarResp = providerShareSubscriptionsListByShareWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List of available share subscriptions to a provider share.
     * List share subscriptions in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @return ApiResponse&lt;ProviderShareSubscriptionList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderShareSubscriptionList> providerShareSubscriptionsListByShareWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = providerShareSubscriptionsListByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<ProviderShareSubscriptionList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of available share subscriptions to a provider share. (asynchronously)
     * List share subscriptions in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsListByShareAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback<ProviderShareSubscriptionList> _callback) throws ApiException {

        okhttp3.Call localVarCall = providerShareSubscriptionsListByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ProviderShareSubscriptionList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providerShareSubscriptionsReinstate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsReinstateCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}/reinstate"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "providerShareSubscriptionId" + "}", localVarApiClient.escapeString(providerShareSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providerShareSubscriptionsReinstateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsReinstate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsReinstate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling providerShareSubscriptionsReinstate(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling providerShareSubscriptionsReinstate(Async)");
        }

        // verify the required parameter 'providerShareSubscriptionId' is set
        if (providerShareSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'providerShareSubscriptionId' when calling providerShareSubscriptionsReinstate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsReinstate(Async)");
        }

        return providerShareSubscriptionsReinstateCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, _callback);

    }

    /**
     * Reinstate share subscription in a provider share.
     * Reinstate share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @return ProviderShareSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ProviderShareSubscription providerShareSubscriptionsReinstate(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProviderShareSubscription> localVarResp = providerShareSubscriptionsReinstateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Reinstate share subscription in a provider share.
     * Reinstate share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;ProviderShareSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderShareSubscription> providerShareSubscriptionsReinstateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = providerShareSubscriptionsReinstateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProviderShareSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Reinstate share subscription in a provider share. (asynchronously)
     * Reinstate share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsReinstateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback<ProviderShareSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = providerShareSubscriptionsReinstateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProviderShareSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for providerShareSubscriptionsRevoke
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsRevokeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/providerShareSubscriptions/{providerShareSubscriptionId}/revoke"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "providerShareSubscriptionId" + "}", localVarApiClient.escapeString(providerShareSubscriptionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call providerShareSubscriptionsRevokeValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling providerShareSubscriptionsRevoke(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling providerShareSubscriptionsRevoke(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling providerShareSubscriptionsRevoke(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling providerShareSubscriptionsRevoke(Async)");
        }

        // verify the required parameter 'providerShareSubscriptionId' is set
        if (providerShareSubscriptionId == null) {
            throw new ApiException("Missing the required parameter 'providerShareSubscriptionId' when calling providerShareSubscriptionsRevoke(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling providerShareSubscriptionsRevoke(Async)");
        }

        return providerShareSubscriptionsRevokeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, _callback);

    }

    /**
     * Revoke share subscription in a provider share.
     * Revoke share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @return ProviderShareSubscription
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ProviderShareSubscription providerShareSubscriptionsRevoke(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion) throws ApiException {
        ApiResponse<ProviderShareSubscription> localVarResp = providerShareSubscriptionsRevokeWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Revoke share subscription in a provider share.
     * Revoke share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;ProviderShareSubscription&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ProviderShareSubscription> providerShareSubscriptionsRevokeWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = providerShareSubscriptionsRevokeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, null);
        Type localVarReturnType = new TypeToken<ProviderShareSubscription>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Revoke share subscription in a provider share. (asynchronously)
     * Revoke share subscription in a provider share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param providerShareSubscriptionId To locate shareSubscription (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call providerShareSubscriptionsRevokeAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String providerShareSubscriptionId, String apiVersion, final ApiCallback<ProviderShareSubscription> _callback) throws ApiException {

        okhttp3.Call localVarCall = providerShareSubscriptionsRevokeValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<ProviderShareSubscription>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharesCreate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param share The share payload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesCreateCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, Share share, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = share;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharesCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, Share share, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sharesCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sharesCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sharesCreate(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling sharesCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sharesCreate(Async)");
        }

        // verify the required parameter 'share' is set
        if (share == null) {
            throw new ApiException("Missing the required parameter 'share' when calling sharesCreate(Async)");
        }

        return sharesCreateCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, share, _callback);

    }

    /**
     * Create a share in the given account.
     * Create a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param share The share payload (required)
     * @return Share
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public Share sharesCreate(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, Share share) throws ApiException {
        ApiResponse<Share> localVarResp = sharesCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, share);
        return localVarResp.getData();
    }

    /**
     * Create a share in the given account.
     * Create a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param share The share payload (required)
     * @return ApiResponse&lt;Share&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Share> sharesCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, Share share) throws ApiException {
        okhttp3.Call localVarCall = sharesCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, share, null);
        Type localVarReturnType = new TypeToken<Share>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a share in the given account. (asynchronously)
     * Create a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param share The share payload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, Share share, final ApiCallback<Share> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharesCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, share, _callback);
        Type localVarReturnType = new TypeToken<Share>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharesDelete
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharesDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sharesDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sharesDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sharesDelete(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling sharesDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sharesDelete(Async)");
        }

        return sharesDeleteCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, _callback);

    }

    /**
     * Deletes a share
     * Delete a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @return OperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public OperationResponse sharesDelete(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion) throws ApiException {
        ApiResponse<OperationResponse> localVarResp = sharesDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Deletes a share
     * Delete a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;OperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResponse> sharesDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sharesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Deletes a share (asynchronously)
     * Delete a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, final ApiCallback<OperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharesDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharesGet
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to retrieve. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesGetCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharesGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sharesGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sharesGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sharesGet(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling sharesGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sharesGet(Async)");
        }

        return sharesGetCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, _callback);

    }

    /**
     * Get a specified share
     * Get a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to retrieve. (required)
     * @param apiVersion The api version to use. (required)
     * @return Share
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public Share sharesGet(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion) throws ApiException {
        ApiResponse<Share> localVarResp = sharesGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get a specified share
     * Get a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to retrieve. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;Share&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Share> sharesGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = sharesGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Share>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a specified share (asynchronously)
     * Get a share 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to retrieve. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesGetAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, final ApiCallback<Share> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharesGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Share>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharesListByAccount
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesListByAccountCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharesListByAccountValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sharesListByAccount(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sharesListByAccount(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sharesListByAccount(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sharesListByAccount(Async)");
        }

        return sharesListByAccountCall(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken, _callback);

    }

    /**
     * List of available shares under an account.
     * List shares in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @return ShareList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareList sharesListByAccount(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<ShareList> localVarResp = sharesListByAccountWithHttpInfo(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List of available shares under an account.
     * List shares in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @return ApiResponse&lt;ShareList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareList> sharesListByAccountWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = sharesListByAccountValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<ShareList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List of available shares under an account. (asynchronously)
     * List shares in an account
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation Token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesListByAccountAsync(String subscriptionId, String resourceGroupName, String accountName, String apiVersion, String $skipToken, final ApiCallback<ShareList> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharesListByAccountValidateBeforeCall(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ShareList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharesListSynchronizationDetails
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSynchronization Share Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesListSynchronizationDetailsCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, ShareSynchronization shareSynchronization, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = shareSynchronization;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizationDetails"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharesListSynchronizationDetailsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, ShareSynchronization shareSynchronization, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sharesListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sharesListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sharesListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling sharesListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sharesListSynchronizationDetails(Async)");
        }

        // verify the required parameter 'shareSynchronization' is set
        if (shareSynchronization == null) {
            throw new ApiException("Missing the required parameter 'shareSynchronization' when calling sharesListSynchronizationDetails(Async)");
        }

        return sharesListSynchronizationDetailsCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, shareSynchronization, $skipToken, _callback);

    }

    /**
     * List data set level details for a share synchronization
     * List synchronization details
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSynchronization Share Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @return SynchronizationDetailsList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public SynchronizationDetailsList sharesListSynchronizationDetails(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, ShareSynchronization shareSynchronization, String $skipToken) throws ApiException {
        ApiResponse<SynchronizationDetailsList> localVarResp = sharesListSynchronizationDetailsWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, shareSynchronization, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List data set level details for a share synchronization
     * List synchronization details
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSynchronization Share Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;SynchronizationDetailsList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SynchronizationDetailsList> sharesListSynchronizationDetailsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, ShareSynchronization shareSynchronization, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = sharesListSynchronizationDetailsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, shareSynchronization, $skipToken, null);
        Type localVarReturnType = new TypeToken<SynchronizationDetailsList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List data set level details for a share synchronization (asynchronously)
     * List synchronization details
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param shareSynchronization Share Synchronization payload. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesListSynchronizationDetailsAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, ShareSynchronization shareSynchronization, String $skipToken, final ApiCallback<SynchronizationDetailsList> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharesListSynchronizationDetailsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, shareSynchronization, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<SynchronizationDetailsList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sharesListSynchronizations
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesListSynchronizationsCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/listSynchronizations"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sharesListSynchronizationsValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling sharesListSynchronizations(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling sharesListSynchronizations(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling sharesListSynchronizations(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling sharesListSynchronizations(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling sharesListSynchronizations(Async)");
        }

        return sharesListSynchronizationsCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);

    }

    /**
     * List Synchronizations in a share
     * List synchronizations of a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ShareSynchronizationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ShareSynchronizationList sharesListSynchronizations(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<ShareSynchronizationList> localVarResp = sharesListSynchronizationsWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List Synchronizations in a share
     * List synchronizations of a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;ShareSynchronizationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ShareSynchronizationList> sharesListSynchronizationsWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = sharesListSynchronizationsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<ShareSynchronizationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Synchronizations in a share (asynchronously)
     * List synchronizations of a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sharesListSynchronizationsAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback<ShareSynchronizationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = sharesListSynchronizationsValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<ShareSynchronizationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
