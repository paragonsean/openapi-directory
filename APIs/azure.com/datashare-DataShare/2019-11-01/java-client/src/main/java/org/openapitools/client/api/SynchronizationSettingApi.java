/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataShareError;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.SynchronizationSetting;
import org.openapitools.client.model.SynchronizationSettingList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SynchronizationSettingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SynchronizationSettingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SynchronizationSettingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for synchronizationSettingsCreate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the synchronization setting to. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronizationSetting The new synchronization setting information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, SynchronizationSetting synchronizationSetting, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = synchronizationSetting;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "synchronizationSettingName" + "}", localVarApiClient.escapeString(synchronizationSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call synchronizationSettingsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, SynchronizationSetting synchronizationSetting, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling synchronizationSettingsCreate(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling synchronizationSettingsCreate(Async)");
        }

        // verify the required parameter 'synchronizationSettingName' is set
        if (synchronizationSettingName == null) {
            throw new ApiException("Missing the required parameter 'synchronizationSettingName' when calling synchronizationSettingsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling synchronizationSettingsCreate(Async)");
        }

        // verify the required parameter 'synchronizationSetting' is set
        if (synchronizationSetting == null) {
            throw new ApiException("Missing the required parameter 'synchronizationSetting' when calling synchronizationSettingsCreate(Async)");
        }

        return synchronizationSettingsCreateCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, synchronizationSetting, _callback);

    }

    /**
     * Adds a new synchronization setting to an existing share or updates it if existing.
     * Create or update a synchronizationSetting 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the synchronization setting to. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronizationSetting The new synchronization setting information. (required)
     * @return SynchronizationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public SynchronizationSetting synchronizationSettingsCreate(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, SynchronizationSetting synchronizationSetting) throws ApiException {
        ApiResponse<SynchronizationSetting> localVarResp = synchronizationSettingsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, synchronizationSetting);
        return localVarResp.getData();
    }

    /**
     * Adds a new synchronization setting to an existing share or updates it if existing.
     * Create or update a synchronizationSetting 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the synchronization setting to. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronizationSetting The new synchronization setting information. (required)
     * @return ApiResponse&lt;SynchronizationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SynchronizationSetting> synchronizationSettingsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, SynchronizationSetting synchronizationSetting) throws ApiException {
        okhttp3.Call localVarCall = synchronizationSettingsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, synchronizationSetting, null);
        Type localVarReturnType = new TypeToken<SynchronizationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new synchronization setting to an existing share or updates it if existing. (asynchronously)
     * Create or update a synchronizationSetting 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the synchronization setting to. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @param synchronizationSetting The new synchronization setting information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, SynchronizationSetting synchronizationSetting, final ApiCallback<SynchronizationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = synchronizationSettingsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, synchronizationSetting, _callback);
        Type localVarReturnType = new TypeToken<SynchronizationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for synchronizationSettingsDelete
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting . (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "synchronizationSettingName" + "}", localVarApiClient.escapeString(synchronizationSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call synchronizationSettingsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling synchronizationSettingsDelete(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling synchronizationSettingsDelete(Async)");
        }

        // verify the required parameter 'synchronizationSettingName' is set
        if (synchronizationSettingName == null) {
            throw new ApiException("Missing the required parameter 'synchronizationSettingName' when calling synchronizationSettingsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling synchronizationSettingsDelete(Async)");
        }

        return synchronizationSettingsDeleteCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, _callback);

    }

    /**
     * Delete synchronizationSetting in a share.
     * Delete a synchronizationSetting in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting . (required)
     * @param apiVersion The api version to use. (required)
     * @return OperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public OperationResponse synchronizationSettingsDelete(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion) throws ApiException {
        ApiResponse<OperationResponse> localVarResp = synchronizationSettingsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete synchronizationSetting in a share.
     * Delete a synchronizationSetting in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting . (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;OperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResponse> synchronizationSettingsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = synchronizationSettingsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete synchronizationSetting in a share. (asynchronously)
     * Delete a synchronizationSetting in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting . (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, final ApiCallback<OperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = synchronizationSettingsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for synchronizationSettingsGet
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsGetCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings/{synchronizationSettingName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "synchronizationSettingName" + "}", localVarApiClient.escapeString(synchronizationSettingName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call synchronizationSettingsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling synchronizationSettingsGet(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling synchronizationSettingsGet(Async)");
        }

        // verify the required parameter 'synchronizationSettingName' is set
        if (synchronizationSettingName == null) {
            throw new ApiException("Missing the required parameter 'synchronizationSettingName' when calling synchronizationSettingsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling synchronizationSettingsGet(Async)");
        }

        return synchronizationSettingsGetCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, _callback);

    }

    /**
     * Get synchronizationSetting in a share.
     * Get a synchronizationSetting in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @return SynchronizationSetting
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public SynchronizationSetting synchronizationSettingsGet(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion) throws ApiException {
        ApiResponse<SynchronizationSetting> localVarResp = synchronizationSettingsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get synchronizationSetting in a share.
     * Get a synchronizationSetting in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;SynchronizationSetting&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SynchronizationSetting> synchronizationSettingsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = synchronizationSettingsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, null);
        Type localVarReturnType = new TypeToken<SynchronizationSetting>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get synchronizationSetting in a share. (asynchronously)
     * Get a synchronizationSetting in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param synchronizationSettingName The name of the synchronizationSetting. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String synchronizationSettingName, String apiVersion, final ApiCallback<SynchronizationSetting> _callback) throws ApiException {

        okhttp3.Call localVarCall = synchronizationSettingsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, synchronizationSettingName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<SynchronizationSetting>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for synchronizationSettingsListByShare
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsListByShareCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/synchronizationSettings"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call synchronizationSettingsListByShareValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling synchronizationSettingsListByShare(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling synchronizationSettingsListByShare(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling synchronizationSettingsListByShare(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling synchronizationSettingsListByShare(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling synchronizationSettingsListByShare(Async)");
        }

        return synchronizationSettingsListByShareCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);

    }

    /**
     * List synchronizationSettings in a share.
     * List synchronizationSettings in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @return SynchronizationSettingList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public SynchronizationSettingList synchronizationSettingsListByShare(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<SynchronizationSettingList> localVarResp = synchronizationSettingsListByShareWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List synchronizationSettings in a share.
     * List synchronizationSettings in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @return ApiResponse&lt;SynchronizationSettingList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SynchronizationSettingList> synchronizationSettingsListByShareWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = synchronizationSettingsListByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<SynchronizationSettingList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List synchronizationSettings in a share. (asynchronously)
     * List synchronizationSettings in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call synchronizationSettingsListByShareAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback<SynchronizationSettingList> _callback) throws ApiException {

        okhttp3.Call localVarCall = synchronizationSettingsListByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<SynchronizationSettingList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
