/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISynchronizationDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISynchronizationDetails::OAISynchronizationDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISynchronizationDetails::OAISynchronizationDetails() {
    this->initializeModel();
}

OAISynchronizationDetails::~OAISynchronizationDetails() {}

void OAISynchronizationDetails::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_data_set_type_isSet = false;
    m_data_set_type_isValid = false;

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_files_read_isSet = false;
    m_files_read_isValid = false;

    m_files_written_isSet = false;
    m_files_written_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_rows_copied_isSet = false;
    m_rows_copied_isValid = false;

    m_rows_read_isSet = false;
    m_rows_read_isValid = false;

    m_size_read_isSet = false;
    m_size_read_isValid = false;

    m_size_written_isSet = false;
    m_size_written_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_v_core_isSet = false;
    m_v_core_isValid = false;
}

void OAISynchronizationDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISynchronizationDetails::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("dataSetId")]);
    m_data_set_id_isSet = !json[QString("dataSetId")].isNull() && m_data_set_id_isValid;

    m_data_set_type_isValid = ::OpenAPI::fromJsonValue(m_data_set_type, json[QString("dataSetType")]);
    m_data_set_type_isSet = !json[QString("dataSetType")].isNull() && m_data_set_type_isValid;

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("durationMs")]);
    m_duration_ms_isSet = !json[QString("durationMs")].isNull() && m_duration_ms_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_files_read_isValid = ::OpenAPI::fromJsonValue(m_files_read, json[QString("filesRead")]);
    m_files_read_isSet = !json[QString("filesRead")].isNull() && m_files_read_isValid;

    m_files_written_isValid = ::OpenAPI::fromJsonValue(m_files_written, json[QString("filesWritten")]);
    m_files_written_isSet = !json[QString("filesWritten")].isNull() && m_files_written_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_rows_copied_isValid = ::OpenAPI::fromJsonValue(m_rows_copied, json[QString("rowsCopied")]);
    m_rows_copied_isSet = !json[QString("rowsCopied")].isNull() && m_rows_copied_isValid;

    m_rows_read_isValid = ::OpenAPI::fromJsonValue(m_rows_read, json[QString("rowsRead")]);
    m_rows_read_isSet = !json[QString("rowsRead")].isNull() && m_rows_read_isValid;

    m_size_read_isValid = ::OpenAPI::fromJsonValue(m_size_read, json[QString("sizeRead")]);
    m_size_read_isSet = !json[QString("sizeRead")].isNull() && m_size_read_isValid;

    m_size_written_isValid = ::OpenAPI::fromJsonValue(m_size_written, json[QString("sizeWritten")]);
    m_size_written_isSet = !json[QString("sizeWritten")].isNull() && m_size_written_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_v_core_isValid = ::OpenAPI::fromJsonValue(m_v_core, json[QString("vCore")]);
    m_v_core_isSet = !json[QString("vCore")].isNull() && m_v_core_isValid;
}

QString OAISynchronizationDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISynchronizationDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("dataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_data_set_type_isSet) {
        obj.insert(QString("dataSetType"), ::OpenAPI::toJsonValue(m_data_set_type));
    }
    if (m_duration_ms_isSet) {
        obj.insert(QString("durationMs"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_files_read_isSet) {
        obj.insert(QString("filesRead"), ::OpenAPI::toJsonValue(m_files_read));
    }
    if (m_files_written_isSet) {
        obj.insert(QString("filesWritten"), ::OpenAPI::toJsonValue(m_files_written));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_rows_copied_isSet) {
        obj.insert(QString("rowsCopied"), ::OpenAPI::toJsonValue(m_rows_copied));
    }
    if (m_rows_read_isSet) {
        obj.insert(QString("rowsRead"), ::OpenAPI::toJsonValue(m_rows_read));
    }
    if (m_size_read_isSet) {
        obj.insert(QString("sizeRead"), ::OpenAPI::toJsonValue(m_size_read));
    }
    if (m_size_written_isSet) {
        obj.insert(QString("sizeWritten"), ::OpenAPI::toJsonValue(m_size_written));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_v_core_isSet) {
        obj.insert(QString("vCore"), ::OpenAPI::toJsonValue(m_v_core));
    }
    return obj;
}

QString OAISynchronizationDetails::getDataSetId() const {
    return m_data_set_id;
}
void OAISynchronizationDetails::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAISynchronizationDetails::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAISynchronizationDetails::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAISynchronizationDetails::getDataSetType() const {
    return m_data_set_type;
}
void OAISynchronizationDetails::setDataSetType(const QString &data_set_type) {
    m_data_set_type = data_set_type;
    m_data_set_type_isSet = true;
}

bool OAISynchronizationDetails::is_data_set_type_Set() const{
    return m_data_set_type_isSet;
}

bool OAISynchronizationDetails::is_data_set_type_Valid() const{
    return m_data_set_type_isValid;
}

qint32 OAISynchronizationDetails::getDurationMs() const {
    return m_duration_ms;
}
void OAISynchronizationDetails::setDurationMs(const qint32 &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAISynchronizationDetails::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAISynchronizationDetails::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

QDateTime OAISynchronizationDetails::getEndTime() const {
    return m_end_time;
}
void OAISynchronizationDetails::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAISynchronizationDetails::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAISynchronizationDetails::is_end_time_Valid() const{
    return m_end_time_isValid;
}

qint64 OAISynchronizationDetails::getFilesRead() const {
    return m_files_read;
}
void OAISynchronizationDetails::setFilesRead(const qint64 &files_read) {
    m_files_read = files_read;
    m_files_read_isSet = true;
}

bool OAISynchronizationDetails::is_files_read_Set() const{
    return m_files_read_isSet;
}

bool OAISynchronizationDetails::is_files_read_Valid() const{
    return m_files_read_isValid;
}

qint64 OAISynchronizationDetails::getFilesWritten() const {
    return m_files_written;
}
void OAISynchronizationDetails::setFilesWritten(const qint64 &files_written) {
    m_files_written = files_written;
    m_files_written_isSet = true;
}

bool OAISynchronizationDetails::is_files_written_Set() const{
    return m_files_written_isSet;
}

bool OAISynchronizationDetails::is_files_written_Valid() const{
    return m_files_written_isValid;
}

QString OAISynchronizationDetails::getMessage() const {
    return m_message;
}
void OAISynchronizationDetails::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAISynchronizationDetails::is_message_Set() const{
    return m_message_isSet;
}

bool OAISynchronizationDetails::is_message_Valid() const{
    return m_message_isValid;
}

QString OAISynchronizationDetails::getName() const {
    return m_name;
}
void OAISynchronizationDetails::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAISynchronizationDetails::is_name_Set() const{
    return m_name_isSet;
}

bool OAISynchronizationDetails::is_name_Valid() const{
    return m_name_isValid;
}

qint64 OAISynchronizationDetails::getRowsCopied() const {
    return m_rows_copied;
}
void OAISynchronizationDetails::setRowsCopied(const qint64 &rows_copied) {
    m_rows_copied = rows_copied;
    m_rows_copied_isSet = true;
}

bool OAISynchronizationDetails::is_rows_copied_Set() const{
    return m_rows_copied_isSet;
}

bool OAISynchronizationDetails::is_rows_copied_Valid() const{
    return m_rows_copied_isValid;
}

qint64 OAISynchronizationDetails::getRowsRead() const {
    return m_rows_read;
}
void OAISynchronizationDetails::setRowsRead(const qint64 &rows_read) {
    m_rows_read = rows_read;
    m_rows_read_isSet = true;
}

bool OAISynchronizationDetails::is_rows_read_Set() const{
    return m_rows_read_isSet;
}

bool OAISynchronizationDetails::is_rows_read_Valid() const{
    return m_rows_read_isValid;
}

qint64 OAISynchronizationDetails::getSizeRead() const {
    return m_size_read;
}
void OAISynchronizationDetails::setSizeRead(const qint64 &size_read) {
    m_size_read = size_read;
    m_size_read_isSet = true;
}

bool OAISynchronizationDetails::is_size_read_Set() const{
    return m_size_read_isSet;
}

bool OAISynchronizationDetails::is_size_read_Valid() const{
    return m_size_read_isValid;
}

qint64 OAISynchronizationDetails::getSizeWritten() const {
    return m_size_written;
}
void OAISynchronizationDetails::setSizeWritten(const qint64 &size_written) {
    m_size_written = size_written;
    m_size_written_isSet = true;
}

bool OAISynchronizationDetails::is_size_written_Set() const{
    return m_size_written_isSet;
}

bool OAISynchronizationDetails::is_size_written_Valid() const{
    return m_size_written_isValid;
}

QDateTime OAISynchronizationDetails::getStartTime() const {
    return m_start_time;
}
void OAISynchronizationDetails::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAISynchronizationDetails::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAISynchronizationDetails::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAISynchronizationDetails::getStatus() const {
    return m_status;
}
void OAISynchronizationDetails::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAISynchronizationDetails::is_status_Set() const{
    return m_status_isSet;
}

bool OAISynchronizationDetails::is_status_Valid() const{
    return m_status_isValid;
}

qint64 OAISynchronizationDetails::getVCore() const {
    return m_v_core;
}
void OAISynchronizationDetails::setVCore(const qint64 &v_core) {
    m_v_core = v_core;
    m_v_core_isSet = true;
}

bool OAISynchronizationDetails::is_v_core_Set() const{
    return m_v_core_isSet;
}

bool OAISynchronizationDetails::is_v_core_Valid() const{
    return m_v_core_isValid;
}

bool OAISynchronizationDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_written_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_copied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rows_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_read_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_written_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_v_core_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISynchronizationDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
