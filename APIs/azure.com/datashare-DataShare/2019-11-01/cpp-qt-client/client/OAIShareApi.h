/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShareApi_H
#define OAI_OAIShareApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataShareError.h"
#include "OAIOperationResponse.h"
#include "OAIProviderShareSubscription.h"
#include "OAIProviderShareSubscriptionList.h"
#include "OAIShare.h"
#include "OAIShareList.h"
#include "OAIShareSynchronization.h"
#include "OAIShareSynchronizationList.h"
#include "OAISynchronizationDetailsList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShareApi : public QObject {
    Q_OBJECT

public:
    OAIShareApi(const int timeOut = 0);
    ~OAIShareApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  provider_share_subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void providerShareSubscriptionsGetByShare(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &provider_share_subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void providerShareSubscriptionsListByShare(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  provider_share_subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void providerShareSubscriptionsReinstate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &provider_share_subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  provider_share_subscription_id QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void providerShareSubscriptionsRevoke(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &provider_share_subscription_id, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  share OAIShare [required]
    */
    virtual void sharesCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version, const OAIShare &share);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sharesDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void sharesGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void sharesListByAccount(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  share_synchronization OAIShareSynchronization [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void sharesListSynchronizationDetails(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version, const OAIShareSynchronization &share_synchronization, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void sharesListSynchronizations(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void providerShareSubscriptionsGetByShareCallback(OAIHttpRequestWorker *worker);
    void providerShareSubscriptionsListByShareCallback(OAIHttpRequestWorker *worker);
    void providerShareSubscriptionsReinstateCallback(OAIHttpRequestWorker *worker);
    void providerShareSubscriptionsRevokeCallback(OAIHttpRequestWorker *worker);
    void sharesCreateCallback(OAIHttpRequestWorker *worker);
    void sharesDeleteCallback(OAIHttpRequestWorker *worker);
    void sharesGetCallback(OAIHttpRequestWorker *worker);
    void sharesListByAccountCallback(OAIHttpRequestWorker *worker);
    void sharesListSynchronizationDetailsCallback(OAIHttpRequestWorker *worker);
    void sharesListSynchronizationsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void providerShareSubscriptionsGetByShareSignal(OAIProviderShareSubscription summary);
    void providerShareSubscriptionsListByShareSignal(OAIProviderShareSubscriptionList summary);
    void providerShareSubscriptionsReinstateSignal(OAIProviderShareSubscription summary);
    void providerShareSubscriptionsRevokeSignal(OAIProviderShareSubscription summary);
    void sharesCreateSignal(OAIShare summary);
    void sharesDeleteSignal(OAIOperationResponse summary);
    void sharesGetSignal(OAIShare summary);
    void sharesListByAccountSignal(OAIShareList summary);
    void sharesListSynchronizationDetailsSignal(OAISynchronizationDetailsList summary);
    void sharesListSynchronizationsSignal(OAIShareSynchronizationList summary);


    void providerShareSubscriptionsGetByShareSignalFull(OAIHttpRequestWorker *worker, OAIProviderShareSubscription summary);
    void providerShareSubscriptionsListByShareSignalFull(OAIHttpRequestWorker *worker, OAIProviderShareSubscriptionList summary);
    void providerShareSubscriptionsReinstateSignalFull(OAIHttpRequestWorker *worker, OAIProviderShareSubscription summary);
    void providerShareSubscriptionsRevokeSignalFull(OAIHttpRequestWorker *worker, OAIProviderShareSubscription summary);
    void sharesCreateSignalFull(OAIHttpRequestWorker *worker, OAIShare summary);
    void sharesDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationResponse summary);
    void sharesGetSignalFull(OAIHttpRequestWorker *worker, OAIShare summary);
    void sharesListByAccountSignalFull(OAIHttpRequestWorker *worker, OAIShareList summary);
    void sharesListSynchronizationDetailsSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationDetailsList summary);
    void sharesListSynchronizationsSignalFull(OAIHttpRequestWorker *worker, OAIShareSynchronizationList summary);

    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsGetByShareSignalError() instead")
    void providerShareSubscriptionsGetByShareSignalE(OAIProviderShareSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsGetByShareSignalError(OAIProviderShareSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsListByShareSignalError() instead")
    void providerShareSubscriptionsListByShareSignalE(OAIProviderShareSubscriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsListByShareSignalError(OAIProviderShareSubscriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsReinstateSignalError() instead")
    void providerShareSubscriptionsReinstateSignalE(OAIProviderShareSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsReinstateSignalError(OAIProviderShareSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsRevokeSignalError() instead")
    void providerShareSubscriptionsRevokeSignalE(OAIProviderShareSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsRevokeSignalError(OAIProviderShareSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesCreateSignalError() instead")
    void sharesCreateSignalE(OAIShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesCreateSignalError(OAIShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesDeleteSignalError() instead")
    void sharesDeleteSignalE(OAIOperationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesDeleteSignalError(OAIOperationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesGetSignalError() instead")
    void sharesGetSignalE(OAIShare summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesGetSignalError(OAIShare summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListByAccountSignalError() instead")
    void sharesListByAccountSignalE(OAIShareList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListByAccountSignalError(OAIShareList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListSynchronizationDetailsSignalError() instead")
    void sharesListSynchronizationDetailsSignalE(OAISynchronizationDetailsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListSynchronizationDetailsSignalError(OAISynchronizationDetailsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListSynchronizationsSignalError() instead")
    void sharesListSynchronizationsSignalE(OAIShareSynchronizationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListSynchronizationsSignalError(OAIShareSynchronizationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsGetByShareSignalErrorFull() instead")
    void providerShareSubscriptionsGetByShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsGetByShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsListByShareSignalErrorFull() instead")
    void providerShareSubscriptionsListByShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsListByShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsReinstateSignalErrorFull() instead")
    void providerShareSubscriptionsReinstateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsReinstateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use providerShareSubscriptionsRevokeSignalErrorFull() instead")
    void providerShareSubscriptionsRevokeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void providerShareSubscriptionsRevokeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesCreateSignalErrorFull() instead")
    void sharesCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesDeleteSignalErrorFull() instead")
    void sharesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesGetSignalErrorFull() instead")
    void sharesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListByAccountSignalErrorFull() instead")
    void sharesListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListSynchronizationDetailsSignalErrorFull() instead")
    void sharesListSynchronizationDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListSynchronizationDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sharesListSynchronizationsSignalErrorFull() instead")
    void sharesListSynchronizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sharesListSynchronizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
