/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareSubscriptionSynchronization.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareSubscriptionSynchronization::OAIShareSubscriptionSynchronization(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareSubscriptionSynchronization::OAIShareSubscriptionSynchronization() {
    this->initializeModel();
}

OAIShareSubscriptionSynchronization::~OAIShareSubscriptionSynchronization() {}

void OAIShareSubscriptionSynchronization::initializeModel() {

    m_duration_ms_isSet = false;
    m_duration_ms_isValid = false;

    m_end_time_isSet = false;
    m_end_time_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_start_time_isSet = false;
    m_start_time_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_synchronization_id_isSet = false;
    m_synchronization_id_isValid = false;

    m_synchronization_mode_isSet = false;
    m_synchronization_mode_isValid = false;
}

void OAIShareSubscriptionSynchronization::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareSubscriptionSynchronization::fromJsonObject(QJsonObject json) {

    m_duration_ms_isValid = ::OpenAPI::fromJsonValue(m_duration_ms, json[QString("durationMs")]);
    m_duration_ms_isSet = !json[QString("durationMs")].isNull() && m_duration_ms_isValid;

    m_end_time_isValid = ::OpenAPI::fromJsonValue(m_end_time, json[QString("endTime")]);
    m_end_time_isSet = !json[QString("endTime")].isNull() && m_end_time_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_start_time_isValid = ::OpenAPI::fromJsonValue(m_start_time, json[QString("startTime")]);
    m_start_time_isSet = !json[QString("startTime")].isNull() && m_start_time_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_synchronization_id_isValid = ::OpenAPI::fromJsonValue(m_synchronization_id, json[QString("synchronizationId")]);
    m_synchronization_id_isSet = !json[QString("synchronizationId")].isNull() && m_synchronization_id_isValid;

    m_synchronization_mode_isValid = ::OpenAPI::fromJsonValue(m_synchronization_mode, json[QString("synchronizationMode")]);
    m_synchronization_mode_isSet = !json[QString("synchronizationMode")].isNull() && m_synchronization_mode_isValid;
}

QString OAIShareSubscriptionSynchronization::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareSubscriptionSynchronization::asJsonObject() const {
    QJsonObject obj;
    if (m_duration_ms_isSet) {
        obj.insert(QString("durationMs"), ::OpenAPI::toJsonValue(m_duration_ms));
    }
    if (m_end_time_isSet) {
        obj.insert(QString("endTime"), ::OpenAPI::toJsonValue(m_end_time));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_start_time_isSet) {
        obj.insert(QString("startTime"), ::OpenAPI::toJsonValue(m_start_time));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_synchronization_id_isSet) {
        obj.insert(QString("synchronizationId"), ::OpenAPI::toJsonValue(m_synchronization_id));
    }
    if (m_synchronization_mode_isSet) {
        obj.insert(QString("synchronizationMode"), ::OpenAPI::toJsonValue(m_synchronization_mode));
    }
    return obj;
}

qint32 OAIShareSubscriptionSynchronization::getDurationMs() const {
    return m_duration_ms;
}
void OAIShareSubscriptionSynchronization::setDurationMs(const qint32 &duration_ms) {
    m_duration_ms = duration_ms;
    m_duration_ms_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_duration_ms_Set() const{
    return m_duration_ms_isSet;
}

bool OAIShareSubscriptionSynchronization::is_duration_ms_Valid() const{
    return m_duration_ms_isValid;
}

QDateTime OAIShareSubscriptionSynchronization::getEndTime() const {
    return m_end_time;
}
void OAIShareSubscriptionSynchronization::setEndTime(const QDateTime &end_time) {
    m_end_time = end_time;
    m_end_time_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_end_time_Set() const{
    return m_end_time_isSet;
}

bool OAIShareSubscriptionSynchronization::is_end_time_Valid() const{
    return m_end_time_isValid;
}

QString OAIShareSubscriptionSynchronization::getMessage() const {
    return m_message;
}
void OAIShareSubscriptionSynchronization::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_message_Set() const{
    return m_message_isSet;
}

bool OAIShareSubscriptionSynchronization::is_message_Valid() const{
    return m_message_isValid;
}

QDateTime OAIShareSubscriptionSynchronization::getStartTime() const {
    return m_start_time;
}
void OAIShareSubscriptionSynchronization::setStartTime(const QDateTime &start_time) {
    m_start_time = start_time;
    m_start_time_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_start_time_Set() const{
    return m_start_time_isSet;
}

bool OAIShareSubscriptionSynchronization::is_start_time_Valid() const{
    return m_start_time_isValid;
}

QString OAIShareSubscriptionSynchronization::getStatus() const {
    return m_status;
}
void OAIShareSubscriptionSynchronization::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_status_Set() const{
    return m_status_isSet;
}

bool OAIShareSubscriptionSynchronization::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIShareSubscriptionSynchronization::getSynchronizationId() const {
    return m_synchronization_id;
}
void OAIShareSubscriptionSynchronization::setSynchronizationId(const QString &synchronization_id) {
    m_synchronization_id = synchronization_id;
    m_synchronization_id_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_synchronization_id_Set() const{
    return m_synchronization_id_isSet;
}

bool OAIShareSubscriptionSynchronization::is_synchronization_id_Valid() const{
    return m_synchronization_id_isValid;
}

QString OAIShareSubscriptionSynchronization::getSynchronizationMode() const {
    return m_synchronization_mode;
}
void OAIShareSubscriptionSynchronization::setSynchronizationMode(const QString &synchronization_mode) {
    m_synchronization_mode = synchronization_mode;
    m_synchronization_mode_isSet = true;
}

bool OAIShareSubscriptionSynchronization::is_synchronization_mode_Set() const{
    return m_synchronization_mode_isSet;
}

bool OAIShareSubscriptionSynchronization::is_synchronization_mode_Valid() const{
    return m_synchronization_mode_isValid;
}

bool OAIShareSubscriptionSynchronization::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_duration_ms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronization_mode_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareSubscriptionSynchronization::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_synchronization_id_isValid && true;
}

} // namespace OpenAPI
