/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumerSourceDataSetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumerSourceDataSetProperties::OAIConsumerSourceDataSetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumerSourceDataSetProperties::OAIConsumerSourceDataSetProperties() {
    this->initializeModel();
}

OAIConsumerSourceDataSetProperties::~OAIConsumerSourceDataSetProperties() {}

void OAIConsumerSourceDataSetProperties::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_data_set_location_isSet = false;
    m_data_set_location_isValid = false;

    m_data_set_name_isSet = false;
    m_data_set_name_isValid = false;

    m_data_set_path_isSet = false;
    m_data_set_path_isValid = false;

    m_data_set_type_isSet = false;
    m_data_set_type_isValid = false;
}

void OAIConsumerSourceDataSetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumerSourceDataSetProperties::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("dataSetId")]);
    m_data_set_id_isSet = !json[QString("dataSetId")].isNull() && m_data_set_id_isValid;

    m_data_set_location_isValid = ::OpenAPI::fromJsonValue(m_data_set_location, json[QString("dataSetLocation")]);
    m_data_set_location_isSet = !json[QString("dataSetLocation")].isNull() && m_data_set_location_isValid;

    m_data_set_name_isValid = ::OpenAPI::fromJsonValue(m_data_set_name, json[QString("dataSetName")]);
    m_data_set_name_isSet = !json[QString("dataSetName")].isNull() && m_data_set_name_isValid;

    m_data_set_path_isValid = ::OpenAPI::fromJsonValue(m_data_set_path, json[QString("dataSetPath")]);
    m_data_set_path_isSet = !json[QString("dataSetPath")].isNull() && m_data_set_path_isValid;

    m_data_set_type_isValid = ::OpenAPI::fromJsonValue(m_data_set_type, json[QString("dataSetType")]);
    m_data_set_type_isSet = !json[QString("dataSetType")].isNull() && m_data_set_type_isValid;
}

QString OAIConsumerSourceDataSetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumerSourceDataSetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("dataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_data_set_location_isSet) {
        obj.insert(QString("dataSetLocation"), ::OpenAPI::toJsonValue(m_data_set_location));
    }
    if (m_data_set_name_isSet) {
        obj.insert(QString("dataSetName"), ::OpenAPI::toJsonValue(m_data_set_name));
    }
    if (m_data_set_path_isSet) {
        obj.insert(QString("dataSetPath"), ::OpenAPI::toJsonValue(m_data_set_path));
    }
    if (m_data_set_type_isSet) {
        obj.insert(QString("dataSetType"), ::OpenAPI::toJsonValue(m_data_set_type));
    }
    return obj;
}

QString OAIConsumerSourceDataSetProperties::getDataSetId() const {
    return m_data_set_id;
}
void OAIConsumerSourceDataSetProperties::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIConsumerSourceDataSetProperties::getDataSetLocation() const {
    return m_data_set_location;
}
void OAIConsumerSourceDataSetProperties::setDataSetLocation(const QString &data_set_location) {
    m_data_set_location = data_set_location;
    m_data_set_location_isSet = true;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_location_Set() const{
    return m_data_set_location_isSet;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_location_Valid() const{
    return m_data_set_location_isValid;
}

QString OAIConsumerSourceDataSetProperties::getDataSetName() const {
    return m_data_set_name;
}
void OAIConsumerSourceDataSetProperties::setDataSetName(const QString &data_set_name) {
    m_data_set_name = data_set_name;
    m_data_set_name_isSet = true;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_name_Set() const{
    return m_data_set_name_isSet;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_name_Valid() const{
    return m_data_set_name_isValid;
}

QString OAIConsumerSourceDataSetProperties::getDataSetPath() const {
    return m_data_set_path;
}
void OAIConsumerSourceDataSetProperties::setDataSetPath(const QString &data_set_path) {
    m_data_set_path = data_set_path;
    m_data_set_path_isSet = true;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_path_Set() const{
    return m_data_set_path_isSet;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_path_Valid() const{
    return m_data_set_path_isValid;
}

QString OAIConsumerSourceDataSetProperties::getDataSetType() const {
    return m_data_set_type;
}
void OAIConsumerSourceDataSetProperties::setDataSetType(const QString &data_set_type) {
    m_data_set_type = data_set_type;
    m_data_set_type_isSet = true;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_type_Set() const{
    return m_data_set_type_isSet;
}

bool OAIConsumerSourceDataSetProperties::is_data_set_type_Valid() const{
    return m_data_set_type_isValid;
}

bool OAIConsumerSourceDataSetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumerSourceDataSetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
