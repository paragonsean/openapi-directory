/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledSourceShareSynchronizationSettingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledSourceShareSynchronizationSettingProperties::OAIScheduledSourceShareSynchronizationSettingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledSourceShareSynchronizationSettingProperties::OAIScheduledSourceShareSynchronizationSettingProperties() {
    this->initializeModel();
}

OAIScheduledSourceShareSynchronizationSettingProperties::~OAIScheduledSourceShareSynchronizationSettingProperties() {}

void OAIScheduledSourceShareSynchronizationSettingProperties::initializeModel() {

    m_recurrence_interval_isSet = false;
    m_recurrence_interval_isValid = false;

    m_synchronization_time_isSet = false;
    m_synchronization_time_isValid = false;
}

void OAIScheduledSourceShareSynchronizationSettingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledSourceShareSynchronizationSettingProperties::fromJsonObject(QJsonObject json) {

    m_recurrence_interval_isValid = ::OpenAPI::fromJsonValue(m_recurrence_interval, json[QString("recurrenceInterval")]);
    m_recurrence_interval_isSet = !json[QString("recurrenceInterval")].isNull() && m_recurrence_interval_isValid;

    m_synchronization_time_isValid = ::OpenAPI::fromJsonValue(m_synchronization_time, json[QString("synchronizationTime")]);
    m_synchronization_time_isSet = !json[QString("synchronizationTime")].isNull() && m_synchronization_time_isValid;
}

QString OAIScheduledSourceShareSynchronizationSettingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledSourceShareSynchronizationSettingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_recurrence_interval_isSet) {
        obj.insert(QString("recurrenceInterval"), ::OpenAPI::toJsonValue(m_recurrence_interval));
    }
    if (m_synchronization_time_isSet) {
        obj.insert(QString("synchronizationTime"), ::OpenAPI::toJsonValue(m_synchronization_time));
    }
    return obj;
}

QString OAIScheduledSourceShareSynchronizationSettingProperties::getRecurrenceInterval() const {
    return m_recurrence_interval;
}
void OAIScheduledSourceShareSynchronizationSettingProperties::setRecurrenceInterval(const QString &recurrence_interval) {
    m_recurrence_interval = recurrence_interval;
    m_recurrence_interval_isSet = true;
}

bool OAIScheduledSourceShareSynchronizationSettingProperties::is_recurrence_interval_Set() const{
    return m_recurrence_interval_isSet;
}

bool OAIScheduledSourceShareSynchronizationSettingProperties::is_recurrence_interval_Valid() const{
    return m_recurrence_interval_isValid;
}

QDateTime OAIScheduledSourceShareSynchronizationSettingProperties::getSynchronizationTime() const {
    return m_synchronization_time;
}
void OAIScheduledSourceShareSynchronizationSettingProperties::setSynchronizationTime(const QDateTime &synchronization_time) {
    m_synchronization_time = synchronization_time;
    m_synchronization_time_isSet = true;
}

bool OAIScheduledSourceShareSynchronizationSettingProperties::is_synchronization_time_Set() const{
    return m_synchronization_time_isSet;
}

bool OAIScheduledSourceShareSynchronizationSettingProperties::is_synchronization_time_Valid() const{
    return m_synchronization_time_isValid;
}

bool OAIScheduledSourceShareSynchronizationSettingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_recurrence_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronization_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledSourceShareSynchronizationSettingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
