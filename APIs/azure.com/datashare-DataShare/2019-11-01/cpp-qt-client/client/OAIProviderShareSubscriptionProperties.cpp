/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProviderShareSubscriptionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProviderShareSubscriptionProperties::OAIProviderShareSubscriptionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProviderShareSubscriptionProperties::OAIProviderShareSubscriptionProperties() {
    this->initializeModel();
}

OAIProviderShareSubscriptionProperties::~OAIProviderShareSubscriptionProperties() {}

void OAIProviderShareSubscriptionProperties::initializeModel() {

    m_consumer_email_isSet = false;
    m_consumer_email_isValid = false;

    m_consumer_name_isSet = false;
    m_consumer_name_isValid = false;

    m_consumer_tenant_name_isSet = false;
    m_consumer_tenant_name_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_provider_email_isSet = false;
    m_provider_email_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_share_subscription_object_id_isSet = false;
    m_share_subscription_object_id_isValid = false;

    m_share_subscription_status_isSet = false;
    m_share_subscription_status_isValid = false;

    m_shared_at_isSet = false;
    m_shared_at_isValid = false;
}

void OAIProviderShareSubscriptionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProviderShareSubscriptionProperties::fromJsonObject(QJsonObject json) {

    m_consumer_email_isValid = ::OpenAPI::fromJsonValue(m_consumer_email, json[QString("consumerEmail")]);
    m_consumer_email_isSet = !json[QString("consumerEmail")].isNull() && m_consumer_email_isValid;

    m_consumer_name_isValid = ::OpenAPI::fromJsonValue(m_consumer_name, json[QString("consumerName")]);
    m_consumer_name_isSet = !json[QString("consumerName")].isNull() && m_consumer_name_isValid;

    m_consumer_tenant_name_isValid = ::OpenAPI::fromJsonValue(m_consumer_tenant_name, json[QString("consumerTenantName")]);
    m_consumer_tenant_name_isSet = !json[QString("consumerTenantName")].isNull() && m_consumer_tenant_name_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_provider_email_isValid = ::OpenAPI::fromJsonValue(m_provider_email, json[QString("providerEmail")]);
    m_provider_email_isSet = !json[QString("providerEmail")].isNull() && m_provider_email_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;

    m_share_subscription_object_id_isValid = ::OpenAPI::fromJsonValue(m_share_subscription_object_id, json[QString("shareSubscriptionObjectId")]);
    m_share_subscription_object_id_isSet = !json[QString("shareSubscriptionObjectId")].isNull() && m_share_subscription_object_id_isValid;

    m_share_subscription_status_isValid = ::OpenAPI::fromJsonValue(m_share_subscription_status, json[QString("shareSubscriptionStatus")]);
    m_share_subscription_status_isSet = !json[QString("shareSubscriptionStatus")].isNull() && m_share_subscription_status_isValid;

    m_shared_at_isValid = ::OpenAPI::fromJsonValue(m_shared_at, json[QString("sharedAt")]);
    m_shared_at_isSet = !json[QString("sharedAt")].isNull() && m_shared_at_isValid;
}

QString OAIProviderShareSubscriptionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProviderShareSubscriptionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_consumer_email_isSet) {
        obj.insert(QString("consumerEmail"), ::OpenAPI::toJsonValue(m_consumer_email));
    }
    if (m_consumer_name_isSet) {
        obj.insert(QString("consumerName"), ::OpenAPI::toJsonValue(m_consumer_name));
    }
    if (m_consumer_tenant_name_isSet) {
        obj.insert(QString("consumerTenantName"), ::OpenAPI::toJsonValue(m_consumer_tenant_name));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_provider_email_isSet) {
        obj.insert(QString("providerEmail"), ::OpenAPI::toJsonValue(m_provider_email));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_share_subscription_object_id_isSet) {
        obj.insert(QString("shareSubscriptionObjectId"), ::OpenAPI::toJsonValue(m_share_subscription_object_id));
    }
    if (m_share_subscription_status_isSet) {
        obj.insert(QString("shareSubscriptionStatus"), ::OpenAPI::toJsonValue(m_share_subscription_status));
    }
    if (m_shared_at_isSet) {
        obj.insert(QString("sharedAt"), ::OpenAPI::toJsonValue(m_shared_at));
    }
    return obj;
}

QString OAIProviderShareSubscriptionProperties::getConsumerEmail() const {
    return m_consumer_email;
}
void OAIProviderShareSubscriptionProperties::setConsumerEmail(const QString &consumer_email) {
    m_consumer_email = consumer_email;
    m_consumer_email_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_consumer_email_Set() const{
    return m_consumer_email_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_consumer_email_Valid() const{
    return m_consumer_email_isValid;
}

QString OAIProviderShareSubscriptionProperties::getConsumerName() const {
    return m_consumer_name;
}
void OAIProviderShareSubscriptionProperties::setConsumerName(const QString &consumer_name) {
    m_consumer_name = consumer_name;
    m_consumer_name_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_consumer_name_Set() const{
    return m_consumer_name_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_consumer_name_Valid() const{
    return m_consumer_name_isValid;
}

QString OAIProviderShareSubscriptionProperties::getConsumerTenantName() const {
    return m_consumer_tenant_name;
}
void OAIProviderShareSubscriptionProperties::setConsumerTenantName(const QString &consumer_tenant_name) {
    m_consumer_tenant_name = consumer_tenant_name;
    m_consumer_tenant_name_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_consumer_tenant_name_Set() const{
    return m_consumer_tenant_name_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_consumer_tenant_name_Valid() const{
    return m_consumer_tenant_name_isValid;
}

QDateTime OAIProviderShareSubscriptionProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIProviderShareSubscriptionProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIProviderShareSubscriptionProperties::getProviderEmail() const {
    return m_provider_email;
}
void OAIProviderShareSubscriptionProperties::setProviderEmail(const QString &provider_email) {
    m_provider_email = provider_email;
    m_provider_email_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_provider_email_Set() const{
    return m_provider_email_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_provider_email_Valid() const{
    return m_provider_email_isValid;
}

QString OAIProviderShareSubscriptionProperties::getProviderName() const {
    return m_provider_name;
}
void OAIProviderShareSubscriptionProperties::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QString OAIProviderShareSubscriptionProperties::getShareSubscriptionObjectId() const {
    return m_share_subscription_object_id;
}
void OAIProviderShareSubscriptionProperties::setShareSubscriptionObjectId(const QString &share_subscription_object_id) {
    m_share_subscription_object_id = share_subscription_object_id;
    m_share_subscription_object_id_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_share_subscription_object_id_Set() const{
    return m_share_subscription_object_id_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_share_subscription_object_id_Valid() const{
    return m_share_subscription_object_id_isValid;
}

QString OAIProviderShareSubscriptionProperties::getShareSubscriptionStatus() const {
    return m_share_subscription_status;
}
void OAIProviderShareSubscriptionProperties::setShareSubscriptionStatus(const QString &share_subscription_status) {
    m_share_subscription_status = share_subscription_status;
    m_share_subscription_status_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_share_subscription_status_Set() const{
    return m_share_subscription_status_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_share_subscription_status_Valid() const{
    return m_share_subscription_status_isValid;
}

QDateTime OAIProviderShareSubscriptionProperties::getSharedAt() const {
    return m_shared_at;
}
void OAIProviderShareSubscriptionProperties::setSharedAt(const QDateTime &shared_at) {
    m_shared_at = shared_at;
    m_shared_at_isSet = true;
}

bool OAIProviderShareSubscriptionProperties::is_shared_at_Set() const{
    return m_shared_at_isSet;
}

bool OAIProviderShareSubscriptionProperties::is_shared_at_Valid() const{
    return m_shared_at_isValid;
}

bool OAIProviderShareSubscriptionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_consumer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumer_tenant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_subscription_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_subscription_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_shared_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProviderShareSubscriptionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
