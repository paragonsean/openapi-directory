/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISynchronizationSettingApi_H
#define OAI_OAISynchronizationSettingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDataShareError.h"
#include "OAIOperationResponse.h"
#include "OAISynchronizationSetting.h"
#include "OAISynchronizationSettingList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISynchronizationSettingApi : public QObject {
    Q_OBJECT

public:
    OAISynchronizationSettingApi(const int timeOut = 0);
    ~OAISynchronizationSettingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  synchronization_setting_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  synchronization_setting OAISynchronizationSetting [required]
    */
    virtual void synchronizationSettingsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &synchronization_setting_name, const QString &api_version, const OAISynchronizationSetting &synchronization_setting);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  synchronization_setting_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void synchronizationSettingsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &synchronization_setting_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  synchronization_setting_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void synchronizationSettingsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &synchronization_setting_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void synchronizationSettingsListByShare(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void synchronizationSettingsCreateCallback(OAIHttpRequestWorker *worker);
    void synchronizationSettingsDeleteCallback(OAIHttpRequestWorker *worker);
    void synchronizationSettingsGetCallback(OAIHttpRequestWorker *worker);
    void synchronizationSettingsListByShareCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void synchronizationSettingsCreateSignal(OAISynchronizationSetting summary);
    void synchronizationSettingsDeleteSignal(OAIOperationResponse summary);
    void synchronizationSettingsGetSignal(OAISynchronizationSetting summary);
    void synchronizationSettingsListByShareSignal(OAISynchronizationSettingList summary);


    void synchronizationSettingsCreateSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationSetting summary);
    void synchronizationSettingsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationResponse summary);
    void synchronizationSettingsGetSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationSetting summary);
    void synchronizationSettingsListByShareSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationSettingList summary);

    Q_DECL_DEPRECATED_X("Use synchronizationSettingsCreateSignalError() instead")
    void synchronizationSettingsCreateSignalE(OAISynchronizationSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsCreateSignalError(OAISynchronizationSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use synchronizationSettingsDeleteSignalError() instead")
    void synchronizationSettingsDeleteSignalE(OAIOperationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsDeleteSignalError(OAIOperationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use synchronizationSettingsGetSignalError() instead")
    void synchronizationSettingsGetSignalE(OAISynchronizationSetting summary, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsGetSignalError(OAISynchronizationSetting summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use synchronizationSettingsListByShareSignalError() instead")
    void synchronizationSettingsListByShareSignalE(OAISynchronizationSettingList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsListByShareSignalError(OAISynchronizationSettingList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use synchronizationSettingsCreateSignalErrorFull() instead")
    void synchronizationSettingsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use synchronizationSettingsDeleteSignalErrorFull() instead")
    void synchronizationSettingsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use synchronizationSettingsGetSignalErrorFull() instead")
    void synchronizationSettingsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use synchronizationSettingsListByShareSignalErrorFull() instead")
    void synchronizationSettingsListByShareSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void synchronizationSettingsListByShareSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
