/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccountProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccountProperties::OAIAccountProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccountProperties::OAIAccountProperties() {
    this->initializeModel();
}

OAIAccountProperties::~OAIAccountProperties() {}

void OAIAccountProperties::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIAccountProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccountProperties::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIAccountProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccountProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QDateTime OAIAccountProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIAccountProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIAccountProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIAccountProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIAccountProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIAccountProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIAccountProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIAccountProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIAccountProperties::getUserEmail() const {
    return m_user_email;
}
void OAIAccountProperties::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIAccountProperties::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIAccountProperties::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIAccountProperties::getUserName() const {
    return m_user_name;
}
void OAIAccountProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIAccountProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIAccountProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIAccountProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccountProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
