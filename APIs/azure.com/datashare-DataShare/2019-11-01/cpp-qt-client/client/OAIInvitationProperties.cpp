/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2019-11-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInvitationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInvitationProperties::OAIInvitationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInvitationProperties::OAIInvitationProperties() {
    this->initializeModel();
}

OAIInvitationProperties::~OAIInvitationProperties() {}

void OAIInvitationProperties::initializeModel() {

    m_invitation_id_isSet = false;
    m_invitation_id_isValid = false;

    m_invitation_status_isSet = false;
    m_invitation_status_isValid = false;

    m_responded_at_isSet = false;
    m_responded_at_isValid = false;

    m_sent_at_isSet = false;
    m_sent_at_isValid = false;

    m_target_active_directory_id_isSet = false;
    m_target_active_directory_id_isValid = false;

    m_target_email_isSet = false;
    m_target_email_isValid = false;

    m_target_object_id_isSet = false;
    m_target_object_id_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIInvitationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInvitationProperties::fromJsonObject(QJsonObject json) {

    m_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_invitation_id, json[QString("invitationId")]);
    m_invitation_id_isSet = !json[QString("invitationId")].isNull() && m_invitation_id_isValid;

    m_invitation_status_isValid = ::OpenAPI::fromJsonValue(m_invitation_status, json[QString("invitationStatus")]);
    m_invitation_status_isSet = !json[QString("invitationStatus")].isNull() && m_invitation_status_isValid;

    m_responded_at_isValid = ::OpenAPI::fromJsonValue(m_responded_at, json[QString("respondedAt")]);
    m_responded_at_isSet = !json[QString("respondedAt")].isNull() && m_responded_at_isValid;

    m_sent_at_isValid = ::OpenAPI::fromJsonValue(m_sent_at, json[QString("sentAt")]);
    m_sent_at_isSet = !json[QString("sentAt")].isNull() && m_sent_at_isValid;

    m_target_active_directory_id_isValid = ::OpenAPI::fromJsonValue(m_target_active_directory_id, json[QString("targetActiveDirectoryId")]);
    m_target_active_directory_id_isSet = !json[QString("targetActiveDirectoryId")].isNull() && m_target_active_directory_id_isValid;

    m_target_email_isValid = ::OpenAPI::fromJsonValue(m_target_email, json[QString("targetEmail")]);
    m_target_email_isSet = !json[QString("targetEmail")].isNull() && m_target_email_isValid;

    m_target_object_id_isValid = ::OpenAPI::fromJsonValue(m_target_object_id, json[QString("targetObjectId")]);
    m_target_object_id_isSet = !json[QString("targetObjectId")].isNull() && m_target_object_id_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIInvitationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInvitationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_invitation_id_isSet) {
        obj.insert(QString("invitationId"), ::OpenAPI::toJsonValue(m_invitation_id));
    }
    if (m_invitation_status_isSet) {
        obj.insert(QString("invitationStatus"), ::OpenAPI::toJsonValue(m_invitation_status));
    }
    if (m_responded_at_isSet) {
        obj.insert(QString("respondedAt"), ::OpenAPI::toJsonValue(m_responded_at));
    }
    if (m_sent_at_isSet) {
        obj.insert(QString("sentAt"), ::OpenAPI::toJsonValue(m_sent_at));
    }
    if (m_target_active_directory_id_isSet) {
        obj.insert(QString("targetActiveDirectoryId"), ::OpenAPI::toJsonValue(m_target_active_directory_id));
    }
    if (m_target_email_isSet) {
        obj.insert(QString("targetEmail"), ::OpenAPI::toJsonValue(m_target_email));
    }
    if (m_target_object_id_isSet) {
        obj.insert(QString("targetObjectId"), ::OpenAPI::toJsonValue(m_target_object_id));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QString OAIInvitationProperties::getInvitationId() const {
    return m_invitation_id;
}
void OAIInvitationProperties::setInvitationId(const QString &invitation_id) {
    m_invitation_id = invitation_id;
    m_invitation_id_isSet = true;
}

bool OAIInvitationProperties::is_invitation_id_Set() const{
    return m_invitation_id_isSet;
}

bool OAIInvitationProperties::is_invitation_id_Valid() const{
    return m_invitation_id_isValid;
}

QString OAIInvitationProperties::getInvitationStatus() const {
    return m_invitation_status;
}
void OAIInvitationProperties::setInvitationStatus(const QString &invitation_status) {
    m_invitation_status = invitation_status;
    m_invitation_status_isSet = true;
}

bool OAIInvitationProperties::is_invitation_status_Set() const{
    return m_invitation_status_isSet;
}

bool OAIInvitationProperties::is_invitation_status_Valid() const{
    return m_invitation_status_isValid;
}

QDateTime OAIInvitationProperties::getRespondedAt() const {
    return m_responded_at;
}
void OAIInvitationProperties::setRespondedAt(const QDateTime &responded_at) {
    m_responded_at = responded_at;
    m_responded_at_isSet = true;
}

bool OAIInvitationProperties::is_responded_at_Set() const{
    return m_responded_at_isSet;
}

bool OAIInvitationProperties::is_responded_at_Valid() const{
    return m_responded_at_isValid;
}

QDateTime OAIInvitationProperties::getSentAt() const {
    return m_sent_at;
}
void OAIInvitationProperties::setSentAt(const QDateTime &sent_at) {
    m_sent_at = sent_at;
    m_sent_at_isSet = true;
}

bool OAIInvitationProperties::is_sent_at_Set() const{
    return m_sent_at_isSet;
}

bool OAIInvitationProperties::is_sent_at_Valid() const{
    return m_sent_at_isValid;
}

QString OAIInvitationProperties::getTargetActiveDirectoryId() const {
    return m_target_active_directory_id;
}
void OAIInvitationProperties::setTargetActiveDirectoryId(const QString &target_active_directory_id) {
    m_target_active_directory_id = target_active_directory_id;
    m_target_active_directory_id_isSet = true;
}

bool OAIInvitationProperties::is_target_active_directory_id_Set() const{
    return m_target_active_directory_id_isSet;
}

bool OAIInvitationProperties::is_target_active_directory_id_Valid() const{
    return m_target_active_directory_id_isValid;
}

QString OAIInvitationProperties::getTargetEmail() const {
    return m_target_email;
}
void OAIInvitationProperties::setTargetEmail(const QString &target_email) {
    m_target_email = target_email;
    m_target_email_isSet = true;
}

bool OAIInvitationProperties::is_target_email_Set() const{
    return m_target_email_isSet;
}

bool OAIInvitationProperties::is_target_email_Valid() const{
    return m_target_email_isValid;
}

QString OAIInvitationProperties::getTargetObjectId() const {
    return m_target_object_id;
}
void OAIInvitationProperties::setTargetObjectId(const QString &target_object_id) {
    m_target_object_id = target_object_id;
    m_target_object_id_isSet = true;
}

bool OAIInvitationProperties::is_target_object_id_Set() const{
    return m_target_object_id_isSet;
}

bool OAIInvitationProperties::is_target_object_id_Valid() const{
    return m_target_object_id_isValid;
}

QString OAIInvitationProperties::getUserEmail() const {
    return m_user_email;
}
void OAIInvitationProperties::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIInvitationProperties::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIInvitationProperties::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIInvitationProperties::getUserName() const {
    return m_user_name;
}
void OAIInvitationProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIInvitationProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIInvitationProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIInvitationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_active_directory_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_target_object_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInvitationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
