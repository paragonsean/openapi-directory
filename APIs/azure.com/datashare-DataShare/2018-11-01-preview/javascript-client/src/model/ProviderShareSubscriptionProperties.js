/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProviderShareSubscriptionProperties model module.
 * @module model/ProviderShareSubscriptionProperties
 * @version 2018-11-01-preview
 */
class ProviderShareSubscriptionProperties {
    /**
     * Constructs a new <code>ProviderShareSubscriptionProperties</code>.
     * Provider share subscription properties
     * @alias module:model/ProviderShareSubscriptionProperties
     */
    constructor() { 
        
        ProviderShareSubscriptionProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProviderShareSubscriptionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProviderShareSubscriptionProperties} obj Optional instance to populate.
     * @return {module:model/ProviderShareSubscriptionProperties} The populated <code>ProviderShareSubscriptionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProviderShareSubscriptionProperties();

            if (data.hasOwnProperty('consumerEmail')) {
                obj['consumerEmail'] = ApiClient.convertToType(data['consumerEmail'], 'String');
            }
            if (data.hasOwnProperty('consumerName')) {
                obj['consumerName'] = ApiClient.convertToType(data['consumerName'], 'String');
            }
            if (data.hasOwnProperty('consumerTenantName')) {
                obj['consumerTenantName'] = ApiClient.convertToType(data['consumerTenantName'], 'String');
            }
            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('providerEmail')) {
                obj['providerEmail'] = ApiClient.convertToType(data['providerEmail'], 'String');
            }
            if (data.hasOwnProperty('providerName')) {
                obj['providerName'] = ApiClient.convertToType(data['providerName'], 'String');
            }
            if (data.hasOwnProperty('shareSubscriptionObjectId')) {
                obj['shareSubscriptionObjectId'] = ApiClient.convertToType(data['shareSubscriptionObjectId'], 'String');
            }
            if (data.hasOwnProperty('shareSubscriptionStatus')) {
                obj['shareSubscriptionStatus'] = ApiClient.convertToType(data['shareSubscriptionStatus'], 'String');
            }
            if (data.hasOwnProperty('sharedAt')) {
                obj['sharedAt'] = ApiClient.convertToType(data['sharedAt'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProviderShareSubscriptionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProviderShareSubscriptionProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['consumerEmail'] && !(typeof data['consumerEmail'] === 'string' || data['consumerEmail'] instanceof String)) {
            throw new Error("Expected the field `consumerEmail` to be a primitive type in the JSON string but got " + data['consumerEmail']);
        }
        // ensure the json data is a string
        if (data['consumerName'] && !(typeof data['consumerName'] === 'string' || data['consumerName'] instanceof String)) {
            throw new Error("Expected the field `consumerName` to be a primitive type in the JSON string but got " + data['consumerName']);
        }
        // ensure the json data is a string
        if (data['consumerTenantName'] && !(typeof data['consumerTenantName'] === 'string' || data['consumerTenantName'] instanceof String)) {
            throw new Error("Expected the field `consumerTenantName` to be a primitive type in the JSON string but got " + data['consumerTenantName']);
        }
        // ensure the json data is a string
        if (data['providerEmail'] && !(typeof data['providerEmail'] === 'string' || data['providerEmail'] instanceof String)) {
            throw new Error("Expected the field `providerEmail` to be a primitive type in the JSON string but got " + data['providerEmail']);
        }
        // ensure the json data is a string
        if (data['providerName'] && !(typeof data['providerName'] === 'string' || data['providerName'] instanceof String)) {
            throw new Error("Expected the field `providerName` to be a primitive type in the JSON string but got " + data['providerName']);
        }
        // ensure the json data is a string
        if (data['shareSubscriptionObjectId'] && !(typeof data['shareSubscriptionObjectId'] === 'string' || data['shareSubscriptionObjectId'] instanceof String)) {
            throw new Error("Expected the field `shareSubscriptionObjectId` to be a primitive type in the JSON string but got " + data['shareSubscriptionObjectId']);
        }
        // ensure the json data is a string
        if (data['shareSubscriptionStatus'] && !(typeof data['shareSubscriptionStatus'] === 'string' || data['shareSubscriptionStatus'] instanceof String)) {
            throw new Error("Expected the field `shareSubscriptionStatus` to be a primitive type in the JSON string but got " + data['shareSubscriptionStatus']);
        }

        return true;
    }


}



/**
 * Email of the consumer who created the share subscription
 * @member {String} consumerEmail
 */
ProviderShareSubscriptionProperties.prototype['consumerEmail'] = undefined;

/**
 * Name of the consumer who created the share subscription
 * @member {String} consumerName
 */
ProviderShareSubscriptionProperties.prototype['consumerName'] = undefined;

/**
 * Tenant name of the consumer who created the share subscription
 * @member {String} consumerTenantName
 */
ProviderShareSubscriptionProperties.prototype['consumerTenantName'] = undefined;

/**
 * created at
 * @member {Date} createdAt
 */
ProviderShareSubscriptionProperties.prototype['createdAt'] = undefined;

/**
 * Email of the provider who created the share
 * @member {String} providerEmail
 */
ProviderShareSubscriptionProperties.prototype['providerEmail'] = undefined;

/**
 * Name of the provider who created the share
 * @member {String} providerName
 */
ProviderShareSubscriptionProperties.prototype['providerName'] = undefined;

/**
 * share Subscription Object Id
 * @member {String} shareSubscriptionObjectId
 */
ProviderShareSubscriptionProperties.prototype['shareSubscriptionObjectId'] = undefined;

/**
 * Gets the status of share subscription
 * @member {module:model/ProviderShareSubscriptionProperties.ShareSubscriptionStatusEnum} shareSubscriptionStatus
 */
ProviderShareSubscriptionProperties.prototype['shareSubscriptionStatus'] = undefined;

/**
 * Shared at
 * @member {Date} sharedAt
 */
ProviderShareSubscriptionProperties.prototype['sharedAt'] = undefined;





/**
 * Allowed values for the <code>shareSubscriptionStatus</code> property.
 * @enum {String}
 * @readonly
 */
ProviderShareSubscriptionProperties['ShareSubscriptionStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Revoked"
     * @const
     */
    "Revoked": "Revoked",

    /**
     * value: "SourceDeleted"
     * @const
     */
    "SourceDeleted": "SourceDeleted",

    /**
     * value: "Revoking"
     * @const
     */
    "Revoking": "Revoking"
};



export default ProviderShareSubscriptionProperties;

