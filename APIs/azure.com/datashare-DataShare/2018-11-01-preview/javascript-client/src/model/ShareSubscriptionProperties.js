/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ShareSubscriptionProperties model module.
 * @module model/ShareSubscriptionProperties
 * @version 2018-11-01-preview
 */
class ShareSubscriptionProperties {
    /**
     * Constructs a new <code>ShareSubscriptionProperties</code>.
     * Share subscription property bag.
     * @alias module:model/ShareSubscriptionProperties
     * @param invitationId {String} The invitation id.
     */
    constructor(invitationId) { 
        
        ShareSubscriptionProperties.initialize(this, invitationId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, invitationId) { 
        obj['invitationId'] = invitationId;
    }

    /**
     * Constructs a <code>ShareSubscriptionProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ShareSubscriptionProperties} obj Optional instance to populate.
     * @return {module:model/ShareSubscriptionProperties} The populated <code>ShareSubscriptionProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ShareSubscriptionProperties();

            if (data.hasOwnProperty('createdAt')) {
                obj['createdAt'] = ApiClient.convertToType(data['createdAt'], 'Date');
            }
            if (data.hasOwnProperty('invitationId')) {
                obj['invitationId'] = ApiClient.convertToType(data['invitationId'], 'String');
            }
            if (data.hasOwnProperty('providerEmail')) {
                obj['providerEmail'] = ApiClient.convertToType(data['providerEmail'], 'String');
            }
            if (data.hasOwnProperty('providerName')) {
                obj['providerName'] = ApiClient.convertToType(data['providerName'], 'String');
            }
            if (data.hasOwnProperty('providerTenantName')) {
                obj['providerTenantName'] = ApiClient.convertToType(data['providerTenantName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('shareDescription')) {
                obj['shareDescription'] = ApiClient.convertToType(data['shareDescription'], 'String');
            }
            if (data.hasOwnProperty('shareKind')) {
                obj['shareKind'] = ApiClient.convertToType(data['shareKind'], 'String');
            }
            if (data.hasOwnProperty('shareName')) {
                obj['shareName'] = ApiClient.convertToType(data['shareName'], 'String');
            }
            if (data.hasOwnProperty('shareSubscriptionStatus')) {
                obj['shareSubscriptionStatus'] = ApiClient.convertToType(data['shareSubscriptionStatus'], 'String');
            }
            if (data.hasOwnProperty('shareTerms')) {
                obj['shareTerms'] = ApiClient.convertToType(data['shareTerms'], 'String');
            }
            if (data.hasOwnProperty('userEmail')) {
                obj['userEmail'] = ApiClient.convertToType(data['userEmail'], 'String');
            }
            if (data.hasOwnProperty('userName')) {
                obj['userName'] = ApiClient.convertToType(data['userName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ShareSubscriptionProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ShareSubscriptionProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ShareSubscriptionProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['invitationId'] && !(typeof data['invitationId'] === 'string' || data['invitationId'] instanceof String)) {
            throw new Error("Expected the field `invitationId` to be a primitive type in the JSON string but got " + data['invitationId']);
        }
        // ensure the json data is a string
        if (data['providerEmail'] && !(typeof data['providerEmail'] === 'string' || data['providerEmail'] instanceof String)) {
            throw new Error("Expected the field `providerEmail` to be a primitive type in the JSON string but got " + data['providerEmail']);
        }
        // ensure the json data is a string
        if (data['providerName'] && !(typeof data['providerName'] === 'string' || data['providerName'] instanceof String)) {
            throw new Error("Expected the field `providerName` to be a primitive type in the JSON string but got " + data['providerName']);
        }
        // ensure the json data is a string
        if (data['providerTenantName'] && !(typeof data['providerTenantName'] === 'string' || data['providerTenantName'] instanceof String)) {
            throw new Error("Expected the field `providerTenantName` to be a primitive type in the JSON string but got " + data['providerTenantName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['shareDescription'] && !(typeof data['shareDescription'] === 'string' || data['shareDescription'] instanceof String)) {
            throw new Error("Expected the field `shareDescription` to be a primitive type in the JSON string but got " + data['shareDescription']);
        }
        // ensure the json data is a string
        if (data['shareKind'] && !(typeof data['shareKind'] === 'string' || data['shareKind'] instanceof String)) {
            throw new Error("Expected the field `shareKind` to be a primitive type in the JSON string but got " + data['shareKind']);
        }
        // ensure the json data is a string
        if (data['shareName'] && !(typeof data['shareName'] === 'string' || data['shareName'] instanceof String)) {
            throw new Error("Expected the field `shareName` to be a primitive type in the JSON string but got " + data['shareName']);
        }
        // ensure the json data is a string
        if (data['shareSubscriptionStatus'] && !(typeof data['shareSubscriptionStatus'] === 'string' || data['shareSubscriptionStatus'] instanceof String)) {
            throw new Error("Expected the field `shareSubscriptionStatus` to be a primitive type in the JSON string but got " + data['shareSubscriptionStatus']);
        }
        // ensure the json data is a string
        if (data['shareTerms'] && !(typeof data['shareTerms'] === 'string' || data['shareTerms'] instanceof String)) {
            throw new Error("Expected the field `shareTerms` to be a primitive type in the JSON string but got " + data['shareTerms']);
        }
        // ensure the json data is a string
        if (data['userEmail'] && !(typeof data['userEmail'] === 'string' || data['userEmail'] instanceof String)) {
            throw new Error("Expected the field `userEmail` to be a primitive type in the JSON string but got " + data['userEmail']);
        }
        // ensure the json data is a string
        if (data['userName'] && !(typeof data['userName'] === 'string' || data['userName'] instanceof String)) {
            throw new Error("Expected the field `userName` to be a primitive type in the JSON string but got " + data['userName']);
        }

        return true;
    }


}

ShareSubscriptionProperties.RequiredProperties = ["invitationId"];

/**
 * Time at which the share subscription was created.
 * @member {Date} createdAt
 */
ShareSubscriptionProperties.prototype['createdAt'] = undefined;

/**
 * The invitation id.
 * @member {String} invitationId
 */
ShareSubscriptionProperties.prototype['invitationId'] = undefined;

/**
 * Email of the provider who created the resource
 * @member {String} providerEmail
 */
ShareSubscriptionProperties.prototype['providerEmail'] = undefined;

/**
 * Name of the provider who created the resource
 * @member {String} providerName
 */
ShareSubscriptionProperties.prototype['providerName'] = undefined;

/**
 * Tenant name of the provider who created the resource
 * @member {String} providerTenantName
 */
ShareSubscriptionProperties.prototype['providerTenantName'] = undefined;

/**
 * Provisioning state of the share subscription
 * @member {module:model/ShareSubscriptionProperties.ProvisioningStateEnum} provisioningState
 */
ShareSubscriptionProperties.prototype['provisioningState'] = undefined;

/**
 * Description of share
 * @member {String} shareDescription
 */
ShareSubscriptionProperties.prototype['shareDescription'] = undefined;

/**
 * Kind of share
 * @member {module:model/ShareSubscriptionProperties.ShareKindEnum} shareKind
 */
ShareSubscriptionProperties.prototype['shareKind'] = undefined;

/**
 * Name of the share
 * @member {String} shareName
 */
ShareSubscriptionProperties.prototype['shareName'] = undefined;

/**
 * Gets the current status of share subscription.
 * @member {module:model/ShareSubscriptionProperties.ShareSubscriptionStatusEnum} shareSubscriptionStatus
 */
ShareSubscriptionProperties.prototype['shareSubscriptionStatus'] = undefined;

/**
 * Terms of a share
 * @member {String} shareTerms
 */
ShareSubscriptionProperties.prototype['shareTerms'] = undefined;

/**
 * Email of the user who created the resource
 * @member {String} userEmail
 */
ShareSubscriptionProperties.prototype['userEmail'] = undefined;

/**
 * Name of the user who created the resource
 * @member {String} userName
 */
ShareSubscriptionProperties.prototype['userName'] = undefined;





/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
ShareSubscriptionProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};


/**
 * Allowed values for the <code>shareKind</code> property.
 * @enum {String}
 * @readonly
 */
ShareSubscriptionProperties['ShareKindEnum'] = {

    /**
     * value: "CopyBased"
     * @const
     */
    "CopyBased": "CopyBased",

    /**
     * value: "InPlace"
     * @const
     */
    "InPlace": "InPlace"
};


/**
 * Allowed values for the <code>shareSubscriptionStatus</code> property.
 * @enum {String}
 * @readonly
 */
ShareSubscriptionProperties['ShareSubscriptionStatusEnum'] = {

    /**
     * value: "Active"
     * @const
     */
    "Active": "Active",

    /**
     * value: "Revoked"
     * @const
     */
    "Revoked": "Revoked",

    /**
     * value: "SourceDeleted"
     * @const
     */
    "SourceDeleted": "SourceDeleted",

    /**
     * value: "Revoking"
     * @const
     */
    "Revoking": "Revoking"
};



export default ShareSubscriptionProperties;

