/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SqlDBTableDataSetMappingProperties model module.
 * @module model/SqlDBTableDataSetMappingProperties
 * @version 2018-11-01-preview
 */
class SqlDBTableDataSetMappingProperties {
    /**
     * Constructs a new <code>SqlDBTableDataSetMappingProperties</code>.
     * Properties of the SQL DB table data set mapping.
     * @alias module:model/SqlDBTableDataSetMappingProperties
     * @param dataSetId {String} The id of the source data set.
     * @param databaseName {String} DatabaseName name of the sink data set
     * @param schemaName {String} Schema of the table. Default value is dbo.
     * @param sqlServerResourceId {String} Resource id of SQL server
     * @param tableName {String} SQL DB table name.
     */
    constructor(dataSetId, databaseName, schemaName, sqlServerResourceId, tableName) { 
        
        SqlDBTableDataSetMappingProperties.initialize(this, dataSetId, databaseName, schemaName, sqlServerResourceId, tableName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dataSetId, databaseName, schemaName, sqlServerResourceId, tableName) { 
        obj['dataSetId'] = dataSetId;
        obj['databaseName'] = databaseName;
        obj['schemaName'] = schemaName;
        obj['sqlServerResourceId'] = sqlServerResourceId;
        obj['tableName'] = tableName;
    }

    /**
     * Constructs a <code>SqlDBTableDataSetMappingProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SqlDBTableDataSetMappingProperties} obj Optional instance to populate.
     * @return {module:model/SqlDBTableDataSetMappingProperties} The populated <code>SqlDBTableDataSetMappingProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SqlDBTableDataSetMappingProperties();

            if (data.hasOwnProperty('dataSetId')) {
                obj['dataSetId'] = ApiClient.convertToType(data['dataSetId'], 'String');
            }
            if (data.hasOwnProperty('dataSetMappingStatus')) {
                obj['dataSetMappingStatus'] = ApiClient.convertToType(data['dataSetMappingStatus'], 'String');
            }
            if (data.hasOwnProperty('databaseName')) {
                obj['databaseName'] = ApiClient.convertToType(data['databaseName'], 'String');
            }
            if (data.hasOwnProperty('provisioningState')) {
                obj['provisioningState'] = ApiClient.convertToType(data['provisioningState'], 'String');
            }
            if (data.hasOwnProperty('schemaName')) {
                obj['schemaName'] = ApiClient.convertToType(data['schemaName'], 'String');
            }
            if (data.hasOwnProperty('sqlServerResourceId')) {
                obj['sqlServerResourceId'] = ApiClient.convertToType(data['sqlServerResourceId'], 'String');
            }
            if (data.hasOwnProperty('tableName')) {
                obj['tableName'] = ApiClient.convertToType(data['tableName'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SqlDBTableDataSetMappingProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SqlDBTableDataSetMappingProperties</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SqlDBTableDataSetMappingProperties.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dataSetId'] && !(typeof data['dataSetId'] === 'string' || data['dataSetId'] instanceof String)) {
            throw new Error("Expected the field `dataSetId` to be a primitive type in the JSON string but got " + data['dataSetId']);
        }
        // ensure the json data is a string
        if (data['dataSetMappingStatus'] && !(typeof data['dataSetMappingStatus'] === 'string' || data['dataSetMappingStatus'] instanceof String)) {
            throw new Error("Expected the field `dataSetMappingStatus` to be a primitive type in the JSON string but got " + data['dataSetMappingStatus']);
        }
        // ensure the json data is a string
        if (data['databaseName'] && !(typeof data['databaseName'] === 'string' || data['databaseName'] instanceof String)) {
            throw new Error("Expected the field `databaseName` to be a primitive type in the JSON string but got " + data['databaseName']);
        }
        // ensure the json data is a string
        if (data['provisioningState'] && !(typeof data['provisioningState'] === 'string' || data['provisioningState'] instanceof String)) {
            throw new Error("Expected the field `provisioningState` to be a primitive type in the JSON string but got " + data['provisioningState']);
        }
        // ensure the json data is a string
        if (data['schemaName'] && !(typeof data['schemaName'] === 'string' || data['schemaName'] instanceof String)) {
            throw new Error("Expected the field `schemaName` to be a primitive type in the JSON string but got " + data['schemaName']);
        }
        // ensure the json data is a string
        if (data['sqlServerResourceId'] && !(typeof data['sqlServerResourceId'] === 'string' || data['sqlServerResourceId'] instanceof String)) {
            throw new Error("Expected the field `sqlServerResourceId` to be a primitive type in the JSON string but got " + data['sqlServerResourceId']);
        }
        // ensure the json data is a string
        if (data['tableName'] && !(typeof data['tableName'] === 'string' || data['tableName'] instanceof String)) {
            throw new Error("Expected the field `tableName` to be a primitive type in the JSON string but got " + data['tableName']);
        }

        return true;
    }


}

SqlDBTableDataSetMappingProperties.RequiredProperties = ["dataSetId", "databaseName", "schemaName", "sqlServerResourceId", "tableName"];

/**
 * The id of the source data set.
 * @member {String} dataSetId
 */
SqlDBTableDataSetMappingProperties.prototype['dataSetId'] = undefined;

/**
 * Gets the status of the data set mapping.
 * @member {module:model/SqlDBTableDataSetMappingProperties.DataSetMappingStatusEnum} dataSetMappingStatus
 */
SqlDBTableDataSetMappingProperties.prototype['dataSetMappingStatus'] = undefined;

/**
 * DatabaseName name of the sink data set
 * @member {String} databaseName
 */
SqlDBTableDataSetMappingProperties.prototype['databaseName'] = undefined;

/**
 * Provisioning state of the data set mapping.
 * @member {module:model/SqlDBTableDataSetMappingProperties.ProvisioningStateEnum} provisioningState
 */
SqlDBTableDataSetMappingProperties.prototype['provisioningState'] = undefined;

/**
 * Schema of the table. Default value is dbo.
 * @member {String} schemaName
 */
SqlDBTableDataSetMappingProperties.prototype['schemaName'] = undefined;

/**
 * Resource id of SQL server
 * @member {String} sqlServerResourceId
 */
SqlDBTableDataSetMappingProperties.prototype['sqlServerResourceId'] = undefined;

/**
 * SQL DB table name.
 * @member {String} tableName
 */
SqlDBTableDataSetMappingProperties.prototype['tableName'] = undefined;





/**
 * Allowed values for the <code>dataSetMappingStatus</code> property.
 * @enum {String}
 * @readonly
 */
SqlDBTableDataSetMappingProperties['DataSetMappingStatusEnum'] = {

    /**
     * value: "Ok"
     * @const
     */
    "Ok": "Ok",

    /**
     * value: "Broken"
     * @const
     */
    "Broken": "Broken"
};


/**
 * Allowed values for the <code>provisioningState</code> property.
 * @enum {String}
 * @readonly
 */
SqlDBTableDataSetMappingProperties['ProvisioningStateEnum'] = {

    /**
     * value: "Succeeded"
     * @const
     */
    "Succeeded": "Succeeded",

    /**
     * value: "Creating"
     * @const
     */
    "Creating": "Creating",

    /**
     * value: "Deleting"
     * @const
     */
    "Deleting": "Deleting",

    /**
     * value: "Moving"
     * @const
     */
    "Moving": "Moving",

    /**
     * value: "Failed"
     * @const
     */
    "Failed": "Failed"
};



export default SqlDBTableDataSetMappingProperties;

