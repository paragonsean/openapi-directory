/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ConsumerSourceDataSetProperties model module.
 * @module model/ConsumerSourceDataSetProperties
 * @version 2018-11-01-preview
 */
class ConsumerSourceDataSetProperties {
    /**
     * Constructs a new <code>ConsumerSourceDataSetProperties</code>.
     * Properties of consumer source dataSet
     * @alias module:model/ConsumerSourceDataSetProperties
     */
    constructor() { 
        
        ConsumerSourceDataSetProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ConsumerSourceDataSetProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ConsumerSourceDataSetProperties} obj Optional instance to populate.
     * @return {module:model/ConsumerSourceDataSetProperties} The populated <code>ConsumerSourceDataSetProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ConsumerSourceDataSetProperties();

            if (data.hasOwnProperty('dataSetId')) {
                obj['dataSetId'] = ApiClient.convertToType(data['dataSetId'], 'String');
            }
            if (data.hasOwnProperty('dataSetLocation')) {
                obj['dataSetLocation'] = ApiClient.convertToType(data['dataSetLocation'], 'String');
            }
            if (data.hasOwnProperty('dataSetName')) {
                obj['dataSetName'] = ApiClient.convertToType(data['dataSetName'], 'String');
            }
            if (data.hasOwnProperty('dataSetPath')) {
                obj['dataSetPath'] = ApiClient.convertToType(data['dataSetPath'], 'String');
            }
            if (data.hasOwnProperty('dataSetType')) {
                obj['dataSetType'] = ApiClient.convertToType(data['dataSetType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ConsumerSourceDataSetProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ConsumerSourceDataSetProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['dataSetId'] && !(typeof data['dataSetId'] === 'string' || data['dataSetId'] instanceof String)) {
            throw new Error("Expected the field `dataSetId` to be a primitive type in the JSON string but got " + data['dataSetId']);
        }
        // ensure the json data is a string
        if (data['dataSetLocation'] && !(typeof data['dataSetLocation'] === 'string' || data['dataSetLocation'] instanceof String)) {
            throw new Error("Expected the field `dataSetLocation` to be a primitive type in the JSON string but got " + data['dataSetLocation']);
        }
        // ensure the json data is a string
        if (data['dataSetName'] && !(typeof data['dataSetName'] === 'string' || data['dataSetName'] instanceof String)) {
            throw new Error("Expected the field `dataSetName` to be a primitive type in the JSON string but got " + data['dataSetName']);
        }
        // ensure the json data is a string
        if (data['dataSetPath'] && !(typeof data['dataSetPath'] === 'string' || data['dataSetPath'] instanceof String)) {
            throw new Error("Expected the field `dataSetPath` to be a primitive type in the JSON string but got " + data['dataSetPath']);
        }
        // ensure the json data is a string
        if (data['dataSetType'] && !(typeof data['dataSetType'] === 'string' || data['dataSetType'] instanceof String)) {
            throw new Error("Expected the field `dataSetType` to be a primitive type in the JSON string but got " + data['dataSetType']);
        }

        return true;
    }


}



/**
 * DataSet Id
 * @member {String} dataSetId
 */
ConsumerSourceDataSetProperties.prototype['dataSetId'] = undefined;

/**
 * Location of the data set.
 * @member {String} dataSetLocation
 */
ConsumerSourceDataSetProperties.prototype['dataSetLocation'] = undefined;

/**
 * DataSet name
 * @member {String} dataSetName
 */
ConsumerSourceDataSetProperties.prototype['dataSetName'] = undefined;

/**
 * DataSet path
 * @member {String} dataSetPath
 */
ConsumerSourceDataSetProperties.prototype['dataSetPath'] = undefined;

/**
 * Type of data set
 * @member {module:model/ConsumerSourceDataSetProperties.DataSetTypeEnum} dataSetType
 */
ConsumerSourceDataSetProperties.prototype['dataSetType'] = undefined;





/**
 * Allowed values for the <code>dataSetType</code> property.
 * @enum {String}
 * @readonly
 */
ConsumerSourceDataSetProperties['DataSetTypeEnum'] = {

    /**
     * value: "Blob"
     * @const
     */
    "Blob": "Blob",

    /**
     * value: "Container"
     * @const
     */
    "Container": "Container",

    /**
     * value: "BlobFolder"
     * @const
     */
    "BlobFolder": "BlobFolder",

    /**
     * value: "AdlsGen2FileSystem"
     * @const
     */
    "AdlsGen2FileSystem": "AdlsGen2FileSystem",

    /**
     * value: "AdlsGen2Folder"
     * @const
     */
    "AdlsGen2Folder": "AdlsGen2Folder",

    /**
     * value: "AdlsGen2File"
     * @const
     */
    "AdlsGen2File": "AdlsGen2File",

    /**
     * value: "AdlsGen1Folder"
     * @const
     */
    "AdlsGen1Folder": "AdlsGen1Folder",

    /**
     * value: "AdlsGen1File"
     * @const
     */
    "AdlsGen1File": "AdlsGen1File",

    /**
     * value: "KustoCluster"
     * @const
     */
    "KustoCluster": "KustoCluster",

    /**
     * value: "KustoDatabase"
     * @const
     */
    "KustoDatabase": "KustoDatabase",

    /**
     * value: "SqlDBTable"
     * @const
     */
    "SqlDBTable": "SqlDBTable",

    /**
     * value: "SqlDWTable"
     * @const
     */
    "SqlDWTable": "SqlDWTable"
};



export default ConsumerSourceDataSetProperties;

