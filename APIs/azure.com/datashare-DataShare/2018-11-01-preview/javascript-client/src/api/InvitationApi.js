/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataShareError from '../model/DataShareError';
import Invitation from '../model/Invitation';
import InvitationList from '../model/InvitationList';

/**
* Invitation service.
* @module api/InvitationApi
* @version 2018-11-01-preview
*/
export default class InvitationApi {

    /**
    * Constructs a new InvitationApi. 
    * @alias module:api/InvitationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the invitationsCreate operation.
     * @callback module:api/InvitationApi~invitationsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sends a new invitation to a recipient to access a share.
     * Create an invitation 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share to send the invitation for.
     * @param {String} invitationName The name of the invitation.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/Invitation} invitation Invitation details.
     * @param {module:api/InvitationApi~invitationsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    invitationsCreate(subscriptionId, resourceGroupName, accountName, shareName, invitationName, apiVersion, invitation, callback) {
      let postBody = invitation;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling invitationsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling invitationsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling invitationsCreate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling invitationsCreate");
      }
      // verify the required parameter 'invitationName' is set
      if (invitationName === undefined || invitationName === null) {
        throw new Error("Missing the required parameter 'invitationName' when calling invitationsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling invitationsCreate");
      }
      // verify the required parameter 'invitation' is set
      if (invitation === undefined || invitation === null) {
        throw new Error("Missing the required parameter 'invitation' when calling invitationsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'invitationName': invitationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations/{invitationName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invitationsDelete operation.
     * @callback module:api/InvitationApi~invitationsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Invitation in a share.
     * Delete an invitation in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} invitationName The name of the invitation.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/InvitationApi~invitationsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    invitationsDelete(subscriptionId, resourceGroupName, accountName, shareName, invitationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling invitationsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling invitationsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling invitationsDelete");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling invitationsDelete");
      }
      // verify the required parameter 'invitationName' is set
      if (invitationName === undefined || invitationName === null) {
        throw new Error("Missing the required parameter 'invitationName' when calling invitationsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling invitationsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'invitationName': invitationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations/{invitationName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invitationsGet operation.
     * @callback module:api/InvitationApi~invitationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Invitation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Invitation in a share.
     * Get an invitation in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} invitationName The name of the invitation.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/InvitationApi~invitationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Invitation}
     */
    invitationsGet(subscriptionId, resourceGroupName, accountName, shareName, invitationName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling invitationsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling invitationsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling invitationsGet");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling invitationsGet");
      }
      // verify the required parameter 'invitationName' is set
      if (invitationName === undefined || invitationName === null) {
        throw new Error("Missing the required parameter 'invitationName' when calling invitationsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling invitationsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'invitationName': invitationName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Invitation;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations/{invitationName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the invitationsListByShare operation.
     * @callback module:api/InvitationApi~invitationsListByShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InvitationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List all Invitations in a share.
     * List invitations in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] The continuation token
     * @param {module:api/InvitationApi~invitationsListByShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InvitationList}
     */
    invitationsListByShare(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling invitationsListByShare");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling invitationsListByShare");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling invitationsListByShare");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling invitationsListByShare");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling invitationsListByShare");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InvitationList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/invitations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
