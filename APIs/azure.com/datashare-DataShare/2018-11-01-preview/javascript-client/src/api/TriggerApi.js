/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataShareError from '../model/DataShareError';
import OperationResponse from '../model/OperationResponse';
import Trigger from '../model/Trigger';
import TriggerList from '../model/TriggerList';

/**
* Trigger service.
* @module api/TriggerApi
* @version 2018-11-01-preview
*/
export default class TriggerApi {

    /**
    * Constructs a new TriggerApi. 
    * @alias module:api/TriggerApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the triggersCreate operation.
     * @callback module:api/TriggerApi~triggersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This method creates a trigger for a share subscription
     * Create a Trigger 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the share subscription which will hold the data set sink.
     * @param {String} triggerName The name of the trigger.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/Trigger} trigger Trigger details.
     * @param {module:api/TriggerApi~triggersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trigger}
     */
    triggersCreate(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, trigger, callback) {
      let postBody = trigger;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling triggersCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling triggersCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling triggersCreate");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling triggersCreate");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling triggersCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling triggersCreate");
      }
      // verify the required parameter 'trigger' is set
      if (trigger === undefined || trigger === null) {
        throw new Error("Missing the required parameter 'trigger' when calling triggersCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggersDelete operation.
     * @callback module:api/TriggerApi~triggersDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OperationResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete Trigger in a shareSubscription.
     * Delete a Trigger in a shareSubscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} triggerName The name of the trigger.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/TriggerApi~triggersDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OperationResponse}
     */
    triggersDelete(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling triggersDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling triggersDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling triggersDelete");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling triggersDelete");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling triggersDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling triggersDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OperationResponse;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggersGet operation.
     * @callback module:api/TriggerApi~triggersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Trigger} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Trigger in a shareSubscription.
     * Get a Trigger in a shareSubscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the shareSubscription.
     * @param {String} triggerName The name of the trigger.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/TriggerApi~triggersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Trigger}
     */
    triggersGet(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling triggersGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling triggersGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling triggersGet");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling triggersGet");
      }
      // verify the required parameter 'triggerName' is set
      if (triggerName === undefined || triggerName === null) {
        throw new Error("Missing the required parameter 'triggerName' when calling triggersGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling triggersGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName,
        'triggerName': triggerName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Trigger;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the triggersListByShareSubscription operation.
     * @callback module:api/TriggerApi~triggersListByShareSubscriptionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TriggerList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List Triggers in a share subscription.
     * List Triggers in a share subscription
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareSubscriptionName The name of the share subscription.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] Continuation token
     * @param {module:api/TriggerApi~triggersListByShareSubscriptionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TriggerList}
     */
    triggersListByShareSubscription(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling triggersListByShareSubscription");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling triggersListByShareSubscription");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling triggersListByShareSubscription");
      }
      // verify the required parameter 'shareSubscriptionName' is set
      if (shareSubscriptionName === undefined || shareSubscriptionName === null) {
        throw new Error("Missing the required parameter 'shareSubscriptionName' when calling triggersListByShareSubscription");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling triggersListByShareSubscription");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareSubscriptionName': shareSubscriptionName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TriggerList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
