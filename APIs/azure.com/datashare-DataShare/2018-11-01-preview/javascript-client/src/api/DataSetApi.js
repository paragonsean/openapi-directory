/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataSet from '../model/DataSet';
import DataSetList from '../model/DataSetList';
import DataShareError from '../model/DataShareError';

/**
* DataSet service.
* @module api/DataSetApi
* @version 2018-11-01-preview
*/
export default class DataSetApi {

    /**
    * Constructs a new DataSetApi. 
    * @alias module:api/DataSetApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the dataSetsCreate operation.
     * @callback module:api/DataSetApi~dataSetsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Adds a new data set to an existing share or updates it if existing.
     * Create a DataSet 
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share to add the data set to.
     * @param {String} dataSetName The name of the dataSet.
     * @param {String} apiVersion The api version to use.
     * @param {module:model/DataSet} dataSet The new data set information.
     * @param {module:api/DataSetApi~dataSetsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSet}
     */
    dataSetsCreate(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, dataSet, callback) {
      let postBody = dataSet;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetsCreate");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetsCreate");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetsCreate");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling dataSetsCreate");
      }
      // verify the required parameter 'dataSetName' is set
      if (dataSetName === undefined || dataSetName === null) {
        throw new Error("Missing the required parameter 'dataSetName' when calling dataSetsCreate");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetsCreate");
      }
      // verify the required parameter 'dataSet' is set
      if (dataSet === undefined || dataSet === null) {
        throw new Error("Missing the required parameter 'dataSet' when calling dataSetsCreate");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'dataSetName': dataSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataSetsDelete operation.
     * @callback module:api/DataSetApi~dataSetsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete DataSet in a share.
     * Delete a DataSet in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} dataSetName The name of the dataSet.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/DataSetApi~dataSetsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    dataSetsDelete(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetsDelete");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetsDelete");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetsDelete");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling dataSetsDelete");
      }
      // verify the required parameter 'dataSetName' is set
      if (dataSetName === undefined || dataSetName === null) {
        throw new Error("Missing the required parameter 'dataSetName' when calling dataSetsDelete");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetsDelete");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'dataSetName': dataSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataSetsGet operation.
     * @callback module:api/DataSetApi~dataSetsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get DataSet in a share.
     * Get a DataSet in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} dataSetName The name of the dataSet.
     * @param {String} apiVersion The api version to use.
     * @param {module:api/DataSetApi~dataSetsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSet}
     */
    dataSetsGet(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, callback) {
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetsGet");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetsGet");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetsGet");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling dataSetsGet");
      }
      // verify the required parameter 'dataSetName' is set
      if (dataSetName === undefined || dataSetName === null) {
        throw new Error("Missing the required parameter 'dataSetName' when calling dataSetsGet");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetsGet");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName,
        'dataSetName': dataSetName
      };
      let queryParams = {
        'api-version': apiVersion
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSet;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the dataSetsListByShare operation.
     * @callback module:api/DataSetApi~dataSetsListByShareCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataSetList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List DataSets in a share.
     * List DataSets in a share
     * @param {String} subscriptionId The subscription identifier
     * @param {String} resourceGroupName The resource group name.
     * @param {String} accountName The name of the share account.
     * @param {String} shareName The name of the share.
     * @param {String} apiVersion The api version to use.
     * @param {Object} opts Optional parameters
     * @param {String} [skipToken] continuation token
     * @param {module:api/DataSetApi~dataSetsListByShareCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataSetList}
     */
    dataSetsListByShare(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'subscriptionId' is set
      if (subscriptionId === undefined || subscriptionId === null) {
        throw new Error("Missing the required parameter 'subscriptionId' when calling dataSetsListByShare");
      }
      // verify the required parameter 'resourceGroupName' is set
      if (resourceGroupName === undefined || resourceGroupName === null) {
        throw new Error("Missing the required parameter 'resourceGroupName' when calling dataSetsListByShare");
      }
      // verify the required parameter 'accountName' is set
      if (accountName === undefined || accountName === null) {
        throw new Error("Missing the required parameter 'accountName' when calling dataSetsListByShare");
      }
      // verify the required parameter 'shareName' is set
      if (shareName === undefined || shareName === null) {
        throw new Error("Missing the required parameter 'shareName' when calling dataSetsListByShare");
      }
      // verify the required parameter 'apiVersion' is set
      if (apiVersion === undefined || apiVersion === null) {
        throw new Error("Missing the required parameter 'apiVersion' when calling dataSetsListByShare");
      }

      let pathParams = {
        'subscriptionId': subscriptionId,
        'resourceGroupName': resourceGroupName,
        'accountName': accountName,
        'shareName': shareName
      };
      let queryParams = {
        'api-version': apiVersion,
        '$skipToken': opts['skipToken']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['azure_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DataSetList;
      return this.apiClient.callApi(
        '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
