/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DataShareManagementClient);
  }
}(this, function(expect, DataShareManagementClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new DataShareManagementClient.SynchronizationDetails();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SynchronizationDetails', function() {
    it('should create an instance of SynchronizationDetails', function() {
      // uncomment below and update the code to test SynchronizationDetails
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be.a(DataShareManagementClient.SynchronizationDetails);
    });

    it('should have the property dataSetId (base name: "dataSetId")', function() {
      // uncomment below and update the code to test the property dataSetId
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property dataSetType (base name: "dataSetType")', function() {
      // uncomment below and update the code to test the property dataSetType
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property durationMs (base name: "durationMs")', function() {
      // uncomment below and update the code to test the property durationMs
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property endTime (base name: "endTime")', function() {
      // uncomment below and update the code to test the property endTime
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property filesRead (base name: "filesRead")', function() {
      // uncomment below and update the code to test the property filesRead
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property filesWritten (base name: "filesWritten")', function() {
      // uncomment below and update the code to test the property filesWritten
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property message (base name: "message")', function() {
      // uncomment below and update the code to test the property message
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property rowsCopied (base name: "rowsCopied")', function() {
      // uncomment below and update the code to test the property rowsCopied
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property rowsRead (base name: "rowsRead")', function() {
      // uncomment below and update the code to test the property rowsRead
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property sizeRead (base name: "sizeRead")', function() {
      // uncomment below and update the code to test the property sizeRead
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property sizeWritten (base name: "sizeWritten")', function() {
      // uncomment below and update the code to test the property sizeWritten
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property startTime (base name: "startTime")', function() {
      // uncomment below and update the code to test the property startTime
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

    it('should have the property vCore (base name: "vCore")', function() {
      // uncomment below and update the code to test the property vCore
      //var instance = new DataShareManagementClient.SynchronizationDetails();
      //expect(instance).to.be();
    });

  });

}));
