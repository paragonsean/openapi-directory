/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.DataShareError;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.ProviderShareSubscription;
import org.openapitools.client.model.ProviderShareSubscriptionList;
import org.openapitools.client.model.Share;
import org.openapitools.client.model.ShareList;
import org.openapitools.client.model.ShareSynchronization;
import org.openapitools.client.model.ShareSynchronizationList;
import org.openapitools.client.model.SynchronizationDetailsList;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShareApi
 */
@Disabled
public class ShareApiTest {

    private final ShareApi api = new ShareApi();

    /**
     * Get share subscription in a provider share.
     *
     * Get share subscription in a provider share
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerShareSubscriptionsGetByShareTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String providerShareSubscriptionId = null;
        String apiVersion = null;
        ProviderShareSubscription response = api.providerShareSubscriptionsGetByShare(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * List of available share subscriptions to a provider share.
     *
     * List share subscriptions in a provider share
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerShareSubscriptionsListByShareTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String apiVersion = null;
        String $skipToken = null;
        ProviderShareSubscriptionList response = api.providerShareSubscriptionsListByShare(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken);
        // TODO: test validations
    }

    /**
     * Reinstate share subscription in a provider share.
     *
     * Reinstate share subscription in a provider share
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerShareSubscriptionsReinstateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String providerShareSubscriptionId = null;
        String apiVersion = null;
        ProviderShareSubscription response = api.providerShareSubscriptionsReinstate(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Revoke share subscription in a provider share.
     *
     * Revoke share subscription in a provider share
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void providerShareSubscriptionsRevokeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String providerShareSubscriptionId = null;
        String apiVersion = null;
        ProviderShareSubscription response = api.providerShareSubscriptionsRevoke(subscriptionId, resourceGroupName, accountName, shareName, providerShareSubscriptionId, apiVersion);
        // TODO: test validations
    }

    /**
     * Create a share in the given account.
     *
     * Create a share 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharesCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String apiVersion = null;
        Share share = null;
        Share response = api.sharesCreate(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, share);
        // TODO: test validations
    }

    /**
     * Deletes a share
     *
     * Delete a share 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharesDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String apiVersion = null;
        OperationResponse response = api.sharesDelete(subscriptionId, resourceGroupName, accountName, shareName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get a specified share
     *
     * Get a share 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharesGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String apiVersion = null;
        Share response = api.sharesGet(subscriptionId, resourceGroupName, accountName, shareName, apiVersion);
        // TODO: test validations
    }

    /**
     * List of available shares under an account.
     *
     * List shares in an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharesListByAccountTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $skipToken = null;
        ShareList response = api.sharesListByAccount(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken);
        // TODO: test validations
    }

    /**
     * List data set level details for a share synchronization
     *
     * List synchronization details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharesListSynchronizationDetailsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String apiVersion = null;
        ShareSynchronization shareSynchronization = null;
        String $skipToken = null;
        SynchronizationDetailsList response = api.sharesListSynchronizationDetails(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, shareSynchronization, $skipToken);
        // TODO: test validations
    }

    /**
     * List Synchronizations in a share
     *
     * List synchronizations of a share
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sharesListSynchronizationsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareName = null;
        String apiVersion = null;
        String $skipToken = null;
        ShareSynchronizationList response = api.sharesListSynchronizations(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken);
        // TODO: test validations
    }

}
