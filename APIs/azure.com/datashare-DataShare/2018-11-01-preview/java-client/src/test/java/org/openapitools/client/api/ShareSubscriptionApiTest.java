/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.ConsumerSourceDataSetList;
import org.openapitools.client.model.DataShareError;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.ShareSubscription;
import org.openapitools.client.model.ShareSubscriptionList;
import org.openapitools.client.model.ShareSubscriptionSynchronization;
import org.openapitools.client.model.ShareSubscriptionSynchronizationList;
import org.openapitools.client.model.SourceShareSynchronizationSettingList;
import org.openapitools.client.model.SynchronizationDetailsList;
import org.openapitools.client.model.Synchronize;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ShareSubscriptionApi
 */
@Disabled
public class ShareSubscriptionApiTest {

    private final ShareSubscriptionApi api = new ShareSubscriptionApi();

    /**
     * Get source dataSets of a shareSubscription.
     *
     * Get source dataSets of a shareSubscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void consumerSourceDataSetsListByShareSubscriptionTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        String $skipToken = null;
        ConsumerSourceDataSetList response = api.consumerSourceDataSetsListByShareSubscription(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        // TODO: test validations
    }

    /**
     * Request cancellation of a data share snapshot
     *
     * Request to cancel a synchronization.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsCancelSynchronizationTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        ShareSubscriptionSynchronization shareSubscriptionSynchronization = null;
        ShareSubscriptionSynchronization response = api.shareSubscriptionsCancelSynchronization(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization);
        // TODO: test validations
    }

    /**
     * Create shareSubscription in an account.
     *
     * Create a shareSubscription in an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsCreateTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        ShareSubscription shareSubscription = null;
        ShareSubscription response = api.shareSubscriptionsCreate(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscription);
        // TODO: test validations
    }

    /**
     * Delete shareSubscription in an account.
     *
     * Delete a shareSubscription in an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsDeleteTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        OperationResponse response = api.shareSubscriptionsDelete(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion);
        // TODO: test validations
    }

    /**
     * Get shareSubscription in an account.
     *
     * Get a shareSubscription in an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsGetTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        ShareSubscription response = api.shareSubscriptionsGet(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion);
        // TODO: test validations
    }

    /**
     * List of available share subscriptions under an account.
     *
     * List share subscriptions in an account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsListByAccountTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String apiVersion = null;
        String $skipToken = null;
        ShareSubscriptionList response = api.shareSubscriptionsListByAccount(subscriptionId, resourceGroupName, accountName, apiVersion, $skipToken);
        // TODO: test validations
    }

    /**
     * Get source share synchronization settings for a shareSubscription.
     *
     * Get synchronization settings set on a share
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsListSourceShareSynchronizationSettingsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        String $skipToken = null;
        SourceShareSynchronizationSettingList response = api.shareSubscriptionsListSourceShareSynchronizationSettings(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        // TODO: test validations
    }

    /**
     * List data set level details for a share subscription synchronization
     *
     * List synchronization details
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsListSynchronizationDetailsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        ShareSubscriptionSynchronization shareSubscriptionSynchronization = null;
        String $skipToken = null;
        SynchronizationDetailsList response = api.shareSubscriptionsListSynchronizationDetails(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, shareSubscriptionSynchronization, $skipToken);
        // TODO: test validations
    }

    /**
     * List Synchronizations in a share subscription.
     *
     * List synchronizations of a share subscription
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsListSynchronizationsTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        String $skipToken = null;
        ShareSubscriptionSynchronizationList response = api.shareSubscriptionsListSynchronizations(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        // TODO: test validations
    }

    /**
     * Initiate an asynchronous data share job
     *
     * Initiate a copy
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void shareSubscriptionsSynchronizeTest() throws ApiException {
        String subscriptionId = null;
        String resourceGroupName = null;
        String accountName = null;
        String shareSubscriptionName = null;
        String apiVersion = null;
        Synchronize synchronize = null;
        ShareSubscriptionSynchronization response = api.shareSubscriptionsSynchronize(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, synchronize);
        // TODO: test validations
    }

}
