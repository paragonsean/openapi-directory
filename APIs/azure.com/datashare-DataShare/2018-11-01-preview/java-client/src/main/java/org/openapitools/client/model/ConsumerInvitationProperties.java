/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Properties of consumer invitation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:06.041141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConsumerInvitationProperties {
  public static final String SERIALIZED_NAME_DATA_SET_COUNT = "dataSetCount";
  @SerializedName(SERIALIZED_NAME_DATA_SET_COUNT)
  private Integer dataSetCount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_INVITATION_ID = "invitationId";
  @SerializedName(SERIALIZED_NAME_INVITATION_ID)
  private String invitationId;

  /**
   * The status of the invitation.
   */
  @JsonAdapter(InvitationStatusEnum.Adapter.class)
  public enum InvitationStatusEnum {
    PENDING("Pending"),
    
    ACCEPTED("Accepted"),
    
    REJECTED("Rejected"),
    
    WITHDRAWN("Withdrawn");

    private String value;

    InvitationStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InvitationStatusEnum fromValue(String value) {
      for (InvitationStatusEnum b : InvitationStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<InvitationStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InvitationStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InvitationStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InvitationStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      InvitationStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INVITATION_STATUS = "invitationStatus";
  @SerializedName(SERIALIZED_NAME_INVITATION_STATUS)
  private InvitationStatusEnum invitationStatus;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PROVIDER_EMAIL = "providerEmail";
  @SerializedName(SERIALIZED_NAME_PROVIDER_EMAIL)
  private String providerEmail;

  public static final String SERIALIZED_NAME_PROVIDER_NAME = "providerName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_NAME)
  private String providerName;

  public static final String SERIALIZED_NAME_PROVIDER_TENANT_NAME = "providerTenantName";
  @SerializedName(SERIALIZED_NAME_PROVIDER_TENANT_NAME)
  private String providerTenantName;

  public static final String SERIALIZED_NAME_RESPONDED_AT = "respondedAt";
  @SerializedName(SERIALIZED_NAME_RESPONDED_AT)
  private OffsetDateTime respondedAt;

  public static final String SERIALIZED_NAME_SENT_AT = "sentAt";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  private OffsetDateTime sentAt;

  public static final String SERIALIZED_NAME_SHARE_NAME = "shareName";
  @SerializedName(SERIALIZED_NAME_SHARE_NAME)
  private String shareName;

  public static final String SERIALIZED_NAME_TERMS_OF_USE = "termsOfUse";
  @SerializedName(SERIALIZED_NAME_TERMS_OF_USE)
  private String termsOfUse;

  public static final String SERIALIZED_NAME_USER_EMAIL = "userEmail";
  @SerializedName(SERIALIZED_NAME_USER_EMAIL)
  private String userEmail;

  public static final String SERIALIZED_NAME_USER_NAME = "userName";
  @SerializedName(SERIALIZED_NAME_USER_NAME)
  private String userName;

  public ConsumerInvitationProperties() {
  }

  public ConsumerInvitationProperties(
     Integer dataSetCount, 
     String description, 
     InvitationStatusEnum invitationStatus, 
     String location, 
     String providerEmail, 
     String providerName, 
     String providerTenantName, 
     OffsetDateTime respondedAt, 
     OffsetDateTime sentAt, 
     String shareName, 
     String termsOfUse, 
     String userEmail, 
     String userName
  ) {
    this();
    this.dataSetCount = dataSetCount;
    this.description = description;
    this.invitationStatus = invitationStatus;
    this.location = location;
    this.providerEmail = providerEmail;
    this.providerName = providerName;
    this.providerTenantName = providerTenantName;
    this.respondedAt = respondedAt;
    this.sentAt = sentAt;
    this.shareName = shareName;
    this.termsOfUse = termsOfUse;
    this.userEmail = userEmail;
    this.userName = userName;
  }

  /**
   * Number of data sets in a share
   * @return dataSetCount
   */
  @javax.annotation.Nullable
  public Integer getDataSetCount() {
    return dataSetCount;
  }



  /**
   * Description shared when the invitation was created
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }



  public ConsumerInvitationProperties invitationId(String invitationId) {
    this.invitationId = invitationId;
    return this;
  }

  /**
   * Unique id of the invitation.
   * @return invitationId
   */
  @javax.annotation.Nonnull
  public String getInvitationId() {
    return invitationId;
  }

  public void setInvitationId(String invitationId) {
    this.invitationId = invitationId;
  }


  /**
   * The status of the invitation.
   * @return invitationStatus
   */
  @javax.annotation.Nullable
  public InvitationStatusEnum getInvitationStatus() {
    return invitationStatus;
  }



  /**
   * invitation location
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }



  /**
   * Email of the provider who created the resource
   * @return providerEmail
   */
  @javax.annotation.Nullable
  public String getProviderEmail() {
    return providerEmail;
  }



  /**
   * Name of the provider who created the resource
   * @return providerName
   */
  @javax.annotation.Nullable
  public String getProviderName() {
    return providerName;
  }



  /**
   * Tenant name of the provider who created the resource
   * @return providerTenantName
   */
  @javax.annotation.Nullable
  public String getProviderTenantName() {
    return providerTenantName;
  }



  /**
   * The time the recipient responded to the invitation.
   * @return respondedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getRespondedAt() {
    return respondedAt;
  }



  /**
   * Gets the time at which the invitation was sent.
   * @return sentAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSentAt() {
    return sentAt;
  }



  /**
   * Gets the source share Name.
   * @return shareName
   */
  @javax.annotation.Nullable
  public String getShareName() {
    return shareName;
  }



  /**
   * Terms of use shared when the invitation was created
   * @return termsOfUse
   */
  @javax.annotation.Nullable
  public String getTermsOfUse() {
    return termsOfUse;
  }



  /**
   * Email of the user who created the resource
   * @return userEmail
   */
  @javax.annotation.Nullable
  public String getUserEmail() {
    return userEmail;
  }



  /**
   * Name of the user who created the resource
   * @return userName
   */
  @javax.annotation.Nullable
  public String getUserName() {
    return userName;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConsumerInvitationProperties consumerInvitationProperties = (ConsumerInvitationProperties) o;
    return Objects.equals(this.dataSetCount, consumerInvitationProperties.dataSetCount) &&
        Objects.equals(this.description, consumerInvitationProperties.description) &&
        Objects.equals(this.invitationId, consumerInvitationProperties.invitationId) &&
        Objects.equals(this.invitationStatus, consumerInvitationProperties.invitationStatus) &&
        Objects.equals(this.location, consumerInvitationProperties.location) &&
        Objects.equals(this.providerEmail, consumerInvitationProperties.providerEmail) &&
        Objects.equals(this.providerName, consumerInvitationProperties.providerName) &&
        Objects.equals(this.providerTenantName, consumerInvitationProperties.providerTenantName) &&
        Objects.equals(this.respondedAt, consumerInvitationProperties.respondedAt) &&
        Objects.equals(this.sentAt, consumerInvitationProperties.sentAt) &&
        Objects.equals(this.shareName, consumerInvitationProperties.shareName) &&
        Objects.equals(this.termsOfUse, consumerInvitationProperties.termsOfUse) &&
        Objects.equals(this.userEmail, consumerInvitationProperties.userEmail) &&
        Objects.equals(this.userName, consumerInvitationProperties.userName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetCount, description, invitationId, invitationStatus, location, providerEmail, providerName, providerTenantName, respondedAt, sentAt, shareName, termsOfUse, userEmail, userName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConsumerInvitationProperties {\n");
    sb.append("    dataSetCount: ").append(toIndentedString(dataSetCount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    invitationId: ").append(toIndentedString(invitationId)).append("\n");
    sb.append("    invitationStatus: ").append(toIndentedString(invitationStatus)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    providerEmail: ").append(toIndentedString(providerEmail)).append("\n");
    sb.append("    providerName: ").append(toIndentedString(providerName)).append("\n");
    sb.append("    providerTenantName: ").append(toIndentedString(providerTenantName)).append("\n");
    sb.append("    respondedAt: ").append(toIndentedString(respondedAt)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    shareName: ").append(toIndentedString(shareName)).append("\n");
    sb.append("    termsOfUse: ").append(toIndentedString(termsOfUse)).append("\n");
    sb.append("    userEmail: ").append(toIndentedString(userEmail)).append("\n");
    sb.append("    userName: ").append(toIndentedString(userName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetCount");
    openapiFields.add("description");
    openapiFields.add("invitationId");
    openapiFields.add("invitationStatus");
    openapiFields.add("location");
    openapiFields.add("providerEmail");
    openapiFields.add("providerName");
    openapiFields.add("providerTenantName");
    openapiFields.add("respondedAt");
    openapiFields.add("sentAt");
    openapiFields.add("shareName");
    openapiFields.add("termsOfUse");
    openapiFields.add("userEmail");
    openapiFields.add("userName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("invitationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConsumerInvitationProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConsumerInvitationProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConsumerInvitationProperties is not found in the empty JSON string", ConsumerInvitationProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConsumerInvitationProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConsumerInvitationProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConsumerInvitationProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("invitationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationId").toString()));
      }
      if ((jsonObj.get("invitationStatus") != null && !jsonObj.get("invitationStatus").isJsonNull()) && !jsonObj.get("invitationStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invitationStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invitationStatus").toString()));
      }
      // validate the optional field `invitationStatus`
      if (jsonObj.get("invitationStatus") != null && !jsonObj.get("invitationStatus").isJsonNull()) {
        InvitationStatusEnum.validateJsonElement(jsonObj.get("invitationStatus"));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("providerEmail") != null && !jsonObj.get("providerEmail").isJsonNull()) && !jsonObj.get("providerEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerEmail").toString()));
      }
      if ((jsonObj.get("providerName") != null && !jsonObj.get("providerName").isJsonNull()) && !jsonObj.get("providerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerName").toString()));
      }
      if ((jsonObj.get("providerTenantName") != null && !jsonObj.get("providerTenantName").isJsonNull()) && !jsonObj.get("providerTenantName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `providerTenantName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("providerTenantName").toString()));
      }
      if ((jsonObj.get("shareName") != null && !jsonObj.get("shareName").isJsonNull()) && !jsonObj.get("shareName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shareName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shareName").toString()));
      }
      if ((jsonObj.get("termsOfUse") != null && !jsonObj.get("termsOfUse").isJsonNull()) && !jsonObj.get("termsOfUse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `termsOfUse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("termsOfUse").toString()));
      }
      if ((jsonObj.get("userEmail") != null && !jsonObj.get("userEmail").isJsonNull()) && !jsonObj.get("userEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userEmail").toString()));
      }
      if ((jsonObj.get("userName") != null && !jsonObj.get("userName").isJsonNull()) && !jsonObj.get("userName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConsumerInvitationProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConsumerInvitationProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConsumerInvitationProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConsumerInvitationProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ConsumerInvitationProperties>() {
           @Override
           public void write(JsonWriter out, ConsumerInvitationProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConsumerInvitationProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConsumerInvitationProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConsumerInvitationProperties
   * @throws IOException if the JSON string is invalid with respect to ConsumerInvitationProperties
   */
  public static ConsumerInvitationProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConsumerInvitationProperties.class);
  }

  /**
   * Convert an instance of ConsumerInvitationProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

