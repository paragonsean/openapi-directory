/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ADLS Gen 2 file data set mapping property bag.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:06.041141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ADLSGen2FileDataSetMappingProperties {
  public static final String SERIALIZED_NAME_DATA_SET_ID = "dataSetId";
  @SerializedName(SERIALIZED_NAME_DATA_SET_ID)
  private String dataSetId;

  /**
   * Gets the status of the data set mapping.
   */
  @JsonAdapter(DataSetMappingStatusEnum.Adapter.class)
  public enum DataSetMappingStatusEnum {
    OK("Ok"),
    
    BROKEN("Broken");

    private String value;

    DataSetMappingStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DataSetMappingStatusEnum fromValue(String value) {
      for (DataSetMappingStatusEnum b : DataSetMappingStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DataSetMappingStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DataSetMappingStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DataSetMappingStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DataSetMappingStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      DataSetMappingStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DATA_SET_MAPPING_STATUS = "dataSetMappingStatus";
  @SerializedName(SERIALIZED_NAME_DATA_SET_MAPPING_STATUS)
  private DataSetMappingStatusEnum dataSetMappingStatus;

  public static final String SERIALIZED_NAME_FILE_PATH = "filePath";
  @SerializedName(SERIALIZED_NAME_FILE_PATH)
  private String filePath;

  public static final String SERIALIZED_NAME_FILE_SYSTEM = "fileSystem";
  @SerializedName(SERIALIZED_NAME_FILE_SYSTEM)
  private String fileSystem;

  /**
   * Type of output file
   */
  @JsonAdapter(OutputTypeEnum.Adapter.class)
  public enum OutputTypeEnum {
    CSV("Csv"),
    
    PARQUET("Parquet");

    private String value;

    OutputTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputTypeEnum fromValue(String value) {
      for (OutputTypeEnum b : OutputTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      OutputTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_TYPE = "outputType";
  @SerializedName(SERIALIZED_NAME_OUTPUT_TYPE)
  private OutputTypeEnum outputType;

  /**
   * Provisioning state of the data set mapping.
   */
  @JsonAdapter(ProvisioningStateEnum.Adapter.class)
  public enum ProvisioningStateEnum {
    SUCCEEDED("Succeeded"),
    
    CREATING("Creating"),
    
    DELETING("Deleting"),
    
    MOVING("Moving"),
    
    FAILED("Failed");

    private String value;

    ProvisioningStateEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ProvisioningStateEnum fromValue(String value) {
      for (ProvisioningStateEnum b : ProvisioningStateEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ProvisioningStateEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ProvisioningStateEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ProvisioningStateEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ProvisioningStateEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      ProvisioningStateEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PROVISIONING_STATE = "provisioningState";
  @SerializedName(SERIALIZED_NAME_PROVISIONING_STATE)
  private ProvisioningStateEnum provisioningState;

  public static final String SERIALIZED_NAME_RESOURCE_GROUP = "resourceGroup";
  @SerializedName(SERIALIZED_NAME_RESOURCE_GROUP)
  private String resourceGroup;

  public static final String SERIALIZED_NAME_STORAGE_ACCOUNT_NAME = "storageAccountName";
  @SerializedName(SERIALIZED_NAME_STORAGE_ACCOUNT_NAME)
  private String storageAccountName;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscriptionId";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public ADLSGen2FileDataSetMappingProperties() {
  }

  public ADLSGen2FileDataSetMappingProperties(
     DataSetMappingStatusEnum dataSetMappingStatus, 
     ProvisioningStateEnum provisioningState
  ) {
    this();
    this.dataSetMappingStatus = dataSetMappingStatus;
    this.provisioningState = provisioningState;
  }

  public ADLSGen2FileDataSetMappingProperties dataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
    return this;
  }

  /**
   * The id of the source data set.
   * @return dataSetId
   */
  @javax.annotation.Nonnull
  public String getDataSetId() {
    return dataSetId;
  }

  public void setDataSetId(String dataSetId) {
    this.dataSetId = dataSetId;
  }


  /**
   * Gets the status of the data set mapping.
   * @return dataSetMappingStatus
   */
  @javax.annotation.Nullable
  public DataSetMappingStatusEnum getDataSetMappingStatus() {
    return dataSetMappingStatus;
  }



  public ADLSGen2FileDataSetMappingProperties filePath(String filePath) {
    this.filePath = filePath;
    return this;
  }

  /**
   * File path within the file system.
   * @return filePath
   */
  @javax.annotation.Nonnull
  public String getFilePath() {
    return filePath;
  }

  public void setFilePath(String filePath) {
    this.filePath = filePath;
  }


  public ADLSGen2FileDataSetMappingProperties fileSystem(String fileSystem) {
    this.fileSystem = fileSystem;
    return this;
  }

  /**
   * File system to which the file belongs.
   * @return fileSystem
   */
  @javax.annotation.Nonnull
  public String getFileSystem() {
    return fileSystem;
  }

  public void setFileSystem(String fileSystem) {
    this.fileSystem = fileSystem;
  }


  public ADLSGen2FileDataSetMappingProperties outputType(OutputTypeEnum outputType) {
    this.outputType = outputType;
    return this;
  }

  /**
   * Type of output file
   * @return outputType
   */
  @javax.annotation.Nullable
  public OutputTypeEnum getOutputType() {
    return outputType;
  }

  public void setOutputType(OutputTypeEnum outputType) {
    this.outputType = outputType;
  }


  /**
   * Provisioning state of the data set mapping.
   * @return provisioningState
   */
  @javax.annotation.Nullable
  public ProvisioningStateEnum getProvisioningState() {
    return provisioningState;
  }



  public ADLSGen2FileDataSetMappingProperties resourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
    return this;
  }

  /**
   * Resource group of storage account.
   * @return resourceGroup
   */
  @javax.annotation.Nonnull
  public String getResourceGroup() {
    return resourceGroup;
  }

  public void setResourceGroup(String resourceGroup) {
    this.resourceGroup = resourceGroup;
  }


  public ADLSGen2FileDataSetMappingProperties storageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
    return this;
  }

  /**
   * Storage account name of the source data set.
   * @return storageAccountName
   */
  @javax.annotation.Nonnull
  public String getStorageAccountName() {
    return storageAccountName;
  }

  public void setStorageAccountName(String storageAccountName) {
    this.storageAccountName = storageAccountName;
  }


  public ADLSGen2FileDataSetMappingProperties subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * Subscription id of storage account.
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ADLSGen2FileDataSetMappingProperties adLSGen2FileDataSetMappingProperties = (ADLSGen2FileDataSetMappingProperties) o;
    return Objects.equals(this.dataSetId, adLSGen2FileDataSetMappingProperties.dataSetId) &&
        Objects.equals(this.dataSetMappingStatus, adLSGen2FileDataSetMappingProperties.dataSetMappingStatus) &&
        Objects.equals(this.filePath, adLSGen2FileDataSetMappingProperties.filePath) &&
        Objects.equals(this.fileSystem, adLSGen2FileDataSetMappingProperties.fileSystem) &&
        Objects.equals(this.outputType, adLSGen2FileDataSetMappingProperties.outputType) &&
        Objects.equals(this.provisioningState, adLSGen2FileDataSetMappingProperties.provisioningState) &&
        Objects.equals(this.resourceGroup, adLSGen2FileDataSetMappingProperties.resourceGroup) &&
        Objects.equals(this.storageAccountName, adLSGen2FileDataSetMappingProperties.storageAccountName) &&
        Objects.equals(this.subscriptionId, adLSGen2FileDataSetMappingProperties.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(dataSetId, dataSetMappingStatus, filePath, fileSystem, outputType, provisioningState, resourceGroup, storageAccountName, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ADLSGen2FileDataSetMappingProperties {\n");
    sb.append("    dataSetId: ").append(toIndentedString(dataSetId)).append("\n");
    sb.append("    dataSetMappingStatus: ").append(toIndentedString(dataSetMappingStatus)).append("\n");
    sb.append("    filePath: ").append(toIndentedString(filePath)).append("\n");
    sb.append("    fileSystem: ").append(toIndentedString(fileSystem)).append("\n");
    sb.append("    outputType: ").append(toIndentedString(outputType)).append("\n");
    sb.append("    provisioningState: ").append(toIndentedString(provisioningState)).append("\n");
    sb.append("    resourceGroup: ").append(toIndentedString(resourceGroup)).append("\n");
    sb.append("    storageAccountName: ").append(toIndentedString(storageAccountName)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("dataSetId");
    openapiFields.add("dataSetMappingStatus");
    openapiFields.add("filePath");
    openapiFields.add("fileSystem");
    openapiFields.add("outputType");
    openapiFields.add("provisioningState");
    openapiFields.add("resourceGroup");
    openapiFields.add("storageAccountName");
    openapiFields.add("subscriptionId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("dataSetId");
    openapiRequiredFields.add("filePath");
    openapiRequiredFields.add("fileSystem");
    openapiRequiredFields.add("resourceGroup");
    openapiRequiredFields.add("storageAccountName");
    openapiRequiredFields.add("subscriptionId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ADLSGen2FileDataSetMappingProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ADLSGen2FileDataSetMappingProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ADLSGen2FileDataSetMappingProperties is not found in the empty JSON string", ADLSGen2FileDataSetMappingProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ADLSGen2FileDataSetMappingProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ADLSGen2FileDataSetMappingProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ADLSGen2FileDataSetMappingProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("dataSetId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetId").toString()));
      }
      if ((jsonObj.get("dataSetMappingStatus") != null && !jsonObj.get("dataSetMappingStatus").isJsonNull()) && !jsonObj.get("dataSetMappingStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dataSetMappingStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dataSetMappingStatus").toString()));
      }
      // validate the optional field `dataSetMappingStatus`
      if (jsonObj.get("dataSetMappingStatus") != null && !jsonObj.get("dataSetMappingStatus").isJsonNull()) {
        DataSetMappingStatusEnum.validateJsonElement(jsonObj.get("dataSetMappingStatus"));
      }
      if (!jsonObj.get("filePath").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filePath` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filePath").toString()));
      }
      if (!jsonObj.get("fileSystem").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileSystem` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileSystem").toString()));
      }
      if ((jsonObj.get("outputType") != null && !jsonObj.get("outputType").isJsonNull()) && !jsonObj.get("outputType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputType").toString()));
      }
      // validate the optional field `outputType`
      if (jsonObj.get("outputType") != null && !jsonObj.get("outputType").isJsonNull()) {
        OutputTypeEnum.validateJsonElement(jsonObj.get("outputType"));
      }
      if ((jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) && !jsonObj.get("provisioningState").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `provisioningState` to be a primitive type in the JSON string but got `%s`", jsonObj.get("provisioningState").toString()));
      }
      // validate the optional field `provisioningState`
      if (jsonObj.get("provisioningState") != null && !jsonObj.get("provisioningState").isJsonNull()) {
        ProvisioningStateEnum.validateJsonElement(jsonObj.get("provisioningState"));
      }
      if (!jsonObj.get("resourceGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resourceGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resourceGroup").toString()));
      }
      if (!jsonObj.get("storageAccountName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `storageAccountName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("storageAccountName").toString()));
      }
      if (!jsonObj.get("subscriptionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscriptionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscriptionId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ADLSGen2FileDataSetMappingProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ADLSGen2FileDataSetMappingProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ADLSGen2FileDataSetMappingProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ADLSGen2FileDataSetMappingProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<ADLSGen2FileDataSetMappingProperties>() {
           @Override
           public void write(JsonWriter out, ADLSGen2FileDataSetMappingProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ADLSGen2FileDataSetMappingProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ADLSGen2FileDataSetMappingProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ADLSGen2FileDataSetMappingProperties
   * @throws IOException if the JSON string is invalid with respect to ADLSGen2FileDataSetMappingProperties
   */
  public static ADLSGen2FileDataSetMappingProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ADLSGen2FileDataSetMappingProperties.class);
  }

  /**
   * Convert an instance of ADLSGen2FileDataSetMappingProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

