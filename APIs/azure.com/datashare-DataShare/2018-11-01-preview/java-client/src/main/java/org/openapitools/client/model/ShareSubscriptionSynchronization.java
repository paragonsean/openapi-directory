/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A ShareSubscriptionSynchronization data transfer object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:37:06.041141-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ShareSubscriptionSynchronization {
  public static final String SERIALIZED_NAME_DURATION_MS = "durationMs";
  @SerializedName(SERIALIZED_NAME_DURATION_MS)
  private Integer durationMs;

  public static final String SERIALIZED_NAME_END_TIME = "endTime";
  @SerializedName(SERIALIZED_NAME_END_TIME)
  private OffsetDateTime endTime;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_START_TIME = "startTime";
  @SerializedName(SERIALIZED_NAME_START_TIME)
  private OffsetDateTime startTime;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SYNCHRONIZATION_ID = "synchronizationId";
  @SerializedName(SERIALIZED_NAME_SYNCHRONIZATION_ID)
  private String synchronizationId;

  /**
   * Synchronization Mode
   */
  @JsonAdapter(SynchronizationModeEnum.Adapter.class)
  public enum SynchronizationModeEnum {
    INCREMENTAL("Incremental"),
    
    FULL_SYNC("FullSync");

    private String value;

    SynchronizationModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SynchronizationModeEnum fromValue(String value) {
      for (SynchronizationModeEnum b : SynchronizationModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SynchronizationModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SynchronizationModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SynchronizationModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SynchronizationModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SynchronizationModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNCHRONIZATION_MODE = "synchronizationMode";
  @SerializedName(SERIALIZED_NAME_SYNCHRONIZATION_MODE)
  private SynchronizationModeEnum synchronizationMode;

  public ShareSubscriptionSynchronization() {
  }

  public ShareSubscriptionSynchronization(
     Integer durationMs, 
     OffsetDateTime endTime, 
     String message, 
     OffsetDateTime startTime, 
     String status, 
     SynchronizationModeEnum synchronizationMode
  ) {
    this();
    this.durationMs = durationMs;
    this.endTime = endTime;
    this.message = message;
    this.startTime = startTime;
    this.status = status;
    this.synchronizationMode = synchronizationMode;
  }

  /**
   * Synchronization duration
   * @return durationMs
   */
  @javax.annotation.Nullable
  public Integer getDurationMs() {
    return durationMs;
  }



  /**
   * End time of synchronization
   * @return endTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getEndTime() {
    return endTime;
  }



  /**
   * message of Synchronization
   * @return message
   */
  @javax.annotation.Nullable
  public String getMessage() {
    return message;
  }



  /**
   * start time of synchronization
   * @return startTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getStartTime() {
    return startTime;
  }



  /**
   * Raw Status
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }



  public ShareSubscriptionSynchronization synchronizationId(String synchronizationId) {
    this.synchronizationId = synchronizationId;
    return this;
  }

  /**
   * Synchronization id
   * @return synchronizationId
   */
  @javax.annotation.Nonnull
  public String getSynchronizationId() {
    return synchronizationId;
  }

  public void setSynchronizationId(String synchronizationId) {
    this.synchronizationId = synchronizationId;
  }


  /**
   * Synchronization Mode
   * @return synchronizationMode
   */
  @javax.annotation.Nullable
  public SynchronizationModeEnum getSynchronizationMode() {
    return synchronizationMode;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ShareSubscriptionSynchronization shareSubscriptionSynchronization = (ShareSubscriptionSynchronization) o;
    return Objects.equals(this.durationMs, shareSubscriptionSynchronization.durationMs) &&
        Objects.equals(this.endTime, shareSubscriptionSynchronization.endTime) &&
        Objects.equals(this.message, shareSubscriptionSynchronization.message) &&
        Objects.equals(this.startTime, shareSubscriptionSynchronization.startTime) &&
        Objects.equals(this.status, shareSubscriptionSynchronization.status) &&
        Objects.equals(this.synchronizationId, shareSubscriptionSynchronization.synchronizationId) &&
        Objects.equals(this.synchronizationMode, shareSubscriptionSynchronization.synchronizationMode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(durationMs, endTime, message, startTime, status, synchronizationId, synchronizationMode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ShareSubscriptionSynchronization {\n");
    sb.append("    durationMs: ").append(toIndentedString(durationMs)).append("\n");
    sb.append("    endTime: ").append(toIndentedString(endTime)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    startTime: ").append(toIndentedString(startTime)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    synchronizationId: ").append(toIndentedString(synchronizationId)).append("\n");
    sb.append("    synchronizationMode: ").append(toIndentedString(synchronizationMode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("durationMs");
    openapiFields.add("endTime");
    openapiFields.add("message");
    openapiFields.add("startTime");
    openapiFields.add("status");
    openapiFields.add("synchronizationId");
    openapiFields.add("synchronizationMode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("synchronizationId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ShareSubscriptionSynchronization
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ShareSubscriptionSynchronization.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ShareSubscriptionSynchronization is not found in the empty JSON string", ShareSubscriptionSynchronization.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ShareSubscriptionSynchronization.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ShareSubscriptionSynchronization` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ShareSubscriptionSynchronization.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if (!jsonObj.get("synchronizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synchronizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synchronizationId").toString()));
      }
      if ((jsonObj.get("synchronizationMode") != null && !jsonObj.get("synchronizationMode").isJsonNull()) && !jsonObj.get("synchronizationMode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `synchronizationMode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("synchronizationMode").toString()));
      }
      // validate the optional field `synchronizationMode`
      if (jsonObj.get("synchronizationMode") != null && !jsonObj.get("synchronizationMode").isJsonNull()) {
        SynchronizationModeEnum.validateJsonElement(jsonObj.get("synchronizationMode"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ShareSubscriptionSynchronization.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ShareSubscriptionSynchronization' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ShareSubscriptionSynchronization> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ShareSubscriptionSynchronization.class));

       return (TypeAdapter<T>) new TypeAdapter<ShareSubscriptionSynchronization>() {
           @Override
           public void write(JsonWriter out, ShareSubscriptionSynchronization value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ShareSubscriptionSynchronization read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ShareSubscriptionSynchronization given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ShareSubscriptionSynchronization
   * @throws IOException if the JSON string is invalid with respect to ShareSubscriptionSynchronization
   */
  public static ShareSubscriptionSynchronization fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ShareSubscriptionSynchronization.class);
  }

  /**
   * Convert an instance of ShareSubscriptionSynchronization to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

