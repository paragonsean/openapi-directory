/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataShareError;
import org.openapitools.client.model.OperationResponse;
import org.openapitools.client.model.Trigger;
import org.openapitools.client.model.TriggerList;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TriggerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TriggerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TriggerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for triggersCreate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param trigger Trigger details. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersCreateCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, Trigger trigger, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = trigger;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, Trigger trigger, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling triggersCreate(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling triggersCreate(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersCreate(Async)");
        }

        // verify the required parameter 'trigger' is set
        if (trigger == null) {
            throw new ApiException("Missing the required parameter 'trigger' when calling triggersCreate(Async)");
        }

        return triggersCreateCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, trigger, _callback);

    }

    /**
     * This method creates a trigger for a share subscription
     * Create a Trigger 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param trigger Trigger details. (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public Trigger triggersCreate(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, Trigger trigger) throws ApiException {
        ApiResponse<Trigger> localVarResp = triggersCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, trigger);
        return localVarResp.getData();
    }

    /**
     * This method creates a trigger for a share subscription
     * Create a Trigger 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param trigger Trigger details. (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trigger> triggersCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, Trigger trigger) throws ApiException {
        okhttp3.Call localVarCall = triggersCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, trigger, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * This method creates a trigger for a share subscription (asynchronously)
     * Create a Trigger 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription which will hold the data set sink. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param trigger Trigger details. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, Trigger trigger, final ApiCallback<Trigger> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, trigger, _callback);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersDelete
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersDelete(Async)");
        }

        return triggersDeleteCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, _callback);

    }

    /**
     * Delete Trigger in a shareSubscription.
     * Delete a Trigger in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @return OperationResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public OperationResponse triggersDelete(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion) throws ApiException {
        ApiResponse<OperationResponse> localVarResp = triggersDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Delete Trigger in a shareSubscription.
     * Delete a Trigger in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;OperationResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationResponse> triggersDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete Trigger in a shareSubscription. (asynchronously)
     * Delete a Trigger in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, final ApiCallback<OperationResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<OperationResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersGet
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersGetCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers/{triggerName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()))
            .replace("{" + "triggerName" + "}", localVarApiClient.escapeString(triggerName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling triggersGet(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling triggersGet(Async)");
        }

        // verify the required parameter 'triggerName' is set
        if (triggerName == null) {
            throw new ApiException("Missing the required parameter 'triggerName' when calling triggersGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersGet(Async)");
        }

        return triggersGetCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, _callback);

    }

    /**
     * Get Trigger in a shareSubscription.
     * Get a Trigger in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @return Trigger
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public Trigger triggersGet(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion) throws ApiException {
        ApiResponse<Trigger> localVarResp = triggersGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get Trigger in a shareSubscription.
     * Get a Trigger in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;Trigger&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Trigger> triggersGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = triggersGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, null);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Trigger in a shareSubscription. (asynchronously)
     * Get a Trigger in a shareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the shareSubscription. (required)
     * @param triggerName The name of the trigger. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersGetAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String triggerName, String apiVersion, final ApiCallback<Trigger> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, triggerName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<Trigger>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for triggersListByShareSubscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersListByShareSubscriptionCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shareSubscriptions/{shareSubscriptionName}/triggers"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareSubscriptionName" + "}", localVarApiClient.escapeString(shareSubscriptionName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call triggersListByShareSubscriptionValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling triggersListByShareSubscription(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling triggersListByShareSubscription(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling triggersListByShareSubscription(Async)");
        }

        // verify the required parameter 'shareSubscriptionName' is set
        if (shareSubscriptionName == null) {
            throw new ApiException("Missing the required parameter 'shareSubscriptionName' when calling triggersListByShareSubscription(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling triggersListByShareSubscription(Async)");
        }

        return triggersListByShareSubscriptionCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);

    }

    /**
     * List Triggers in a share subscription.
     * List Triggers in a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return TriggerList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public TriggerList triggersListByShareSubscription(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<TriggerList> localVarResp = triggersListByShareSubscriptionWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List Triggers in a share subscription.
     * List Triggers in a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @return ApiResponse&lt;TriggerList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TriggerList> triggersListByShareSubscriptionWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = triggersListByShareSubscriptionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<TriggerList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Triggers in a share subscription. (asynchronously)
     * List Triggers in a share subscription
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareSubscriptionName The name of the share subscription. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken Continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call triggersListByShareSubscriptionAsync(String subscriptionId, String resourceGroupName, String accountName, String shareSubscriptionName, String apiVersion, String $skipToken, final ApiCallback<TriggerList> _callback) throws ApiException {

        okhttp3.Call localVarCall = triggersListByShareSubscriptionValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareSubscriptionName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<TriggerList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
