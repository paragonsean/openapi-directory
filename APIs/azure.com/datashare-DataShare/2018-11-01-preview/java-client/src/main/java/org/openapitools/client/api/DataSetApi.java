/*
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DataSet;
import org.openapitools.client.model.DataSetList;
import org.openapitools.client.model.DataShareError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataSetApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DataSetApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataSetApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for dataSetsCreate
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the data set to. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSet The new data set information. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsCreateCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, DataSet dataSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataSet;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "dataSetName" + "}", localVarApiClient.escapeString(dataSetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetsCreateValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, DataSet dataSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetsCreate(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetsCreate(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetsCreate(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling dataSetsCreate(Async)");
        }

        // verify the required parameter 'dataSetName' is set
        if (dataSetName == null) {
            throw new ApiException("Missing the required parameter 'dataSetName' when calling dataSetsCreate(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetsCreate(Async)");
        }

        // verify the required parameter 'dataSet' is set
        if (dataSet == null) {
            throw new ApiException("Missing the required parameter 'dataSet' when calling dataSetsCreate(Async)");
        }

        return dataSetsCreateCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, dataSet, _callback);

    }

    /**
     * Adds a new data set to an existing share or updates it if existing.
     * Create a DataSet 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the data set to. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSet The new data set information. (required)
     * @return DataSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public DataSet dataSetsCreate(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, DataSet dataSet) throws ApiException {
        ApiResponse<DataSet> localVarResp = dataSetsCreateWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, dataSet);
        return localVarResp.getData();
    }

    /**
     * Adds a new data set to an existing share or updates it if existing.
     * Create a DataSet 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the data set to. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSet The new data set information. (required)
     * @return ApiResponse&lt;DataSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSet> dataSetsCreateWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, DataSet dataSet) throws ApiException {
        okhttp3.Call localVarCall = dataSetsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, dataSet, null);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Adds a new data set to an existing share or updates it if existing. (asynchronously)
     * Create a DataSet 
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share to add the data set to. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param dataSet The new data set information. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsCreateAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, DataSet dataSet, final ApiCallback<DataSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetsCreateValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, dataSet, _callback);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSetsDelete
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsDeleteCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "dataSetName" + "}", localVarApiClient.escapeString(dataSetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetsDeleteValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetsDelete(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetsDelete(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetsDelete(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling dataSetsDelete(Async)");
        }

        // verify the required parameter 'dataSetName' is set
        if (dataSetName == null) {
            throw new ApiException("Missing the required parameter 'dataSetName' when calling dataSetsDelete(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetsDelete(Async)");
        }

        return dataSetsDeleteCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, _callback);

    }

    /**
     * Delete DataSet in a share.
     * Delete a DataSet in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public void dataSetsDelete(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion) throws ApiException {
        dataSetsDeleteWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion);
    }

    /**
     * Delete DataSet in a share.
     * Delete a DataSet in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> dataSetsDeleteWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataSetsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete DataSet in a share. (asynchronously)
     * Delete a DataSet in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsDeleteAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetsDeleteValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSetsGet
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsGetCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets/{dataSetName}"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()))
            .replace("{" + "dataSetName" + "}", localVarApiClient.escapeString(dataSetName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetsGetValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetsGet(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetsGet(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetsGet(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling dataSetsGet(Async)");
        }

        // verify the required parameter 'dataSetName' is set
        if (dataSetName == null) {
            throw new ApiException("Missing the required parameter 'dataSetName' when calling dataSetsGet(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetsGet(Async)");
        }

        return dataSetsGetCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, _callback);

    }

    /**
     * Get DataSet in a share.
     * Get a DataSet in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @return DataSet
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public DataSet dataSetsGet(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion) throws ApiException {
        ApiResponse<DataSet> localVarResp = dataSetsGetWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion);
        return localVarResp.getData();
    }

    /**
     * Get DataSet in a share.
     * Get a DataSet in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @return ApiResponse&lt;DataSet&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSet> dataSetsGetWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion) throws ApiException {
        okhttp3.Call localVarCall = dataSetsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, null);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get DataSet in a share. (asynchronously)
     * Get a DataSet in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param dataSetName The name of the dataSet. (required)
     * @param apiVersion The api version to use. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsGetAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String dataSetName, String apiVersion, final ApiCallback<DataSet> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetsGetValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, dataSetName, apiVersion, _callback);
        Type localVarReturnType = new TypeToken<DataSet>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for dataSetsListByShare
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsListByShareCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataShare/accounts/{accountName}/shares/{shareName}/dataSets"
            .replace("{" + "subscriptionId" + "}", localVarApiClient.escapeString(subscriptionId.toString()))
            .replace("{" + "resourceGroupName" + "}", localVarApiClient.escapeString(resourceGroupName.toString()))
            .replace("{" + "accountName" + "}", localVarApiClient.escapeString(accountName.toString()))
            .replace("{" + "shareName" + "}", localVarApiClient.escapeString(shareName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiVersion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("api-version", apiVersion));
        }

        if ($skipToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("$skipToken", $skipToken));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "azure_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call dataSetsListByShareValidateBeforeCall(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'subscriptionId' is set
        if (subscriptionId == null) {
            throw new ApiException("Missing the required parameter 'subscriptionId' when calling dataSetsListByShare(Async)");
        }

        // verify the required parameter 'resourceGroupName' is set
        if (resourceGroupName == null) {
            throw new ApiException("Missing the required parameter 'resourceGroupName' when calling dataSetsListByShare(Async)");
        }

        // verify the required parameter 'accountName' is set
        if (accountName == null) {
            throw new ApiException("Missing the required parameter 'accountName' when calling dataSetsListByShare(Async)");
        }

        // verify the required parameter 'shareName' is set
        if (shareName == null) {
            throw new ApiException("Missing the required parameter 'shareName' when calling dataSetsListByShare(Async)");
        }

        // verify the required parameter 'apiVersion' is set
        if (apiVersion == null) {
            throw new ApiException("Missing the required parameter 'apiVersion' when calling dataSetsListByShare(Async)");
        }

        return dataSetsListByShareCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);

    }

    /**
     * List DataSets in a share.
     * List DataSets in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @return DataSetList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public DataSetList dataSetsListByShare(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        ApiResponse<DataSetList> localVarResp = dataSetsListByShareWithHttpInfo(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken);
        return localVarResp.getData();
    }

    /**
     * List DataSets in a share.
     * List DataSets in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @return ApiResponse&lt;DataSetList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DataSetList> dataSetsListByShareWithHttpInfo(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken) throws ApiException {
        okhttp3.Call localVarCall = dataSetsListByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, null);
        Type localVarReturnType = new TypeToken<DataSetList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List DataSets in a share. (asynchronously)
     * List DataSets in a share
     * @param subscriptionId The subscription identifier (required)
     * @param resourceGroupName The resource group name. (required)
     * @param accountName The name of the share account. (required)
     * @param shareName The name of the share. (required)
     * @param apiVersion The api version to use. (required)
     * @param $skipToken continuation token (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> An error response received from the Microsoft.DataShare resource provider. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call dataSetsListByShareAsync(String subscriptionId, String resourceGroupName, String accountName, String shareName, String apiVersion, String $skipToken, final ApiCallback<DataSetList> _callback) throws ApiException {

        okhttp3.Call localVarCall = dataSetsListByShareValidateBeforeCall(subscriptionId, resourceGroupName, accountName, shareName, apiVersion, $skipToken, _callback);
        Type localVarReturnType = new TypeToken<DataSetList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
