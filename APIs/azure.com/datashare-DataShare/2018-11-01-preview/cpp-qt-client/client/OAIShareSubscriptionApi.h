/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIShareSubscriptionApi_H
#define OAI_OAIShareSubscriptionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConsumerSourceDataSetList.h"
#include "OAIDataShareError.h"
#include "OAIOperationResponse.h"
#include "OAIShareSubscription.h"
#include "OAIShareSubscriptionList.h"
#include "OAIShareSubscriptionSynchronization.h"
#include "OAIShareSubscriptionSynchronizationList.h"
#include "OAISourceShareSynchronizationSettingList.h"
#include "OAISynchronizationDetailsList.h"
#include "OAISynchronize.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIShareSubscriptionApi : public QObject {
    Q_OBJECT

public:
    OAIShareSubscriptionApi(const int timeOut = 0);
    ~OAIShareSubscriptionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void consumerSourceDataSetsListByShareSubscription(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  share_subscription_synchronization OAIShareSubscriptionSynchronization [required]
    */
    virtual void shareSubscriptionsCancelSynchronization(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const OAIShareSubscriptionSynchronization &share_subscription_synchronization);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  share_subscription OAIShareSubscription [required]
    */
    virtual void shareSubscriptionsCreate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const OAIShareSubscription &share_subscription);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void shareSubscriptionsDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void shareSubscriptionsGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void shareSubscriptionsListByAccount(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void shareSubscriptionsListSourceShareSynchronizationSettings(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  share_subscription_synchronization OAIShareSubscriptionSynchronization [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void shareSubscriptionsListSynchronizationDetails(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const OAIShareSubscriptionSynchronization &share_subscription_synchronization, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  skip_token QString [optional]
    */
    virtual void shareSubscriptionsListSynchronizations(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const ::OpenAPI::OptionalParam<QString> &skip_token = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  share_subscription_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  synchronize OAISynchronize [required]
    */
    virtual void shareSubscriptionsSynchronize(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &share_subscription_name, const QString &api_version, const OAISynchronize &synchronize);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void consumerSourceDataSetsListByShareSubscriptionCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsCancelSynchronizationCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsCreateCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsDeleteCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsGetCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsListByAccountCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsListSourceShareSynchronizationSettingsCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsListSynchronizationDetailsCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsListSynchronizationsCallback(OAIHttpRequestWorker *worker);
    void shareSubscriptionsSynchronizeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void consumerSourceDataSetsListByShareSubscriptionSignal(OAIConsumerSourceDataSetList summary);
    void shareSubscriptionsCancelSynchronizationSignal(OAIShareSubscriptionSynchronization summary);
    void shareSubscriptionsCreateSignal(OAIShareSubscription summary);
    void shareSubscriptionsDeleteSignal(OAIOperationResponse summary);
    void shareSubscriptionsGetSignal(OAIShareSubscription summary);
    void shareSubscriptionsListByAccountSignal(OAIShareSubscriptionList summary);
    void shareSubscriptionsListSourceShareSynchronizationSettingsSignal(OAISourceShareSynchronizationSettingList summary);
    void shareSubscriptionsListSynchronizationDetailsSignal(OAISynchronizationDetailsList summary);
    void shareSubscriptionsListSynchronizationsSignal(OAIShareSubscriptionSynchronizationList summary);
    void shareSubscriptionsSynchronizeSignal(OAIShareSubscriptionSynchronization summary);


    void consumerSourceDataSetsListByShareSubscriptionSignalFull(OAIHttpRequestWorker *worker, OAIConsumerSourceDataSetList summary);
    void shareSubscriptionsCancelSynchronizationSignalFull(OAIHttpRequestWorker *worker, OAIShareSubscriptionSynchronization summary);
    void shareSubscriptionsCreateSignalFull(OAIHttpRequestWorker *worker, OAIShareSubscription summary);
    void shareSubscriptionsDeleteSignalFull(OAIHttpRequestWorker *worker, OAIOperationResponse summary);
    void shareSubscriptionsGetSignalFull(OAIHttpRequestWorker *worker, OAIShareSubscription summary);
    void shareSubscriptionsListByAccountSignalFull(OAIHttpRequestWorker *worker, OAIShareSubscriptionList summary);
    void shareSubscriptionsListSourceShareSynchronizationSettingsSignalFull(OAIHttpRequestWorker *worker, OAISourceShareSynchronizationSettingList summary);
    void shareSubscriptionsListSynchronizationDetailsSignalFull(OAIHttpRequestWorker *worker, OAISynchronizationDetailsList summary);
    void shareSubscriptionsListSynchronizationsSignalFull(OAIHttpRequestWorker *worker, OAIShareSubscriptionSynchronizationList summary);
    void shareSubscriptionsSynchronizeSignalFull(OAIHttpRequestWorker *worker, OAIShareSubscriptionSynchronization summary);

    Q_DECL_DEPRECATED_X("Use consumerSourceDataSetsListByShareSubscriptionSignalError() instead")
    void consumerSourceDataSetsListByShareSubscriptionSignalE(OAIConsumerSourceDataSetList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerSourceDataSetsListByShareSubscriptionSignalError(OAIConsumerSourceDataSetList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsCancelSynchronizationSignalError() instead")
    void shareSubscriptionsCancelSynchronizationSignalE(OAIShareSubscriptionSynchronization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsCancelSynchronizationSignalError(OAIShareSubscriptionSynchronization summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsCreateSignalError() instead")
    void shareSubscriptionsCreateSignalE(OAIShareSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsCreateSignalError(OAIShareSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsDeleteSignalError() instead")
    void shareSubscriptionsDeleteSignalE(OAIOperationResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsDeleteSignalError(OAIOperationResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsGetSignalError() instead")
    void shareSubscriptionsGetSignalE(OAIShareSubscription summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsGetSignalError(OAIShareSubscription summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListByAccountSignalError() instead")
    void shareSubscriptionsListByAccountSignalE(OAIShareSubscriptionList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListByAccountSignalError(OAIShareSubscriptionList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListSourceShareSynchronizationSettingsSignalError() instead")
    void shareSubscriptionsListSourceShareSynchronizationSettingsSignalE(OAISourceShareSynchronizationSettingList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListSourceShareSynchronizationSettingsSignalError(OAISourceShareSynchronizationSettingList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListSynchronizationDetailsSignalError() instead")
    void shareSubscriptionsListSynchronizationDetailsSignalE(OAISynchronizationDetailsList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListSynchronizationDetailsSignalError(OAISynchronizationDetailsList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListSynchronizationsSignalError() instead")
    void shareSubscriptionsListSynchronizationsSignalE(OAIShareSubscriptionSynchronizationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListSynchronizationsSignalError(OAIShareSubscriptionSynchronizationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsSynchronizeSignalError() instead")
    void shareSubscriptionsSynchronizeSignalE(OAIShareSubscriptionSynchronization summary, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsSynchronizeSignalError(OAIShareSubscriptionSynchronization summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use consumerSourceDataSetsListByShareSubscriptionSignalErrorFull() instead")
    void consumerSourceDataSetsListByShareSubscriptionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void consumerSourceDataSetsListByShareSubscriptionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsCancelSynchronizationSignalErrorFull() instead")
    void shareSubscriptionsCancelSynchronizationSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsCancelSynchronizationSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsCreateSignalErrorFull() instead")
    void shareSubscriptionsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsDeleteSignalErrorFull() instead")
    void shareSubscriptionsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsGetSignalErrorFull() instead")
    void shareSubscriptionsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListByAccountSignalErrorFull() instead")
    void shareSubscriptionsListByAccountSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListByAccountSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListSourceShareSynchronizationSettingsSignalErrorFull() instead")
    void shareSubscriptionsListSourceShareSynchronizationSettingsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListSourceShareSynchronizationSettingsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListSynchronizationDetailsSignalErrorFull() instead")
    void shareSubscriptionsListSynchronizationDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListSynchronizationDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsListSynchronizationsSignalErrorFull() instead")
    void shareSubscriptionsListSynchronizationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsListSynchronizationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shareSubscriptionsSynchronizeSignalErrorFull() instead")
    void shareSubscriptionsSynchronizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shareSubscriptionsSynchronizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
