/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIKustoDatabaseDataSetProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIKustoDatabaseDataSetProperties::OAIKustoDatabaseDataSetProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIKustoDatabaseDataSetProperties::OAIKustoDatabaseDataSetProperties() {
    this->initializeModel();
}

OAIKustoDatabaseDataSetProperties::~OAIKustoDatabaseDataSetProperties() {}

void OAIKustoDatabaseDataSetProperties::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_kusto_database_resource_id_isSet = false;
    m_kusto_database_resource_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;
}

void OAIKustoDatabaseDataSetProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIKustoDatabaseDataSetProperties::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("dataSetId")]);
    m_data_set_id_isSet = !json[QString("dataSetId")].isNull() && m_data_set_id_isValid;

    m_kusto_database_resource_id_isValid = ::OpenAPI::fromJsonValue(m_kusto_database_resource_id, json[QString("kustoDatabaseResourceId")]);
    m_kusto_database_resource_id_isSet = !json[QString("kustoDatabaseResourceId")].isNull() && m_kusto_database_resource_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;
}

QString OAIKustoDatabaseDataSetProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIKustoDatabaseDataSetProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("dataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_kusto_database_resource_id_isSet) {
        obj.insert(QString("kustoDatabaseResourceId"), ::OpenAPI::toJsonValue(m_kusto_database_resource_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    return obj;
}

QString OAIKustoDatabaseDataSetProperties::getDataSetId() const {
    return m_data_set_id;
}
void OAIKustoDatabaseDataSetProperties::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIKustoDatabaseDataSetProperties::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIKustoDatabaseDataSetProperties::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIKustoDatabaseDataSetProperties::getKustoDatabaseResourceId() const {
    return m_kusto_database_resource_id;
}
void OAIKustoDatabaseDataSetProperties::setKustoDatabaseResourceId(const QString &kusto_database_resource_id) {
    m_kusto_database_resource_id = kusto_database_resource_id;
    m_kusto_database_resource_id_isSet = true;
}

bool OAIKustoDatabaseDataSetProperties::is_kusto_database_resource_id_Set() const{
    return m_kusto_database_resource_id_isSet;
}

bool OAIKustoDatabaseDataSetProperties::is_kusto_database_resource_id_Valid() const{
    return m_kusto_database_resource_id_isValid;
}

QString OAIKustoDatabaseDataSetProperties::getLocation() const {
    return m_location;
}
void OAIKustoDatabaseDataSetProperties::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIKustoDatabaseDataSetProperties::is_location_Set() const{
    return m_location_isSet;
}

bool OAIKustoDatabaseDataSetProperties::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIKustoDatabaseDataSetProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIKustoDatabaseDataSetProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIKustoDatabaseDataSetProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIKustoDatabaseDataSetProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

bool OAIKustoDatabaseDataSetProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_kusto_database_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIKustoDatabaseDataSetProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_kusto_database_resource_id_isValid && true;
}

} // namespace OpenAPI
