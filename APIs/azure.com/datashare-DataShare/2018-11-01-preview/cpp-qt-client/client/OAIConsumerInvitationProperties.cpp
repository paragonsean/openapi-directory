/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConsumerInvitationProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConsumerInvitationProperties::OAIConsumerInvitationProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConsumerInvitationProperties::OAIConsumerInvitationProperties() {
    this->initializeModel();
}

OAIConsumerInvitationProperties::~OAIConsumerInvitationProperties() {}

void OAIConsumerInvitationProperties::initializeModel() {

    m_data_set_count_isSet = false;
    m_data_set_count_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_invitation_id_isSet = false;
    m_invitation_id_isValid = false;

    m_invitation_status_isSet = false;
    m_invitation_status_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_provider_email_isSet = false;
    m_provider_email_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_provider_tenant_name_isSet = false;
    m_provider_tenant_name_isValid = false;

    m_responded_at_isSet = false;
    m_responded_at_isValid = false;

    m_sent_at_isSet = false;
    m_sent_at_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_terms_of_use_isSet = false;
    m_terms_of_use_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIConsumerInvitationProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConsumerInvitationProperties::fromJsonObject(QJsonObject json) {

    m_data_set_count_isValid = ::OpenAPI::fromJsonValue(m_data_set_count, json[QString("dataSetCount")]);
    m_data_set_count_isSet = !json[QString("dataSetCount")].isNull() && m_data_set_count_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_invitation_id, json[QString("invitationId")]);
    m_invitation_id_isSet = !json[QString("invitationId")].isNull() && m_invitation_id_isValid;

    m_invitation_status_isValid = ::OpenAPI::fromJsonValue(m_invitation_status, json[QString("invitationStatus")]);
    m_invitation_status_isSet = !json[QString("invitationStatus")].isNull() && m_invitation_status_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_provider_email_isValid = ::OpenAPI::fromJsonValue(m_provider_email, json[QString("providerEmail")]);
    m_provider_email_isSet = !json[QString("providerEmail")].isNull() && m_provider_email_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;

    m_provider_tenant_name_isValid = ::OpenAPI::fromJsonValue(m_provider_tenant_name, json[QString("providerTenantName")]);
    m_provider_tenant_name_isSet = !json[QString("providerTenantName")].isNull() && m_provider_tenant_name_isValid;

    m_responded_at_isValid = ::OpenAPI::fromJsonValue(m_responded_at, json[QString("respondedAt")]);
    m_responded_at_isSet = !json[QString("respondedAt")].isNull() && m_responded_at_isValid;

    m_sent_at_isValid = ::OpenAPI::fromJsonValue(m_sent_at, json[QString("sentAt")]);
    m_sent_at_isSet = !json[QString("sentAt")].isNull() && m_sent_at_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_terms_of_use_isValid = ::OpenAPI::fromJsonValue(m_terms_of_use, json[QString("termsOfUse")]);
    m_terms_of_use_isSet = !json[QString("termsOfUse")].isNull() && m_terms_of_use_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIConsumerInvitationProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConsumerInvitationProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_count_isSet) {
        obj.insert(QString("dataSetCount"), ::OpenAPI::toJsonValue(m_data_set_count));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_invitation_id_isSet) {
        obj.insert(QString("invitationId"), ::OpenAPI::toJsonValue(m_invitation_id));
    }
    if (m_invitation_status_isSet) {
        obj.insert(QString("invitationStatus"), ::OpenAPI::toJsonValue(m_invitation_status));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_provider_email_isSet) {
        obj.insert(QString("providerEmail"), ::OpenAPI::toJsonValue(m_provider_email));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_provider_tenant_name_isSet) {
        obj.insert(QString("providerTenantName"), ::OpenAPI::toJsonValue(m_provider_tenant_name));
    }
    if (m_responded_at_isSet) {
        obj.insert(QString("respondedAt"), ::OpenAPI::toJsonValue(m_responded_at));
    }
    if (m_sent_at_isSet) {
        obj.insert(QString("sentAt"), ::OpenAPI::toJsonValue(m_sent_at));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_terms_of_use_isSet) {
        obj.insert(QString("termsOfUse"), ::OpenAPI::toJsonValue(m_terms_of_use));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

qint32 OAIConsumerInvitationProperties::getDataSetCount() const {
    return m_data_set_count;
}
void OAIConsumerInvitationProperties::setDataSetCount(const qint32 &data_set_count) {
    m_data_set_count = data_set_count;
    m_data_set_count_isSet = true;
}

bool OAIConsumerInvitationProperties::is_data_set_count_Set() const{
    return m_data_set_count_isSet;
}

bool OAIConsumerInvitationProperties::is_data_set_count_Valid() const{
    return m_data_set_count_isValid;
}

QString OAIConsumerInvitationProperties::getDescription() const {
    return m_description;
}
void OAIConsumerInvitationProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIConsumerInvitationProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIConsumerInvitationProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIConsumerInvitationProperties::getInvitationId() const {
    return m_invitation_id;
}
void OAIConsumerInvitationProperties::setInvitationId(const QString &invitation_id) {
    m_invitation_id = invitation_id;
    m_invitation_id_isSet = true;
}

bool OAIConsumerInvitationProperties::is_invitation_id_Set() const{
    return m_invitation_id_isSet;
}

bool OAIConsumerInvitationProperties::is_invitation_id_Valid() const{
    return m_invitation_id_isValid;
}

QString OAIConsumerInvitationProperties::getInvitationStatus() const {
    return m_invitation_status;
}
void OAIConsumerInvitationProperties::setInvitationStatus(const QString &invitation_status) {
    m_invitation_status = invitation_status;
    m_invitation_status_isSet = true;
}

bool OAIConsumerInvitationProperties::is_invitation_status_Set() const{
    return m_invitation_status_isSet;
}

bool OAIConsumerInvitationProperties::is_invitation_status_Valid() const{
    return m_invitation_status_isValid;
}

QString OAIConsumerInvitationProperties::getLocation() const {
    return m_location;
}
void OAIConsumerInvitationProperties::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIConsumerInvitationProperties::is_location_Set() const{
    return m_location_isSet;
}

bool OAIConsumerInvitationProperties::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIConsumerInvitationProperties::getProviderEmail() const {
    return m_provider_email;
}
void OAIConsumerInvitationProperties::setProviderEmail(const QString &provider_email) {
    m_provider_email = provider_email;
    m_provider_email_isSet = true;
}

bool OAIConsumerInvitationProperties::is_provider_email_Set() const{
    return m_provider_email_isSet;
}

bool OAIConsumerInvitationProperties::is_provider_email_Valid() const{
    return m_provider_email_isValid;
}

QString OAIConsumerInvitationProperties::getProviderName() const {
    return m_provider_name;
}
void OAIConsumerInvitationProperties::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIConsumerInvitationProperties::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIConsumerInvitationProperties::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QString OAIConsumerInvitationProperties::getProviderTenantName() const {
    return m_provider_tenant_name;
}
void OAIConsumerInvitationProperties::setProviderTenantName(const QString &provider_tenant_name) {
    m_provider_tenant_name = provider_tenant_name;
    m_provider_tenant_name_isSet = true;
}

bool OAIConsumerInvitationProperties::is_provider_tenant_name_Set() const{
    return m_provider_tenant_name_isSet;
}

bool OAIConsumerInvitationProperties::is_provider_tenant_name_Valid() const{
    return m_provider_tenant_name_isValid;
}

QDateTime OAIConsumerInvitationProperties::getRespondedAt() const {
    return m_responded_at;
}
void OAIConsumerInvitationProperties::setRespondedAt(const QDateTime &responded_at) {
    m_responded_at = responded_at;
    m_responded_at_isSet = true;
}

bool OAIConsumerInvitationProperties::is_responded_at_Set() const{
    return m_responded_at_isSet;
}

bool OAIConsumerInvitationProperties::is_responded_at_Valid() const{
    return m_responded_at_isValid;
}

QDateTime OAIConsumerInvitationProperties::getSentAt() const {
    return m_sent_at;
}
void OAIConsumerInvitationProperties::setSentAt(const QDateTime &sent_at) {
    m_sent_at = sent_at;
    m_sent_at_isSet = true;
}

bool OAIConsumerInvitationProperties::is_sent_at_Set() const{
    return m_sent_at_isSet;
}

bool OAIConsumerInvitationProperties::is_sent_at_Valid() const{
    return m_sent_at_isValid;
}

QString OAIConsumerInvitationProperties::getShareName() const {
    return m_share_name;
}
void OAIConsumerInvitationProperties::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAIConsumerInvitationProperties::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAIConsumerInvitationProperties::is_share_name_Valid() const{
    return m_share_name_isValid;
}

QString OAIConsumerInvitationProperties::getTermsOfUse() const {
    return m_terms_of_use;
}
void OAIConsumerInvitationProperties::setTermsOfUse(const QString &terms_of_use) {
    m_terms_of_use = terms_of_use;
    m_terms_of_use_isSet = true;
}

bool OAIConsumerInvitationProperties::is_terms_of_use_Set() const{
    return m_terms_of_use_isSet;
}

bool OAIConsumerInvitationProperties::is_terms_of_use_Valid() const{
    return m_terms_of_use_isValid;
}

QString OAIConsumerInvitationProperties::getUserEmail() const {
    return m_user_email;
}
void OAIConsumerInvitationProperties::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIConsumerInvitationProperties::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIConsumerInvitationProperties::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIConsumerInvitationProperties::getUserName() const {
    return m_user_name;
}
void OAIConsumerInvitationProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIConsumerInvitationProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIConsumerInvitationProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIConsumerInvitationProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_tenant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_responded_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms_of_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConsumerInvitationProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_invitation_id_isValid && true;
}

} // namespace OpenAPI
