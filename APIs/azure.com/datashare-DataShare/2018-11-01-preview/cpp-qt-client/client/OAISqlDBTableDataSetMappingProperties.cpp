/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISqlDBTableDataSetMappingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISqlDBTableDataSetMappingProperties::OAISqlDBTableDataSetMappingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISqlDBTableDataSetMappingProperties::OAISqlDBTableDataSetMappingProperties() {
    this->initializeModel();
}

OAISqlDBTableDataSetMappingProperties::~OAISqlDBTableDataSetMappingProperties() {}

void OAISqlDBTableDataSetMappingProperties::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_data_set_mapping_status_isSet = false;
    m_data_set_mapping_status_isValid = false;

    m_database_name_isSet = false;
    m_database_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_schema_name_isSet = false;
    m_schema_name_isValid = false;

    m_sql_server_resource_id_isSet = false;
    m_sql_server_resource_id_isValid = false;

    m_table_name_isSet = false;
    m_table_name_isValid = false;
}

void OAISqlDBTableDataSetMappingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISqlDBTableDataSetMappingProperties::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("dataSetId")]);
    m_data_set_id_isSet = !json[QString("dataSetId")].isNull() && m_data_set_id_isValid;

    m_data_set_mapping_status_isValid = ::OpenAPI::fromJsonValue(m_data_set_mapping_status, json[QString("dataSetMappingStatus")]);
    m_data_set_mapping_status_isSet = !json[QString("dataSetMappingStatus")].isNull() && m_data_set_mapping_status_isValid;

    m_database_name_isValid = ::OpenAPI::fromJsonValue(m_database_name, json[QString("databaseName")]);
    m_database_name_isSet = !json[QString("databaseName")].isNull() && m_database_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_schema_name_isValid = ::OpenAPI::fromJsonValue(m_schema_name, json[QString("schemaName")]);
    m_schema_name_isSet = !json[QString("schemaName")].isNull() && m_schema_name_isValid;

    m_sql_server_resource_id_isValid = ::OpenAPI::fromJsonValue(m_sql_server_resource_id, json[QString("sqlServerResourceId")]);
    m_sql_server_resource_id_isSet = !json[QString("sqlServerResourceId")].isNull() && m_sql_server_resource_id_isValid;

    m_table_name_isValid = ::OpenAPI::fromJsonValue(m_table_name, json[QString("tableName")]);
    m_table_name_isSet = !json[QString("tableName")].isNull() && m_table_name_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISqlDBTableDataSetMappingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("dataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_data_set_mapping_status_isSet) {
        obj.insert(QString("dataSetMappingStatus"), ::OpenAPI::toJsonValue(m_data_set_mapping_status));
    }
    if (m_database_name_isSet) {
        obj.insert(QString("databaseName"), ::OpenAPI::toJsonValue(m_database_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_schema_name_isSet) {
        obj.insert(QString("schemaName"), ::OpenAPI::toJsonValue(m_schema_name));
    }
    if (m_sql_server_resource_id_isSet) {
        obj.insert(QString("sqlServerResourceId"), ::OpenAPI::toJsonValue(m_sql_server_resource_id));
    }
    if (m_table_name_isSet) {
        obj.insert(QString("tableName"), ::OpenAPI::toJsonValue(m_table_name));
    }
    return obj;
}

QString OAISqlDBTableDataSetMappingProperties::getDataSetId() const {
    return m_data_set_id;
}
void OAISqlDBTableDataSetMappingProperties::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::getDataSetMappingStatus() const {
    return m_data_set_mapping_status;
}
void OAISqlDBTableDataSetMappingProperties::setDataSetMappingStatus(const QString &data_set_mapping_status) {
    m_data_set_mapping_status = data_set_mapping_status;
    m_data_set_mapping_status_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_data_set_mapping_status_Set() const{
    return m_data_set_mapping_status_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_data_set_mapping_status_Valid() const{
    return m_data_set_mapping_status_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::getDatabaseName() const {
    return m_database_name;
}
void OAISqlDBTableDataSetMappingProperties::setDatabaseName(const QString &database_name) {
    m_database_name = database_name;
    m_database_name_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_database_name_Set() const{
    return m_database_name_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_database_name_Valid() const{
    return m_database_name_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAISqlDBTableDataSetMappingProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::getSchemaName() const {
    return m_schema_name;
}
void OAISqlDBTableDataSetMappingProperties::setSchemaName(const QString &schema_name) {
    m_schema_name = schema_name;
    m_schema_name_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_schema_name_Set() const{
    return m_schema_name_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_schema_name_Valid() const{
    return m_schema_name_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::getSqlServerResourceId() const {
    return m_sql_server_resource_id;
}
void OAISqlDBTableDataSetMappingProperties::setSqlServerResourceId(const QString &sql_server_resource_id) {
    m_sql_server_resource_id = sql_server_resource_id;
    m_sql_server_resource_id_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_sql_server_resource_id_Set() const{
    return m_sql_server_resource_id_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_sql_server_resource_id_Valid() const{
    return m_sql_server_resource_id_isValid;
}

QString OAISqlDBTableDataSetMappingProperties::getTableName() const {
    return m_table_name;
}
void OAISqlDBTableDataSetMappingProperties::setTableName(const QString &table_name) {
    m_table_name = table_name;
    m_table_name_isSet = true;
}

bool OAISqlDBTableDataSetMappingProperties::is_table_name_Set() const{
    return m_table_name_isSet;
}

bool OAISqlDBTableDataSetMappingProperties::is_table_name_Valid() const{
    return m_table_name_isValid;
}

bool OAISqlDBTableDataSetMappingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_mapping_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_database_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schema_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sql_server_resource_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_table_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISqlDBTableDataSetMappingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_data_set_id_isValid && m_database_name_isValid && m_schema_name_isValid && m_sql_server_resource_id_isValid && m_table_name_isValid && true;
}

} // namespace OpenAPI
