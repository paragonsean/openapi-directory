/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShareSubscriptionProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShareSubscriptionProperties::OAIShareSubscriptionProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShareSubscriptionProperties::OAIShareSubscriptionProperties() {
    this->initializeModel();
}

OAIShareSubscriptionProperties::~OAIShareSubscriptionProperties() {}

void OAIShareSubscriptionProperties::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_invitation_id_isSet = false;
    m_invitation_id_isValid = false;

    m_provider_email_isSet = false;
    m_provider_email_isValid = false;

    m_provider_name_isSet = false;
    m_provider_name_isValid = false;

    m_provider_tenant_name_isSet = false;
    m_provider_tenant_name_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_share_description_isSet = false;
    m_share_description_isValid = false;

    m_share_kind_isSet = false;
    m_share_kind_isValid = false;

    m_share_name_isSet = false;
    m_share_name_isValid = false;

    m_share_subscription_status_isSet = false;
    m_share_subscription_status_isValid = false;

    m_share_terms_isSet = false;
    m_share_terms_isValid = false;

    m_user_email_isSet = false;
    m_user_email_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIShareSubscriptionProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShareSubscriptionProperties::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_invitation_id_isValid = ::OpenAPI::fromJsonValue(m_invitation_id, json[QString("invitationId")]);
    m_invitation_id_isSet = !json[QString("invitationId")].isNull() && m_invitation_id_isValid;

    m_provider_email_isValid = ::OpenAPI::fromJsonValue(m_provider_email, json[QString("providerEmail")]);
    m_provider_email_isSet = !json[QString("providerEmail")].isNull() && m_provider_email_isValid;

    m_provider_name_isValid = ::OpenAPI::fromJsonValue(m_provider_name, json[QString("providerName")]);
    m_provider_name_isSet = !json[QString("providerName")].isNull() && m_provider_name_isValid;

    m_provider_tenant_name_isValid = ::OpenAPI::fromJsonValue(m_provider_tenant_name, json[QString("providerTenantName")]);
    m_provider_tenant_name_isSet = !json[QString("providerTenantName")].isNull() && m_provider_tenant_name_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_share_description_isValid = ::OpenAPI::fromJsonValue(m_share_description, json[QString("shareDescription")]);
    m_share_description_isSet = !json[QString("shareDescription")].isNull() && m_share_description_isValid;

    m_share_kind_isValid = ::OpenAPI::fromJsonValue(m_share_kind, json[QString("shareKind")]);
    m_share_kind_isSet = !json[QString("shareKind")].isNull() && m_share_kind_isValid;

    m_share_name_isValid = ::OpenAPI::fromJsonValue(m_share_name, json[QString("shareName")]);
    m_share_name_isSet = !json[QString("shareName")].isNull() && m_share_name_isValid;

    m_share_subscription_status_isValid = ::OpenAPI::fromJsonValue(m_share_subscription_status, json[QString("shareSubscriptionStatus")]);
    m_share_subscription_status_isSet = !json[QString("shareSubscriptionStatus")].isNull() && m_share_subscription_status_isValid;

    m_share_terms_isValid = ::OpenAPI::fromJsonValue(m_share_terms, json[QString("shareTerms")]);
    m_share_terms_isSet = !json[QString("shareTerms")].isNull() && m_share_terms_isValid;

    m_user_email_isValid = ::OpenAPI::fromJsonValue(m_user_email, json[QString("userEmail")]);
    m_user_email_isSet = !json[QString("userEmail")].isNull() && m_user_email_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIShareSubscriptionProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShareSubscriptionProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_invitation_id_isSet) {
        obj.insert(QString("invitationId"), ::OpenAPI::toJsonValue(m_invitation_id));
    }
    if (m_provider_email_isSet) {
        obj.insert(QString("providerEmail"), ::OpenAPI::toJsonValue(m_provider_email));
    }
    if (m_provider_name_isSet) {
        obj.insert(QString("providerName"), ::OpenAPI::toJsonValue(m_provider_name));
    }
    if (m_provider_tenant_name_isSet) {
        obj.insert(QString("providerTenantName"), ::OpenAPI::toJsonValue(m_provider_tenant_name));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_share_description_isSet) {
        obj.insert(QString("shareDescription"), ::OpenAPI::toJsonValue(m_share_description));
    }
    if (m_share_kind_isSet) {
        obj.insert(QString("shareKind"), ::OpenAPI::toJsonValue(m_share_kind));
    }
    if (m_share_name_isSet) {
        obj.insert(QString("shareName"), ::OpenAPI::toJsonValue(m_share_name));
    }
    if (m_share_subscription_status_isSet) {
        obj.insert(QString("shareSubscriptionStatus"), ::OpenAPI::toJsonValue(m_share_subscription_status));
    }
    if (m_share_terms_isSet) {
        obj.insert(QString("shareTerms"), ::OpenAPI::toJsonValue(m_share_terms));
    }
    if (m_user_email_isSet) {
        obj.insert(QString("userEmail"), ::OpenAPI::toJsonValue(m_user_email));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QDateTime OAIShareSubscriptionProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIShareSubscriptionProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIShareSubscriptionProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIShareSubscriptionProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIShareSubscriptionProperties::getInvitationId() const {
    return m_invitation_id;
}
void OAIShareSubscriptionProperties::setInvitationId(const QString &invitation_id) {
    m_invitation_id = invitation_id;
    m_invitation_id_isSet = true;
}

bool OAIShareSubscriptionProperties::is_invitation_id_Set() const{
    return m_invitation_id_isSet;
}

bool OAIShareSubscriptionProperties::is_invitation_id_Valid() const{
    return m_invitation_id_isValid;
}

QString OAIShareSubscriptionProperties::getProviderEmail() const {
    return m_provider_email;
}
void OAIShareSubscriptionProperties::setProviderEmail(const QString &provider_email) {
    m_provider_email = provider_email;
    m_provider_email_isSet = true;
}

bool OAIShareSubscriptionProperties::is_provider_email_Set() const{
    return m_provider_email_isSet;
}

bool OAIShareSubscriptionProperties::is_provider_email_Valid() const{
    return m_provider_email_isValid;
}

QString OAIShareSubscriptionProperties::getProviderName() const {
    return m_provider_name;
}
void OAIShareSubscriptionProperties::setProviderName(const QString &provider_name) {
    m_provider_name = provider_name;
    m_provider_name_isSet = true;
}

bool OAIShareSubscriptionProperties::is_provider_name_Set() const{
    return m_provider_name_isSet;
}

bool OAIShareSubscriptionProperties::is_provider_name_Valid() const{
    return m_provider_name_isValid;
}

QString OAIShareSubscriptionProperties::getProviderTenantName() const {
    return m_provider_tenant_name;
}
void OAIShareSubscriptionProperties::setProviderTenantName(const QString &provider_tenant_name) {
    m_provider_tenant_name = provider_tenant_name;
    m_provider_tenant_name_isSet = true;
}

bool OAIShareSubscriptionProperties::is_provider_tenant_name_Set() const{
    return m_provider_tenant_name_isSet;
}

bool OAIShareSubscriptionProperties::is_provider_tenant_name_Valid() const{
    return m_provider_tenant_name_isValid;
}

QString OAIShareSubscriptionProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIShareSubscriptionProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIShareSubscriptionProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIShareSubscriptionProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIShareSubscriptionProperties::getShareDescription() const {
    return m_share_description;
}
void OAIShareSubscriptionProperties::setShareDescription(const QString &share_description) {
    m_share_description = share_description;
    m_share_description_isSet = true;
}

bool OAIShareSubscriptionProperties::is_share_description_Set() const{
    return m_share_description_isSet;
}

bool OAIShareSubscriptionProperties::is_share_description_Valid() const{
    return m_share_description_isValid;
}

QString OAIShareSubscriptionProperties::getShareKind() const {
    return m_share_kind;
}
void OAIShareSubscriptionProperties::setShareKind(const QString &share_kind) {
    m_share_kind = share_kind;
    m_share_kind_isSet = true;
}

bool OAIShareSubscriptionProperties::is_share_kind_Set() const{
    return m_share_kind_isSet;
}

bool OAIShareSubscriptionProperties::is_share_kind_Valid() const{
    return m_share_kind_isValid;
}

QString OAIShareSubscriptionProperties::getShareName() const {
    return m_share_name;
}
void OAIShareSubscriptionProperties::setShareName(const QString &share_name) {
    m_share_name = share_name;
    m_share_name_isSet = true;
}

bool OAIShareSubscriptionProperties::is_share_name_Set() const{
    return m_share_name_isSet;
}

bool OAIShareSubscriptionProperties::is_share_name_Valid() const{
    return m_share_name_isValid;
}

QString OAIShareSubscriptionProperties::getShareSubscriptionStatus() const {
    return m_share_subscription_status;
}
void OAIShareSubscriptionProperties::setShareSubscriptionStatus(const QString &share_subscription_status) {
    m_share_subscription_status = share_subscription_status;
    m_share_subscription_status_isSet = true;
}

bool OAIShareSubscriptionProperties::is_share_subscription_status_Set() const{
    return m_share_subscription_status_isSet;
}

bool OAIShareSubscriptionProperties::is_share_subscription_status_Valid() const{
    return m_share_subscription_status_isValid;
}

QString OAIShareSubscriptionProperties::getShareTerms() const {
    return m_share_terms;
}
void OAIShareSubscriptionProperties::setShareTerms(const QString &share_terms) {
    m_share_terms = share_terms;
    m_share_terms_isSet = true;
}

bool OAIShareSubscriptionProperties::is_share_terms_Set() const{
    return m_share_terms_isSet;
}

bool OAIShareSubscriptionProperties::is_share_terms_Valid() const{
    return m_share_terms_isValid;
}

QString OAIShareSubscriptionProperties::getUserEmail() const {
    return m_user_email;
}
void OAIShareSubscriptionProperties::setUserEmail(const QString &user_email) {
    m_user_email = user_email;
    m_user_email_isSet = true;
}

bool OAIShareSubscriptionProperties::is_user_email_Set() const{
    return m_user_email_isSet;
}

bool OAIShareSubscriptionProperties::is_user_email_Valid() const{
    return m_user_email_isValid;
}

QString OAIShareSubscriptionProperties::getUserName() const {
    return m_user_name;
}
void OAIShareSubscriptionProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIShareSubscriptionProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIShareSubscriptionProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIShareSubscriptionProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invitation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provider_tenant_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_kind_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_subscription_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_share_terms_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShareSubscriptionProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_invitation_id_isValid && true;
}

} // namespace OpenAPI
