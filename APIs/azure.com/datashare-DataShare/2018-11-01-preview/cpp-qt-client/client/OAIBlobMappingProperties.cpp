/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBlobMappingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBlobMappingProperties::OAIBlobMappingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBlobMappingProperties::OAIBlobMappingProperties() {
    this->initializeModel();
}

OAIBlobMappingProperties::~OAIBlobMappingProperties() {}

void OAIBlobMappingProperties::initializeModel() {

    m_container_name_isSet = false;
    m_container_name_isValid = false;

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_data_set_mapping_status_isSet = false;
    m_data_set_mapping_status_isValid = false;

    m_file_path_isSet = false;
    m_file_path_isValid = false;

    m_output_type_isSet = false;
    m_output_type_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIBlobMappingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBlobMappingProperties::fromJsonObject(QJsonObject json) {

    m_container_name_isValid = ::OpenAPI::fromJsonValue(m_container_name, json[QString("containerName")]);
    m_container_name_isSet = !json[QString("containerName")].isNull() && m_container_name_isValid;

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("dataSetId")]);
    m_data_set_id_isSet = !json[QString("dataSetId")].isNull() && m_data_set_id_isValid;

    m_data_set_mapping_status_isValid = ::OpenAPI::fromJsonValue(m_data_set_mapping_status, json[QString("dataSetMappingStatus")]);
    m_data_set_mapping_status_isSet = !json[QString("dataSetMappingStatus")].isNull() && m_data_set_mapping_status_isValid;

    m_file_path_isValid = ::OpenAPI::fromJsonValue(m_file_path, json[QString("filePath")]);
    m_file_path_isSet = !json[QString("filePath")].isNull() && m_file_path_isValid;

    m_output_type_isValid = ::OpenAPI::fromJsonValue(m_output_type, json[QString("outputType")]);
    m_output_type_isSet = !json[QString("outputType")].isNull() && m_output_type_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIBlobMappingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBlobMappingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_container_name_isSet) {
        obj.insert(QString("containerName"), ::OpenAPI::toJsonValue(m_container_name));
    }
    if (m_data_set_id_isSet) {
        obj.insert(QString("dataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_data_set_mapping_status_isSet) {
        obj.insert(QString("dataSetMappingStatus"), ::OpenAPI::toJsonValue(m_data_set_mapping_status));
    }
    if (m_file_path_isSet) {
        obj.insert(QString("filePath"), ::OpenAPI::toJsonValue(m_file_path));
    }
    if (m_output_type_isSet) {
        obj.insert(QString("outputType"), ::OpenAPI::toJsonValue(m_output_type));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIBlobMappingProperties::getContainerName() const {
    return m_container_name;
}
void OAIBlobMappingProperties::setContainerName(const QString &container_name) {
    m_container_name = container_name;
    m_container_name_isSet = true;
}

bool OAIBlobMappingProperties::is_container_name_Set() const{
    return m_container_name_isSet;
}

bool OAIBlobMappingProperties::is_container_name_Valid() const{
    return m_container_name_isValid;
}

QString OAIBlobMappingProperties::getDataSetId() const {
    return m_data_set_id;
}
void OAIBlobMappingProperties::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIBlobMappingProperties::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIBlobMappingProperties::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIBlobMappingProperties::getDataSetMappingStatus() const {
    return m_data_set_mapping_status;
}
void OAIBlobMappingProperties::setDataSetMappingStatus(const QString &data_set_mapping_status) {
    m_data_set_mapping_status = data_set_mapping_status;
    m_data_set_mapping_status_isSet = true;
}

bool OAIBlobMappingProperties::is_data_set_mapping_status_Set() const{
    return m_data_set_mapping_status_isSet;
}

bool OAIBlobMappingProperties::is_data_set_mapping_status_Valid() const{
    return m_data_set_mapping_status_isValid;
}

QString OAIBlobMappingProperties::getFilePath() const {
    return m_file_path;
}
void OAIBlobMappingProperties::setFilePath(const QString &file_path) {
    m_file_path = file_path;
    m_file_path_isSet = true;
}

bool OAIBlobMappingProperties::is_file_path_Set() const{
    return m_file_path_isSet;
}

bool OAIBlobMappingProperties::is_file_path_Valid() const{
    return m_file_path_isValid;
}

QString OAIBlobMappingProperties::getOutputType() const {
    return m_output_type;
}
void OAIBlobMappingProperties::setOutputType(const QString &output_type) {
    m_output_type = output_type;
    m_output_type_isSet = true;
}

bool OAIBlobMappingProperties::is_output_type_Set() const{
    return m_output_type_isSet;
}

bool OAIBlobMappingProperties::is_output_type_Valid() const{
    return m_output_type_isValid;
}

QString OAIBlobMappingProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIBlobMappingProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIBlobMappingProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIBlobMappingProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIBlobMappingProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIBlobMappingProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIBlobMappingProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIBlobMappingProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIBlobMappingProperties::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIBlobMappingProperties::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIBlobMappingProperties::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIBlobMappingProperties::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

QString OAIBlobMappingProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIBlobMappingProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIBlobMappingProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIBlobMappingProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIBlobMappingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_container_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data_set_mapping_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_output_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBlobMappingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_container_name_isValid && m_data_set_id_isValid && m_file_path_isValid && m_resource_group_isValid && m_storage_account_name_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
