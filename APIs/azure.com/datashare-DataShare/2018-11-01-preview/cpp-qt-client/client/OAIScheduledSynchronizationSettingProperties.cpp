/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScheduledSynchronizationSettingProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScheduledSynchronizationSettingProperties::OAIScheduledSynchronizationSettingProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScheduledSynchronizationSettingProperties::OAIScheduledSynchronizationSettingProperties() {
    this->initializeModel();
}

OAIScheduledSynchronizationSettingProperties::~OAIScheduledSynchronizationSettingProperties() {}

void OAIScheduledSynchronizationSettingProperties::initializeModel() {

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_provisioning_state_isSet = false;
    m_provisioning_state_isValid = false;

    m_recurrence_interval_isSet = false;
    m_recurrence_interval_isValid = false;

    m_synchronization_time_isSet = false;
    m_synchronization_time_isValid = false;

    m_user_name_isSet = false;
    m_user_name_isValid = false;
}

void OAIScheduledSynchronizationSettingProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScheduledSynchronizationSettingProperties::fromJsonObject(QJsonObject json) {

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("createdAt")]);
    m_created_at_isSet = !json[QString("createdAt")].isNull() && m_created_at_isValid;

    m_provisioning_state_isValid = ::OpenAPI::fromJsonValue(m_provisioning_state, json[QString("provisioningState")]);
    m_provisioning_state_isSet = !json[QString("provisioningState")].isNull() && m_provisioning_state_isValid;

    m_recurrence_interval_isValid = ::OpenAPI::fromJsonValue(m_recurrence_interval, json[QString("recurrenceInterval")]);
    m_recurrence_interval_isSet = !json[QString("recurrenceInterval")].isNull() && m_recurrence_interval_isValid;

    m_synchronization_time_isValid = ::OpenAPI::fromJsonValue(m_synchronization_time, json[QString("synchronizationTime")]);
    m_synchronization_time_isSet = !json[QString("synchronizationTime")].isNull() && m_synchronization_time_isValid;

    m_user_name_isValid = ::OpenAPI::fromJsonValue(m_user_name, json[QString("userName")]);
    m_user_name_isSet = !json[QString("userName")].isNull() && m_user_name_isValid;
}

QString OAIScheduledSynchronizationSettingProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScheduledSynchronizationSettingProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_created_at_isSet) {
        obj.insert(QString("createdAt"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_provisioning_state_isSet) {
        obj.insert(QString("provisioningState"), ::OpenAPI::toJsonValue(m_provisioning_state));
    }
    if (m_recurrence_interval_isSet) {
        obj.insert(QString("recurrenceInterval"), ::OpenAPI::toJsonValue(m_recurrence_interval));
    }
    if (m_synchronization_time_isSet) {
        obj.insert(QString("synchronizationTime"), ::OpenAPI::toJsonValue(m_synchronization_time));
    }
    if (m_user_name_isSet) {
        obj.insert(QString("userName"), ::OpenAPI::toJsonValue(m_user_name));
    }
    return obj;
}

QDateTime OAIScheduledSynchronizationSettingProperties::getCreatedAt() const {
    return m_created_at;
}
void OAIScheduledSynchronizationSettingProperties::setCreatedAt(const QDateTime &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIScheduledSynchronizationSettingProperties::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIScheduledSynchronizationSettingProperties::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIScheduledSynchronizationSettingProperties::getProvisioningState() const {
    return m_provisioning_state;
}
void OAIScheduledSynchronizationSettingProperties::setProvisioningState(const QString &provisioning_state) {
    m_provisioning_state = provisioning_state;
    m_provisioning_state_isSet = true;
}

bool OAIScheduledSynchronizationSettingProperties::is_provisioning_state_Set() const{
    return m_provisioning_state_isSet;
}

bool OAIScheduledSynchronizationSettingProperties::is_provisioning_state_Valid() const{
    return m_provisioning_state_isValid;
}

QString OAIScheduledSynchronizationSettingProperties::getRecurrenceInterval() const {
    return m_recurrence_interval;
}
void OAIScheduledSynchronizationSettingProperties::setRecurrenceInterval(const QString &recurrence_interval) {
    m_recurrence_interval = recurrence_interval;
    m_recurrence_interval_isSet = true;
}

bool OAIScheduledSynchronizationSettingProperties::is_recurrence_interval_Set() const{
    return m_recurrence_interval_isSet;
}

bool OAIScheduledSynchronizationSettingProperties::is_recurrence_interval_Valid() const{
    return m_recurrence_interval_isValid;
}

QDateTime OAIScheduledSynchronizationSettingProperties::getSynchronizationTime() const {
    return m_synchronization_time;
}
void OAIScheduledSynchronizationSettingProperties::setSynchronizationTime(const QDateTime &synchronization_time) {
    m_synchronization_time = synchronization_time;
    m_synchronization_time_isSet = true;
}

bool OAIScheduledSynchronizationSettingProperties::is_synchronization_time_Set() const{
    return m_synchronization_time_isSet;
}

bool OAIScheduledSynchronizationSettingProperties::is_synchronization_time_Valid() const{
    return m_synchronization_time_isValid;
}

QString OAIScheduledSynchronizationSettingProperties::getUserName() const {
    return m_user_name;
}
void OAIScheduledSynchronizationSettingProperties::setUserName(const QString &user_name) {
    m_user_name = user_name;
    m_user_name_isSet = true;
}

bool OAIScheduledSynchronizationSettingProperties::is_user_name_Set() const{
    return m_user_name_isSet;
}

bool OAIScheduledSynchronizationSettingProperties::is_user_name_Valid() const{
    return m_user_name_isValid;
}

bool OAIScheduledSynchronizationSettingProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_provisioning_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recurrence_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_synchronization_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScheduledSynchronizationSettingProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_recurrence_interval_isValid && m_synchronization_time_isValid && true;
}

} // namespace OpenAPI
