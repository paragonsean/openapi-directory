/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIADLSGen2FolderProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIADLSGen2FolderProperties::OAIADLSGen2FolderProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIADLSGen2FolderProperties::OAIADLSGen2FolderProperties() {
    this->initializeModel();
}

OAIADLSGen2FolderProperties::~OAIADLSGen2FolderProperties() {}

void OAIADLSGen2FolderProperties::initializeModel() {

    m_data_set_id_isSet = false;
    m_data_set_id_isValid = false;

    m_file_system_isSet = false;
    m_file_system_isValid = false;

    m_folder_path_isSet = false;
    m_folder_path_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_storage_account_name_isSet = false;
    m_storage_account_name_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAIADLSGen2FolderProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIADLSGen2FolderProperties::fromJsonObject(QJsonObject json) {

    m_data_set_id_isValid = ::OpenAPI::fromJsonValue(m_data_set_id, json[QString("dataSetId")]);
    m_data_set_id_isSet = !json[QString("dataSetId")].isNull() && m_data_set_id_isValid;

    m_file_system_isValid = ::OpenAPI::fromJsonValue(m_file_system, json[QString("fileSystem")]);
    m_file_system_isSet = !json[QString("fileSystem")].isNull() && m_file_system_isValid;

    m_folder_path_isValid = ::OpenAPI::fromJsonValue(m_folder_path, json[QString("folderPath")]);
    m_folder_path_isSet = !json[QString("folderPath")].isNull() && m_folder_path_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_storage_account_name_isValid = ::OpenAPI::fromJsonValue(m_storage_account_name, json[QString("storageAccountName")]);
    m_storage_account_name_isSet = !json[QString("storageAccountName")].isNull() && m_storage_account_name_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscriptionId")]);
    m_subscription_id_isSet = !json[QString("subscriptionId")].isNull() && m_subscription_id_isValid;
}

QString OAIADLSGen2FolderProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIADLSGen2FolderProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_data_set_id_isSet) {
        obj.insert(QString("dataSetId"), ::OpenAPI::toJsonValue(m_data_set_id));
    }
    if (m_file_system_isSet) {
        obj.insert(QString("fileSystem"), ::OpenAPI::toJsonValue(m_file_system));
    }
    if (m_folder_path_isSet) {
        obj.insert(QString("folderPath"), ::OpenAPI::toJsonValue(m_folder_path));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_storage_account_name_isSet) {
        obj.insert(QString("storageAccountName"), ::OpenAPI::toJsonValue(m_storage_account_name));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscriptionId"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAIADLSGen2FolderProperties::getDataSetId() const {
    return m_data_set_id;
}
void OAIADLSGen2FolderProperties::setDataSetId(const QString &data_set_id) {
    m_data_set_id = data_set_id;
    m_data_set_id_isSet = true;
}

bool OAIADLSGen2FolderProperties::is_data_set_id_Set() const{
    return m_data_set_id_isSet;
}

bool OAIADLSGen2FolderProperties::is_data_set_id_Valid() const{
    return m_data_set_id_isValid;
}

QString OAIADLSGen2FolderProperties::getFileSystem() const {
    return m_file_system;
}
void OAIADLSGen2FolderProperties::setFileSystem(const QString &file_system) {
    m_file_system = file_system;
    m_file_system_isSet = true;
}

bool OAIADLSGen2FolderProperties::is_file_system_Set() const{
    return m_file_system_isSet;
}

bool OAIADLSGen2FolderProperties::is_file_system_Valid() const{
    return m_file_system_isValid;
}

QString OAIADLSGen2FolderProperties::getFolderPath() const {
    return m_folder_path;
}
void OAIADLSGen2FolderProperties::setFolderPath(const QString &folder_path) {
    m_folder_path = folder_path;
    m_folder_path_isSet = true;
}

bool OAIADLSGen2FolderProperties::is_folder_path_Set() const{
    return m_folder_path_isSet;
}

bool OAIADLSGen2FolderProperties::is_folder_path_Valid() const{
    return m_folder_path_isValid;
}

QString OAIADLSGen2FolderProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIADLSGen2FolderProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIADLSGen2FolderProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIADLSGen2FolderProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIADLSGen2FolderProperties::getStorageAccountName() const {
    return m_storage_account_name;
}
void OAIADLSGen2FolderProperties::setStorageAccountName(const QString &storage_account_name) {
    m_storage_account_name = storage_account_name;
    m_storage_account_name_isSet = true;
}

bool OAIADLSGen2FolderProperties::is_storage_account_name_Set() const{
    return m_storage_account_name_isSet;
}

bool OAIADLSGen2FolderProperties::is_storage_account_name_Valid() const{
    return m_storage_account_name_isValid;
}

QString OAIADLSGen2FolderProperties::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIADLSGen2FolderProperties::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIADLSGen2FolderProperties::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIADLSGen2FolderProperties::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAIADLSGen2FolderProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data_set_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_system_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_folder_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_storage_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIADLSGen2FolderProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_file_system_isValid && m_folder_path_isValid && m_resource_group_isValid && m_storage_account_name_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
