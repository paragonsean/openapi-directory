/**
 * DataShareManagementClient
 * Creates a Microsoft.DataShare management client.
 *
 * The version of the OpenAPI document: 2018-11-01-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISynchronizationDetails.h
 *
 * Synchronization details at data set level
 */

#ifndef OAISynchronizationDetails_H
#define OAISynchronizationDetails_H

#include <QJsonObject>

#include <QDateTime>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISynchronizationDetails : public OAIObject {
public:
    OAISynchronizationDetails();
    OAISynchronizationDetails(QString json);
    ~OAISynchronizationDetails() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getDataSetId() const;
    void setDataSetId(const QString &data_set_id);
    bool is_data_set_id_Set() const;
    bool is_data_set_id_Valid() const;

    QString getDataSetType() const;
    void setDataSetType(const QString &data_set_type);
    bool is_data_set_type_Set() const;
    bool is_data_set_type_Valid() const;

    qint32 getDurationMs() const;
    void setDurationMs(const qint32 &duration_ms);
    bool is_duration_ms_Set() const;
    bool is_duration_ms_Valid() const;

    QDateTime getEndTime() const;
    void setEndTime(const QDateTime &end_time);
    bool is_end_time_Set() const;
    bool is_end_time_Valid() const;

    qint64 getFilesRead() const;
    void setFilesRead(const qint64 &files_read);
    bool is_files_read_Set() const;
    bool is_files_read_Valid() const;

    qint64 getFilesWritten() const;
    void setFilesWritten(const qint64 &files_written);
    bool is_files_written_Set() const;
    bool is_files_written_Valid() const;

    QString getMessage() const;
    void setMessage(const QString &message);
    bool is_message_Set() const;
    bool is_message_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    qint64 getRowsCopied() const;
    void setRowsCopied(const qint64 &rows_copied);
    bool is_rows_copied_Set() const;
    bool is_rows_copied_Valid() const;

    qint64 getRowsRead() const;
    void setRowsRead(const qint64 &rows_read);
    bool is_rows_read_Set() const;
    bool is_rows_read_Valid() const;

    qint64 getSizeRead() const;
    void setSizeRead(const qint64 &size_read);
    bool is_size_read_Set() const;
    bool is_size_read_Valid() const;

    qint64 getSizeWritten() const;
    void setSizeWritten(const qint64 &size_written);
    bool is_size_written_Set() const;
    bool is_size_written_Valid() const;

    QDateTime getStartTime() const;
    void setStartTime(const QDateTime &start_time);
    bool is_start_time_Set() const;
    bool is_start_time_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    qint64 getVCore() const;
    void setVCore(const qint64 &v_core);
    bool is_v_core_Set() const;
    bool is_v_core_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_data_set_id;
    bool m_data_set_id_isSet;
    bool m_data_set_id_isValid;

    QString m_data_set_type;
    bool m_data_set_type_isSet;
    bool m_data_set_type_isValid;

    qint32 m_duration_ms;
    bool m_duration_ms_isSet;
    bool m_duration_ms_isValid;

    QDateTime m_end_time;
    bool m_end_time_isSet;
    bool m_end_time_isValid;

    qint64 m_files_read;
    bool m_files_read_isSet;
    bool m_files_read_isValid;

    qint64 m_files_written;
    bool m_files_written_isSet;
    bool m_files_written_isValid;

    QString m_message;
    bool m_message_isSet;
    bool m_message_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    qint64 m_rows_copied;
    bool m_rows_copied_isSet;
    bool m_rows_copied_isValid;

    qint64 m_rows_read;
    bool m_rows_read_isSet;
    bool m_rows_read_isValid;

    qint64 m_size_read;
    bool m_size_read_isSet;
    bool m_size_read_isValid;

    qint64 m_size_written;
    bool m_size_written_isSet;
    bool m_size_written_isValid;

    QDateTime m_start_time;
    bool m_start_time_isSet;
    bool m_start_time_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    qint64 m_v_core;
    bool m_v_core_isSet;
    bool m_v_core_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISynchronizationDetails)

#endif // OAISynchronizationDetails_H
