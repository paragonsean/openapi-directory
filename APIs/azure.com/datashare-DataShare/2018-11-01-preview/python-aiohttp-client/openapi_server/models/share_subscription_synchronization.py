# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareSubscriptionSynchronization(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration_ms: int=None, end_time: datetime=None, message: str=None, start_time: datetime=None, status: str=None, synchronization_id: str=None, synchronization_mode: str=None):
        """ShareSubscriptionSynchronization - a model defined in OpenAPI

        :param duration_ms: The duration_ms of this ShareSubscriptionSynchronization.
        :param end_time: The end_time of this ShareSubscriptionSynchronization.
        :param message: The message of this ShareSubscriptionSynchronization.
        :param start_time: The start_time of this ShareSubscriptionSynchronization.
        :param status: The status of this ShareSubscriptionSynchronization.
        :param synchronization_id: The synchronization_id of this ShareSubscriptionSynchronization.
        :param synchronization_mode: The synchronization_mode of this ShareSubscriptionSynchronization.
        """
        self.openapi_types = {
            'duration_ms': int,
            'end_time': datetime,
            'message': str,
            'start_time': datetime,
            'status': str,
            'synchronization_id': str,
            'synchronization_mode': str
        }

        self.attribute_map = {
            'duration_ms': 'durationMs',
            'end_time': 'endTime',
            'message': 'message',
            'start_time': 'startTime',
            'status': 'status',
            'synchronization_id': 'synchronizationId',
            'synchronization_mode': 'synchronizationMode'
        }

        self._duration_ms = duration_ms
        self._end_time = end_time
        self._message = message
        self._start_time = start_time
        self._status = status
        self._synchronization_id = synchronization_id
        self._synchronization_mode = synchronization_mode

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareSubscriptionSynchronization':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareSubscriptionSynchronization of this ShareSubscriptionSynchronization.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration_ms(self):
        """Gets the duration_ms of this ShareSubscriptionSynchronization.

        Synchronization duration

        :return: The duration_ms of this ShareSubscriptionSynchronization.
        :rtype: int
        """
        return self._duration_ms

    @duration_ms.setter
    def duration_ms(self, duration_ms):
        """Sets the duration_ms of this ShareSubscriptionSynchronization.

        Synchronization duration

        :param duration_ms: The duration_ms of this ShareSubscriptionSynchronization.
        :type duration_ms: int
        """

        self._duration_ms = duration_ms

    @property
    def end_time(self):
        """Gets the end_time of this ShareSubscriptionSynchronization.

        End time of synchronization

        :return: The end_time of this ShareSubscriptionSynchronization.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ShareSubscriptionSynchronization.

        End time of synchronization

        :param end_time: The end_time of this ShareSubscriptionSynchronization.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def message(self):
        """Gets the message of this ShareSubscriptionSynchronization.

        message of Synchronization

        :return: The message of this ShareSubscriptionSynchronization.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ShareSubscriptionSynchronization.

        message of Synchronization

        :param message: The message of this ShareSubscriptionSynchronization.
        :type message: str
        """

        self._message = message

    @property
    def start_time(self):
        """Gets the start_time of this ShareSubscriptionSynchronization.

        start time of synchronization

        :return: The start_time of this ShareSubscriptionSynchronization.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ShareSubscriptionSynchronization.

        start time of synchronization

        :param start_time: The start_time of this ShareSubscriptionSynchronization.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def status(self):
        """Gets the status of this ShareSubscriptionSynchronization.

        Raw Status

        :return: The status of this ShareSubscriptionSynchronization.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ShareSubscriptionSynchronization.

        Raw Status

        :param status: The status of this ShareSubscriptionSynchronization.
        :type status: str
        """

        self._status = status

    @property
    def synchronization_id(self):
        """Gets the synchronization_id of this ShareSubscriptionSynchronization.

        Synchronization id

        :return: The synchronization_id of this ShareSubscriptionSynchronization.
        :rtype: str
        """
        return self._synchronization_id

    @synchronization_id.setter
    def synchronization_id(self, synchronization_id):
        """Sets the synchronization_id of this ShareSubscriptionSynchronization.

        Synchronization id

        :param synchronization_id: The synchronization_id of this ShareSubscriptionSynchronization.
        :type synchronization_id: str
        """
        if synchronization_id is None:
            raise ValueError("Invalid value for `synchronization_id`, must not be `None`")

        self._synchronization_id = synchronization_id

    @property
    def synchronization_mode(self):
        """Gets the synchronization_mode of this ShareSubscriptionSynchronization.

        Synchronization Mode

        :return: The synchronization_mode of this ShareSubscriptionSynchronization.
        :rtype: str
        """
        return self._synchronization_mode

    @synchronization_mode.setter
    def synchronization_mode(self, synchronization_mode):
        """Sets the synchronization_mode of this ShareSubscriptionSynchronization.

        Synchronization Mode

        :param synchronization_mode: The synchronization_mode of this ShareSubscriptionSynchronization.
        :type synchronization_mode: str
        """
        allowed_values = ["Incremental", "FullSync"]  # noqa: E501
        if synchronization_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `synchronization_mode` ({0}), must be one of {1}"
                .format(synchronization_mode, allowed_values)
            )

        self._synchronization_mode = synchronization_mode
