# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ScheduledSynchronizationSettingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, provisioning_state: str=None, recurrence_interval: str=None, synchronization_time: datetime=None, user_name: str=None):
        """ScheduledSynchronizationSettingProperties - a model defined in OpenAPI

        :param created_at: The created_at of this ScheduledSynchronizationSettingProperties.
        :param provisioning_state: The provisioning_state of this ScheduledSynchronizationSettingProperties.
        :param recurrence_interval: The recurrence_interval of this ScheduledSynchronizationSettingProperties.
        :param synchronization_time: The synchronization_time of this ScheduledSynchronizationSettingProperties.
        :param user_name: The user_name of this ScheduledSynchronizationSettingProperties.
        """
        self.openapi_types = {
            'created_at': datetime,
            'provisioning_state': str,
            'recurrence_interval': str,
            'synchronization_time': datetime,
            'user_name': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'provisioning_state': 'provisioningState',
            'recurrence_interval': 'recurrenceInterval',
            'synchronization_time': 'synchronizationTime',
            'user_name': 'userName'
        }

        self._created_at = created_at
        self._provisioning_state = provisioning_state
        self._recurrence_interval = recurrence_interval
        self._synchronization_time = synchronization_time
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ScheduledSynchronizationSettingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ScheduledSynchronizationSettingProperties of this ScheduledSynchronizationSettingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ScheduledSynchronizationSettingProperties.

        Time at which the synchronization setting was created.

        :return: The created_at of this ScheduledSynchronizationSettingProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ScheduledSynchronizationSettingProperties.

        Time at which the synchronization setting was created.

        :param created_at: The created_at of this ScheduledSynchronizationSettingProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ScheduledSynchronizationSettingProperties.

        Gets or sets the provisioning state

        :return: The provisioning_state of this ScheduledSynchronizationSettingProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ScheduledSynchronizationSettingProperties.

        Gets or sets the provisioning state

        :param provisioning_state: The provisioning_state of this ScheduledSynchronizationSettingProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Creating", "Deleting", "Moving", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def recurrence_interval(self):
        """Gets the recurrence_interval of this ScheduledSynchronizationSettingProperties.

        Recurrence Interval

        :return: The recurrence_interval of this ScheduledSynchronizationSettingProperties.
        :rtype: str
        """
        return self._recurrence_interval

    @recurrence_interval.setter
    def recurrence_interval(self, recurrence_interval):
        """Sets the recurrence_interval of this ScheduledSynchronizationSettingProperties.

        Recurrence Interval

        :param recurrence_interval: The recurrence_interval of this ScheduledSynchronizationSettingProperties.
        :type recurrence_interval: str
        """
        allowed_values = ["Hour", "Day"]  # noqa: E501
        if recurrence_interval not in allowed_values:
            raise ValueError(
                "Invalid value for `recurrence_interval` ({0}), must be one of {1}"
                .format(recurrence_interval, allowed_values)
            )

        self._recurrence_interval = recurrence_interval

    @property
    def synchronization_time(self):
        """Gets the synchronization_time of this ScheduledSynchronizationSettingProperties.

        Synchronization time

        :return: The synchronization_time of this ScheduledSynchronizationSettingProperties.
        :rtype: datetime
        """
        return self._synchronization_time

    @synchronization_time.setter
    def synchronization_time(self, synchronization_time):
        """Sets the synchronization_time of this ScheduledSynchronizationSettingProperties.

        Synchronization time

        :param synchronization_time: The synchronization_time of this ScheduledSynchronizationSettingProperties.
        :type synchronization_time: datetime
        """
        if synchronization_time is None:
            raise ValueError("Invalid value for `synchronization_time`, must not be `None`")

        self._synchronization_time = synchronization_time

    @property
    def user_name(self):
        """Gets the user_name of this ScheduledSynchronizationSettingProperties.

        Name of the user who created the synchronization setting.

        :return: The user_name of this ScheduledSynchronizationSettingProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ScheduledSynchronizationSettingProperties.

        Name of the user who created the synchronization setting.

        :param user_name: The user_name of this ScheduledSynchronizationSettingProperties.
        :type user_name: str
        """

        self._user_name = user_name
