# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlobContainerProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, data_set_id: str=None, resource_group: str=None, storage_account_name: str=None, subscription_id: str=None):
        """BlobContainerProperties - a model defined in OpenAPI

        :param container_name: The container_name of this BlobContainerProperties.
        :param data_set_id: The data_set_id of this BlobContainerProperties.
        :param resource_group: The resource_group of this BlobContainerProperties.
        :param storage_account_name: The storage_account_name of this BlobContainerProperties.
        :param subscription_id: The subscription_id of this BlobContainerProperties.
        """
        self.openapi_types = {
            'container_name': str,
            'data_set_id': str,
            'resource_group': str,
            'storage_account_name': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'data_set_id': 'dataSetId',
            'resource_group': 'resourceGroup',
            'storage_account_name': 'storageAccountName',
            'subscription_id': 'subscriptionId'
        }

        self._container_name = container_name
        self._data_set_id = data_set_id
        self._resource_group = resource_group
        self._storage_account_name = storage_account_name
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlobContainerProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlobContainerProperties of this BlobContainerProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this BlobContainerProperties.

        BLOB Container name.

        :return: The container_name of this BlobContainerProperties.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this BlobContainerProperties.

        BLOB Container name.

        :param container_name: The container_name of this BlobContainerProperties.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def data_set_id(self):
        """Gets the data_set_id of this BlobContainerProperties.

        Unique id for identifying a data set resource

        :return: The data_set_id of this BlobContainerProperties.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this BlobContainerProperties.

        Unique id for identifying a data set resource

        :param data_set_id: The data_set_id of this BlobContainerProperties.
        :type data_set_id: str
        """

        self._data_set_id = data_set_id

    @property
    def resource_group(self):
        """Gets the resource_group of this BlobContainerProperties.

        Resource group of storage account

        :return: The resource_group of this BlobContainerProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this BlobContainerProperties.

        Resource group of storage account

        :param resource_group: The resource_group of this BlobContainerProperties.
        :type resource_group: str
        """
        if resource_group is None:
            raise ValueError("Invalid value for `resource_group`, must not be `None`")

        self._resource_group = resource_group

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this BlobContainerProperties.

        Storage account name of the source data set

        :return: The storage_account_name of this BlobContainerProperties.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this BlobContainerProperties.

        Storage account name of the source data set

        :param storage_account_name: The storage_account_name of this BlobContainerProperties.
        :type storage_account_name: str
        """
        if storage_account_name is None:
            raise ValueError("Invalid value for `storage_account_name`, must not be `None`")

        self._storage_account_name = storage_account_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this BlobContainerProperties.

        Subscription id of storage account

        :return: The subscription_id of this BlobContainerProperties.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this BlobContainerProperties.

        Subscription id of storage account

        :param subscription_id: The subscription_id of this BlobContainerProperties.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
