# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BlobMappingProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_name: str=None, data_set_id: str=None, data_set_mapping_status: str=None, file_path: str=None, output_type: str=None, provisioning_state: str=None, resource_group: str=None, storage_account_name: str=None, subscription_id: str=None):
        """BlobMappingProperties - a model defined in OpenAPI

        :param container_name: The container_name of this BlobMappingProperties.
        :param data_set_id: The data_set_id of this BlobMappingProperties.
        :param data_set_mapping_status: The data_set_mapping_status of this BlobMappingProperties.
        :param file_path: The file_path of this BlobMappingProperties.
        :param output_type: The output_type of this BlobMappingProperties.
        :param provisioning_state: The provisioning_state of this BlobMappingProperties.
        :param resource_group: The resource_group of this BlobMappingProperties.
        :param storage_account_name: The storage_account_name of this BlobMappingProperties.
        :param subscription_id: The subscription_id of this BlobMappingProperties.
        """
        self.openapi_types = {
            'container_name': str,
            'data_set_id': str,
            'data_set_mapping_status': str,
            'file_path': str,
            'output_type': str,
            'provisioning_state': str,
            'resource_group': str,
            'storage_account_name': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'container_name': 'containerName',
            'data_set_id': 'dataSetId',
            'data_set_mapping_status': 'dataSetMappingStatus',
            'file_path': 'filePath',
            'output_type': 'outputType',
            'provisioning_state': 'provisioningState',
            'resource_group': 'resourceGroup',
            'storage_account_name': 'storageAccountName',
            'subscription_id': 'subscriptionId'
        }

        self._container_name = container_name
        self._data_set_id = data_set_id
        self._data_set_mapping_status = data_set_mapping_status
        self._file_path = file_path
        self._output_type = output_type
        self._provisioning_state = provisioning_state
        self._resource_group = resource_group
        self._storage_account_name = storage_account_name
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BlobMappingProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BlobMappingProperties of this BlobMappingProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_name(self):
        """Gets the container_name of this BlobMappingProperties.

        Container that has the file path.

        :return: The container_name of this BlobMappingProperties.
        :rtype: str
        """
        return self._container_name

    @container_name.setter
    def container_name(self, container_name):
        """Sets the container_name of this BlobMappingProperties.

        Container that has the file path.

        :param container_name: The container_name of this BlobMappingProperties.
        :type container_name: str
        """
        if container_name is None:
            raise ValueError("Invalid value for `container_name`, must not be `None`")

        self._container_name = container_name

    @property
    def data_set_id(self):
        """Gets the data_set_id of this BlobMappingProperties.

        The id of the source data set.

        :return: The data_set_id of this BlobMappingProperties.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this BlobMappingProperties.

        The id of the source data set.

        :param data_set_id: The data_set_id of this BlobMappingProperties.
        :type data_set_id: str
        """
        if data_set_id is None:
            raise ValueError("Invalid value for `data_set_id`, must not be `None`")

        self._data_set_id = data_set_id

    @property
    def data_set_mapping_status(self):
        """Gets the data_set_mapping_status of this BlobMappingProperties.

        Gets the status of the data set mapping.

        :return: The data_set_mapping_status of this BlobMappingProperties.
        :rtype: str
        """
        return self._data_set_mapping_status

    @data_set_mapping_status.setter
    def data_set_mapping_status(self, data_set_mapping_status):
        """Sets the data_set_mapping_status of this BlobMappingProperties.

        Gets the status of the data set mapping.

        :param data_set_mapping_status: The data_set_mapping_status of this BlobMappingProperties.
        :type data_set_mapping_status: str
        """
        allowed_values = ["Ok", "Broken"]  # noqa: E501
        if data_set_mapping_status not in allowed_values:
            raise ValueError(
                "Invalid value for `data_set_mapping_status` ({0}), must be one of {1}"
                .format(data_set_mapping_status, allowed_values)
            )

        self._data_set_mapping_status = data_set_mapping_status

    @property
    def file_path(self):
        """Gets the file_path of this BlobMappingProperties.

        File path within the source data set

        :return: The file_path of this BlobMappingProperties.
        :rtype: str
        """
        return self._file_path

    @file_path.setter
    def file_path(self, file_path):
        """Sets the file_path of this BlobMappingProperties.

        File path within the source data set

        :param file_path: The file_path of this BlobMappingProperties.
        :type file_path: str
        """
        if file_path is None:
            raise ValueError("Invalid value for `file_path`, must not be `None`")

        self._file_path = file_path

    @property
    def output_type(self):
        """Gets the output_type of this BlobMappingProperties.

        File output type

        :return: The output_type of this BlobMappingProperties.
        :rtype: str
        """
        return self._output_type

    @output_type.setter
    def output_type(self, output_type):
        """Sets the output_type of this BlobMappingProperties.

        File output type

        :param output_type: The output_type of this BlobMappingProperties.
        :type output_type: str
        """
        allowed_values = ["Csv", "Parquet"]  # noqa: E501
        if output_type not in allowed_values:
            raise ValueError(
                "Invalid value for `output_type` ({0}), must be one of {1}"
                .format(output_type, allowed_values)
            )

        self._output_type = output_type

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this BlobMappingProperties.

        Provisioning state of the data set mapping.

        :return: The provisioning_state of this BlobMappingProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this BlobMappingProperties.

        Provisioning state of the data set mapping.

        :param provisioning_state: The provisioning_state of this BlobMappingProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Creating", "Deleting", "Moving", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def resource_group(self):
        """Gets the resource_group of this BlobMappingProperties.

        Resource group of storage account.

        :return: The resource_group of this BlobMappingProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this BlobMappingProperties.

        Resource group of storage account.

        :param resource_group: The resource_group of this BlobMappingProperties.
        :type resource_group: str
        """
        if resource_group is None:
            raise ValueError("Invalid value for `resource_group`, must not be `None`")

        self._resource_group = resource_group

    @property
    def storage_account_name(self):
        """Gets the storage_account_name of this BlobMappingProperties.

        Storage account name of the source data set.

        :return: The storage_account_name of this BlobMappingProperties.
        :rtype: str
        """
        return self._storage_account_name

    @storage_account_name.setter
    def storage_account_name(self, storage_account_name):
        """Sets the storage_account_name of this BlobMappingProperties.

        Storage account name of the source data set.

        :param storage_account_name: The storage_account_name of this BlobMappingProperties.
        :type storage_account_name: str
        """
        if storage_account_name is None:
            raise ValueError("Invalid value for `storage_account_name`, must not be `None`")

        self._storage_account_name = storage_account_name

    @property
    def subscription_id(self):
        """Gets the subscription_id of this BlobMappingProperties.

        Subscription id of storage account.

        :return: The subscription_id of this BlobMappingProperties.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this BlobMappingProperties.

        Subscription id of storage account.

        :param subscription_id: The subscription_id of this BlobMappingProperties.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
