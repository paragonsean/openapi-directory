# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ADLSGen1FileProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_name: str=None, data_set_id: str=None, file_name: str=None, folder_path: str=None, resource_group: str=None, subscription_id: str=None):
        """ADLSGen1FileProperties - a model defined in OpenAPI

        :param account_name: The account_name of this ADLSGen1FileProperties.
        :param data_set_id: The data_set_id of this ADLSGen1FileProperties.
        :param file_name: The file_name of this ADLSGen1FileProperties.
        :param folder_path: The folder_path of this ADLSGen1FileProperties.
        :param resource_group: The resource_group of this ADLSGen1FileProperties.
        :param subscription_id: The subscription_id of this ADLSGen1FileProperties.
        """
        self.openapi_types = {
            'account_name': str,
            'data_set_id': str,
            'file_name': str,
            'folder_path': str,
            'resource_group': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'account_name': 'accountName',
            'data_set_id': 'dataSetId',
            'file_name': 'fileName',
            'folder_path': 'folderPath',
            'resource_group': 'resourceGroup',
            'subscription_id': 'subscriptionId'
        }

        self._account_name = account_name
        self._data_set_id = data_set_id
        self._file_name = file_name
        self._folder_path = folder_path
        self._resource_group = resource_group
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ADLSGen1FileProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ADLSGen1FileProperties of this ADLSGen1FileProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_name(self):
        """Gets the account_name of this ADLSGen1FileProperties.

        The ADLS account name.

        :return: The account_name of this ADLSGen1FileProperties.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name):
        """Sets the account_name of this ADLSGen1FileProperties.

        The ADLS account name.

        :param account_name: The account_name of this ADLSGen1FileProperties.
        :type account_name: str
        """
        if account_name is None:
            raise ValueError("Invalid value for `account_name`, must not be `None`")

        self._account_name = account_name

    @property
    def data_set_id(self):
        """Gets the data_set_id of this ADLSGen1FileProperties.

        Unique id for identifying a data set resource

        :return: The data_set_id of this ADLSGen1FileProperties.
        :rtype: str
        """
        return self._data_set_id

    @data_set_id.setter
    def data_set_id(self, data_set_id):
        """Sets the data_set_id of this ADLSGen1FileProperties.

        Unique id for identifying a data set resource

        :param data_set_id: The data_set_id of this ADLSGen1FileProperties.
        :type data_set_id: str
        """

        self._data_set_id = data_set_id

    @property
    def file_name(self):
        """Gets the file_name of this ADLSGen1FileProperties.

        The file name in the ADLS account.

        :return: The file_name of this ADLSGen1FileProperties.
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ADLSGen1FileProperties.

        The file name in the ADLS account.

        :param file_name: The file_name of this ADLSGen1FileProperties.
        :type file_name: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")

        self._file_name = file_name

    @property
    def folder_path(self):
        """Gets the folder_path of this ADLSGen1FileProperties.

        The folder path within the ADLS account.

        :return: The folder_path of this ADLSGen1FileProperties.
        :rtype: str
        """
        return self._folder_path

    @folder_path.setter
    def folder_path(self, folder_path):
        """Sets the folder_path of this ADLSGen1FileProperties.

        The folder path within the ADLS account.

        :param folder_path: The folder_path of this ADLSGen1FileProperties.
        :type folder_path: str
        """
        if folder_path is None:
            raise ValueError("Invalid value for `folder_path`, must not be `None`")

        self._folder_path = folder_path

    @property
    def resource_group(self):
        """Gets the resource_group of this ADLSGen1FileProperties.

        Resource group of ADLS account.

        :return: The resource_group of this ADLSGen1FileProperties.
        :rtype: str
        """
        return self._resource_group

    @resource_group.setter
    def resource_group(self, resource_group):
        """Sets the resource_group of this ADLSGen1FileProperties.

        Resource group of ADLS account.

        :param resource_group: The resource_group of this ADLSGen1FileProperties.
        :type resource_group: str
        """
        if resource_group is None:
            raise ValueError("Invalid value for `resource_group`, must not be `None`")

        self._resource_group = resource_group

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ADLSGen1FileProperties.

        Subscription id of ADLS account.

        :return: The subscription_id of this ADLSGen1FileProperties.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ADLSGen1FileProperties.

        Subscription id of ADLS account.

        :param subscription_id: The subscription_id of this ADLSGen1FileProperties.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
