# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ShareProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: datetime=None, description: str=None, provisioning_state: str=None, share_kind: str=None, terms: str=None, user_email: str=None, user_name: str=None):
        """ShareProperties - a model defined in OpenAPI

        :param created_at: The created_at of this ShareProperties.
        :param description: The description of this ShareProperties.
        :param provisioning_state: The provisioning_state of this ShareProperties.
        :param share_kind: The share_kind of this ShareProperties.
        :param terms: The terms of this ShareProperties.
        :param user_email: The user_email of this ShareProperties.
        :param user_name: The user_name of this ShareProperties.
        """
        self.openapi_types = {
            'created_at': datetime,
            'description': str,
            'provisioning_state': str,
            'share_kind': str,
            'terms': str,
            'user_email': str,
            'user_name': str
        }

        self.attribute_map = {
            'created_at': 'createdAt',
            'description': 'description',
            'provisioning_state': 'provisioningState',
            'share_kind': 'shareKind',
            'terms': 'terms',
            'user_email': 'userEmail',
            'user_name': 'userName'
        }

        self._created_at = created_at
        self._description = description
        self._provisioning_state = provisioning_state
        self._share_kind = share_kind
        self._terms = terms
        self._user_email = user_email
        self._user_name = user_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShareProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShareProperties of this ShareProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this ShareProperties.

        Time at which the share was created.

        :return: The created_at of this ShareProperties.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ShareProperties.

        Time at which the share was created.

        :param created_at: The created_at of this ShareProperties.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self):
        """Gets the description of this ShareProperties.

        Share description.

        :return: The description of this ShareProperties.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ShareProperties.

        Share description.

        :param description: The description of this ShareProperties.
        :type description: str
        """

        self._description = description

    @property
    def provisioning_state(self):
        """Gets the provisioning_state of this ShareProperties.

        Gets or sets the provisioning state

        :return: The provisioning_state of this ShareProperties.
        :rtype: str
        """
        return self._provisioning_state

    @provisioning_state.setter
    def provisioning_state(self, provisioning_state):
        """Sets the provisioning_state of this ShareProperties.

        Gets or sets the provisioning state

        :param provisioning_state: The provisioning_state of this ShareProperties.
        :type provisioning_state: str
        """
        allowed_values = ["Succeeded", "Creating", "Deleting", "Moving", "Failed"]  # noqa: E501
        if provisioning_state not in allowed_values:
            raise ValueError(
                "Invalid value for `provisioning_state` ({0}), must be one of {1}"
                .format(provisioning_state, allowed_values)
            )

        self._provisioning_state = provisioning_state

    @property
    def share_kind(self):
        """Gets the share_kind of this ShareProperties.

        Share kind.

        :return: The share_kind of this ShareProperties.
        :rtype: str
        """
        return self._share_kind

    @share_kind.setter
    def share_kind(self, share_kind):
        """Sets the share_kind of this ShareProperties.

        Share kind.

        :param share_kind: The share_kind of this ShareProperties.
        :type share_kind: str
        """
        allowed_values = ["CopyBased", "InPlace"]  # noqa: E501
        if share_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `share_kind` ({0}), must be one of {1}"
                .format(share_kind, allowed_values)
            )

        self._share_kind = share_kind

    @property
    def terms(self):
        """Gets the terms of this ShareProperties.

        Share terms.

        :return: The terms of this ShareProperties.
        :rtype: str
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ShareProperties.

        Share terms.

        :param terms: The terms of this ShareProperties.
        :type terms: str
        """

        self._terms = terms

    @property
    def user_email(self):
        """Gets the user_email of this ShareProperties.

        Email of the user who created the resource

        :return: The user_email of this ShareProperties.
        :rtype: str
        """
        return self._user_email

    @user_email.setter
    def user_email(self, user_email):
        """Sets the user_email of this ShareProperties.

        Email of the user who created the resource

        :param user_email: The user_email of this ShareProperties.
        :type user_email: str
        """

        self._user_email = user_email

    @property
    def user_name(self):
        """Gets the user_name of this ShareProperties.

        Name of the user who created the resource

        :return: The user_name of this ShareProperties.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this ShareProperties.

        Name of the user who created the resource

        :param user_name: The user_name of this ShareProperties.
        :type user_name: str
        """

        self._user_name = user_name
