# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuggestParametersPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, fuzzy: bool=None, highlight_post_tag: str=None, highlight_pre_tag: str=None, minimum_coverage: float=None, orderby: str=None, search: str=None, search_fields: str=None, select: str=None, suggester_name: str=None, top: int=None):
        """SuggestParametersPayload - a model defined in OpenAPI

        :param filter: The filter of this SuggestParametersPayload.
        :param fuzzy: The fuzzy of this SuggestParametersPayload.
        :param highlight_post_tag: The highlight_post_tag of this SuggestParametersPayload.
        :param highlight_pre_tag: The highlight_pre_tag of this SuggestParametersPayload.
        :param minimum_coverage: The minimum_coverage of this SuggestParametersPayload.
        :param orderby: The orderby of this SuggestParametersPayload.
        :param search: The search of this SuggestParametersPayload.
        :param search_fields: The search_fields of this SuggestParametersPayload.
        :param select: The select of this SuggestParametersPayload.
        :param suggester_name: The suggester_name of this SuggestParametersPayload.
        :param top: The top of this SuggestParametersPayload.
        """
        self.openapi_types = {
            'filter': str,
            'fuzzy': bool,
            'highlight_post_tag': str,
            'highlight_pre_tag': str,
            'minimum_coverage': float,
            'orderby': str,
            'search': str,
            'search_fields': str,
            'select': str,
            'suggester_name': str,
            'top': int
        }

        self.attribute_map = {
            'filter': 'filter',
            'fuzzy': 'fuzzy',
            'highlight_post_tag': 'highlightPostTag',
            'highlight_pre_tag': 'highlightPreTag',
            'minimum_coverage': 'minimumCoverage',
            'orderby': 'orderby',
            'search': 'search',
            'search_fields': 'searchFields',
            'select': 'select',
            'suggester_name': 'suggesterName',
            'top': 'top'
        }

        self._filter = filter
        self._fuzzy = fuzzy
        self._highlight_post_tag = highlight_post_tag
        self._highlight_pre_tag = highlight_pre_tag
        self._minimum_coverage = minimum_coverage
        self._orderby = orderby
        self._search = search
        self._search_fields = search_fields
        self._select = select
        self._suggester_name = suggester_name
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestParametersPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestParametersPayload of this SuggestParametersPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this SuggestParametersPayload.

        The OData $filter expression to apply to the suggestions query.

        :return: The filter of this SuggestParametersPayload.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SuggestParametersPayload.

        The OData $filter expression to apply to the suggestions query.

        :param filter: The filter of this SuggestParametersPayload.
        :type filter: str
        """

        self._filter = filter

    @property
    def fuzzy(self):
        """Gets the fuzzy of this SuggestParametersPayload.

        A value indicating whether to use fuzzy matching for the suggestion query. Default is false. when set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.

        :return: The fuzzy of this SuggestParametersPayload.
        :rtype: bool
        """
        return self._fuzzy

    @fuzzy.setter
    def fuzzy(self, fuzzy):
        """Sets the fuzzy of this SuggestParametersPayload.

        A value indicating whether to use fuzzy matching for the suggestion query. Default is false. when set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.

        :param fuzzy: The fuzzy of this SuggestParametersPayload.
        :type fuzzy: bool
        """

        self._fuzzy = fuzzy

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this SuggestParametersPayload.

        A string tag that is appended to hit highlights. Must be set with HighlightPreTag. If omitted, hit highlighting of suggestions is disabled.

        :return: The highlight_post_tag of this SuggestParametersPayload.
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this SuggestParametersPayload.

        A string tag that is appended to hit highlights. Must be set with HighlightPreTag. If omitted, hit highlighting of suggestions is disabled.

        :param highlight_post_tag: The highlight_post_tag of this SuggestParametersPayload.
        :type highlight_post_tag: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this SuggestParametersPayload.

        A string tag that is prepended to hit highlights. Must be set with HighlightPostTag. If omitted, hit highlighting of suggestions is disabled.

        :return: The highlight_pre_tag of this SuggestParametersPayload.
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this SuggestParametersPayload.

        A string tag that is prepended to hit highlights. Must be set with HighlightPostTag. If omitted, hit highlighting of suggestions is disabled.

        :param highlight_pre_tag: The highlight_pre_tag of this SuggestParametersPayload.
        :type highlight_pre_tag: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def minimum_coverage(self):
        """Gets the minimum_coverage of this SuggestParametersPayload.

        A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.

        :return: The minimum_coverage of this SuggestParametersPayload.
        :rtype: float
        """
        return self._minimum_coverage

    @minimum_coverage.setter
    def minimum_coverage(self, minimum_coverage):
        """Sets the minimum_coverage of this SuggestParametersPayload.

        A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.

        :param minimum_coverage: The minimum_coverage of this SuggestParametersPayload.
        :type minimum_coverage: float
        """

        self._minimum_coverage = minimum_coverage

    @property
    def orderby(self):
        """Gets the orderby of this SuggestParametersPayload.

        The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :return: The orderby of this SuggestParametersPayload.
        :rtype: str
        """
        return self._orderby

    @orderby.setter
    def orderby(self, orderby):
        """Sets the orderby of this SuggestParametersPayload.

        The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :param orderby: The orderby of this SuggestParametersPayload.
        :type orderby: str
        """

        self._orderby = orderby

    @property
    def search(self):
        """Gets the search of this SuggestParametersPayload.

        The search text on which to base suggestions.

        :return: The search of this SuggestParametersPayload.
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this SuggestParametersPayload.

        The search text on which to base suggestions.

        :param search: The search of this SuggestParametersPayload.
        :type search: str
        """

        self._search = search

    @property
    def search_fields(self):
        """Gets the search_fields of this SuggestParametersPayload.

        The comma-separated list of field names to consider when querying for suggestions.

        :return: The search_fields of this SuggestParametersPayload.
        :rtype: str
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this SuggestParametersPayload.

        The comma-separated list of field names to consider when querying for suggestions.

        :param search_fields: The search_fields of this SuggestParametersPayload.
        :type search_fields: str
        """

        self._search_fields = search_fields

    @property
    def select(self):
        """Gets the select of this SuggestParametersPayload.

        The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :return: The select of this SuggestParametersPayload.
        :rtype: str
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this SuggestParametersPayload.

        The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :param select: The select of this SuggestParametersPayload.
        :type select: str
        """

        self._select = select

    @property
    def suggester_name(self):
        """Gets the suggester_name of this SuggestParametersPayload.

        The name of the suggester as specified in the suggesters collection that's part of the index definition.

        :return: The suggester_name of this SuggestParametersPayload.
        :rtype: str
        """
        return self._suggester_name

    @suggester_name.setter
    def suggester_name(self, suggester_name):
        """Sets the suggester_name of this SuggestParametersPayload.

        The name of the suggester as specified in the suggesters collection that's part of the index definition.

        :param suggester_name: The suggester_name of this SuggestParametersPayload.
        :type suggester_name: str
        """

        self._suggester_name = suggester_name

    @property
    def top(self):
        """Gets the top of this SuggestParametersPayload.

        The number of suggestions to retrieve. This must be a value between 1 and 100. The default is to 5.

        :return: The top of this SuggestParametersPayload.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this SuggestParametersPayload.

        The number of suggestions to retrieve. This must be a value between 1 and 100. The default is to 5.

        :param top: The top of this SuggestParametersPayload.
        :type top: int
        """

        self._top = top
