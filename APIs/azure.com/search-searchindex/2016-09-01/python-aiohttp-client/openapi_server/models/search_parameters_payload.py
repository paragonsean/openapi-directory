# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_type import QueryType
from openapi_server.models.search_mode import SearchMode
from openapi_server import util


class SearchParametersPayload(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: bool=None, facets: List[str]=None, filter: str=None, highlight: str=None, highlight_post_tag: str=None, highlight_pre_tag: str=None, minimum_coverage: float=None, orderby: str=None, query_type: QueryType=None, scoring_parameters: List[str]=None, scoring_profile: str=None, search: str=None, search_fields: str=None, search_mode: SearchMode=None, select: str=None, skip: int=None, top: int=None):
        """SearchParametersPayload - a model defined in OpenAPI

        :param count: The count of this SearchParametersPayload.
        :param facets: The facets of this SearchParametersPayload.
        :param filter: The filter of this SearchParametersPayload.
        :param highlight: The highlight of this SearchParametersPayload.
        :param highlight_post_tag: The highlight_post_tag of this SearchParametersPayload.
        :param highlight_pre_tag: The highlight_pre_tag of this SearchParametersPayload.
        :param minimum_coverage: The minimum_coverage of this SearchParametersPayload.
        :param orderby: The orderby of this SearchParametersPayload.
        :param query_type: The query_type of this SearchParametersPayload.
        :param scoring_parameters: The scoring_parameters of this SearchParametersPayload.
        :param scoring_profile: The scoring_profile of this SearchParametersPayload.
        :param search: The search of this SearchParametersPayload.
        :param search_fields: The search_fields of this SearchParametersPayload.
        :param search_mode: The search_mode of this SearchParametersPayload.
        :param select: The select of this SearchParametersPayload.
        :param skip: The skip of this SearchParametersPayload.
        :param top: The top of this SearchParametersPayload.
        """
        self.openapi_types = {
            'count': bool,
            'facets': List[str],
            'filter': str,
            'highlight': str,
            'highlight_post_tag': str,
            'highlight_pre_tag': str,
            'minimum_coverage': float,
            'orderby': str,
            'query_type': QueryType,
            'scoring_parameters': List[str],
            'scoring_profile': str,
            'search': str,
            'search_fields': str,
            'search_mode': SearchMode,
            'select': str,
            'skip': int,
            'top': int
        }

        self.attribute_map = {
            'count': 'count',
            'facets': 'facets',
            'filter': 'filter',
            'highlight': 'highlight',
            'highlight_post_tag': 'highlightPostTag',
            'highlight_pre_tag': 'highlightPreTag',
            'minimum_coverage': 'minimumCoverage',
            'orderby': 'orderby',
            'query_type': 'queryType',
            'scoring_parameters': 'scoringParameters',
            'scoring_profile': 'scoringProfile',
            'search': 'search',
            'search_fields': 'searchFields',
            'search_mode': 'searchMode',
            'select': 'select',
            'skip': 'skip',
            'top': 'top'
        }

        self._count = count
        self._facets = facets
        self._filter = filter
        self._highlight = highlight
        self._highlight_post_tag = highlight_post_tag
        self._highlight_pre_tag = highlight_pre_tag
        self._minimum_coverage = minimum_coverage
        self._orderby = orderby
        self._query_type = query_type
        self._scoring_parameters = scoring_parameters
        self._scoring_profile = scoring_profile
        self._search = search
        self._search_fields = search_fields
        self._search_mode = search_mode
        self._select = select
        self._skip = skip
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchParametersPayload':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchParametersPayload of this SearchParametersPayload.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this SearchParametersPayload.

        A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.

        :return: The count of this SearchParametersPayload.
        :rtype: bool
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SearchParametersPayload.

        A value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.

        :param count: The count of this SearchParametersPayload.
        :type count: bool
        """

        self._count = count

    @property
    def facets(self):
        """Gets the facets of this SearchParametersPayload.

        The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.

        :return: The facets of this SearchParametersPayload.
        :rtype: List[str]
        """
        return self._facets

    @facets.setter
    def facets(self, facets):
        """Sets the facets of this SearchParametersPayload.

        The list of facet expressions to apply to the search query. Each facet expression contains a field name, optionally followed by a comma-separated list of name:value pairs.

        :param facets: The facets of this SearchParametersPayload.
        :type facets: List[str]
        """

        self._facets = facets

    @property
    def filter(self):
        """Gets the filter of this SearchParametersPayload.

        The OData $filter expression to apply to the search query.

        :return: The filter of this SearchParametersPayload.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SearchParametersPayload.

        The OData $filter expression to apply to the search query.

        :param filter: The filter of this SearchParametersPayload.
        :type filter: str
        """

        self._filter = filter

    @property
    def highlight(self):
        """Gets the highlight of this SearchParametersPayload.

        The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.

        :return: The highlight of this SearchParametersPayload.
        :rtype: str
        """
        return self._highlight

    @highlight.setter
    def highlight(self, highlight):
        """Sets the highlight of this SearchParametersPayload.

        The comma-separated list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.

        :param highlight: The highlight of this SearchParametersPayload.
        :type highlight: str
        """

        self._highlight = highlight

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this SearchParametersPayload.

        A string tag that is appended to hit highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.

        :return: The highlight_post_tag of this SearchParametersPayload.
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this SearchParametersPayload.

        A string tag that is appended to hit highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.

        :param highlight_post_tag: The highlight_post_tag of this SearchParametersPayload.
        :type highlight_post_tag: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this SearchParametersPayload.

        A string tag that is prepended to hit highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.

        :return: The highlight_pre_tag of this SearchParametersPayload.
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this SearchParametersPayload.

        A string tag that is prepended to hit highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.

        :param highlight_pre_tag: The highlight_pre_tag of this SearchParametersPayload.
        :type highlight_pre_tag: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def minimum_coverage(self):
        """Gets the minimum_coverage of this SearchParametersPayload.

        A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.

        :return: The minimum_coverage of this SearchParametersPayload.
        :rtype: float
        """
        return self._minimum_coverage

    @minimum_coverage.setter
    def minimum_coverage(self, minimum_coverage):
        """Sets the minimum_coverage of this SearchParametersPayload.

        A number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.

        :param minimum_coverage: The minimum_coverage of this SearchParametersPayload.
        :type minimum_coverage: float
        """

        self._minimum_coverage = minimum_coverage

    @property
    def orderby(self):
        """Gets the orderby of this SearchParametersPayload.

        The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :return: The orderby of this SearchParametersPayload.
        :rtype: str
        """
        return self._orderby

    @orderby.setter
    def orderby(self, orderby):
        """Sets the orderby of this SearchParametersPayload.

        The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :param orderby: The orderby of this SearchParametersPayload.
        :type orderby: str
        """

        self._orderby = orderby

    @property
    def query_type(self):
        """Gets the query_type of this SearchParametersPayload.


        :return: The query_type of this SearchParametersPayload.
        :rtype: QueryType
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this SearchParametersPayload.


        :param query_type: The query_type of this SearchParametersPayload.
        :type query_type: QueryType
        """

        self._query_type = query_type

    @property
    def scoring_parameters(self):
        """Gets the scoring_parameters of this SearchParametersPayload.

        The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name:value. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation:-122.2,44.8\"(without the quotes).

        :return: The scoring_parameters of this SearchParametersPayload.
        :rtype: List[str]
        """
        return self._scoring_parameters

    @scoring_parameters.setter
    def scoring_parameters(self, scoring_parameters):
        """Sets the scoring_parameters of this SearchParametersPayload.

        The list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name:value. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation:-122.2,44.8\"(without the quotes).

        :param scoring_parameters: The scoring_parameters of this SearchParametersPayload.
        :type scoring_parameters: List[str]
        """

        self._scoring_parameters = scoring_parameters

    @property
    def scoring_profile(self):
        """Gets the scoring_profile of this SearchParametersPayload.

        The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.

        :return: The scoring_profile of this SearchParametersPayload.
        :rtype: str
        """
        return self._scoring_profile

    @scoring_profile.setter
    def scoring_profile(self, scoring_profile):
        """Sets the scoring_profile of this SearchParametersPayload.

        The name of a scoring profile to evaluate match scores for matching documents in order to sort the results.

        :param scoring_profile: The scoring_profile of this SearchParametersPayload.
        :type scoring_profile: str
        """

        self._scoring_profile = scoring_profile

    @property
    def search(self):
        """Gets the search of this SearchParametersPayload.

        A full-text search query expression; Use null or \"*\" to match all documents.

        :return: The search of this SearchParametersPayload.
        :rtype: str
        """
        return self._search

    @search.setter
    def search(self, search):
        """Sets the search of this SearchParametersPayload.

        A full-text search query expression; Use null or \"*\" to match all documents.

        :param search: The search of this SearchParametersPayload.
        :type search: str
        """

        self._search = search

    @property
    def search_fields(self):
        """Gets the search_fields of this SearchParametersPayload.

        The comma-separated list of field names to include in the full-text search.

        :return: The search_fields of this SearchParametersPayload.
        :rtype: str
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this SearchParametersPayload.

        The comma-separated list of field names to include in the full-text search.

        :param search_fields: The search_fields of this SearchParametersPayload.
        :type search_fields: str
        """

        self._search_fields = search_fields

    @property
    def search_mode(self):
        """Gets the search_mode of this SearchParametersPayload.


        :return: The search_mode of this SearchParametersPayload.
        :rtype: SearchMode
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this SearchParametersPayload.


        :param search_mode: The search_mode of this SearchParametersPayload.
        :type search_mode: SearchMode
        """

        self._search_mode = search_mode

    @property
    def select(self):
        """Gets the select of this SearchParametersPayload.

        The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :return: The select of this SearchParametersPayload.
        :rtype: str
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this SearchParametersPayload.

        The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :param select: The select of this SearchParametersPayload.
        :type select: str
        """

        self._select = select

    @property
    def skip(self):
        """Gets the skip of this SearchParametersPayload.

        The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use Skip due to this limitation, consider using OrderBy on a totally-ordered key and Filter with a range query instead.

        :return: The skip of this SearchParametersPayload.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this SearchParametersPayload.

        The number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use Skip due to this limitation, consider using OrderBy on a totally-ordered key and Filter with a range query instead.

        :param skip: The skip of this SearchParametersPayload.
        :type skip: int
        """

        self._skip = skip

    @property
    def top(self):
        """Gets the top of this SearchParametersPayload.

        The number of search results to retrieve. This can be used in conjunction with Skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be passed to ContinueSearch to retrieve the next page of results. See DocumentSearchResponse.ContinuationToken for more information.

        :return: The top of this SearchParametersPayload.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this SearchParametersPayload.

        The number of search results to retrieve. This can be used in conjunction with Skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be passed to ContinueSearch to retrieve the next page of results. See DocumentSearchResponse.ContinuationToken for more information.

        :param top: The top of this SearchParametersPayload.
        :type top: int
        """

        self._top = top
