# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class IndexingResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error_message: str=None, key: str=None, status: bool=None, status_code: int=None):
        """IndexingResult - a model defined in OpenAPI

        :param error_message: The error_message of this IndexingResult.
        :param key: The key of this IndexingResult.
        :param status: The status of this IndexingResult.
        :param status_code: The status_code of this IndexingResult.
        """
        self.openapi_types = {
            'error_message': str,
            'key': str,
            'status': bool,
            'status_code': int
        }

        self.attribute_map = {
            'error_message': 'errorMessage',
            'key': 'key',
            'status': 'status',
            'status_code': 'statusCode'
        }

        self._error_message = error_message
        self._key = key
        self._status = status
        self._status_code = status_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'IndexingResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The IndexingResult of this IndexingResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error_message(self):
        """Gets the error_message of this IndexingResult.

        The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.

        :return: The error_message of this IndexingResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this IndexingResult.

        The error message explaining why the indexing operation failed for the document identified by the key; null if indexing succeeded.

        :param error_message: The error_message of this IndexingResult.
        :type error_message: str
        """

        self._error_message = error_message

    @property
    def key(self):
        """Gets the key of this IndexingResult.

        The key of a document that was in the indexing request.

        :return: The key of this IndexingResult.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this IndexingResult.

        The key of a document that was in the indexing request.

        :param key: The key of this IndexingResult.
        :type key: str
        """

        self._key = key

    @property
    def status(self):
        """Gets the status of this IndexingResult.

        A value indicating whether the indexing operation succeeded for the document identified by the key.

        :return: The status of this IndexingResult.
        :rtype: bool
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this IndexingResult.

        A value indicating whether the indexing operation succeeded for the document identified by the key.

        :param status: The status of this IndexingResult.
        :type status: bool
        """

        self._status = status

    @property
    def status_code(self):
        """Gets the status_code of this IndexingResult.

        The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.

        :return: The status_code of this IndexingResult.
        :rtype: int
        """
        return self._status_code

    @status_code.setter
    def status_code(self, status_code):
        """Sets the status_code of this IndexingResult.

        The status code of the indexing operation. Possible values include: 200 for a successful update or delete, 201 for successful document creation, 400 for a malformed input document, 404 for document not found, 409 for a version conflict, 422 when the index is temporarily unavailable, or 503 for when the service is too busy.

        :param status_code: The status_code of this IndexingResult.
        :type status_code: int
        """

        self._status_code = status_code
