/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2016-09-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SuggestParametersPayload model module.
 * @module model/SuggestParametersPayload
 * @version 2016-09-01
 */
class SuggestParametersPayload {
    /**
     * Constructs a new <code>SuggestParametersPayload</code>.
     * Parameters for filtering, sorting, fuzzy matching, and other suggestions query behaviors.
     * @alias module:model/SuggestParametersPayload
     */
    constructor() { 
        
        SuggestParametersPayload.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SuggestParametersPayload</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SuggestParametersPayload} obj Optional instance to populate.
     * @return {module:model/SuggestParametersPayload} The populated <code>SuggestParametersPayload</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SuggestParametersPayload();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('fuzzy')) {
                obj['fuzzy'] = ApiClient.convertToType(data['fuzzy'], 'Boolean');
            }
            if (data.hasOwnProperty('highlightPostTag')) {
                obj['highlightPostTag'] = ApiClient.convertToType(data['highlightPostTag'], 'String');
            }
            if (data.hasOwnProperty('highlightPreTag')) {
                obj['highlightPreTag'] = ApiClient.convertToType(data['highlightPreTag'], 'String');
            }
            if (data.hasOwnProperty('minimumCoverage')) {
                obj['minimumCoverage'] = ApiClient.convertToType(data['minimumCoverage'], 'Number');
            }
            if (data.hasOwnProperty('orderby')) {
                obj['orderby'] = ApiClient.convertToType(data['orderby'], 'String');
            }
            if (data.hasOwnProperty('search')) {
                obj['search'] = ApiClient.convertToType(data['search'], 'String');
            }
            if (data.hasOwnProperty('searchFields')) {
                obj['searchFields'] = ApiClient.convertToType(data['searchFields'], 'String');
            }
            if (data.hasOwnProperty('select')) {
                obj['select'] = ApiClient.convertToType(data['select'], 'String');
            }
            if (data.hasOwnProperty('suggesterName')) {
                obj['suggesterName'] = ApiClient.convertToType(data['suggesterName'], 'String');
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SuggestParametersPayload</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SuggestParametersPayload</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is a string
        if (data['highlightPostTag'] && !(typeof data['highlightPostTag'] === 'string' || data['highlightPostTag'] instanceof String)) {
            throw new Error("Expected the field `highlightPostTag` to be a primitive type in the JSON string but got " + data['highlightPostTag']);
        }
        // ensure the json data is a string
        if (data['highlightPreTag'] && !(typeof data['highlightPreTag'] === 'string' || data['highlightPreTag'] instanceof String)) {
            throw new Error("Expected the field `highlightPreTag` to be a primitive type in the JSON string but got " + data['highlightPreTag']);
        }
        // ensure the json data is a string
        if (data['orderby'] && !(typeof data['orderby'] === 'string' || data['orderby'] instanceof String)) {
            throw new Error("Expected the field `orderby` to be a primitive type in the JSON string but got " + data['orderby']);
        }
        // ensure the json data is a string
        if (data['search'] && !(typeof data['search'] === 'string' || data['search'] instanceof String)) {
            throw new Error("Expected the field `search` to be a primitive type in the JSON string but got " + data['search']);
        }
        // ensure the json data is a string
        if (data['searchFields'] && !(typeof data['searchFields'] === 'string' || data['searchFields'] instanceof String)) {
            throw new Error("Expected the field `searchFields` to be a primitive type in the JSON string but got " + data['searchFields']);
        }
        // ensure the json data is a string
        if (data['select'] && !(typeof data['select'] === 'string' || data['select'] instanceof String)) {
            throw new Error("Expected the field `select` to be a primitive type in the JSON string but got " + data['select']);
        }
        // ensure the json data is a string
        if (data['suggesterName'] && !(typeof data['suggesterName'] === 'string' || data['suggesterName'] instanceof String)) {
            throw new Error("Expected the field `suggesterName` to be a primitive type in the JSON string but got " + data['suggesterName']);
        }

        return true;
    }


}



/**
 * The OData $filter expression to apply to the suggestions query.
 * @member {String} filter
 */
SuggestParametersPayload.prototype['filter'] = undefined;

/**
 * A value indicating whether to use fuzzy matching for the suggestion query. Default is false. when set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.
 * @member {Boolean} fuzzy
 */
SuggestParametersPayload.prototype['fuzzy'] = undefined;

/**
 * A string tag that is appended to hit highlights. Must be set with HighlightPreTag. If omitted, hit highlighting of suggestions is disabled.
 * @member {String} highlightPostTag
 */
SuggestParametersPayload.prototype['highlightPostTag'] = undefined;

/**
 * A string tag that is prepended to hit highlights. Must be set with HighlightPostTag. If omitted, hit highlighting of suggestions is disabled.
 * @member {String} highlightPreTag
 */
SuggestParametersPayload.prototype['highlightPreTag'] = undefined;

/**
 * A number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.
 * @member {Number} minimumCoverage
 */
SuggestParametersPayload.prototype['minimumCoverage'] = undefined;

/**
 * The comma-separated list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.
 * @member {String} orderby
 */
SuggestParametersPayload.prototype['orderby'] = undefined;

/**
 * The search text on which to base suggestions.
 * @member {String} search
 */
SuggestParametersPayload.prototype['search'] = undefined;

/**
 * The comma-separated list of field names to consider when querying for suggestions.
 * @member {String} searchFields
 */
SuggestParametersPayload.prototype['searchFields'] = undefined;

/**
 * The comma-separated list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
 * @member {String} select
 */
SuggestParametersPayload.prototype['select'] = undefined;

/**
 * The name of the suggester as specified in the suggesters collection that's part of the index definition.
 * @member {String} suggesterName
 */
SuggestParametersPayload.prototype['suggesterName'] = undefined;

/**
 * The number of suggestions to retrieve. This must be a value between 1 and 100. The default is to 5.
 * @member {Number} top
 */
SuggestParametersPayload.prototype['top'] = undefined;






export default SuggestParametersPayload;

