/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchParametersPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchParametersPayload::OAISearchParametersPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchParametersPayload::OAISearchParametersPayload() {
    this->initializeModel();
}

OAISearchParametersPayload::~OAISearchParametersPayload() {}

void OAISearchParametersPayload::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_facets_isSet = false;
    m_facets_isValid = false;

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_highlight_isSet = false;
    m_highlight_isValid = false;

    m_highlight_post_tag_isSet = false;
    m_highlight_post_tag_isValid = false;

    m_highlight_pre_tag_isSet = false;
    m_highlight_pre_tag_isValid = false;

    m_minimum_coverage_isSet = false;
    m_minimum_coverage_isValid = false;

    m_orderby_isSet = false;
    m_orderby_isValid = false;

    m_query_type_isSet = false;
    m_query_type_isValid = false;

    m_scoring_parameters_isSet = false;
    m_scoring_parameters_isValid = false;

    m_scoring_profile_isSet = false;
    m_scoring_profile_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_search_fields_isSet = false;
    m_search_fields_isValid = false;

    m_search_mode_isSet = false;
    m_search_mode_isValid = false;

    m_select_isSet = false;
    m_select_isValid = false;

    m_skip_isSet = false;
    m_skip_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAISearchParametersPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchParametersPayload::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_facets_isValid = ::OpenAPI::fromJsonValue(m_facets, json[QString("facets")]);
    m_facets_isSet = !json[QString("facets")].isNull() && m_facets_isValid;

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_highlight_isValid = ::OpenAPI::fromJsonValue(m_highlight, json[QString("highlight")]);
    m_highlight_isSet = !json[QString("highlight")].isNull() && m_highlight_isValid;

    m_highlight_post_tag_isValid = ::OpenAPI::fromJsonValue(m_highlight_post_tag, json[QString("highlightPostTag")]);
    m_highlight_post_tag_isSet = !json[QString("highlightPostTag")].isNull() && m_highlight_post_tag_isValid;

    m_highlight_pre_tag_isValid = ::OpenAPI::fromJsonValue(m_highlight_pre_tag, json[QString("highlightPreTag")]);
    m_highlight_pre_tag_isSet = !json[QString("highlightPreTag")].isNull() && m_highlight_pre_tag_isValid;

    m_minimum_coverage_isValid = ::OpenAPI::fromJsonValue(m_minimum_coverage, json[QString("minimumCoverage")]);
    m_minimum_coverage_isSet = !json[QString("minimumCoverage")].isNull() && m_minimum_coverage_isValid;

    m_orderby_isValid = ::OpenAPI::fromJsonValue(m_orderby, json[QString("orderby")]);
    m_orderby_isSet = !json[QString("orderby")].isNull() && m_orderby_isValid;

    m_query_type_isValid = ::OpenAPI::fromJsonValue(m_query_type, json[QString("queryType")]);
    m_query_type_isSet = !json[QString("queryType")].isNull() && m_query_type_isValid;

    m_scoring_parameters_isValid = ::OpenAPI::fromJsonValue(m_scoring_parameters, json[QString("scoringParameters")]);
    m_scoring_parameters_isSet = !json[QString("scoringParameters")].isNull() && m_scoring_parameters_isValid;

    m_scoring_profile_isValid = ::OpenAPI::fromJsonValue(m_scoring_profile, json[QString("scoringProfile")]);
    m_scoring_profile_isSet = !json[QString("scoringProfile")].isNull() && m_scoring_profile_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_search_fields_isValid = ::OpenAPI::fromJsonValue(m_search_fields, json[QString("searchFields")]);
    m_search_fields_isSet = !json[QString("searchFields")].isNull() && m_search_fields_isValid;

    m_search_mode_isValid = ::OpenAPI::fromJsonValue(m_search_mode, json[QString("searchMode")]);
    m_search_mode_isSet = !json[QString("searchMode")].isNull() && m_search_mode_isValid;

    m_select_isValid = ::OpenAPI::fromJsonValue(m_select, json[QString("select")]);
    m_select_isSet = !json[QString("select")].isNull() && m_select_isValid;

    m_skip_isValid = ::OpenAPI::fromJsonValue(m_skip, json[QString("skip")]);
    m_skip_isSet = !json[QString("skip")].isNull() && m_skip_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;
}

QString OAISearchParametersPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchParametersPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_facets.size() > 0) {
        obj.insert(QString("facets"), ::OpenAPI::toJsonValue(m_facets));
    }
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_highlight_isSet) {
        obj.insert(QString("highlight"), ::OpenAPI::toJsonValue(m_highlight));
    }
    if (m_highlight_post_tag_isSet) {
        obj.insert(QString("highlightPostTag"), ::OpenAPI::toJsonValue(m_highlight_post_tag));
    }
    if (m_highlight_pre_tag_isSet) {
        obj.insert(QString("highlightPreTag"), ::OpenAPI::toJsonValue(m_highlight_pre_tag));
    }
    if (m_minimum_coverage_isSet) {
        obj.insert(QString("minimumCoverage"), ::OpenAPI::toJsonValue(m_minimum_coverage));
    }
    if (m_orderby_isSet) {
        obj.insert(QString("orderby"), ::OpenAPI::toJsonValue(m_orderby));
    }
    if (m_query_type.isSet()) {
        obj.insert(QString("queryType"), ::OpenAPI::toJsonValue(m_query_type));
    }
    if (m_scoring_parameters.size() > 0) {
        obj.insert(QString("scoringParameters"), ::OpenAPI::toJsonValue(m_scoring_parameters));
    }
    if (m_scoring_profile_isSet) {
        obj.insert(QString("scoringProfile"), ::OpenAPI::toJsonValue(m_scoring_profile));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_search_fields_isSet) {
        obj.insert(QString("searchFields"), ::OpenAPI::toJsonValue(m_search_fields));
    }
    if (m_search_mode.isSet()) {
        obj.insert(QString("searchMode"), ::OpenAPI::toJsonValue(m_search_mode));
    }
    if (m_select_isSet) {
        obj.insert(QString("select"), ::OpenAPI::toJsonValue(m_select));
    }
    if (m_skip_isSet) {
        obj.insert(QString("skip"), ::OpenAPI::toJsonValue(m_skip));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

bool OAISearchParametersPayload::isCount() const {
    return m_count;
}
void OAISearchParametersPayload::setCount(const bool &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISearchParametersPayload::is_count_Set() const{
    return m_count_isSet;
}

bool OAISearchParametersPayload::is_count_Valid() const{
    return m_count_isValid;
}

QList<QString> OAISearchParametersPayload::getFacets() const {
    return m_facets;
}
void OAISearchParametersPayload::setFacets(const QList<QString> &facets) {
    m_facets = facets;
    m_facets_isSet = true;
}

bool OAISearchParametersPayload::is_facets_Set() const{
    return m_facets_isSet;
}

bool OAISearchParametersPayload::is_facets_Valid() const{
    return m_facets_isValid;
}

QString OAISearchParametersPayload::getFilter() const {
    return m_filter;
}
void OAISearchParametersPayload::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISearchParametersPayload::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISearchParametersPayload::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAISearchParametersPayload::getHighlight() const {
    return m_highlight;
}
void OAISearchParametersPayload::setHighlight(const QString &highlight) {
    m_highlight = highlight;
    m_highlight_isSet = true;
}

bool OAISearchParametersPayload::is_highlight_Set() const{
    return m_highlight_isSet;
}

bool OAISearchParametersPayload::is_highlight_Valid() const{
    return m_highlight_isValid;
}

QString OAISearchParametersPayload::getHighlightPostTag() const {
    return m_highlight_post_tag;
}
void OAISearchParametersPayload::setHighlightPostTag(const QString &highlight_post_tag) {
    m_highlight_post_tag = highlight_post_tag;
    m_highlight_post_tag_isSet = true;
}

bool OAISearchParametersPayload::is_highlight_post_tag_Set() const{
    return m_highlight_post_tag_isSet;
}

bool OAISearchParametersPayload::is_highlight_post_tag_Valid() const{
    return m_highlight_post_tag_isValid;
}

QString OAISearchParametersPayload::getHighlightPreTag() const {
    return m_highlight_pre_tag;
}
void OAISearchParametersPayload::setHighlightPreTag(const QString &highlight_pre_tag) {
    m_highlight_pre_tag = highlight_pre_tag;
    m_highlight_pre_tag_isSet = true;
}

bool OAISearchParametersPayload::is_highlight_pre_tag_Set() const{
    return m_highlight_pre_tag_isSet;
}

bool OAISearchParametersPayload::is_highlight_pre_tag_Valid() const{
    return m_highlight_pre_tag_isValid;
}

double OAISearchParametersPayload::getMinimumCoverage() const {
    return m_minimum_coverage;
}
void OAISearchParametersPayload::setMinimumCoverage(const double &minimum_coverage) {
    m_minimum_coverage = minimum_coverage;
    m_minimum_coverage_isSet = true;
}

bool OAISearchParametersPayload::is_minimum_coverage_Set() const{
    return m_minimum_coverage_isSet;
}

bool OAISearchParametersPayload::is_minimum_coverage_Valid() const{
    return m_minimum_coverage_isValid;
}

QString OAISearchParametersPayload::getOrderby() const {
    return m_orderby;
}
void OAISearchParametersPayload::setOrderby(const QString &orderby) {
    m_orderby = orderby;
    m_orderby_isSet = true;
}

bool OAISearchParametersPayload::is_orderby_Set() const{
    return m_orderby_isSet;
}

bool OAISearchParametersPayload::is_orderby_Valid() const{
    return m_orderby_isValid;
}

OAIQueryType OAISearchParametersPayload::getQueryType() const {
    return m_query_type;
}
void OAISearchParametersPayload::setQueryType(const OAIQueryType &query_type) {
    m_query_type = query_type;
    m_query_type_isSet = true;
}

bool OAISearchParametersPayload::is_query_type_Set() const{
    return m_query_type_isSet;
}

bool OAISearchParametersPayload::is_query_type_Valid() const{
    return m_query_type_isValid;
}

QList<QString> OAISearchParametersPayload::getScoringParameters() const {
    return m_scoring_parameters;
}
void OAISearchParametersPayload::setScoringParameters(const QList<QString> &scoring_parameters) {
    m_scoring_parameters = scoring_parameters;
    m_scoring_parameters_isSet = true;
}

bool OAISearchParametersPayload::is_scoring_parameters_Set() const{
    return m_scoring_parameters_isSet;
}

bool OAISearchParametersPayload::is_scoring_parameters_Valid() const{
    return m_scoring_parameters_isValid;
}

QString OAISearchParametersPayload::getScoringProfile() const {
    return m_scoring_profile;
}
void OAISearchParametersPayload::setScoringProfile(const QString &scoring_profile) {
    m_scoring_profile = scoring_profile;
    m_scoring_profile_isSet = true;
}

bool OAISearchParametersPayload::is_scoring_profile_Set() const{
    return m_scoring_profile_isSet;
}

bool OAISearchParametersPayload::is_scoring_profile_Valid() const{
    return m_scoring_profile_isValid;
}

QString OAISearchParametersPayload::getSearch() const {
    return m_search;
}
void OAISearchParametersPayload::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAISearchParametersPayload::is_search_Set() const{
    return m_search_isSet;
}

bool OAISearchParametersPayload::is_search_Valid() const{
    return m_search_isValid;
}

QString OAISearchParametersPayload::getSearchFields() const {
    return m_search_fields;
}
void OAISearchParametersPayload::setSearchFields(const QString &search_fields) {
    m_search_fields = search_fields;
    m_search_fields_isSet = true;
}

bool OAISearchParametersPayload::is_search_fields_Set() const{
    return m_search_fields_isSet;
}

bool OAISearchParametersPayload::is_search_fields_Valid() const{
    return m_search_fields_isValid;
}

OAISearchMode OAISearchParametersPayload::getSearchMode() const {
    return m_search_mode;
}
void OAISearchParametersPayload::setSearchMode(const OAISearchMode &search_mode) {
    m_search_mode = search_mode;
    m_search_mode_isSet = true;
}

bool OAISearchParametersPayload::is_search_mode_Set() const{
    return m_search_mode_isSet;
}

bool OAISearchParametersPayload::is_search_mode_Valid() const{
    return m_search_mode_isValid;
}

QString OAISearchParametersPayload::getSelect() const {
    return m_select;
}
void OAISearchParametersPayload::setSelect(const QString &select) {
    m_select = select;
    m_select_isSet = true;
}

bool OAISearchParametersPayload::is_select_Set() const{
    return m_select_isSet;
}

bool OAISearchParametersPayload::is_select_Valid() const{
    return m_select_isValid;
}

qint32 OAISearchParametersPayload::getSkip() const {
    return m_skip;
}
void OAISearchParametersPayload::setSkip(const qint32 &skip) {
    m_skip = skip;
    m_skip_isSet = true;
}

bool OAISearchParametersPayload::is_skip_Set() const{
    return m_skip_isSet;
}

bool OAISearchParametersPayload::is_skip_Valid() const{
    return m_skip_isValid;
}

qint32 OAISearchParametersPayload::getTop() const {
    return m_top;
}
void OAISearchParametersPayload::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAISearchParametersPayload::is_top_Set() const{
    return m_top_isSet;
}

bool OAISearchParametersPayload::is_top_Valid() const{
    return m_top_isValid;
}

bool OAISearchParametersPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_facets.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_post_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_pre_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_scoring_profile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_mode.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchParametersPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
