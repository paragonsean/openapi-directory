/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2016-09-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestParametersPayload.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestParametersPayload::OAISuggestParametersPayload(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestParametersPayload::OAISuggestParametersPayload() {
    this->initializeModel();
}

OAISuggestParametersPayload::~OAISuggestParametersPayload() {}

void OAISuggestParametersPayload::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_fuzzy_isSet = false;
    m_fuzzy_isValid = false;

    m_highlight_post_tag_isSet = false;
    m_highlight_post_tag_isValid = false;

    m_highlight_pre_tag_isSet = false;
    m_highlight_pre_tag_isValid = false;

    m_minimum_coverage_isSet = false;
    m_minimum_coverage_isValid = false;

    m_orderby_isSet = false;
    m_orderby_isValid = false;

    m_search_isSet = false;
    m_search_isValid = false;

    m_search_fields_isSet = false;
    m_search_fields_isValid = false;

    m_select_isSet = false;
    m_select_isValid = false;

    m_suggester_name_isSet = false;
    m_suggester_name_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;
}

void OAISuggestParametersPayload::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestParametersPayload::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_fuzzy_isValid = ::OpenAPI::fromJsonValue(m_fuzzy, json[QString("fuzzy")]);
    m_fuzzy_isSet = !json[QString("fuzzy")].isNull() && m_fuzzy_isValid;

    m_highlight_post_tag_isValid = ::OpenAPI::fromJsonValue(m_highlight_post_tag, json[QString("highlightPostTag")]);
    m_highlight_post_tag_isSet = !json[QString("highlightPostTag")].isNull() && m_highlight_post_tag_isValid;

    m_highlight_pre_tag_isValid = ::OpenAPI::fromJsonValue(m_highlight_pre_tag, json[QString("highlightPreTag")]);
    m_highlight_pre_tag_isSet = !json[QString("highlightPreTag")].isNull() && m_highlight_pre_tag_isValid;

    m_minimum_coverage_isValid = ::OpenAPI::fromJsonValue(m_minimum_coverage, json[QString("minimumCoverage")]);
    m_minimum_coverage_isSet = !json[QString("minimumCoverage")].isNull() && m_minimum_coverage_isValid;

    m_orderby_isValid = ::OpenAPI::fromJsonValue(m_orderby, json[QString("orderby")]);
    m_orderby_isSet = !json[QString("orderby")].isNull() && m_orderby_isValid;

    m_search_isValid = ::OpenAPI::fromJsonValue(m_search, json[QString("search")]);
    m_search_isSet = !json[QString("search")].isNull() && m_search_isValid;

    m_search_fields_isValid = ::OpenAPI::fromJsonValue(m_search_fields, json[QString("searchFields")]);
    m_search_fields_isSet = !json[QString("searchFields")].isNull() && m_search_fields_isValid;

    m_select_isValid = ::OpenAPI::fromJsonValue(m_select, json[QString("select")]);
    m_select_isSet = !json[QString("select")].isNull() && m_select_isValid;

    m_suggester_name_isValid = ::OpenAPI::fromJsonValue(m_suggester_name, json[QString("suggesterName")]);
    m_suggester_name_isSet = !json[QString("suggesterName")].isNull() && m_suggester_name_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;
}

QString OAISuggestParametersPayload::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestParametersPayload::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_fuzzy_isSet) {
        obj.insert(QString("fuzzy"), ::OpenAPI::toJsonValue(m_fuzzy));
    }
    if (m_highlight_post_tag_isSet) {
        obj.insert(QString("highlightPostTag"), ::OpenAPI::toJsonValue(m_highlight_post_tag));
    }
    if (m_highlight_pre_tag_isSet) {
        obj.insert(QString("highlightPreTag"), ::OpenAPI::toJsonValue(m_highlight_pre_tag));
    }
    if (m_minimum_coverage_isSet) {
        obj.insert(QString("minimumCoverage"), ::OpenAPI::toJsonValue(m_minimum_coverage));
    }
    if (m_orderby_isSet) {
        obj.insert(QString("orderby"), ::OpenAPI::toJsonValue(m_orderby));
    }
    if (m_search_isSet) {
        obj.insert(QString("search"), ::OpenAPI::toJsonValue(m_search));
    }
    if (m_search_fields_isSet) {
        obj.insert(QString("searchFields"), ::OpenAPI::toJsonValue(m_search_fields));
    }
    if (m_select_isSet) {
        obj.insert(QString("select"), ::OpenAPI::toJsonValue(m_select));
    }
    if (m_suggester_name_isSet) {
        obj.insert(QString("suggesterName"), ::OpenAPI::toJsonValue(m_suggester_name));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    return obj;
}

QString OAISuggestParametersPayload::getFilter() const {
    return m_filter;
}
void OAISuggestParametersPayload::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISuggestParametersPayload::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISuggestParametersPayload::is_filter_Valid() const{
    return m_filter_isValid;
}

bool OAISuggestParametersPayload::isFuzzy() const {
    return m_fuzzy;
}
void OAISuggestParametersPayload::setFuzzy(const bool &fuzzy) {
    m_fuzzy = fuzzy;
    m_fuzzy_isSet = true;
}

bool OAISuggestParametersPayload::is_fuzzy_Set() const{
    return m_fuzzy_isSet;
}

bool OAISuggestParametersPayload::is_fuzzy_Valid() const{
    return m_fuzzy_isValid;
}

QString OAISuggestParametersPayload::getHighlightPostTag() const {
    return m_highlight_post_tag;
}
void OAISuggestParametersPayload::setHighlightPostTag(const QString &highlight_post_tag) {
    m_highlight_post_tag = highlight_post_tag;
    m_highlight_post_tag_isSet = true;
}

bool OAISuggestParametersPayload::is_highlight_post_tag_Set() const{
    return m_highlight_post_tag_isSet;
}

bool OAISuggestParametersPayload::is_highlight_post_tag_Valid() const{
    return m_highlight_post_tag_isValid;
}

QString OAISuggestParametersPayload::getHighlightPreTag() const {
    return m_highlight_pre_tag;
}
void OAISuggestParametersPayload::setHighlightPreTag(const QString &highlight_pre_tag) {
    m_highlight_pre_tag = highlight_pre_tag;
    m_highlight_pre_tag_isSet = true;
}

bool OAISuggestParametersPayload::is_highlight_pre_tag_Set() const{
    return m_highlight_pre_tag_isSet;
}

bool OAISuggestParametersPayload::is_highlight_pre_tag_Valid() const{
    return m_highlight_pre_tag_isValid;
}

double OAISuggestParametersPayload::getMinimumCoverage() const {
    return m_minimum_coverage;
}
void OAISuggestParametersPayload::setMinimumCoverage(const double &minimum_coverage) {
    m_minimum_coverage = minimum_coverage;
    m_minimum_coverage_isSet = true;
}

bool OAISuggestParametersPayload::is_minimum_coverage_Set() const{
    return m_minimum_coverage_isSet;
}

bool OAISuggestParametersPayload::is_minimum_coverage_Valid() const{
    return m_minimum_coverage_isValid;
}

QString OAISuggestParametersPayload::getOrderby() const {
    return m_orderby;
}
void OAISuggestParametersPayload::setOrderby(const QString &orderby) {
    m_orderby = orderby;
    m_orderby_isSet = true;
}

bool OAISuggestParametersPayload::is_orderby_Set() const{
    return m_orderby_isSet;
}

bool OAISuggestParametersPayload::is_orderby_Valid() const{
    return m_orderby_isValid;
}

QString OAISuggestParametersPayload::getSearch() const {
    return m_search;
}
void OAISuggestParametersPayload::setSearch(const QString &search) {
    m_search = search;
    m_search_isSet = true;
}

bool OAISuggestParametersPayload::is_search_Set() const{
    return m_search_isSet;
}

bool OAISuggestParametersPayload::is_search_Valid() const{
    return m_search_isValid;
}

QString OAISuggestParametersPayload::getSearchFields() const {
    return m_search_fields;
}
void OAISuggestParametersPayload::setSearchFields(const QString &search_fields) {
    m_search_fields = search_fields;
    m_search_fields_isSet = true;
}

bool OAISuggestParametersPayload::is_search_fields_Set() const{
    return m_search_fields_isSet;
}

bool OAISuggestParametersPayload::is_search_fields_Valid() const{
    return m_search_fields_isValid;
}

QString OAISuggestParametersPayload::getSelect() const {
    return m_select;
}
void OAISuggestParametersPayload::setSelect(const QString &select) {
    m_select = select;
    m_select_isSet = true;
}

bool OAISuggestParametersPayload::is_select_Set() const{
    return m_select_isSet;
}

bool OAISuggestParametersPayload::is_select_Valid() const{
    return m_select_isValid;
}

QString OAISuggestParametersPayload::getSuggesterName() const {
    return m_suggester_name;
}
void OAISuggestParametersPayload::setSuggesterName(const QString &suggester_name) {
    m_suggester_name = suggester_name;
    m_suggester_name_isSet = true;
}

bool OAISuggestParametersPayload::is_suggester_name_Set() const{
    return m_suggester_name_isSet;
}

bool OAISuggestParametersPayload::is_suggester_name_Valid() const{
    return m_suggester_name_isValid;
}

qint32 OAISuggestParametersPayload::getTop() const {
    return m_top;
}
void OAISuggestParametersPayload::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAISuggestParametersPayload::is_top_Set() const{
    return m_top_isSet;
}

bool OAISuggestParametersPayload::is_top_Valid() const{
    return m_top_isValid;
}

bool OAISuggestParametersPayload::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_fuzzy_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_post_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_pre_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_orderby_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_select_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_suggester_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestParametersPayload::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
