/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2015-02-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.SearchIndexClient);
  }
}(this, function(expect, SearchIndexClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new SearchIndexClient.SearchParameters();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('SearchParameters', function() {
    it('should create an instance of SearchParameters', function() {
      // uncomment below and update the code to test SearchParameters
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be.a(SearchIndexClient.SearchParameters);
    });

    it('should have the property filter (base name: "filter")', function() {
      // uncomment below and update the code to test the property filter
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property highlightFields (base name: "highlightFields")', function() {
      // uncomment below and update the code to test the property highlightFields
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property highlightPostTag (base name: "highlightPostTag")', function() {
      // uncomment below and update the code to test the property highlightPostTag
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property highlightPreTag (base name: "highlightPreTag")', function() {
      // uncomment below and update the code to test the property highlightPreTag
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property includeTotalResultCount (base name: "includeTotalResultCount")', function() {
      // uncomment below and update the code to test the property includeTotalResultCount
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property minimumCoverage (base name: "minimumCoverage")', function() {
      // uncomment below and update the code to test the property minimumCoverage
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property orderBy (base name: "orderBy")', function() {
      // uncomment below and update the code to test the property orderBy
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property queryType (base name: "queryType")', function() {
      // uncomment below and update the code to test the property queryType
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property scoringParameters (base name: "scoringParameters")', function() {
      // uncomment below and update the code to test the property scoringParameters
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property scoringProfile (base name: "scoringProfile")', function() {
      // uncomment below and update the code to test the property scoringProfile
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property searchFields (base name: "searchFields")', function() {
      // uncomment below and update the code to test the property searchFields
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property searchMode (base name: "searchMode")', function() {
      // uncomment below and update the code to test the property searchMode
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property select (base name: "select")', function() {
      // uncomment below and update the code to test the property select
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property skip (base name: "skip")', function() {
      // uncomment below and update the code to test the property skip
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

    it('should have the property top (base name: "top")', function() {
      // uncomment below and update the code to test the property top
      //var instance = new SearchIndexClient.SearchParameters();
      //expect(instance).to.be();
    });

  });

}));
