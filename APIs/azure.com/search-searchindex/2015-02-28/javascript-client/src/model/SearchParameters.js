/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2015-02-28
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import QueryType from './QueryType';
import SearchMode from './SearchMode';

/**
 * The SearchParameters model module.
 * @module model/SearchParameters
 * @version 2015-02-28
 */
class SearchParameters {
    /**
     * Constructs a new <code>SearchParameters</code>.
     * Parameters for filtering, sorting, faceting, paging, and other search query behaviors.
     * @alias module:model/SearchParameters
     */
    constructor() { 
        
        SearchParameters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SearchParameters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchParameters} obj Optional instance to populate.
     * @return {module:model/SearchParameters} The populated <code>SearchParameters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchParameters();

            if (data.hasOwnProperty('filter')) {
                obj['filter'] = ApiClient.convertToType(data['filter'], 'String');
            }
            if (data.hasOwnProperty('highlightFields')) {
                obj['highlightFields'] = ApiClient.convertToType(data['highlightFields'], ['String']);
            }
            if (data.hasOwnProperty('highlightPostTag')) {
                obj['highlightPostTag'] = ApiClient.convertToType(data['highlightPostTag'], 'String');
            }
            if (data.hasOwnProperty('highlightPreTag')) {
                obj['highlightPreTag'] = ApiClient.convertToType(data['highlightPreTag'], 'String');
            }
            if (data.hasOwnProperty('includeTotalResultCount')) {
                obj['includeTotalResultCount'] = ApiClient.convertToType(data['includeTotalResultCount'], 'Boolean');
            }
            if (data.hasOwnProperty('minimumCoverage')) {
                obj['minimumCoverage'] = ApiClient.convertToType(data['minimumCoverage'], 'Number');
            }
            if (data.hasOwnProperty('orderBy')) {
                obj['orderBy'] = ApiClient.convertToType(data['orderBy'], ['String']);
            }
            if (data.hasOwnProperty('queryType')) {
                obj['queryType'] = QueryType.constructFromObject(data['queryType']);
            }
            if (data.hasOwnProperty('scoringParameters')) {
                obj['scoringParameters'] = ApiClient.convertToType(data['scoringParameters'], ['String']);
            }
            if (data.hasOwnProperty('scoringProfile')) {
                obj['scoringProfile'] = ApiClient.convertToType(data['scoringProfile'], 'String');
            }
            if (data.hasOwnProperty('searchFields')) {
                obj['searchFields'] = ApiClient.convertToType(data['searchFields'], ['String']);
            }
            if (data.hasOwnProperty('searchMode')) {
                obj['searchMode'] = SearchMode.constructFromObject(data['searchMode']);
            }
            if (data.hasOwnProperty('select')) {
                obj['select'] = ApiClient.convertToType(data['select'], ['String']);
            }
            if (data.hasOwnProperty('skip')) {
                obj['skip'] = ApiClient.convertToType(data['skip'], 'Number');
            }
            if (data.hasOwnProperty('top')) {
                obj['top'] = ApiClient.convertToType(data['top'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchParameters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchParameters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['filter'] && !(typeof data['filter'] === 'string' || data['filter'] instanceof String)) {
            throw new Error("Expected the field `filter` to be a primitive type in the JSON string but got " + data['filter']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['highlightFields'])) {
            throw new Error("Expected the field `highlightFields` to be an array in the JSON data but got " + data['highlightFields']);
        }
        // ensure the json data is a string
        if (data['highlightPostTag'] && !(typeof data['highlightPostTag'] === 'string' || data['highlightPostTag'] instanceof String)) {
            throw new Error("Expected the field `highlightPostTag` to be a primitive type in the JSON string but got " + data['highlightPostTag']);
        }
        // ensure the json data is a string
        if (data['highlightPreTag'] && !(typeof data['highlightPreTag'] === 'string' || data['highlightPreTag'] instanceof String)) {
            throw new Error("Expected the field `highlightPreTag` to be a primitive type in the JSON string but got " + data['highlightPreTag']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['orderBy'])) {
            throw new Error("Expected the field `orderBy` to be an array in the JSON data but got " + data['orderBy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scoringParameters'])) {
            throw new Error("Expected the field `scoringParameters` to be an array in the JSON data but got " + data['scoringParameters']);
        }
        // ensure the json data is a string
        if (data['scoringProfile'] && !(typeof data['scoringProfile'] === 'string' || data['scoringProfile'] instanceof String)) {
            throw new Error("Expected the field `scoringProfile` to be a primitive type in the JSON string but got " + data['scoringProfile']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['searchFields'])) {
            throw new Error("Expected the field `searchFields` to be an array in the JSON data but got " + data['searchFields']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['select'])) {
            throw new Error("Expected the field `select` to be an array in the JSON data but got " + data['select']);
        }

        return true;
    }


}



/**
 * Gets or sets the OData $filter expression to apply to the search query.
 * @member {String} filter
 */
SearchParameters.prototype['filter'] = undefined;

/**
 * Gets or sets the list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.
 * @member {Array.<String>} highlightFields
 */
SearchParameters.prototype['highlightFields'] = undefined;

/**
 * Gets or sets a string tag that is appended to hit highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.
 * @member {String} highlightPostTag
 */
SearchParameters.prototype['highlightPostTag'] = undefined;

/**
 * Gets or sets a string tag that is prepended to hit highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.
 * @member {String} highlightPreTag
 */
SearchParameters.prototype['highlightPreTag'] = undefined;

/**
 * Gets or sets a value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.
 * @member {Boolean} includeTotalResultCount
 */
SearchParameters.prototype['includeTotalResultCount'] = undefined;

/**
 * Gets or sets a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.
 * @member {Number} minimumCoverage
 */
SearchParameters.prototype['minimumCoverage'] = undefined;

/**
 * Gets or sets the list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.
 * @member {Array.<String>} orderBy
 */
SearchParameters.prototype['orderBy'] = undefined;

/**
 * @member {module:model/QueryType} queryType
 */
SearchParameters.prototype['queryType'] = undefined;

/**
 * Gets or sets the list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name:value. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation:-122.2,44.8\"(without the quotes).
 * @member {Array.<String>} scoringParameters
 */
SearchParameters.prototype['scoringParameters'] = undefined;

/**
 * Gets or sets the name of a scoring profile to evaluate match scores for matching documents in order to sort the results.
 * @member {String} scoringProfile
 */
SearchParameters.prototype['scoringProfile'] = undefined;

/**
 * Gets or sets the list of field names to include in the full-text search.
 * @member {Array.<String>} searchFields
 */
SearchParameters.prototype['searchFields'] = undefined;

/**
 * @member {module:model/SearchMode} searchMode
 */
SearchParameters.prototype['searchMode'] = undefined;

/**
 * Gets or sets the list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.
 * @member {Array.<String>} select
 */
SearchParameters.prototype['select'] = undefined;

/**
 * Gets or sets the number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use Skip due to this limitation, consider using OrderBy on a totally-ordered key and Filter with a range query instead.
 * @member {Number} skip
 */
SearchParameters.prototype['skip'] = undefined;

/**
 * Gets or sets the number of search results to retrieve. This can be used in conjunction with Skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be passed to ContinueSearch to retrieve the next page of results. See DocumentSearchResponse.ContinuationToken for more information.
 * @member {Number} top
 */
SearchParameters.prototype['top'] = undefined;






export default SearchParameters;

