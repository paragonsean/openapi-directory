/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2015-02-28
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAISearchParameters.h
 *
 * Parameters for filtering, sorting, faceting, paging, and other search query behaviors.
 */

#ifndef OAISearchParameters_H
#define OAISearchParameters_H

#include <QJsonObject>

#include "OAIQueryType.h"
#include "OAISearchMode.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAISearchParameters : public OAIObject {
public:
    OAISearchParameters();
    OAISearchParameters(QString json);
    ~OAISearchParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFilter() const;
    void setFilter(const QString &filter);
    bool is_filter_Set() const;
    bool is_filter_Valid() const;

    QList<QString> getHighlightFields() const;
    void setHighlightFields(const QList<QString> &highlight_fields);
    bool is_highlight_fields_Set() const;
    bool is_highlight_fields_Valid() const;

    QString getHighlightPostTag() const;
    void setHighlightPostTag(const QString &highlight_post_tag);
    bool is_highlight_post_tag_Set() const;
    bool is_highlight_post_tag_Valid() const;

    QString getHighlightPreTag() const;
    void setHighlightPreTag(const QString &highlight_pre_tag);
    bool is_highlight_pre_tag_Set() const;
    bool is_highlight_pre_tag_Valid() const;

    bool isIncludeTotalResultCount() const;
    void setIncludeTotalResultCount(const bool &include_total_result_count);
    bool is_include_total_result_count_Set() const;
    bool is_include_total_result_count_Valid() const;

    double getMinimumCoverage() const;
    void setMinimumCoverage(const double &minimum_coverage);
    bool is_minimum_coverage_Set() const;
    bool is_minimum_coverage_Valid() const;

    QList<QString> getOrderBy() const;
    void setOrderBy(const QList<QString> &order_by);
    bool is_order_by_Set() const;
    bool is_order_by_Valid() const;

    OAIQueryType getQueryType() const;
    void setQueryType(const OAIQueryType &query_type);
    bool is_query_type_Set() const;
    bool is_query_type_Valid() const;

    QList<QString> getScoringParameters() const;
    void setScoringParameters(const QList<QString> &scoring_parameters);
    bool is_scoring_parameters_Set() const;
    bool is_scoring_parameters_Valid() const;

    QString getScoringProfile() const;
    void setScoringProfile(const QString &scoring_profile);
    bool is_scoring_profile_Set() const;
    bool is_scoring_profile_Valid() const;

    QList<QString> getSearchFields() const;
    void setSearchFields(const QList<QString> &search_fields);
    bool is_search_fields_Set() const;
    bool is_search_fields_Valid() const;

    OAISearchMode getSearchMode() const;
    void setSearchMode(const OAISearchMode &search_mode);
    bool is_search_mode_Set() const;
    bool is_search_mode_Valid() const;

    QList<QString> getSelect() const;
    void setSelect(const QList<QString> &select);
    bool is_select_Set() const;
    bool is_select_Valid() const;

    qint32 getSkip() const;
    void setSkip(const qint32 &skip);
    bool is_skip_Set() const;
    bool is_skip_Valid() const;

    qint32 getTop() const;
    void setTop(const qint32 &top);
    bool is_top_Set() const;
    bool is_top_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_filter;
    bool m_filter_isSet;
    bool m_filter_isValid;

    QList<QString> m_highlight_fields;
    bool m_highlight_fields_isSet;
    bool m_highlight_fields_isValid;

    QString m_highlight_post_tag;
    bool m_highlight_post_tag_isSet;
    bool m_highlight_post_tag_isValid;

    QString m_highlight_pre_tag;
    bool m_highlight_pre_tag_isSet;
    bool m_highlight_pre_tag_isValid;

    bool m_include_total_result_count;
    bool m_include_total_result_count_isSet;
    bool m_include_total_result_count_isValid;

    double m_minimum_coverage;
    bool m_minimum_coverage_isSet;
    bool m_minimum_coverage_isValid;

    QList<QString> m_order_by;
    bool m_order_by_isSet;
    bool m_order_by_isValid;

    OAIQueryType m_query_type;
    bool m_query_type_isSet;
    bool m_query_type_isValid;

    QList<QString> m_scoring_parameters;
    bool m_scoring_parameters_isSet;
    bool m_scoring_parameters_isValid;

    QString m_scoring_profile;
    bool m_scoring_profile_isSet;
    bool m_scoring_profile_isValid;

    QList<QString> m_search_fields;
    bool m_search_fields_isSet;
    bool m_search_fields_isValid;

    OAISearchMode m_search_mode;
    bool m_search_mode_isSet;
    bool m_search_mode_isValid;

    QList<QString> m_select;
    bool m_select_isSet;
    bool m_select_isValid;

    qint32 m_skip;
    bool m_skip_isSet;
    bool m_skip_isValid;

    qint32 m_top;
    bool m_top_isSet;
    bool m_top_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAISearchParameters)

#endif // OAISearchParameters_H
