/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2015-02-28
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuggestParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuggestParameters::OAISuggestParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuggestParameters::OAISuggestParameters() {
    this->initializeModel();
}

OAISuggestParameters::~OAISuggestParameters() {}

void OAISuggestParameters::initializeModel() {

    m_filter_isSet = false;
    m_filter_isValid = false;

    m_highlight_post_tag_isSet = false;
    m_highlight_post_tag_isValid = false;

    m_highlight_pre_tag_isSet = false;
    m_highlight_pre_tag_isValid = false;

    m_minimum_coverage_isSet = false;
    m_minimum_coverage_isValid = false;

    m_order_by_isSet = false;
    m_order_by_isValid = false;

    m_search_fields_isSet = false;
    m_search_fields_isValid = false;

    m_select_isSet = false;
    m_select_isValid = false;

    m_top_isSet = false;
    m_top_isValid = false;

    m_use_fuzzy_matching_isSet = false;
    m_use_fuzzy_matching_isValid = false;
}

void OAISuggestParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuggestParameters::fromJsonObject(QJsonObject json) {

    m_filter_isValid = ::OpenAPI::fromJsonValue(m_filter, json[QString("filter")]);
    m_filter_isSet = !json[QString("filter")].isNull() && m_filter_isValid;

    m_highlight_post_tag_isValid = ::OpenAPI::fromJsonValue(m_highlight_post_tag, json[QString("highlightPostTag")]);
    m_highlight_post_tag_isSet = !json[QString("highlightPostTag")].isNull() && m_highlight_post_tag_isValid;

    m_highlight_pre_tag_isValid = ::OpenAPI::fromJsonValue(m_highlight_pre_tag, json[QString("highlightPreTag")]);
    m_highlight_pre_tag_isSet = !json[QString("highlightPreTag")].isNull() && m_highlight_pre_tag_isValid;

    m_minimum_coverage_isValid = ::OpenAPI::fromJsonValue(m_minimum_coverage, json[QString("minimumCoverage")]);
    m_minimum_coverage_isSet = !json[QString("minimumCoverage")].isNull() && m_minimum_coverage_isValid;

    m_order_by_isValid = ::OpenAPI::fromJsonValue(m_order_by, json[QString("orderBy")]);
    m_order_by_isSet = !json[QString("orderBy")].isNull() && m_order_by_isValid;

    m_search_fields_isValid = ::OpenAPI::fromJsonValue(m_search_fields, json[QString("searchFields")]);
    m_search_fields_isSet = !json[QString("searchFields")].isNull() && m_search_fields_isValid;

    m_select_isValid = ::OpenAPI::fromJsonValue(m_select, json[QString("select")]);
    m_select_isSet = !json[QString("select")].isNull() && m_select_isValid;

    m_top_isValid = ::OpenAPI::fromJsonValue(m_top, json[QString("top")]);
    m_top_isSet = !json[QString("top")].isNull() && m_top_isValid;

    m_use_fuzzy_matching_isValid = ::OpenAPI::fromJsonValue(m_use_fuzzy_matching, json[QString("useFuzzyMatching")]);
    m_use_fuzzy_matching_isSet = !json[QString("useFuzzyMatching")].isNull() && m_use_fuzzy_matching_isValid;
}

QString OAISuggestParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuggestParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_filter_isSet) {
        obj.insert(QString("filter"), ::OpenAPI::toJsonValue(m_filter));
    }
    if (m_highlight_post_tag_isSet) {
        obj.insert(QString("highlightPostTag"), ::OpenAPI::toJsonValue(m_highlight_post_tag));
    }
    if (m_highlight_pre_tag_isSet) {
        obj.insert(QString("highlightPreTag"), ::OpenAPI::toJsonValue(m_highlight_pre_tag));
    }
    if (m_minimum_coverage_isSet) {
        obj.insert(QString("minimumCoverage"), ::OpenAPI::toJsonValue(m_minimum_coverage));
    }
    if (m_order_by.size() > 0) {
        obj.insert(QString("orderBy"), ::OpenAPI::toJsonValue(m_order_by));
    }
    if (m_search_fields.size() > 0) {
        obj.insert(QString("searchFields"), ::OpenAPI::toJsonValue(m_search_fields));
    }
    if (m_select.size() > 0) {
        obj.insert(QString("select"), ::OpenAPI::toJsonValue(m_select));
    }
    if (m_top_isSet) {
        obj.insert(QString("top"), ::OpenAPI::toJsonValue(m_top));
    }
    if (m_use_fuzzy_matching_isSet) {
        obj.insert(QString("useFuzzyMatching"), ::OpenAPI::toJsonValue(m_use_fuzzy_matching));
    }
    return obj;
}

QString OAISuggestParameters::getFilter() const {
    return m_filter;
}
void OAISuggestParameters::setFilter(const QString &filter) {
    m_filter = filter;
    m_filter_isSet = true;
}

bool OAISuggestParameters::is_filter_Set() const{
    return m_filter_isSet;
}

bool OAISuggestParameters::is_filter_Valid() const{
    return m_filter_isValid;
}

QString OAISuggestParameters::getHighlightPostTag() const {
    return m_highlight_post_tag;
}
void OAISuggestParameters::setHighlightPostTag(const QString &highlight_post_tag) {
    m_highlight_post_tag = highlight_post_tag;
    m_highlight_post_tag_isSet = true;
}

bool OAISuggestParameters::is_highlight_post_tag_Set() const{
    return m_highlight_post_tag_isSet;
}

bool OAISuggestParameters::is_highlight_post_tag_Valid() const{
    return m_highlight_post_tag_isValid;
}

QString OAISuggestParameters::getHighlightPreTag() const {
    return m_highlight_pre_tag;
}
void OAISuggestParameters::setHighlightPreTag(const QString &highlight_pre_tag) {
    m_highlight_pre_tag = highlight_pre_tag;
    m_highlight_pre_tag_isSet = true;
}

bool OAISuggestParameters::is_highlight_pre_tag_Set() const{
    return m_highlight_pre_tag_isSet;
}

bool OAISuggestParameters::is_highlight_pre_tag_Valid() const{
    return m_highlight_pre_tag_isValid;
}

double OAISuggestParameters::getMinimumCoverage() const {
    return m_minimum_coverage;
}
void OAISuggestParameters::setMinimumCoverage(const double &minimum_coverage) {
    m_minimum_coverage = minimum_coverage;
    m_minimum_coverage_isSet = true;
}

bool OAISuggestParameters::is_minimum_coverage_Set() const{
    return m_minimum_coverage_isSet;
}

bool OAISuggestParameters::is_minimum_coverage_Valid() const{
    return m_minimum_coverage_isValid;
}

QList<QString> OAISuggestParameters::getOrderBy() const {
    return m_order_by;
}
void OAISuggestParameters::setOrderBy(const QList<QString> &order_by) {
    m_order_by = order_by;
    m_order_by_isSet = true;
}

bool OAISuggestParameters::is_order_by_Set() const{
    return m_order_by_isSet;
}

bool OAISuggestParameters::is_order_by_Valid() const{
    return m_order_by_isValid;
}

QList<QString> OAISuggestParameters::getSearchFields() const {
    return m_search_fields;
}
void OAISuggestParameters::setSearchFields(const QList<QString> &search_fields) {
    m_search_fields = search_fields;
    m_search_fields_isSet = true;
}

bool OAISuggestParameters::is_search_fields_Set() const{
    return m_search_fields_isSet;
}

bool OAISuggestParameters::is_search_fields_Valid() const{
    return m_search_fields_isValid;
}

QList<QString> OAISuggestParameters::getSelect() const {
    return m_select;
}
void OAISuggestParameters::setSelect(const QList<QString> &select) {
    m_select = select;
    m_select_isSet = true;
}

bool OAISuggestParameters::is_select_Set() const{
    return m_select_isSet;
}

bool OAISuggestParameters::is_select_Valid() const{
    return m_select_isValid;
}

qint32 OAISuggestParameters::getTop() const {
    return m_top;
}
void OAISuggestParameters::setTop(const qint32 &top) {
    m_top = top;
    m_top_isSet = true;
}

bool OAISuggestParameters::is_top_Set() const{
    return m_top_isSet;
}

bool OAISuggestParameters::is_top_Valid() const{
    return m_top_isValid;
}

bool OAISuggestParameters::isUseFuzzyMatching() const {
    return m_use_fuzzy_matching;
}
void OAISuggestParameters::setUseFuzzyMatching(const bool &use_fuzzy_matching) {
    m_use_fuzzy_matching = use_fuzzy_matching;
    m_use_fuzzy_matching_isSet = true;
}

bool OAISuggestParameters::is_use_fuzzy_matching_Set() const{
    return m_use_fuzzy_matching_isSet;
}

bool OAISuggestParameters::is_use_fuzzy_matching_Valid() const{
    return m_use_fuzzy_matching_isValid;
}

bool OAISuggestParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_post_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_highlight_pre_tag_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minimum_coverage_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_by.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_select.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_top_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_use_fuzzy_matching_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuggestParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
