/**
 * SearchIndexClient
 * Client that can be used to query an Azure Search index and upload, merge, or delete documents.
 *
 * The version of the OpenAPI document: 2015-02-28
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIIndexingResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIIndexingResult::OAIIndexingResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIIndexingResult::OAIIndexingResult() {
    this->initializeModel();
}

OAIIndexingResult::~OAIIndexingResult() {}

void OAIIndexingResult::initializeModel() {

    m_error_message_isSet = false;
    m_error_message_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;
}

void OAIIndexingResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIIndexingResult::fromJsonObject(QJsonObject json) {

    m_error_message_isValid = ::OpenAPI::fromJsonValue(m_error_message, json[QString("errorMessage")]);
    m_error_message_isSet = !json[QString("errorMessage")].isNull() && m_error_message_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;
}

QString OAIIndexingResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIIndexingResult::asJsonObject() const {
    QJsonObject obj;
    if (m_error_message_isSet) {
        obj.insert(QString("errorMessage"), ::OpenAPI::toJsonValue(m_error_message));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    return obj;
}

QString OAIIndexingResult::getErrorMessage() const {
    return m_error_message;
}
void OAIIndexingResult::setErrorMessage(const QString &error_message) {
    m_error_message = error_message;
    m_error_message_isSet = true;
}

bool OAIIndexingResult::is_error_message_Set() const{
    return m_error_message_isSet;
}

bool OAIIndexingResult::is_error_message_Valid() const{
    return m_error_message_isValid;
}

QString OAIIndexingResult::getKey() const {
    return m_key;
}
void OAIIndexingResult::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIIndexingResult::is_key_Set() const{
    return m_key_isSet;
}

bool OAIIndexingResult::is_key_Valid() const{
    return m_key_isValid;
}

bool OAIIndexingResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_error_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIIndexingResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
