# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SuggestParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, highlight_post_tag: str=None, highlight_pre_tag: str=None, minimum_coverage: float=None, order_by: List[str]=None, search_fields: List[str]=None, select: List[str]=None, top: int=None, use_fuzzy_matching: bool=None):
        """SuggestParameters - a model defined in OpenAPI

        :param filter: The filter of this SuggestParameters.
        :param highlight_post_tag: The highlight_post_tag of this SuggestParameters.
        :param highlight_pre_tag: The highlight_pre_tag of this SuggestParameters.
        :param minimum_coverage: The minimum_coverage of this SuggestParameters.
        :param order_by: The order_by of this SuggestParameters.
        :param search_fields: The search_fields of this SuggestParameters.
        :param select: The select of this SuggestParameters.
        :param top: The top of this SuggestParameters.
        :param use_fuzzy_matching: The use_fuzzy_matching of this SuggestParameters.
        """
        self.openapi_types = {
            'filter': str,
            'highlight_post_tag': str,
            'highlight_pre_tag': str,
            'minimum_coverage': float,
            'order_by': List[str],
            'search_fields': List[str],
            'select': List[str],
            'top': int,
            'use_fuzzy_matching': bool
        }

        self.attribute_map = {
            'filter': 'filter',
            'highlight_post_tag': 'highlightPostTag',
            'highlight_pre_tag': 'highlightPreTag',
            'minimum_coverage': 'minimumCoverage',
            'order_by': 'orderBy',
            'search_fields': 'searchFields',
            'select': 'select',
            'top': 'top',
            'use_fuzzy_matching': 'useFuzzyMatching'
        }

        self._filter = filter
        self._highlight_post_tag = highlight_post_tag
        self._highlight_pre_tag = highlight_pre_tag
        self._minimum_coverage = minimum_coverage
        self._order_by = order_by
        self._search_fields = search_fields
        self._select = select
        self._top = top
        self._use_fuzzy_matching = use_fuzzy_matching

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SuggestParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SuggestParameters of this SuggestParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this SuggestParameters.

        Gets or sets the OData $filter expression to apply to the suggestions query.

        :return: The filter of this SuggestParameters.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SuggestParameters.

        Gets or sets the OData $filter expression to apply to the suggestions query.

        :param filter: The filter of this SuggestParameters.
        :type filter: str
        """

        self._filter = filter

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this SuggestParameters.

        Gets or sets a string tag that is appended to hit highlights. Must be set with HighlightPreTag. If omitted, hit highlighting of suggestions is disabled.

        :return: The highlight_post_tag of this SuggestParameters.
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this SuggestParameters.

        Gets or sets a string tag that is appended to hit highlights. Must be set with HighlightPreTag. If omitted, hit highlighting of suggestions is disabled.

        :param highlight_post_tag: The highlight_post_tag of this SuggestParameters.
        :type highlight_post_tag: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this SuggestParameters.

        Gets or sets a string tag that is prepended to hit highlights. Must be set with HighlightPostTag. If omitted, hit highlighting of suggestions is disabled.

        :return: The highlight_pre_tag of this SuggestParameters.
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this SuggestParameters.

        Gets or sets a string tag that is prepended to hit highlights. Must be set with HighlightPostTag. If omitted, hit highlighting of suggestions is disabled.

        :param highlight_pre_tag: The highlight_pre_tag of this SuggestParameters.
        :type highlight_pre_tag: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def minimum_coverage(self):
        """Gets the minimum_coverage of this SuggestParameters.

        Gets or sets a number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.

        :return: The minimum_coverage of this SuggestParameters.
        :rtype: float
        """
        return self._minimum_coverage

    @minimum_coverage.setter
    def minimum_coverage(self, minimum_coverage):
        """Sets the minimum_coverage of this SuggestParameters.

        Gets or sets a number between 0 and 100 indicating the percentage of the index that must be covered by a suggestion query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 80.

        :param minimum_coverage: The minimum_coverage of this SuggestParameters.
        :type minimum_coverage: float
        """

        self._minimum_coverage = minimum_coverage

    @property
    def order_by(self):
        """Gets the order_by of this SuggestParameters.

        Gets or sets the list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :return: The order_by of this SuggestParameters.
        :rtype: List[str]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SuggestParameters.

        Gets or sets the list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :param order_by: The order_by of this SuggestParameters.
        :type order_by: List[str]
        """

        self._order_by = order_by

    @property
    def search_fields(self):
        """Gets the search_fields of this SuggestParameters.

        Gets or sets the list of field names to consider when querying for suggestions.

        :return: The search_fields of this SuggestParameters.
        :rtype: List[str]
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this SuggestParameters.

        Gets or sets the list of field names to consider when querying for suggestions.

        :param search_fields: The search_fields of this SuggestParameters.
        :type search_fields: List[str]
        """

        self._search_fields = search_fields

    @property
    def select(self):
        """Gets the select of this SuggestParameters.

        Gets or sets the list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :return: The select of this SuggestParameters.
        :rtype: List[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this SuggestParameters.

        Gets or sets the list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :param select: The select of this SuggestParameters.
        :type select: List[str]
        """

        self._select = select

    @property
    def top(self):
        """Gets the top of this SuggestParameters.

        Gets or sets the number of suggestions to retrieve. This must be a value between 1 and 100. The default is to 5.

        :return: The top of this SuggestParameters.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this SuggestParameters.

        Gets or sets the number of suggestions to retrieve. This must be a value between 1 and 100. The default is to 5.

        :param top: The top of this SuggestParameters.
        :type top: int
        """

        self._top = top

    @property
    def use_fuzzy_matching(self):
        """Gets the use_fuzzy_matching of this SuggestParameters.

        Gets or sets a value indicating whether to use fuzzy matching for the suggestion query. Default is false. when set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.

        :return: The use_fuzzy_matching of this SuggestParameters.
        :rtype: bool
        """
        return self._use_fuzzy_matching

    @use_fuzzy_matching.setter
    def use_fuzzy_matching(self, use_fuzzy_matching):
        """Sets the use_fuzzy_matching of this SuggestParameters.

        Gets or sets a value indicating whether to use fuzzy matching for the suggestion query. Default is false. when set to true, the query will find suggestions even if there's a substituted or missing character in the search text. While this provides a better experience in some scenarios it comes at a performance cost as fuzzy suggestion searches are slower and consume more resources.

        :param use_fuzzy_matching: The use_fuzzy_matching of this SuggestParameters.
        :type use_fuzzy_matching: bool
        """

        self._use_fuzzy_matching = use_fuzzy_matching
