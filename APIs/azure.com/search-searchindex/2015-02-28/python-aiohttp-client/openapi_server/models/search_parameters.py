# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.query_type import QueryType
from openapi_server.models.search_mode import SearchMode
from openapi_server import util


class SearchParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filter: str=None, highlight_fields: List[str]=None, highlight_post_tag: str=None, highlight_pre_tag: str=None, include_total_result_count: bool=None, minimum_coverage: float=None, order_by: List[str]=None, query_type: QueryType=None, scoring_parameters: List[str]=None, scoring_profile: str=None, search_fields: List[str]=None, search_mode: SearchMode=None, select: List[str]=None, skip: int=None, top: int=None):
        """SearchParameters - a model defined in OpenAPI

        :param filter: The filter of this SearchParameters.
        :param highlight_fields: The highlight_fields of this SearchParameters.
        :param highlight_post_tag: The highlight_post_tag of this SearchParameters.
        :param highlight_pre_tag: The highlight_pre_tag of this SearchParameters.
        :param include_total_result_count: The include_total_result_count of this SearchParameters.
        :param minimum_coverage: The minimum_coverage of this SearchParameters.
        :param order_by: The order_by of this SearchParameters.
        :param query_type: The query_type of this SearchParameters.
        :param scoring_parameters: The scoring_parameters of this SearchParameters.
        :param scoring_profile: The scoring_profile of this SearchParameters.
        :param search_fields: The search_fields of this SearchParameters.
        :param search_mode: The search_mode of this SearchParameters.
        :param select: The select of this SearchParameters.
        :param skip: The skip of this SearchParameters.
        :param top: The top of this SearchParameters.
        """
        self.openapi_types = {
            'filter': str,
            'highlight_fields': List[str],
            'highlight_post_tag': str,
            'highlight_pre_tag': str,
            'include_total_result_count': bool,
            'minimum_coverage': float,
            'order_by': List[str],
            'query_type': QueryType,
            'scoring_parameters': List[str],
            'scoring_profile': str,
            'search_fields': List[str],
            'search_mode': SearchMode,
            'select': List[str],
            'skip': int,
            'top': int
        }

        self.attribute_map = {
            'filter': 'filter',
            'highlight_fields': 'highlightFields',
            'highlight_post_tag': 'highlightPostTag',
            'highlight_pre_tag': 'highlightPreTag',
            'include_total_result_count': 'includeTotalResultCount',
            'minimum_coverage': 'minimumCoverage',
            'order_by': 'orderBy',
            'query_type': 'queryType',
            'scoring_parameters': 'scoringParameters',
            'scoring_profile': 'scoringProfile',
            'search_fields': 'searchFields',
            'search_mode': 'searchMode',
            'select': 'select',
            'skip': 'skip',
            'top': 'top'
        }

        self._filter = filter
        self._highlight_fields = highlight_fields
        self._highlight_post_tag = highlight_post_tag
        self._highlight_pre_tag = highlight_pre_tag
        self._include_total_result_count = include_total_result_count
        self._minimum_coverage = minimum_coverage
        self._order_by = order_by
        self._query_type = query_type
        self._scoring_parameters = scoring_parameters
        self._scoring_profile = scoring_profile
        self._search_fields = search_fields
        self._search_mode = search_mode
        self._select = select
        self._skip = skip
        self._top = top

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchParameters of this SearchParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filter(self):
        """Gets the filter of this SearchParameters.

        Gets or sets the OData $filter expression to apply to the search query.

        :return: The filter of this SearchParameters.
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this SearchParameters.

        Gets or sets the OData $filter expression to apply to the search query.

        :param filter: The filter of this SearchParameters.
        :type filter: str
        """

        self._filter = filter

    @property
    def highlight_fields(self):
        """Gets the highlight_fields of this SearchParameters.

        Gets or sets the list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.

        :return: The highlight_fields of this SearchParameters.
        :rtype: List[str]
        """
        return self._highlight_fields

    @highlight_fields.setter
    def highlight_fields(self, highlight_fields):
        """Sets the highlight_fields of this SearchParameters.

        Gets or sets the list of field names to use for hit highlights. Only searchable fields can be used for hit highlighting.

        :param highlight_fields: The highlight_fields of this SearchParameters.
        :type highlight_fields: List[str]
        """

        self._highlight_fields = highlight_fields

    @property
    def highlight_post_tag(self):
        """Gets the highlight_post_tag of this SearchParameters.

        Gets or sets a string tag that is appended to hit highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.

        :return: The highlight_post_tag of this SearchParameters.
        :rtype: str
        """
        return self._highlight_post_tag

    @highlight_post_tag.setter
    def highlight_post_tag(self, highlight_post_tag):
        """Sets the highlight_post_tag of this SearchParameters.

        Gets or sets a string tag that is appended to hit highlights. Must be set with HighlightPreTag. Default is &lt;/em&gt;.

        :param highlight_post_tag: The highlight_post_tag of this SearchParameters.
        :type highlight_post_tag: str
        """

        self._highlight_post_tag = highlight_post_tag

    @property
    def highlight_pre_tag(self):
        """Gets the highlight_pre_tag of this SearchParameters.

        Gets or sets a string tag that is prepended to hit highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.

        :return: The highlight_pre_tag of this SearchParameters.
        :rtype: str
        """
        return self._highlight_pre_tag

    @highlight_pre_tag.setter
    def highlight_pre_tag(self, highlight_pre_tag):
        """Sets the highlight_pre_tag of this SearchParameters.

        Gets or sets a string tag that is prepended to hit highlights. Must be set with HighlightPostTag. Default is &lt;em&gt;.

        :param highlight_pre_tag: The highlight_pre_tag of this SearchParameters.
        :type highlight_pre_tag: str
        """

        self._highlight_pre_tag = highlight_pre_tag

    @property
    def include_total_result_count(self):
        """Gets the include_total_result_count of this SearchParameters.

        Gets or sets a value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.

        :return: The include_total_result_count of this SearchParameters.
        :rtype: bool
        """
        return self._include_total_result_count

    @include_total_result_count.setter
    def include_total_result_count(self, include_total_result_count):
        """Sets the include_total_result_count of this SearchParameters.

        Gets or sets a value that specifies whether to fetch the total count of results. Default is false. Setting this value to true may have a performance impact. Note that the count returned is an approximation.

        :param include_total_result_count: The include_total_result_count of this SearchParameters.
        :type include_total_result_count: bool
        """

        self._include_total_result_count = include_total_result_count

    @property
    def minimum_coverage(self):
        """Gets the minimum_coverage of this SearchParameters.

        Gets or sets a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.

        :return: The minimum_coverage of this SearchParameters.
        :rtype: float
        """
        return self._minimum_coverage

    @minimum_coverage.setter
    def minimum_coverage(self, minimum_coverage):
        """Sets the minimum_coverage of this SearchParameters.

        Gets or sets a number between 0 and 100 indicating the percentage of the index that must be covered by a search query in order for the query to be reported as a success. This parameter can be useful for ensuring search availability even for services with only one replica. The default is 100.

        :param minimum_coverage: The minimum_coverage of this SearchParameters.
        :type minimum_coverage: float
        """

        self._minimum_coverage = minimum_coverage

    @property
    def order_by(self):
        """Gets the order_by of this SearchParameters.

        Gets or sets the list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :return: The order_by of this SearchParameters.
        :rtype: List[str]
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this SearchParameters.

        Gets or sets the list of OData $orderby expressions by which to sort the results. Each expression can be either a field name or a call to the geo.distance() function. Each expression can be followed by asc to indicate ascending, and desc to indicate descending. The default is ascending order. Ties will be broken by the match scores of documents. If no OrderBy is specified, the default sort order is descending by document match score. There can be at most 32 Orderby clauses.

        :param order_by: The order_by of this SearchParameters.
        :type order_by: List[str]
        """

        self._order_by = order_by

    @property
    def query_type(self):
        """Gets the query_type of this SearchParameters.


        :return: The query_type of this SearchParameters.
        :rtype: QueryType
        """
        return self._query_type

    @query_type.setter
    def query_type(self, query_type):
        """Sets the query_type of this SearchParameters.


        :param query_type: The query_type of this SearchParameters.
        :type query_type: QueryType
        """

        self._query_type = query_type

    @property
    def scoring_parameters(self):
        """Gets the scoring_parameters of this SearchParameters.

        Gets or sets the list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name:value. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation:-122.2,44.8\"(without the quotes).

        :return: The scoring_parameters of this SearchParameters.
        :rtype: List[str]
        """
        return self._scoring_parameters

    @scoring_parameters.setter
    def scoring_parameters(self, scoring_parameters):
        """Sets the scoring_parameters of this SearchParameters.

        Gets or sets the list of parameter values to be used in scoring functions (for example, referencePointParameter) using the format name:value. For example, if the scoring profile defines a function with a parameter called 'mylocation' the parameter string would be \"mylocation:-122.2,44.8\"(without the quotes).

        :param scoring_parameters: The scoring_parameters of this SearchParameters.
        :type scoring_parameters: List[str]
        """

        self._scoring_parameters = scoring_parameters

    @property
    def scoring_profile(self):
        """Gets the scoring_profile of this SearchParameters.

        Gets or sets the name of a scoring profile to evaluate match scores for matching documents in order to sort the results.

        :return: The scoring_profile of this SearchParameters.
        :rtype: str
        """
        return self._scoring_profile

    @scoring_profile.setter
    def scoring_profile(self, scoring_profile):
        """Sets the scoring_profile of this SearchParameters.

        Gets or sets the name of a scoring profile to evaluate match scores for matching documents in order to sort the results.

        :param scoring_profile: The scoring_profile of this SearchParameters.
        :type scoring_profile: str
        """

        self._scoring_profile = scoring_profile

    @property
    def search_fields(self):
        """Gets the search_fields of this SearchParameters.

        Gets or sets the list of field names to include in the full-text search.

        :return: The search_fields of this SearchParameters.
        :rtype: List[str]
        """
        return self._search_fields

    @search_fields.setter
    def search_fields(self, search_fields):
        """Sets the search_fields of this SearchParameters.

        Gets or sets the list of field names to include in the full-text search.

        :param search_fields: The search_fields of this SearchParameters.
        :type search_fields: List[str]
        """

        self._search_fields = search_fields

    @property
    def search_mode(self):
        """Gets the search_mode of this SearchParameters.


        :return: The search_mode of this SearchParameters.
        :rtype: SearchMode
        """
        return self._search_mode

    @search_mode.setter
    def search_mode(self, search_mode):
        """Sets the search_mode of this SearchParameters.


        :param search_mode: The search_mode of this SearchParameters.
        :type search_mode: SearchMode
        """

        self._search_mode = search_mode

    @property
    def select(self):
        """Gets the select of this SearchParameters.

        Gets or sets the list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :return: The select of this SearchParameters.
        :rtype: List[str]
        """
        return self._select

    @select.setter
    def select(self, select):
        """Sets the select of this SearchParameters.

        Gets or sets the list of fields to retrieve. If unspecified, all fields marked as retrievable in the schema are included.

        :param select: The select of this SearchParameters.
        :type select: List[str]
        """

        self._select = select

    @property
    def skip(self):
        """Gets the skip of this SearchParameters.

        Gets or sets the number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use Skip due to this limitation, consider using OrderBy on a totally-ordered key and Filter with a range query instead.

        :return: The skip of this SearchParameters.
        :rtype: int
        """
        return self._skip

    @skip.setter
    def skip(self, skip):
        """Sets the skip of this SearchParameters.

        Gets or sets the number of search results to skip. This value cannot be greater than 100,000. If you need to scan documents in sequence, but cannot use Skip due to this limitation, consider using OrderBy on a totally-ordered key and Filter with a range query instead.

        :param skip: The skip of this SearchParameters.
        :type skip: int
        """

        self._skip = skip

    @property
    def top(self):
        """Gets the top of this SearchParameters.

        Gets or sets the number of search results to retrieve. This can be used in conjunction with Skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be passed to ContinueSearch to retrieve the next page of results. See DocumentSearchResponse.ContinuationToken for more information.

        :return: The top of this SearchParameters.
        :rtype: int
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this SearchParameters.

        Gets or sets the number of search results to retrieve. This can be used in conjunction with Skip to implement client-side paging of search results. If results are truncated due to server-side paging, the response will include a continuation token that can be passed to ContinueSearch to retrieve the next page of results. See DocumentSearchResponse.ContinuationToken for more information.

        :param top: The top of this SearchParameters.
        :type top: int
        """

        self._top = top
