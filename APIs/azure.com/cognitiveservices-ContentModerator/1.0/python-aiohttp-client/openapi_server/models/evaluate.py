# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.key_value_pair import KeyValuePair
from openapi_server.models.status import Status
from openapi_server import util


class Evaluate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, adult_classification_score: float=None, advanced_info: List[KeyValuePair]=None, cache_id: str=None, is_image_adult_classified: bool=None, is_image_racy_classified: bool=None, racy_classification_score: float=None, result: bool=None, status: Status=None, tracking_id: str=None):
        """Evaluate - a model defined in OpenAPI

        :param adult_classification_score: The adult_classification_score of this Evaluate.
        :param advanced_info: The advanced_info of this Evaluate.
        :param cache_id: The cache_id of this Evaluate.
        :param is_image_adult_classified: The is_image_adult_classified of this Evaluate.
        :param is_image_racy_classified: The is_image_racy_classified of this Evaluate.
        :param racy_classification_score: The racy_classification_score of this Evaluate.
        :param result: The result of this Evaluate.
        :param status: The status of this Evaluate.
        :param tracking_id: The tracking_id of this Evaluate.
        """
        self.openapi_types = {
            'adult_classification_score': float,
            'advanced_info': List[KeyValuePair],
            'cache_id': str,
            'is_image_adult_classified': bool,
            'is_image_racy_classified': bool,
            'racy_classification_score': float,
            'result': bool,
            'status': Status,
            'tracking_id': str
        }

        self.attribute_map = {
            'adult_classification_score': 'AdultClassificationScore',
            'advanced_info': 'AdvancedInfo',
            'cache_id': 'CacheID',
            'is_image_adult_classified': 'IsImageAdultClassified',
            'is_image_racy_classified': 'IsImageRacyClassified',
            'racy_classification_score': 'RacyClassificationScore',
            'result': 'Result',
            'status': 'Status',
            'tracking_id': 'TrackingId'
        }

        self._adult_classification_score = adult_classification_score
        self._advanced_info = advanced_info
        self._cache_id = cache_id
        self._is_image_adult_classified = is_image_adult_classified
        self._is_image_racy_classified = is_image_racy_classified
        self._racy_classification_score = racy_classification_score
        self._result = result
        self._status = status
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Evaluate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Evaluate of this Evaluate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adult_classification_score(self):
        """Gets the adult_classification_score of this Evaluate.

        The adult classification score.

        :return: The adult_classification_score of this Evaluate.
        :rtype: float
        """
        return self._adult_classification_score

    @adult_classification_score.setter
    def adult_classification_score(self, adult_classification_score):
        """Sets the adult_classification_score of this Evaluate.

        The adult classification score.

        :param adult_classification_score: The adult_classification_score of this Evaluate.
        :type adult_classification_score: float
        """

        self._adult_classification_score = adult_classification_score

    @property
    def advanced_info(self):
        """Gets the advanced_info of this Evaluate.

        The advanced info.

        :return: The advanced_info of this Evaluate.
        :rtype: List[KeyValuePair]
        """
        return self._advanced_info

    @advanced_info.setter
    def advanced_info(self, advanced_info):
        """Sets the advanced_info of this Evaluate.

        The advanced info.

        :param advanced_info: The advanced_info of this Evaluate.
        :type advanced_info: List[KeyValuePair]
        """

        self._advanced_info = advanced_info

    @property
    def cache_id(self):
        """Gets the cache_id of this Evaluate.

        The cache id.

        :return: The cache_id of this Evaluate.
        :rtype: str
        """
        return self._cache_id

    @cache_id.setter
    def cache_id(self, cache_id):
        """Sets the cache_id of this Evaluate.

        The cache id.

        :param cache_id: The cache_id of this Evaluate.
        :type cache_id: str
        """

        self._cache_id = cache_id

    @property
    def is_image_adult_classified(self):
        """Gets the is_image_adult_classified of this Evaluate.

        Indicates if an image is classified as adult.

        :return: The is_image_adult_classified of this Evaluate.
        :rtype: bool
        """
        return self._is_image_adult_classified

    @is_image_adult_classified.setter
    def is_image_adult_classified(self, is_image_adult_classified):
        """Sets the is_image_adult_classified of this Evaluate.

        Indicates if an image is classified as adult.

        :param is_image_adult_classified: The is_image_adult_classified of this Evaluate.
        :type is_image_adult_classified: bool
        """

        self._is_image_adult_classified = is_image_adult_classified

    @property
    def is_image_racy_classified(self):
        """Gets the is_image_racy_classified of this Evaluate.

        Indicates if the image is classified as racy.

        :return: The is_image_racy_classified of this Evaluate.
        :rtype: bool
        """
        return self._is_image_racy_classified

    @is_image_racy_classified.setter
    def is_image_racy_classified(self, is_image_racy_classified):
        """Sets the is_image_racy_classified of this Evaluate.

        Indicates if the image is classified as racy.

        :param is_image_racy_classified: The is_image_racy_classified of this Evaluate.
        :type is_image_racy_classified: bool
        """

        self._is_image_racy_classified = is_image_racy_classified

    @property
    def racy_classification_score(self):
        """Gets the racy_classification_score of this Evaluate.

        The racy classification score.

        :return: The racy_classification_score of this Evaluate.
        :rtype: float
        """
        return self._racy_classification_score

    @racy_classification_score.setter
    def racy_classification_score(self, racy_classification_score):
        """Sets the racy_classification_score of this Evaluate.

        The racy classification score.

        :param racy_classification_score: The racy_classification_score of this Evaluate.
        :type racy_classification_score: float
        """

        self._racy_classification_score = racy_classification_score

    @property
    def result(self):
        """Gets the result of this Evaluate.

        Evaluate result.

        :return: The result of this Evaluate.
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this Evaluate.

        Evaluate result.

        :param result: The result of this Evaluate.
        :type result: bool
        """

        self._result = result

    @property
    def status(self):
        """Gets the status of this Evaluate.


        :return: The status of this Evaluate.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Evaluate.


        :param status: The status of this Evaluate.
        :type status: Status
        """

        self._status = status

    @property
    def tracking_id(self):
        """Gets the tracking_id of this Evaluate.

        The tracking id.

        :return: The tracking_id of this Evaluate.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this Evaluate.

        The tracking id.

        :param tracking_id: The tracking_id of this Evaluate.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
