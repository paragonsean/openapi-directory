# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util


class ImageIds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_ids: List[int]=None, content_source: str=None, status: Status=None, tracking_id: str=None):
        """ImageIds - a model defined in OpenAPI

        :param content_ids: The content_ids of this ImageIds.
        :param content_source: The content_source of this ImageIds.
        :param status: The status of this ImageIds.
        :param tracking_id: The tracking_id of this ImageIds.
        """
        self.openapi_types = {
            'content_ids': List[int],
            'content_source': str,
            'status': Status,
            'tracking_id': str
        }

        self.attribute_map = {
            'content_ids': 'ContentIds',
            'content_source': 'ContentSource',
            'status': 'Status',
            'tracking_id': 'TrackingId'
        }

        self._content_ids = content_ids
        self._content_source = content_source
        self._status = status
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageIds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageIds of this ImageIds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_ids(self):
        """Gets the content_ids of this ImageIds.

        Id of the contents.

        :return: The content_ids of this ImageIds.
        :rtype: List[int]
        """
        return self._content_ids

    @content_ids.setter
    def content_ids(self, content_ids):
        """Sets the content_ids of this ImageIds.

        Id of the contents.

        :param content_ids: The content_ids of this ImageIds.
        :type content_ids: List[int]
        """

        self._content_ids = content_ids

    @property
    def content_source(self):
        """Gets the content_source of this ImageIds.

        Source of the content.

        :return: The content_source of this ImageIds.
        :rtype: str
        """
        return self._content_source

    @content_source.setter
    def content_source(self, content_source):
        """Sets the content_source of this ImageIds.

        Source of the content.

        :param content_source: The content_source of this ImageIds.
        :type content_source: str
        """

        self._content_source = content_source

    @property
    def status(self):
        """Gets the status of this ImageIds.


        :return: The status of this ImageIds.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ImageIds.


        :param status: The status of this ImageIds.
        :type status: Status
        """

        self._status = status

    @property
    def tracking_id(self):
        """Gets the tracking_id of this ImageIds.

        Tracking Id.

        :return: The tracking_id of this ImageIds.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this ImageIds.

        Tracking Id.

        :param tracking_id: The tracking_id of this ImageIds.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
