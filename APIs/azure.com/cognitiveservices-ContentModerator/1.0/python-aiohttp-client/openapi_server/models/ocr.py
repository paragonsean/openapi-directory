# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.candidate import Candidate
from openapi_server.models.key_value_pair import KeyValuePair
from openapi_server.models.status import Status
from openapi_server import util


class OCR(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cache_id: str=None, candidates: List[Candidate]=None, language: str=None, metadata: List[KeyValuePair]=None, status: Status=None, text: str=None, tracking_id: str=None):
        """OCR - a model defined in OpenAPI

        :param cache_id: The cache_id of this OCR.
        :param candidates: The candidates of this OCR.
        :param language: The language of this OCR.
        :param metadata: The metadata of this OCR.
        :param status: The status of this OCR.
        :param text: The text of this OCR.
        :param tracking_id: The tracking_id of this OCR.
        """
        self.openapi_types = {
            'cache_id': str,
            'candidates': List[Candidate],
            'language': str,
            'metadata': List[KeyValuePair],
            'status': Status,
            'text': str,
            'tracking_id': str
        }

        self.attribute_map = {
            'cache_id': 'CacheId',
            'candidates': 'Candidates',
            'language': 'Language',
            'metadata': 'Metadata',
            'status': 'Status',
            'text': 'Text',
            'tracking_id': 'TrackingId'
        }

        self._cache_id = cache_id
        self._candidates = candidates
        self._language = language
        self._metadata = metadata
        self._status = status
        self._text = text
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'OCR':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The OCR of this OCR.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cache_id(self):
        """Gets the cache_id of this OCR.

        The cache id.

        :return: The cache_id of this OCR.
        :rtype: str
        """
        return self._cache_id

    @cache_id.setter
    def cache_id(self, cache_id):
        """Sets the cache_id of this OCR.

        The cache id.

        :param cache_id: The cache_id of this OCR.
        :type cache_id: str
        """

        self._cache_id = cache_id

    @property
    def candidates(self):
        """Gets the candidates of this OCR.

        The list of candidate text.

        :return: The candidates of this OCR.
        :rtype: List[Candidate]
        """
        return self._candidates

    @candidates.setter
    def candidates(self, candidates):
        """Sets the candidates of this OCR.

        The list of candidate text.

        :param candidates: The candidates of this OCR.
        :type candidates: List[Candidate]
        """

        self._candidates = candidates

    @property
    def language(self):
        """Gets the language of this OCR.

        The ISO 639-3 code.

        :return: The language of this OCR.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this OCR.

        The ISO 639-3 code.

        :param language: The language of this OCR.
        :type language: str
        """

        self._language = language

    @property
    def metadata(self):
        """Gets the metadata of this OCR.

        Array of KeyValue.

        :return: The metadata of this OCR.
        :rtype: List[KeyValuePair]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this OCR.

        Array of KeyValue.

        :param metadata: The metadata of this OCR.
        :type metadata: List[KeyValuePair]
        """

        self._metadata = metadata

    @property
    def status(self):
        """Gets the status of this OCR.


        :return: The status of this OCR.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OCR.


        :param status: The status of this OCR.
        :type status: Status
        """

        self._status = status

    @property
    def text(self):
        """Gets the text of this OCR.

        The found text.

        :return: The text of this OCR.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this OCR.

        The found text.

        :param text: The text of this OCR.
        :type text: str
        """

        self._text = text

    @property
    def tracking_id(self):
        """Gets the tracking_id of this OCR.

        The tracking id.

        :return: The tracking_id of this OCR.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this OCR.

        The tracking id.

        :param tracking_id: The tracking_id of this OCR.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
