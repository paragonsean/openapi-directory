# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reviews_add_video_transcript_moderation_result_request_inner_terms_inner import ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner
from openapi_server import util


class ReviewsAddVideoTranscriptModerationResultRequestInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, terms: List[ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner]=None, timestamp: str=None):
        """ReviewsAddVideoTranscriptModerationResultRequestInner - a model defined in OpenAPI

        :param terms: The terms of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        :param timestamp: The timestamp of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        """
        self.openapi_types = {
            'terms': List[ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner],
            'timestamp': str
        }

        self.attribute_map = {
            'terms': 'Terms',
            'timestamp': 'Timestamp'
        }

        self._terms = terms
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReviewsAddVideoTranscriptModerationResultRequestInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reviews_AddVideoTranscriptModerationResult_request_inner of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def terms(self):
        """Gets the terms of this ReviewsAddVideoTranscriptModerationResultRequestInner.

        Optional metadata details.

        :return: The terms of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        :rtype: List[ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this ReviewsAddVideoTranscriptModerationResultRequestInner.

        Optional metadata details.

        :param terms: The terms of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        :type terms: List[ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner]
        """
        if terms is None:
            raise ValueError("Invalid value for `terms`, must not be `None`")

        self._terms = terms

    @property
    def timestamp(self):
        """Gets the timestamp of this ReviewsAddVideoTranscriptModerationResultRequestInner.

        Timestamp of the image.

        :return: The timestamp of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ReviewsAddVideoTranscriptModerationResultRequestInner.

        Timestamp of the image.

        :param timestamp: The timestamp of this ReviewsAddVideoTranscriptModerationResultRequestInner.
        :type timestamp: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")

        self._timestamp = timestamp
