# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DetectedTerms(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, list_id: int=None, original_index: int=None, term: str=None):
        """DetectedTerms - a model defined in OpenAPI

        :param index: The index of this DetectedTerms.
        :param list_id: The list_id of this DetectedTerms.
        :param original_index: The original_index of this DetectedTerms.
        :param term: The term of this DetectedTerms.
        """
        self.openapi_types = {
            'index': int,
            'list_id': int,
            'original_index': int,
            'term': str
        }

        self.attribute_map = {
            'index': 'Index',
            'list_id': 'ListId',
            'original_index': 'OriginalIndex',
            'term': 'Term'
        }

        self._index = index
        self._list_id = list_id
        self._original_index = original_index
        self._term = term

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DetectedTerms':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DetectedTerms of this DetectedTerms.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this DetectedTerms.

        Index(Location) of the detected profanity term in the input text content.

        :return: The index of this DetectedTerms.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this DetectedTerms.

        Index(Location) of the detected profanity term in the input text content.

        :param index: The index of this DetectedTerms.
        :type index: int
        """

        self._index = index

    @property
    def list_id(self):
        """Gets the list_id of this DetectedTerms.

        Matched Terms list Id.

        :return: The list_id of this DetectedTerms.
        :rtype: int
        """
        return self._list_id

    @list_id.setter
    def list_id(self, list_id):
        """Sets the list_id of this DetectedTerms.

        Matched Terms list Id.

        :param list_id: The list_id of this DetectedTerms.
        :type list_id: int
        """

        self._list_id = list_id

    @property
    def original_index(self):
        """Gets the original_index of this DetectedTerms.

        Original Index(Location) of the detected profanity term in the input text content.

        :return: The original_index of this DetectedTerms.
        :rtype: int
        """
        return self._original_index

    @original_index.setter
    def original_index(self, original_index):
        """Sets the original_index of this DetectedTerms.

        Original Index(Location) of the detected profanity term in the input text content.

        :param original_index: The original_index of this DetectedTerms.
        :type original_index: int
        """

        self._original_index = original_index

    @property
    def term(self):
        """Gets the term of this DetectedTerms.

        Detected profanity term.

        :return: The term of this DetectedTerms.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this DetectedTerms.

        Detected profanity term.

        :param term: The term of this DetectedTerms.
        :type term: str
        """

        self._term = term
