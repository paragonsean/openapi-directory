# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification_category1 import ClassificationCategory1
from openapi_server.models.classification_category2 import ClassificationCategory2
from openapi_server.models.classification_category3 import ClassificationCategory3
from openapi_server import util


class Classification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category1: ClassificationCategory1=None, category2: ClassificationCategory2=None, category3: ClassificationCategory3=None, review_recommended: bool=None):
        """Classification - a model defined in OpenAPI

        :param category1: The category1 of this Classification.
        :param category2: The category2 of this Classification.
        :param category3: The category3 of this Classification.
        :param review_recommended: The review_recommended of this Classification.
        """
        self.openapi_types = {
            'category1': ClassificationCategory1,
            'category2': ClassificationCategory2,
            'category3': ClassificationCategory3,
            'review_recommended': bool
        }

        self.attribute_map = {
            'category1': 'Category1',
            'category2': 'Category2',
            'category3': 'Category3',
            'review_recommended': 'ReviewRecommended'
        }

        self._category1 = category1
        self._category2 = category2
        self._category3 = category3
        self._review_recommended = review_recommended

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Classification':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Classification of this Classification.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category1(self):
        """Gets the category1 of this Classification.


        :return: The category1 of this Classification.
        :rtype: ClassificationCategory1
        """
        return self._category1

    @category1.setter
    def category1(self, category1):
        """Sets the category1 of this Classification.


        :param category1: The category1 of this Classification.
        :type category1: ClassificationCategory1
        """

        self._category1 = category1

    @property
    def category2(self):
        """Gets the category2 of this Classification.


        :return: The category2 of this Classification.
        :rtype: ClassificationCategory2
        """
        return self._category2

    @category2.setter
    def category2(self, category2):
        """Sets the category2 of this Classification.


        :param category2: The category2 of this Classification.
        :type category2: ClassificationCategory2
        """

        self._category2 = category2

    @property
    def category3(self):
        """Gets the category3 of this Classification.


        :return: The category3 of this Classification.
        :rtype: ClassificationCategory3
        """
        return self._category3

    @category3.setter
    def category3(self, category3):
        """Sets the category3 of this Classification.


        :param category3: The category3 of this Classification.
        :type category3: ClassificationCategory3
        """

        self._category3 = category3

    @property
    def review_recommended(self):
        """Gets the review_recommended of this Classification.

        The review recommended flag.

        :return: The review_recommended of this Classification.
        :rtype: bool
        """
        return self._review_recommended

    @review_recommended.setter
    def review_recommended(self, review_recommended):
        """Sets the review_recommended of this Classification.

        The review recommended flag.

        :param review_recommended: The review_recommended of this Classification.
        :type review_recommended: bool
        """

        self._review_recommended = review_recommended
