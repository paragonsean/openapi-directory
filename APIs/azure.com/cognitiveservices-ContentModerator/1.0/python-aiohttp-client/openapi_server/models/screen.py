# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.classification import Classification
from openapi_server.models.detected_terms import DetectedTerms
from openapi_server.models.pii import PII
from openapi_server.models.status import Status
from openapi_server import util


class Screen(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_corrected_text: str=None, classification: Classification=None, language: str=None, misrepresentation: List[str]=None, normalized_text: str=None, original_text: str=None, pii: PII=None, status: Status=None, terms: List[DetectedTerms]=None, tracking_id: str=None):
        """Screen - a model defined in OpenAPI

        :param auto_corrected_text: The auto_corrected_text of this Screen.
        :param classification: The classification of this Screen.
        :param language: The language of this Screen.
        :param misrepresentation: The misrepresentation of this Screen.
        :param normalized_text: The normalized_text of this Screen.
        :param original_text: The original_text of this Screen.
        :param pii: The pii of this Screen.
        :param status: The status of this Screen.
        :param terms: The terms of this Screen.
        :param tracking_id: The tracking_id of this Screen.
        """
        self.openapi_types = {
            'auto_corrected_text': str,
            'classification': Classification,
            'language': str,
            'misrepresentation': List[str],
            'normalized_text': str,
            'original_text': str,
            'pii': PII,
            'status': Status,
            'terms': List[DetectedTerms],
            'tracking_id': str
        }

        self.attribute_map = {
            'auto_corrected_text': 'AutoCorrectedText',
            'classification': 'Classification',
            'language': 'Language',
            'misrepresentation': 'Misrepresentation',
            'normalized_text': 'NormalizedText',
            'original_text': 'OriginalText',
            'pii': 'PII',
            'status': 'Status',
            'terms': 'Terms',
            'tracking_id': 'TrackingId'
        }

        self._auto_corrected_text = auto_corrected_text
        self._classification = classification
        self._language = language
        self._misrepresentation = misrepresentation
        self._normalized_text = normalized_text
        self._original_text = original_text
        self._pii = pii
        self._status = status
        self._terms = terms
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Screen':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Screen of this Screen.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_corrected_text(self):
        """Gets the auto_corrected_text of this Screen.

        The autocorrected text

        :return: The auto_corrected_text of this Screen.
        :rtype: str
        """
        return self._auto_corrected_text

    @auto_corrected_text.setter
    def auto_corrected_text(self, auto_corrected_text):
        """Sets the auto_corrected_text of this Screen.

        The autocorrected text

        :param auto_corrected_text: The auto_corrected_text of this Screen.
        :type auto_corrected_text: str
        """

        self._auto_corrected_text = auto_corrected_text

    @property
    def classification(self):
        """Gets the classification of this Screen.


        :return: The classification of this Screen.
        :rtype: Classification
        """
        return self._classification

    @classification.setter
    def classification(self, classification):
        """Sets the classification of this Screen.


        :param classification: The classification of this Screen.
        :type classification: Classification
        """

        self._classification = classification

    @property
    def language(self):
        """Gets the language of this Screen.

        Language of the input text content.

        :return: The language of this Screen.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Screen.

        Language of the input text content.

        :param language: The language of this Screen.
        :type language: str
        """

        self._language = language

    @property
    def misrepresentation(self):
        """Gets the misrepresentation of this Screen.

        The misrepresentation text.

        :return: The misrepresentation of this Screen.
        :rtype: List[str]
        """
        return self._misrepresentation

    @misrepresentation.setter
    def misrepresentation(self, misrepresentation):
        """Sets the misrepresentation of this Screen.

        The misrepresentation text.

        :param misrepresentation: The misrepresentation of this Screen.
        :type misrepresentation: List[str]
        """

        self._misrepresentation = misrepresentation

    @property
    def normalized_text(self):
        """Gets the normalized_text of this Screen.

        The normalized text.

        :return: The normalized_text of this Screen.
        :rtype: str
        """
        return self._normalized_text

    @normalized_text.setter
    def normalized_text(self, normalized_text):
        """Sets the normalized_text of this Screen.

        The normalized text.

        :param normalized_text: The normalized_text of this Screen.
        :type normalized_text: str
        """

        self._normalized_text = normalized_text

    @property
    def original_text(self):
        """Gets the original_text of this Screen.

        The original text.

        :return: The original_text of this Screen.
        :rtype: str
        """
        return self._original_text

    @original_text.setter
    def original_text(self, original_text):
        """Sets the original_text of this Screen.

        The original text.

        :param original_text: The original_text of this Screen.
        :type original_text: str
        """

        self._original_text = original_text

    @property
    def pii(self):
        """Gets the pii of this Screen.


        :return: The pii of this Screen.
        :rtype: PII
        """
        return self._pii

    @pii.setter
    def pii(self, pii):
        """Sets the pii of this Screen.


        :param pii: The pii of this Screen.
        :type pii: PII
        """

        self._pii = pii

    @property
    def status(self):
        """Gets the status of this Screen.


        :return: The status of this Screen.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Screen.


        :param status: The status of this Screen.
        :type status: Status
        """

        self._status = status

    @property
    def terms(self):
        """Gets the terms of this Screen.


        :return: The terms of this Screen.
        :rtype: List[DetectedTerms]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this Screen.


        :param terms: The terms of this Screen.
        :type terms: List[DetectedTerms]
        """

        self._terms = terms

    @property
    def tracking_id(self):
        """Gets the tracking_id of this Screen.

        Unique Content Moderator transaction Id.

        :return: The tracking_id of this Screen.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this Screen.

        Unique Content Moderator transaction Id.

        :param tracking_id: The tracking_id of this Screen.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
