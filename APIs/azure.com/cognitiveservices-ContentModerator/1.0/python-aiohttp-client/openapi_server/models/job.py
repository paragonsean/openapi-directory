# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.job_execution_report_details import JobExecutionReportDetails
from openapi_server.models.key_value_pair import KeyValuePair
from openapi_server import util


class Job(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, call_back_endpoint: str=None, id: str=None, job_execution_report: List[JobExecutionReportDetails]=None, result_meta_data: List[KeyValuePair]=None, review_id: str=None, status: str=None, team_name: str=None, type: str=None, workflow_id: str=None):
        """Job - a model defined in OpenAPI

        :param call_back_endpoint: The call_back_endpoint of this Job.
        :param id: The id of this Job.
        :param job_execution_report: The job_execution_report of this Job.
        :param result_meta_data: The result_meta_data of this Job.
        :param review_id: The review_id of this Job.
        :param status: The status of this Job.
        :param team_name: The team_name of this Job.
        :param type: The type of this Job.
        :param workflow_id: The workflow_id of this Job.
        """
        self.openapi_types = {
            'call_back_endpoint': str,
            'id': str,
            'job_execution_report': List[JobExecutionReportDetails],
            'result_meta_data': List[KeyValuePair],
            'review_id': str,
            'status': str,
            'team_name': str,
            'type': str,
            'workflow_id': str
        }

        self.attribute_map = {
            'call_back_endpoint': 'CallBackEndpoint',
            'id': 'Id',
            'job_execution_report': 'JobExecutionReport',
            'result_meta_data': 'ResultMetaData',
            'review_id': 'ReviewId',
            'status': 'Status',
            'team_name': 'TeamName',
            'type': 'Type',
            'workflow_id': 'WorkflowId'
        }

        self._call_back_endpoint = call_back_endpoint
        self._id = id
        self._job_execution_report = job_execution_report
        self._result_meta_data = result_meta_data
        self._review_id = review_id
        self._status = status
        self._team_name = team_name
        self._type = type
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Job':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Job of this Job.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def call_back_endpoint(self):
        """Gets the call_back_endpoint of this Job.

        The callback endpoint.

        :return: The call_back_endpoint of this Job.
        :rtype: str
        """
        return self._call_back_endpoint

    @call_back_endpoint.setter
    def call_back_endpoint(self, call_back_endpoint):
        """Sets the call_back_endpoint of this Job.

        The callback endpoint.

        :param call_back_endpoint: The call_back_endpoint of this Job.
        :type call_back_endpoint: str
        """

        self._call_back_endpoint = call_back_endpoint

    @property
    def id(self):
        """Gets the id of this Job.

        The job id.

        :return: The id of this Job.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Job.

        The job id.

        :param id: The id of this Job.
        :type id: str
        """

        self._id = id

    @property
    def job_execution_report(self):
        """Gets the job_execution_report of this Job.

        Job execution report- Array of KeyValue pairs object.

        :return: The job_execution_report of this Job.
        :rtype: List[JobExecutionReportDetails]
        """
        return self._job_execution_report

    @job_execution_report.setter
    def job_execution_report(self, job_execution_report):
        """Sets the job_execution_report of this Job.

        Job execution report- Array of KeyValue pairs object.

        :param job_execution_report: The job_execution_report of this Job.
        :type job_execution_report: List[JobExecutionReportDetails]
        """

        self._job_execution_report = job_execution_report

    @property
    def result_meta_data(self):
        """Gets the result_meta_data of this Job.

        Array of KeyValue pairs.

        :return: The result_meta_data of this Job.
        :rtype: List[KeyValuePair]
        """
        return self._result_meta_data

    @result_meta_data.setter
    def result_meta_data(self, result_meta_data):
        """Sets the result_meta_data of this Job.

        Array of KeyValue pairs.

        :param result_meta_data: The result_meta_data of this Job.
        :type result_meta_data: List[KeyValuePair]
        """

        self._result_meta_data = result_meta_data

    @property
    def review_id(self):
        """Gets the review_id of this Job.

        Review Id if one is created.

        :return: The review_id of this Job.
        :rtype: str
        """
        return self._review_id

    @review_id.setter
    def review_id(self, review_id):
        """Sets the review_id of this Job.

        Review Id if one is created.

        :param review_id: The review_id of this Job.
        :type review_id: str
        """

        self._review_id = review_id

    @property
    def status(self):
        """Gets the status of this Job.

        The status string (<Pending, Failed, Completed>).

        :return: The status of this Job.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Job.

        The status string (<Pending, Failed, Completed>).

        :param status: The status of this Job.
        :type status: str
        """

        self._status = status

    @property
    def team_name(self):
        """Gets the team_name of this Job.

        The team name associated with the job.

        :return: The team_name of this Job.
        :rtype: str
        """
        return self._team_name

    @team_name.setter
    def team_name(self, team_name):
        """Sets the team_name of this Job.

        The team name associated with the job.

        :param team_name: The team_name of this Job.
        :type team_name: str
        """

        self._team_name = team_name

    @property
    def type(self):
        """Gets the type of this Job.

        Type of the content.

        :return: The type of this Job.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Job.

        Type of the content.

        :param type: The type of this Job.
        :type type: str
        """

        self._type = type

    @property
    def workflow_id(self):
        """Gets the workflow_id of this Job.

        The Id of the workflow.

        :return: The workflow_id of this Job.
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this Job.

        The Id of the workflow.

        :param workflow_id: The workflow_id of this Job.
        :type workflow_id: str
        """

        self._workflow_id = workflow_id
