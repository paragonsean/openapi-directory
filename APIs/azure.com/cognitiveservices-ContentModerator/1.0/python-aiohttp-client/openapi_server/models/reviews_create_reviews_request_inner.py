# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.reviews_create_reviews_request_inner_metadata_inner import ReviewsCreateReviewsRequestInnerMetadataInner
from openapi_server import util


class ReviewsCreateReviewsRequestInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, callback_endpoint: str=None, content: str=None, content_id: str=None, metadata: List[ReviewsCreateReviewsRequestInnerMetadataInner]=None, type: str=None):
        """ReviewsCreateReviewsRequestInner - a model defined in OpenAPI

        :param callback_endpoint: The callback_endpoint of this ReviewsCreateReviewsRequestInner.
        :param content: The content of this ReviewsCreateReviewsRequestInner.
        :param content_id: The content_id of this ReviewsCreateReviewsRequestInner.
        :param metadata: The metadata of this ReviewsCreateReviewsRequestInner.
        :param type: The type of this ReviewsCreateReviewsRequestInner.
        """
        self.openapi_types = {
            'callback_endpoint': str,
            'content': str,
            'content_id': str,
            'metadata': List[ReviewsCreateReviewsRequestInnerMetadataInner],
            'type': str
        }

        self.attribute_map = {
            'callback_endpoint': 'CallbackEndpoint',
            'content': 'Content',
            'content_id': 'ContentId',
            'metadata': 'Metadata',
            'type': 'Type'
        }

        self._callback_endpoint = callback_endpoint
        self._content = content
        self._content_id = content_id
        self._metadata = metadata
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReviewsCreateReviewsRequestInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reviews_CreateReviews_request_inner of this ReviewsCreateReviewsRequestInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def callback_endpoint(self):
        """Gets the callback_endpoint of this ReviewsCreateReviewsRequestInner.

        Optional CallbackEndpoint.

        :return: The callback_endpoint of this ReviewsCreateReviewsRequestInner.
        :rtype: str
        """
        return self._callback_endpoint

    @callback_endpoint.setter
    def callback_endpoint(self, callback_endpoint):
        """Sets the callback_endpoint of this ReviewsCreateReviewsRequestInner.

        Optional CallbackEndpoint.

        :param callback_endpoint: The callback_endpoint of this ReviewsCreateReviewsRequestInner.
        :type callback_endpoint: str
        """

        self._callback_endpoint = callback_endpoint

    @property
    def content(self):
        """Gets the content of this ReviewsCreateReviewsRequestInner.

        Content to review.

        :return: The content of this ReviewsCreateReviewsRequestInner.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ReviewsCreateReviewsRequestInner.

        Content to review.

        :param content: The content of this ReviewsCreateReviewsRequestInner.
        :type content: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")

        self._content = content

    @property
    def content_id(self):
        """Gets the content_id of this ReviewsCreateReviewsRequestInner.

        Content Identifier.

        :return: The content_id of this ReviewsCreateReviewsRequestInner.
        :rtype: str
        """
        return self._content_id

    @content_id.setter
    def content_id(self, content_id):
        """Sets the content_id of this ReviewsCreateReviewsRequestInner.

        Content Identifier.

        :param content_id: The content_id of this ReviewsCreateReviewsRequestInner.
        :type content_id: str
        """
        if content_id is None:
            raise ValueError("Invalid value for `content_id`, must not be `None`")

        self._content_id = content_id

    @property
    def metadata(self):
        """Gets the metadata of this ReviewsCreateReviewsRequestInner.

        Optional metadata details.

        :return: The metadata of this ReviewsCreateReviewsRequestInner.
        :rtype: List[ReviewsCreateReviewsRequestInnerMetadataInner]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this ReviewsCreateReviewsRequestInner.

        Optional metadata details.

        :param metadata: The metadata of this ReviewsCreateReviewsRequestInner.
        :type metadata: List[ReviewsCreateReviewsRequestInnerMetadataInner]
        """

        self._metadata = metadata

    @property
    def type(self):
        """Gets the type of this ReviewsCreateReviewsRequestInner.

        Type of the content.

        :return: The type of this ReviewsCreateReviewsRequestInner.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ReviewsCreateReviewsRequestInner.

        Type of the content.

        :param type: The type of this ReviewsCreateReviewsRequestInner.
        :type type: str
        """
        allowed_values = ["Image", "Text"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
