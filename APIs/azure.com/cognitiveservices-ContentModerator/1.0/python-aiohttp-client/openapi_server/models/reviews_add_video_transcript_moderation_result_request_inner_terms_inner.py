# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, index: int=None, term: str=None):
        """ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner - a model defined in OpenAPI

        :param index: The index of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        :param term: The term of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        """
        self.openapi_types = {
            'index': int,
            'term': str
        }

        self.attribute_map = {
            'index': 'Index',
            'term': 'Term'
        }

        self._index = index
        self._term = term

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Reviews_AddVideoTranscriptModerationResult_request_inner_Terms_inner of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def index(self):
        """Gets the index of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.

        Index of the word

        :return: The index of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.

        Index of the word

        :param index: The index of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        :type index: int
        """
        if index is None:
            raise ValueError("Invalid value for `index`, must not be `None`")

        self._index = index

    @property
    def term(self):
        """Gets the term of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.

        Detected word.

        :return: The term of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        :rtype: str
        """
        return self._term

    @term.setter
    def term(self, term):
        """Sets the term of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.

        Detected word.

        :param term: The term of this ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.
        :type term: str
        """
        if term is None:
            raise ValueError("Invalid value for `term`, must not be `None`")

        self._term = term
