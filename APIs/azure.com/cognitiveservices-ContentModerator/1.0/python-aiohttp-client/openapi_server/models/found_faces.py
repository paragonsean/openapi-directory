# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.face import Face
from openapi_server.models.key_value_pair import KeyValuePair
from openapi_server.models.status import Status
from openapi_server import util


class FoundFaces(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advanced_info: List[KeyValuePair]=None, cache_id: str=None, count: int=None, faces: List[Face]=None, result: bool=None, status: Status=None, tracking_id: str=None):
        """FoundFaces - a model defined in OpenAPI

        :param advanced_info: The advanced_info of this FoundFaces.
        :param cache_id: The cache_id of this FoundFaces.
        :param count: The count of this FoundFaces.
        :param faces: The faces of this FoundFaces.
        :param result: The result of this FoundFaces.
        :param status: The status of this FoundFaces.
        :param tracking_id: The tracking_id of this FoundFaces.
        """
        self.openapi_types = {
            'advanced_info': List[KeyValuePair],
            'cache_id': str,
            'count': int,
            'faces': List[Face],
            'result': bool,
            'status': Status,
            'tracking_id': str
        }

        self.attribute_map = {
            'advanced_info': 'AdvancedInfo',
            'cache_id': 'CacheId',
            'count': 'Count',
            'faces': 'Faces',
            'result': 'Result',
            'status': 'Status',
            'tracking_id': 'TrackingId'
        }

        self._advanced_info = advanced_info
        self._cache_id = cache_id
        self._count = count
        self._faces = faces
        self._result = result
        self._status = status
        self._tracking_id = tracking_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FoundFaces':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FoundFaces of this FoundFaces.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advanced_info(self):
        """Gets the advanced_info of this FoundFaces.

        The advanced info.

        :return: The advanced_info of this FoundFaces.
        :rtype: List[KeyValuePair]
        """
        return self._advanced_info

    @advanced_info.setter
    def advanced_info(self, advanced_info):
        """Sets the advanced_info of this FoundFaces.

        The advanced info.

        :param advanced_info: The advanced_info of this FoundFaces.
        :type advanced_info: List[KeyValuePair]
        """

        self._advanced_info = advanced_info

    @property
    def cache_id(self):
        """Gets the cache_id of this FoundFaces.

        The cache id.

        :return: The cache_id of this FoundFaces.
        :rtype: str
        """
        return self._cache_id

    @cache_id.setter
    def cache_id(self, cache_id):
        """Sets the cache_id of this FoundFaces.

        The cache id.

        :param cache_id: The cache_id of this FoundFaces.
        :type cache_id: str
        """

        self._cache_id = cache_id

    @property
    def count(self):
        """Gets the count of this FoundFaces.

        Number of faces found.

        :return: The count of this FoundFaces.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FoundFaces.

        Number of faces found.

        :param count: The count of this FoundFaces.
        :type count: int
        """

        self._count = count

    @property
    def faces(self):
        """Gets the faces of this FoundFaces.

        The list of faces.

        :return: The faces of this FoundFaces.
        :rtype: List[Face]
        """
        return self._faces

    @faces.setter
    def faces(self, faces):
        """Sets the faces of this FoundFaces.

        The list of faces.

        :param faces: The faces of this FoundFaces.
        :type faces: List[Face]
        """

        self._faces = faces

    @property
    def result(self):
        """Gets the result of this FoundFaces.

        True if result was found.

        :return: The result of this FoundFaces.
        :rtype: bool
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this FoundFaces.

        True if result was found.

        :param result: The result of this FoundFaces.
        :type result: bool
        """

        self._result = result

    @property
    def status(self):
        """Gets the status of this FoundFaces.


        :return: The status of this FoundFaces.
        :rtype: Status
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this FoundFaces.


        :param status: The status of this FoundFaces.
        :type status: Status
        """

        self._status = status

    @property
    def tracking_id(self):
        """Gets the tracking_id of this FoundFaces.

        The tracking id.

        :return: The tracking_id of this FoundFaces.
        :rtype: str
        """
        return self._tracking_id

    @tracking_id.setter
    def tracking_id(self, tracking_id):
        """Sets the tracking_id of this FoundFaces.

        The tracking id.

        :param tracking_id: The tracking_id of this FoundFaces.
        :type tracking_id: str
        """

        self._tracking_id = tracking_id
