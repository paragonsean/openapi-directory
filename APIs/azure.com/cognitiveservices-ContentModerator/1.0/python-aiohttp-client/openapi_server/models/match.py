# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Match(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, match_id: int=None, score: float=None, source: str=None, tags: List[int]=None):
        """Match - a model defined in OpenAPI

        :param label: The label of this Match.
        :param match_id: The match_id of this Match.
        :param score: The score of this Match.
        :param source: The source of this Match.
        :param tags: The tags of this Match.
        """
        self.openapi_types = {
            'label': str,
            'match_id': int,
            'score': float,
            'source': str,
            'tags': List[int]
        }

        self.attribute_map = {
            'label': 'Label',
            'match_id': 'MatchId',
            'score': 'Score',
            'source': 'Source',
            'tags': 'Tags'
        }

        self._label = label
        self._match_id = match_id
        self._score = score
        self._source = source
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Match':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Match of this Match.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this Match.

        The label.

        :return: The label of this Match.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Match.

        The label.

        :param label: The label of this Match.
        :type label: str
        """

        self._label = label

    @property
    def match_id(self):
        """Gets the match_id of this Match.

        The match id.

        :return: The match_id of this Match.
        :rtype: int
        """
        return self._match_id

    @match_id.setter
    def match_id(self, match_id):
        """Sets the match_id of this Match.

        The match id.

        :param match_id: The match_id of this Match.
        :type match_id: int
        """

        self._match_id = match_id

    @property
    def score(self):
        """Gets the score of this Match.

        Confidence score of the image match.

        :return: The score of this Match.
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this Match.

        Confidence score of the image match.

        :param score: The score of this Match.
        :type score: float
        """

        self._score = score

    @property
    def source(self):
        """Gets the source of this Match.

        The source.

        :return: The source of this Match.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Match.

        The source.

        :param source: The source of this Match.
        :type source: str
        """

        self._source = source

    @property
    def tags(self):
        """Gets the tags of this Match.

        The tags for match details.

        :return: The tags of this Match.
        :rtype: List[int]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Match.

        The tags for match details.

        :param tags: The tags of this Match.
        :type tags: List[int]
        """

        self._tags = tags
