# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class JobExecutionReportDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, msg: str=None, ts: str=None):
        """JobExecutionReportDetails - a model defined in OpenAPI

        :param msg: The msg of this JobExecutionReportDetails.
        :param ts: The ts of this JobExecutionReportDetails.
        """
        self.openapi_types = {
            'msg': str,
            'ts': str
        }

        self.attribute_map = {
            'msg': 'Msg',
            'ts': 'Ts'
        }

        self._msg = msg
        self._ts = ts

    @classmethod
    def from_dict(cls, dikt: dict) -> 'JobExecutionReportDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The JobExecutionReportDetails of this JobExecutionReportDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def msg(self):
        """Gets the msg of this JobExecutionReportDetails.

        Message details.

        :return: The msg of this JobExecutionReportDetails.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg):
        """Sets the msg of this JobExecutionReportDetails.

        Message details.

        :param msg: The msg of this JobExecutionReportDetails.
        :type msg: str
        """

        self._msg = msg

    @property
    def ts(self):
        """Gets the ts of this JobExecutionReportDetails.

        Time details.

        :return: The ts of this JobExecutionReportDetails.
        :rtype: str
        """
        return self._ts

    @ts.setter
    def ts(self, ts):
        """Sets the ts of this JobExecutionReportDetails.

        Time details.

        :param ts: The ts of this JobExecutionReportDetails.
        :type ts: str
        """

        self._ts = ts
