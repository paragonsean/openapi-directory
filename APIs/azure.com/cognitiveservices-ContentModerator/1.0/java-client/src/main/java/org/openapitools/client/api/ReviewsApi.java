/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.Frames;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobId;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.ReviewsAddVideoTranscriptModerationResultRequestInner;
import org.openapitools.client.model.ReviewsCreateJobRequest;
import org.openapitools.client.model.ReviewsCreateReviewsRequestInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReviewsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReviewsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReviewsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for reviewsAddVideoFrame
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param timescale Timescale of the video you are adding frames to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsAddVideoFrameCall(String teamName, String reviewId, Integer timescale, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (timescale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timescale", timescale));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsAddVideoFrameValidateBeforeCall(String teamName, String reviewId, Integer timescale, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsAddVideoFrame(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsAddVideoFrame(Async)");
        }

        return reviewsAddVideoFrameCall(teamName, reviewId, timescale, _callback);

    }

    /**
     * 
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param timescale Timescale of the video you are adding frames to. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void reviewsAddVideoFrame(String teamName, String reviewId, Integer timescale) throws ApiException {
        reviewsAddVideoFrameWithHttpInfo(teamName, reviewId, timescale);
    }

    /**
     * 
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param timescale Timescale of the video you are adding frames to. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reviewsAddVideoFrameWithHttpInfo(String teamName, String reviewId, Integer timescale) throws ApiException {
        okhttp3.Call localVarCall = reviewsAddVideoFrameValidateBeforeCall(teamName, reviewId, timescale, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param timescale Timescale of the video you are adding frames to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsAddVideoFrameAsync(String teamName, String reviewId, Integer timescale, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsAddVideoFrameValidateBeforeCall(teamName, reviewId, timescale, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsAddVideoTranscript
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param contentType The content type. (required)
     * @param vtTFile Transcript file of the video. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsAddVideoTranscriptCall(String teamName, String reviewId, String contentType, Object vtTFile, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = vtTFile;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsAddVideoTranscriptValidateBeforeCall(String teamName, String reviewId, String contentType, Object vtTFile, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsAddVideoTranscript(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsAddVideoTranscript(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling reviewsAddVideoTranscript(Async)");
        }

        // verify the required parameter 'vtTFile' is set
        if (vtTFile == null) {
            throw new ApiException("Missing the required parameter 'vtTFile' when calling reviewsAddVideoTranscript(Async)");
        }

        return reviewsAddVideoTranscriptCall(teamName, reviewId, contentType, vtTFile, _callback);

    }

    /**
     * 
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param contentType The content type. (required)
     * @param vtTFile Transcript file of the video. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void reviewsAddVideoTranscript(String teamName, String reviewId, String contentType, Object vtTFile) throws ApiException {
        reviewsAddVideoTranscriptWithHttpInfo(teamName, reviewId, contentType, vtTFile);
    }

    /**
     * 
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param contentType The content type. (required)
     * @param vtTFile Transcript file of the video. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reviewsAddVideoTranscriptWithHttpInfo(String teamName, String reviewId, String contentType, Object vtTFile) throws ApiException {
        okhttp3.Call localVarCall = reviewsAddVideoTranscriptValidateBeforeCall(teamName, reviewId, contentType, vtTFile, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param contentType The content type. (required)
     * @param vtTFile Transcript file of the video. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsAddVideoTranscriptAsync(String teamName, String reviewId, String contentType, Object vtTFile, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsAddVideoTranscriptValidateBeforeCall(teamName, reviewId, contentType, vtTFile, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsAddVideoTranscriptModerationResult
     * @param contentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param transcriptModerationBody Body for add video transcript moderation result API (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsAddVideoTranscriptModerationResultCall(String contentType, String teamName, String reviewId, List<ReviewsAddVideoTranscriptModerationResultRequestInner> transcriptModerationBody, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transcriptModerationBody;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsAddVideoTranscriptModerationResultValidateBeforeCall(String contentType, String teamName, String reviewId, List<ReviewsAddVideoTranscriptModerationResultRequestInner> transcriptModerationBody, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling reviewsAddVideoTranscriptModerationResult(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsAddVideoTranscriptModerationResult(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsAddVideoTranscriptModerationResult(Async)");
        }

        // verify the required parameter 'transcriptModerationBody' is set
        if (transcriptModerationBody == null) {
            throw new ApiException("Missing the required parameter 'transcriptModerationBody' when calling reviewsAddVideoTranscriptModerationResult(Async)");
        }

        return reviewsAddVideoTranscriptModerationResultCall(contentType, teamName, reviewId, transcriptModerationBody, _callback);

    }

    /**
     * 
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     * @param contentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param transcriptModerationBody Body for add video transcript moderation result API (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void reviewsAddVideoTranscriptModerationResult(String contentType, String teamName, String reviewId, List<ReviewsAddVideoTranscriptModerationResultRequestInner> transcriptModerationBody) throws ApiException {
        reviewsAddVideoTranscriptModerationResultWithHttpInfo(contentType, teamName, reviewId, transcriptModerationBody);
    }

    /**
     * 
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     * @param contentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param transcriptModerationBody Body for add video transcript moderation result API (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reviewsAddVideoTranscriptModerationResultWithHttpInfo(String contentType, String teamName, String reviewId, List<ReviewsAddVideoTranscriptModerationResultRequestInner> transcriptModerationBody) throws ApiException {
        okhttp3.Call localVarCall = reviewsAddVideoTranscriptModerationResultValidateBeforeCall(contentType, teamName, reviewId, transcriptModerationBody, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     * @param contentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param transcriptModerationBody Body for add video transcript moderation result API (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsAddVideoTranscriptModerationResultAsync(String contentType, String teamName, String reviewId, List<ReviewsAddVideoTranscriptModerationResultRequestInner> transcriptModerationBody, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsAddVideoTranscriptModerationResultValidateBeforeCall(contentType, teamName, reviewId, transcriptModerationBody, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsCreateJob
     * @param teamName Your team name. (required)
     * @param contentType Image, Text or Video. (required)
     * @param contentId Id/Name to identify the content submitted. (required)
     * @param workflowName Workflow Name that you want to invoke. (required)
     * @param contentType2 The content type. (required)
     * @param content Content to evaluate. (required)
     * @param callBackEndpoint Callback endpoint for posting the create job result. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsCreateJobCall(String teamName, String contentType, String contentId, String workflowName, String contentType2, ReviewsCreateJobRequest content, String callBackEndpoint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = content;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/jobs"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContentType", contentType));
        }

        if (contentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ContentId", contentId));
        }

        if (workflowName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("WorkflowName", workflowName));
        }

        if (callBackEndpoint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CallBackEndpoint", callBackEndpoint));
        }

        if (contentType2 != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType2));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "image/jpeg"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsCreateJobValidateBeforeCall(String teamName, String contentType, String contentId, String workflowName, String contentType2, ReviewsCreateJobRequest content, String callBackEndpoint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsCreateJob(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling reviewsCreateJob(Async)");
        }

        // verify the required parameter 'contentId' is set
        if (contentId == null) {
            throw new ApiException("Missing the required parameter 'contentId' when calling reviewsCreateJob(Async)");
        }

        // verify the required parameter 'workflowName' is set
        if (workflowName == null) {
            throw new ApiException("Missing the required parameter 'workflowName' when calling reviewsCreateJob(Async)");
        }

        // verify the required parameter 'contentType2' is set
        if (contentType2 == null) {
            throw new ApiException("Missing the required parameter 'contentType2' when calling reviewsCreateJob(Async)");
        }

        // verify the required parameter 'content' is set
        if (content == null) {
            throw new ApiException("Missing the required parameter 'content' when calling reviewsCreateJob(Async)");
        }

        return reviewsCreateJobCall(teamName, contentType, contentId, workflowName, contentType2, content, callBackEndpoint, _callback);

    }

    /**
     * 
     * A job Id will be returned for the content posted on this endpoint.     Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;    &lt;p&gt;  &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {&lt;br/&gt;    \&quot;JobId\&quot;: \&quot;&lt;Job Id&gt;,&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id, if the Job resulted in a Review to be created&gt;\&quot;,&lt;br/&gt;    \&quot;WorkFlowId\&quot;: \&quot;default\&quot;,&lt;br/&gt;    \&quot;Status\&quot;: \&quot;&lt;This will be one of Complete, InProgress, Error&gt;\&quot;,&lt;br/&gt;    \&quot;ContentType\&quot;: \&quot;Image\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;This is the ContentId that was specified on input&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Job\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;  &lt;p&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param contentType Image, Text or Video. (required)
     * @param contentId Id/Name to identify the content submitted. (required)
     * @param workflowName Workflow Name that you want to invoke. (required)
     * @param contentType2 The content type. (required)
     * @param content Content to evaluate. (required)
     * @param callBackEndpoint Callback endpoint for posting the create job result. (optional)
     * @return JobId
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public JobId reviewsCreateJob(String teamName, String contentType, String contentId, String workflowName, String contentType2, ReviewsCreateJobRequest content, String callBackEndpoint) throws ApiException {
        ApiResponse<JobId> localVarResp = reviewsCreateJobWithHttpInfo(teamName, contentType, contentId, workflowName, contentType2, content, callBackEndpoint);
        return localVarResp.getData();
    }

    /**
     * 
     * A job Id will be returned for the content posted on this endpoint.     Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;    &lt;p&gt;  &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {&lt;br/&gt;    \&quot;JobId\&quot;: \&quot;&lt;Job Id&gt;,&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id, if the Job resulted in a Review to be created&gt;\&quot;,&lt;br/&gt;    \&quot;WorkFlowId\&quot;: \&quot;default\&quot;,&lt;br/&gt;    \&quot;Status\&quot;: \&quot;&lt;This will be one of Complete, InProgress, Error&gt;\&quot;,&lt;br/&gt;    \&quot;ContentType\&quot;: \&quot;Image\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;This is the ContentId that was specified on input&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Job\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;  &lt;p&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param contentType Image, Text or Video. (required)
     * @param contentId Id/Name to identify the content submitted. (required)
     * @param workflowName Workflow Name that you want to invoke. (required)
     * @param contentType2 The content type. (required)
     * @param content Content to evaluate. (required)
     * @param callBackEndpoint Callback endpoint for posting the create job result. (optional)
     * @return ApiResponse&lt;JobId&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<JobId> reviewsCreateJobWithHttpInfo(String teamName, String contentType, String contentId, String workflowName, String contentType2, ReviewsCreateJobRequest content, String callBackEndpoint) throws ApiException {
        okhttp3.Call localVarCall = reviewsCreateJobValidateBeforeCall(teamName, contentType, contentId, workflowName, contentType2, content, callBackEndpoint, null);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * A job Id will be returned for the content posted on this endpoint.     Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;    &lt;p&gt;  &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {&lt;br/&gt;    \&quot;JobId\&quot;: \&quot;&lt;Job Id&gt;,&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id, if the Job resulted in a Review to be created&gt;\&quot;,&lt;br/&gt;    \&quot;WorkFlowId\&quot;: \&quot;default\&quot;,&lt;br/&gt;    \&quot;Status\&quot;: \&quot;&lt;This will be one of Complete, InProgress, Error&gt;\&quot;,&lt;br/&gt;    \&quot;ContentType\&quot;: \&quot;Image\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;This is the ContentId that was specified on input&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Job\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;  &lt;p&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param contentType Image, Text or Video. (required)
     * @param contentId Id/Name to identify the content submitted. (required)
     * @param workflowName Workflow Name that you want to invoke. (required)
     * @param contentType2 The content type. (required)
     * @param content Content to evaluate. (required)
     * @param callBackEndpoint Callback endpoint for posting the create job result. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsCreateJobAsync(String teamName, String contentType, String contentId, String workflowName, String contentType2, ReviewsCreateJobRequest content, String callBackEndpoint, final ApiCallback<JobId> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsCreateJobValidateBeforeCall(teamName, contentType, contentId, workflowName, contentType2, content, callBackEndpoint, _callback);
        Type localVarReturnType = new TypeToken<JobId>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsCreateReviews
     * @param urlContentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param createReviewBody Body for create reviews API (required)
     * @param subTeam SubTeam of your team, you want to assign the created review to. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsCreateReviewsCall(String urlContentType, String teamName, List<ReviewsCreateReviewsRequestInner> createReviewBody, String subTeam, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createReviewBody;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subTeam != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subTeam", subTeam));
        }

        if (urlContentType != null) {
            localVarHeaderParams.put("UrlContentType", localVarApiClient.parameterToString(urlContentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsCreateReviewsValidateBeforeCall(String urlContentType, String teamName, List<ReviewsCreateReviewsRequestInner> createReviewBody, String subTeam, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'urlContentType' is set
        if (urlContentType == null) {
            throw new ApiException("Missing the required parameter 'urlContentType' when calling reviewsCreateReviews(Async)");
        }

        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsCreateReviews(Async)");
        }

        // verify the required parameter 'createReviewBody' is set
        if (createReviewBody == null) {
            throw new ApiException("Missing the required parameter 'createReviewBody' when calling reviewsCreateReviews(Async)");
        }

        return reviewsCreateReviewsCall(urlContentType, teamName, createReviewBody, subTeam, _callback);

    }

    /**
     * 
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param urlContentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param createReviewBody Body for create reviews API (required)
     * @param subTeam SubTeam of your team, you want to assign the created review to. (optional)
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public List<String> reviewsCreateReviews(String urlContentType, String teamName, List<ReviewsCreateReviewsRequestInner> createReviewBody, String subTeam) throws ApiException {
        ApiResponse<List<String>> localVarResp = reviewsCreateReviewsWithHttpInfo(urlContentType, teamName, createReviewBody, subTeam);
        return localVarResp.getData();
    }

    /**
     * 
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param urlContentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param createReviewBody Body for create reviews API (required)
     * @param subTeam SubTeam of your team, you want to assign the created review to. (optional)
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<String>> reviewsCreateReviewsWithHttpInfo(String urlContentType, String teamName, List<ReviewsCreateReviewsRequestInner> createReviewBody, String subTeam) throws ApiException {
        okhttp3.Call localVarCall = reviewsCreateReviewsValidateBeforeCall(urlContentType, teamName, createReviewBody, subTeam, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param urlContentType The content type. (required)
     * @param teamName Your team name. (required)
     * @param createReviewBody Body for create reviews API (required)
     * @param subTeam SubTeam of your team, you want to assign the created review to. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsCreateReviewsAsync(String urlContentType, String teamName, List<ReviewsCreateReviewsRequestInner> createReviewBody, String subTeam, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsCreateReviewsValidateBeforeCall(urlContentType, teamName, createReviewBody, subTeam, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsGetJobDetails
     * @param teamName Your Team Name. (required)
     * @param jobId Id of the job. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetJobDetailsCall(String teamName, String jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "JobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsGetJobDetailsValidateBeforeCall(String teamName, String jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsGetJobDetails(Async)");
        }

        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling reviewsGetJobDetails(Async)");
        }

        return reviewsGetJobDetailsCall(teamName, jobId, _callback);

    }

    /**
     * 
     * Get the Job Details for a Job Id.
     * @param teamName Your Team Name. (required)
     * @param jobId Id of the job. (required)
     * @return Job
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Job reviewsGetJobDetails(String teamName, String jobId) throws ApiException {
        ApiResponse<Job> localVarResp = reviewsGetJobDetailsWithHttpInfo(teamName, jobId);
        return localVarResp.getData();
    }

    /**
     * 
     * Get the Job Details for a Job Id.
     * @param teamName Your Team Name. (required)
     * @param jobId Id of the job. (required)
     * @return ApiResponse&lt;Job&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Job> reviewsGetJobDetailsWithHttpInfo(String teamName, String jobId) throws ApiException {
        okhttp3.Call localVarCall = reviewsGetJobDetailsValidateBeforeCall(teamName, jobId, null);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the Job Details for a Job Id.
     * @param teamName Your Team Name. (required)
     * @param jobId Id of the job. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetJobDetailsAsync(String teamName, String jobId, final ApiCallback<Job> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsGetJobDetailsValidateBeforeCall(teamName, jobId, _callback);
        Type localVarReturnType = new TypeToken<Job>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsGetReview
     * @param teamName Your Team Name. (required)
     * @param reviewId Id of the review. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetReviewCall(String teamName, String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsGetReviewValidateBeforeCall(String teamName, String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsGetReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsGetReview(Async)");
        }

        return reviewsGetReviewCall(teamName, reviewId, _callback);

    }

    /**
     * 
     * Returns review details for the review Id passed.
     * @param teamName Your Team Name. (required)
     * @param reviewId Id of the review. (required)
     * @return Review
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Review reviewsGetReview(String teamName, String reviewId) throws ApiException {
        ApiResponse<Review> localVarResp = reviewsGetReviewWithHttpInfo(teamName, reviewId);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns review details for the review Id passed.
     * @param teamName Your Team Name. (required)
     * @param reviewId Id of the review. (required)
     * @return ApiResponse&lt;Review&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Review> reviewsGetReviewWithHttpInfo(String teamName, String reviewId) throws ApiException {
        okhttp3.Call localVarCall = reviewsGetReviewValidateBeforeCall(teamName, reviewId, null);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns review details for the review Id passed.
     * @param teamName Your Team Name. (required)
     * @param reviewId Id of the review. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetReviewAsync(String teamName, String reviewId, final ApiCallback<Review> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsGetReviewValidateBeforeCall(teamName, reviewId, _callback);
        Type localVarReturnType = new TypeToken<Review>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsGetVideoFrames
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames. (optional)
     * @param noOfRecords Number of frames to fetch. (optional)
     * @param filter Get frames filtered by tags. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetVideoFramesCall(String teamName, String reviewId, Integer startSeed, Integer noOfRecords, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startSeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startSeed", startSeed));
        }

        if (noOfRecords != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("noOfRecords", noOfRecords));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsGetVideoFramesValidateBeforeCall(String teamName, String reviewId, Integer startSeed, Integer noOfRecords, String filter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsGetVideoFrames(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsGetVideoFrames(Async)");
        }

        return reviewsGetVideoFramesCall(teamName, reviewId, startSeed, noOfRecords, filter, _callback);

    }

    /**
     * 
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames. (optional)
     * @param noOfRecords Number of frames to fetch. (optional)
     * @param filter Get frames filtered by tags. (optional)
     * @return Frames
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Frames reviewsGetVideoFrames(String teamName, String reviewId, Integer startSeed, Integer noOfRecords, String filter) throws ApiException {
        ApiResponse<Frames> localVarResp = reviewsGetVideoFramesWithHttpInfo(teamName, reviewId, startSeed, noOfRecords, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames. (optional)
     * @param noOfRecords Number of frames to fetch. (optional)
     * @param filter Get frames filtered by tags. (optional)
     * @return ApiResponse&lt;Frames&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Frames> reviewsGetVideoFramesWithHttpInfo(String teamName, String reviewId, Integer startSeed, Integer noOfRecords, String filter) throws ApiException {
        okhttp3.Call localVarCall = reviewsGetVideoFramesValidateBeforeCall(teamName, reviewId, startSeed, noOfRecords, filter, null);
        Type localVarReturnType = new TypeToken<Frames>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param startSeed Time stamp of the frame from where you want to start fetching the frames. (optional)
     * @param noOfRecords Number of frames to fetch. (optional)
     * @param filter Get frames filtered by tags. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsGetVideoFramesAsync(String teamName, String reviewId, Integer startSeed, Integer noOfRecords, String filter, final ApiCallback<Frames> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsGetVideoFramesValidateBeforeCall(teamName, reviewId, startSeed, noOfRecords, filter, _callback);
        Type localVarReturnType = new TypeToken<Frames>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for reviewsPublishVideoReview
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsPublishVideoReviewCall(String teamName, String reviewId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish"
            .replace("{" + "teamName" + "}", localVarApiClient.escapeString(teamName.toString()))
            .replace("{" + "reviewId" + "}", localVarApiClient.escapeString(reviewId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call reviewsPublishVideoReviewValidateBeforeCall(String teamName, String reviewId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'teamName' is set
        if (teamName == null) {
            throw new ApiException("Missing the required parameter 'teamName' when calling reviewsPublishVideoReview(Async)");
        }

        // verify the required parameter 'reviewId' is set
        if (reviewId == null) {
            throw new ApiException("Missing the required parameter 'reviewId' when calling reviewsPublishVideoReview(Async)");
        }

        return reviewsPublishVideoReviewCall(teamName, reviewId, _callback);

    }

    /**
     * 
     * Publish video review to make it available for review.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public void reviewsPublishVideoReview(String teamName, String reviewId) throws ApiException {
        reviewsPublishVideoReviewWithHttpInfo(teamName, reviewId);
    }

    /**
     * 
     * Publish video review to make it available for review.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> reviewsPublishVideoReviewWithHttpInfo(String teamName, String reviewId) throws ApiException {
        okhttp3.Call localVarCall = reviewsPublishVideoReviewValidateBeforeCall(teamName, reviewId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Publish video review to make it available for review.
     * @param teamName Your team name. (required)
     * @param reviewId Id of the review. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call reviewsPublishVideoReviewAsync(String teamName, String reviewId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = reviewsPublishVideoReviewValidateBeforeCall(teamName, reviewId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
