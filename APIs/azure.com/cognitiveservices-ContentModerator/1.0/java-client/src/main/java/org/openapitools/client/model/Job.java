/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.JobExecutionReportDetails;
import org.openapitools.client.model.KeyValuePair;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Job object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Job {
  public static final String SERIALIZED_NAME_CALL_BACK_ENDPOINT = "CallBackEndpoint";
  @SerializedName(SERIALIZED_NAME_CALL_BACK_ENDPOINT)
  private String callBackEndpoint;

  public static final String SERIALIZED_NAME_ID = "Id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_JOB_EXECUTION_REPORT = "JobExecutionReport";
  @SerializedName(SERIALIZED_NAME_JOB_EXECUTION_REPORT)
  private List<JobExecutionReportDetails> jobExecutionReport = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_META_DATA = "ResultMetaData";
  @SerializedName(SERIALIZED_NAME_RESULT_META_DATA)
  private List<KeyValuePair> resultMetaData = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW_ID = "ReviewId";
  @SerializedName(SERIALIZED_NAME_REVIEW_ID)
  private String reviewId;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TEAM_NAME = "TeamName";
  @SerializedName(SERIALIZED_NAME_TEAM_NAME)
  private String teamName;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public static final String SERIALIZED_NAME_WORKFLOW_ID = "WorkflowId";
  @SerializedName(SERIALIZED_NAME_WORKFLOW_ID)
  private String workflowId;

  public Job() {
  }

  public Job callBackEndpoint(String callBackEndpoint) {
    this.callBackEndpoint = callBackEndpoint;
    return this;
  }

  /**
   * The callback endpoint.
   * @return callBackEndpoint
   */
  @javax.annotation.Nullable
  public String getCallBackEndpoint() {
    return callBackEndpoint;
  }

  public void setCallBackEndpoint(String callBackEndpoint) {
    this.callBackEndpoint = callBackEndpoint;
  }


  public Job id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The job id.
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Job jobExecutionReport(List<JobExecutionReportDetails> jobExecutionReport) {
    this.jobExecutionReport = jobExecutionReport;
    return this;
  }

  public Job addJobExecutionReportItem(JobExecutionReportDetails jobExecutionReportItem) {
    if (this.jobExecutionReport == null) {
      this.jobExecutionReport = new ArrayList<>();
    }
    this.jobExecutionReport.add(jobExecutionReportItem);
    return this;
  }

  /**
   * Job execution report- Array of KeyValue pairs object.
   * @return jobExecutionReport
   */
  @javax.annotation.Nullable
  public List<JobExecutionReportDetails> getJobExecutionReport() {
    return jobExecutionReport;
  }

  public void setJobExecutionReport(List<JobExecutionReportDetails> jobExecutionReport) {
    this.jobExecutionReport = jobExecutionReport;
  }


  public Job resultMetaData(List<KeyValuePair> resultMetaData) {
    this.resultMetaData = resultMetaData;
    return this;
  }

  public Job addResultMetaDataItem(KeyValuePair resultMetaDataItem) {
    if (this.resultMetaData == null) {
      this.resultMetaData = new ArrayList<>();
    }
    this.resultMetaData.add(resultMetaDataItem);
    return this;
  }

  /**
   * Array of KeyValue pairs.
   * @return resultMetaData
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getResultMetaData() {
    return resultMetaData;
  }

  public void setResultMetaData(List<KeyValuePair> resultMetaData) {
    this.resultMetaData = resultMetaData;
  }


  public Job reviewId(String reviewId) {
    this.reviewId = reviewId;
    return this;
  }

  /**
   * Review Id if one is created.
   * @return reviewId
   */
  @javax.annotation.Nullable
  public String getReviewId() {
    return reviewId;
  }

  public void setReviewId(String reviewId) {
    this.reviewId = reviewId;
  }


  public Job status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status string (&lt;Pending, Failed, Completed&gt;).
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Job teamName(String teamName) {
    this.teamName = teamName;
    return this;
  }

  /**
   * The team name associated with the job.
   * @return teamName
   */
  @javax.annotation.Nullable
  public String getTeamName() {
    return teamName;
  }

  public void setTeamName(String teamName) {
    this.teamName = teamName;
  }


  public Job type(String type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the content.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }


  public Job workflowId(String workflowId) {
    this.workflowId = workflowId;
    return this;
  }

  /**
   * The Id of the workflow.
   * @return workflowId
   */
  @javax.annotation.Nullable
  public String getWorkflowId() {
    return workflowId;
  }

  public void setWorkflowId(String workflowId) {
    this.workflowId = workflowId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Job job = (Job) o;
    return Objects.equals(this.callBackEndpoint, job.callBackEndpoint) &&
        Objects.equals(this.id, job.id) &&
        Objects.equals(this.jobExecutionReport, job.jobExecutionReport) &&
        Objects.equals(this.resultMetaData, job.resultMetaData) &&
        Objects.equals(this.reviewId, job.reviewId) &&
        Objects.equals(this.status, job.status) &&
        Objects.equals(this.teamName, job.teamName) &&
        Objects.equals(this.type, job.type) &&
        Objects.equals(this.workflowId, job.workflowId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callBackEndpoint, id, jobExecutionReport, resultMetaData, reviewId, status, teamName, type, workflowId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Job {\n");
    sb.append("    callBackEndpoint: ").append(toIndentedString(callBackEndpoint)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    jobExecutionReport: ").append(toIndentedString(jobExecutionReport)).append("\n");
    sb.append("    resultMetaData: ").append(toIndentedString(resultMetaData)).append("\n");
    sb.append("    reviewId: ").append(toIndentedString(reviewId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    teamName: ").append(toIndentedString(teamName)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    workflowId: ").append(toIndentedString(workflowId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallBackEndpoint");
    openapiFields.add("Id");
    openapiFields.add("JobExecutionReport");
    openapiFields.add("ResultMetaData");
    openapiFields.add("ReviewId");
    openapiFields.add("Status");
    openapiFields.add("TeamName");
    openapiFields.add("Type");
    openapiFields.add("WorkflowId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Job
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Job.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Job is not found in the empty JSON string", Job.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Job.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Job` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CallBackEndpoint") != null && !jsonObj.get("CallBackEndpoint").isJsonNull()) && !jsonObj.get("CallBackEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallBackEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallBackEndpoint").toString()));
      }
      if ((jsonObj.get("Id") != null && !jsonObj.get("Id").isJsonNull()) && !jsonObj.get("Id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Id").toString()));
      }
      if (jsonObj.get("JobExecutionReport") != null && !jsonObj.get("JobExecutionReport").isJsonNull()) {
        JsonArray jsonArrayjobExecutionReport = jsonObj.getAsJsonArray("JobExecutionReport");
        if (jsonArrayjobExecutionReport != null) {
          // ensure the json data is an array
          if (!jsonObj.get("JobExecutionReport").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `JobExecutionReport` to be an array in the JSON string but got `%s`", jsonObj.get("JobExecutionReport").toString()));
          }

          // validate the optional field `JobExecutionReport` (array)
          for (int i = 0; i < jsonArrayjobExecutionReport.size(); i++) {
            JobExecutionReportDetails.validateJsonElement(jsonArrayjobExecutionReport.get(i));
          };
        }
      }
      if (jsonObj.get("ResultMetaData") != null && !jsonObj.get("ResultMetaData").isJsonNull()) {
        JsonArray jsonArrayresultMetaData = jsonObj.getAsJsonArray("ResultMetaData");
        if (jsonArrayresultMetaData != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ResultMetaData").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ResultMetaData` to be an array in the JSON string but got `%s`", jsonObj.get("ResultMetaData").toString()));
          }

          // validate the optional field `ResultMetaData` (array)
          for (int i = 0; i < jsonArrayresultMetaData.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArrayresultMetaData.get(i));
          };
        }
      }
      if ((jsonObj.get("ReviewId") != null && !jsonObj.get("ReviewId").isJsonNull()) && !jsonObj.get("ReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReviewId").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("TeamName") != null && !jsonObj.get("TeamName").isJsonNull()) && !jsonObj.get("TeamName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TeamName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TeamName").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      if ((jsonObj.get("WorkflowId") != null && !jsonObj.get("WorkflowId").isJsonNull()) && !jsonObj.get("WorkflowId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `WorkflowId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("WorkflowId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Job.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Job' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Job> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Job.class));

       return (TypeAdapter<T>) new TypeAdapter<Job>() {
           @Override
           public void write(JsonWriter out, Job value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Job read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Job given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Job
   * @throws IOException if the JSON string is invalid with respect to Job
   */
  public static Job fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Job.class);
  }

  /**
   * Convert an instance of Job to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

