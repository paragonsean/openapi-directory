/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Face;
import org.openapitools.client.model.KeyValuePair;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Request object the contains found faces.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FoundFaces {
  public static final String SERIALIZED_NAME_ADVANCED_INFO = "AdvancedInfo";
  @SerializedName(SERIALIZED_NAME_ADVANCED_INFO)
  private List<KeyValuePair> advancedInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CACHE_ID = "CacheId";
  @SerializedName(SERIALIZED_NAME_CACHE_ID)
  private String cacheId;

  public static final String SERIALIZED_NAME_COUNT = "Count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_FACES = "Faces";
  @SerializedName(SERIALIZED_NAME_FACES)
  private List<Face> faces = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT = "Result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private Boolean result;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TRACKING_ID = "TrackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public FoundFaces() {
  }

  public FoundFaces advancedInfo(List<KeyValuePair> advancedInfo) {
    this.advancedInfo = advancedInfo;
    return this;
  }

  public FoundFaces addAdvancedInfoItem(KeyValuePair advancedInfoItem) {
    if (this.advancedInfo == null) {
      this.advancedInfo = new ArrayList<>();
    }
    this.advancedInfo.add(advancedInfoItem);
    return this;
  }

  /**
   * The advanced info.
   * @return advancedInfo
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getAdvancedInfo() {
    return advancedInfo;
  }

  public void setAdvancedInfo(List<KeyValuePair> advancedInfo) {
    this.advancedInfo = advancedInfo;
  }


  public FoundFaces cacheId(String cacheId) {
    this.cacheId = cacheId;
    return this;
  }

  /**
   * The cache id.
   * @return cacheId
   */
  @javax.annotation.Nullable
  public String getCacheId() {
    return cacheId;
  }

  public void setCacheId(String cacheId) {
    this.cacheId = cacheId;
  }


  public FoundFaces count(Integer count) {
    this.count = count;
    return this;
  }

  /**
   * Number of faces found.
   * @return count
   */
  @javax.annotation.Nullable
  public Integer getCount() {
    return count;
  }

  public void setCount(Integer count) {
    this.count = count;
  }


  public FoundFaces faces(List<Face> faces) {
    this.faces = faces;
    return this;
  }

  public FoundFaces addFacesItem(Face facesItem) {
    if (this.faces == null) {
      this.faces = new ArrayList<>();
    }
    this.faces.add(facesItem);
    return this;
  }

  /**
   * The list of faces.
   * @return faces
   */
  @javax.annotation.Nullable
  public List<Face> getFaces() {
    return faces;
  }

  public void setFaces(List<Face> faces) {
    this.faces = faces;
  }


  public FoundFaces result(Boolean result) {
    this.result = result;
    return this;
  }

  /**
   * True if result was found.
   * @return result
   */
  @javax.annotation.Nullable
  public Boolean getResult() {
    return result;
  }

  public void setResult(Boolean result) {
    this.result = result;
  }


  public FoundFaces status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public FoundFaces trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * The tracking id.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FoundFaces foundFaces = (FoundFaces) o;
    return Objects.equals(this.advancedInfo, foundFaces.advancedInfo) &&
        Objects.equals(this.cacheId, foundFaces.cacheId) &&
        Objects.equals(this.count, foundFaces.count) &&
        Objects.equals(this.faces, foundFaces.faces) &&
        Objects.equals(this.result, foundFaces.result) &&
        Objects.equals(this.status, foundFaces.status) &&
        Objects.equals(this.trackingId, foundFaces.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedInfo, cacheId, count, faces, result, status, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FoundFaces {\n");
    sb.append("    advancedInfo: ").append(toIndentedString(advancedInfo)).append("\n");
    sb.append("    cacheId: ").append(toIndentedString(cacheId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    faces: ").append(toIndentedString(faces)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdvancedInfo");
    openapiFields.add("CacheId");
    openapiFields.add("Count");
    openapiFields.add("Faces");
    openapiFields.add("Result");
    openapiFields.add("Status");
    openapiFields.add("TrackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FoundFaces
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FoundFaces.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FoundFaces is not found in the empty JSON string", FoundFaces.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FoundFaces.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FoundFaces` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("AdvancedInfo") != null && !jsonObj.get("AdvancedInfo").isJsonNull()) {
        JsonArray jsonArrayadvancedInfo = jsonObj.getAsJsonArray("AdvancedInfo");
        if (jsonArrayadvancedInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("AdvancedInfo").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `AdvancedInfo` to be an array in the JSON string but got `%s`", jsonObj.get("AdvancedInfo").toString()));
          }

          // validate the optional field `AdvancedInfo` (array)
          for (int i = 0; i < jsonArrayadvancedInfo.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArrayadvancedInfo.get(i));
          };
        }
      }
      if ((jsonObj.get("CacheId") != null && !jsonObj.get("CacheId").isJsonNull()) && !jsonObj.get("CacheId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CacheId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CacheId").toString()));
      }
      if (jsonObj.get("Faces") != null && !jsonObj.get("Faces").isJsonNull()) {
        JsonArray jsonArrayfaces = jsonObj.getAsJsonArray("Faces");
        if (jsonArrayfaces != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Faces").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Faces` to be an array in the JSON string but got `%s`", jsonObj.get("Faces").toString()));
          }

          // validate the optional field `Faces` (array)
          for (int i = 0; i < jsonArrayfaces.size(); i++) {
            Face.validateJsonElement(jsonArrayfaces.get(i));
          };
        }
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TrackingId") != null && !jsonObj.get("TrackingId").isJsonNull()) && !jsonObj.get("TrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FoundFaces.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FoundFaces' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FoundFaces> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FoundFaces.class));

       return (TypeAdapter<T>) new TypeAdapter<FoundFaces>() {
           @Override
           public void write(JsonWriter out, FoundFaces value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FoundFaces read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FoundFaces given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FoundFaces
   * @throws IOException if the JSON string is invalid with respect to FoundFaces
   */
  public static FoundFaces fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FoundFaces.class);
  }

  /**
   * Convert an instance of FoundFaces to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

