/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ClassificationCategory1;
import org.openapitools.client.model.ClassificationCategory2;
import org.openapitools.client.model.ClassificationCategory3;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The classification details of the text.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Classification {
  public static final String SERIALIZED_NAME_CATEGORY1 = "Category1";
  @SerializedName(SERIALIZED_NAME_CATEGORY1)
  private ClassificationCategory1 category1;

  public static final String SERIALIZED_NAME_CATEGORY2 = "Category2";
  @SerializedName(SERIALIZED_NAME_CATEGORY2)
  private ClassificationCategory2 category2;

  public static final String SERIALIZED_NAME_CATEGORY3 = "Category3";
  @SerializedName(SERIALIZED_NAME_CATEGORY3)
  private ClassificationCategory3 category3;

  public static final String SERIALIZED_NAME_REVIEW_RECOMMENDED = "ReviewRecommended";
  @SerializedName(SERIALIZED_NAME_REVIEW_RECOMMENDED)
  private Boolean reviewRecommended;

  public Classification() {
  }

  public Classification category1(ClassificationCategory1 category1) {
    this.category1 = category1;
    return this;
  }

  /**
   * Get category1
   * @return category1
   */
  @javax.annotation.Nullable
  public ClassificationCategory1 getCategory1() {
    return category1;
  }

  public void setCategory1(ClassificationCategory1 category1) {
    this.category1 = category1;
  }


  public Classification category2(ClassificationCategory2 category2) {
    this.category2 = category2;
    return this;
  }

  /**
   * Get category2
   * @return category2
   */
  @javax.annotation.Nullable
  public ClassificationCategory2 getCategory2() {
    return category2;
  }

  public void setCategory2(ClassificationCategory2 category2) {
    this.category2 = category2;
  }


  public Classification category3(ClassificationCategory3 category3) {
    this.category3 = category3;
    return this;
  }

  /**
   * Get category3
   * @return category3
   */
  @javax.annotation.Nullable
  public ClassificationCategory3 getCategory3() {
    return category3;
  }

  public void setCategory3(ClassificationCategory3 category3) {
    this.category3 = category3;
  }


  public Classification reviewRecommended(Boolean reviewRecommended) {
    this.reviewRecommended = reviewRecommended;
    return this;
  }

  /**
   * The review recommended flag.
   * @return reviewRecommended
   */
  @javax.annotation.Nullable
  public Boolean getReviewRecommended() {
    return reviewRecommended;
  }

  public void setReviewRecommended(Boolean reviewRecommended) {
    this.reviewRecommended = reviewRecommended;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Classification classification = (Classification) o;
    return Objects.equals(this.category1, classification.category1) &&
        Objects.equals(this.category2, classification.category2) &&
        Objects.equals(this.category3, classification.category3) &&
        Objects.equals(this.reviewRecommended, classification.reviewRecommended);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category1, category2, category3, reviewRecommended);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Classification {\n");
    sb.append("    category1: ").append(toIndentedString(category1)).append("\n");
    sb.append("    category2: ").append(toIndentedString(category2)).append("\n");
    sb.append("    category3: ").append(toIndentedString(category3)).append("\n");
    sb.append("    reviewRecommended: ").append(toIndentedString(reviewRecommended)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Category1");
    openapiFields.add("Category2");
    openapiFields.add("Category3");
    openapiFields.add("ReviewRecommended");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Classification
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Classification.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Classification is not found in the empty JSON string", Classification.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Classification.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Classification` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `Category1`
      if (jsonObj.get("Category1") != null && !jsonObj.get("Category1").isJsonNull()) {
        ClassificationCategory1.validateJsonElement(jsonObj.get("Category1"));
      }
      // validate the optional field `Category2`
      if (jsonObj.get("Category2") != null && !jsonObj.get("Category2").isJsonNull()) {
        ClassificationCategory2.validateJsonElement(jsonObj.get("Category2"));
      }
      // validate the optional field `Category3`
      if (jsonObj.get("Category3") != null && !jsonObj.get("Category3").isJsonNull()) {
        ClassificationCategory3.validateJsonElement(jsonObj.get("Category3"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Classification.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Classification' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Classification> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Classification.class));

       return (TypeAdapter<T>) new TypeAdapter<Classification>() {
           @Override
           public void write(JsonWriter out, Classification value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Classification read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Classification given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Classification
   * @throws IOException if the JSON string is invalid with respect to Classification
   */
  public static Classification fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Classification.class);
  }

  /**
   * Convert an instance of Classification to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

