/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema items of the body.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReviewsAddVideoTranscriptModerationResultRequestInner {
  public static final String SERIALIZED_NAME_TERMS = "Terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private List<ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner> terms = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public ReviewsAddVideoTranscriptModerationResultRequestInner() {
  }

  public ReviewsAddVideoTranscriptModerationResultRequestInner terms(List<ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner> terms) {
    this.terms = terms;
    return this;
  }

  public ReviewsAddVideoTranscriptModerationResultRequestInner addTermsItem(ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner termsItem) {
    if (this.terms == null) {
      this.terms = new ArrayList<>();
    }
    this.terms.add(termsItem);
    return this;
  }

  /**
   * Optional metadata details.
   * @return terms
   */
  @javax.annotation.Nonnull
  public List<ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner> getTerms() {
    return terms;
  }

  public void setTerms(List<ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner> terms) {
    this.terms = terms;
  }


  public ReviewsAddVideoTranscriptModerationResultRequestInner timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of the image.
   * @return timestamp
   */
  @javax.annotation.Nonnull
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReviewsAddVideoTranscriptModerationResultRequestInner reviewsAddVideoTranscriptModerationResultRequestInner = (ReviewsAddVideoTranscriptModerationResultRequestInner) o;
    return Objects.equals(this.terms, reviewsAddVideoTranscriptModerationResultRequestInner.terms) &&
        Objects.equals(this.timestamp, reviewsAddVideoTranscriptModerationResultRequestInner.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(terms, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReviewsAddVideoTranscriptModerationResultRequestInner {\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Terms");
    openapiFields.add("Timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Terms");
    openapiRequiredFields.add("Timestamp");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReviewsAddVideoTranscriptModerationResultRequestInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReviewsAddVideoTranscriptModerationResultRequestInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReviewsAddVideoTranscriptModerationResultRequestInner is not found in the empty JSON string", ReviewsAddVideoTranscriptModerationResultRequestInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReviewsAddVideoTranscriptModerationResultRequestInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReviewsAddVideoTranscriptModerationResultRequestInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReviewsAddVideoTranscriptModerationResultRequestInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("Terms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Terms` to be an array in the JSON string but got `%s`", jsonObj.get("Terms").toString()));
      }

      JsonArray jsonArrayterms = jsonObj.getAsJsonArray("Terms");
      // validate the required field `Terms` (array)
      for (int i = 0; i < jsonArrayterms.size(); i++) {
        ReviewsAddVideoTranscriptModerationResultRequestInnerTermsInner.validateJsonElement(jsonArrayterms.get(i));
      };
      if (!jsonObj.get("Timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReviewsAddVideoTranscriptModerationResultRequestInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReviewsAddVideoTranscriptModerationResultRequestInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReviewsAddVideoTranscriptModerationResultRequestInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReviewsAddVideoTranscriptModerationResultRequestInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReviewsAddVideoTranscriptModerationResultRequestInner>() {
           @Override
           public void write(JsonWriter out, ReviewsAddVideoTranscriptModerationResultRequestInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReviewsAddVideoTranscriptModerationResultRequestInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReviewsAddVideoTranscriptModerationResultRequestInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReviewsAddVideoTranscriptModerationResultRequestInner
   * @throws IOException if the JSON string is invalid with respect to ReviewsAddVideoTranscriptModerationResultRequestInner
   */
  public static ReviewsAddVideoTranscriptModerationResultRequestInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReviewsAddVideoTranscriptModerationResultRequestInner.class);
  }

  /**
   * Convert an instance of ReviewsAddVideoTranscriptModerationResultRequestInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

