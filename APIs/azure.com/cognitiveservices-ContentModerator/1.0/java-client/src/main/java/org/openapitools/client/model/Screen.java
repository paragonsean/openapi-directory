/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Classification;
import org.openapitools.client.model.DetectedTerms;
import org.openapitools.client.model.PII;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for a Screen text request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Screen {
  public static final String SERIALIZED_NAME_AUTO_CORRECTED_TEXT = "AutoCorrectedText";
  @SerializedName(SERIALIZED_NAME_AUTO_CORRECTED_TEXT)
  private String autoCorrectedText;

  public static final String SERIALIZED_NAME_CLASSIFICATION = "Classification";
  @SerializedName(SERIALIZED_NAME_CLASSIFICATION)
  private Classification classification;

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_MISREPRESENTATION = "Misrepresentation";
  @SerializedName(SERIALIZED_NAME_MISREPRESENTATION)
  private List<String> misrepresentation = new ArrayList<>();

  public static final String SERIALIZED_NAME_NORMALIZED_TEXT = "NormalizedText";
  @SerializedName(SERIALIZED_NAME_NORMALIZED_TEXT)
  private String normalizedText;

  public static final String SERIALIZED_NAME_ORIGINAL_TEXT = "OriginalText";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TEXT)
  private String originalText;

  public static final String SERIALIZED_NAME_P_I_I = "PII";
  @SerializedName(SERIALIZED_NAME_P_I_I)
  private PII pii;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TERMS = "Terms";
  @SerializedName(SERIALIZED_NAME_TERMS)
  private List<DetectedTerms> terms = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRACKING_ID = "TrackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public Screen() {
  }

  public Screen autoCorrectedText(String autoCorrectedText) {
    this.autoCorrectedText = autoCorrectedText;
    return this;
  }

  /**
   * The autocorrected text
   * @return autoCorrectedText
   */
  @javax.annotation.Nullable
  public String getAutoCorrectedText() {
    return autoCorrectedText;
  }

  public void setAutoCorrectedText(String autoCorrectedText) {
    this.autoCorrectedText = autoCorrectedText;
  }


  public Screen classification(Classification classification) {
    this.classification = classification;
    return this;
  }

  /**
   * Get classification
   * @return classification
   */
  @javax.annotation.Nullable
  public Classification getClassification() {
    return classification;
  }

  public void setClassification(Classification classification) {
    this.classification = classification;
  }


  public Screen language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Language of the input text content.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public Screen misrepresentation(List<String> misrepresentation) {
    this.misrepresentation = misrepresentation;
    return this;
  }

  public Screen addMisrepresentationItem(String misrepresentationItem) {
    if (this.misrepresentation == null) {
      this.misrepresentation = new ArrayList<>();
    }
    this.misrepresentation.add(misrepresentationItem);
    return this;
  }

  /**
   * The misrepresentation text.
   * @return misrepresentation
   */
  @javax.annotation.Nullable
  public List<String> getMisrepresentation() {
    return misrepresentation;
  }

  public void setMisrepresentation(List<String> misrepresentation) {
    this.misrepresentation = misrepresentation;
  }


  public Screen normalizedText(String normalizedText) {
    this.normalizedText = normalizedText;
    return this;
  }

  /**
   * The normalized text.
   * @return normalizedText
   */
  @javax.annotation.Nullable
  public String getNormalizedText() {
    return normalizedText;
  }

  public void setNormalizedText(String normalizedText) {
    this.normalizedText = normalizedText;
  }


  public Screen originalText(String originalText) {
    this.originalText = originalText;
    return this;
  }

  /**
   * The original text.
   * @return originalText
   */
  @javax.annotation.Nullable
  public String getOriginalText() {
    return originalText;
  }

  public void setOriginalText(String originalText) {
    this.originalText = originalText;
  }


  public Screen pii(PII pii) {
    this.pii = pii;
    return this;
  }

  /**
   * Get pii
   * @return pii
   */
  @javax.annotation.Nullable
  public PII getPII() {
    return pii;
  }

  public void setPII(PII pii) {
    this.pii = pii;
  }


  public Screen status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public Screen terms(List<DetectedTerms> terms) {
    this.terms = terms;
    return this;
  }

  public Screen addTermsItem(DetectedTerms termsItem) {
    if (this.terms == null) {
      this.terms = new ArrayList<>();
    }
    this.terms.add(termsItem);
    return this;
  }

  /**
   * Get terms
   * @return terms
   */
  @javax.annotation.Nullable
  public List<DetectedTerms> getTerms() {
    return terms;
  }

  public void setTerms(List<DetectedTerms> terms) {
    this.terms = terms;
  }


  public Screen trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * Unique Content Moderator transaction Id.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Screen screen = (Screen) o;
    return Objects.equals(this.autoCorrectedText, screen.autoCorrectedText) &&
        Objects.equals(this.classification, screen.classification) &&
        Objects.equals(this.language, screen.language) &&
        Objects.equals(this.misrepresentation, screen.misrepresentation) &&
        Objects.equals(this.normalizedText, screen.normalizedText) &&
        Objects.equals(this.originalText, screen.originalText) &&
        Objects.equals(this.pii, screen.pii) &&
        Objects.equals(this.status, screen.status) &&
        Objects.equals(this.terms, screen.terms) &&
        Objects.equals(this.trackingId, screen.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(autoCorrectedText, classification, language, misrepresentation, normalizedText, originalText, pii, status, terms, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Screen {\n");
    sb.append("    autoCorrectedText: ").append(toIndentedString(autoCorrectedText)).append("\n");
    sb.append("    classification: ").append(toIndentedString(classification)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    misrepresentation: ").append(toIndentedString(misrepresentation)).append("\n");
    sb.append("    normalizedText: ").append(toIndentedString(normalizedText)).append("\n");
    sb.append("    originalText: ").append(toIndentedString(originalText)).append("\n");
    sb.append("    pii: ").append(toIndentedString(pii)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    terms: ").append(toIndentedString(terms)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AutoCorrectedText");
    openapiFields.add("Classification");
    openapiFields.add("Language");
    openapiFields.add("Misrepresentation");
    openapiFields.add("NormalizedText");
    openapiFields.add("OriginalText");
    openapiFields.add("PII");
    openapiFields.add("Status");
    openapiFields.add("Terms");
    openapiFields.add("TrackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Screen
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Screen.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Screen is not found in the empty JSON string", Screen.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Screen.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Screen` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("AutoCorrectedText") != null && !jsonObj.get("AutoCorrectedText").isJsonNull()) && !jsonObj.get("AutoCorrectedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `AutoCorrectedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("AutoCorrectedText").toString()));
      }
      // validate the optional field `Classification`
      if (jsonObj.get("Classification") != null && !jsonObj.get("Classification").isJsonNull()) {
        Classification.validateJsonElement(jsonObj.get("Classification"));
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Misrepresentation") != null && !jsonObj.get("Misrepresentation").isJsonNull() && !jsonObj.get("Misrepresentation").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Misrepresentation` to be an array in the JSON string but got `%s`", jsonObj.get("Misrepresentation").toString()));
      }
      if ((jsonObj.get("NormalizedText") != null && !jsonObj.get("NormalizedText").isJsonNull()) && !jsonObj.get("NormalizedText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `NormalizedText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("NormalizedText").toString()));
      }
      if ((jsonObj.get("OriginalText") != null && !jsonObj.get("OriginalText").isJsonNull()) && !jsonObj.get("OriginalText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `OriginalText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("OriginalText").toString()));
      }
      // validate the optional field `PII`
      if (jsonObj.get("PII") != null && !jsonObj.get("PII").isJsonNull()) {
        PII.validateJsonElement(jsonObj.get("PII"));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      if (jsonObj.get("Terms") != null && !jsonObj.get("Terms").isJsonNull()) {
        JsonArray jsonArrayterms = jsonObj.getAsJsonArray("Terms");
        if (jsonArrayterms != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Terms").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Terms` to be an array in the JSON string but got `%s`", jsonObj.get("Terms").toString()));
          }

          // validate the optional field `Terms` (array)
          for (int i = 0; i < jsonArrayterms.size(); i++) {
            DetectedTerms.validateJsonElement(jsonArrayterms.get(i));
          };
        }
      }
      if ((jsonObj.get("TrackingId") != null && !jsonObj.get("TrackingId").isJsonNull()) && !jsonObj.get("TrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Screen.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Screen' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Screen> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Screen.class));

       return (TypeAdapter<T>) new TypeAdapter<Screen>() {
           @Override
           public void write(JsonWriter out, Screen value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Screen read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Screen given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Screen
   * @throws IOException if the JSON string is invalid with respect to Screen
   */
  public static Screen fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Screen.class);
  }

  /**
   * Convert an instance of Screen to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

