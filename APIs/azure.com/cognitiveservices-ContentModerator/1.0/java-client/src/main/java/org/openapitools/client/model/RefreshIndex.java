/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Refresh Index Response.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RefreshIndex {
  public static final String SERIALIZED_NAME_ADVANCED_INFO = "AdvancedInfo";
  @SerializedName(SERIALIZED_NAME_ADVANCED_INFO)
  private List<Map<String, String>> advancedInfo = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTENT_SOURCE_ID = "ContentSourceId";
  @SerializedName(SERIALIZED_NAME_CONTENT_SOURCE_ID)
  private String contentSourceId;

  public static final String SERIALIZED_NAME_IS_UPDATE_SUCCESS = "IsUpdateSuccess";
  @SerializedName(SERIALIZED_NAME_IS_UPDATE_SUCCESS)
  private Boolean isUpdateSuccess;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TRACKING_ID = "TrackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public RefreshIndex() {
  }

  public RefreshIndex advancedInfo(List<Map<String, String>> advancedInfo) {
    this.advancedInfo = advancedInfo;
    return this;
  }

  public RefreshIndex addAdvancedInfoItem(Map<String, String> advancedInfoItem) {
    if (this.advancedInfo == null) {
      this.advancedInfo = new ArrayList<>();
    }
    this.advancedInfo.add(advancedInfoItem);
    return this;
  }

  /**
   * Advanced info list.
   * @return advancedInfo
   */
  @javax.annotation.Nullable
  public List<Map<String, String>> getAdvancedInfo() {
    return advancedInfo;
  }

  public void setAdvancedInfo(List<Map<String, String>> advancedInfo) {
    this.advancedInfo = advancedInfo;
  }


  public RefreshIndex contentSourceId(String contentSourceId) {
    this.contentSourceId = contentSourceId;
    return this;
  }

  /**
   * Content source Id.
   * @return contentSourceId
   */
  @javax.annotation.Nullable
  public String getContentSourceId() {
    return contentSourceId;
  }

  public void setContentSourceId(String contentSourceId) {
    this.contentSourceId = contentSourceId;
  }


  public RefreshIndex isUpdateSuccess(Boolean isUpdateSuccess) {
    this.isUpdateSuccess = isUpdateSuccess;
    return this;
  }

  /**
   * Update success status.
   * @return isUpdateSuccess
   */
  @javax.annotation.Nullable
  public Boolean getIsUpdateSuccess() {
    return isUpdateSuccess;
  }

  public void setIsUpdateSuccess(Boolean isUpdateSuccess) {
    this.isUpdateSuccess = isUpdateSuccess;
  }


  public RefreshIndex status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public RefreshIndex trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * Tracking Id.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RefreshIndex refreshIndex = (RefreshIndex) o;
    return Objects.equals(this.advancedInfo, refreshIndex.advancedInfo) &&
        Objects.equals(this.contentSourceId, refreshIndex.contentSourceId) &&
        Objects.equals(this.isUpdateSuccess, refreshIndex.isUpdateSuccess) &&
        Objects.equals(this.status, refreshIndex.status) &&
        Objects.equals(this.trackingId, refreshIndex.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(advancedInfo, contentSourceId, isUpdateSuccess, status, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RefreshIndex {\n");
    sb.append("    advancedInfo: ").append(toIndentedString(advancedInfo)).append("\n");
    sb.append("    contentSourceId: ").append(toIndentedString(contentSourceId)).append("\n");
    sb.append("    isUpdateSuccess: ").append(toIndentedString(isUpdateSuccess)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("AdvancedInfo");
    openapiFields.add("ContentSourceId");
    openapiFields.add("IsUpdateSuccess");
    openapiFields.add("Status");
    openapiFields.add("TrackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RefreshIndex
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RefreshIndex.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RefreshIndex is not found in the empty JSON string", RefreshIndex.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RefreshIndex.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RefreshIndex` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("AdvancedInfo") != null && !jsonObj.get("AdvancedInfo").isJsonNull() && !jsonObj.get("AdvancedInfo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AdvancedInfo` to be an array in the JSON string but got `%s`", jsonObj.get("AdvancedInfo").toString()));
      }
      if ((jsonObj.get("ContentSourceId") != null && !jsonObj.get("ContentSourceId").isJsonNull()) && !jsonObj.get("ContentSourceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentSourceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentSourceId").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TrackingId") != null && !jsonObj.get("TrackingId").isJsonNull()) && !jsonObj.get("TrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RefreshIndex.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RefreshIndex' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RefreshIndex> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RefreshIndex.class));

       return (TypeAdapter<T>) new TypeAdapter<RefreshIndex>() {
           @Override
           public void write(JsonWriter out, RefreshIndex value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RefreshIndex read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RefreshIndex given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RefreshIndex
   * @throws IOException if the JSON string is invalid with respect to RefreshIndex
   */
  public static RefreshIndex fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RefreshIndex.class);
  }

  /**
   * Convert an instance of RefreshIndex to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

