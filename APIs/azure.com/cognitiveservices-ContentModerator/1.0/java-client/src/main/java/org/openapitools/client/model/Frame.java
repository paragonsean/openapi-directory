/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyValuePair;
import org.openapitools.client.model.Tag;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Video frame property details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Frame {
  public static final String SERIALIZED_NAME_FRAME_IMAGE = "FrameImage";
  @SerializedName(SERIALIZED_NAME_FRAME_IMAGE)
  private String frameImage;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<KeyValuePair> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEWER_RESULT_TAGS = "ReviewerResultTags";
  @SerializedName(SERIALIZED_NAME_REVIEWER_RESULT_TAGS)
  private List<Tag> reviewerResultTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIMESTAMP = "Timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private String timestamp;

  public Frame() {
  }

  public Frame frameImage(String frameImage) {
    this.frameImage = frameImage;
    return this;
  }

  /**
   * Frame image.
   * @return frameImage
   */
  @javax.annotation.Nullable
  public String getFrameImage() {
    return frameImage;
  }

  public void setFrameImage(String frameImage) {
    this.frameImage = frameImage;
  }


  public Frame metadata(List<KeyValuePair> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Frame addMetadataItem(KeyValuePair metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Array of KeyValue.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<KeyValuePair> metadata) {
    this.metadata = metadata;
  }


  public Frame reviewerResultTags(List<Tag> reviewerResultTags) {
    this.reviewerResultTags = reviewerResultTags;
    return this;
  }

  public Frame addReviewerResultTagsItem(Tag reviewerResultTagsItem) {
    if (this.reviewerResultTags == null) {
      this.reviewerResultTags = new ArrayList<>();
    }
    this.reviewerResultTags.add(reviewerResultTagsItem);
    return this;
  }

  /**
   * Reviewer result tags.
   * @return reviewerResultTags
   */
  @javax.annotation.Nullable
  public List<Tag> getReviewerResultTags() {
    return reviewerResultTags;
  }

  public void setReviewerResultTags(List<Tag> reviewerResultTags) {
    this.reviewerResultTags = reviewerResultTags;
  }


  public Frame timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  /**
   * Timestamp of the frame.
   * @return timestamp
   */
  @javax.annotation.Nullable
  public String getTimestamp() {
    return timestamp;
  }

  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Frame frame = (Frame) o;
    return Objects.equals(this.frameImage, frame.frameImage) &&
        Objects.equals(this.metadata, frame.metadata) &&
        Objects.equals(this.reviewerResultTags, frame.reviewerResultTags) &&
        Objects.equals(this.timestamp, frame.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(frameImage, metadata, reviewerResultTags, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Frame {\n");
    sb.append("    frameImage: ").append(toIndentedString(frameImage)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    reviewerResultTags: ").append(toIndentedString(reviewerResultTags)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("FrameImage");
    openapiFields.add("Metadata");
    openapiFields.add("ReviewerResultTags");
    openapiFields.add("Timestamp");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Frame
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Frame.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Frame is not found in the empty JSON string", Frame.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Frame.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Frame` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("FrameImage") != null && !jsonObj.get("FrameImage").isJsonNull()) && !jsonObj.get("FrameImage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `FrameImage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("FrameImage").toString()));
      }
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("Metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be an array in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
          }

          // validate the optional field `Metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if (jsonObj.get("ReviewerResultTags") != null && !jsonObj.get("ReviewerResultTags").isJsonNull()) {
        JsonArray jsonArrayreviewerResultTags = jsonObj.getAsJsonArray("ReviewerResultTags");
        if (jsonArrayreviewerResultTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReviewerResultTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReviewerResultTags` to be an array in the JSON string but got `%s`", jsonObj.get("ReviewerResultTags").toString()));
          }

          // validate the optional field `ReviewerResultTags` (array)
          for (int i = 0; i < jsonArrayreviewerResultTags.size(); i++) {
            Tag.validateJsonElement(jsonArrayreviewerResultTags.get(i));
          };
        }
      }
      if ((jsonObj.get("Timestamp") != null && !jsonObj.get("Timestamp").isJsonNull()) && !jsonObj.get("Timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Frame.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Frame' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Frame> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Frame.class));

       return (TypeAdapter<T>) new TypeAdapter<Frame>() {
           @Override
           public void write(JsonWriter out, Frame value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Frame read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Frame given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Frame
   * @throws IOException if the JSON string is invalid with respect to Frame
   */
  public static Frame fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Frame.class);
  }

  /**
   * Convert an instance of Frame to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

