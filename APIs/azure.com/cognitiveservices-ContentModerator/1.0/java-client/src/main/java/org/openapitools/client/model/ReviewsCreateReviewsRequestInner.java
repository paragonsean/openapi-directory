/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ReviewsCreateReviewsRequestInnerMetadataInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Schema items of the body.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ReviewsCreateReviewsRequestInner {
  public static final String SERIALIZED_NAME_CALLBACK_ENDPOINT = "CallbackEndpoint";
  @SerializedName(SERIALIZED_NAME_CALLBACK_ENDPOINT)
  private String callbackEndpoint;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_ID = "ContentId";
  @SerializedName(SERIALIZED_NAME_CONTENT_ID)
  private String contentId;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<ReviewsCreateReviewsRequestInnerMetadataInner> metadata = new ArrayList<>();

  /**
   * Type of the content.
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    IMAGE("Image"),
    
    TEXT("Text");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public ReviewsCreateReviewsRequestInner() {
  }

  public ReviewsCreateReviewsRequestInner callbackEndpoint(String callbackEndpoint) {
    this.callbackEndpoint = callbackEndpoint;
    return this;
  }

  /**
   * Optional CallbackEndpoint.
   * @return callbackEndpoint
   */
  @javax.annotation.Nullable
  public String getCallbackEndpoint() {
    return callbackEndpoint;
  }

  public void setCallbackEndpoint(String callbackEndpoint) {
    this.callbackEndpoint = callbackEndpoint;
  }


  public ReviewsCreateReviewsRequestInner content(String content) {
    this.content = content;
    return this;
  }

  /**
   * Content to review.
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public ReviewsCreateReviewsRequestInner contentId(String contentId) {
    this.contentId = contentId;
    return this;
  }

  /**
   * Content Identifier.
   * @return contentId
   */
  @javax.annotation.Nonnull
  public String getContentId() {
    return contentId;
  }

  public void setContentId(String contentId) {
    this.contentId = contentId;
  }


  public ReviewsCreateReviewsRequestInner metadata(List<ReviewsCreateReviewsRequestInnerMetadataInner> metadata) {
    this.metadata = metadata;
    return this;
  }

  public ReviewsCreateReviewsRequestInner addMetadataItem(ReviewsCreateReviewsRequestInnerMetadataInner metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Optional metadata details.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<ReviewsCreateReviewsRequestInnerMetadataInner> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<ReviewsCreateReviewsRequestInnerMetadataInner> metadata) {
    this.metadata = metadata;
  }


  public ReviewsCreateReviewsRequestInner type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Type of the content.
   * @return type
   */
  @javax.annotation.Nonnull
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReviewsCreateReviewsRequestInner reviewsCreateReviewsRequestInner = (ReviewsCreateReviewsRequestInner) o;
    return Objects.equals(this.callbackEndpoint, reviewsCreateReviewsRequestInner.callbackEndpoint) &&
        Objects.equals(this.content, reviewsCreateReviewsRequestInner.content) &&
        Objects.equals(this.contentId, reviewsCreateReviewsRequestInner.contentId) &&
        Objects.equals(this.metadata, reviewsCreateReviewsRequestInner.metadata) &&
        Objects.equals(this.type, reviewsCreateReviewsRequestInner.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackEndpoint, content, contentId, metadata, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReviewsCreateReviewsRequestInner {\n");
    sb.append("    callbackEndpoint: ").append(toIndentedString(callbackEndpoint)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallbackEndpoint");
    openapiFields.add("Content");
    openapiFields.add("ContentId");
    openapiFields.add("Metadata");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("Content");
    openapiRequiredFields.add("ContentId");
    openapiRequiredFields.add("Type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReviewsCreateReviewsRequestInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ReviewsCreateReviewsRequestInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReviewsCreateReviewsRequestInner is not found in the empty JSON string", ReviewsCreateReviewsRequestInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReviewsCreateReviewsRequestInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReviewsCreateReviewsRequestInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReviewsCreateReviewsRequestInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CallbackEndpoint") != null && !jsonObj.get("CallbackEndpoint").isJsonNull()) && !jsonObj.get("CallbackEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallbackEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallbackEndpoint").toString()));
      }
      if (!jsonObj.get("Content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Content").toString()));
      }
      if (!jsonObj.get("ContentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentId").toString()));
      }
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("Metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be an array in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
          }

          // validate the optional field `Metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            ReviewsCreateReviewsRequestInnerMetadataInner.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if (!jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
      // validate the required field `Type`
      TypeEnum.validateJsonElement(jsonObj.get("Type"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReviewsCreateReviewsRequestInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReviewsCreateReviewsRequestInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReviewsCreateReviewsRequestInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReviewsCreateReviewsRequestInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ReviewsCreateReviewsRequestInner>() {
           @Override
           public void write(JsonWriter out, ReviewsCreateReviewsRequestInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReviewsCreateReviewsRequestInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReviewsCreateReviewsRequestInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReviewsCreateReviewsRequestInner
   * @throws IOException if the JSON string is invalid with respect to ReviewsCreateReviewsRequestInner
   */
  public static ReviewsCreateReviewsRequestInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReviewsCreateReviewsRequestInner.class);
  }

  /**
   * Convert an instance of ReviewsCreateReviewsRequestInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

