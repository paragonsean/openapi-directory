/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Candidate;
import org.openapitools.client.model.KeyValuePair;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contains the text found in image for the language specified.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class OCR {
  public static final String SERIALIZED_NAME_CACHE_ID = "CacheId";
  @SerializedName(SERIALIZED_NAME_CACHE_ID)
  private String cacheId;

  public static final String SERIALIZED_NAME_CANDIDATES = "Candidates";
  @SerializedName(SERIALIZED_NAME_CANDIDATES)
  private List<Candidate> candidates = new ArrayList<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "Language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<KeyValuePair> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TEXT = "Text";
  @SerializedName(SERIALIZED_NAME_TEXT)
  private String text;

  public static final String SERIALIZED_NAME_TRACKING_ID = "TrackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public OCR() {
  }

  public OCR cacheId(String cacheId) {
    this.cacheId = cacheId;
    return this;
  }

  /**
   * The cache id.
   * @return cacheId
   */
  @javax.annotation.Nullable
  public String getCacheId() {
    return cacheId;
  }

  public void setCacheId(String cacheId) {
    this.cacheId = cacheId;
  }


  public OCR candidates(List<Candidate> candidates) {
    this.candidates = candidates;
    return this;
  }

  public OCR addCandidatesItem(Candidate candidatesItem) {
    if (this.candidates == null) {
      this.candidates = new ArrayList<>();
    }
    this.candidates.add(candidatesItem);
    return this;
  }

  /**
   * The list of candidate text.
   * @return candidates
   */
  @javax.annotation.Nullable
  public List<Candidate> getCandidates() {
    return candidates;
  }

  public void setCandidates(List<Candidate> candidates) {
    this.candidates = candidates;
  }


  public OCR language(String language) {
    this.language = language;
    return this;
  }

  /**
   * The ISO 639-3 code.
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public OCR metadata(List<KeyValuePair> metadata) {
    this.metadata = metadata;
    return this;
  }

  public OCR addMetadataItem(KeyValuePair metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Array of KeyValue.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<KeyValuePair> metadata) {
    this.metadata = metadata;
  }


  public OCR status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public OCR text(String text) {
    this.text = text;
    return this;
  }

  /**
   * The found text.
   * @return text
   */
  @javax.annotation.Nullable
  public String getText() {
    return text;
  }

  public void setText(String text) {
    this.text = text;
  }


  public OCR trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * The tracking id.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OCR OCR = (OCR) o;
    return Objects.equals(this.cacheId, OCR.cacheId) &&
        Objects.equals(this.candidates, OCR.candidates) &&
        Objects.equals(this.language, OCR.language) &&
        Objects.equals(this.metadata, OCR.metadata) &&
        Objects.equals(this.status, OCR.status) &&
        Objects.equals(this.text, OCR.text) &&
        Objects.equals(this.trackingId, OCR.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheId, candidates, language, metadata, status, text, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OCR {\n");
    sb.append("    cacheId: ").append(toIndentedString(cacheId)).append("\n");
    sb.append("    candidates: ").append(toIndentedString(candidates)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    text: ").append(toIndentedString(text)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CacheId");
    openapiFields.add("Candidates");
    openapiFields.add("Language");
    openapiFields.add("Metadata");
    openapiFields.add("Status");
    openapiFields.add("Text");
    openapiFields.add("TrackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OCR
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!OCR.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OCR is not found in the empty JSON string", OCR.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OCR.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OCR` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CacheId") != null && !jsonObj.get("CacheId").isJsonNull()) && !jsonObj.get("CacheId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CacheId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CacheId").toString()));
      }
      if (jsonObj.get("Candidates") != null && !jsonObj.get("Candidates").isJsonNull()) {
        JsonArray jsonArraycandidates = jsonObj.getAsJsonArray("Candidates");
        if (jsonArraycandidates != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Candidates").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Candidates` to be an array in the JSON string but got `%s`", jsonObj.get("Candidates").toString()));
          }

          // validate the optional field `Candidates` (array)
          for (int i = 0; i < jsonArraycandidates.size(); i++) {
            Candidate.validateJsonElement(jsonArraycandidates.get(i));
          };
        }
      }
      if ((jsonObj.get("Language") != null && !jsonObj.get("Language").isJsonNull()) && !jsonObj.get("Language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Language").toString()));
      }
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("Metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be an array in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
          }

          // validate the optional field `Metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("Text") != null && !jsonObj.get("Text").isJsonNull()) && !jsonObj.get("Text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Text").toString()));
      }
      if ((jsonObj.get("TrackingId") != null && !jsonObj.get("TrackingId").isJsonNull()) && !jsonObj.get("TrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OCR.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OCR' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OCR> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OCR.class));

       return (TypeAdapter<T>) new TypeAdapter<OCR>() {
           @Override
           public void write(JsonWriter out, OCR value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OCR read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OCR given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OCR
   * @throws IOException if the JSON string is invalid with respect to OCR
   */
  public static OCR fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OCR.class);
  }

  /**
   * Convert an instance of OCR to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

