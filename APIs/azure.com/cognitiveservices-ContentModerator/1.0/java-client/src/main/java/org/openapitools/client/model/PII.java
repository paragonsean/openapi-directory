/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Address;
import org.openapitools.client.model.Email;
import org.openapitools.client.model.IPA;
import org.openapitools.client.model.Phone;
import org.openapitools.client.model.SSN;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Personal Identifier Information details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PII {
  public static final String SERIALIZED_NAME_ADDRESS = "Address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private List<Address> address = new ArrayList<>();

  public static final String SERIALIZED_NAME_EMAIL = "Email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private List<Email> email = new ArrayList<>();

  public static final String SERIALIZED_NAME_I_P_A = "IPA";
  @SerializedName(SERIALIZED_NAME_I_P_A)
  private List<IPA> IPA = new ArrayList<>();

  public static final String SERIALIZED_NAME_PHONE = "Phone";
  @SerializedName(SERIALIZED_NAME_PHONE)
  private List<Phone> phone = new ArrayList<>();

  public static final String SERIALIZED_NAME_S_S_N = "SSN";
  @SerializedName(SERIALIZED_NAME_S_S_N)
  private List<SSN> SSN = new ArrayList<>();

  public PII() {
  }

  public PII address(List<Address> address) {
    this.address = address;
    return this;
  }

  public PII addAddressItem(Address addressItem) {
    if (this.address == null) {
      this.address = new ArrayList<>();
    }
    this.address.add(addressItem);
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public List<Address> getAddress() {
    return address;
  }

  public void setAddress(List<Address> address) {
    this.address = address;
  }


  public PII email(List<Email> email) {
    this.email = email;
    return this;
  }

  public PII addEmailItem(Email emailItem) {
    if (this.email == null) {
      this.email = new ArrayList<>();
    }
    this.email.add(emailItem);
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public List<Email> getEmail() {
    return email;
  }

  public void setEmail(List<Email> email) {
    this.email = email;
  }


  public PII IPA(List<IPA> IPA) {
    this.IPA = IPA;
    return this;
  }

  public PII addIPAItem(IPA IPAItem) {
    if (this.IPA == null) {
      this.IPA = new ArrayList<>();
    }
    this.IPA.add(IPAItem);
    return this;
  }

  /**
   * Get IPA
   * @return IPA
   */
  @javax.annotation.Nullable
  public List<IPA> getIPA() {
    return IPA;
  }

  public void setIPA(List<IPA> IPA) {
    this.IPA = IPA;
  }


  public PII phone(List<Phone> phone) {
    this.phone = phone;
    return this;
  }

  public PII addPhoneItem(Phone phoneItem) {
    if (this.phone == null) {
      this.phone = new ArrayList<>();
    }
    this.phone.add(phoneItem);
    return this;
  }

  /**
   * Get phone
   * @return phone
   */
  @javax.annotation.Nullable
  public List<Phone> getPhone() {
    return phone;
  }

  public void setPhone(List<Phone> phone) {
    this.phone = phone;
  }


  public PII SSN(List<SSN> SSN) {
    this.SSN = SSN;
    return this;
  }

  public PII addSSNItem(SSN SSNItem) {
    if (this.SSN == null) {
      this.SSN = new ArrayList<>();
    }
    this.SSN.add(SSNItem);
    return this;
  }

  /**
   * Get SSN
   * @return SSN
   */
  @javax.annotation.Nullable
  public List<SSN> getSSN() {
    return SSN;
  }

  public void setSSN(List<SSN> SSN) {
    this.SSN = SSN;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PII PII = (PII) o;
    return Objects.equals(this.address, PII.address) &&
        Objects.equals(this.email, PII.email) &&
        Objects.equals(this.IPA, PII.IPA) &&
        Objects.equals(this.phone, PII.phone) &&
        Objects.equals(this.SSN, PII.SSN);
  }

  @Override
  public int hashCode() {
    return Objects.hash(address, email, IPA, phone, SSN);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PII {\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    IPA: ").append(toIndentedString(IPA)).append("\n");
    sb.append("    phone: ").append(toIndentedString(phone)).append("\n");
    sb.append("    SSN: ").append(toIndentedString(SSN)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Address");
    openapiFields.add("Email");
    openapiFields.add("IPA");
    openapiFields.add("Phone");
    openapiFields.add("SSN");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PII
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PII.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PII is not found in the empty JSON string", PII.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PII.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PII` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("Address") != null && !jsonObj.get("Address").isJsonNull()) {
        JsonArray jsonArrayaddress = jsonObj.getAsJsonArray("Address");
        if (jsonArrayaddress != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Address").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Address` to be an array in the JSON string but got `%s`", jsonObj.get("Address").toString()));
          }

          // validate the optional field `Address` (array)
          for (int i = 0; i < jsonArrayaddress.size(); i++) {
            Address.validateJsonElement(jsonArrayaddress.get(i));
          };
        }
      }
      if (jsonObj.get("Email") != null && !jsonObj.get("Email").isJsonNull()) {
        JsonArray jsonArrayemail = jsonObj.getAsJsonArray("Email");
        if (jsonArrayemail != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Email").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Email` to be an array in the JSON string but got `%s`", jsonObj.get("Email").toString()));
          }

          // validate the optional field `Email` (array)
          for (int i = 0; i < jsonArrayemail.size(); i++) {
            Email.validateJsonElement(jsonArrayemail.get(i));
          };
        }
      }
      if (jsonObj.get("IPA") != null && !jsonObj.get("IPA").isJsonNull()) {
        JsonArray jsonArrayIPA = jsonObj.getAsJsonArray("IPA");
        if (jsonArrayIPA != null) {
          // ensure the json data is an array
          if (!jsonObj.get("IPA").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `IPA` to be an array in the JSON string but got `%s`", jsonObj.get("IPA").toString()));
          }

          // validate the optional field `IPA` (array)
          for (int i = 0; i < jsonArrayIPA.size(); i++) {
            IPA.validateJsonElement(jsonArrayIPA.get(i));
          };
        }
      }
      if (jsonObj.get("Phone") != null && !jsonObj.get("Phone").isJsonNull()) {
        JsonArray jsonArrayphone = jsonObj.getAsJsonArray("Phone");
        if (jsonArrayphone != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Phone").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Phone` to be an array in the JSON string but got `%s`", jsonObj.get("Phone").toString()));
          }

          // validate the optional field `Phone` (array)
          for (int i = 0; i < jsonArrayphone.size(); i++) {
            Phone.validateJsonElement(jsonArrayphone.get(i));
          };
        }
      }
      if (jsonObj.get("SSN") != null && !jsonObj.get("SSN").isJsonNull()) {
        JsonArray jsonArraySSN = jsonObj.getAsJsonArray("SSN");
        if (jsonArraySSN != null) {
          // ensure the json data is an array
          if (!jsonObj.get("SSN").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `SSN` to be an array in the JSON string but got `%s`", jsonObj.get("SSN").toString()));
          }

          // validate the optional field `SSN` (array)
          for (int i = 0; i < jsonArraySSN.size(); i++) {
            SSN.validateJsonElement(jsonArraySSN.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PII.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PII' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PII> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PII.class));

       return (TypeAdapter<T>) new TypeAdapter<PII>() {
           @Override
           public void write(JsonWriter out, PII value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PII read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PII given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PII
   * @throws IOException if the JSON string is invalid with respect to PII
   */
  public static PII fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PII.class);
  }

  /**
   * Convert an instance of PII to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

