/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.KeyValuePair;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The Review object.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Review {
  public static final String SERIALIZED_NAME_CALLBACK_ENDPOINT = "CallbackEndpoint";
  @SerializedName(SERIALIZED_NAME_CALLBACK_ENDPOINT)
  private String callbackEndpoint;

  public static final String SERIALIZED_NAME_CONTENT = "Content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  private String content;

  public static final String SERIALIZED_NAME_CONTENT_ID = "ContentId";
  @SerializedName(SERIALIZED_NAME_CONTENT_ID)
  private String contentId;

  public static final String SERIALIZED_NAME_CREATED_BY = "CreatedBy";
  @SerializedName(SERIALIZED_NAME_CREATED_BY)
  private String createdBy;

  public static final String SERIALIZED_NAME_METADATA = "Metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private List<KeyValuePair> metadata = new ArrayList<>();

  public static final String SERIALIZED_NAME_REVIEW_ID = "ReviewId";
  @SerializedName(SERIALIZED_NAME_REVIEW_ID)
  private String reviewId;

  public static final String SERIALIZED_NAME_REVIEWER_RESULT_TAGS = "ReviewerResultTags";
  @SerializedName(SERIALIZED_NAME_REVIEWER_RESULT_TAGS)
  private List<KeyValuePair> reviewerResultTags = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUB_TEAM = "SubTeam";
  @SerializedName(SERIALIZED_NAME_SUB_TEAM)
  private String subTeam;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private String type;

  public Review() {
  }

  public Review callbackEndpoint(String callbackEndpoint) {
    this.callbackEndpoint = callbackEndpoint;
    return this;
  }

  /**
   * The callback endpoint.
   * @return callbackEndpoint
   */
  @javax.annotation.Nullable
  public String getCallbackEndpoint() {
    return callbackEndpoint;
  }

  public void setCallbackEndpoint(String callbackEndpoint) {
    this.callbackEndpoint = callbackEndpoint;
  }


  public Review content(String content) {
    this.content = content;
    return this;
  }

  /**
   * The content value.
   * @return content
   */
  @javax.annotation.Nullable
  public String getContent() {
    return content;
  }

  public void setContent(String content) {
    this.content = content;
  }


  public Review contentId(String contentId) {
    this.contentId = contentId;
    return this;
  }

  /**
   * Id of the content.
   * @return contentId
   */
  @javax.annotation.Nullable
  public String getContentId() {
    return contentId;
  }

  public void setContentId(String contentId) {
    this.contentId = contentId;
  }


  public Review createdBy(String createdBy) {
    this.createdBy = createdBy;
    return this;
  }

  /**
   * The reviewer name.
   * @return createdBy
   */
  @javax.annotation.Nullable
  public String getCreatedBy() {
    return createdBy;
  }

  public void setCreatedBy(String createdBy) {
    this.createdBy = createdBy;
  }


  public Review metadata(List<KeyValuePair> metadata) {
    this.metadata = metadata;
    return this;
  }

  public Review addMetadataItem(KeyValuePair metadataItem) {
    if (this.metadata == null) {
      this.metadata = new ArrayList<>();
    }
    this.metadata.add(metadataItem);
    return this;
  }

  /**
   * Array of KeyValue.
   * @return metadata
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getMetadata() {
    return metadata;
  }

  public void setMetadata(List<KeyValuePair> metadata) {
    this.metadata = metadata;
  }


  public Review reviewId(String reviewId) {
    this.reviewId = reviewId;
    return this;
  }

  /**
   * Id of the review.
   * @return reviewId
   */
  @javax.annotation.Nullable
  public String getReviewId() {
    return reviewId;
  }

  public void setReviewId(String reviewId) {
    this.reviewId = reviewId;
  }


  public Review reviewerResultTags(List<KeyValuePair> reviewerResultTags) {
    this.reviewerResultTags = reviewerResultTags;
    return this;
  }

  public Review addReviewerResultTagsItem(KeyValuePair reviewerResultTagsItem) {
    if (this.reviewerResultTags == null) {
      this.reviewerResultTags = new ArrayList<>();
    }
    this.reviewerResultTags.add(reviewerResultTagsItem);
    return this;
  }

  /**
   * Array of KeyValue with Reviewer set Tags.
   * @return reviewerResultTags
   */
  @javax.annotation.Nullable
  public List<KeyValuePair> getReviewerResultTags() {
    return reviewerResultTags;
  }

  public void setReviewerResultTags(List<KeyValuePair> reviewerResultTags) {
    this.reviewerResultTags = reviewerResultTags;
  }


  public Review status(String status) {
    this.status = status;
    return this;
  }

  /**
   * The status string (&lt;Pending, Complete&gt;).
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Review subTeam(String subTeam) {
    this.subTeam = subTeam;
    return this;
  }

  /**
   * Name of the subteam.
   * @return subTeam
   */
  @javax.annotation.Nullable
  public String getSubTeam() {
    return subTeam;
  }

  public void setSubTeam(String subTeam) {
    this.subTeam = subTeam;
  }


  public Review type(String type) {
    this.type = type;
    return this;
  }

  /**
   * The type of content.
   * @return type
   */
  @javax.annotation.Nullable
  public String getType() {
    return type;
  }

  public void setType(String type) {
    this.type = type;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Review review = (Review) o;
    return Objects.equals(this.callbackEndpoint, review.callbackEndpoint) &&
        Objects.equals(this.content, review.content) &&
        Objects.equals(this.contentId, review.contentId) &&
        Objects.equals(this.createdBy, review.createdBy) &&
        Objects.equals(this.metadata, review.metadata) &&
        Objects.equals(this.reviewId, review.reviewId) &&
        Objects.equals(this.reviewerResultTags, review.reviewerResultTags) &&
        Objects.equals(this.status, review.status) &&
        Objects.equals(this.subTeam, review.subTeam) &&
        Objects.equals(this.type, review.type);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callbackEndpoint, content, contentId, createdBy, metadata, reviewId, reviewerResultTags, status, subTeam, type);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Review {\n");
    sb.append("    callbackEndpoint: ").append(toIndentedString(callbackEndpoint)).append("\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    contentId: ").append(toIndentedString(contentId)).append("\n");
    sb.append("    createdBy: ").append(toIndentedString(createdBy)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    reviewId: ").append(toIndentedString(reviewId)).append("\n");
    sb.append("    reviewerResultTags: ").append(toIndentedString(reviewerResultTags)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subTeam: ").append(toIndentedString(subTeam)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CallbackEndpoint");
    openapiFields.add("Content");
    openapiFields.add("ContentId");
    openapiFields.add("CreatedBy");
    openapiFields.add("Metadata");
    openapiFields.add("ReviewId");
    openapiFields.add("ReviewerResultTags");
    openapiFields.add("Status");
    openapiFields.add("SubTeam");
    openapiFields.add("Type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Review
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Review.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Review is not found in the empty JSON string", Review.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Review.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Review` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CallbackEndpoint") != null && !jsonObj.get("CallbackEndpoint").isJsonNull()) && !jsonObj.get("CallbackEndpoint").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CallbackEndpoint` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CallbackEndpoint").toString()));
      }
      if ((jsonObj.get("Content") != null && !jsonObj.get("Content").isJsonNull()) && !jsonObj.get("Content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Content").toString()));
      }
      if ((jsonObj.get("ContentId") != null && !jsonObj.get("ContentId").isJsonNull()) && !jsonObj.get("ContentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ContentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ContentId").toString()));
      }
      if ((jsonObj.get("CreatedBy") != null && !jsonObj.get("CreatedBy").isJsonNull()) && !jsonObj.get("CreatedBy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CreatedBy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CreatedBy").toString()));
      }
      if (jsonObj.get("Metadata") != null && !jsonObj.get("Metadata").isJsonNull()) {
        JsonArray jsonArraymetadata = jsonObj.getAsJsonArray("Metadata");
        if (jsonArraymetadata != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Metadata").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Metadata` to be an array in the JSON string but got `%s`", jsonObj.get("Metadata").toString()));
          }

          // validate the optional field `Metadata` (array)
          for (int i = 0; i < jsonArraymetadata.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArraymetadata.get(i));
          };
        }
      }
      if ((jsonObj.get("ReviewId") != null && !jsonObj.get("ReviewId").isJsonNull()) && !jsonObj.get("ReviewId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReviewId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReviewId").toString()));
      }
      if (jsonObj.get("ReviewerResultTags") != null && !jsonObj.get("ReviewerResultTags").isJsonNull()) {
        JsonArray jsonArrayreviewerResultTags = jsonObj.getAsJsonArray("ReviewerResultTags");
        if (jsonArrayreviewerResultTags != null) {
          // ensure the json data is an array
          if (!jsonObj.get("ReviewerResultTags").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `ReviewerResultTags` to be an array in the JSON string but got `%s`", jsonObj.get("ReviewerResultTags").toString()));
          }

          // validate the optional field `ReviewerResultTags` (array)
          for (int i = 0; i < jsonArrayreviewerResultTags.size(); i++) {
            KeyValuePair.validateJsonElement(jsonArrayreviewerResultTags.get(i));
          };
        }
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if ((jsonObj.get("SubTeam") != null && !jsonObj.get("SubTeam").isJsonNull()) && !jsonObj.get("SubTeam").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SubTeam` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SubTeam").toString()));
      }
      if ((jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) && !jsonObj.get("Type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Review.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Review' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Review> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Review.class));

       return (TypeAdapter<T>) new TypeAdapter<Review>() {
           @Override
           public void write(JsonWriter out, Review value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Review read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Review given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Review
   * @throws IOException if the JSON string is invalid with respect to Review
   */
  public static Review fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Review.class);
  }

  /**
   * Convert an instance of Review to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

