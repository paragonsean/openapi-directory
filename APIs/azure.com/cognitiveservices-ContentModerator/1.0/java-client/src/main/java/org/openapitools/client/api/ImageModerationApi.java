/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.Evaluate;
import org.openapitools.client.model.FoundFaces;
import org.openapitools.client.model.MatchResponse;
import org.openapitools.client.model.OCR;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImageModerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImageModerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImageModerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for imageModerationEvaluate
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationEvaluateCall(Boolean cacheImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/moderate/v1.0/ProcessImage/Evaluate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheImage", cacheImage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageModerationEvaluateValidateBeforeCall(Boolean cacheImage, final ApiCallback _callback) throws ApiException {
        return imageModerationEvaluateCall(cacheImage, _callback);

    }

    /**
     * 
     * Returns probabilities of the image containing racy or adult content.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @return Evaluate
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Evaluate imageModerationEvaluate(Boolean cacheImage) throws ApiException {
        ApiResponse<Evaluate> localVarResp = imageModerationEvaluateWithHttpInfo(cacheImage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns probabilities of the image containing racy or adult content.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @return ApiResponse&lt;Evaluate&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Evaluate> imageModerationEvaluateWithHttpInfo(Boolean cacheImage) throws ApiException {
        okhttp3.Call localVarCall = imageModerationEvaluateValidateBeforeCall(cacheImage, null);
        Type localVarReturnType = new TypeToken<Evaluate>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns probabilities of the image containing racy or adult content.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationEvaluateAsync(Boolean cacheImage, final ApiCallback<Evaluate> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageModerationEvaluateValidateBeforeCall(cacheImage, _callback);
        Type localVarReturnType = new TypeToken<Evaluate>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageModerationFindFaces
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of faces found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationFindFacesCall(Boolean cacheImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/moderate/v1.0/ProcessImage/FindFaces";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cacheImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheImage", cacheImage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageModerationFindFacesValidateBeforeCall(Boolean cacheImage, final ApiCallback _callback) throws ApiException {
        return imageModerationFindFacesCall(cacheImage, _callback);

    }

    /**
     * 
     * Returns the list of faces found.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @return FoundFaces
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of faces found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public FoundFaces imageModerationFindFaces(Boolean cacheImage) throws ApiException {
        ApiResponse<FoundFaces> localVarResp = imageModerationFindFacesWithHttpInfo(cacheImage);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns the list of faces found.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @return ApiResponse&lt;FoundFaces&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of faces found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FoundFaces> imageModerationFindFacesWithHttpInfo(Boolean cacheImage) throws ApiException {
        okhttp3.Call localVarCall = imageModerationFindFacesValidateBeforeCall(cacheImage, null);
        Type localVarReturnType = new TypeToken<FoundFaces>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns the list of faces found.
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The list of faces found. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationFindFacesAsync(Boolean cacheImage, final ApiCallback<FoundFaces> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageModerationFindFacesValidateBeforeCall(cacheImage, _callback);
        Type localVarReturnType = new TypeToken<FoundFaces>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageModerationMatch
     * @param listId The list Id. (optional)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Supported values for tags are:  &lt;ul&gt;  &lt;li&gt;101: Nudity&lt;/li&gt;  &lt;li&gt;102: Sexual Content&lt;/li&gt;  &lt;li&gt;201: Alcohol&lt;/li&gt;  &lt;li&gt;202: Tobacco&lt;/li&gt;  &lt;li&gt;203: Drugs&lt;/li&gt;  &lt;li&gt;301: Child Exploitation&lt;/li&gt;  &lt;li&gt;401: Violence&lt;/li&gt;  &lt;li&gt;402: Weapons&lt;/li&gt;  &lt;li&gt;403: Gore&lt;/li&gt;  &lt;li&gt;501: Profanity&lt;/li&gt;  &lt;li&gt;502: Vulgarity&lt;/li&gt;  &lt;/ul&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationMatchCall(String listId, Boolean cacheImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/moderate/v1.0/ProcessImage/Match";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listId", listId));
        }

        if (cacheImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheImage", cacheImage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageModerationMatchValidateBeforeCall(String listId, Boolean cacheImage, final ApiCallback _callback) throws ApiException {
        return imageModerationMatchCall(listId, cacheImage, _callback);

    }

    /**
     * 
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href&#x3D;\&quot;/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\&quot;&gt;this&lt;/a&gt; API.     Returns ID and tags of matching image.&lt;br/&gt;  &lt;br/&gt;  Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     * @param listId The list Id. (optional)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @return MatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Supported values for tags are:  &lt;ul&gt;  &lt;li&gt;101: Nudity&lt;/li&gt;  &lt;li&gt;102: Sexual Content&lt;/li&gt;  &lt;li&gt;201: Alcohol&lt;/li&gt;  &lt;li&gt;202: Tobacco&lt;/li&gt;  &lt;li&gt;203: Drugs&lt;/li&gt;  &lt;li&gt;301: Child Exploitation&lt;/li&gt;  &lt;li&gt;401: Violence&lt;/li&gt;  &lt;li&gt;402: Weapons&lt;/li&gt;  &lt;li&gt;403: Gore&lt;/li&gt;  &lt;li&gt;501: Profanity&lt;/li&gt;  &lt;li&gt;502: Vulgarity&lt;/li&gt;  &lt;/ul&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public MatchResponse imageModerationMatch(String listId, Boolean cacheImage) throws ApiException {
        ApiResponse<MatchResponse> localVarResp = imageModerationMatchWithHttpInfo(listId, cacheImage);
        return localVarResp.getData();
    }

    /**
     * 
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href&#x3D;\&quot;/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\&quot;&gt;this&lt;/a&gt; API.     Returns ID and tags of matching image.&lt;br/&gt;  &lt;br/&gt;  Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     * @param listId The list Id. (optional)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @return ApiResponse&lt;MatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Supported values for tags are:  &lt;ul&gt;  &lt;li&gt;101: Nudity&lt;/li&gt;  &lt;li&gt;102: Sexual Content&lt;/li&gt;  &lt;li&gt;201: Alcohol&lt;/li&gt;  &lt;li&gt;202: Tobacco&lt;/li&gt;  &lt;li&gt;203: Drugs&lt;/li&gt;  &lt;li&gt;301: Child Exploitation&lt;/li&gt;  &lt;li&gt;401: Violence&lt;/li&gt;  &lt;li&gt;402: Weapons&lt;/li&gt;  &lt;li&gt;403: Gore&lt;/li&gt;  &lt;li&gt;501: Profanity&lt;/li&gt;  &lt;li&gt;502: Vulgarity&lt;/li&gt;  &lt;/ul&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MatchResponse> imageModerationMatchWithHttpInfo(String listId, Boolean cacheImage) throws ApiException {
        okhttp3.Call localVarCall = imageModerationMatchValidateBeforeCall(listId, cacheImage, null);
        Type localVarReturnType = new TypeToken<MatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using &lt;a href&#x3D;\&quot;/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\&quot;&gt;this&lt;/a&gt; API.     Returns ID and tags of matching image.&lt;br/&gt;  &lt;br/&gt;  Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     * @param listId The list Id. (optional)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Supported values for tags are:  &lt;ul&gt;  &lt;li&gt;101: Nudity&lt;/li&gt;  &lt;li&gt;102: Sexual Content&lt;/li&gt;  &lt;li&gt;201: Alcohol&lt;/li&gt;  &lt;li&gt;202: Tobacco&lt;/li&gt;  &lt;li&gt;203: Drugs&lt;/li&gt;  &lt;li&gt;301: Child Exploitation&lt;/li&gt;  &lt;li&gt;401: Violence&lt;/li&gt;  &lt;li&gt;402: Weapons&lt;/li&gt;  &lt;li&gt;403: Gore&lt;/li&gt;  &lt;li&gt;501: Profanity&lt;/li&gt;  &lt;li&gt;502: Vulgarity&lt;/li&gt;  &lt;/ul&gt;. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationMatchAsync(String listId, Boolean cacheImage, final ApiCallback<MatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageModerationMatchValidateBeforeCall(listId, cacheImage, _callback);
        Type localVarReturnType = new TypeToken<MatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imageModerationOCR
     * @param language Language of the terms. (required)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.  image/tiff is not supported when enhanced is set to true  Note: This impacts the response time. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text found and list of candidate text details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationOCRCall(String language, Boolean cacheImage, Boolean enhanced, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contentmoderator/moderate/v1.0/ProcessImage/OCR";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (cacheImage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("CacheImage", cacheImage));
        }

        if (enhanced != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("enhanced", enhanced));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imageModerationOCRValidateBeforeCall(String language, Boolean cacheImage, Boolean enhanced, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'language' is set
        if (language == null) {
            throw new ApiException("Missing the required parameter 'language' when calling imageModerationOCR(Async)");
        }

        return imageModerationOCRCall(language, cacheImage, enhanced, _callback);

    }

    /**
     * 
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     * @param language Language of the terms. (required)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.  image/tiff is not supported when enhanced is set to true  Note: This impacts the response time. (optional, default to false)
     * @return OCR
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text found and list of candidate text details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public OCR imageModerationOCR(String language, Boolean cacheImage, Boolean enhanced) throws ApiException {
        ApiResponse<OCR> localVarResp = imageModerationOCRWithHttpInfo(language, cacheImage, enhanced);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     * @param language Language of the terms. (required)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.  image/tiff is not supported when enhanced is set to true  Note: This impacts the response time. (optional, default to false)
     * @return ApiResponse&lt;OCR&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text found and list of candidate text details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OCR> imageModerationOCRWithHttpInfo(String language, Boolean cacheImage, Boolean enhanced) throws ApiException {
        okhttp3.Call localVarCall = imageModerationOCRValidateBeforeCall(language, cacheImage, enhanced, null);
        Type localVarReturnType = new TypeToken<OCR>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     * @param language Language of the terms. (required)
     * @param cacheImage Whether to retain the submitted image for future use; defaults to false if omitted. (optional)
     * @param enhanced When set to True, the image goes through additional processing to come with additional candidates.  image/tiff is not supported when enhanced is set to true  Note: This impacts the response time. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The text found and list of candidate text details. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imageModerationOCRAsync(String language, Boolean cacheImage, Boolean enhanced, final ApiCallback<OCR> _callback) throws ApiException {

        okhttp3.Call localVarCall = imageModerationOCRValidateBeforeCall(language, cacheImage, enhanced, _callback);
        Type localVarReturnType = new TypeToken<OCR>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
