/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Coordinates to the found face.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Face {
  public static final String SERIALIZED_NAME_BOTTOM = "Bottom";
  @SerializedName(SERIALIZED_NAME_BOTTOM)
  private Integer bottom;

  public static final String SERIALIZED_NAME_LEFT = "Left";
  @SerializedName(SERIALIZED_NAME_LEFT)
  private Integer left;

  public static final String SERIALIZED_NAME_RIGHT = "Right";
  @SerializedName(SERIALIZED_NAME_RIGHT)
  private Integer right;

  public static final String SERIALIZED_NAME_TOP = "Top";
  @SerializedName(SERIALIZED_NAME_TOP)
  private Integer top;

  public Face() {
  }

  public Face bottom(Integer bottom) {
    this.bottom = bottom;
    return this;
  }

  /**
   * The bottom coordinate.
   * @return bottom
   */
  @javax.annotation.Nullable
  public Integer getBottom() {
    return bottom;
  }

  public void setBottom(Integer bottom) {
    this.bottom = bottom;
  }


  public Face left(Integer left) {
    this.left = left;
    return this;
  }

  /**
   * The left coordinate.
   * @return left
   */
  @javax.annotation.Nullable
  public Integer getLeft() {
    return left;
  }

  public void setLeft(Integer left) {
    this.left = left;
  }


  public Face right(Integer right) {
    this.right = right;
    return this;
  }

  /**
   * The right coordinate.
   * @return right
   */
  @javax.annotation.Nullable
  public Integer getRight() {
    return right;
  }

  public void setRight(Integer right) {
    this.right = right;
  }


  public Face top(Integer top) {
    this.top = top;
    return this;
  }

  /**
   * The top coordinate.
   * @return top
   */
  @javax.annotation.Nullable
  public Integer getTop() {
    return top;
  }

  public void setTop(Integer top) {
    this.top = top;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Face face = (Face) o;
    return Objects.equals(this.bottom, face.bottom) &&
        Objects.equals(this.left, face.left) &&
        Objects.equals(this.right, face.right) &&
        Objects.equals(this.top, face.top);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bottom, left, right, top);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Face {\n");
    sb.append("    bottom: ").append(toIndentedString(bottom)).append("\n");
    sb.append("    left: ").append(toIndentedString(left)).append("\n");
    sb.append("    right: ").append(toIndentedString(right)).append("\n");
    sb.append("    top: ").append(toIndentedString(top)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Bottom");
    openapiFields.add("Left");
    openapiFields.add("Right");
    openapiFields.add("Top");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Face
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Face.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Face is not found in the empty JSON string", Face.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Face.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Face` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Face.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Face' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Face> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Face.class));

       return (TypeAdapter<T>) new TypeAdapter<Face>() {
           @Override
           public void write(JsonWriter out, Face value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Face read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Face given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Face
   * @throws IOException if the JSON string is invalid with respect to Face
   */
  public static Face fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Face.class);
  }

  /**
   * Convert an instance of Face to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

