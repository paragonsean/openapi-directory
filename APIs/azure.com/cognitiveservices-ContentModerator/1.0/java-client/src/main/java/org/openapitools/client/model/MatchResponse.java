/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Match;
import org.openapitools.client.model.Status;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response for a Match request.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MatchResponse {
  public static final String SERIALIZED_NAME_CACHE_I_D = "CacheID";
  @SerializedName(SERIALIZED_NAME_CACHE_I_D)
  private String cacheID;

  public static final String SERIALIZED_NAME_IS_MATCH = "IsMatch";
  @SerializedName(SERIALIZED_NAME_IS_MATCH)
  private Boolean isMatch;

  public static final String SERIALIZED_NAME_MATCHES = "Matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private List<Match> matches = new ArrayList<>();

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private Status status;

  public static final String SERIALIZED_NAME_TRACKING_ID = "TrackingId";
  @SerializedName(SERIALIZED_NAME_TRACKING_ID)
  private String trackingId;

  public MatchResponse() {
  }

  public MatchResponse cacheID(String cacheID) {
    this.cacheID = cacheID;
    return this;
  }

  /**
   * The cache id.
   * @return cacheID
   */
  @javax.annotation.Nullable
  public String getCacheID() {
    return cacheID;
  }

  public void setCacheID(String cacheID) {
    this.cacheID = cacheID;
  }


  public MatchResponse isMatch(Boolean isMatch) {
    this.isMatch = isMatch;
    return this;
  }

  /**
   * Indicates if there is a match.
   * @return isMatch
   */
  @javax.annotation.Nullable
  public Boolean getIsMatch() {
    return isMatch;
  }

  public void setIsMatch(Boolean isMatch) {
    this.isMatch = isMatch;
  }


  public MatchResponse matches(List<Match> matches) {
    this.matches = matches;
    return this;
  }

  public MatchResponse addMatchesItem(Match matchesItem) {
    if (this.matches == null) {
      this.matches = new ArrayList<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

  /**
   * The match details.
   * @return matches
   */
  @javax.annotation.Nullable
  public List<Match> getMatches() {
    return matches;
  }

  public void setMatches(List<Match> matches) {
    this.matches = matches;
  }


  public MatchResponse status(Status status) {
    this.status = status;
    return this;
  }

  /**
   * Get status
   * @return status
   */
  @javax.annotation.Nullable
  public Status getStatus() {
    return status;
  }

  public void setStatus(Status status) {
    this.status = status;
  }


  public MatchResponse trackingId(String trackingId) {
    this.trackingId = trackingId;
    return this;
  }

  /**
   * The tracking id.
   * @return trackingId
   */
  @javax.annotation.Nullable
  public String getTrackingId() {
    return trackingId;
  }

  public void setTrackingId(String trackingId) {
    this.trackingId = trackingId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MatchResponse matchResponse = (MatchResponse) o;
    return Objects.equals(this.cacheID, matchResponse.cacheID) &&
        Objects.equals(this.isMatch, matchResponse.isMatch) &&
        Objects.equals(this.matches, matchResponse.matches) &&
        Objects.equals(this.status, matchResponse.status) &&
        Objects.equals(this.trackingId, matchResponse.trackingId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cacheID, isMatch, matches, status, trackingId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MatchResponse {\n");
    sb.append("    cacheID: ").append(toIndentedString(cacheID)).append("\n");
    sb.append("    isMatch: ").append(toIndentedString(isMatch)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    trackingId: ").append(toIndentedString(trackingId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("CacheID");
    openapiFields.add("IsMatch");
    openapiFields.add("Matches");
    openapiFields.add("Status");
    openapiFields.add("TrackingId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MatchResponse
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MatchResponse.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MatchResponse is not found in the empty JSON string", MatchResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MatchResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MatchResponse` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("CacheID") != null && !jsonObj.get("CacheID").isJsonNull()) && !jsonObj.get("CacheID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CacheID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CacheID").toString()));
      }
      if (jsonObj.get("Matches") != null && !jsonObj.get("Matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("Matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Matches` to be an array in the JSON string but got `%s`", jsonObj.get("Matches").toString()));
          }

          // validate the optional field `Matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            Match.validateJsonElement(jsonArraymatches.get(i));
          };
        }
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        Status.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("TrackingId") != null && !jsonObj.get("TrackingId").isJsonNull()) && !jsonObj.get("TrackingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TrackingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TrackingId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MatchResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MatchResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MatchResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MatchResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<MatchResponse>() {
           @Override
           public void write(JsonWriter out, MatchResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MatchResponse read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MatchResponse given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MatchResponse
   * @throws IOException if the JSON string is invalid with respect to MatchResponse
   */
  public static MatchResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MatchResponse.class);
  }

  /**
   * Convert an instance of MatchResponse to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

