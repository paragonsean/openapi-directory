/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Detected Terms details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:26:38.086753-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DetectedTerms {
  public static final String SERIALIZED_NAME_INDEX = "Index";
  @SerializedName(SERIALIZED_NAME_INDEX)
  private Integer index;

  public static final String SERIALIZED_NAME_LIST_ID = "ListId";
  @SerializedName(SERIALIZED_NAME_LIST_ID)
  private Integer listId;

  public static final String SERIALIZED_NAME_ORIGINAL_INDEX = "OriginalIndex";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_INDEX)
  private Integer originalIndex;

  public static final String SERIALIZED_NAME_TERM = "Term";
  @SerializedName(SERIALIZED_NAME_TERM)
  private String term;

  public DetectedTerms() {
  }

  public DetectedTerms index(Integer index) {
    this.index = index;
    return this;
  }

  /**
   * Index(Location) of the detected profanity term in the input text content.
   * @return index
   */
  @javax.annotation.Nullable
  public Integer getIndex() {
    return index;
  }

  public void setIndex(Integer index) {
    this.index = index;
  }


  public DetectedTerms listId(Integer listId) {
    this.listId = listId;
    return this;
  }

  /**
   * Matched Terms list Id.
   * @return listId
   */
  @javax.annotation.Nullable
  public Integer getListId() {
    return listId;
  }

  public void setListId(Integer listId) {
    this.listId = listId;
  }


  public DetectedTerms originalIndex(Integer originalIndex) {
    this.originalIndex = originalIndex;
    return this;
  }

  /**
   * Original Index(Location) of the detected profanity term in the input text content.
   * @return originalIndex
   */
  @javax.annotation.Nullable
  public Integer getOriginalIndex() {
    return originalIndex;
  }

  public void setOriginalIndex(Integer originalIndex) {
    this.originalIndex = originalIndex;
  }


  public DetectedTerms term(String term) {
    this.term = term;
    return this;
  }

  /**
   * Detected profanity term.
   * @return term
   */
  @javax.annotation.Nullable
  public String getTerm() {
    return term;
  }

  public void setTerm(String term) {
    this.term = term;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DetectedTerms detectedTerms = (DetectedTerms) o;
    return Objects.equals(this.index, detectedTerms.index) &&
        Objects.equals(this.listId, detectedTerms.listId) &&
        Objects.equals(this.originalIndex, detectedTerms.originalIndex) &&
        Objects.equals(this.term, detectedTerms.term);
  }

  @Override
  public int hashCode() {
    return Objects.hash(index, listId, originalIndex, term);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DetectedTerms {\n");
    sb.append("    index: ").append(toIndentedString(index)).append("\n");
    sb.append("    listId: ").append(toIndentedString(listId)).append("\n");
    sb.append("    originalIndex: ").append(toIndentedString(originalIndex)).append("\n");
    sb.append("    term: ").append(toIndentedString(term)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Index");
    openapiFields.add("ListId");
    openapiFields.add("OriginalIndex");
    openapiFields.add("Term");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DetectedTerms
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DetectedTerms.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DetectedTerms is not found in the empty JSON string", DetectedTerms.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DetectedTerms.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DetectedTerms` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Term") != null && !jsonObj.get("Term").isJsonNull()) && !jsonObj.get("Term").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Term` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Term").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DetectedTerms.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DetectedTerms' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DetectedTerms> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DetectedTerms.class));

       return (TypeAdapter<T>) new TypeAdapter<DetectedTerms>() {
           @Override
           public void write(JsonWriter out, DetectedTerms value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DetectedTerms read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DetectedTerms given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DetectedTerms
   * @throws IOException if the JSON string is invalid with respect to DetectedTerms
   */
  public static DetectedTerms fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DetectedTerms.class);
  }

  /**
   * Convert an instance of DetectedTerms to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

