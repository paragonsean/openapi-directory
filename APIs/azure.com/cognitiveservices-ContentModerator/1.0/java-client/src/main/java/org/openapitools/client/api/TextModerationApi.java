/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.APIError;
import org.openapitools.client.model.DetectedLanguage;
import org.openapitools.client.model.Screen;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TextModerationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TextModerationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TextModerationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for textModerationDetectLanguage
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The detected language result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textModerationDetectLanguageCall(String contentType, Object textContent, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textContent;

        // create path and map variables
        String localVarPath = "/contentmoderator/moderate/v1.0/ProcessText/DetectLanguage";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain",
            "text/html",
            "text/xml",
            "text/markdown"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textModerationDetectLanguageValidateBeforeCall(String contentType, Object textContent, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling textModerationDetectLanguage(Async)");
        }

        // verify the required parameter 'textContent' is set
        if (textContent == null) {
            throw new ApiException("Missing the required parameter 'textContent' when calling textModerationDetectLanguage(Async)");
        }

        return textModerationDetectLanguageCall(contentType, textContent, _callback);

    }

    /**
     * 
     * This operation will detect the language of given input content. Returns the &lt;a href&#x3D;\&quot;http://www-01.sil.org/iso639-3/codes.asp\&quot;&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @return DetectedLanguage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The detected language result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public DetectedLanguage textModerationDetectLanguage(String contentType, Object textContent) throws ApiException {
        ApiResponse<DetectedLanguage> localVarResp = textModerationDetectLanguageWithHttpInfo(contentType, textContent);
        return localVarResp.getData();
    }

    /**
     * 
     * This operation will detect the language of given input content. Returns the &lt;a href&#x3D;\&quot;http://www-01.sil.org/iso639-3/codes.asp\&quot;&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @return ApiResponse&lt;DetectedLanguage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The detected language result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DetectedLanguage> textModerationDetectLanguageWithHttpInfo(String contentType, Object textContent) throws ApiException {
        okhttp3.Call localVarCall = textModerationDetectLanguageValidateBeforeCall(contentType, textContent, null);
        Type localVarReturnType = new TypeToken<DetectedLanguage>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * This operation will detect the language of given input content. Returns the &lt;a href&#x3D;\&quot;http://www-01.sil.org/iso639-3/codes.asp\&quot;&gt;ISO 639-3 code&lt;/a&gt; for the predominant language comprising the submitted text. Over 110 languages supported.
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The detected language result. </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textModerationDetectLanguageAsync(String contentType, Object textContent, final ApiCallback<DetectedLanguage> _callback) throws ApiException {

        okhttp3.Call localVarCall = textModerationDetectLanguageValidateBeforeCall(contentType, textContent, _callback);
        Type localVarReturnType = new TypeToken<DetectedLanguage>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for textModerationScreenText
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @param language Language of the text. (optional)
     * @param autocorrect Autocorrect text. (optional, default to false)
     * @param PII Detect personal identifiable information. (optional, default to false)
     * @param listId The list Id. (optional)
     * @param classify Classify input. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textModerationScreenTextCall(String contentType, Object textContent, String language, Boolean autocorrect, Boolean PII, String listId, Boolean classify, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = textContent;

        // create path and map variables
        String localVarPath = "/contentmoderator/moderate/v1.0/ProcessText/Screen/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (autocorrect != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("autocorrect", autocorrect));
        }

        if (PII != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("PII", PII));
        }

        if (listId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listId", listId));
        }

        if (classify != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("classify", classify));
        }

        if (contentType != null) {
            localVarHeaderParams.put("Content-Type", localVarApiClient.parameterToString(contentType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "text/plain",
            "text/html",
            "text/xml",
            "text/markdown"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apim_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call textModerationScreenTextValidateBeforeCall(String contentType, Object textContent, String language, Boolean autocorrect, Boolean PII, String listId, Boolean classify, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling textModerationScreenText(Async)");
        }

        // verify the required parameter 'textContent' is set
        if (textContent == null) {
            throw new ApiException("Missing the required parameter 'textContent' when calling textModerationScreenText(Async)");
        }

        return textModerationScreenTextCall(contentType, textContent, language, autocorrect, PII, listId, classify, _callback);

    }

    /**
     * Detect profanity and match against custom and shared blacklists
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @param language Language of the text. (optional)
     * @param autocorrect Autocorrect text. (optional, default to false)
     * @param PII Detect personal identifiable information. (optional, default to false)
     * @param listId The list Id. (optional)
     * @param classify Classify input. (optional, default to false)
     * @return Screen
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public Screen textModerationScreenText(String contentType, Object textContent, String language, Boolean autocorrect, Boolean PII, String listId, Boolean classify) throws ApiException {
        ApiResponse<Screen> localVarResp = textModerationScreenTextWithHttpInfo(contentType, textContent, language, autocorrect, PII, listId, classify);
        return localVarResp.getData();
    }

    /**
     * Detect profanity and match against custom and shared blacklists
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @param language Language of the text. (optional)
     * @param autocorrect Autocorrect text. (optional, default to false)
     * @param PII Detect personal identifiable information. (optional, default to false)
     * @param listId The list Id. (optional)
     * @param classify Classify input. (optional, default to false)
     * @return ApiResponse&lt;Screen&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Screen> textModerationScreenTextWithHttpInfo(String contentType, Object textContent, String language, Boolean autocorrect, Boolean PII, String listId, Boolean classify) throws ApiException {
        okhttp3.Call localVarCall = textModerationScreenTextValidateBeforeCall(contentType, textContent, language, autocorrect, PII, listId, classify, null);
        Type localVarReturnType = new TypeToken<Screen>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detect profanity and match against custom and shared blacklists (asynchronously)
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     * @param contentType The content type. (required)
     * @param textContent Content to screen. (required)
     * @param language Language of the text. (optional)
     * @param autocorrect Autocorrect text. (optional, default to false)
     * @param PII Detect personal identifiable information. (optional, default to false)
     * @param listId The list Id. (optional)
     * @param classify Classify input. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Status 200 </td><td>  -  </td></tr>
        <tr><td> 0 </td><td> Error response. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call textModerationScreenTextAsync(String contentType, Object textContent, String language, Boolean autocorrect, Boolean PII, String listId, Boolean classify, final ApiCallback<Screen> _callback) throws ApiException {

        okhttp3.Call localVarCall = textModerationScreenTextValidateBeforeCall(contentType, textContent, language, autocorrect, PII, listId, classify, _callback);
        Type localVarReturnType = new TypeToken<Screen>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
