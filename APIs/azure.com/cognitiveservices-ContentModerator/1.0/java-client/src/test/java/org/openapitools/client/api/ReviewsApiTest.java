/*
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.APIError;
import org.openapitools.client.model.Frames;
import org.openapitools.client.model.Job;
import org.openapitools.client.model.JobId;
import org.openapitools.client.model.Review;
import org.openapitools.client.model.ReviewsAddVideoTranscriptModerationResultRequestInner;
import org.openapitools.client.model.ReviewsCreateJobRequest;
import org.openapitools.client.model.ReviewsCreateReviewsRequestInner;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReviewsApi
 */
@Disabled
public class ReviewsApiTest {

    private final ReviewsApi api = new ReviewsApi();

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsAddVideoFrameTest() throws ApiException {
        String teamName = null;
        String reviewId = null;
        Integer timescale = null;
        api.reviewsAddVideoFrame(teamName, reviewId, timescale);
        // TODO: test validations
    }

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsAddVideoTranscriptTest() throws ApiException {
        String teamName = null;
        String reviewId = null;
        String contentType = null;
        Object vtTFile = null;
        api.reviewsAddVideoTranscript(teamName, reviewId, contentType, vtTFile);
        // TODO: test validations
    }

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsAddVideoTranscriptModerationResultTest() throws ApiException {
        String contentType = null;
        String teamName = null;
        String reviewId = null;
        List<ReviewsAddVideoTranscriptModerationResultRequestInner> transcriptModerationBody = null;
        api.reviewsAddVideoTranscriptModerationResult(contentType, teamName, reviewId, transcriptModerationBody);
        // TODO: test validations
    }

    /**
     * A job Id will be returned for the content posted on this endpoint.     Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;    &lt;p&gt;  &lt;h4&gt;Job Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {&lt;br/&gt;    \&quot;JobId\&quot;: \&quot;&lt;Job Id&gt;,&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id, if the Job resulted in a Review to be created&gt;\&quot;,&lt;br/&gt;    \&quot;WorkFlowId\&quot;: \&quot;default\&quot;,&lt;br/&gt;    \&quot;Status\&quot;: \&quot;&lt;This will be one of Complete, InProgress, Error&gt;\&quot;,&lt;br/&gt;    \&quot;ContentType\&quot;: \&quot;Image\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;This is the ContentId that was specified on input&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Job\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;  &lt;p&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;&lt;br/&gt;    {    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsCreateJobTest() throws ApiException {
        String teamName = null;
        String contentType = null;
        String contentId = null;
        String workflowName = null;
        String contentType2 = null;
        ReviewsCreateJobRequest content = null;
        String callBackEndpoint = null;
        JobId response = api.reviewsCreateJob(teamName, contentType, contentId, workflowName, contentType2, content, callBackEndpoint);
        // TODO: test validations
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsCreateReviewsTest() throws ApiException {
        String urlContentType = null;
        String teamName = null;
        List<ReviewsCreateReviewsRequestInner> createReviewBody = null;
        String subTeam = null;
        List<String> response = api.reviewsCreateReviews(urlContentType, teamName, createReviewBody, subTeam);
        // TODO: test validations
    }

    /**
     * Get the Job Details for a Job Id.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsGetJobDetailsTest() throws ApiException {
        String teamName = null;
        String jobId = null;
        Job response = api.reviewsGetJobDetails(teamName, jobId);
        // TODO: test validations
    }

    /**
     * Returns review details for the review Id passed.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsGetReviewTest() throws ApiException {
        String teamName = null;
        String reviewId = null;
        Review response = api.reviewsGetReview(teamName, reviewId);
        // TODO: test validations
    }

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    &lt;h3&gt;CallBack Schemas &lt;/h3&gt;  &lt;h4&gt;Review Completion CallBack Sample&lt;/h4&gt;  &lt;p&gt;  {&lt;br/&gt;    \&quot;ReviewId\&quot;: \&quot;&lt;Review Id&gt;\&quot;,&lt;br/&gt;    \&quot;ModifiedOn\&quot;: \&quot;2016-10-11T22:36:32.9934851Z\&quot;,&lt;br/&gt;    \&quot;ModifiedBy\&quot;: \&quot;&lt;Name of the Reviewer&gt;\&quot;,&lt;br/&gt;    \&quot;CallBackType\&quot;: \&quot;Review\&quot;,&lt;br/&gt;    \&quot;ContentId\&quot;: \&quot;&lt;The ContentId that was specified input&gt;\&quot;,&lt;br/&gt;    \&quot;Metadata\&quot;: {&lt;br/&gt;      \&quot;adultscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;racyscore\&quot;: \&quot;0.xxx\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    },&lt;br/&gt;    \&quot;ReviewerResultTags\&quot;: {&lt;br/&gt;      \&quot;a\&quot;: \&quot;False\&quot;,&lt;br/&gt;      \&quot;r\&quot;: \&quot;True\&quot;&lt;br/&gt;    }&lt;br/&gt;  }&lt;br/&gt;    &lt;/p&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsGetVideoFramesTest() throws ApiException {
        String teamName = null;
        String reviewId = null;
        Integer startSeed = null;
        Integer noOfRecords = null;
        String filter = null;
        Frames response = api.reviewsGetVideoFrames(teamName, reviewId, startSeed, noOfRecords, filter);
        // TODO: test validations
    }

    /**
     * Publish video review to make it available for review.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void reviewsPublishVideoReviewTest() throws ApiException {
        String teamName = null;
        String reviewId = null;
        api.reviewsPublishVideoReview(teamName, reviewId);
        // TODO: test validations
    }

}
