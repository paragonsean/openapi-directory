/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.ContentModeratorClient);
  }
}(this, function(expect, ContentModeratorClient) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new ContentModeratorClient.OCR();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('OCR', function() {
    it('should create an instance of OCR', function() {
      // uncomment below and update the code to test OCR
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be.a(ContentModeratorClient.OCR);
    });

    it('should have the property cacheId (base name: "CacheId")', function() {
      // uncomment below and update the code to test the property cacheId
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

    it('should have the property candidates (base name: "Candidates")', function() {
      // uncomment below and update the code to test the property candidates
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

    it('should have the property language (base name: "Language")', function() {
      // uncomment below and update the code to test the property language
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

    it('should have the property metadata (base name: "Metadata")', function() {
      // uncomment below and update the code to test the property metadata
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

    it('should have the property status (base name: "Status")', function() {
      // uncomment below and update the code to test the property status
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "Text")', function() {
      // uncomment below and update the code to test the property text
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

    it('should have the property trackingId (base name: "TrackingId")', function() {
      // uncomment below and update the code to test the property trackingId
      //var instance = new ContentModeratorClient.OCR();
      //expect(instance).to.be();
    });

  });

}));
