/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import Evaluate from '../model/Evaluate';
import FoundFaces from '../model/FoundFaces';
import MatchResponse from '../model/MatchResponse';
import OCR from '../model/OCR';

/**
* ImageModeration service.
* @module api/ImageModerationApi
* @version 1.0
*/
export default class ImageModerationApi {

    /**
    * Constructs a new ImageModerationApi. 
    * @alias module:api/ImageModerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the imageModerationEvaluate operation.
     * @callback module:api/ImageModerationApi~imageModerationEvaluateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Evaluate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns probabilities of the image containing racy or adult content.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cacheImage] Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param {module:api/ImageModerationApi~imageModerationEvaluateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Evaluate}
     */
    imageModerationEvaluate(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'CacheImage': opts['cacheImage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Evaluate;
      return this.apiClient.callApi(
        '/contentmoderator/moderate/v1.0/ProcessImage/Evaluate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageModerationFindFaces operation.
     * @callback module:api/ImageModerationApi~imageModerationFindFacesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FoundFaces} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the list of faces found.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cacheImage] Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param {module:api/ImageModerationApi~imageModerationFindFacesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FoundFaces}
     */
    imageModerationFindFaces(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'CacheImage': opts['cacheImage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FoundFaces;
      return this.apiClient.callApi(
        '/contentmoderator/moderate/v1.0/ProcessImage/FindFaces', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageModerationMatch operation.
     * @callback module:api/ImageModerationApi~imageModerationMatchCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MatchResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fuzzily match an image against one of your custom Image Lists. You can create and manage your custom image lists using <a href=\"/docs/services/578ff44d2703741568569ab9/operations/578ff7b12703741568569abe\">this</a> API.     Returns ID and tags of matching image.<br/>  <br/>  Note: Refresh Index must be run on the corresponding Image List before additions and removals are reflected in the response.
     * @param {Object} opts Optional parameters
     * @param {String} [listId] The list Id.
     * @param {Boolean} [cacheImage] Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param {module:api/ImageModerationApi~imageModerationMatchCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MatchResponse}
     */
    imageModerationMatch(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'listId': opts['listId'],
        'CacheImage': opts['cacheImage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MatchResponse;
      return this.apiClient.callApi(
        '/contentmoderator/moderate/v1.0/ProcessImage/Match', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the imageModerationOCR operation.
     * @callback module:api/ImageModerationApi~imageModerationOCRCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OCR} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns any text found in the image for the language specified. If no language is specified in input then the detection defaults to English.
     * @param {String} language Language of the terms.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [cacheImage] Whether to retain the submitted image for future use; defaults to false if omitted.
     * @param {Boolean} [enhanced = false)] When set to True, the image goes through additional processing to come with additional candidates.  image/tiff is not supported when enhanced is set to true  Note: This impacts the response time.
     * @param {module:api/ImageModerationApi~imageModerationOCRCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OCR}
     */
    imageModerationOCR(language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling imageModerationOCR");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': language,
        'CacheImage': opts['cacheImage'],
        'enhanced': opts['enhanced']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OCR;
      return this.apiClient.callApi(
        '/contentmoderator/moderate/v1.0/ProcessImage/OCR', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
