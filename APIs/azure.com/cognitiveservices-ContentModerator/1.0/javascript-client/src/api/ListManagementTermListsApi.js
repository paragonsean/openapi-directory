/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import ListManagementImageListsCreateRequest from '../model/ListManagementImageListsCreateRequest';
import RefreshIndex from '../model/RefreshIndex';
import TermList from '../model/TermList';

/**
* ListManagementTermLists service.
* @module api/ListManagementTermListsApi
* @version 1.0
*/
export default class ListManagementTermListsApi {

    /**
    * Constructs a new ListManagementTermListsApi. 
    * @alias module:api/ListManagementTermListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listManagementTermListsCreate operation.
     * @callback module:api/ListManagementTermListsApi~listManagementTermListsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TermList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a Term List
     * @param {String} contentType The content type.
     * @param {module:model/ListManagementImageListsCreateRequest} body Schema of the body.
     * @param {module:api/ListManagementTermListsApi~listManagementTermListsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TermList}
     */
    listManagementTermListsCreate(contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listManagementTermListsCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listManagementTermListsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TermList;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermListsDelete operation.
     * @callback module:api/ListManagementTermListsApi~listManagementTermListsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes term list with the list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementTermListsApi~listManagementTermListsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listManagementTermListsDelete(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermListsDelete");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermListsGetAllTermLists operation.
     * @callback module:api/ListManagementTermListsApi~listManagementTermListsGetAllTermListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/TermList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * gets all the Term Lists
     * @param {module:api/ListManagementTermListsApi~listManagementTermListsGetAllTermListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/TermList>}
     */
    listManagementTermListsGetAllTermLists(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TermList];
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermListsGetDetails operation.
     * @callback module:api/ListManagementTermListsApi~listManagementTermListsGetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TermList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns list Id details of the term list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementTermListsApi~listManagementTermListsGetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TermList}
     */
    listManagementTermListsGetDetails(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermListsGetDetails");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TermList;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermListsRefreshIndex operation.
     * @callback module:api/ListManagementTermListsApi~listManagementTermListsRefreshIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes the index of the list with list Id equal to list ID passed.
     * @param {String} listId List Id of the image list.
     * @param {String} language Language of the terms.
     * @param {module:api/ListManagementTermListsApi~listManagementTermListsRefreshIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshIndex}
     */
    listManagementTermListsRefreshIndex(listId, language, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermListsRefreshIndex");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling listManagementTermListsRefreshIndex");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
        'language': language
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefreshIndex;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}/RefreshIndex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermListsUpdate operation.
     * @callback module:api/ListManagementTermListsApi~listManagementTermListsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TermList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an Term List.
     * @param {String} listId List Id of the image list.
     * @param {String} contentType The content type.
     * @param {module:model/ListManagementImageListsCreateRequest} body Schema of the body.
     * @param {module:api/ListManagementTermListsApi~listManagementTermListsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TermList}
     */
    listManagementTermListsUpdate(listId, contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermListsUpdate");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listManagementTermListsUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listManagementTermListsUpdate");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TermList;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
