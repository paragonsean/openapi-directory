/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import DetectedLanguage from '../model/DetectedLanguage';
import Screen from '../model/Screen';

/**
* TextModeration service.
* @module api/TextModerationApi
* @version 1.0
*/
export default class TextModerationApi {

    /**
    * Constructs a new TextModerationApi. 
    * @alias module:api/TextModerationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the textModerationDetectLanguage operation.
     * @callback module:api/TextModerationApi~textModerationDetectLanguageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DetectedLanguage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This operation will detect the language of given input content. Returns the <a href=\"http://www-01.sil.org/iso639-3/codes.asp\">ISO 639-3 code</a> for the predominant language comprising the submitted text. Over 110 languages supported.
     * @param {module:model/String} contentType The content type.
     * @param {Object.<String, Object>} textContent Content to screen.
     * @param {module:api/TextModerationApi~textModerationDetectLanguageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DetectedLanguage}
     */
    textModerationDetectLanguage(contentType, textContent, callback) {
      let postBody = textContent;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling textModerationDetectLanguage");
      }
      // verify the required parameter 'textContent' is set
      if (textContent === undefined || textContent === null) {
        throw new Error("Missing the required parameter 'textContent' when calling textModerationDetectLanguage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['text/plain', 'text/html', 'text/xml', 'text/markdown'];
      let accepts = ['application/json'];
      let returnType = DetectedLanguage;
      return this.apiClient.callApi(
        '/contentmoderator/moderate/v1.0/ProcessText/DetectLanguage', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the textModerationScreenText operation.
     * @callback module:api/TextModerationApi~textModerationScreenTextCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Screen} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Detect profanity and match against custom and shared blacklists
     * Detects profanity in more than 100 languages and match against custom and shared blacklists.
     * @param {module:model/String} contentType The content type.
     * @param {Object.<String, Object>} textContent Content to screen.
     * @param {Object} opts Optional parameters
     * @param {String} [language] Language of the text.
     * @param {Boolean} [autocorrect = false)] Autocorrect text.
     * @param {Boolean} [PII = false)] Detect personal identifiable information.
     * @param {String} [listId] The list Id.
     * @param {Boolean} [classify = false)] Classify input.
     * @param {module:api/TextModerationApi~textModerationScreenTextCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Screen}
     */
    textModerationScreenText(contentType, textContent, opts, callback) {
      opts = opts || {};
      let postBody = textContent;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling textModerationScreenText");
      }
      // verify the required parameter 'textContent' is set
      if (textContent === undefined || textContent === null) {
        throw new Error("Missing the required parameter 'textContent' when calling textModerationScreenText");
      }

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language'],
        'autocorrect': opts['autocorrect'],
        'PII': opts['PII'],
        'listId': opts['listId'],
        'classify': opts['classify']
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['text/plain', 'text/html', 'text/xml', 'text/markdown'];
      let accepts = ['application/json'];
      let returnType = Screen;
      return this.apiClient.callApi(
        '/contentmoderator/moderate/v1.0/ProcessText/Screen/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
