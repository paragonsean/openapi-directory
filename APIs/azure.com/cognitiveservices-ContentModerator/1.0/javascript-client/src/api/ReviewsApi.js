/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import Frames from '../model/Frames';
import Job from '../model/Job';
import JobId from '../model/JobId';
import Review from '../model/Review';
import ReviewsAddVideoTranscriptModerationResultRequestInner from '../model/ReviewsAddVideoTranscriptModerationResultRequestInner';
import ReviewsCreateJobRequest from '../model/ReviewsCreateJobRequest';
import ReviewsCreateReviewsRequestInner from '../model/ReviewsCreateReviewsRequestInner';

/**
* Reviews service.
* @module api/ReviewsApi
* @version 1.0
*/
export default class ReviewsApi {

    /**
    * Constructs a new ReviewsApi. 
    * @alias module:api/ReviewsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the reviewsAddVideoFrame operation.
     * @callback module:api/ReviewsApi~reviewsAddVideoFrameCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    <h3>CallBack Schemas </h3>  <h4>Review Completion CallBack Sample</h4>  <p>  {<br/>    \"ReviewId\": \"<Review Id>\",<br/>    \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>    \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>    \"CallBackType\": \"Review\",<br/>    \"ContentId\": \"<The ContentId that was specified input>\",<br/>    \"Metadata\": {<br/>      \"adultscore\": \"0.xxx\",<br/>      \"a\": \"False\",<br/>      \"racyscore\": \"0.xxx\",<br/>      \"r\": \"True\"<br/>    },<br/>    \"ReviewerResultTags\": {<br/>      \"a\": \"False\",<br/>      \"r\": \"True\"<br/>    }<br/>  }<br/>    </p>.
     * @param {String} teamName Your team name.
     * @param {String} reviewId Id of the review.
     * @param {Object} opts Optional parameters
     * @param {Number} [timescale] Timescale of the video you are adding frames to.
     * @param {module:api/ReviewsApi~reviewsAddVideoFrameCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reviewsAddVideoFrame(teamName, reviewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsAddVideoFrame");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsAddVideoFrame");
      }

      let pathParams = {
        'teamName': teamName,
        'reviewId': reviewId
      };
      let queryParams = {
        'timescale': opts['timescale']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsAddVideoTranscript operation.
     * @callback module:api/ReviewsApi~reviewsAddVideoTranscriptCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API adds a transcript file (text version of all the words spoken in a video) to a video review. The file should be a valid WebVTT format.
     * @param {String} teamName Your team name.
     * @param {String} reviewId Id of the review.
     * @param {module:model/String} contentType The content type.
     * @param {Object.<String, Object>} vTTFile Transcript file of the video.
     * @param {module:api/ReviewsApi~reviewsAddVideoTranscriptCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reviewsAddVideoTranscript(teamName, reviewId, contentType, vTTFile, callback) {
      let postBody = vTTFile;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsAddVideoTranscript");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsAddVideoTranscript");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reviewsAddVideoTranscript");
      }
      // verify the required parameter 'vTTFile' is set
      if (vTTFile === undefined || vTTFile === null) {
        throw new Error("Missing the required parameter 'vTTFile' when calling reviewsAddVideoTranscript");
      }

      let pathParams = {
        'teamName': teamName,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['text/plain'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsAddVideoTranscriptModerationResult operation.
     * @callback module:api/ReviewsApi~reviewsAddVideoTranscriptModerationResultCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * This API adds a transcript screen text result file for a video review. Transcript screen text result file is a result of Screen Text API . In order to generate transcript screen text result file , a transcript file has to be screened for profanity using Screen Text API.
     * @param {String} contentType The content type.
     * @param {String} teamName Your team name.
     * @param {String} reviewId Id of the review.
     * @param {Array.<module:model/ReviewsAddVideoTranscriptModerationResultRequestInner>} transcriptModerationBody Body for add video transcript moderation result API
     * @param {module:api/ReviewsApi~reviewsAddVideoTranscriptModerationResultCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reviewsAddVideoTranscriptModerationResult(contentType, teamName, reviewId, transcriptModerationBody, callback) {
      let postBody = transcriptModerationBody;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reviewsAddVideoTranscriptModerationResult");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsAddVideoTranscriptModerationResult");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsAddVideoTranscriptModerationResult");
      }
      // verify the required parameter 'transcriptModerationBody' is set
      if (transcriptModerationBody === undefined || transcriptModerationBody === null) {
        throw new Error("Missing the required parameter 'transcriptModerationBody' when calling reviewsAddVideoTranscriptModerationResult");
      }

      let pathParams = {
        'teamName': teamName,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsCreateJob operation.
     * @callback module:api/ReviewsApi~reviewsCreateJobCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JobId} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A job Id will be returned for the content posted on this endpoint.     Once the content is evaluated against the Workflow provided the review will be created or ignored based on the workflow expression.    <h3>CallBack Schemas </h3>    <p>  <h4>Job Completion CallBack Sample</h4><br/>    {<br/>    \"JobId\": \"<Job Id>,<br/>    \"ReviewId\": \"<Review Id, if the Job resulted in a Review to be created>\",<br/>    \"WorkFlowId\": \"default\",<br/>    \"Status\": \"<This will be one of Complete, InProgress, Error>\",<br/>    \"ContentType\": \"Image\",<br/>    \"ContentId\": \"<This is the ContentId that was specified on input>\",<br/>    \"CallBackType\": \"Job\",<br/>    \"Metadata\": {<br/>      \"adultscore\": \"0.xxx\",<br/>      \"a\": \"False\",<br/>      \"racyscore\": \"0.xxx\",<br/>      \"r\": \"True\"<br/>    }<br/>  }<br/>    </p>  <p>  <h4>Review Completion CallBack Sample</h4><br/>    {    \"ReviewId\": \"<Review Id>\",<br/>    \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>    \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>    \"CallBackType\": \"Review\",<br/>    \"ContentId\": \"<The ContentId that was specified input>\",<br/>    \"Metadata\": {<br/>      \"adultscore\": \"0.xxx\",      \"a\": \"False\",<br/>      \"racyscore\": \"0.xxx\",<br/>      \"r\": \"True\"<br/>    },<br/>    \"ReviewerResultTags\": {<br/>      \"a\": \"False\",<br/>      \"r\": \"True\"<br/>    }<br/>  }<br/>    </p>.
     * @param {String} teamName Your team name.
     * @param {module:model/String} contentType Image, Text or Video.
     * @param {String} contentId Id/Name to identify the content submitted.
     * @param {String} workflowName Workflow Name that you want to invoke.
     * @param {module:model/String} contentType2 The content type.
     * @param {module:model/ReviewsCreateJobRequest} content Content to evaluate.
     * @param {Object} opts Optional parameters
     * @param {String} [callBackEndpoint] Callback endpoint for posting the create job result.
     * @param {module:api/ReviewsApi~reviewsCreateJobCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JobId}
     */
    reviewsCreateJob(teamName, contentType, contentId, workflowName, contentType2, content, opts, callback) {
      opts = opts || {};
      let postBody = content;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsCreateJob");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling reviewsCreateJob");
      }
      // verify the required parameter 'contentId' is set
      if (contentId === undefined || contentId === null) {
        throw new Error("Missing the required parameter 'contentId' when calling reviewsCreateJob");
      }
      // verify the required parameter 'workflowName' is set
      if (workflowName === undefined || workflowName === null) {
        throw new Error("Missing the required parameter 'workflowName' when calling reviewsCreateJob");
      }
      // verify the required parameter 'contentType2' is set
      if (contentType2 === undefined || contentType2 === null) {
        throw new Error("Missing the required parameter 'contentType2' when calling reviewsCreateJob");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling reviewsCreateJob");
      }

      let pathParams = {
        'teamName': teamName
      };
      let queryParams = {
        'ContentType': contentType,
        'ContentId': contentId,
        'WorkflowName': workflowName,
        'CallBackEndpoint': opts['callBackEndpoint']
      };
      let headerParams = {
        'Content-Type': contentType2
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json', 'image/jpeg'];
      let accepts = ['application/json', 'text/json'];
      let returnType = JobId;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/jobs', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsCreateReviews operation.
     * @callback module:api/ReviewsApi~reviewsCreateReviewsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    <h3>CallBack Schemas </h3>  <h4>Review Completion CallBack Sample</h4>  <p>  {<br/>    \"ReviewId\": \"<Review Id>\",<br/>    \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>    \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>    \"CallBackType\": \"Review\",<br/>    \"ContentId\": \"<The ContentId that was specified input>\",<br/>    \"Metadata\": {<br/>      \"adultscore\": \"0.xxx\",<br/>      \"a\": \"False\",<br/>      \"racyscore\": \"0.xxx\",<br/>      \"r\": \"True\"<br/>    },<br/>    \"ReviewerResultTags\": {<br/>      \"a\": \"False\",<br/>      \"r\": \"True\"<br/>    }<br/>  }<br/>    </p>.
     * @param {String} urlContentType The content type.
     * @param {String} teamName Your team name.
     * @param {Array.<module:model/ReviewsCreateReviewsRequestInner>} createReviewBody Body for create reviews API
     * @param {Object} opts Optional parameters
     * @param {String} [subTeam] SubTeam of your team, you want to assign the created review to.
     * @param {module:api/ReviewsApi~reviewsCreateReviewsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    reviewsCreateReviews(urlContentType, teamName, createReviewBody, opts, callback) {
      opts = opts || {};
      let postBody = createReviewBody;
      // verify the required parameter 'urlContentType' is set
      if (urlContentType === undefined || urlContentType === null) {
        throw new Error("Missing the required parameter 'urlContentType' when calling reviewsCreateReviews");
      }
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsCreateReviews");
      }
      // verify the required parameter 'createReviewBody' is set
      if (createReviewBody === undefined || createReviewBody === null) {
        throw new Error("Missing the required parameter 'createReviewBody' when calling reviewsCreateReviews");
      }

      let pathParams = {
        'teamName': teamName
      };
      let queryParams = {
        'subTeam': opts['subTeam']
      };
      let headerParams = {
        'UrlContentType': urlContentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGetJobDetails operation.
     * @callback module:api/ReviewsApi~reviewsGetJobDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Job} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the Job Details for a Job Id.
     * @param {String} teamName Your Team Name.
     * @param {String} jobId Id of the job.
     * @param {module:api/ReviewsApi~reviewsGetJobDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Job}
     */
    reviewsGetJobDetails(teamName, jobId, callback) {
      let postBody = null;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsGetJobDetails");
      }
      // verify the required parameter 'jobId' is set
      if (jobId === undefined || jobId === null) {
        throw new Error("Missing the required parameter 'jobId' when calling reviewsGetJobDetails");
      }

      let pathParams = {
        'teamName': teamName,
        'JobId': jobId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Job;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGetReview operation.
     * @callback module:api/ReviewsApi~reviewsGetReviewCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Review} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns review details for the review Id passed.
     * @param {String} teamName Your Team Name.
     * @param {String} reviewId Id of the review.
     * @param {module:api/ReviewsApi~reviewsGetReviewCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Review}
     */
    reviewsGetReview(teamName, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsGetReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsGetReview");
      }

      let pathParams = {
        'teamName': teamName,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Review;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGetVideoFrames operation.
     * @callback module:api/ReviewsApi~reviewsGetVideoFramesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Frames} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * The reviews created would show up for Reviewers on your team. As Reviewers complete reviewing, results of the Review would be POSTED (i.e. HTTP POST) on the specified CallBackEndpoint.    <h3>CallBack Schemas </h3>  <h4>Review Completion CallBack Sample</h4>  <p>  {<br/>    \"ReviewId\": \"<Review Id>\",<br/>    \"ModifiedOn\": \"2016-10-11T22:36:32.9934851Z\",<br/>    \"ModifiedBy\": \"<Name of the Reviewer>\",<br/>    \"CallBackType\": \"Review\",<br/>    \"ContentId\": \"<The ContentId that was specified input>\",<br/>    \"Metadata\": {<br/>      \"adultscore\": \"0.xxx\",<br/>      \"a\": \"False\",<br/>      \"racyscore\": \"0.xxx\",<br/>      \"r\": \"True\"<br/>    },<br/>    \"ReviewerResultTags\": {<br/>      \"a\": \"False\",<br/>      \"r\": \"True\"<br/>    }<br/>  }<br/>    </p>.
     * @param {String} teamName Your team name.
     * @param {String} reviewId Id of the review.
     * @param {Object} opts Optional parameters
     * @param {Number} [startSeed] Time stamp of the frame from where you want to start fetching the frames.
     * @param {Number} [noOfRecords] Number of frames to fetch.
     * @param {String} [filter] Get frames filtered by tags.
     * @param {module:api/ReviewsApi~reviewsGetVideoFramesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Frames}
     */
    reviewsGetVideoFrames(teamName, reviewId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsGetVideoFrames");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsGetVideoFrames");
      }

      let pathParams = {
        'teamName': teamName,
        'reviewId': reviewId
      };
      let queryParams = {
        'startSeed': opts['startSeed'],
        'noOfRecords': opts['noOfRecords'],
        'filter': opts['filter']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Frames;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsPublishVideoReview operation.
     * @callback module:api/ReviewsApi~reviewsPublishVideoReviewCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Publish video review to make it available for review.
     * @param {String} teamName Your team name.
     * @param {String} reviewId Id of the review.
     * @param {module:api/ReviewsApi~reviewsPublishVideoReviewCallback} callback The callback function, accepting three arguments: error, data, response
     */
    reviewsPublishVideoReview(teamName, reviewId, callback) {
      let postBody = null;
      // verify the required parameter 'teamName' is set
      if (teamName === undefined || teamName === null) {
        throw new Error("Missing the required parameter 'teamName' when calling reviewsPublishVideoReview");
      }
      // verify the required parameter 'reviewId' is set
      if (reviewId === undefined || reviewId === null) {
        throw new Error("Missing the required parameter 'reviewId' when calling reviewsPublishVideoReview");
      }

      let pathParams = {
        'teamName': teamName,
        'reviewId': reviewId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
