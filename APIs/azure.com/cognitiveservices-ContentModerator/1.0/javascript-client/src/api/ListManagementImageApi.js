/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import Image from '../model/Image';
import ImageIds from '../model/ImageIds';

/**
* ListManagementImage service.
* @module api/ListManagementImageApi
* @version 1.0
*/
export default class ListManagementImageApi {

    /**
    * Constructs a new ListManagementImageApi. 
    * @alias module:api/ListManagementImageApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listManagementImageAddImage operation.
     * @callback module:api/ListManagementImageApi~listManagementImageAddImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an image to the list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {Object} opts Optional parameters
     * @param {Number} [tag] Tag for the image.
     * @param {String} [label] The image label.
     * @param {module:api/ListManagementImageApi~listManagementImageAddImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    listManagementImageAddImage(listId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageAddImage");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
        'tag': opts['tag'],
        'label': opts['label']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageDeleteAllImages operation.
     * @callback module:api/ListManagementImageApi~listManagementImageDeleteAllImagesCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all images from the list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementImageApi~listManagementImageDeleteAllImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listManagementImageDeleteAllImages(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageDeleteAllImages");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}/images', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageDeleteImage operation.
     * @callback module:api/ListManagementImageApi~listManagementImageDeleteImageCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an image from the list with list Id and image Id passed.
     * @param {String} listId List Id of the image list.
     * @param {String} imageId Id of the image.
     * @param {module:api/ListManagementImageApi~listManagementImageDeleteImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listManagementImageDeleteImage(listId, imageId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageDeleteImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling listManagementImageDeleteImage");
      }

      let pathParams = {
        'listId': listId,
        'ImageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}/images/{ImageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageGetAllImageIds operation.
     * @callback module:api/ListManagementImageApi~listManagementImageGetAllImageIdsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all image Ids from the list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementImageApi~listManagementImageGetAllImageIdsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageIds}
     */
    listManagementImageGetAllImageIds(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageGetAllImageIds");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageIds;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
