/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import Terms from '../model/Terms';

/**
* ListManagementTerm service.
* @module api/ListManagementTermApi
* @version 1.0
*/
export default class ListManagementTermApi {

    /**
    * Constructs a new ListManagementTermApi. 
    * @alias module:api/ListManagementTermApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listManagementTermAddTerm operation.
     * @callback module:api/ListManagementTermApi~listManagementTermAddTermCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a term to the term list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {String} term Term to be deleted
     * @param {String} language Language of the terms.
     * @param {module:api/ListManagementTermApi~listManagementTermAddTermCallback} callback The callback function, accepting three arguments: error, data, response
     */
    listManagementTermAddTerm(listId, term, language, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermAddTerm");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling listManagementTermAddTerm");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling listManagementTermAddTerm");
      }

      let pathParams = {
        'listId': listId,
        'term': term
      };
      let queryParams = {
        'language': language
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermDeleteAllTerms operation.
     * @callback module:api/ListManagementTermApi~listManagementTermDeleteAllTermsCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes all terms from the list with list Id equal to the list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {String} language Language of the terms.
     * @param {module:api/ListManagementTermApi~listManagementTermDeleteAllTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listManagementTermDeleteAllTerms(listId, language, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermDeleteAllTerms");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling listManagementTermDeleteAllTerms");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
        'language': language
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}/terms', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermDeleteTerm operation.
     * @callback module:api/ListManagementTermApi~listManagementTermDeleteTermCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a term from the list with list Id equal to the list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {String} term Term to be deleted
     * @param {String} language Language of the terms.
     * @param {module:api/ListManagementTermApi~listManagementTermDeleteTermCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listManagementTermDeleteTerm(listId, term, language, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermDeleteTerm");
      }
      // verify the required parameter 'term' is set
      if (term === undefined || term === null) {
        throw new Error("Missing the required parameter 'term' when calling listManagementTermDeleteTerm");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling listManagementTermDeleteTerm");
      }

      let pathParams = {
        'listId': listId,
        'term': term
      };
      let queryParams = {
        'language': language
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}/terms/{term}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementTermGetAllTerms operation.
     * @callback module:api/ListManagementTermApi~listManagementTermGetAllTermsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Terms} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all terms from the list with list Id equal to the list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {String} language Language of the terms.
     * @param {Object} opts Optional parameters
     * @param {Number} [offset] The pagination start index.
     * @param {Number} [limit] The max limit.
     * @param {module:api/ListManagementTermApi~listManagementTermGetAllTermsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Terms}
     */
    listManagementTermGetAllTerms(listId, language, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementTermGetAllTerms");
      }
      // verify the required parameter 'language' is set
      if (language === undefined || language === null) {
        throw new Error("Missing the required parameter 'language' when calling listManagementTermGetAllTerms");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
        'language': language,
        'offset': opts['offset'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Terms;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/termlists/{listId}/terms', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
