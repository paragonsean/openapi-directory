/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import APIError from '../model/APIError';
import ImageList from '../model/ImageList';
import ListManagementImageListsCreateRequest from '../model/ListManagementImageListsCreateRequest';
import RefreshIndex from '../model/RefreshIndex';

/**
* ListManagementImageLists service.
* @module api/ListManagementImageListsApi
* @version 1.0
*/
export default class ListManagementImageListsApi {

    /**
    * Constructs a new ListManagementImageListsApi. 
    * @alias module:api/ListManagementImageListsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the listManagementImageListsCreate operation.
     * @callback module:api/ListManagementImageListsApi~listManagementImageListsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates an image list.
     * @param {String} contentType The content type.
     * @param {module:model/ListManagementImageListsCreateRequest} body Schema of the body.
     * @param {module:api/ListManagementImageListsApi~listManagementImageListsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageList}
     */
    listManagementImageListsCreate(contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listManagementImageListsCreate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listManagementImageListsCreate");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageList;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageListsDelete operation.
     * @callback module:api/ListManagementImageListsApi~listManagementImageListsDeleteCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes image list with the list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementImageListsApi~listManagementImageListsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    listManagementImageListsDelete(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageListsDelete");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageListsGetAllImageLists operation.
     * @callback module:api/ListManagementImageListsApi~listManagementImageListsGetAllImageListsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ImageList>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets all the Image Lists.
     * @param {module:api/ListManagementImageListsApi~listManagementImageListsGetAllImageListsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ImageList>}
     */
    listManagementImageListsGetAllImageLists(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ImageList];
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageListsGetDetails operation.
     * @callback module:api/ListManagementImageListsApi~listManagementImageListsGetDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the details of the image list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementImageListsApi~listManagementImageListsGetDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageList}
     */
    listManagementImageListsGetDetails(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageListsGetDetails");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageList;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageListsRefreshIndex operation.
     * @callback module:api/ListManagementImageListsApi~listManagementImageListsRefreshIndexCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RefreshIndex} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Refreshes the index of the list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {module:api/ListManagementImageListsApi~listManagementImageListsRefreshIndexCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RefreshIndex}
     */
    listManagementImageListsRefreshIndex(listId, callback) {
      let postBody = null;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageListsRefreshIndex");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RefreshIndex;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}/RefreshIndex', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listManagementImageListsUpdate operation.
     * @callback module:api/ListManagementImageListsApi~listManagementImageListsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates an image list with list Id equal to list Id passed.
     * @param {String} listId List Id of the image list.
     * @param {String} contentType The content type.
     * @param {module:model/ListManagementImageListsCreateRequest} body Schema of the body.
     * @param {module:api/ListManagementImageListsApi~listManagementImageListsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageList}
     */
    listManagementImageListsUpdate(listId, contentType, body, callback) {
      let postBody = body;
      // verify the required parameter 'listId' is set
      if (listId === undefined || listId === null) {
        throw new Error("Missing the required parameter 'listId' when calling listManagementImageListsUpdate");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling listManagementImageListsUpdate");
      }
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling listManagementImageListsUpdate");
      }

      let pathParams = {
        'listId': listId
      };
      let queryParams = {
      };
      let headerParams = {
        'Content-Type': contentType
      };
      let formParams = {
      };

      let authNames = ['apim_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageList;
      return this.apiClient.callApi(
        '/contentmoderator/lists/v1.0/imagelists/{listId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
