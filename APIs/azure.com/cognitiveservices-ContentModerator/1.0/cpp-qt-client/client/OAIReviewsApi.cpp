/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviewsApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIReviewsApi::OAIReviewsApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIReviewsApi::~OAIReviewsApi() {
}

void OAIReviewsApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://azure.local/"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("reviewsAddVideoFrame", defaultConf);
    _serverIndices.insert("reviewsAddVideoFrame", 0);
    _serverConfigs.insert("reviewsAddVideoTranscript", defaultConf);
    _serverIndices.insert("reviewsAddVideoTranscript", 0);
    _serverConfigs.insert("reviewsAddVideoTranscriptModerationResult", defaultConf);
    _serverIndices.insert("reviewsAddVideoTranscriptModerationResult", 0);
    _serverConfigs.insert("reviewsCreateJob", defaultConf);
    _serverIndices.insert("reviewsCreateJob", 0);
    _serverConfigs.insert("reviewsCreateReviews", defaultConf);
    _serverIndices.insert("reviewsCreateReviews", 0);
    _serverConfigs.insert("reviewsGetJobDetails", defaultConf);
    _serverIndices.insert("reviewsGetJobDetails", 0);
    _serverConfigs.insert("reviewsGetReview", defaultConf);
    _serverIndices.insert("reviewsGetReview", 0);
    _serverConfigs.insert("reviewsGetVideoFrames", defaultConf);
    _serverIndices.insert("reviewsGetVideoFrames", 0);
    _serverConfigs.insert("reviewsPublishVideoReview", defaultConf);
    _serverIndices.insert("reviewsPublishVideoReview", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIReviewsApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIReviewsApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIReviewsApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIReviewsApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIReviewsApi::setUsername(const QString &username) {
    _username = username;
}

void OAIReviewsApi::setPassword(const QString &password) {
    _password = password;
}


void OAIReviewsApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIReviewsApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIReviewsApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIReviewsApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReviewsApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIReviewsApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIReviewsApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIReviewsApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIReviewsApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIReviewsApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIReviewsApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIReviewsApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIReviewsApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIReviewsApi::reviewsAddVideoFrame(const QString &team_name, const QString &review_id, const ::OpenAPI::OptionalParam<qint32> &timescale) {
    QString fullPath = QString(_serverConfigs["reviewsAddVideoFrame"][_serverIndices.value("reviewsAddVideoFrame")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString review_idPathParam("{");
        review_idPathParam.append("reviewId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reviewId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reviewId"+pathSuffix : pathPrefix;
        fullPath.replace(review_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(review_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (timescale.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timescale", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timescale")).append(querySuffix).append(QUrl::toPercentEncoding(timescale.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsAddVideoFrameCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsAddVideoFrameCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsAddVideoFrameSignal();
        Q_EMIT reviewsAddVideoFrameSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsAddVideoFrameSignalE(error_type, error_str);
        Q_EMIT reviewsAddVideoFrameSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsAddVideoFrameSignalError(error_type, error_str);
        Q_EMIT reviewsAddVideoFrameSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsAddVideoTranscript(const QString &team_name, const QString &review_id, const QString &content_type, const OAIObject &vtt_file) {
    QString fullPath = QString(_serverConfigs["reviewsAddVideoTranscript"][_serverIndices.value("reviewsAddVideoTranscript")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcript");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString review_idPathParam("{");
        review_idPathParam.append("reviewId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reviewId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reviewId"+pathSuffix : pathPrefix;
        fullPath.replace(review_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(review_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {

        
        QByteArray output = vtt_file.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsAddVideoTranscriptCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsAddVideoTranscriptCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsAddVideoTranscriptSignal();
        Q_EMIT reviewsAddVideoTranscriptSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsAddVideoTranscriptSignalE(error_type, error_str);
        Q_EMIT reviewsAddVideoTranscriptSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsAddVideoTranscriptSignalError(error_type, error_str);
        Q_EMIT reviewsAddVideoTranscriptSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsAddVideoTranscriptModerationResult(const QString &content_type, const QString &team_name, const QString &review_id, const QList<OAIReviews_AddVideoTranscriptModerationResult_request_inner> &transcript_moderation_body) {
    QString fullPath = QString(_serverConfigs["reviewsAddVideoTranscriptModerationResult"][_serverIndices.value("reviewsAddVideoTranscriptModerationResult")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/transcriptmoderationresult");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString review_idPathParam("{");
        review_idPathParam.append("reviewId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reviewId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reviewId"+pathSuffix : pathPrefix;
        fullPath.replace(review_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(review_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "PUT");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(transcript_moderation_body).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsAddVideoTranscriptModerationResultCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsAddVideoTranscriptModerationResultCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsAddVideoTranscriptModerationResultSignal();
        Q_EMIT reviewsAddVideoTranscriptModerationResultSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsAddVideoTranscriptModerationResultSignalE(error_type, error_str);
        Q_EMIT reviewsAddVideoTranscriptModerationResultSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsAddVideoTranscriptModerationResultSignalError(error_type, error_str);
        Q_EMIT reviewsAddVideoTranscriptModerationResultSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsCreateJob(const QString &team_name, const QString &content_type, const QString &content_id, const QString &workflow_name, const QString &content_type2, const OAIReviews_CreateJob_request &content, const ::OpenAPI::OptionalParam<QString> &call_back_endpoint) {
    QString fullPath = QString(_serverConfigs["reviewsCreateJob"][_serverIndices.value("reviewsCreateJob")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/jobs");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ContentType", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ContentType")).append(querySuffix).append(QUrl::toPercentEncoding(content_type));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "ContentId", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("ContentId")).append(querySuffix).append(QUrl::toPercentEncoding(content_id));
    }
    
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "WorkflowName", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("WorkflowName")).append(querySuffix).append(QUrl::toPercentEncoding(workflow_name));
    }
    if (call_back_endpoint.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "CallBackEndpoint", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("CallBackEndpoint")).append(querySuffix).append(QUrl::toPercentEncoding(call_back_endpoint.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {

        
        QByteArray output = content.asJson().toUtf8();
        input.request_body.append(output);
    }
    
    {
        if (!::OpenAPI::toStringValue(content_type2).isEmpty()) {
            input.headers.insert("Content-Type", ::OpenAPI::toStringValue(content_type2));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsCreateJobCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsCreateJobCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJobId output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsCreateJobSignal(output);
        Q_EMIT reviewsCreateJobSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsCreateJobSignalE(output, error_type, error_str);
        Q_EMIT reviewsCreateJobSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsCreateJobSignalError(output, error_type, error_str);
        Q_EMIT reviewsCreateJobSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsCreateReviews(const QString &url_content_type, const QString &team_name, const QList<OAIReviews_CreateReviews_request_inner> &create_review_body, const ::OpenAPI::OptionalParam<QString> &sub_team) {
    QString fullPath = QString(_serverConfigs["reviewsCreateReviews"][_serverIndices.value("reviewsCreateReviews")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (sub_team.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "subTeam", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("subTeam")).append(querySuffix).append(QUrl::toPercentEncoding(sub_team.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    {
        QJsonDocument doc(::OpenAPI::toJsonValue(create_review_body).toArray());
        QByteArray bytes = doc.toJson();
        input.request_body.append(bytes);
    }
    
    {
        if (!::OpenAPI::toStringValue(url_content_type).isEmpty()) {
            input.headers.insert("UrlContentType", ::OpenAPI::toStringValue(url_content_type));
        }
        }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsCreateReviewsCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsCreateReviewsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    QList<QString> output;
    QString json(worker->response);
    QByteArray array(json.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonArray jsonArray = doc.array();
    for (QJsonValue obj : jsonArray) {
        QString val;
        ::OpenAPI::fromJsonValue(val, obj);
        output.append(val);
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsCreateReviewsSignal(output);
        Q_EMIT reviewsCreateReviewsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsCreateReviewsSignalE(output, error_type, error_str);
        Q_EMIT reviewsCreateReviewsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsCreateReviewsSignalError(output, error_type, error_str);
        Q_EMIT reviewsCreateReviewsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsGetJobDetails(const QString &team_name, const QString &job_id) {
    QString fullPath = QString(_serverConfigs["reviewsGetJobDetails"][_serverIndices.value("reviewsGetJobDetails")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/jobs/{JobId}");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString job_idPathParam("{");
        job_idPathParam.append("JobId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "JobId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"JobId"+pathSuffix : pathPrefix;
        fullPath.replace(job_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(job_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsGetJobDetailsCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsGetJobDetailsCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIJob output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsGetJobDetailsSignal(output);
        Q_EMIT reviewsGetJobDetailsSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsGetJobDetailsSignalE(output, error_type, error_str);
        Q_EMIT reviewsGetJobDetailsSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsGetJobDetailsSignalError(output, error_type, error_str);
        Q_EMIT reviewsGetJobDetailsSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsGetReview(const QString &team_name, const QString &review_id) {
    QString fullPath = QString(_serverConfigs["reviewsGetReview"][_serverIndices.value("reviewsGetReview")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString review_idPathParam("{");
        review_idPathParam.append("reviewId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reviewId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reviewId"+pathSuffix : pathPrefix;
        fullPath.replace(review_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(review_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsGetReviewCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsGetReviewCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIReview output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsGetReviewSignal(output);
        Q_EMIT reviewsGetReviewSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsGetReviewSignalE(output, error_type, error_str);
        Q_EMIT reviewsGetReviewSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsGetReviewSignalError(output, error_type, error_str);
        Q_EMIT reviewsGetReviewSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsGetVideoFrames(const QString &team_name, const QString &review_id, const ::OpenAPI::OptionalParam<qint32> &start_seed, const ::OpenAPI::OptionalParam<qint32> &no_of_records, const ::OpenAPI::OptionalParam<QString> &filter) {
    QString fullPath = QString(_serverConfigs["reviewsGetVideoFrames"][_serverIndices.value("reviewsGetVideoFrames")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/frames");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString review_idPathParam("{");
        review_idPathParam.append("reviewId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reviewId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reviewId"+pathSuffix : pathPrefix;
        fullPath.replace(review_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(review_id)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (start_seed.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "startSeed", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("startSeed")).append(querySuffix).append(QUrl::toPercentEncoding(start_seed.stringValue()));
    }
    if (no_of_records.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "noOfRecords", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("noOfRecords")).append(querySuffix).append(QUrl::toPercentEncoding(no_of_records.stringValue()));
    }
    if (filter.hasValue())
    {
        queryStyle = "";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "filter", false);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("filter")).append(querySuffix).append(QUrl::toPercentEncoding(filter.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsGetVideoFramesCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsGetVideoFramesCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    OAIFrames output(QString(worker->response));
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsGetVideoFramesSignal(output);
        Q_EMIT reviewsGetVideoFramesSignalFull(worker, output);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsGetVideoFramesSignalE(output, error_type, error_str);
        Q_EMIT reviewsGetVideoFramesSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsGetVideoFramesSignalError(output, error_type, error_str);
        Q_EMIT reviewsGetVideoFramesSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::reviewsPublishVideoReview(const QString &team_name, const QString &review_id) {
    QString fullPath = QString(_serverConfigs["reviewsPublishVideoReview"][_serverIndices.value("reviewsPublishVideoReview")].URL()+"/contentmoderator/review/v1.0/teams/{teamName}/reviews/{reviewId}/publish");
    
    if (_apiKeys.contains("apim_key")) {
        addHeaders("apim_key",_apiKeys.find("apim_key").value());
    }
    
    
    {
        QString team_namePathParam("{");
        team_namePathParam.append("teamName").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "teamName", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"teamName"+pathSuffix : pathPrefix;
        fullPath.replace(team_namePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(team_name)));
    }
    
    {
        QString review_idPathParam("{");
        review_idPathParam.append("reviewId").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "reviewId", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"reviewId"+pathSuffix : pathPrefix;
        fullPath.replace(review_idPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(review_id)));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIReviewsApi::reviewsPublishVideoReviewCallback);
    connect(this, &OAIReviewsApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIReviewsApi::reviewsPublishVideoReviewCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT reviewsPublishVideoReviewSignal();
        Q_EMIT reviewsPublishVideoReviewSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT reviewsPublishVideoReviewSignalE(error_type, error_str);
        Q_EMIT reviewsPublishVideoReviewSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT reviewsPublishVideoReviewSignalError(error_type, error_str);
        Q_EMIT reviewsPublishVideoReviewSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIReviewsApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
