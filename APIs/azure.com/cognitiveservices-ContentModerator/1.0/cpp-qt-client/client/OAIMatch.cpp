/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatch.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatch::OAIMatch(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatch::OAIMatch() {
    this->initializeModel();
}

OAIMatch::~OAIMatch() {}

void OAIMatch::initializeModel() {

    m_label_isSet = false;
    m_label_isValid = false;

    m_match_id_isSet = false;
    m_match_id_isValid = false;

    m_score_isSet = false;
    m_score_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIMatch::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatch::fromJsonObject(QJsonObject json) {

    m_label_isValid = ::OpenAPI::fromJsonValue(m_label, json[QString("Label")]);
    m_label_isSet = !json[QString("Label")].isNull() && m_label_isValid;

    m_match_id_isValid = ::OpenAPI::fromJsonValue(m_match_id, json[QString("MatchId")]);
    m_match_id_isSet = !json[QString("MatchId")].isNull() && m_match_id_isValid;

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("Source")]);
    m_source_isSet = !json[QString("Source")].isNull() && m_source_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("Tags")]);
    m_tags_isSet = !json[QString("Tags")].isNull() && m_tags_isValid;
}

QString OAIMatch::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatch::asJsonObject() const {
    QJsonObject obj;
    if (m_label_isSet) {
        obj.insert(QString("Label"), ::OpenAPI::toJsonValue(m_label));
    }
    if (m_match_id_isSet) {
        obj.insert(QString("MatchId"), ::OpenAPI::toJsonValue(m_match_id));
    }
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    if (m_source_isSet) {
        obj.insert(QString("Source"), ::OpenAPI::toJsonValue(m_source));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("Tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAIMatch::getLabel() const {
    return m_label;
}
void OAIMatch::setLabel(const QString &label) {
    m_label = label;
    m_label_isSet = true;
}

bool OAIMatch::is_label_Set() const{
    return m_label_isSet;
}

bool OAIMatch::is_label_Valid() const{
    return m_label_isValid;
}

qint32 OAIMatch::getMatchId() const {
    return m_match_id;
}
void OAIMatch::setMatchId(const qint32 &match_id) {
    m_match_id = match_id;
    m_match_id_isSet = true;
}

bool OAIMatch::is_match_id_Set() const{
    return m_match_id_isSet;
}

bool OAIMatch::is_match_id_Valid() const{
    return m_match_id_isValid;
}

double OAIMatch::getScore() const {
    return m_score;
}
void OAIMatch::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIMatch::is_score_Set() const{
    return m_score_isSet;
}

bool OAIMatch::is_score_Valid() const{
    return m_score_isValid;
}

QString OAIMatch::getSource() const {
    return m_source;
}
void OAIMatch::setSource(const QString &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIMatch::is_source_Set() const{
    return m_source_isSet;
}

bool OAIMatch::is_source_Valid() const{
    return m_source_isValid;
}

QList<qint32> OAIMatch::getTags() const {
    return m_tags;
}
void OAIMatch::setTags(const QList<qint32> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIMatch::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIMatch::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIMatch::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_match_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatch::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
