/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReview.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReview::OAIReview(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReview::OAIReview() {
    this->initializeModel();
}

OAIReview::~OAIReview() {}

void OAIReview::initializeModel() {

    m_callback_endpoint_isSet = false;
    m_callback_endpoint_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_created_by_isSet = false;
    m_created_by_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_review_id_isSet = false;
    m_review_id_isValid = false;

    m_reviewer_result_tags_isSet = false;
    m_reviewer_result_tags_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_team_isSet = false;
    m_sub_team_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReview::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReview::fromJsonObject(QJsonObject json) {

    m_callback_endpoint_isValid = ::OpenAPI::fromJsonValue(m_callback_endpoint, json[QString("CallbackEndpoint")]);
    m_callback_endpoint_isSet = !json[QString("CallbackEndpoint")].isNull() && m_callback_endpoint_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("ContentId")]);
    m_content_id_isSet = !json[QString("ContentId")].isNull() && m_content_id_isValid;

    m_created_by_isValid = ::OpenAPI::fromJsonValue(m_created_by, json[QString("CreatedBy")]);
    m_created_by_isSet = !json[QString("CreatedBy")].isNull() && m_created_by_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_review_id_isValid = ::OpenAPI::fromJsonValue(m_review_id, json[QString("ReviewId")]);
    m_review_id_isSet = !json[QString("ReviewId")].isNull() && m_review_id_isValid;

    m_reviewer_result_tags_isValid = ::OpenAPI::fromJsonValue(m_reviewer_result_tags, json[QString("ReviewerResultTags")]);
    m_reviewer_result_tags_isSet = !json[QString("ReviewerResultTags")].isNull() && m_reviewer_result_tags_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_sub_team_isValid = ::OpenAPI::fromJsonValue(m_sub_team, json[QString("SubTeam")]);
    m_sub_team_isSet = !json[QString("SubTeam")].isNull() && m_sub_team_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIReview::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReview::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_endpoint_isSet) {
        obj.insert(QString("CallbackEndpoint"), ::OpenAPI::toJsonValue(m_callback_endpoint));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("ContentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_created_by_isSet) {
        obj.insert(QString("CreatedBy"), ::OpenAPI::toJsonValue(m_created_by));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_review_id_isSet) {
        obj.insert(QString("ReviewId"), ::OpenAPI::toJsonValue(m_review_id));
    }
    if (m_reviewer_result_tags.size() > 0) {
        obj.insert(QString("ReviewerResultTags"), ::OpenAPI::toJsonValue(m_reviewer_result_tags));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_team_isSet) {
        obj.insert(QString("SubTeam"), ::OpenAPI::toJsonValue(m_sub_team));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIReview::getCallbackEndpoint() const {
    return m_callback_endpoint;
}
void OAIReview::setCallbackEndpoint(const QString &callback_endpoint) {
    m_callback_endpoint = callback_endpoint;
    m_callback_endpoint_isSet = true;
}

bool OAIReview::is_callback_endpoint_Set() const{
    return m_callback_endpoint_isSet;
}

bool OAIReview::is_callback_endpoint_Valid() const{
    return m_callback_endpoint_isValid;
}

QString OAIReview::getContent() const {
    return m_content;
}
void OAIReview::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIReview::is_content_Set() const{
    return m_content_isSet;
}

bool OAIReview::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIReview::getContentId() const {
    return m_content_id;
}
void OAIReview::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIReview::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIReview::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QString OAIReview::getCreatedBy() const {
    return m_created_by;
}
void OAIReview::setCreatedBy(const QString &created_by) {
    m_created_by = created_by;
    m_created_by_isSet = true;
}

bool OAIReview::is_created_by_Set() const{
    return m_created_by_isSet;
}

bool OAIReview::is_created_by_Valid() const{
    return m_created_by_isValid;
}

QList<OAIKeyValuePair> OAIReview::getMetadata() const {
    return m_metadata;
}
void OAIReview::setMetadata(const QList<OAIKeyValuePair> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIReview::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIReview::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIReview::getReviewId() const {
    return m_review_id;
}
void OAIReview::setReviewId(const QString &review_id) {
    m_review_id = review_id;
    m_review_id_isSet = true;
}

bool OAIReview::is_review_id_Set() const{
    return m_review_id_isSet;
}

bool OAIReview::is_review_id_Valid() const{
    return m_review_id_isValid;
}

QList<OAIKeyValuePair> OAIReview::getReviewerResultTags() const {
    return m_reviewer_result_tags;
}
void OAIReview::setReviewerResultTags(const QList<OAIKeyValuePair> &reviewer_result_tags) {
    m_reviewer_result_tags = reviewer_result_tags;
    m_reviewer_result_tags_isSet = true;
}

bool OAIReview::is_reviewer_result_tags_Set() const{
    return m_reviewer_result_tags_isSet;
}

bool OAIReview::is_reviewer_result_tags_Valid() const{
    return m_reviewer_result_tags_isValid;
}

QString OAIReview::getStatus() const {
    return m_status;
}
void OAIReview::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIReview::is_status_Set() const{
    return m_status_isSet;
}

bool OAIReview::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIReview::getSubTeam() const {
    return m_sub_team;
}
void OAIReview::setSubTeam(const QString &sub_team) {
    m_sub_team = sub_team;
    m_sub_team_isSet = true;
}

bool OAIReview::is_sub_team_Set() const{
    return m_sub_team_isSet;
}

bool OAIReview::is_sub_team_Valid() const{
    return m_sub_team_isValid;
}

QString OAIReview::getType() const {
    return m_type;
}
void OAIReview::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReview::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReview::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReview::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_by_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reviewer_result_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_team_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReview::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
