/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedLanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedLanguage::OAIDetectedLanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedLanguage::OAIDetectedLanguage() {
    this->initializeModel();
}

OAIDetectedLanguage::~OAIDetectedLanguage() {}

void OAIDetectedLanguage::initializeModel() {

    m_detected_language_isSet = false;
    m_detected_language_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIDetectedLanguage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedLanguage::fromJsonObject(QJsonObject json) {

    m_detected_language_isValid = ::OpenAPI::fromJsonValue(m_detected_language, json[QString("DetectedLanguage")]);
    m_detected_language_isSet = !json[QString("DetectedLanguage")].isNull() && m_detected_language_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIDetectedLanguage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedLanguage::asJsonObject() const {
    QJsonObject obj;
    if (m_detected_language_isSet) {
        obj.insert(QString("DetectedLanguage"), ::OpenAPI::toJsonValue(m_detected_language));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIDetectedLanguage::getDetectedLanguage() const {
    return m_detected_language;
}
void OAIDetectedLanguage::setDetectedLanguage(const QString &detected_language) {
    m_detected_language = detected_language;
    m_detected_language_isSet = true;
}

bool OAIDetectedLanguage::is_detected_language_Set() const{
    return m_detected_language_isSet;
}

bool OAIDetectedLanguage::is_detected_language_Valid() const{
    return m_detected_language_isValid;
}

OAIStatus OAIDetectedLanguage::getStatus() const {
    return m_status;
}
void OAIDetectedLanguage::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIDetectedLanguage::is_status_Set() const{
    return m_status_isSet;
}

bool OAIDetectedLanguage::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIDetectedLanguage::getTrackingId() const {
    return m_tracking_id;
}
void OAIDetectedLanguage::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIDetectedLanguage::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIDetectedLanguage::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIDetectedLanguage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_detected_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedLanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
