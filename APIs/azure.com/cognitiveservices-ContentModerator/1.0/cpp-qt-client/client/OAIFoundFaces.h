/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFoundFaces.h
 *
 * Request object the contains found faces.
 */

#ifndef OAIFoundFaces_H
#define OAIFoundFaces_H

#include <QJsonObject>

#include "OAIFace.h"
#include "OAIKeyValuePair.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyValuePair;
class OAIFace;
class OAIStatus;

class OAIFoundFaces : public OAIObject {
public:
    OAIFoundFaces();
    OAIFoundFaces(QString json);
    ~OAIFoundFaces() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIKeyValuePair> getAdvancedInfo() const;
    void setAdvancedInfo(const QList<OAIKeyValuePair> &advanced_info);
    bool is_advanced_info_Set() const;
    bool is_advanced_info_Valid() const;

    QString getCacheId() const;
    void setCacheId(const QString &cache_id);
    bool is_cache_id_Set() const;
    bool is_cache_id_Valid() const;

    qint32 getCount() const;
    void setCount(const qint32 &count);
    bool is_count_Set() const;
    bool is_count_Valid() const;

    QList<OAIFace> getFaces() const;
    void setFaces(const QList<OAIFace> &faces);
    bool is_faces_Set() const;
    bool is_faces_Valid() const;

    bool isResult() const;
    void setResult(const bool &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTrackingId() const;
    void setTrackingId(const QString &tracking_id);
    bool is_tracking_id_Set() const;
    bool is_tracking_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIKeyValuePair> m_advanced_info;
    bool m_advanced_info_isSet;
    bool m_advanced_info_isValid;

    QString m_cache_id;
    bool m_cache_id_isSet;
    bool m_cache_id_isValid;

    qint32 m_count;
    bool m_count_isSet;
    bool m_count_isValid;

    QList<OAIFace> m_faces;
    bool m_faces_isSet;
    bool m_faces_isValid;

    bool m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tracking_id;
    bool m_tracking_id_isSet;
    bool m_tracking_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFoundFaces)

#endif // OAIFoundFaces_H
