/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReviews_AddVideoTranscriptModerationResult_request_inner.h
 *
 * Schema items of the body.
 */

#ifndef OAIReviews_AddVideoTranscriptModerationResult_request_inner_H
#define OAIReviews_AddVideoTranscriptModerationResult_request_inner_H

#include <QJsonObject>

#include "OAIReviews_AddVideoTranscriptModerationResult_request_inner_Terms_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIReviews_AddVideoTranscriptModerationResult_request_inner_Terms_inner;

class OAIReviews_AddVideoTranscriptModerationResult_request_inner : public OAIObject {
public:
    OAIReviews_AddVideoTranscriptModerationResult_request_inner();
    OAIReviews_AddVideoTranscriptModerationResult_request_inner(QString json);
    ~OAIReviews_AddVideoTranscriptModerationResult_request_inner() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIReviews_AddVideoTranscriptModerationResult_request_inner_Terms_inner> getTerms() const;
    void setTerms(const QList<OAIReviews_AddVideoTranscriptModerationResult_request_inner_Terms_inner> &terms);
    bool is_terms_Set() const;
    bool is_terms_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIReviews_AddVideoTranscriptModerationResult_request_inner_Terms_inner> m_terms;
    bool m_terms_isSet;
    bool m_terms_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReviews_AddVideoTranscriptModerationResult_request_inner)

#endif // OAIReviews_AddVideoTranscriptModerationResult_request_inner_H
