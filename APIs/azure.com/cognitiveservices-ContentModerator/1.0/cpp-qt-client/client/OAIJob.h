/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIJob.h
 *
 * The Job object.
 */

#ifndef OAIJob_H
#define OAIJob_H

#include <QJsonObject>

#include "OAIJobExecutionReportDetails.h"
#include "OAIKeyValuePair.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIJobExecutionReportDetails;
class OAIKeyValuePair;

class OAIJob : public OAIObject {
public:
    OAIJob();
    OAIJob(QString json);
    ~OAIJob() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCallBackEndpoint() const;
    void setCallBackEndpoint(const QString &call_back_endpoint);
    bool is_call_back_endpoint_Set() const;
    bool is_call_back_endpoint_Valid() const;

    QString getId() const;
    void setId(const QString &id);
    bool is_id_Set() const;
    bool is_id_Valid() const;

    QList<OAIJobExecutionReportDetails> getJobExecutionReport() const;
    void setJobExecutionReport(const QList<OAIJobExecutionReportDetails> &job_execution_report);
    bool is_job_execution_report_Set() const;
    bool is_job_execution_report_Valid() const;

    QList<OAIKeyValuePair> getResultMetaData() const;
    void setResultMetaData(const QList<OAIKeyValuePair> &result_meta_data);
    bool is_result_meta_data_Set() const;
    bool is_result_meta_data_Valid() const;

    QString getReviewId() const;
    void setReviewId(const QString &review_id);
    bool is_review_id_Set() const;
    bool is_review_id_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTeamName() const;
    void setTeamName(const QString &team_name);
    bool is_team_name_Set() const;
    bool is_team_name_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getWorkflowId() const;
    void setWorkflowId(const QString &workflow_id);
    bool is_workflow_id_Set() const;
    bool is_workflow_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_call_back_endpoint;
    bool m_call_back_endpoint_isSet;
    bool m_call_back_endpoint_isValid;

    QString m_id;
    bool m_id_isSet;
    bool m_id_isValid;

    QList<OAIJobExecutionReportDetails> m_job_execution_report;
    bool m_job_execution_report_isSet;
    bool m_job_execution_report_isValid;

    QList<OAIKeyValuePair> m_result_meta_data;
    bool m_result_meta_data_isSet;
    bool m_result_meta_data_isValid;

    QString m_review_id;
    bool m_review_id_isSet;
    bool m_review_id_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_team_name;
    bool m_team_name_isSet;
    bool m_team_name_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_workflow_id;
    bool m_workflow_id_isSet;
    bool m_workflow_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIJob)

#endif // OAIJob_H
