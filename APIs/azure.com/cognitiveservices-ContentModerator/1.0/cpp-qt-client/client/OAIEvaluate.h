/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEvaluate.h
 *
 * Evaluate response object.
 */

#ifndef OAIEvaluate_H
#define OAIEvaluate_H

#include <QJsonObject>

#include "OAIKeyValuePair.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyValuePair;
class OAIStatus;

class OAIEvaluate : public OAIObject {
public:
    OAIEvaluate();
    OAIEvaluate(QString json);
    ~OAIEvaluate() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    double getAdultClassificationScore() const;
    void setAdultClassificationScore(const double &adult_classification_score);
    bool is_adult_classification_score_Set() const;
    bool is_adult_classification_score_Valid() const;

    QList<OAIKeyValuePair> getAdvancedInfo() const;
    void setAdvancedInfo(const QList<OAIKeyValuePair> &advanced_info);
    bool is_advanced_info_Set() const;
    bool is_advanced_info_Valid() const;

    QString getCacheId() const;
    void setCacheId(const QString &cache_id);
    bool is_cache_id_Set() const;
    bool is_cache_id_Valid() const;

    bool isIsImageAdultClassified() const;
    void setIsImageAdultClassified(const bool &is_image_adult_classified);
    bool is_is_image_adult_classified_Set() const;
    bool is_is_image_adult_classified_Valid() const;

    bool isIsImageRacyClassified() const;
    void setIsImageRacyClassified(const bool &is_image_racy_classified);
    bool is_is_image_racy_classified_Set() const;
    bool is_is_image_racy_classified_Valid() const;

    double getRacyClassificationScore() const;
    void setRacyClassificationScore(const double &racy_classification_score);
    bool is_racy_classification_score_Set() const;
    bool is_racy_classification_score_Valid() const;

    bool isResult() const;
    void setResult(const bool &result);
    bool is_result_Set() const;
    bool is_result_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTrackingId() const;
    void setTrackingId(const QString &tracking_id);
    bool is_tracking_id_Set() const;
    bool is_tracking_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    double m_adult_classification_score;
    bool m_adult_classification_score_isSet;
    bool m_adult_classification_score_isValid;

    QList<OAIKeyValuePair> m_advanced_info;
    bool m_advanced_info_isSet;
    bool m_advanced_info_isValid;

    QString m_cache_id;
    bool m_cache_id_isSet;
    bool m_cache_id_isValid;

    bool m_is_image_adult_classified;
    bool m_is_image_adult_classified_isSet;
    bool m_is_image_adult_classified_isValid;

    bool m_is_image_racy_classified;
    bool m_is_image_racy_classified_isSet;
    bool m_is_image_racy_classified_isValid;

    double m_racy_classification_score;
    bool m_racy_classification_score_isSet;
    bool m_racy_classification_score_isValid;

    bool m_result;
    bool m_result_isSet;
    bool m_result_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tracking_id;
    bool m_tracking_id_isSet;
    bool m_tracking_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEvaluate)

#endif // OAIEvaluate_H
