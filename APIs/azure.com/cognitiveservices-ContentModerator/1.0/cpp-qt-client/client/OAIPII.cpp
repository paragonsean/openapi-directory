/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPII.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPII::OAIPII(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPII::OAIPII() {
    this->initializeModel();
}

OAIPII::~OAIPII() {}

void OAIPII::initializeModel() {

    m_address_isSet = false;
    m_address_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_ipa_isSet = false;
    m_ipa_isValid = false;

    m_phone_isSet = false;
    m_phone_isValid = false;

    m_ssn_isSet = false;
    m_ssn_isValid = false;
}

void OAIPII::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPII::fromJsonObject(QJsonObject json) {

    m_address_isValid = ::OpenAPI::fromJsonValue(m_address, json[QString("Address")]);
    m_address_isSet = !json[QString("Address")].isNull() && m_address_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("Email")]);
    m_email_isSet = !json[QString("Email")].isNull() && m_email_isValid;

    m_ipa_isValid = ::OpenAPI::fromJsonValue(m_ipa, json[QString("IPA")]);
    m_ipa_isSet = !json[QString("IPA")].isNull() && m_ipa_isValid;

    m_phone_isValid = ::OpenAPI::fromJsonValue(m_phone, json[QString("Phone")]);
    m_phone_isSet = !json[QString("Phone")].isNull() && m_phone_isValid;

    m_ssn_isValid = ::OpenAPI::fromJsonValue(m_ssn, json[QString("SSN")]);
    m_ssn_isSet = !json[QString("SSN")].isNull() && m_ssn_isValid;
}

QString OAIPII::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPII::asJsonObject() const {
    QJsonObject obj;
    if (m_address.size() > 0) {
        obj.insert(QString("Address"), ::OpenAPI::toJsonValue(m_address));
    }
    if (m_email.size() > 0) {
        obj.insert(QString("Email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_ipa.size() > 0) {
        obj.insert(QString("IPA"), ::OpenAPI::toJsonValue(m_ipa));
    }
    if (m_phone.size() > 0) {
        obj.insert(QString("Phone"), ::OpenAPI::toJsonValue(m_phone));
    }
    if (m_ssn.size() > 0) {
        obj.insert(QString("SSN"), ::OpenAPI::toJsonValue(m_ssn));
    }
    return obj;
}

QList<OAIAddress> OAIPII::getAddress() const {
    return m_address;
}
void OAIPII::setAddress(const QList<OAIAddress> &address) {
    m_address = address;
    m_address_isSet = true;
}

bool OAIPII::is_address_Set() const{
    return m_address_isSet;
}

bool OAIPII::is_address_Valid() const{
    return m_address_isValid;
}

QList<OAIEmail> OAIPII::getEmail() const {
    return m_email;
}
void OAIPII::setEmail(const QList<OAIEmail> &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIPII::is_email_Set() const{
    return m_email_isSet;
}

bool OAIPII::is_email_Valid() const{
    return m_email_isValid;
}

QList<OAIIPA> OAIPII::getIpa() const {
    return m_ipa;
}
void OAIPII::setIpa(const QList<OAIIPA> &ipa) {
    m_ipa = ipa;
    m_ipa_isSet = true;
}

bool OAIPII::is_ipa_Set() const{
    return m_ipa_isSet;
}

bool OAIPII::is_ipa_Valid() const{
    return m_ipa_isValid;
}

QList<OAIPhone> OAIPII::getPhone() const {
    return m_phone;
}
void OAIPII::setPhone(const QList<OAIPhone> &phone) {
    m_phone = phone;
    m_phone_isSet = true;
}

bool OAIPII::is_phone_Set() const{
    return m_phone_isSet;
}

bool OAIPII::is_phone_Valid() const{
    return m_phone_isValid;
}

QList<OAISSN> OAIPII::getSsn() const {
    return m_ssn;
}
void OAIPII::setSsn(const QList<OAISSN> &ssn) {
    m_ssn = ssn;
    m_ssn_isSet = true;
}

bool OAIPII::is_ssn_Set() const{
    return m_ssn_isSet;
}

bool OAIPII::is_ssn_Valid() const{
    return m_ssn_isValid;
}

bool OAIPII::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_address.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_email.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ipa.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_phone.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_ssn.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPII::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
