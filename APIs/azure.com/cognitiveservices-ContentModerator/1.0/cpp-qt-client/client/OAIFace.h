/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFace.h
 *
 * Coordinates to the found face.
 */

#ifndef OAIFace_H
#define OAIFace_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIFace : public OAIObject {
public:
    OAIFace();
    OAIFace(QString json);
    ~OAIFace() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getBottom() const;
    void setBottom(const qint32 &bottom);
    bool is_bottom_Set() const;
    bool is_bottom_Valid() const;

    qint32 getLeft() const;
    void setLeft(const qint32 &left);
    bool is_left_Set() const;
    bool is_left_Valid() const;

    qint32 getRight() const;
    void setRight(const qint32 &right);
    bool is_right_Set() const;
    bool is_right_Valid() const;

    qint32 getTop() const;
    void setTop(const qint32 &top);
    bool is_top_Set() const;
    bool is_top_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_bottom;
    bool m_bottom_isSet;
    bool m_bottom_isValid;

    qint32 m_left;
    bool m_left_isSet;
    bool m_left_isValid;

    qint32 m_right;
    bool m_right_isSet;
    bool m_right_isValid;

    qint32 m_top;
    bool m_top_isSet;
    bool m_top_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFace)

#endif // OAIFace_H
