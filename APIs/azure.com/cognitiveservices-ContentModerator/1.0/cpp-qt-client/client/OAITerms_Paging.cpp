/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerms_Paging.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerms_Paging::OAITerms_Paging(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerms_Paging::OAITerms_Paging() {
    this->initializeModel();
}

OAITerms_Paging::~OAITerms_Paging() {}

void OAITerms_Paging::initializeModel() {

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;

    m_returned_isSet = false;
    m_returned_isValid = false;

    m_total_isSet = false;
    m_total_isValid = false;
}

void OAITerms_Paging::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerms_Paging::fromJsonObject(QJsonObject json) {

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("Limit")]);
    m_limit_isSet = !json[QString("Limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("Offset")]);
    m_offset_isSet = !json[QString("Offset")].isNull() && m_offset_isValid;

    m_returned_isValid = ::OpenAPI::fromJsonValue(m_returned, json[QString("Returned")]);
    m_returned_isSet = !json[QString("Returned")].isNull() && m_returned_isValid;

    m_total_isValid = ::OpenAPI::fromJsonValue(m_total, json[QString("Total")]);
    m_total_isSet = !json[QString("Total")].isNull() && m_total_isValid;
}

QString OAITerms_Paging::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerms_Paging::asJsonObject() const {
    QJsonObject obj;
    if (m_limit_isSet) {
        obj.insert(QString("Limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("Offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    if (m_returned_isSet) {
        obj.insert(QString("Returned"), ::OpenAPI::toJsonValue(m_returned));
    }
    if (m_total_isSet) {
        obj.insert(QString("Total"), ::OpenAPI::toJsonValue(m_total));
    }
    return obj;
}

qint32 OAITerms_Paging::getLimit() const {
    return m_limit;
}
void OAITerms_Paging::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAITerms_Paging::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAITerms_Paging::is_limit_Valid() const{
    return m_limit_isValid;
}

qint32 OAITerms_Paging::getOffset() const {
    return m_offset;
}
void OAITerms_Paging::setOffset(const qint32 &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAITerms_Paging::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAITerms_Paging::is_offset_Valid() const{
    return m_offset_isValid;
}

qint32 OAITerms_Paging::getReturned() const {
    return m_returned;
}
void OAITerms_Paging::setReturned(const qint32 &returned) {
    m_returned = returned;
    m_returned_isSet = true;
}

bool OAITerms_Paging::is_returned_Set() const{
    return m_returned_isSet;
}

bool OAITerms_Paging::is_returned_Valid() const{
    return m_returned_isValid;
}

qint32 OAITerms_Paging::getTotal() const {
    return m_total;
}
void OAITerms_Paging::setTotal(const qint32 &total) {
    m_total = total;
    m_total_isSet = true;
}

bool OAITerms_Paging::is_total_Set() const{
    return m_total_isSet;
}

bool OAITerms_Paging::is_total_Valid() const{
    return m_total_isValid;
}

bool OAITerms_Paging::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_returned_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerms_Paging::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
