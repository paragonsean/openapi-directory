/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListManagementImageListsApi_H
#define OAI_OAIListManagementImageListsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIImageList.h"
#include "OAIListManagementImageLists_Create_request.h"
#include "OAIRefreshIndex.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListManagementImageListsApi : public QObject {
    Q_OBJECT

public:
    OAIListManagementImageListsApi(const int timeOut = 0);
    ~OAIListManagementImageListsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  body OAIListManagementImageLists_Create_request [required]
    */
    virtual void listManagementImageListsCreate(const QString &content_type, const OAIListManagementImageLists_Create_request &body);

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementImageListsDelete(const QString &list_id);


    virtual void listManagementImageListsGetAllImageLists();

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementImageListsGetDetails(const QString &list_id);

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementImageListsRefreshIndex(const QString &list_id);

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  body OAIListManagementImageLists_Create_request [required]
    */
    virtual void listManagementImageListsUpdate(const QString &list_id, const QString &content_type, const OAIListManagementImageLists_Create_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listManagementImageListsCreateCallback(OAIHttpRequestWorker *worker);
    void listManagementImageListsDeleteCallback(OAIHttpRequestWorker *worker);
    void listManagementImageListsGetAllImageListsCallback(OAIHttpRequestWorker *worker);
    void listManagementImageListsGetDetailsCallback(OAIHttpRequestWorker *worker);
    void listManagementImageListsRefreshIndexCallback(OAIHttpRequestWorker *worker);
    void listManagementImageListsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listManagementImageListsCreateSignal(OAIImageList summary);
    void listManagementImageListsDeleteSignal(QString summary);
    void listManagementImageListsGetAllImageListsSignal(QList<OAIImageList> summary);
    void listManagementImageListsGetDetailsSignal(OAIImageList summary);
    void listManagementImageListsRefreshIndexSignal(OAIRefreshIndex summary);
    void listManagementImageListsUpdateSignal(OAIImageList summary);


    void listManagementImageListsCreateSignalFull(OAIHttpRequestWorker *worker, OAIImageList summary);
    void listManagementImageListsDeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listManagementImageListsGetAllImageListsSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageList> summary);
    void listManagementImageListsGetDetailsSignalFull(OAIHttpRequestWorker *worker, OAIImageList summary);
    void listManagementImageListsRefreshIndexSignalFull(OAIHttpRequestWorker *worker, OAIRefreshIndex summary);
    void listManagementImageListsUpdateSignalFull(OAIHttpRequestWorker *worker, OAIImageList summary);

    Q_DECL_DEPRECATED_X("Use listManagementImageListsCreateSignalError() instead")
    void listManagementImageListsCreateSignalE(OAIImageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsCreateSignalError(OAIImageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsDeleteSignalError() instead")
    void listManagementImageListsDeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsDeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsGetAllImageListsSignalError() instead")
    void listManagementImageListsGetAllImageListsSignalE(QList<OAIImageList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsGetAllImageListsSignalError(QList<OAIImageList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsGetDetailsSignalError() instead")
    void listManagementImageListsGetDetailsSignalE(OAIImageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsGetDetailsSignalError(OAIImageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsRefreshIndexSignalError() instead")
    void listManagementImageListsRefreshIndexSignalE(OAIRefreshIndex summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsRefreshIndexSignalError(OAIRefreshIndex summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsUpdateSignalError() instead")
    void listManagementImageListsUpdateSignalE(OAIImageList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsUpdateSignalError(OAIImageList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listManagementImageListsCreateSignalErrorFull() instead")
    void listManagementImageListsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsDeleteSignalErrorFull() instead")
    void listManagementImageListsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsGetAllImageListsSignalErrorFull() instead")
    void listManagementImageListsGetAllImageListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsGetAllImageListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsGetDetailsSignalErrorFull() instead")
    void listManagementImageListsGetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsGetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsRefreshIndexSignalErrorFull() instead")
    void listManagementImageListsRefreshIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsRefreshIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageListsUpdateSignalErrorFull() instead")
    void listManagementImageListsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageListsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
