/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListManagementImageApi_H
#define OAI_OAIListManagementImageApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIImage.h"
#include "OAIImageIds.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListManagementImageApi : public QObject {
    Q_OBJECT

public:
    OAIListManagementImageApi(const int timeOut = 0);
    ~OAIListManagementImageApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  tag qint32 [optional]
    * @param[in]  label QString [optional]
    */
    virtual void listManagementImageAddImage(const QString &list_id, const ::OpenAPI::OptionalParam<qint32> &tag = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &label = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementImageDeleteAllImages(const QString &list_id);

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  image_id QString [required]
    */
    virtual void listManagementImageDeleteImage(const QString &list_id, const QString &image_id);

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementImageGetAllImageIds(const QString &list_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listManagementImageAddImageCallback(OAIHttpRequestWorker *worker);
    void listManagementImageDeleteAllImagesCallback(OAIHttpRequestWorker *worker);
    void listManagementImageDeleteImageCallback(OAIHttpRequestWorker *worker);
    void listManagementImageGetAllImageIdsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listManagementImageAddImageSignal(OAIImage summary);
    void listManagementImageDeleteAllImagesSignal(QString summary);
    void listManagementImageDeleteImageSignal(QString summary);
    void listManagementImageGetAllImageIdsSignal(OAIImageIds summary);


    void listManagementImageAddImageSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void listManagementImageDeleteAllImagesSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listManagementImageDeleteImageSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listManagementImageGetAllImageIdsSignalFull(OAIHttpRequestWorker *worker, OAIImageIds summary);

    Q_DECL_DEPRECATED_X("Use listManagementImageAddImageSignalError() instead")
    void listManagementImageAddImageSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageAddImageSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageDeleteAllImagesSignalError() instead")
    void listManagementImageDeleteAllImagesSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageDeleteAllImagesSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageDeleteImageSignalError() instead")
    void listManagementImageDeleteImageSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageDeleteImageSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageGetAllImageIdsSignalError() instead")
    void listManagementImageGetAllImageIdsSignalE(OAIImageIds summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageGetAllImageIdsSignalError(OAIImageIds summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listManagementImageAddImageSignalErrorFull() instead")
    void listManagementImageAddImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageAddImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageDeleteAllImagesSignalErrorFull() instead")
    void listManagementImageDeleteAllImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageDeleteAllImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageDeleteImageSignalErrorFull() instead")
    void listManagementImageDeleteImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageDeleteImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementImageGetAllImageIdsSignalErrorFull() instead")
    void listManagementImageGetAllImageIdsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementImageGetAllImageIdsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
