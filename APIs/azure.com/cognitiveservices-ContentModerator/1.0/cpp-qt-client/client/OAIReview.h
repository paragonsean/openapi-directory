/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIReview.h
 *
 * The Review object.
 */

#ifndef OAIReview_H
#define OAIReview_H

#include <QJsonObject>

#include "OAIKeyValuePair.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyValuePair;

class OAIReview : public OAIObject {
public:
    OAIReview();
    OAIReview(QString json);
    ~OAIReview() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCallbackEndpoint() const;
    void setCallbackEndpoint(const QString &callback_endpoint);
    bool is_callback_endpoint_Set() const;
    bool is_callback_endpoint_Valid() const;

    QString getContent() const;
    void setContent(const QString &content);
    bool is_content_Set() const;
    bool is_content_Valid() const;

    QString getContentId() const;
    void setContentId(const QString &content_id);
    bool is_content_id_Set() const;
    bool is_content_id_Valid() const;

    QString getCreatedBy() const;
    void setCreatedBy(const QString &created_by);
    bool is_created_by_Set() const;
    bool is_created_by_Valid() const;

    QList<OAIKeyValuePair> getMetadata() const;
    void setMetadata(const QList<OAIKeyValuePair> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QString getReviewId() const;
    void setReviewId(const QString &review_id);
    bool is_review_id_Set() const;
    bool is_review_id_Valid() const;

    QList<OAIKeyValuePair> getReviewerResultTags() const;
    void setReviewerResultTags(const QList<OAIKeyValuePair> &reviewer_result_tags);
    bool is_reviewer_result_tags_Set() const;
    bool is_reviewer_result_tags_Valid() const;

    QString getStatus() const;
    void setStatus(const QString &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getSubTeam() const;
    void setSubTeam(const QString &sub_team);
    bool is_sub_team_Set() const;
    bool is_sub_team_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_callback_endpoint;
    bool m_callback_endpoint_isSet;
    bool m_callback_endpoint_isValid;

    QString m_content;
    bool m_content_isSet;
    bool m_content_isValid;

    QString m_content_id;
    bool m_content_id_isSet;
    bool m_content_id_isValid;

    QString m_created_by;
    bool m_created_by_isSet;
    bool m_created_by_isValid;

    QList<OAIKeyValuePair> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QString m_review_id;
    bool m_review_id_isSet;
    bool m_review_id_isValid;

    QList<OAIKeyValuePair> m_reviewer_result_tags;
    bool m_reviewer_result_tags_isSet;
    bool m_reviewer_result_tags_isValid;

    QString m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_sub_team;
    bool m_sub_team_isSet;
    bool m_sub_team_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIReview)

#endif // OAIReview_H
