/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIFrame.h
 *
 * Video frame property details.
 */

#ifndef OAIFrame_H
#define OAIFrame_H

#include <QJsonObject>

#include "OAIKeyValuePair.h"
#include "OAITag.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIKeyValuePair;
class OAITag;

class OAIFrame : public OAIObject {
public:
    OAIFrame();
    OAIFrame(QString json);
    ~OAIFrame() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getFrameImage() const;
    void setFrameImage(const QString &frame_image);
    bool is_frame_image_Set() const;
    bool is_frame_image_Valid() const;

    QList<OAIKeyValuePair> getMetadata() const;
    void setMetadata(const QList<OAIKeyValuePair> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    QList<OAITag> getReviewerResultTags() const;
    void setReviewerResultTags(const QList<OAITag> &reviewer_result_tags);
    bool is_reviewer_result_tags_Set() const;
    bool is_reviewer_result_tags_Valid() const;

    QString getTimestamp() const;
    void setTimestamp(const QString &timestamp);
    bool is_timestamp_Set() const;
    bool is_timestamp_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_frame_image;
    bool m_frame_image_isSet;
    bool m_frame_image_isValid;

    QList<OAIKeyValuePair> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    QList<OAITag> m_reviewer_result_tags;
    bool m_reviewer_result_tags_isSet;
    bool m_reviewer_result_tags_isValid;

    QString m_timestamp;
    bool m_timestamp_isSet;
    bool m_timestamp_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIFrame)

#endif // OAIFrame_H
