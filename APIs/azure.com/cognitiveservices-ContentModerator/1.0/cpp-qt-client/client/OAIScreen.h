/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIScreen.h
 *
 * The response for a Screen text request.
 */

#ifndef OAIScreen_H
#define OAIScreen_H

#include <QJsonObject>

#include "OAIClassification.h"
#include "OAIDetectedTerms.h"
#include "OAIPII.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClassification;
class OAIPII;
class OAIStatus;
class OAIDetectedTerms;

class OAIScreen : public OAIObject {
public:
    OAIScreen();
    OAIScreen(QString json);
    ~OAIScreen() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAutoCorrectedText() const;
    void setAutoCorrectedText(const QString &auto_corrected_text);
    bool is_auto_corrected_text_Set() const;
    bool is_auto_corrected_text_Valid() const;

    OAIClassification getClassification() const;
    void setClassification(const OAIClassification &classification);
    bool is_classification_Set() const;
    bool is_classification_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QList<QString> getMisrepresentation() const;
    void setMisrepresentation(const QList<QString> &misrepresentation);
    bool is_misrepresentation_Set() const;
    bool is_misrepresentation_Valid() const;

    QString getNormalizedText() const;
    void setNormalizedText(const QString &normalized_text);
    bool is_normalized_text_Set() const;
    bool is_normalized_text_Valid() const;

    QString getOriginalText() const;
    void setOriginalText(const QString &original_text);
    bool is_original_text_Set() const;
    bool is_original_text_Valid() const;

    OAIPII getPii() const;
    void setPii(const OAIPII &pii);
    bool is_pii_Set() const;
    bool is_pii_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QList<OAIDetectedTerms> getTerms() const;
    void setTerms(const QList<OAIDetectedTerms> &terms);
    bool is_terms_Set() const;
    bool is_terms_Valid() const;

    QString getTrackingId() const;
    void setTrackingId(const QString &tracking_id);
    bool is_tracking_id_Set() const;
    bool is_tracking_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_auto_corrected_text;
    bool m_auto_corrected_text_isSet;
    bool m_auto_corrected_text_isValid;

    OAIClassification m_classification;
    bool m_classification_isSet;
    bool m_classification_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QList<QString> m_misrepresentation;
    bool m_misrepresentation_isSet;
    bool m_misrepresentation_isValid;

    QString m_normalized_text;
    bool m_normalized_text_isSet;
    bool m_normalized_text_isValid;

    QString m_original_text;
    bool m_original_text_isSet;
    bool m_original_text_isValid;

    OAIPII m_pii;
    bool m_pii_isSet;
    bool m_pii_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QList<OAIDetectedTerms> m_terms;
    bool m_terms_isSet;
    bool m_terms_isValid;

    QString m_tracking_id;
    bool m_tracking_id_isSet;
    bool m_tracking_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIScreen)

#endif // OAIScreen_H
