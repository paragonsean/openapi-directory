/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPhone.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPhone::OAIPhone(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPhone::OAIPhone() {
    this->initializeModel();
}

OAIPhone::~OAIPhone() {}

void OAIPhone::initializeModel() {

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_index_isSet = false;
    m_index_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIPhone::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPhone::fromJsonObject(QJsonObject json) {

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("CountryCode")]);
    m_country_code_isSet = !json[QString("CountryCode")].isNull() && m_country_code_isValid;

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("Index")]);
    m_index_isSet = !json[QString("Index")].isNull() && m_index_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;
}

QString OAIPhone::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPhone::asJsonObject() const {
    QJsonObject obj;
    if (m_country_code_isSet) {
        obj.insert(QString("CountryCode"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_index_isSet) {
        obj.insert(QString("Index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIPhone::getCountryCode() const {
    return m_country_code;
}
void OAIPhone::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIPhone::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIPhone::is_country_code_Valid() const{
    return m_country_code_isValid;
}

qint32 OAIPhone::getIndex() const {
    return m_index;
}
void OAIPhone::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIPhone::is_index_Set() const{
    return m_index_isSet;
}

bool OAIPhone::is_index_Valid() const{
    return m_index_isValid;
}

QString OAIPhone::getText() const {
    return m_text;
}
void OAIPhone::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPhone::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPhone::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIPhone::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPhone::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
