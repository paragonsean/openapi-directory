/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvaluate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvaluate::OAIEvaluate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvaluate::OAIEvaluate() {
    this->initializeModel();
}

OAIEvaluate::~OAIEvaluate() {}

void OAIEvaluate::initializeModel() {

    m_adult_classification_score_isSet = false;
    m_adult_classification_score_isValid = false;

    m_advanced_info_isSet = false;
    m_advanced_info_isValid = false;

    m_cache_id_isSet = false;
    m_cache_id_isValid = false;

    m_is_image_adult_classified_isSet = false;
    m_is_image_adult_classified_isValid = false;

    m_is_image_racy_classified_isSet = false;
    m_is_image_racy_classified_isValid = false;

    m_racy_classification_score_isSet = false;
    m_racy_classification_score_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIEvaluate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvaluate::fromJsonObject(QJsonObject json) {

    m_adult_classification_score_isValid = ::OpenAPI::fromJsonValue(m_adult_classification_score, json[QString("AdultClassificationScore")]);
    m_adult_classification_score_isSet = !json[QString("AdultClassificationScore")].isNull() && m_adult_classification_score_isValid;

    m_advanced_info_isValid = ::OpenAPI::fromJsonValue(m_advanced_info, json[QString("AdvancedInfo")]);
    m_advanced_info_isSet = !json[QString("AdvancedInfo")].isNull() && m_advanced_info_isValid;

    m_cache_id_isValid = ::OpenAPI::fromJsonValue(m_cache_id, json[QString("CacheID")]);
    m_cache_id_isSet = !json[QString("CacheID")].isNull() && m_cache_id_isValid;

    m_is_image_adult_classified_isValid = ::OpenAPI::fromJsonValue(m_is_image_adult_classified, json[QString("IsImageAdultClassified")]);
    m_is_image_adult_classified_isSet = !json[QString("IsImageAdultClassified")].isNull() && m_is_image_adult_classified_isValid;

    m_is_image_racy_classified_isValid = ::OpenAPI::fromJsonValue(m_is_image_racy_classified, json[QString("IsImageRacyClassified")]);
    m_is_image_racy_classified_isSet = !json[QString("IsImageRacyClassified")].isNull() && m_is_image_racy_classified_isValid;

    m_racy_classification_score_isValid = ::OpenAPI::fromJsonValue(m_racy_classification_score, json[QString("RacyClassificationScore")]);
    m_racy_classification_score_isSet = !json[QString("RacyClassificationScore")].isNull() && m_racy_classification_score_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIEvaluate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvaluate::asJsonObject() const {
    QJsonObject obj;
    if (m_adult_classification_score_isSet) {
        obj.insert(QString("AdultClassificationScore"), ::OpenAPI::toJsonValue(m_adult_classification_score));
    }
    if (m_advanced_info.size() > 0) {
        obj.insert(QString("AdvancedInfo"), ::OpenAPI::toJsonValue(m_advanced_info));
    }
    if (m_cache_id_isSet) {
        obj.insert(QString("CacheID"), ::OpenAPI::toJsonValue(m_cache_id));
    }
    if (m_is_image_adult_classified_isSet) {
        obj.insert(QString("IsImageAdultClassified"), ::OpenAPI::toJsonValue(m_is_image_adult_classified));
    }
    if (m_is_image_racy_classified_isSet) {
        obj.insert(QString("IsImageRacyClassified"), ::OpenAPI::toJsonValue(m_is_image_racy_classified));
    }
    if (m_racy_classification_score_isSet) {
        obj.insert(QString("RacyClassificationScore"), ::OpenAPI::toJsonValue(m_racy_classification_score));
    }
    if (m_result_isSet) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

double OAIEvaluate::getAdultClassificationScore() const {
    return m_adult_classification_score;
}
void OAIEvaluate::setAdultClassificationScore(const double &adult_classification_score) {
    m_adult_classification_score = adult_classification_score;
    m_adult_classification_score_isSet = true;
}

bool OAIEvaluate::is_adult_classification_score_Set() const{
    return m_adult_classification_score_isSet;
}

bool OAIEvaluate::is_adult_classification_score_Valid() const{
    return m_adult_classification_score_isValid;
}

QList<OAIKeyValuePair> OAIEvaluate::getAdvancedInfo() const {
    return m_advanced_info;
}
void OAIEvaluate::setAdvancedInfo(const QList<OAIKeyValuePair> &advanced_info) {
    m_advanced_info = advanced_info;
    m_advanced_info_isSet = true;
}

bool OAIEvaluate::is_advanced_info_Set() const{
    return m_advanced_info_isSet;
}

bool OAIEvaluate::is_advanced_info_Valid() const{
    return m_advanced_info_isValid;
}

QString OAIEvaluate::getCacheId() const {
    return m_cache_id;
}
void OAIEvaluate::setCacheId(const QString &cache_id) {
    m_cache_id = cache_id;
    m_cache_id_isSet = true;
}

bool OAIEvaluate::is_cache_id_Set() const{
    return m_cache_id_isSet;
}

bool OAIEvaluate::is_cache_id_Valid() const{
    return m_cache_id_isValid;
}

bool OAIEvaluate::isIsImageAdultClassified() const {
    return m_is_image_adult_classified;
}
void OAIEvaluate::setIsImageAdultClassified(const bool &is_image_adult_classified) {
    m_is_image_adult_classified = is_image_adult_classified;
    m_is_image_adult_classified_isSet = true;
}

bool OAIEvaluate::is_is_image_adult_classified_Set() const{
    return m_is_image_adult_classified_isSet;
}

bool OAIEvaluate::is_is_image_adult_classified_Valid() const{
    return m_is_image_adult_classified_isValid;
}

bool OAIEvaluate::isIsImageRacyClassified() const {
    return m_is_image_racy_classified;
}
void OAIEvaluate::setIsImageRacyClassified(const bool &is_image_racy_classified) {
    m_is_image_racy_classified = is_image_racy_classified;
    m_is_image_racy_classified_isSet = true;
}

bool OAIEvaluate::is_is_image_racy_classified_Set() const{
    return m_is_image_racy_classified_isSet;
}

bool OAIEvaluate::is_is_image_racy_classified_Valid() const{
    return m_is_image_racy_classified_isValid;
}

double OAIEvaluate::getRacyClassificationScore() const {
    return m_racy_classification_score;
}
void OAIEvaluate::setRacyClassificationScore(const double &racy_classification_score) {
    m_racy_classification_score = racy_classification_score;
    m_racy_classification_score_isSet = true;
}

bool OAIEvaluate::is_racy_classification_score_Set() const{
    return m_racy_classification_score_isSet;
}

bool OAIEvaluate::is_racy_classification_score_Valid() const{
    return m_racy_classification_score_isValid;
}

bool OAIEvaluate::isResult() const {
    return m_result;
}
void OAIEvaluate::setResult(const bool &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIEvaluate::is_result_Set() const{
    return m_result_isSet;
}

bool OAIEvaluate::is_result_Valid() const{
    return m_result_isValid;
}

OAIStatus OAIEvaluate::getStatus() const {
    return m_status;
}
void OAIEvaluate::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIEvaluate::is_status_Set() const{
    return m_status_isSet;
}

bool OAIEvaluate::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIEvaluate::getTrackingId() const {
    return m_tracking_id;
}
void OAIEvaluate::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIEvaluate::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIEvaluate::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIEvaluate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adult_classification_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_advanced_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_image_adult_classified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_image_racy_classified_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_racy_classification_score_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvaluate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
