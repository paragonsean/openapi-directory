/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassification_Category2.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassification_Category2::OAIClassification_Category2(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassification_Category2::OAIClassification_Category2() {
    this->initializeModel();
}

OAIClassification_Category2::~OAIClassification_Category2() {}

void OAIClassification_Category2::initializeModel() {

    m_score_isSet = false;
    m_score_isValid = false;
}

void OAIClassification_Category2::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassification_Category2::fromJsonObject(QJsonObject json) {

    m_score_isValid = ::OpenAPI::fromJsonValue(m_score, json[QString("Score")]);
    m_score_isSet = !json[QString("Score")].isNull() && m_score_isValid;
}

QString OAIClassification_Category2::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassification_Category2::asJsonObject() const {
    QJsonObject obj;
    if (m_score_isSet) {
        obj.insert(QString("Score"), ::OpenAPI::toJsonValue(m_score));
    }
    return obj;
}

double OAIClassification_Category2::getScore() const {
    return m_score;
}
void OAIClassification_Category2::setScore(const double &score) {
    m_score = score;
    m_score_isSet = true;
}

bool OAIClassification_Category2::is_score_Set() const{
    return m_score_isSet;
}

bool OAIClassification_Category2::is_score_Valid() const{
    return m_score_isValid;
}

bool OAIClassification_Category2::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_score_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassification_Category2::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
