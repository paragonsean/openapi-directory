/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITermList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITermList::OAITermList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITermList::OAITermList() {
    this->initializeModel();
}

OAITermList::~OAITermList() {}

void OAITermList::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;
}

void OAITermList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITermList::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("Name")]);
    m_name_isSet = !json[QString("Name")].isNull() && m_name_isValid;
}

QString OAITermList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITermList::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_name_isSet) {
        obj.insert(QString("Name"), ::OpenAPI::toJsonValue(m_name));
    }
    return obj;
}

QString OAITermList::getDescription() const {
    return m_description;
}
void OAITermList::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITermList::is_description_Set() const{
    return m_description_isSet;
}

bool OAITermList::is_description_Valid() const{
    return m_description_isValid;
}

qint32 OAITermList::getId() const {
    return m_id;
}
void OAITermList::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITermList::is_id_Set() const{
    return m_id_isSet;
}

bool OAITermList::is_id_Valid() const{
    return m_id_isValid;
}

QMap<QString, QString> OAITermList::getMetadata() const {
    return m_metadata;
}
void OAITermList::setMetadata(const QMap<QString, QString> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITermList::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITermList::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAITermList::getName() const {
    return m_name;
}
void OAITermList::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITermList::is_name_Set() const{
    return m_name_isSet;
}

bool OAITermList::is_name_Valid() const{
    return m_name_isValid;
}

bool OAITermList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITermList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
