/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIClassification.h
 *
 * The classification details of the text.
 */

#ifndef OAIClassification_H
#define OAIClassification_H

#include <QJsonObject>

#include "OAIClassification_Category1.h"
#include "OAIClassification_Category2.h"
#include "OAIClassification_Category3.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIClassification_Category1;
class OAIClassification_Category2;
class OAIClassification_Category3;

class OAIClassification : public OAIObject {
public:
    OAIClassification();
    OAIClassification(QString json);
    ~OAIClassification() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIClassification_Category1 getCategory1() const;
    void setCategory1(const OAIClassification_Category1 &category1);
    bool is_category1_Set() const;
    bool is_category1_Valid() const;

    OAIClassification_Category2 getCategory2() const;
    void setCategory2(const OAIClassification_Category2 &category2);
    bool is_category2_Set() const;
    bool is_category2_Valid() const;

    OAIClassification_Category3 getCategory3() const;
    void setCategory3(const OAIClassification_Category3 &category3);
    bool is_category3_Set() const;
    bool is_category3_Valid() const;

    bool isReviewRecommended() const;
    void setReviewRecommended(const bool &review_recommended);
    bool is_review_recommended_Set() const;
    bool is_review_recommended_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIClassification_Category1 m_category1;
    bool m_category1_isSet;
    bool m_category1_isValid;

    OAIClassification_Category2 m_category2;
    bool m_category2_isSet;
    bool m_category2_isValid;

    OAIClassification_Category3 m_category3;
    bool m_category3_isSet;
    bool m_category3_isValid;

    bool m_review_recommended;
    bool m_review_recommended_isSet;
    bool m_review_recommended_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIClassification)

#endif // OAIClassification_H
