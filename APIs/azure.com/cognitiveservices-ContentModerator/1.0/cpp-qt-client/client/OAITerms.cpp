/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITerms::OAITerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITerms::OAITerms() {
    this->initializeModel();
}

OAITerms::~OAITerms() {}

void OAITerms::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_paging_isSet = false;
    m_paging_isValid = false;
}

void OAITerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITerms::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("Data")]);
    m_data_isSet = !json[QString("Data")].isNull() && m_data_isValid;

    m_paging_isValid = ::OpenAPI::fromJsonValue(m_paging, json[QString("Paging")]);
    m_paging_isSet = !json[QString("Paging")].isNull() && m_paging_isValid;
}

QString OAITerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITerms::asJsonObject() const {
    QJsonObject obj;
    if (m_data.isSet()) {
        obj.insert(QString("Data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_paging.isSet()) {
        obj.insert(QString("Paging"), ::OpenAPI::toJsonValue(m_paging));
    }
    return obj;
}

OAITermsData OAITerms::getData() const {
    return m_data;
}
void OAITerms::setData(const OAITermsData &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAITerms::is_data_Set() const{
    return m_data_isSet;
}

bool OAITerms::is_data_Valid() const{
    return m_data_isValid;
}

OAITerms_Paging OAITerms::getPaging() const {
    return m_paging;
}
void OAITerms::setPaging(const OAITerms_Paging &paging) {
    m_paging = paging;
    m_paging_isSet = true;
}

bool OAITerms::is_paging_Set() const{
    return m_paging_isSet;
}

bool OAITerms::is_paging_Valid() const{
    return m_paging_isValid;
}

bool OAITerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_paging.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
