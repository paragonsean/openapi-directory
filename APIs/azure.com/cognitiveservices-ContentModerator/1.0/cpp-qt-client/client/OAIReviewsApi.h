/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReviewsApi_H
#define OAI_OAIReviewsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIFrames.h"
#include "OAIJob.h"
#include "OAIJobId.h"
#include "OAIObject.h"
#include "OAIReview.h"
#include "OAIReviews_AddVideoTranscriptModerationResult_request_inner.h"
#include "OAIReviews_CreateJob_request.h"
#include "OAIReviews_CreateReviews_request_inner.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReviewsApi : public QObject {
    Q_OBJECT

public:
    OAIReviewsApi(const int timeOut = 0);
    ~OAIReviewsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  review_id QString [required]
    * @param[in]  timescale qint32 [optional]
    */
    virtual void reviewsAddVideoFrame(const QString &team_name, const QString &review_id, const ::OpenAPI::OptionalParam<qint32> &timescale = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  review_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  vtt_file OAIObject [required]
    */
    virtual void reviewsAddVideoTranscript(const QString &team_name, const QString &review_id, const QString &content_type, const OAIObject &vtt_file);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  review_id QString [required]
    * @param[in]  transcript_moderation_body QList<OAIReviews_AddVideoTranscriptModerationResult_request_inner> [required]
    */
    virtual void reviewsAddVideoTranscriptModerationResult(const QString &content_type, const QString &team_name, const QString &review_id, const QList<OAIReviews_AddVideoTranscriptModerationResult_request_inner> &transcript_moderation_body);

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  content_id QString [required]
    * @param[in]  workflow_name QString [required]
    * @param[in]  content_type2 QString [required]
    * @param[in]  content OAIReviews_CreateJob_request [required]
    * @param[in]  call_back_endpoint QString [optional]
    */
    virtual void reviewsCreateJob(const QString &team_name, const QString &content_type, const QString &content_id, const QString &workflow_name, const QString &content_type2, const OAIReviews_CreateJob_request &content, const ::OpenAPI::OptionalParam<QString> &call_back_endpoint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  url_content_type QString [required]
    * @param[in]  team_name QString [required]
    * @param[in]  create_review_body QList<OAIReviews_CreateReviews_request_inner> [required]
    * @param[in]  sub_team QString [optional]
    */
    virtual void reviewsCreateReviews(const QString &url_content_type, const QString &team_name, const QList<OAIReviews_CreateReviews_request_inner> &create_review_body, const ::OpenAPI::OptionalParam<QString> &sub_team = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  job_id QString [required]
    */
    virtual void reviewsGetJobDetails(const QString &team_name, const QString &job_id);

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  review_id QString [required]
    */
    virtual void reviewsGetReview(const QString &team_name, const QString &review_id);

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  review_id QString [required]
    * @param[in]  start_seed qint32 [optional]
    * @param[in]  no_of_records qint32 [optional]
    * @param[in]  filter QString [optional]
    */
    virtual void reviewsGetVideoFrames(const QString &team_name, const QString &review_id, const ::OpenAPI::OptionalParam<qint32> &start_seed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &no_of_records = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  team_name QString [required]
    * @param[in]  review_id QString [required]
    */
    virtual void reviewsPublishVideoReview(const QString &team_name, const QString &review_id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void reviewsAddVideoFrameCallback(OAIHttpRequestWorker *worker);
    void reviewsAddVideoTranscriptCallback(OAIHttpRequestWorker *worker);
    void reviewsAddVideoTranscriptModerationResultCallback(OAIHttpRequestWorker *worker);
    void reviewsCreateJobCallback(OAIHttpRequestWorker *worker);
    void reviewsCreateReviewsCallback(OAIHttpRequestWorker *worker);
    void reviewsGetJobDetailsCallback(OAIHttpRequestWorker *worker);
    void reviewsGetReviewCallback(OAIHttpRequestWorker *worker);
    void reviewsGetVideoFramesCallback(OAIHttpRequestWorker *worker);
    void reviewsPublishVideoReviewCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void reviewsAddVideoFrameSignal();
    void reviewsAddVideoTranscriptSignal();
    void reviewsAddVideoTranscriptModerationResultSignal();
    void reviewsCreateJobSignal(OAIJobId summary);
    void reviewsCreateReviewsSignal(QList<QString> summary);
    void reviewsGetJobDetailsSignal(OAIJob summary);
    void reviewsGetReviewSignal(OAIReview summary);
    void reviewsGetVideoFramesSignal(OAIFrames summary);
    void reviewsPublishVideoReviewSignal();


    void reviewsAddVideoFrameSignalFull(OAIHttpRequestWorker *worker);
    void reviewsAddVideoTranscriptSignalFull(OAIHttpRequestWorker *worker);
    void reviewsAddVideoTranscriptModerationResultSignalFull(OAIHttpRequestWorker *worker);
    void reviewsCreateJobSignalFull(OAIHttpRequestWorker *worker, OAIJobId summary);
    void reviewsCreateReviewsSignalFull(OAIHttpRequestWorker *worker, QList<QString> summary);
    void reviewsGetJobDetailsSignalFull(OAIHttpRequestWorker *worker, OAIJob summary);
    void reviewsGetReviewSignalFull(OAIHttpRequestWorker *worker, OAIReview summary);
    void reviewsGetVideoFramesSignalFull(OAIHttpRequestWorker *worker, OAIFrames summary);
    void reviewsPublishVideoReviewSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use reviewsAddVideoFrameSignalError() instead")
    void reviewsAddVideoFrameSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsAddVideoFrameSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsAddVideoTranscriptSignalError() instead")
    void reviewsAddVideoTranscriptSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsAddVideoTranscriptSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsAddVideoTranscriptModerationResultSignalError() instead")
    void reviewsAddVideoTranscriptModerationResultSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsAddVideoTranscriptModerationResultSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsCreateJobSignalError() instead")
    void reviewsCreateJobSignalE(OAIJobId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsCreateJobSignalError(OAIJobId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsCreateReviewsSignalError() instead")
    void reviewsCreateReviewsSignalE(QList<QString> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsCreateReviewsSignalError(QList<QString> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsGetJobDetailsSignalError() instead")
    void reviewsGetJobDetailsSignalE(OAIJob summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetJobDetailsSignalError(OAIJob summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsGetReviewSignalError() instead")
    void reviewsGetReviewSignalE(OAIReview summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetReviewSignalError(OAIReview summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsGetVideoFramesSignalError() instead")
    void reviewsGetVideoFramesSignalE(OAIFrames summary, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetVideoFramesSignalError(OAIFrames summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsPublishVideoReviewSignalError() instead")
    void reviewsPublishVideoReviewSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsPublishVideoReviewSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use reviewsAddVideoFrameSignalErrorFull() instead")
    void reviewsAddVideoFrameSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsAddVideoFrameSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsAddVideoTranscriptSignalErrorFull() instead")
    void reviewsAddVideoTranscriptSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsAddVideoTranscriptSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsAddVideoTranscriptModerationResultSignalErrorFull() instead")
    void reviewsAddVideoTranscriptModerationResultSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsAddVideoTranscriptModerationResultSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsCreateJobSignalErrorFull() instead")
    void reviewsCreateJobSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsCreateJobSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsCreateReviewsSignalErrorFull() instead")
    void reviewsCreateReviewsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsCreateReviewsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsGetJobDetailsSignalErrorFull() instead")
    void reviewsGetJobDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetJobDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsGetReviewSignalErrorFull() instead")
    void reviewsGetReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsGetVideoFramesSignalErrorFull() instead")
    void reviewsGetVideoFramesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsGetVideoFramesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use reviewsPublishVideoReviewSignalErrorFull() instead")
    void reviewsPublishVideoReviewSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void reviewsPublishVideoReviewSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
