/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRefreshIndex.h
 *
 * Refresh Index Response.
 */

#ifndef OAIRefreshIndex_H
#define OAIRefreshIndex_H

#include <QJsonObject>

#include "OAIStatus.h"
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIStatus;

class OAIRefreshIndex : public OAIObject {
public:
    OAIRefreshIndex();
    OAIRefreshIndex(QString json);
    ~OAIRefreshIndex() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QMap<QString, QString>> getAdvancedInfo() const;
    void setAdvancedInfo(const QList<QMap<QString, QString>> &advanced_info);
    bool is_advanced_info_Set() const;
    bool is_advanced_info_Valid() const;

    QString getContentSourceId() const;
    void setContentSourceId(const QString &content_source_id);
    bool is_content_source_id_Set() const;
    bool is_content_source_id_Valid() const;

    bool isIsUpdateSuccess() const;
    void setIsUpdateSuccess(const bool &is_update_success);
    bool is_is_update_success_Set() const;
    bool is_is_update_success_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTrackingId() const;
    void setTrackingId(const QString &tracking_id);
    bool is_tracking_id_Set() const;
    bool is_tracking_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QMap<QString, QString>> m_advanced_info;
    bool m_advanced_info_isSet;
    bool m_advanced_info_isValid;

    QString m_content_source_id;
    bool m_content_source_id_isSet;
    bool m_content_source_id_isValid;

    bool m_is_update_success;
    bool m_is_update_success_isSet;
    bool m_is_update_success_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tracking_id;
    bool m_tracking_id_isSet;
    bool m_tracking_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRefreshIndex)

#endif // OAIRefreshIndex_H
