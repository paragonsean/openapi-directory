/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReviews_CreateReviews_request_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReviews_CreateReviews_request_inner::OAIReviews_CreateReviews_request_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReviews_CreateReviews_request_inner::OAIReviews_CreateReviews_request_inner() {
    this->initializeModel();
}

OAIReviews_CreateReviews_request_inner::~OAIReviews_CreateReviews_request_inner() {}

void OAIReviews_CreateReviews_request_inner::initializeModel() {

    m_callback_endpoint_isSet = false;
    m_callback_endpoint_isValid = false;

    m_content_isSet = false;
    m_content_isValid = false;

    m_content_id_isSet = false;
    m_content_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIReviews_CreateReviews_request_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReviews_CreateReviews_request_inner::fromJsonObject(QJsonObject json) {

    m_callback_endpoint_isValid = ::OpenAPI::fromJsonValue(m_callback_endpoint, json[QString("CallbackEndpoint")]);
    m_callback_endpoint_isSet = !json[QString("CallbackEndpoint")].isNull() && m_callback_endpoint_isValid;

    m_content_isValid = ::OpenAPI::fromJsonValue(m_content, json[QString("Content")]);
    m_content_isSet = !json[QString("Content")].isNull() && m_content_isValid;

    m_content_id_isValid = ::OpenAPI::fromJsonValue(m_content_id, json[QString("ContentId")]);
    m_content_id_isSet = !json[QString("ContentId")].isNull() && m_content_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;
}

QString OAIReviews_CreateReviews_request_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReviews_CreateReviews_request_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_callback_endpoint_isSet) {
        obj.insert(QString("CallbackEndpoint"), ::OpenAPI::toJsonValue(m_callback_endpoint));
    }
    if (m_content_isSet) {
        obj.insert(QString("Content"), ::OpenAPI::toJsonValue(m_content));
    }
    if (m_content_id_isSet) {
        obj.insert(QString("ContentId"), ::OpenAPI::toJsonValue(m_content_id));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

QString OAIReviews_CreateReviews_request_inner::getCallbackEndpoint() const {
    return m_callback_endpoint;
}
void OAIReviews_CreateReviews_request_inner::setCallbackEndpoint(const QString &callback_endpoint) {
    m_callback_endpoint = callback_endpoint;
    m_callback_endpoint_isSet = true;
}

bool OAIReviews_CreateReviews_request_inner::is_callback_endpoint_Set() const{
    return m_callback_endpoint_isSet;
}

bool OAIReviews_CreateReviews_request_inner::is_callback_endpoint_Valid() const{
    return m_callback_endpoint_isValid;
}

QString OAIReviews_CreateReviews_request_inner::getContent() const {
    return m_content;
}
void OAIReviews_CreateReviews_request_inner::setContent(const QString &content) {
    m_content = content;
    m_content_isSet = true;
}

bool OAIReviews_CreateReviews_request_inner::is_content_Set() const{
    return m_content_isSet;
}

bool OAIReviews_CreateReviews_request_inner::is_content_Valid() const{
    return m_content_isValid;
}

QString OAIReviews_CreateReviews_request_inner::getContentId() const {
    return m_content_id;
}
void OAIReviews_CreateReviews_request_inner::setContentId(const QString &content_id) {
    m_content_id = content_id;
    m_content_id_isSet = true;
}

bool OAIReviews_CreateReviews_request_inner::is_content_id_Set() const{
    return m_content_id_isSet;
}

bool OAIReviews_CreateReviews_request_inner::is_content_id_Valid() const{
    return m_content_id_isValid;
}

QList<OAIReviews_CreateReviews_request_inner_Metadata_inner> OAIReviews_CreateReviews_request_inner::getMetadata() const {
    return m_metadata;
}
void OAIReviews_CreateReviews_request_inner::setMetadata(const QList<OAIReviews_CreateReviews_request_inner_Metadata_inner> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIReviews_CreateReviews_request_inner::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIReviews_CreateReviews_request_inner::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAIReviews_CreateReviews_request_inner::getType() const {
    return m_type;
}
void OAIReviews_CreateReviews_request_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIReviews_CreateReviews_request_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAIReviews_CreateReviews_request_inner::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIReviews_CreateReviews_request_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_callback_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReviews_CreateReviews_request_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_content_isValid && m_content_id_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
