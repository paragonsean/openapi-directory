/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFoundFaces.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFoundFaces::OAIFoundFaces(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFoundFaces::OAIFoundFaces() {
    this->initializeModel();
}

OAIFoundFaces::~OAIFoundFaces() {}

void OAIFoundFaces::initializeModel() {

    m_advanced_info_isSet = false;
    m_advanced_info_isValid = false;

    m_cache_id_isSet = false;
    m_cache_id_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_faces_isSet = false;
    m_faces_isValid = false;

    m_result_isSet = false;
    m_result_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIFoundFaces::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFoundFaces::fromJsonObject(QJsonObject json) {

    m_advanced_info_isValid = ::OpenAPI::fromJsonValue(m_advanced_info, json[QString("AdvancedInfo")]);
    m_advanced_info_isSet = !json[QString("AdvancedInfo")].isNull() && m_advanced_info_isValid;

    m_cache_id_isValid = ::OpenAPI::fromJsonValue(m_cache_id, json[QString("CacheId")]);
    m_cache_id_isSet = !json[QString("CacheId")].isNull() && m_cache_id_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("Count")]);
    m_count_isSet = !json[QString("Count")].isNull() && m_count_isValid;

    m_faces_isValid = ::OpenAPI::fromJsonValue(m_faces, json[QString("Faces")]);
    m_faces_isSet = !json[QString("Faces")].isNull() && m_faces_isValid;

    m_result_isValid = ::OpenAPI::fromJsonValue(m_result, json[QString("Result")]);
    m_result_isSet = !json[QString("Result")].isNull() && m_result_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIFoundFaces::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFoundFaces::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_info.size() > 0) {
        obj.insert(QString("AdvancedInfo"), ::OpenAPI::toJsonValue(m_advanced_info));
    }
    if (m_cache_id_isSet) {
        obj.insert(QString("CacheId"), ::OpenAPI::toJsonValue(m_cache_id));
    }
    if (m_count_isSet) {
        obj.insert(QString("Count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_faces.size() > 0) {
        obj.insert(QString("Faces"), ::OpenAPI::toJsonValue(m_faces));
    }
    if (m_result_isSet) {
        obj.insert(QString("Result"), ::OpenAPI::toJsonValue(m_result));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QList<OAIKeyValuePair> OAIFoundFaces::getAdvancedInfo() const {
    return m_advanced_info;
}
void OAIFoundFaces::setAdvancedInfo(const QList<OAIKeyValuePair> &advanced_info) {
    m_advanced_info = advanced_info;
    m_advanced_info_isSet = true;
}

bool OAIFoundFaces::is_advanced_info_Set() const{
    return m_advanced_info_isSet;
}

bool OAIFoundFaces::is_advanced_info_Valid() const{
    return m_advanced_info_isValid;
}

QString OAIFoundFaces::getCacheId() const {
    return m_cache_id;
}
void OAIFoundFaces::setCacheId(const QString &cache_id) {
    m_cache_id = cache_id;
    m_cache_id_isSet = true;
}

bool OAIFoundFaces::is_cache_id_Set() const{
    return m_cache_id_isSet;
}

bool OAIFoundFaces::is_cache_id_Valid() const{
    return m_cache_id_isValid;
}

qint32 OAIFoundFaces::getCount() const {
    return m_count;
}
void OAIFoundFaces::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIFoundFaces::is_count_Set() const{
    return m_count_isSet;
}

bool OAIFoundFaces::is_count_Valid() const{
    return m_count_isValid;
}

QList<OAIFace> OAIFoundFaces::getFaces() const {
    return m_faces;
}
void OAIFoundFaces::setFaces(const QList<OAIFace> &faces) {
    m_faces = faces;
    m_faces_isSet = true;
}

bool OAIFoundFaces::is_faces_Set() const{
    return m_faces_isSet;
}

bool OAIFoundFaces::is_faces_Valid() const{
    return m_faces_isValid;
}

bool OAIFoundFaces::isResult() const {
    return m_result;
}
void OAIFoundFaces::setResult(const bool &result) {
    m_result = result;
    m_result_isSet = true;
}

bool OAIFoundFaces::is_result_Set() const{
    return m_result_isSet;
}

bool OAIFoundFaces::is_result_Valid() const{
    return m_result_isValid;
}

OAIStatus OAIFoundFaces::getStatus() const {
    return m_status;
}
void OAIFoundFaces::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIFoundFaces::is_status_Set() const{
    return m_status_isSet;
}

bool OAIFoundFaces::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIFoundFaces::getTrackingId() const {
    return m_tracking_id;
}
void OAIFoundFaces::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIFoundFaces::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIFoundFaces::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIFoundFaces::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_faces.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFoundFaces::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
