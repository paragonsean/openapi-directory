/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStatus.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStatus::OAIStatus(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStatus::OAIStatus() {
    this->initializeModel();
}

OAIStatus::~OAIStatus() {}

void OAIStatus::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_exception_isSet = false;
    m_exception_isValid = false;
}

void OAIStatus::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStatus::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("Code")]);
    m_code_isSet = !json[QString("Code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("Description")]);
    m_description_isSet = !json[QString("Description")].isNull() && m_description_isValid;

    m_exception_isValid = ::OpenAPI::fromJsonValue(m_exception, json[QString("Exception")]);
    m_exception_isSet = !json[QString("Exception")].isNull() && m_exception_isValid;
}

QString OAIStatus::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStatus::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("Code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("Description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_exception_isSet) {
        obj.insert(QString("Exception"), ::OpenAPI::toJsonValue(m_exception));
    }
    return obj;
}

qint32 OAIStatus::getCode() const {
    return m_code;
}
void OAIStatus::setCode(const qint32 &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAIStatus::is_code_Set() const{
    return m_code_isSet;
}

bool OAIStatus::is_code_Valid() const{
    return m_code_isValid;
}

QString OAIStatus::getDescription() const {
    return m_description;
}
void OAIStatus::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStatus::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStatus::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStatus::getException() const {
    return m_exception;
}
void OAIStatus::setException(const QString &exception) {
    m_exception = exception;
    m_exception_isSet = true;
}

bool OAIStatus::is_exception_Set() const{
    return m_exception_isSet;
}

bool OAIStatus::is_exception_Valid() const{
    return m_exception_isValid;
}

bool OAIStatus::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exception_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStatus::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
