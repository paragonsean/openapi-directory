/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDetectedTerms.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDetectedTerms::OAIDetectedTerms(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDetectedTerms::OAIDetectedTerms() {
    this->initializeModel();
}

OAIDetectedTerms::~OAIDetectedTerms() {}

void OAIDetectedTerms::initializeModel() {

    m_index_isSet = false;
    m_index_isValid = false;

    m_list_id_isSet = false;
    m_list_id_isValid = false;

    m_original_index_isSet = false;
    m_original_index_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;
}

void OAIDetectedTerms::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDetectedTerms::fromJsonObject(QJsonObject json) {

    m_index_isValid = ::OpenAPI::fromJsonValue(m_index, json[QString("Index")]);
    m_index_isSet = !json[QString("Index")].isNull() && m_index_isValid;

    m_list_id_isValid = ::OpenAPI::fromJsonValue(m_list_id, json[QString("ListId")]);
    m_list_id_isSet = !json[QString("ListId")].isNull() && m_list_id_isValid;

    m_original_index_isValid = ::OpenAPI::fromJsonValue(m_original_index, json[QString("OriginalIndex")]);
    m_original_index_isSet = !json[QString("OriginalIndex")].isNull() && m_original_index_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("Term")]);
    m_term_isSet = !json[QString("Term")].isNull() && m_term_isValid;
}

QString OAIDetectedTerms::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDetectedTerms::asJsonObject() const {
    QJsonObject obj;
    if (m_index_isSet) {
        obj.insert(QString("Index"), ::OpenAPI::toJsonValue(m_index));
    }
    if (m_list_id_isSet) {
        obj.insert(QString("ListId"), ::OpenAPI::toJsonValue(m_list_id));
    }
    if (m_original_index_isSet) {
        obj.insert(QString("OriginalIndex"), ::OpenAPI::toJsonValue(m_original_index));
    }
    if (m_term_isSet) {
        obj.insert(QString("Term"), ::OpenAPI::toJsonValue(m_term));
    }
    return obj;
}

qint32 OAIDetectedTerms::getIndex() const {
    return m_index;
}
void OAIDetectedTerms::setIndex(const qint32 &index) {
    m_index = index;
    m_index_isSet = true;
}

bool OAIDetectedTerms::is_index_Set() const{
    return m_index_isSet;
}

bool OAIDetectedTerms::is_index_Valid() const{
    return m_index_isValid;
}

qint32 OAIDetectedTerms::getListId() const {
    return m_list_id;
}
void OAIDetectedTerms::setListId(const qint32 &list_id) {
    m_list_id = list_id;
    m_list_id_isSet = true;
}

bool OAIDetectedTerms::is_list_id_Set() const{
    return m_list_id_isSet;
}

bool OAIDetectedTerms::is_list_id_Valid() const{
    return m_list_id_isValid;
}

qint32 OAIDetectedTerms::getOriginalIndex() const {
    return m_original_index;
}
void OAIDetectedTerms::setOriginalIndex(const qint32 &original_index) {
    m_original_index = original_index;
    m_original_index_isSet = true;
}

bool OAIDetectedTerms::is_original_index_Set() const{
    return m_original_index_isSet;
}

bool OAIDetectedTerms::is_original_index_Valid() const{
    return m_original_index_isValid;
}

QString OAIDetectedTerms::getTerm() const {
    return m_term;
}
void OAIDetectedTerms::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIDetectedTerms::is_term_Set() const{
    return m_term_isSet;
}

bool OAIDetectedTerms::is_term_Valid() const{
    return m_term_isValid;
}

bool OAIDetectedTerms::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_list_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_index_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDetectedTerms::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
