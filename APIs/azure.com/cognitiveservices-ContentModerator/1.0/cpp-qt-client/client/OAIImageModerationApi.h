/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImageModerationApi_H
#define OAI_OAIImageModerationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIEvaluate.h"
#include "OAIFoundFaces.h"
#include "OAIMatchResponse.h"
#include "OAIOCR.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImageModerationApi : public QObject {
    Q_OBJECT

public:
    OAIImageModerationApi(const int timeOut = 0);
    ~OAIImageModerationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  cache_image bool [optional]
    */
    virtual void imageModerationEvaluate(const ::OpenAPI::OptionalParam<bool> &cache_image = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  cache_image bool [optional]
    */
    virtual void imageModerationFindFaces(const ::OpenAPI::OptionalParam<bool> &cache_image = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  list_id QString [optional]
    * @param[in]  cache_image bool [optional]
    */
    virtual void imageModerationMatch(const ::OpenAPI::OptionalParam<QString> &list_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &cache_image = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  language QString [required]
    * @param[in]  cache_image bool [optional]
    * @param[in]  enhanced bool [optional]
    */
    virtual void imageModerationOCR(const QString &language, const ::OpenAPI::OptionalParam<bool> &cache_image = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &enhanced = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void imageModerationEvaluateCallback(OAIHttpRequestWorker *worker);
    void imageModerationFindFacesCallback(OAIHttpRequestWorker *worker);
    void imageModerationMatchCallback(OAIHttpRequestWorker *worker);
    void imageModerationOCRCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void imageModerationEvaluateSignal(OAIEvaluate summary);
    void imageModerationFindFacesSignal(OAIFoundFaces summary);
    void imageModerationMatchSignal(OAIMatchResponse summary);
    void imageModerationOCRSignal(OAIOCR summary);


    void imageModerationEvaluateSignalFull(OAIHttpRequestWorker *worker, OAIEvaluate summary);
    void imageModerationFindFacesSignalFull(OAIHttpRequestWorker *worker, OAIFoundFaces summary);
    void imageModerationMatchSignalFull(OAIHttpRequestWorker *worker, OAIMatchResponse summary);
    void imageModerationOCRSignalFull(OAIHttpRequestWorker *worker, OAIOCR summary);

    Q_DECL_DEPRECATED_X("Use imageModerationEvaluateSignalError() instead")
    void imageModerationEvaluateSignalE(OAIEvaluate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationEvaluateSignalError(OAIEvaluate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageModerationFindFacesSignalError() instead")
    void imageModerationFindFacesSignalE(OAIFoundFaces summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationFindFacesSignalError(OAIFoundFaces summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageModerationMatchSignalError() instead")
    void imageModerationMatchSignalE(OAIMatchResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationMatchSignalError(OAIMatchResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageModerationOCRSignalError() instead")
    void imageModerationOCRSignalE(OAIOCR summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationOCRSignalError(OAIOCR summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use imageModerationEvaluateSignalErrorFull() instead")
    void imageModerationEvaluateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationEvaluateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageModerationFindFacesSignalErrorFull() instead")
    void imageModerationFindFacesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationFindFacesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageModerationMatchSignalErrorFull() instead")
    void imageModerationMatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationMatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imageModerationOCRSignalErrorFull() instead")
    void imageModerationOCRSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imageModerationOCRSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
