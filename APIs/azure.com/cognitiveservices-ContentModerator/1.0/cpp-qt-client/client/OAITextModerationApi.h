/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITextModerationApi_H
#define OAI_OAITextModerationApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIDetectedLanguage.h"
#include "OAIObject.h"
#include "OAIScreen.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITextModerationApi : public QObject {
    Q_OBJECT

public:
    OAITextModerationApi(const int timeOut = 0);
    ~OAITextModerationApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  text_content OAIObject [required]
    */
    virtual void textModerationDetectLanguage(const QString &content_type, const OAIObject &text_content);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  text_content OAIObject [required]
    * @param[in]  language QString [optional]
    * @param[in]  autocorrect bool [optional]
    * @param[in]  pii bool [optional]
    * @param[in]  list_id QString [optional]
    * @param[in]  classify bool [optional]
    */
    virtual void textModerationScreenText(const QString &content_type, const OAIObject &text_content, const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &autocorrect = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &pii = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &list_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &classify = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void textModerationDetectLanguageCallback(OAIHttpRequestWorker *worker);
    void textModerationScreenTextCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void textModerationDetectLanguageSignal(OAIDetectedLanguage summary);
    void textModerationScreenTextSignal(OAIScreen summary);


    void textModerationDetectLanguageSignalFull(OAIHttpRequestWorker *worker, OAIDetectedLanguage summary);
    void textModerationScreenTextSignalFull(OAIHttpRequestWorker *worker, OAIScreen summary);

    Q_DECL_DEPRECATED_X("Use textModerationDetectLanguageSignalError() instead")
    void textModerationDetectLanguageSignalE(OAIDetectedLanguage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void textModerationDetectLanguageSignalError(OAIDetectedLanguage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use textModerationScreenTextSignalError() instead")
    void textModerationScreenTextSignalE(OAIScreen summary, QNetworkReply::NetworkError error_type, QString error_str);
    void textModerationScreenTextSignalError(OAIScreen summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use textModerationDetectLanguageSignalErrorFull() instead")
    void textModerationDetectLanguageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void textModerationDetectLanguageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use textModerationScreenTextSignalErrorFull() instead")
    void textModerationScreenTextSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void textModerationScreenTextSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
