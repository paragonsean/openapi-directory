/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIClassification.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIClassification::OAIClassification(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIClassification::OAIClassification() {
    this->initializeModel();
}

OAIClassification::~OAIClassification() {}

void OAIClassification::initializeModel() {

    m_category1_isSet = false;
    m_category1_isValid = false;

    m_category2_isSet = false;
    m_category2_isValid = false;

    m_category3_isSet = false;
    m_category3_isValid = false;

    m_review_recommended_isSet = false;
    m_review_recommended_isValid = false;
}

void OAIClassification::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIClassification::fromJsonObject(QJsonObject json) {

    m_category1_isValid = ::OpenAPI::fromJsonValue(m_category1, json[QString("Category1")]);
    m_category1_isSet = !json[QString("Category1")].isNull() && m_category1_isValid;

    m_category2_isValid = ::OpenAPI::fromJsonValue(m_category2, json[QString("Category2")]);
    m_category2_isSet = !json[QString("Category2")].isNull() && m_category2_isValid;

    m_category3_isValid = ::OpenAPI::fromJsonValue(m_category3, json[QString("Category3")]);
    m_category3_isSet = !json[QString("Category3")].isNull() && m_category3_isValid;

    m_review_recommended_isValid = ::OpenAPI::fromJsonValue(m_review_recommended, json[QString("ReviewRecommended")]);
    m_review_recommended_isSet = !json[QString("ReviewRecommended")].isNull() && m_review_recommended_isValid;
}

QString OAIClassification::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIClassification::asJsonObject() const {
    QJsonObject obj;
    if (m_category1.isSet()) {
        obj.insert(QString("Category1"), ::OpenAPI::toJsonValue(m_category1));
    }
    if (m_category2.isSet()) {
        obj.insert(QString("Category2"), ::OpenAPI::toJsonValue(m_category2));
    }
    if (m_category3.isSet()) {
        obj.insert(QString("Category3"), ::OpenAPI::toJsonValue(m_category3));
    }
    if (m_review_recommended_isSet) {
        obj.insert(QString("ReviewRecommended"), ::OpenAPI::toJsonValue(m_review_recommended));
    }
    return obj;
}

OAIClassification_Category1 OAIClassification::getCategory1() const {
    return m_category1;
}
void OAIClassification::setCategory1(const OAIClassification_Category1 &category1) {
    m_category1 = category1;
    m_category1_isSet = true;
}

bool OAIClassification::is_category1_Set() const{
    return m_category1_isSet;
}

bool OAIClassification::is_category1_Valid() const{
    return m_category1_isValid;
}

OAIClassification_Category2 OAIClassification::getCategory2() const {
    return m_category2;
}
void OAIClassification::setCategory2(const OAIClassification_Category2 &category2) {
    m_category2 = category2;
    m_category2_isSet = true;
}

bool OAIClassification::is_category2_Set() const{
    return m_category2_isSet;
}

bool OAIClassification::is_category2_Valid() const{
    return m_category2_isValid;
}

OAIClassification_Category3 OAIClassification::getCategory3() const {
    return m_category3;
}
void OAIClassification::setCategory3(const OAIClassification_Category3 &category3) {
    m_category3 = category3;
    m_category3_isSet = true;
}

bool OAIClassification::is_category3_Set() const{
    return m_category3_isSet;
}

bool OAIClassification::is_category3_Valid() const{
    return m_category3_isValid;
}

bool OAIClassification::isReviewRecommended() const {
    return m_review_recommended;
}
void OAIClassification::setReviewRecommended(const bool &review_recommended) {
    m_review_recommended = review_recommended;
    m_review_recommended_isSet = true;
}

bool OAIClassification::is_review_recommended_Set() const{
    return m_review_recommended_isSet;
}

bool OAIClassification::is_review_recommended_Valid() const{
    return m_review_recommended_isValid;
}

bool OAIClassification::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category1.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category2.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_category3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_recommended_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIClassification::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
