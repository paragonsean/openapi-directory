/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIListManagementTermListsApi_H
#define OAI_OAIListManagementTermListsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAPIError.h"
#include "OAIListManagementImageLists_Create_request.h"
#include "OAIRefreshIndex.h"
#include "OAITermList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIListManagementTermListsApi : public QObject {
    Q_OBJECT

public:
    OAIListManagementTermListsApi(const int timeOut = 0);
    ~OAIListManagementTermListsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  content_type QString [required]
    * @param[in]  body OAIListManagementImageLists_Create_request [required]
    */
    virtual void listManagementTermListsCreate(const QString &content_type, const OAIListManagementImageLists_Create_request &body);

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementTermListsDelete(const QString &list_id);


    virtual void listManagementTermListsGetAllTermLists();

    /**
    * @param[in]  list_id QString [required]
    */
    virtual void listManagementTermListsGetDetails(const QString &list_id);

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  language QString [required]
    */
    virtual void listManagementTermListsRefreshIndex(const QString &list_id, const QString &language);

    /**
    * @param[in]  list_id QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  body OAIListManagementImageLists_Create_request [required]
    */
    virtual void listManagementTermListsUpdate(const QString &list_id, const QString &content_type, const OAIListManagementImageLists_Create_request &body);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void listManagementTermListsCreateCallback(OAIHttpRequestWorker *worker);
    void listManagementTermListsDeleteCallback(OAIHttpRequestWorker *worker);
    void listManagementTermListsGetAllTermListsCallback(OAIHttpRequestWorker *worker);
    void listManagementTermListsGetDetailsCallback(OAIHttpRequestWorker *worker);
    void listManagementTermListsRefreshIndexCallback(OAIHttpRequestWorker *worker);
    void listManagementTermListsUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void listManagementTermListsCreateSignal(OAITermList summary);
    void listManagementTermListsDeleteSignal(QString summary);
    void listManagementTermListsGetAllTermListsSignal(QList<OAITermList> summary);
    void listManagementTermListsGetDetailsSignal(OAITermList summary);
    void listManagementTermListsRefreshIndexSignal(OAIRefreshIndex summary);
    void listManagementTermListsUpdateSignal(OAITermList summary);


    void listManagementTermListsCreateSignalFull(OAIHttpRequestWorker *worker, OAITermList summary);
    void listManagementTermListsDeleteSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void listManagementTermListsGetAllTermListsSignalFull(OAIHttpRequestWorker *worker, QList<OAITermList> summary);
    void listManagementTermListsGetDetailsSignalFull(OAIHttpRequestWorker *worker, OAITermList summary);
    void listManagementTermListsRefreshIndexSignalFull(OAIHttpRequestWorker *worker, OAIRefreshIndex summary);
    void listManagementTermListsUpdateSignalFull(OAIHttpRequestWorker *worker, OAITermList summary);

    Q_DECL_DEPRECATED_X("Use listManagementTermListsCreateSignalError() instead")
    void listManagementTermListsCreateSignalE(OAITermList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsCreateSignalError(OAITermList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsDeleteSignalError() instead")
    void listManagementTermListsDeleteSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsDeleteSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsGetAllTermListsSignalError() instead")
    void listManagementTermListsGetAllTermListsSignalE(QList<OAITermList> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsGetAllTermListsSignalError(QList<OAITermList> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsGetDetailsSignalError() instead")
    void listManagementTermListsGetDetailsSignalE(OAITermList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsGetDetailsSignalError(OAITermList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsRefreshIndexSignalError() instead")
    void listManagementTermListsRefreshIndexSignalE(OAIRefreshIndex summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsRefreshIndexSignalError(OAIRefreshIndex summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsUpdateSignalError() instead")
    void listManagementTermListsUpdateSignalE(OAITermList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsUpdateSignalError(OAITermList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use listManagementTermListsCreateSignalErrorFull() instead")
    void listManagementTermListsCreateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsCreateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsDeleteSignalErrorFull() instead")
    void listManagementTermListsDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsGetAllTermListsSignalErrorFull() instead")
    void listManagementTermListsGetAllTermListsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsGetAllTermListsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsGetDetailsSignalErrorFull() instead")
    void listManagementTermListsGetDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsGetDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsRefreshIndexSignalErrorFull() instead")
    void listManagementTermListsRefreshIndexSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsRefreshIndexSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listManagementTermListsUpdateSignalErrorFull() instead")
    void listManagementTermListsUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listManagementTermListsUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
