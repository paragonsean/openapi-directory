/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIMatchResponse.h
 *
 * The response for a Match request.
 */

#ifndef OAIMatchResponse_H
#define OAIMatchResponse_H

#include <QJsonObject>

#include "OAIMatch.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMatch;
class OAIStatus;

class OAIMatchResponse : public OAIObject {
public:
    OAIMatchResponse();
    OAIMatchResponse(QString json);
    ~OAIMatchResponse() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCacheId() const;
    void setCacheId(const QString &cache_id);
    bool is_cache_id_Set() const;
    bool is_cache_id_Valid() const;

    bool isIsMatch() const;
    void setIsMatch(const bool &is_match);
    bool is_is_match_Set() const;
    bool is_is_match_Valid() const;

    QList<OAIMatch> getMatches() const;
    void setMatches(const QList<OAIMatch> &matches);
    bool is_matches_Set() const;
    bool is_matches_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getTrackingId() const;
    void setTrackingId(const QString &tracking_id);
    bool is_tracking_id_Set() const;
    bool is_tracking_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cache_id;
    bool m_cache_id_isSet;
    bool m_cache_id_isValid;

    bool m_is_match;
    bool m_is_match_isSet;
    bool m_is_match_isValid;

    QList<OAIMatch> m_matches;
    bool m_matches_isSet;
    bool m_matches_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_tracking_id;
    bool m_tracking_id_isSet;
    bool m_tracking_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIMatchResponse)

#endif // OAIMatchResponse_H
