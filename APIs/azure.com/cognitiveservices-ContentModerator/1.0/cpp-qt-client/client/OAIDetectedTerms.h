/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIDetectedTerms.h
 *
 * Detected Terms details.
 */

#ifndef OAIDetectedTerms_H
#define OAIDetectedTerms_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIDetectedTerms : public OAIObject {
public:
    OAIDetectedTerms();
    OAIDetectedTerms(QString json);
    ~OAIDetectedTerms() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint32 getIndex() const;
    void setIndex(const qint32 &index);
    bool is_index_Set() const;
    bool is_index_Valid() const;

    qint32 getListId() const;
    void setListId(const qint32 &list_id);
    bool is_list_id_Set() const;
    bool is_list_id_Valid() const;

    qint32 getOriginalIndex() const;
    void setOriginalIndex(const qint32 &original_index);
    bool is_original_index_Set() const;
    bool is_original_index_Valid() const;

    QString getTerm() const;
    void setTerm(const QString &term);
    bool is_term_Set() const;
    bool is_term_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint32 m_index;
    bool m_index_isSet;
    bool m_index_isValid;

    qint32 m_list_id;
    bool m_list_id_isSet;
    bool m_list_id_isValid;

    qint32 m_original_index;
    bool m_original_index_isSet;
    bool m_original_index_isValid;

    QString m_term;
    bool m_term_isSet;
    bool m_term_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIDetectedTerms)

#endif // OAIDetectedTerms_H
