/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefreshIndex.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefreshIndex::OAIRefreshIndex(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefreshIndex::OAIRefreshIndex() {
    this->initializeModel();
}

OAIRefreshIndex::~OAIRefreshIndex() {}

void OAIRefreshIndex::initializeModel() {

    m_advanced_info_isSet = false;
    m_advanced_info_isValid = false;

    m_content_source_id_isSet = false;
    m_content_source_id_isValid = false;

    m_is_update_success_isSet = false;
    m_is_update_success_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIRefreshIndex::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefreshIndex::fromJsonObject(QJsonObject json) {

    if(json["AdvancedInfo"].isArray()){
        auto arr = json["AdvancedInfo"].toArray();
        m_advanced_info_isValid = true;
        if(arr.count() > 0) {
            for (const QJsonValue jval : arr) {
                QMap<QString, QString> item;
                m_advanced_info_isValid &= ::OpenAPI::fromJsonValue(item, jval);
                m_advanced_info_isSet = !jval.isNull() && m_advanced_info_isValid;
                m_advanced_info.push_back(item);
            }
        }
    }

    m_content_source_id_isValid = ::OpenAPI::fromJsonValue(m_content_source_id, json[QString("ContentSourceId")]);
    m_content_source_id_isSet = !json[QString("ContentSourceId")].isNull() && m_content_source_id_isValid;

    m_is_update_success_isValid = ::OpenAPI::fromJsonValue(m_is_update_success, json[QString("IsUpdateSuccess")]);
    m_is_update_success_isSet = !json[QString("IsUpdateSuccess")].isNull() && m_is_update_success_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIRefreshIndex::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefreshIndex::asJsonObject() const {
    QJsonObject obj;
    if (m_advanced_info.size() > 0) {
        
        obj.insert(QString("AdvancedInfo"), toJsonValue(m_advanced_info));
    }
    if (m_content_source_id_isSet) {
        obj.insert(QString("ContentSourceId"), ::OpenAPI::toJsonValue(m_content_source_id));
    }
    if (m_is_update_success_isSet) {
        obj.insert(QString("IsUpdateSuccess"), ::OpenAPI::toJsonValue(m_is_update_success));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QList<QMap<QString, QString>> OAIRefreshIndex::getAdvancedInfo() const {
    return m_advanced_info;
}
void OAIRefreshIndex::setAdvancedInfo(const QList<QMap<QString, QString>> &advanced_info) {
    m_advanced_info = advanced_info;
    m_advanced_info_isSet = true;
}

bool OAIRefreshIndex::is_advanced_info_Set() const{
    return m_advanced_info_isSet;
}

bool OAIRefreshIndex::is_advanced_info_Valid() const{
    return m_advanced_info_isValid;
}

QString OAIRefreshIndex::getContentSourceId() const {
    return m_content_source_id;
}
void OAIRefreshIndex::setContentSourceId(const QString &content_source_id) {
    m_content_source_id = content_source_id;
    m_content_source_id_isSet = true;
}

bool OAIRefreshIndex::is_content_source_id_Set() const{
    return m_content_source_id_isSet;
}

bool OAIRefreshIndex::is_content_source_id_Valid() const{
    return m_content_source_id_isValid;
}

bool OAIRefreshIndex::isIsUpdateSuccess() const {
    return m_is_update_success;
}
void OAIRefreshIndex::setIsUpdateSuccess(const bool &is_update_success) {
    m_is_update_success = is_update_success;
    m_is_update_success_isSet = true;
}

bool OAIRefreshIndex::is_is_update_success_Set() const{
    return m_is_update_success_isSet;
}

bool OAIRefreshIndex::is_is_update_success_Valid() const{
    return m_is_update_success_isValid;
}

OAIStatus OAIRefreshIndex::getStatus() const {
    return m_status;
}
void OAIRefreshIndex::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIRefreshIndex::is_status_Set() const{
    return m_status_isSet;
}

bool OAIRefreshIndex::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIRefreshIndex::getTrackingId() const {
    return m_tracking_id;
}
void OAIRefreshIndex::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIRefreshIndex::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIRefreshIndex::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIRefreshIndex::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_advanced_info.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_update_success_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefreshIndex::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
