/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIOCR.h
 *
 * Contains the text found in image for the language specified.
 */

#ifndef OAIOCR_H
#define OAIOCR_H

#include <QJsonObject>

#include "OAICandidate.h"
#include "OAIKeyValuePair.h"
#include "OAIStatus.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICandidate;
class OAIKeyValuePair;
class OAIStatus;

class OAIOCR : public OAIObject {
public:
    OAIOCR();
    OAIOCR(QString json);
    ~OAIOCR() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCacheId() const;
    void setCacheId(const QString &cache_id);
    bool is_cache_id_Set() const;
    bool is_cache_id_Valid() const;

    QList<OAICandidate> getCandidates() const;
    void setCandidates(const QList<OAICandidate> &candidates);
    bool is_candidates_Set() const;
    bool is_candidates_Valid() const;

    QString getLanguage() const;
    void setLanguage(const QString &language);
    bool is_language_Set() const;
    bool is_language_Valid() const;

    QList<OAIKeyValuePair> getMetadata() const;
    void setMetadata(const QList<OAIKeyValuePair> &metadata);
    bool is_metadata_Set() const;
    bool is_metadata_Valid() const;

    OAIStatus getStatus() const;
    void setStatus(const OAIStatus &status);
    bool is_status_Set() const;
    bool is_status_Valid() const;

    QString getText() const;
    void setText(const QString &text);
    bool is_text_Set() const;
    bool is_text_Valid() const;

    QString getTrackingId() const;
    void setTrackingId(const QString &tracking_id);
    bool is_tracking_id_Set() const;
    bool is_tracking_id_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_cache_id;
    bool m_cache_id_isSet;
    bool m_cache_id_isValid;

    QList<OAICandidate> m_candidates;
    bool m_candidates_isSet;
    bool m_candidates_isValid;

    QString m_language;
    bool m_language_isSet;
    bool m_language_isValid;

    QList<OAIKeyValuePair> m_metadata;
    bool m_metadata_isSet;
    bool m_metadata_isValid;

    OAIStatus m_status;
    bool m_status_isSet;
    bool m_status_isValid;

    QString m_text;
    bool m_text_isSet;
    bool m_text_isValid;

    QString m_tracking_id;
    bool m_tracking_id_isSet;
    bool m_tracking_id_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIOCR)

#endif // OAIOCR_H
