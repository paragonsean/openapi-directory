/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOCR.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOCR::OAIOCR(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOCR::OAIOCR() {
    this->initializeModel();
}

OAIOCR::~OAIOCR() {}

void OAIOCR::initializeModel() {

    m_cache_id_isSet = false;
    m_cache_id_isValid = false;

    m_candidates_isSet = false;
    m_candidates_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIOCR::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOCR::fromJsonObject(QJsonObject json) {

    m_cache_id_isValid = ::OpenAPI::fromJsonValue(m_cache_id, json[QString("CacheId")]);
    m_cache_id_isSet = !json[QString("CacheId")].isNull() && m_cache_id_isValid;

    m_candidates_isValid = ::OpenAPI::fromJsonValue(m_candidates, json[QString("Candidates")]);
    m_candidates_isSet = !json[QString("Candidates")].isNull() && m_candidates_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("Metadata")]);
    m_metadata_isSet = !json[QString("Metadata")].isNull() && m_metadata_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("Text")]);
    m_text_isSet = !json[QString("Text")].isNull() && m_text_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIOCR::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOCR::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_id_isSet) {
        obj.insert(QString("CacheId"), ::OpenAPI::toJsonValue(m_cache_id));
    }
    if (m_candidates.size() > 0) {
        obj.insert(QString("Candidates"), ::OpenAPI::toJsonValue(m_candidates));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("Metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_text_isSet) {
        obj.insert(QString("Text"), ::OpenAPI::toJsonValue(m_text));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIOCR::getCacheId() const {
    return m_cache_id;
}
void OAIOCR::setCacheId(const QString &cache_id) {
    m_cache_id = cache_id;
    m_cache_id_isSet = true;
}

bool OAIOCR::is_cache_id_Set() const{
    return m_cache_id_isSet;
}

bool OAIOCR::is_cache_id_Valid() const{
    return m_cache_id_isValid;
}

QList<OAICandidate> OAIOCR::getCandidates() const {
    return m_candidates;
}
void OAIOCR::setCandidates(const QList<OAICandidate> &candidates) {
    m_candidates = candidates;
    m_candidates_isSet = true;
}

bool OAIOCR::is_candidates_Set() const{
    return m_candidates_isSet;
}

bool OAIOCR::is_candidates_Valid() const{
    return m_candidates_isValid;
}

QString OAIOCR::getLanguage() const {
    return m_language;
}
void OAIOCR::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIOCR::is_language_Set() const{
    return m_language_isSet;
}

bool OAIOCR::is_language_Valid() const{
    return m_language_isValid;
}

QList<OAIKeyValuePair> OAIOCR::getMetadata() const {
    return m_metadata;
}
void OAIOCR::setMetadata(const QList<OAIKeyValuePair> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIOCR::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIOCR::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIStatus OAIOCR::getStatus() const {
    return m_status;
}
void OAIOCR::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIOCR::is_status_Set() const{
    return m_status_isSet;
}

bool OAIOCR::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIOCR::getText() const {
    return m_text;
}
void OAIOCR::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIOCR::is_text_Set() const{
    return m_text_isSet;
}

bool OAIOCR::is_text_Valid() const{
    return m_text_isValid;
}

QString OAIOCR::getTrackingId() const {
    return m_tracking_id;
}
void OAIOCR::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIOCR::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIOCR::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIOCR::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_candidates.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOCR::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
