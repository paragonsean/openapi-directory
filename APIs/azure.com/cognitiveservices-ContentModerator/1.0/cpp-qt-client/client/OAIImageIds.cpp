/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageIds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageIds::OAIImageIds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageIds::OAIImageIds() {
    this->initializeModel();
}

OAIImageIds::~OAIImageIds() {}

void OAIImageIds::initializeModel() {

    m_content_ids_isSet = false;
    m_content_ids_isValid = false;

    m_content_source_isSet = false;
    m_content_source_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIImageIds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageIds::fromJsonObject(QJsonObject json) {

    m_content_ids_isValid = ::OpenAPI::fromJsonValue(m_content_ids, json[QString("ContentIds")]);
    m_content_ids_isSet = !json[QString("ContentIds")].isNull() && m_content_ids_isValid;

    m_content_source_isValid = ::OpenAPI::fromJsonValue(m_content_source, json[QString("ContentSource")]);
    m_content_source_isSet = !json[QString("ContentSource")].isNull() && m_content_source_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIImageIds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageIds::asJsonObject() const {
    QJsonObject obj;
    if (m_content_ids.size() > 0) {
        obj.insert(QString("ContentIds"), ::OpenAPI::toJsonValue(m_content_ids));
    }
    if (m_content_source_isSet) {
        obj.insert(QString("ContentSource"), ::OpenAPI::toJsonValue(m_content_source));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QList<qint32> OAIImageIds::getContentIds() const {
    return m_content_ids;
}
void OAIImageIds::setContentIds(const QList<qint32> &content_ids) {
    m_content_ids = content_ids;
    m_content_ids_isSet = true;
}

bool OAIImageIds::is_content_ids_Set() const{
    return m_content_ids_isSet;
}

bool OAIImageIds::is_content_ids_Valid() const{
    return m_content_ids_isValid;
}

QString OAIImageIds::getContentSource() const {
    return m_content_source;
}
void OAIImageIds::setContentSource(const QString &content_source) {
    m_content_source = content_source;
    m_content_source_isSet = true;
}

bool OAIImageIds::is_content_source_Set() const{
    return m_content_source_isSet;
}

bool OAIImageIds::is_content_source_Valid() const{
    return m_content_source_isValid;
}

OAIStatus OAIImageIds::getStatus() const {
    return m_status;
}
void OAIImageIds::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIImageIds::is_status_Set() const{
    return m_status_isSet;
}

bool OAIImageIds::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIImageIds::getTrackingId() const {
    return m_tracking_id;
}
void OAIImageIds::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIImageIds::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIImageIds::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIImageIds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_content_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_content_source_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageIds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
