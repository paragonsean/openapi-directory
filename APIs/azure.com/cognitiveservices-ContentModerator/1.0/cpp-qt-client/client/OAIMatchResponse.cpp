/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMatchResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMatchResponse::OAIMatchResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMatchResponse::OAIMatchResponse() {
    this->initializeModel();
}

OAIMatchResponse::~OAIMatchResponse() {}

void OAIMatchResponse::initializeModel() {

    m_cache_id_isSet = false;
    m_cache_id_isValid = false;

    m_is_match_isSet = false;
    m_is_match_isValid = false;

    m_matches_isSet = false;
    m_matches_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIMatchResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMatchResponse::fromJsonObject(QJsonObject json) {

    m_cache_id_isValid = ::OpenAPI::fromJsonValue(m_cache_id, json[QString("CacheID")]);
    m_cache_id_isSet = !json[QString("CacheID")].isNull() && m_cache_id_isValid;

    m_is_match_isValid = ::OpenAPI::fromJsonValue(m_is_match, json[QString("IsMatch")]);
    m_is_match_isSet = !json[QString("IsMatch")].isNull() && m_is_match_isValid;

    m_matches_isValid = ::OpenAPI::fromJsonValue(m_matches, json[QString("Matches")]);
    m_matches_isSet = !json[QString("Matches")].isNull() && m_matches_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIMatchResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMatchResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_cache_id_isSet) {
        obj.insert(QString("CacheID"), ::OpenAPI::toJsonValue(m_cache_id));
    }
    if (m_is_match_isSet) {
        obj.insert(QString("IsMatch"), ::OpenAPI::toJsonValue(m_is_match));
    }
    if (m_matches.size() > 0) {
        obj.insert(QString("Matches"), ::OpenAPI::toJsonValue(m_matches));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIMatchResponse::getCacheId() const {
    return m_cache_id;
}
void OAIMatchResponse::setCacheId(const QString &cache_id) {
    m_cache_id = cache_id;
    m_cache_id_isSet = true;
}

bool OAIMatchResponse::is_cache_id_Set() const{
    return m_cache_id_isSet;
}

bool OAIMatchResponse::is_cache_id_Valid() const{
    return m_cache_id_isValid;
}

bool OAIMatchResponse::isIsMatch() const {
    return m_is_match;
}
void OAIMatchResponse::setIsMatch(const bool &is_match) {
    m_is_match = is_match;
    m_is_match_isSet = true;
}

bool OAIMatchResponse::is_is_match_Set() const{
    return m_is_match_isSet;
}

bool OAIMatchResponse::is_is_match_Valid() const{
    return m_is_match_isValid;
}

QList<OAIMatch> OAIMatchResponse::getMatches() const {
    return m_matches;
}
void OAIMatchResponse::setMatches(const QList<OAIMatch> &matches) {
    m_matches = matches;
    m_matches_isSet = true;
}

bool OAIMatchResponse::is_matches_Set() const{
    return m_matches_isSet;
}

bool OAIMatchResponse::is_matches_Valid() const{
    return m_matches_isValid;
}

OAIStatus OAIMatchResponse::getStatus() const {
    return m_status;
}
void OAIMatchResponse::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIMatchResponse::is_status_Set() const{
    return m_status_isSet;
}

bool OAIMatchResponse::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIMatchResponse::getTrackingId() const {
    return m_tracking_id;
}
void OAIMatchResponse::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIMatchResponse::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIMatchResponse::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIMatchResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cache_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_match_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_matches.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMatchResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
