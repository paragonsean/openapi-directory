/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIJob.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIJob::OAIJob(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIJob::OAIJob() {
    this->initializeModel();
}

OAIJob::~OAIJob() {}

void OAIJob::initializeModel() {

    m_call_back_endpoint_isSet = false;
    m_call_back_endpoint_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_job_execution_report_isSet = false;
    m_job_execution_report_isValid = false;

    m_result_meta_data_isSet = false;
    m_result_meta_data_isValid = false;

    m_review_id_isSet = false;
    m_review_id_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_team_name_isSet = false;
    m_team_name_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_workflow_id_isSet = false;
    m_workflow_id_isValid = false;
}

void OAIJob::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIJob::fromJsonObject(QJsonObject json) {

    m_call_back_endpoint_isValid = ::OpenAPI::fromJsonValue(m_call_back_endpoint, json[QString("CallBackEndpoint")]);
    m_call_back_endpoint_isSet = !json[QString("CallBackEndpoint")].isNull() && m_call_back_endpoint_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("Id")]);
    m_id_isSet = !json[QString("Id")].isNull() && m_id_isValid;

    m_job_execution_report_isValid = ::OpenAPI::fromJsonValue(m_job_execution_report, json[QString("JobExecutionReport")]);
    m_job_execution_report_isSet = !json[QString("JobExecutionReport")].isNull() && m_job_execution_report_isValid;

    m_result_meta_data_isValid = ::OpenAPI::fromJsonValue(m_result_meta_data, json[QString("ResultMetaData")]);
    m_result_meta_data_isSet = !json[QString("ResultMetaData")].isNull() && m_result_meta_data_isValid;

    m_review_id_isValid = ::OpenAPI::fromJsonValue(m_review_id, json[QString("ReviewId")]);
    m_review_id_isSet = !json[QString("ReviewId")].isNull() && m_review_id_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_team_name_isValid = ::OpenAPI::fromJsonValue(m_team_name, json[QString("TeamName")]);
    m_team_name_isSet = !json[QString("TeamName")].isNull() && m_team_name_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("Type")]);
    m_type_isSet = !json[QString("Type")].isNull() && m_type_isValid;

    m_workflow_id_isValid = ::OpenAPI::fromJsonValue(m_workflow_id, json[QString("WorkflowId")]);
    m_workflow_id_isSet = !json[QString("WorkflowId")].isNull() && m_workflow_id_isValid;
}

QString OAIJob::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIJob::asJsonObject() const {
    QJsonObject obj;
    if (m_call_back_endpoint_isSet) {
        obj.insert(QString("CallBackEndpoint"), ::OpenAPI::toJsonValue(m_call_back_endpoint));
    }
    if (m_id_isSet) {
        obj.insert(QString("Id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_job_execution_report.size() > 0) {
        obj.insert(QString("JobExecutionReport"), ::OpenAPI::toJsonValue(m_job_execution_report));
    }
    if (m_result_meta_data.size() > 0) {
        obj.insert(QString("ResultMetaData"), ::OpenAPI::toJsonValue(m_result_meta_data));
    }
    if (m_review_id_isSet) {
        obj.insert(QString("ReviewId"), ::OpenAPI::toJsonValue(m_review_id));
    }
    if (m_status_isSet) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_team_name_isSet) {
        obj.insert(QString("TeamName"), ::OpenAPI::toJsonValue(m_team_name));
    }
    if (m_type_isSet) {
        obj.insert(QString("Type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_workflow_id_isSet) {
        obj.insert(QString("WorkflowId"), ::OpenAPI::toJsonValue(m_workflow_id));
    }
    return obj;
}

QString OAIJob::getCallBackEndpoint() const {
    return m_call_back_endpoint;
}
void OAIJob::setCallBackEndpoint(const QString &call_back_endpoint) {
    m_call_back_endpoint = call_back_endpoint;
    m_call_back_endpoint_isSet = true;
}

bool OAIJob::is_call_back_endpoint_Set() const{
    return m_call_back_endpoint_isSet;
}

bool OAIJob::is_call_back_endpoint_Valid() const{
    return m_call_back_endpoint_isValid;
}

QString OAIJob::getId() const {
    return m_id;
}
void OAIJob::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIJob::is_id_Set() const{
    return m_id_isSet;
}

bool OAIJob::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIJobExecutionReportDetails> OAIJob::getJobExecutionReport() const {
    return m_job_execution_report;
}
void OAIJob::setJobExecutionReport(const QList<OAIJobExecutionReportDetails> &job_execution_report) {
    m_job_execution_report = job_execution_report;
    m_job_execution_report_isSet = true;
}

bool OAIJob::is_job_execution_report_Set() const{
    return m_job_execution_report_isSet;
}

bool OAIJob::is_job_execution_report_Valid() const{
    return m_job_execution_report_isValid;
}

QList<OAIKeyValuePair> OAIJob::getResultMetaData() const {
    return m_result_meta_data;
}
void OAIJob::setResultMetaData(const QList<OAIKeyValuePair> &result_meta_data) {
    m_result_meta_data = result_meta_data;
    m_result_meta_data_isSet = true;
}

bool OAIJob::is_result_meta_data_Set() const{
    return m_result_meta_data_isSet;
}

bool OAIJob::is_result_meta_data_Valid() const{
    return m_result_meta_data_isValid;
}

QString OAIJob::getReviewId() const {
    return m_review_id;
}
void OAIJob::setReviewId(const QString &review_id) {
    m_review_id = review_id;
    m_review_id_isSet = true;
}

bool OAIJob::is_review_id_Set() const{
    return m_review_id_isSet;
}

bool OAIJob::is_review_id_Valid() const{
    return m_review_id_isValid;
}

QString OAIJob::getStatus() const {
    return m_status;
}
void OAIJob::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIJob::is_status_Set() const{
    return m_status_isSet;
}

bool OAIJob::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIJob::getTeamName() const {
    return m_team_name;
}
void OAIJob::setTeamName(const QString &team_name) {
    m_team_name = team_name;
    m_team_name_isSet = true;
}

bool OAIJob::is_team_name_Set() const{
    return m_team_name_isSet;
}

bool OAIJob::is_team_name_Valid() const{
    return m_team_name_isValid;
}

QString OAIJob::getType() const {
    return m_type;
}
void OAIJob::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIJob::is_type_Set() const{
    return m_type_isSet;
}

bool OAIJob::is_type_Valid() const{
    return m_type_isValid;
}

QString OAIJob::getWorkflowId() const {
    return m_workflow_id;
}
void OAIJob::setWorkflowId(const QString &workflow_id) {
    m_workflow_id = workflow_id;
    m_workflow_id_isSet = true;
}

bool OAIJob::is_workflow_id_Set() const{
    return m_workflow_id_isSet;
}

bool OAIJob::is_workflow_id_Valid() const{
    return m_workflow_id_isValid;
}

bool OAIJob::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_call_back_endpoint_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_job_execution_report.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_result_meta_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_review_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_workflow_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIJob::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
