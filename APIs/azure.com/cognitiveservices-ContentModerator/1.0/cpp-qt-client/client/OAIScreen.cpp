/**
 * Content Moderator Client
 * You use the API to scan your content as it is generated. Content Moderator then processes your content and sends the results along with relevant information either back to your systems or to the built-in review tool. You can use this information to take decisions e.g. take it down, send to human judge, etc.    When using the API, images need to have a minimum of 128 pixels and a maximum file size of 4MB.   Text can be at most 1024 characters long.   If the content passed to the text API or the image API exceeds the size limits, the API will return an error code that informs about the issue.
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIScreen.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIScreen::OAIScreen(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIScreen::OAIScreen() {
    this->initializeModel();
}

OAIScreen::~OAIScreen() {}

void OAIScreen::initializeModel() {

    m_auto_corrected_text_isSet = false;
    m_auto_corrected_text_isValid = false;

    m_classification_isSet = false;
    m_classification_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_misrepresentation_isSet = false;
    m_misrepresentation_isValid = false;

    m_normalized_text_isSet = false;
    m_normalized_text_isValid = false;

    m_original_text_isSet = false;
    m_original_text_isValid = false;

    m_pii_isSet = false;
    m_pii_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_terms_isSet = false;
    m_terms_isValid = false;

    m_tracking_id_isSet = false;
    m_tracking_id_isValid = false;
}

void OAIScreen::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIScreen::fromJsonObject(QJsonObject json) {

    m_auto_corrected_text_isValid = ::OpenAPI::fromJsonValue(m_auto_corrected_text, json[QString("AutoCorrectedText")]);
    m_auto_corrected_text_isSet = !json[QString("AutoCorrectedText")].isNull() && m_auto_corrected_text_isValid;

    m_classification_isValid = ::OpenAPI::fromJsonValue(m_classification, json[QString("Classification")]);
    m_classification_isSet = !json[QString("Classification")].isNull() && m_classification_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("Language")]);
    m_language_isSet = !json[QString("Language")].isNull() && m_language_isValid;

    m_misrepresentation_isValid = ::OpenAPI::fromJsonValue(m_misrepresentation, json[QString("Misrepresentation")]);
    m_misrepresentation_isSet = !json[QString("Misrepresentation")].isNull() && m_misrepresentation_isValid;

    m_normalized_text_isValid = ::OpenAPI::fromJsonValue(m_normalized_text, json[QString("NormalizedText")]);
    m_normalized_text_isSet = !json[QString("NormalizedText")].isNull() && m_normalized_text_isValid;

    m_original_text_isValid = ::OpenAPI::fromJsonValue(m_original_text, json[QString("OriginalText")]);
    m_original_text_isSet = !json[QString("OriginalText")].isNull() && m_original_text_isValid;

    m_pii_isValid = ::OpenAPI::fromJsonValue(m_pii, json[QString("PII")]);
    m_pii_isSet = !json[QString("PII")].isNull() && m_pii_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("Status")]);
    m_status_isSet = !json[QString("Status")].isNull() && m_status_isValid;

    m_terms_isValid = ::OpenAPI::fromJsonValue(m_terms, json[QString("Terms")]);
    m_terms_isSet = !json[QString("Terms")].isNull() && m_terms_isValid;

    m_tracking_id_isValid = ::OpenAPI::fromJsonValue(m_tracking_id, json[QString("TrackingId")]);
    m_tracking_id_isSet = !json[QString("TrackingId")].isNull() && m_tracking_id_isValid;
}

QString OAIScreen::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIScreen::asJsonObject() const {
    QJsonObject obj;
    if (m_auto_corrected_text_isSet) {
        obj.insert(QString("AutoCorrectedText"), ::OpenAPI::toJsonValue(m_auto_corrected_text));
    }
    if (m_classification.isSet()) {
        obj.insert(QString("Classification"), ::OpenAPI::toJsonValue(m_classification));
    }
    if (m_language_isSet) {
        obj.insert(QString("Language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_misrepresentation.size() > 0) {
        obj.insert(QString("Misrepresentation"), ::OpenAPI::toJsonValue(m_misrepresentation));
    }
    if (m_normalized_text_isSet) {
        obj.insert(QString("NormalizedText"), ::OpenAPI::toJsonValue(m_normalized_text));
    }
    if (m_original_text_isSet) {
        obj.insert(QString("OriginalText"), ::OpenAPI::toJsonValue(m_original_text));
    }
    if (m_pii.isSet()) {
        obj.insert(QString("PII"), ::OpenAPI::toJsonValue(m_pii));
    }
    if (m_status.isSet()) {
        obj.insert(QString("Status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_terms.size() > 0) {
        obj.insert(QString("Terms"), ::OpenAPI::toJsonValue(m_terms));
    }
    if (m_tracking_id_isSet) {
        obj.insert(QString("TrackingId"), ::OpenAPI::toJsonValue(m_tracking_id));
    }
    return obj;
}

QString OAIScreen::getAutoCorrectedText() const {
    return m_auto_corrected_text;
}
void OAIScreen::setAutoCorrectedText(const QString &auto_corrected_text) {
    m_auto_corrected_text = auto_corrected_text;
    m_auto_corrected_text_isSet = true;
}

bool OAIScreen::is_auto_corrected_text_Set() const{
    return m_auto_corrected_text_isSet;
}

bool OAIScreen::is_auto_corrected_text_Valid() const{
    return m_auto_corrected_text_isValid;
}

OAIClassification OAIScreen::getClassification() const {
    return m_classification;
}
void OAIScreen::setClassification(const OAIClassification &classification) {
    m_classification = classification;
    m_classification_isSet = true;
}

bool OAIScreen::is_classification_Set() const{
    return m_classification_isSet;
}

bool OAIScreen::is_classification_Valid() const{
    return m_classification_isValid;
}

QString OAIScreen::getLanguage() const {
    return m_language;
}
void OAIScreen::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIScreen::is_language_Set() const{
    return m_language_isSet;
}

bool OAIScreen::is_language_Valid() const{
    return m_language_isValid;
}

QList<QString> OAIScreen::getMisrepresentation() const {
    return m_misrepresentation;
}
void OAIScreen::setMisrepresentation(const QList<QString> &misrepresentation) {
    m_misrepresentation = misrepresentation;
    m_misrepresentation_isSet = true;
}

bool OAIScreen::is_misrepresentation_Set() const{
    return m_misrepresentation_isSet;
}

bool OAIScreen::is_misrepresentation_Valid() const{
    return m_misrepresentation_isValid;
}

QString OAIScreen::getNormalizedText() const {
    return m_normalized_text;
}
void OAIScreen::setNormalizedText(const QString &normalized_text) {
    m_normalized_text = normalized_text;
    m_normalized_text_isSet = true;
}

bool OAIScreen::is_normalized_text_Set() const{
    return m_normalized_text_isSet;
}

bool OAIScreen::is_normalized_text_Valid() const{
    return m_normalized_text_isValid;
}

QString OAIScreen::getOriginalText() const {
    return m_original_text;
}
void OAIScreen::setOriginalText(const QString &original_text) {
    m_original_text = original_text;
    m_original_text_isSet = true;
}

bool OAIScreen::is_original_text_Set() const{
    return m_original_text_isSet;
}

bool OAIScreen::is_original_text_Valid() const{
    return m_original_text_isValid;
}

OAIPII OAIScreen::getPii() const {
    return m_pii;
}
void OAIScreen::setPii(const OAIPII &pii) {
    m_pii = pii;
    m_pii_isSet = true;
}

bool OAIScreen::is_pii_Set() const{
    return m_pii_isSet;
}

bool OAIScreen::is_pii_Valid() const{
    return m_pii_isValid;
}

OAIStatus OAIScreen::getStatus() const {
    return m_status;
}
void OAIScreen::setStatus(const OAIStatus &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIScreen::is_status_Set() const{
    return m_status_isSet;
}

bool OAIScreen::is_status_Valid() const{
    return m_status_isValid;
}

QList<OAIDetectedTerms> OAIScreen::getTerms() const {
    return m_terms;
}
void OAIScreen::setTerms(const QList<OAIDetectedTerms> &terms) {
    m_terms = terms;
    m_terms_isSet = true;
}

bool OAIScreen::is_terms_Set() const{
    return m_terms_isSet;
}

bool OAIScreen::is_terms_Valid() const{
    return m_terms_isValid;
}

QString OAIScreen::getTrackingId() const {
    return m_tracking_id;
}
void OAIScreen::setTrackingId(const QString &tracking_id) {
    m_tracking_id = tracking_id;
    m_tracking_id_isSet = true;
}

bool OAIScreen::is_tracking_id_Set() const{
    return m_tracking_id_isSet;
}

bool OAIScreen::is_tracking_id_Valid() const{
    return m_tracking_id_isValid;
}

bool OAIScreen::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auto_corrected_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_classification.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_misrepresentation.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_normalized_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pii.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_terms.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIScreen::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
