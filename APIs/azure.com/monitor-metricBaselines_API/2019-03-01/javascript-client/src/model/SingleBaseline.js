/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SingleBaseline model module.
 * @module model/SingleBaseline
 * @version 2019-03-01
 */
class SingleBaseline {
    /**
     * Constructs a new <code>SingleBaseline</code>.
     * The baseline values for a single sensitivity value.
     * @alias module:model/SingleBaseline
     * @param highThresholds {Array.<Number>} The high thresholds of the baseline.
     * @param lowThresholds {Array.<Number>} The low thresholds of the baseline.
     * @param sensitivity {module:model/SingleBaseline.SensitivityEnum} the sensitivity of the baseline.
     */
    constructor(highThresholds, lowThresholds, sensitivity) { 
        
        SingleBaseline.initialize(this, highThresholds, lowThresholds, sensitivity);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, highThresholds, lowThresholds, sensitivity) { 
        obj['highThresholds'] = highThresholds;
        obj['lowThresholds'] = lowThresholds;
        obj['sensitivity'] = sensitivity;
    }

    /**
     * Constructs a <code>SingleBaseline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SingleBaseline} obj Optional instance to populate.
     * @return {module:model/SingleBaseline} The populated <code>SingleBaseline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SingleBaseline();

            if (data.hasOwnProperty('highThresholds')) {
                obj['highThresholds'] = ApiClient.convertToType(data['highThresholds'], ['Number']);
            }
            if (data.hasOwnProperty('lowThresholds')) {
                obj['lowThresholds'] = ApiClient.convertToType(data['lowThresholds'], ['Number']);
            }
            if (data.hasOwnProperty('sensitivity')) {
                obj['sensitivity'] = ApiClient.convertToType(data['sensitivity'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SingleBaseline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SingleBaseline</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of SingleBaseline.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['highThresholds'])) {
            throw new Error("Expected the field `highThresholds` to be an array in the JSON data but got " + data['highThresholds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['lowThresholds'])) {
            throw new Error("Expected the field `lowThresholds` to be an array in the JSON data but got " + data['lowThresholds']);
        }
        // ensure the json data is a string
        if (data['sensitivity'] && !(typeof data['sensitivity'] === 'string' || data['sensitivity'] instanceof String)) {
            throw new Error("Expected the field `sensitivity` to be a primitive type in the JSON string but got " + data['sensitivity']);
        }

        return true;
    }


}

SingleBaseline.RequiredProperties = ["highThresholds", "lowThresholds", "sensitivity"];

/**
 * The high thresholds of the baseline.
 * @member {Array.<Number>} highThresholds
 */
SingleBaseline.prototype['highThresholds'] = undefined;

/**
 * The low thresholds of the baseline.
 * @member {Array.<Number>} lowThresholds
 */
SingleBaseline.prototype['lowThresholds'] = undefined;

/**
 * the sensitivity of the baseline.
 * @member {module:model/SingleBaseline.SensitivityEnum} sensitivity
 */
SingleBaseline.prototype['sensitivity'] = undefined;





/**
 * Allowed values for the <code>sensitivity</code> property.
 * @enum {String}
 * @readonly
 */
SingleBaseline['SensitivityEnum'] = {

    /**
     * value: "Low"
     * @const
     */
    "Low": "Low",

    /**
     * value: "Medium"
     * @const
     */
    "Medium": "Medium",

    /**
     * value: "High"
     * @const
     */
    "High": "High"
};



export default SingleBaseline;

