/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import BaselineMetadata from './BaselineMetadata';
import MetricSingleDimension from './MetricSingleDimension';
import SingleBaseline from './SingleBaseline';

/**
 * The TimeSeriesBaseline model module.
 * @module model/TimeSeriesBaseline
 * @version 2019-03-01
 */
class TimeSeriesBaseline {
    /**
     * Constructs a new <code>TimeSeriesBaseline</code>.
     * The baseline values for a single time series.
     * @alias module:model/TimeSeriesBaseline
     * @param aggregation {String} The aggregation type of the metric.
     * @param data {Array.<module:model/SingleBaseline>} The baseline values for each sensitivity.
     * @param timestamps {Array.<Date>} The list of timestamps of the baselines.
     */
    constructor(aggregation, data, timestamps) { 
        
        TimeSeriesBaseline.initialize(this, aggregation, data, timestamps);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, aggregation, data, timestamps) { 
        obj['aggregation'] = aggregation;
        obj['data'] = data;
        obj['timestamps'] = timestamps;
    }

    /**
     * Constructs a <code>TimeSeriesBaseline</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TimeSeriesBaseline} obj Optional instance to populate.
     * @return {module:model/TimeSeriesBaseline} The populated <code>TimeSeriesBaseline</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TimeSeriesBaseline();

            if (data.hasOwnProperty('aggregation')) {
                obj['aggregation'] = ApiClient.convertToType(data['aggregation'], 'String');
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [SingleBaseline]);
            }
            if (data.hasOwnProperty('dimensions')) {
                obj['dimensions'] = ApiClient.convertToType(data['dimensions'], [MetricSingleDimension]);
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], [BaselineMetadata]);
            }
            if (data.hasOwnProperty('timestamps')) {
                obj['timestamps'] = ApiClient.convertToType(data['timestamps'], ['Date']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TimeSeriesBaseline</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TimeSeriesBaseline</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TimeSeriesBaseline.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['aggregation'] && !(typeof data['aggregation'] === 'string' || data['aggregation'] instanceof String)) {
            throw new Error("Expected the field `aggregation` to be a primitive type in the JSON string but got " + data['aggregation']);
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                SingleBaseline.validateJSON(item);
            };
        }
        if (data['dimensions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dimensions'])) {
                throw new Error("Expected the field `dimensions` to be an array in the JSON data but got " + data['dimensions']);
            }
            // validate the optional field `dimensions` (array)
            for (const item of data['dimensions']) {
                MetricSingleDimension.validateJSON(item);
            };
        }
        if (data['metadata']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['metadata'])) {
                throw new Error("Expected the field `metadata` to be an array in the JSON data but got " + data['metadata']);
            }
            // validate the optional field `metadata` (array)
            for (const item of data['metadata']) {
                BaselineMetadata.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['timestamps'])) {
            throw new Error("Expected the field `timestamps` to be an array in the JSON data but got " + data['timestamps']);
        }

        return true;
    }


}

TimeSeriesBaseline.RequiredProperties = ["aggregation", "data", "timestamps"];

/**
 * The aggregation type of the metric.
 * @member {String} aggregation
 */
TimeSeriesBaseline.prototype['aggregation'] = undefined;

/**
 * The baseline values for each sensitivity.
 * @member {Array.<module:model/SingleBaseline>} data
 */
TimeSeriesBaseline.prototype['data'] = undefined;

/**
 * The dimensions of this time series.
 * @member {Array.<module:model/MetricSingleDimension>} dimensions
 */
TimeSeriesBaseline.prototype['dimensions'] = undefined;

/**
 * The baseline metadata values.
 * @member {Array.<module:model/BaselineMetadata>} metadata
 */
TimeSeriesBaseline.prototype['metadata'] = undefined;

/**
 * The list of timestamps of the baselines.
 * @member {Array.<Date>} timestamps
 */
TimeSeriesBaseline.prototype['timestamps'] = undefined;






export default TimeSeriesBaseline;

