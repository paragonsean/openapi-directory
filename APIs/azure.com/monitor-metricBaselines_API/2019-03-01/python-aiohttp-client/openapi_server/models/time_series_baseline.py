# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.baseline_metadata import BaselineMetadata
from openapi_server.models.metric_single_dimension import MetricSingleDimension
from openapi_server.models.single_baseline import SingleBaseline
from openapi_server import util


class TimeSeriesBaseline(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aggregation: str=None, data: List[SingleBaseline]=None, dimensions: List[MetricSingleDimension]=None, metadata: List[BaselineMetadata]=None, timestamps: List[datetime]=None):
        """TimeSeriesBaseline - a model defined in OpenAPI

        :param aggregation: The aggregation of this TimeSeriesBaseline.
        :param data: The data of this TimeSeriesBaseline.
        :param dimensions: The dimensions of this TimeSeriesBaseline.
        :param metadata: The metadata of this TimeSeriesBaseline.
        :param timestamps: The timestamps of this TimeSeriesBaseline.
        """
        self.openapi_types = {
            'aggregation': str,
            'data': List[SingleBaseline],
            'dimensions': List[MetricSingleDimension],
            'metadata': List[BaselineMetadata],
            'timestamps': List[datetime]
        }

        self.attribute_map = {
            'aggregation': 'aggregation',
            'data': 'data',
            'dimensions': 'dimensions',
            'metadata': 'metadata',
            'timestamps': 'timestamps'
        }

        self._aggregation = aggregation
        self._data = data
        self._dimensions = dimensions
        self._metadata = metadata
        self._timestamps = timestamps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TimeSeriesBaseline':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TimeSeriesBaseline of this TimeSeriesBaseline.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aggregation(self):
        """Gets the aggregation of this TimeSeriesBaseline.

        The aggregation type of the metric.

        :return: The aggregation of this TimeSeriesBaseline.
        :rtype: str
        """
        return self._aggregation

    @aggregation.setter
    def aggregation(self, aggregation):
        """Sets the aggregation of this TimeSeriesBaseline.

        The aggregation type of the metric.

        :param aggregation: The aggregation of this TimeSeriesBaseline.
        :type aggregation: str
        """
        if aggregation is None:
            raise ValueError("Invalid value for `aggregation`, must not be `None`")

        self._aggregation = aggregation

    @property
    def data(self):
        """Gets the data of this TimeSeriesBaseline.

        The baseline values for each sensitivity.

        :return: The data of this TimeSeriesBaseline.
        :rtype: List[SingleBaseline]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TimeSeriesBaseline.

        The baseline values for each sensitivity.

        :param data: The data of this TimeSeriesBaseline.
        :type data: List[SingleBaseline]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def dimensions(self):
        """Gets the dimensions of this TimeSeriesBaseline.

        The dimensions of this time series.

        :return: The dimensions of this TimeSeriesBaseline.
        :rtype: List[MetricSingleDimension]
        """
        return self._dimensions

    @dimensions.setter
    def dimensions(self, dimensions):
        """Sets the dimensions of this TimeSeriesBaseline.

        The dimensions of this time series.

        :param dimensions: The dimensions of this TimeSeriesBaseline.
        :type dimensions: List[MetricSingleDimension]
        """

        self._dimensions = dimensions

    @property
    def metadata(self):
        """Gets the metadata of this TimeSeriesBaseline.

        The baseline metadata values.

        :return: The metadata of this TimeSeriesBaseline.
        :rtype: List[BaselineMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this TimeSeriesBaseline.

        The baseline metadata values.

        :param metadata: The metadata of this TimeSeriesBaseline.
        :type metadata: List[BaselineMetadata]
        """

        self._metadata = metadata

    @property
    def timestamps(self):
        """Gets the timestamps of this TimeSeriesBaseline.

        The list of timestamps of the baselines.

        :return: The timestamps of this TimeSeriesBaseline.
        :rtype: List[datetime]
        """
        return self._timestamps

    @timestamps.setter
    def timestamps(self, timestamps):
        """Sets the timestamps of this TimeSeriesBaseline.

        The list of timestamps of the baselines.

        :param timestamps: The timestamps of this TimeSeriesBaseline.
        :type timestamps: List[datetime]
        """
        if timestamps is None:
            raise ValueError("Invalid value for `timestamps`, must not be `None`")

        self._timestamps = timestamps
