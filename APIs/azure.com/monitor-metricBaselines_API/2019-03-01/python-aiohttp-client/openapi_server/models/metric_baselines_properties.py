# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.time_series_baseline import TimeSeriesBaseline
from openapi_server import util


class MetricBaselinesProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, baselines: List[TimeSeriesBaseline]=None, interval: str=None, namespace: str=None, timespan: str=None):
        """MetricBaselinesProperties - a model defined in OpenAPI

        :param baselines: The baselines of this MetricBaselinesProperties.
        :param interval: The interval of this MetricBaselinesProperties.
        :param namespace: The namespace of this MetricBaselinesProperties.
        :param timespan: The timespan of this MetricBaselinesProperties.
        """
        self.openapi_types = {
            'baselines': List[TimeSeriesBaseline],
            'interval': str,
            'namespace': str,
            'timespan': str
        }

        self.attribute_map = {
            'baselines': 'baselines',
            'interval': 'interval',
            'namespace': 'namespace',
            'timespan': 'timespan'
        }

        self._baselines = baselines
        self._interval = interval
        self._namespace = namespace
        self._timespan = timespan

    @classmethod
    def from_dict(cls, dikt: dict) -> 'MetricBaselinesProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The MetricBaselinesProperties of this MetricBaselinesProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def baselines(self):
        """Gets the baselines of this MetricBaselinesProperties.

        The baseline for each time series that was queried.

        :return: The baselines of this MetricBaselinesProperties.
        :rtype: List[TimeSeriesBaseline]
        """
        return self._baselines

    @baselines.setter
    def baselines(self, baselines):
        """Sets the baselines of this MetricBaselinesProperties.

        The baseline for each time series that was queried.

        :param baselines: The baselines of this MetricBaselinesProperties.
        :type baselines: List[TimeSeriesBaseline]
        """
        if baselines is None:
            raise ValueError("Invalid value for `baselines`, must not be `None`")

        self._baselines = baselines

    @property
    def interval(self):
        """Gets the interval of this MetricBaselinesProperties.

        The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.

        :return: The interval of this MetricBaselinesProperties.
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this MetricBaselinesProperties.

        The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.

        :param interval: The interval of this MetricBaselinesProperties.
        :type interval: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")

        self._interval = interval

    @property
    def namespace(self):
        """Gets the namespace of this MetricBaselinesProperties.

        The namespace of the metrics been queried.

        :return: The namespace of this MetricBaselinesProperties.
        :rtype: str
        """
        return self._namespace

    @namespace.setter
    def namespace(self, namespace):
        """Sets the namespace of this MetricBaselinesProperties.

        The namespace of the metrics been queried.

        :param namespace: The namespace of this MetricBaselinesProperties.
        :type namespace: str
        """

        self._namespace = namespace

    @property
    def timespan(self):
        """Gets the timespan of this MetricBaselinesProperties.

        The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.

        :return: The timespan of this MetricBaselinesProperties.
        :rtype: str
        """
        return self._timespan

    @timespan.setter
    def timespan(self, timespan):
        """Sets the timespan of this MetricBaselinesProperties.

        The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by '/'.  This may be adjusted in the future and returned back from what was originally requested.

        :param timespan: The timespan of this MetricBaselinesProperties.
        :type timespan: str
        """
        if timespan is None:
            raise ValueError("Invalid value for `timespan`, must not be `None`")

        self._timespan = timespan
