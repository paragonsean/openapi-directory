/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITimeSeriesBaseline.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITimeSeriesBaseline::OAITimeSeriesBaseline(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITimeSeriesBaseline::OAITimeSeriesBaseline() {
    this->initializeModel();
}

OAITimeSeriesBaseline::~OAITimeSeriesBaseline() {}

void OAITimeSeriesBaseline::initializeModel() {

    m_aggregation_isSet = false;
    m_aggregation_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_dimensions_isSet = false;
    m_dimensions_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_timestamps_isSet = false;
    m_timestamps_isValid = false;
}

void OAITimeSeriesBaseline::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITimeSeriesBaseline::fromJsonObject(QJsonObject json) {

    m_aggregation_isValid = ::OpenAPI::fromJsonValue(m_aggregation, json[QString("aggregation")]);
    m_aggregation_isSet = !json[QString("aggregation")].isNull() && m_aggregation_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_dimensions_isValid = ::OpenAPI::fromJsonValue(m_dimensions, json[QString("dimensions")]);
    m_dimensions_isSet = !json[QString("dimensions")].isNull() && m_dimensions_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_timestamps_isValid = ::OpenAPI::fromJsonValue(m_timestamps, json[QString("timestamps")]);
    m_timestamps_isSet = !json[QString("timestamps")].isNull() && m_timestamps_isValid;
}

QString OAITimeSeriesBaseline::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITimeSeriesBaseline::asJsonObject() const {
    QJsonObject obj;
    if (m_aggregation_isSet) {
        obj.insert(QString("aggregation"), ::OpenAPI::toJsonValue(m_aggregation));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_dimensions.size() > 0) {
        obj.insert(QString("dimensions"), ::OpenAPI::toJsonValue(m_dimensions));
    }
    if (m_metadata.size() > 0) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_timestamps.size() > 0) {
        obj.insert(QString("timestamps"), ::OpenAPI::toJsonValue(m_timestamps));
    }
    return obj;
}

QString OAITimeSeriesBaseline::getAggregation() const {
    return m_aggregation;
}
void OAITimeSeriesBaseline::setAggregation(const QString &aggregation) {
    m_aggregation = aggregation;
    m_aggregation_isSet = true;
}

bool OAITimeSeriesBaseline::is_aggregation_Set() const{
    return m_aggregation_isSet;
}

bool OAITimeSeriesBaseline::is_aggregation_Valid() const{
    return m_aggregation_isValid;
}

QList<OAISingleBaseline> OAITimeSeriesBaseline::getData() const {
    return m_data;
}
void OAITimeSeriesBaseline::setData(const QList<OAISingleBaseline> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAITimeSeriesBaseline::is_data_Set() const{
    return m_data_isSet;
}

bool OAITimeSeriesBaseline::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIMetricSingleDimension> OAITimeSeriesBaseline::getDimensions() const {
    return m_dimensions;
}
void OAITimeSeriesBaseline::setDimensions(const QList<OAIMetricSingleDimension> &dimensions) {
    m_dimensions = dimensions;
    m_dimensions_isSet = true;
}

bool OAITimeSeriesBaseline::is_dimensions_Set() const{
    return m_dimensions_isSet;
}

bool OAITimeSeriesBaseline::is_dimensions_Valid() const{
    return m_dimensions_isValid;
}

QList<OAIBaselineMetadata> OAITimeSeriesBaseline::getMetadata() const {
    return m_metadata;
}
void OAITimeSeriesBaseline::setMetadata(const QList<OAIBaselineMetadata> &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAITimeSeriesBaseline::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAITimeSeriesBaseline::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QList<QDateTime> OAITimeSeriesBaseline::getTimestamps() const {
    return m_timestamps;
}
void OAITimeSeriesBaseline::setTimestamps(const QList<QDateTime> &timestamps) {
    m_timestamps = timestamps;
    m_timestamps_isSet = true;
}

bool OAITimeSeriesBaseline::is_timestamps_Set() const{
    return m_timestamps_isSet;
}

bool OAITimeSeriesBaseline::is_timestamps_Valid() const{
    return m_timestamps_isValid;
}

bool OAITimeSeriesBaseline::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aggregation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_dimensions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timestamps.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITimeSeriesBaseline::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_aggregation_isValid && m_data_isValid && m_timestamps_isValid && true;
}

} // namespace OpenAPI
