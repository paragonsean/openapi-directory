/**
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMetricBaselinesProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMetricBaselinesProperties::OAIMetricBaselinesProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMetricBaselinesProperties::OAIMetricBaselinesProperties() {
    this->initializeModel();
}

OAIMetricBaselinesProperties::~OAIMetricBaselinesProperties() {}

void OAIMetricBaselinesProperties::initializeModel() {

    m_baselines_isSet = false;
    m_baselines_isValid = false;

    m_interval_isSet = false;
    m_interval_isValid = false;

    m_r_namespace_isSet = false;
    m_r_namespace_isValid = false;

    m_timespan_isSet = false;
    m_timespan_isValid = false;
}

void OAIMetricBaselinesProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMetricBaselinesProperties::fromJsonObject(QJsonObject json) {

    m_baselines_isValid = ::OpenAPI::fromJsonValue(m_baselines, json[QString("baselines")]);
    m_baselines_isSet = !json[QString("baselines")].isNull() && m_baselines_isValid;

    m_interval_isValid = ::OpenAPI::fromJsonValue(m_interval, json[QString("interval")]);
    m_interval_isSet = !json[QString("interval")].isNull() && m_interval_isValid;

    m_r_namespace_isValid = ::OpenAPI::fromJsonValue(m_r_namespace, json[QString("namespace")]);
    m_r_namespace_isSet = !json[QString("namespace")].isNull() && m_r_namespace_isValid;

    m_timespan_isValid = ::OpenAPI::fromJsonValue(m_timespan, json[QString("timespan")]);
    m_timespan_isSet = !json[QString("timespan")].isNull() && m_timespan_isValid;
}

QString OAIMetricBaselinesProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMetricBaselinesProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_baselines.size() > 0) {
        obj.insert(QString("baselines"), ::OpenAPI::toJsonValue(m_baselines));
    }
    if (m_interval_isSet) {
        obj.insert(QString("interval"), ::OpenAPI::toJsonValue(m_interval));
    }
    if (m_r_namespace_isSet) {
        obj.insert(QString("namespace"), ::OpenAPI::toJsonValue(m_r_namespace));
    }
    if (m_timespan_isSet) {
        obj.insert(QString("timespan"), ::OpenAPI::toJsonValue(m_timespan));
    }
    return obj;
}

QList<OAITimeSeriesBaseline> OAIMetricBaselinesProperties::getBaselines() const {
    return m_baselines;
}
void OAIMetricBaselinesProperties::setBaselines(const QList<OAITimeSeriesBaseline> &baselines) {
    m_baselines = baselines;
    m_baselines_isSet = true;
}

bool OAIMetricBaselinesProperties::is_baselines_Set() const{
    return m_baselines_isSet;
}

bool OAIMetricBaselinesProperties::is_baselines_Valid() const{
    return m_baselines_isValid;
}

QString OAIMetricBaselinesProperties::getInterval() const {
    return m_interval;
}
void OAIMetricBaselinesProperties::setInterval(const QString &interval) {
    m_interval = interval;
    m_interval_isSet = true;
}

bool OAIMetricBaselinesProperties::is_interval_Set() const{
    return m_interval_isSet;
}

bool OAIMetricBaselinesProperties::is_interval_Valid() const{
    return m_interval_isValid;
}

QString OAIMetricBaselinesProperties::getRNamespace() const {
    return m_r_namespace;
}
void OAIMetricBaselinesProperties::setRNamespace(const QString &r_namespace) {
    m_r_namespace = r_namespace;
    m_r_namespace_isSet = true;
}

bool OAIMetricBaselinesProperties::is_r_namespace_Set() const{
    return m_r_namespace_isSet;
}

bool OAIMetricBaselinesProperties::is_r_namespace_Valid() const{
    return m_r_namespace_isValid;
}

QString OAIMetricBaselinesProperties::getTimespan() const {
    return m_timespan;
}
void OAIMetricBaselinesProperties::setTimespan(const QString &timespan) {
    m_timespan = timespan;
    m_timespan_isSet = true;
}

bool OAIMetricBaselinesProperties::is_timespan_Set() const{
    return m_timespan_isSet;
}

bool OAIMetricBaselinesProperties::is_timespan_Valid() const{
    return m_timespan_isValid;
}

bool OAIMetricBaselinesProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_baselines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_interval_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_namespace_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timespan_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMetricBaselinesProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_baselines_isValid && m_interval_isValid && m_timespan_isValid && true;
}

} // namespace OpenAPI
