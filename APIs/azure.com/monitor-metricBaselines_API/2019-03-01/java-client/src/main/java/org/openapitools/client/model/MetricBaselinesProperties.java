/*
 * MonitorManagementClient
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 2019-03-01
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.TimeSeriesBaseline;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response to a metric baselines query.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:44:09.099623-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class MetricBaselinesProperties {
  public static final String SERIALIZED_NAME_BASELINES = "baselines";
  @SerializedName(SERIALIZED_NAME_BASELINES)
  private List<TimeSeriesBaseline> baselines = new ArrayList<>();

  public static final String SERIALIZED_NAME_INTERVAL = "interval";
  @SerializedName(SERIALIZED_NAME_INTERVAL)
  private String interval;

  public static final String SERIALIZED_NAME_NAMESPACE = "namespace";
  @SerializedName(SERIALIZED_NAME_NAMESPACE)
  private String namespace;

  public static final String SERIALIZED_NAME_TIMESPAN = "timespan";
  @SerializedName(SERIALIZED_NAME_TIMESPAN)
  private String timespan;

  public MetricBaselinesProperties() {
  }

  public MetricBaselinesProperties baselines(List<TimeSeriesBaseline> baselines) {
    this.baselines = baselines;
    return this;
  }

  public MetricBaselinesProperties addBaselinesItem(TimeSeriesBaseline baselinesItem) {
    if (this.baselines == null) {
      this.baselines = new ArrayList<>();
    }
    this.baselines.add(baselinesItem);
    return this;
  }

  /**
   * The baseline for each time series that was queried.
   * @return baselines
   */
  @javax.annotation.Nonnull
  public List<TimeSeriesBaseline> getBaselines() {
    return baselines;
  }

  public void setBaselines(List<TimeSeriesBaseline> baselines) {
    this.baselines = baselines;
  }


  public MetricBaselinesProperties interval(String interval) {
    this.interval = interval;
    return this;
  }

  /**
   * The interval (window size) for which the metric data was returned in.  This may be adjusted in the future and returned back from what was originally requested.  This is not present if a metadata request was made.
   * @return interval
   */
  @javax.annotation.Nonnull
  public String getInterval() {
    return interval;
  }

  public void setInterval(String interval) {
    this.interval = interval;
  }


  public MetricBaselinesProperties namespace(String namespace) {
    this.namespace = namespace;
    return this;
  }

  /**
   * The namespace of the metrics been queried.
   * @return namespace
   */
  @javax.annotation.Nullable
  public String getNamespace() {
    return namespace;
  }

  public void setNamespace(String namespace) {
    this.namespace = namespace;
  }


  public MetricBaselinesProperties timespan(String timespan) {
    this.timespan = timespan;
    return this;
  }

  /**
   * The timespan for which the data was retrieved. Its value consists of two datetimes concatenated, separated by &#39;/&#39;.  This may be adjusted in the future and returned back from what was originally requested.
   * @return timespan
   */
  @javax.annotation.Nonnull
  public String getTimespan() {
    return timespan;
  }

  public void setTimespan(String timespan) {
    this.timespan = timespan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MetricBaselinesProperties metricBaselinesProperties = (MetricBaselinesProperties) o;
    return Objects.equals(this.baselines, metricBaselinesProperties.baselines) &&
        Objects.equals(this.interval, metricBaselinesProperties.interval) &&
        Objects.equals(this.namespace, metricBaselinesProperties.namespace) &&
        Objects.equals(this.timespan, metricBaselinesProperties.timespan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(baselines, interval, namespace, timespan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MetricBaselinesProperties {\n");
    sb.append("    baselines: ").append(toIndentedString(baselines)).append("\n");
    sb.append("    interval: ").append(toIndentedString(interval)).append("\n");
    sb.append("    namespace: ").append(toIndentedString(namespace)).append("\n");
    sb.append("    timespan: ").append(toIndentedString(timespan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("baselines");
    openapiFields.add("interval");
    openapiFields.add("namespace");
    openapiFields.add("timespan");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("baselines");
    openapiRequiredFields.add("interval");
    openapiRequiredFields.add("timespan");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MetricBaselinesProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!MetricBaselinesProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MetricBaselinesProperties is not found in the empty JSON string", MetricBaselinesProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MetricBaselinesProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MetricBaselinesProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MetricBaselinesProperties.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("baselines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `baselines` to be an array in the JSON string but got `%s`", jsonObj.get("baselines").toString()));
      }

      JsonArray jsonArraybaselines = jsonObj.getAsJsonArray("baselines");
      // validate the required field `baselines` (array)
      for (int i = 0; i < jsonArraybaselines.size(); i++) {
        TimeSeriesBaseline.validateJsonElement(jsonArraybaselines.get(i));
      };
      if (!jsonObj.get("interval").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `interval` to be a primitive type in the JSON string but got `%s`", jsonObj.get("interval").toString()));
      }
      if ((jsonObj.get("namespace") != null && !jsonObj.get("namespace").isJsonNull()) && !jsonObj.get("namespace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `namespace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("namespace").toString()));
      }
      if (!jsonObj.get("timespan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timespan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timespan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MetricBaselinesProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MetricBaselinesProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MetricBaselinesProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MetricBaselinesProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<MetricBaselinesProperties>() {
           @Override
           public void write(JsonWriter out, MetricBaselinesProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MetricBaselinesProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MetricBaselinesProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MetricBaselinesProperties
   * @throws IOException if the JSON string is invalid with respect to MetricBaselinesProperties
   */
  public static MetricBaselinesProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MetricBaselinesProperties.class);
  }

  /**
   * Convert an instance of MetricBaselinesProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

