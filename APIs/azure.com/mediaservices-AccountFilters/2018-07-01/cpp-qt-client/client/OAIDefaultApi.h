/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAccountFilter.h"
#include "OAIAccountFilterCollection.h"
#include "OAIApiError.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAccountFilter [required]
    */
    virtual void accountFiltersCreateOrUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &filter_name, const QString &api_version, const OAIAccountFilter &parameters);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountFiltersDelete(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &filter_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountFiltersGet(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &filter_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  api_version QString [required]
    */
    virtual void accountFiltersList(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &api_version);

    /**
    * @param[in]  subscription_id QString [required]
    * @param[in]  resource_group_name QString [required]
    * @param[in]  account_name QString [required]
    * @param[in]  filter_name QString [required]
    * @param[in]  api_version QString [required]
    * @param[in]  parameters OAIAccountFilter [required]
    */
    virtual void accountFiltersUpdate(const QString &subscription_id, const QString &resource_group_name, const QString &account_name, const QString &filter_name, const QString &api_version, const OAIAccountFilter &parameters);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void accountFiltersCreateOrUpdateCallback(OAIHttpRequestWorker *worker);
    void accountFiltersDeleteCallback(OAIHttpRequestWorker *worker);
    void accountFiltersGetCallback(OAIHttpRequestWorker *worker);
    void accountFiltersListCallback(OAIHttpRequestWorker *worker);
    void accountFiltersUpdateCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void accountFiltersCreateOrUpdateSignal(OAIAccountFilter summary);
    void accountFiltersDeleteSignal();
    void accountFiltersGetSignal(OAIAccountFilter summary);
    void accountFiltersListSignal(OAIAccountFilterCollection summary);
    void accountFiltersUpdateSignal(OAIAccountFilter summary);


    void accountFiltersCreateOrUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountFilter summary);
    void accountFiltersDeleteSignalFull(OAIHttpRequestWorker *worker);
    void accountFiltersGetSignalFull(OAIHttpRequestWorker *worker, OAIAccountFilter summary);
    void accountFiltersListSignalFull(OAIHttpRequestWorker *worker, OAIAccountFilterCollection summary);
    void accountFiltersUpdateSignalFull(OAIHttpRequestWorker *worker, OAIAccountFilter summary);

    Q_DECL_DEPRECATED_X("Use accountFiltersCreateOrUpdateSignalError() instead")
    void accountFiltersCreateOrUpdateSignalE(OAIAccountFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersCreateOrUpdateSignalError(OAIAccountFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersDeleteSignalError() instead")
    void accountFiltersDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersGetSignalError() instead")
    void accountFiltersGetSignalE(OAIAccountFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersGetSignalError(OAIAccountFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersListSignalError() instead")
    void accountFiltersListSignalE(OAIAccountFilterCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersListSignalError(OAIAccountFilterCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersUpdateSignalError() instead")
    void accountFiltersUpdateSignalE(OAIAccountFilter summary, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersUpdateSignalError(OAIAccountFilter summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use accountFiltersCreateOrUpdateSignalErrorFull() instead")
    void accountFiltersCreateOrUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersCreateOrUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersDeleteSignalErrorFull() instead")
    void accountFiltersDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersGetSignalErrorFull() instead")
    void accountFiltersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersListSignalErrorFull() instead")
    void accountFiltersListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use accountFiltersUpdateSignalErrorFull() instead")
    void accountFiltersUpdateSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void accountFiltersUpdateSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
