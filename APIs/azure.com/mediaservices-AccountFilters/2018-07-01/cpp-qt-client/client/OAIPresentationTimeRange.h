/**
 * Azure Media Services
 * This Swagger was generated by the API Framework.
 *
 * The version of the OpenAPI document: 2018-07-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPresentationTimeRange.h
 *
 * The presentation time range, this is asset related and not recommended for Account Filter.
 */

#ifndef OAIPresentationTimeRange_H
#define OAIPresentationTimeRange_H

#include <QJsonObject>


#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIPresentationTimeRange : public OAIObject {
public:
    OAIPresentationTimeRange();
    OAIPresentationTimeRange(QString json);
    ~OAIPresentationTimeRange() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    qint64 getEndTimestamp() const;
    void setEndTimestamp(const qint64 &end_timestamp);
    bool is_end_timestamp_Set() const;
    bool is_end_timestamp_Valid() const;

    bool isForceEndTimestamp() const;
    void setForceEndTimestamp(const bool &force_end_timestamp);
    bool is_force_end_timestamp_Set() const;
    bool is_force_end_timestamp_Valid() const;

    qint64 getLiveBackoffDuration() const;
    void setLiveBackoffDuration(const qint64 &live_backoff_duration);
    bool is_live_backoff_duration_Set() const;
    bool is_live_backoff_duration_Valid() const;

    qint64 getPresentationWindowDuration() const;
    void setPresentationWindowDuration(const qint64 &presentation_window_duration);
    bool is_presentation_window_duration_Set() const;
    bool is_presentation_window_duration_Valid() const;

    qint64 getStartTimestamp() const;
    void setStartTimestamp(const qint64 &start_timestamp);
    bool is_start_timestamp_Set() const;
    bool is_start_timestamp_Valid() const;

    qint64 getTimescale() const;
    void setTimescale(const qint64 &timescale);
    bool is_timescale_Set() const;
    bool is_timescale_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    qint64 m_end_timestamp;
    bool m_end_timestamp_isSet;
    bool m_end_timestamp_isValid;

    bool m_force_end_timestamp;
    bool m_force_end_timestamp_isSet;
    bool m_force_end_timestamp_isValid;

    qint64 m_live_backoff_duration;
    bool m_live_backoff_duration_isSet;
    bool m_live_backoff_duration_isValid;

    qint64 m_presentation_window_duration;
    bool m_presentation_window_duration_isSet;
    bool m_presentation_window_duration_isValid;

    qint64 m_start_timestamp;
    bool m_start_timestamp_isSet;
    bool m_start_timestamp_isValid;

    qint64 m_timescale;
    bool m_timescale_isSet;
    bool m_timescale_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPresentationTimeRange)

#endif // OAIPresentationTimeRange_H
