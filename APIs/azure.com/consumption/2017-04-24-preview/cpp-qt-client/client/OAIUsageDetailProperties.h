/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Web-Direct subscriptions. Other subscription types which were not purchased directly through the Azure web portal are not supported through this preview API.
 *
 * The version of the OpenAPI document: 2017-04-24-preview
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIUsageDetailProperties.h
 *
 * The properties of the usage detail.
 */

#ifndef OAIUsageDetailProperties_H
#define OAIUsageDetailProperties_H

#include <QJsonObject>

#include "OAIMeterDetails.h"
#include <QDateTime>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIMeterDetails;

class OAIUsageDetailProperties : public OAIObject {
public:
    OAIUsageDetailProperties();
    OAIUsageDetailProperties(QString json);
    ~OAIUsageDetailProperties() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QMap<QString, QString> getAdditionalProperties() const;
    void setAdditionalProperties(const QMap<QString, QString> &additional_properties);
    bool is_additional_properties_Set() const;
    bool is_additional_properties_Valid() const;

    double getBillableQuantity() const;
    void setBillableQuantity(const double &billable_quantity);
    bool is_billable_quantity_Set() const;
    bool is_billable_quantity_Valid() const;

    QString getBillingPeriodId() const;
    void setBillingPeriodId(const QString &billing_period_id);
    bool is_billing_period_id_Set() const;
    bool is_billing_period_id_Valid() const;

    QString getCurrency() const;
    void setCurrency(const QString &currency);
    bool is_currency_Set() const;
    bool is_currency_Valid() const;

    QString getInstanceId() const;
    void setInstanceId(const QString &instance_id);
    bool is_instance_id_Set() const;
    bool is_instance_id_Valid() const;

    QString getInstanceLocation() const;
    void setInstanceLocation(const QString &instance_location);
    bool is_instance_location_Set() const;
    bool is_instance_location_Valid() const;

    QString getInstanceName() const;
    void setInstanceName(const QString &instance_name);
    bool is_instance_name_Set() const;
    bool is_instance_name_Valid() const;

    QString getInvoiceId() const;
    void setInvoiceId(const QString &invoice_id);
    bool is_invoice_id_Set() const;
    bool is_invoice_id_Valid() const;

    bool isIsEstimated() const;
    void setIsEstimated(const bool &is_estimated);
    bool is_is_estimated_Set() const;
    bool is_is_estimated_Valid() const;

    OAIMeterDetails getMeterDetails() const;
    void setMeterDetails(const OAIMeterDetails &meter_details);
    bool is_meter_details_Set() const;
    bool is_meter_details_Valid() const;

    QString getMeterId() const;
    void setMeterId(const QString &meter_id);
    bool is_meter_id_Set() const;
    bool is_meter_id_Valid() const;

    double getPretaxCost() const;
    void setPretaxCost(const double &pretax_cost);
    bool is_pretax_cost_Set() const;
    bool is_pretax_cost_Valid() const;

    QDateTime getUsageEnd() const;
    void setUsageEnd(const QDateTime &usage_end);
    bool is_usage_end_Set() const;
    bool is_usage_end_Valid() const;

    double getUsageQuantity() const;
    void setUsageQuantity(const double &usage_quantity);
    bool is_usage_quantity_Set() const;
    bool is_usage_quantity_Valid() const;

    QDateTime getUsageStart() const;
    void setUsageStart(const QDateTime &usage_start);
    bool is_usage_start_Set() const;
    bool is_usage_start_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QMap<QString, QString> m_additional_properties;
    bool m_additional_properties_isSet;
    bool m_additional_properties_isValid;

    double m_billable_quantity;
    bool m_billable_quantity_isSet;
    bool m_billable_quantity_isValid;

    QString m_billing_period_id;
    bool m_billing_period_id_isSet;
    bool m_billing_period_id_isValid;

    QString m_currency;
    bool m_currency_isSet;
    bool m_currency_isValid;

    QString m_instance_id;
    bool m_instance_id_isSet;
    bool m_instance_id_isValid;

    QString m_instance_location;
    bool m_instance_location_isSet;
    bool m_instance_location_isValid;

    QString m_instance_name;
    bool m_instance_name_isSet;
    bool m_instance_name_isValid;

    QString m_invoice_id;
    bool m_invoice_id_isSet;
    bool m_invoice_id_isValid;

    bool m_is_estimated;
    bool m_is_estimated_isSet;
    bool m_is_estimated_isValid;

    OAIMeterDetails m_meter_details;
    bool m_meter_details_isSet;
    bool m_meter_details_isValid;

    QString m_meter_id;
    bool m_meter_id_isSet;
    bool m_meter_id_isValid;

    double m_pretax_cost;
    bool m_pretax_cost_isSet;
    bool m_pretax_cost_isValid;

    QDateTime m_usage_end;
    bool m_usage_end_isSet;
    bool m_usage_end_isValid;

    double m_usage_quantity;
    bool m_usage_quantity_isSet;
    bool m_usage_quantity_isValid;

    QDateTime m_usage_start;
    bool m_usage_start_isSet;
    bool m_usage_start_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIUsageDetailProperties)

#endif // OAIUsageDetailProperties_H
