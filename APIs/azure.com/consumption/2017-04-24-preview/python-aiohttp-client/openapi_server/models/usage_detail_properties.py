# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.meter_details import MeterDetails
from openapi_server import util


class UsageDetailProperties(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_properties: Dict[str, str]=None, billable_quantity: float=None, billing_period_id: str=None, currency: str=None, instance_id: str=None, instance_location: str=None, instance_name: str=None, invoice_id: str=None, is_estimated: bool=None, meter_details: MeterDetails=None, meter_id: str=None, pretax_cost: float=None, usage_end: datetime=None, usage_quantity: float=None, usage_start: datetime=None):
        """UsageDetailProperties - a model defined in OpenAPI

        :param additional_properties: The additional_properties of this UsageDetailProperties.
        :param billable_quantity: The billable_quantity of this UsageDetailProperties.
        :param billing_period_id: The billing_period_id of this UsageDetailProperties.
        :param currency: The currency of this UsageDetailProperties.
        :param instance_id: The instance_id of this UsageDetailProperties.
        :param instance_location: The instance_location of this UsageDetailProperties.
        :param instance_name: The instance_name of this UsageDetailProperties.
        :param invoice_id: The invoice_id of this UsageDetailProperties.
        :param is_estimated: The is_estimated of this UsageDetailProperties.
        :param meter_details: The meter_details of this UsageDetailProperties.
        :param meter_id: The meter_id of this UsageDetailProperties.
        :param pretax_cost: The pretax_cost of this UsageDetailProperties.
        :param usage_end: The usage_end of this UsageDetailProperties.
        :param usage_quantity: The usage_quantity of this UsageDetailProperties.
        :param usage_start: The usage_start of this UsageDetailProperties.
        """
        self.openapi_types = {
            'additional_properties': Dict[str, str],
            'billable_quantity': float,
            'billing_period_id': str,
            'currency': str,
            'instance_id': str,
            'instance_location': str,
            'instance_name': str,
            'invoice_id': str,
            'is_estimated': bool,
            'meter_details': MeterDetails,
            'meter_id': str,
            'pretax_cost': float,
            'usage_end': datetime,
            'usage_quantity': float,
            'usage_start': datetime
        }

        self.attribute_map = {
            'additional_properties': 'additionalProperties',
            'billable_quantity': 'billableQuantity',
            'billing_period_id': 'billingPeriodId',
            'currency': 'currency',
            'instance_id': 'instanceId',
            'instance_location': 'instanceLocation',
            'instance_name': 'instanceName',
            'invoice_id': 'invoiceId',
            'is_estimated': 'isEstimated',
            'meter_details': 'meterDetails',
            'meter_id': 'meterId',
            'pretax_cost': 'pretaxCost',
            'usage_end': 'usageEnd',
            'usage_quantity': 'usageQuantity',
            'usage_start': 'usageStart'
        }

        self._additional_properties = additional_properties
        self._billable_quantity = billable_quantity
        self._billing_period_id = billing_period_id
        self._currency = currency
        self._instance_id = instance_id
        self._instance_location = instance_location
        self._instance_name = instance_name
        self._invoice_id = invoice_id
        self._is_estimated = is_estimated
        self._meter_details = meter_details
        self._meter_id = meter_id
        self._pretax_cost = pretax_cost
        self._usage_end = usage_end
        self._usage_quantity = usage_quantity
        self._usage_start = usage_start

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsageDetailProperties':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UsageDetailProperties of this UsageDetailProperties.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_properties(self):
        """Gets the additional_properties of this UsageDetailProperties.

        The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated, unless it's specified in $expand.

        :return: The additional_properties of this UsageDetailProperties.
        :rtype: Dict[str, str]
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this UsageDetailProperties.

        The list of key/value pairs for the additional properties, in the format 'key':'value' where key = the field name, and value = the field value. By default this is not populated, unless it's specified in $expand.

        :param additional_properties: The additional_properties of this UsageDetailProperties.
        :type additional_properties: Dict[str, str]
        """

        self._additional_properties = additional_properties

    @property
    def billable_quantity(self):
        """Gets the billable_quantity of this UsageDetailProperties.

        The billable usage quantity.

        :return: The billable_quantity of this UsageDetailProperties.
        :rtype: float
        """
        return self._billable_quantity

    @billable_quantity.setter
    def billable_quantity(self, billable_quantity):
        """Sets the billable_quantity of this UsageDetailProperties.

        The billable usage quantity.

        :param billable_quantity: The billable_quantity of this UsageDetailProperties.
        :type billable_quantity: float
        """

        self._billable_quantity = billable_quantity

    @property
    def billing_period_id(self):
        """Gets the billing_period_id of this UsageDetailProperties.

        The id of the billing period resource that the usage belongs to.

        :return: The billing_period_id of this UsageDetailProperties.
        :rtype: str
        """
        return self._billing_period_id

    @billing_period_id.setter
    def billing_period_id(self, billing_period_id):
        """Sets the billing_period_id of this UsageDetailProperties.

        The id of the billing period resource that the usage belongs to.

        :param billing_period_id: The billing_period_id of this UsageDetailProperties.
        :type billing_period_id: str
        """

        self._billing_period_id = billing_period_id

    @property
    def currency(self):
        """Gets the currency of this UsageDetailProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :return: The currency of this UsageDetailProperties.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this UsageDetailProperties.

        The ISO currency in which the meter is charged, for example, USD.

        :param currency: The currency of this UsageDetailProperties.
        :type currency: str
        """

        self._currency = currency

    @property
    def instance_id(self):
        """Gets the instance_id of this UsageDetailProperties.

        The uri of the resource instance that the usage is about.

        :return: The instance_id of this UsageDetailProperties.
        :rtype: str
        """
        return self._instance_id

    @instance_id.setter
    def instance_id(self, instance_id):
        """Sets the instance_id of this UsageDetailProperties.

        The uri of the resource instance that the usage is about.

        :param instance_id: The instance_id of this UsageDetailProperties.
        :type instance_id: str
        """

        self._instance_id = instance_id

    @property
    def instance_location(self):
        """Gets the instance_location of this UsageDetailProperties.

        The location of the resource instance that the usage is about.

        :return: The instance_location of this UsageDetailProperties.
        :rtype: str
        """
        return self._instance_location

    @instance_location.setter
    def instance_location(self, instance_location):
        """Sets the instance_location of this UsageDetailProperties.

        The location of the resource instance that the usage is about.

        :param instance_location: The instance_location of this UsageDetailProperties.
        :type instance_location: str
        """

        self._instance_location = instance_location

    @property
    def instance_name(self):
        """Gets the instance_name of this UsageDetailProperties.

        The name of the resource instance that the usage is about.

        :return: The instance_name of this UsageDetailProperties.
        :rtype: str
        """
        return self._instance_name

    @instance_name.setter
    def instance_name(self, instance_name):
        """Sets the instance_name of this UsageDetailProperties.

        The name of the resource instance that the usage is about.

        :param instance_name: The instance_name of this UsageDetailProperties.
        :type instance_name: str
        """

        self._instance_name = instance_name

    @property
    def invoice_id(self):
        """Gets the invoice_id of this UsageDetailProperties.

        The id of the invoice resource that the usage belongs to.

        :return: The invoice_id of this UsageDetailProperties.
        :rtype: str
        """
        return self._invoice_id

    @invoice_id.setter
    def invoice_id(self, invoice_id):
        """Sets the invoice_id of this UsageDetailProperties.

        The id of the invoice resource that the usage belongs to.

        :param invoice_id: The invoice_id of this UsageDetailProperties.
        :type invoice_id: str
        """

        self._invoice_id = invoice_id

    @property
    def is_estimated(self):
        """Gets the is_estimated of this UsageDetailProperties.

        The estimated usage is subject to change.

        :return: The is_estimated of this UsageDetailProperties.
        :rtype: bool
        """
        return self._is_estimated

    @is_estimated.setter
    def is_estimated(self, is_estimated):
        """Sets the is_estimated of this UsageDetailProperties.

        The estimated usage is subject to change.

        :param is_estimated: The is_estimated of this UsageDetailProperties.
        :type is_estimated: bool
        """

        self._is_estimated = is_estimated

    @property
    def meter_details(self):
        """Gets the meter_details of this UsageDetailProperties.


        :return: The meter_details of this UsageDetailProperties.
        :rtype: MeterDetails
        """
        return self._meter_details

    @meter_details.setter
    def meter_details(self, meter_details):
        """Sets the meter_details of this UsageDetailProperties.


        :param meter_details: The meter_details of this UsageDetailProperties.
        :type meter_details: MeterDetails
        """

        self._meter_details = meter_details

    @property
    def meter_id(self):
        """Gets the meter_id of this UsageDetailProperties.

        The meter id.

        :return: The meter_id of this UsageDetailProperties.
        :rtype: str
        """
        return self._meter_id

    @meter_id.setter
    def meter_id(self, meter_id):
        """Sets the meter_id of this UsageDetailProperties.

        The meter id.

        :param meter_id: The meter_id of this UsageDetailProperties.
        :type meter_id: str
        """

        self._meter_id = meter_id

    @property
    def pretax_cost(self):
        """Gets the pretax_cost of this UsageDetailProperties.

        The amount of cost before tax.

        :return: The pretax_cost of this UsageDetailProperties.
        :rtype: float
        """
        return self._pretax_cost

    @pretax_cost.setter
    def pretax_cost(self, pretax_cost):
        """Sets the pretax_cost of this UsageDetailProperties.

        The amount of cost before tax.

        :param pretax_cost: The pretax_cost of this UsageDetailProperties.
        :type pretax_cost: float
        """

        self._pretax_cost = pretax_cost

    @property
    def usage_end(self):
        """Gets the usage_end of this UsageDetailProperties.

        The end of the date time range covered by the usage detail.

        :return: The usage_end of this UsageDetailProperties.
        :rtype: datetime
        """
        return self._usage_end

    @usage_end.setter
    def usage_end(self, usage_end):
        """Sets the usage_end of this UsageDetailProperties.

        The end of the date time range covered by the usage detail.

        :param usage_end: The usage_end of this UsageDetailProperties.
        :type usage_end: datetime
        """

        self._usage_end = usage_end

    @property
    def usage_quantity(self):
        """Gets the usage_quantity of this UsageDetailProperties.

        The quantity of usage.

        :return: The usage_quantity of this UsageDetailProperties.
        :rtype: float
        """
        return self._usage_quantity

    @usage_quantity.setter
    def usage_quantity(self, usage_quantity):
        """Sets the usage_quantity of this UsageDetailProperties.

        The quantity of usage.

        :param usage_quantity: The usage_quantity of this UsageDetailProperties.
        :type usage_quantity: float
        """

        self._usage_quantity = usage_quantity

    @property
    def usage_start(self):
        """Gets the usage_start of this UsageDetailProperties.

        The start of the date time range covered by the usage detail.

        :return: The usage_start of this UsageDetailProperties.
        :rtype: datetime
        """
        return self._usage_start

    @usage_start.setter
    def usage_start(self, usage_start):
        """Sets the usage_start of this UsageDetailProperties.

        The start of the date time range covered by the usage detail.

        :param usage_start: The usage_start of this UsageDetailProperties.
        :type usage_start: datetime
        """

        self._usage_start = usage_start
