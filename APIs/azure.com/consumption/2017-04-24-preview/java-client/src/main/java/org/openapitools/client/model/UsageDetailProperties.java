/*
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Web-Direct subscriptions. Other subscription types which were not purchased directly through the Azure web portal are not supported through this preview API.
 *
 * The version of the OpenAPI document: 2017-04-24-preview
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import org.openapitools.client.model.MeterDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The properties of the usage detail.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:38:20.578237-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsageDetailProperties {
  public static final String SERIALIZED_NAME_ADDITIONAL_PROPERTIES = "additionalProperties";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_PROPERTIES)
  private Map<String, String> additionalProperties = new HashMap<>();

  public static final String SERIALIZED_NAME_BILLABLE_QUANTITY = "billableQuantity";
  @SerializedName(SERIALIZED_NAME_BILLABLE_QUANTITY)
  private BigDecimal billableQuantity;

  public static final String SERIALIZED_NAME_BILLING_PERIOD_ID = "billingPeriodId";
  @SerializedName(SERIALIZED_NAME_BILLING_PERIOD_ID)
  private String billingPeriodId;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private String currency;

  public static final String SERIALIZED_NAME_INSTANCE_ID = "instanceId";
  @SerializedName(SERIALIZED_NAME_INSTANCE_ID)
  private String instanceId;

  public static final String SERIALIZED_NAME_INSTANCE_LOCATION = "instanceLocation";
  @SerializedName(SERIALIZED_NAME_INSTANCE_LOCATION)
  private String instanceLocation;

  public static final String SERIALIZED_NAME_INSTANCE_NAME = "instanceName";
  @SerializedName(SERIALIZED_NAME_INSTANCE_NAME)
  private String instanceName;

  public static final String SERIALIZED_NAME_INVOICE_ID = "invoiceId";
  @SerializedName(SERIALIZED_NAME_INVOICE_ID)
  private String invoiceId;

  public static final String SERIALIZED_NAME_IS_ESTIMATED = "isEstimated";
  @SerializedName(SERIALIZED_NAME_IS_ESTIMATED)
  private Boolean isEstimated;

  public static final String SERIALIZED_NAME_METER_DETAILS = "meterDetails";
  @SerializedName(SERIALIZED_NAME_METER_DETAILS)
  private MeterDetails meterDetails;

  public static final String SERIALIZED_NAME_METER_ID = "meterId";
  @SerializedName(SERIALIZED_NAME_METER_ID)
  private String meterId;

  public static final String SERIALIZED_NAME_PRETAX_COST = "pretaxCost";
  @SerializedName(SERIALIZED_NAME_PRETAX_COST)
  private BigDecimal pretaxCost;

  public static final String SERIALIZED_NAME_USAGE_END = "usageEnd";
  @SerializedName(SERIALIZED_NAME_USAGE_END)
  private OffsetDateTime usageEnd;

  public static final String SERIALIZED_NAME_USAGE_QUANTITY = "usageQuantity";
  @SerializedName(SERIALIZED_NAME_USAGE_QUANTITY)
  private BigDecimal usageQuantity;

  public static final String SERIALIZED_NAME_USAGE_START = "usageStart";
  @SerializedName(SERIALIZED_NAME_USAGE_START)
  private OffsetDateTime usageStart;

  public UsageDetailProperties() {
  }

  public UsageDetailProperties(
     Map<String, String> additionalProperties, 
     BigDecimal billableQuantity, 
     String billingPeriodId, 
     String currency, 
     String instanceId, 
     String instanceLocation, 
     String instanceName, 
     String invoiceId, 
     Boolean isEstimated, 
     String meterId, 
     BigDecimal pretaxCost, 
     OffsetDateTime usageEnd, 
     BigDecimal usageQuantity, 
     OffsetDateTime usageStart
  ) {
    this();
    this.additionalProperties = additionalProperties;
    this.billableQuantity = billableQuantity;
    this.billingPeriodId = billingPeriodId;
    this.currency = currency;
    this.instanceId = instanceId;
    this.instanceLocation = instanceLocation;
    this.instanceName = instanceName;
    this.invoiceId = invoiceId;
    this.isEstimated = isEstimated;
    this.meterId = meterId;
    this.pretaxCost = pretaxCost;
    this.usageEnd = usageEnd;
    this.usageQuantity = usageQuantity;
    this.usageStart = usageStart;
  }

  /**
   * The list of key/value pairs for the additional properties, in the format &#39;key&#39;:&#39;value&#39; where key &#x3D; the field name, and value &#x3D; the field value. By default this is not populated, unless it&#39;s specified in $expand.
   * @return additionalProperties
   */
  @javax.annotation.Nullable
  public Map<String, String> getAdditionalProperties() {
    return additionalProperties;
  }



  /**
   * The billable usage quantity.
   * @return billableQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getBillableQuantity() {
    return billableQuantity;
  }



  /**
   * The id of the billing period resource that the usage belongs to.
   * @return billingPeriodId
   */
  @javax.annotation.Nullable
  public String getBillingPeriodId() {
    return billingPeriodId;
  }



  /**
   * The ISO currency in which the meter is charged, for example, USD.
   * @return currency
   */
  @javax.annotation.Nullable
  public String getCurrency() {
    return currency;
  }



  /**
   * The uri of the resource instance that the usage is about.
   * @return instanceId
   */
  @javax.annotation.Nullable
  public String getInstanceId() {
    return instanceId;
  }



  /**
   * The location of the resource instance that the usage is about.
   * @return instanceLocation
   */
  @javax.annotation.Nullable
  public String getInstanceLocation() {
    return instanceLocation;
  }



  /**
   * The name of the resource instance that the usage is about.
   * @return instanceName
   */
  @javax.annotation.Nullable
  public String getInstanceName() {
    return instanceName;
  }



  /**
   * The id of the invoice resource that the usage belongs to.
   * @return invoiceId
   */
  @javax.annotation.Nullable
  public String getInvoiceId() {
    return invoiceId;
  }



  /**
   * The estimated usage is subject to change.
   * @return isEstimated
   */
  @javax.annotation.Nullable
  public Boolean getIsEstimated() {
    return isEstimated;
  }



  public UsageDetailProperties meterDetails(MeterDetails meterDetails) {
    this.meterDetails = meterDetails;
    return this;
  }

  /**
   * Get meterDetails
   * @return meterDetails
   */
  @javax.annotation.Nullable
  public MeterDetails getMeterDetails() {
    return meterDetails;
  }

  public void setMeterDetails(MeterDetails meterDetails) {
    this.meterDetails = meterDetails;
  }


  /**
   * The meter id.
   * @return meterId
   */
  @javax.annotation.Nullable
  public String getMeterId() {
    return meterId;
  }



  /**
   * The amount of cost before tax.
   * @return pretaxCost
   */
  @javax.annotation.Nullable
  public BigDecimal getPretaxCost() {
    return pretaxCost;
  }



  /**
   * The end of the date time range covered by the usage detail.
   * @return usageEnd
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageEnd() {
    return usageEnd;
  }



  /**
   * The quantity of usage.
   * @return usageQuantity
   */
  @javax.annotation.Nullable
  public BigDecimal getUsageQuantity() {
    return usageQuantity;
  }



  /**
   * The start of the date time range covered by the usage detail.
   * @return usageStart
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUsageStart() {
    return usageStart;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsageDetailProperties usageDetailProperties = (UsageDetailProperties) o;
    return Objects.equals(this.additionalProperties, usageDetailProperties.additionalProperties) &&
        Objects.equals(this.billableQuantity, usageDetailProperties.billableQuantity) &&
        Objects.equals(this.billingPeriodId, usageDetailProperties.billingPeriodId) &&
        Objects.equals(this.currency, usageDetailProperties.currency) &&
        Objects.equals(this.instanceId, usageDetailProperties.instanceId) &&
        Objects.equals(this.instanceLocation, usageDetailProperties.instanceLocation) &&
        Objects.equals(this.instanceName, usageDetailProperties.instanceName) &&
        Objects.equals(this.invoiceId, usageDetailProperties.invoiceId) &&
        Objects.equals(this.isEstimated, usageDetailProperties.isEstimated) &&
        Objects.equals(this.meterDetails, usageDetailProperties.meterDetails) &&
        Objects.equals(this.meterId, usageDetailProperties.meterId) &&
        Objects.equals(this.pretaxCost, usageDetailProperties.pretaxCost) &&
        Objects.equals(this.usageEnd, usageDetailProperties.usageEnd) &&
        Objects.equals(this.usageQuantity, usageDetailProperties.usageQuantity) &&
        Objects.equals(this.usageStart, usageDetailProperties.usageStart);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalProperties, billableQuantity, billingPeriodId, currency, instanceId, instanceLocation, instanceName, invoiceId, isEstimated, meterDetails, meterId, pretaxCost, usageEnd, usageQuantity, usageStart);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsageDetailProperties {\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("    billableQuantity: ").append(toIndentedString(billableQuantity)).append("\n");
    sb.append("    billingPeriodId: ").append(toIndentedString(billingPeriodId)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    instanceId: ").append(toIndentedString(instanceId)).append("\n");
    sb.append("    instanceLocation: ").append(toIndentedString(instanceLocation)).append("\n");
    sb.append("    instanceName: ").append(toIndentedString(instanceName)).append("\n");
    sb.append("    invoiceId: ").append(toIndentedString(invoiceId)).append("\n");
    sb.append("    isEstimated: ").append(toIndentedString(isEstimated)).append("\n");
    sb.append("    meterDetails: ").append(toIndentedString(meterDetails)).append("\n");
    sb.append("    meterId: ").append(toIndentedString(meterId)).append("\n");
    sb.append("    pretaxCost: ").append(toIndentedString(pretaxCost)).append("\n");
    sb.append("    usageEnd: ").append(toIndentedString(usageEnd)).append("\n");
    sb.append("    usageQuantity: ").append(toIndentedString(usageQuantity)).append("\n");
    sb.append("    usageStart: ").append(toIndentedString(usageStart)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additionalProperties");
    openapiFields.add("billableQuantity");
    openapiFields.add("billingPeriodId");
    openapiFields.add("currency");
    openapiFields.add("instanceId");
    openapiFields.add("instanceLocation");
    openapiFields.add("instanceName");
    openapiFields.add("invoiceId");
    openapiFields.add("isEstimated");
    openapiFields.add("meterDetails");
    openapiFields.add("meterId");
    openapiFields.add("pretaxCost");
    openapiFields.add("usageEnd");
    openapiFields.add("usageQuantity");
    openapiFields.add("usageStart");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsageDetailProperties
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsageDetailProperties.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsageDetailProperties is not found in the empty JSON string", UsageDetailProperties.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsageDetailProperties.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsageDetailProperties` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billingPeriodId") != null && !jsonObj.get("billingPeriodId").isJsonNull()) && !jsonObj.get("billingPeriodId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billingPeriodId").toString()));
      }
      if ((jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull()) && !jsonObj.get("currency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("instanceId") != null && !jsonObj.get("instanceId").isJsonNull()) && !jsonObj.get("instanceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceId").toString()));
      }
      if ((jsonObj.get("instanceLocation") != null && !jsonObj.get("instanceLocation").isJsonNull()) && !jsonObj.get("instanceLocation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceLocation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceLocation").toString()));
      }
      if ((jsonObj.get("instanceName") != null && !jsonObj.get("instanceName").isJsonNull()) && !jsonObj.get("instanceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instanceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instanceName").toString()));
      }
      if ((jsonObj.get("invoiceId") != null && !jsonObj.get("invoiceId").isJsonNull()) && !jsonObj.get("invoiceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoiceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoiceId").toString()));
      }
      // validate the optional field `meterDetails`
      if (jsonObj.get("meterDetails") != null && !jsonObj.get("meterDetails").isJsonNull()) {
        MeterDetails.validateJsonElement(jsonObj.get("meterDetails"));
      }
      if ((jsonObj.get("meterId") != null && !jsonObj.get("meterId").isJsonNull()) && !jsonObj.get("meterId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `meterId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("meterId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsageDetailProperties.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsageDetailProperties' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsageDetailProperties> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsageDetailProperties.class));

       return (TypeAdapter<T>) new TypeAdapter<UsageDetailProperties>() {
           @Override
           public void write(JsonWriter out, UsageDetailProperties value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsageDetailProperties read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsageDetailProperties given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsageDetailProperties
   * @throws IOException if the JSON string is invalid with respect to UsageDetailProperties
   */
  public static UsageDetailProperties fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsageDetailProperties.class);
  }

  /**
   * Convert an instance of UsageDetailProperties to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

