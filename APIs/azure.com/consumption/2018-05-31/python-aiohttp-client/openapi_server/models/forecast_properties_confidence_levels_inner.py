# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ForecastPropertiesConfidenceLevelsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bound: str=None, percentage: float=None, value: float=None):
        """ForecastPropertiesConfidenceLevelsInner - a model defined in OpenAPI

        :param bound: The bound of this ForecastPropertiesConfidenceLevelsInner.
        :param percentage: The percentage of this ForecastPropertiesConfidenceLevelsInner.
        :param value: The value of this ForecastPropertiesConfidenceLevelsInner.
        """
        self.openapi_types = {
            'bound': str,
            'percentage': float,
            'value': float
        }

        self.attribute_map = {
            'bound': 'bound',
            'percentage': 'percentage',
            'value': 'value'
        }

        self._bound = bound
        self._percentage = percentage
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ForecastPropertiesConfidenceLevelsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ForecastProperties_confidenceLevels_inner of this ForecastPropertiesConfidenceLevelsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bound(self):
        """Gets the bound of this ForecastPropertiesConfidenceLevelsInner.

        The boundary of the percentage, values could be 'Upper' or 'Lower'

        :return: The bound of this ForecastPropertiesConfidenceLevelsInner.
        :rtype: str
        """
        return self._bound

    @bound.setter
    def bound(self, bound):
        """Sets the bound of this ForecastPropertiesConfidenceLevelsInner.

        The boundary of the percentage, values could be 'Upper' or 'Lower'

        :param bound: The bound of this ForecastPropertiesConfidenceLevelsInner.
        :type bound: str
        """
        allowed_values = ["Upper", "Lower"]  # noqa: E501
        if bound not in allowed_values:
            raise ValueError(
                "Invalid value for `bound` ({0}), must be one of {1}"
                .format(bound, allowed_values)
            )

        self._bound = bound

    @property
    def percentage(self):
        """Gets the percentage of this ForecastPropertiesConfidenceLevelsInner.

        The percentage level of the confidence

        :return: The percentage of this ForecastPropertiesConfidenceLevelsInner.
        :rtype: float
        """
        return self._percentage

    @percentage.setter
    def percentage(self, percentage):
        """Sets the percentage of this ForecastPropertiesConfidenceLevelsInner.

        The percentage level of the confidence

        :param percentage: The percentage of this ForecastPropertiesConfidenceLevelsInner.
        :type percentage: float
        """

        self._percentage = percentage

    @property
    def value(self):
        """Gets the value of this ForecastPropertiesConfidenceLevelsInner.

        The amount of forecast within the percentage level

        :return: The value of this ForecastPropertiesConfidenceLevelsInner.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ForecastPropertiesConfidenceLevelsInner.

        The amount of forecast within the percentage level

        :param value: The value of this ForecastPropertiesConfidenceLevelsInner.
        :type value: float
        """

        self._value = value
