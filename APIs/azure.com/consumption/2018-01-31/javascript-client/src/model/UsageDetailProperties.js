/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-01-31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import MeterDetails from './MeterDetails';

/**
 * The UsageDetailProperties model module.
 * @module model/UsageDetailProperties
 * @version 2018-01-31
 */
class UsageDetailProperties {
    /**
     * Constructs a new <code>UsageDetailProperties</code>.
     * The properties of the usage detail.
     * @alias module:model/UsageDetailProperties
     */
    constructor() { 
        
        UsageDetailProperties.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UsageDetailProperties</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsageDetailProperties} obj Optional instance to populate.
     * @return {module:model/UsageDetailProperties} The populated <code>UsageDetailProperties</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsageDetailProperties();

            if (data.hasOwnProperty('accountName')) {
                obj['accountName'] = ApiClient.convertToType(data['accountName'], 'String');
            }
            if (data.hasOwnProperty('additionalProperties')) {
                obj['additionalProperties'] = ApiClient.convertToType(data['additionalProperties'], 'String');
            }
            if (data.hasOwnProperty('billableQuantity')) {
                obj['billableQuantity'] = ApiClient.convertToType(data['billableQuantity'], 'Number');
            }
            if (data.hasOwnProperty('billingPeriodId')) {
                obj['billingPeriodId'] = ApiClient.convertToType(data['billingPeriodId'], 'String');
            }
            if (data.hasOwnProperty('consumedService')) {
                obj['consumedService'] = ApiClient.convertToType(data['consumedService'], 'String');
            }
            if (data.hasOwnProperty('costCenter')) {
                obj['costCenter'] = ApiClient.convertToType(data['costCenter'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], 'String');
            }
            if (data.hasOwnProperty('departmentName')) {
                obj['departmentName'] = ApiClient.convertToType(data['departmentName'], 'String');
            }
            if (data.hasOwnProperty('instanceId')) {
                obj['instanceId'] = ApiClient.convertToType(data['instanceId'], 'String');
            }
            if (data.hasOwnProperty('instanceLocation')) {
                obj['instanceLocation'] = ApiClient.convertToType(data['instanceLocation'], 'String');
            }
            if (data.hasOwnProperty('instanceName')) {
                obj['instanceName'] = ApiClient.convertToType(data['instanceName'], 'String');
            }
            if (data.hasOwnProperty('invoiceId')) {
                obj['invoiceId'] = ApiClient.convertToType(data['invoiceId'], 'String');
            }
            if (data.hasOwnProperty('isEstimated')) {
                obj['isEstimated'] = ApiClient.convertToType(data['isEstimated'], 'Boolean');
            }
            if (data.hasOwnProperty('meterDetails')) {
                obj['meterDetails'] = MeterDetails.constructFromObject(data['meterDetails']);
            }
            if (data.hasOwnProperty('meterId')) {
                obj['meterId'] = ApiClient.convertToType(data['meterId'], 'String');
            }
            if (data.hasOwnProperty('pretaxCost')) {
                obj['pretaxCost'] = ApiClient.convertToType(data['pretaxCost'], 'Number');
            }
            if (data.hasOwnProperty('product')) {
                obj['product'] = ApiClient.convertToType(data['product'], 'String');
            }
            if (data.hasOwnProperty('subscriptionGuid')) {
                obj['subscriptionGuid'] = ApiClient.convertToType(data['subscriptionGuid'], 'String');
            }
            if (data.hasOwnProperty('subscriptionName')) {
                obj['subscriptionName'] = ApiClient.convertToType(data['subscriptionName'], 'String');
            }
            if (data.hasOwnProperty('usageEnd')) {
                obj['usageEnd'] = ApiClient.convertToType(data['usageEnd'], 'Date');
            }
            if (data.hasOwnProperty('usageQuantity')) {
                obj['usageQuantity'] = ApiClient.convertToType(data['usageQuantity'], 'Number');
            }
            if (data.hasOwnProperty('usageStart')) {
                obj['usageStart'] = ApiClient.convertToType(data['usageStart'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsageDetailProperties</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsageDetailProperties</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['accountName'] && !(typeof data['accountName'] === 'string' || data['accountName'] instanceof String)) {
            throw new Error("Expected the field `accountName` to be a primitive type in the JSON string but got " + data['accountName']);
        }
        // ensure the json data is a string
        if (data['additionalProperties'] && !(typeof data['additionalProperties'] === 'string' || data['additionalProperties'] instanceof String)) {
            throw new Error("Expected the field `additionalProperties` to be a primitive type in the JSON string but got " + data['additionalProperties']);
        }
        // ensure the json data is a string
        if (data['billingPeriodId'] && !(typeof data['billingPeriodId'] === 'string' || data['billingPeriodId'] instanceof String)) {
            throw new Error("Expected the field `billingPeriodId` to be a primitive type in the JSON string but got " + data['billingPeriodId']);
        }
        // ensure the json data is a string
        if (data['consumedService'] && !(typeof data['consumedService'] === 'string' || data['consumedService'] instanceof String)) {
            throw new Error("Expected the field `consumedService` to be a primitive type in the JSON string but got " + data['consumedService']);
        }
        // ensure the json data is a string
        if (data['costCenter'] && !(typeof data['costCenter'] === 'string' || data['costCenter'] instanceof String)) {
            throw new Error("Expected the field `costCenter` to be a primitive type in the JSON string but got " + data['costCenter']);
        }
        // ensure the json data is a string
        if (data['currency'] && !(typeof data['currency'] === 'string' || data['currency'] instanceof String)) {
            throw new Error("Expected the field `currency` to be a primitive type in the JSON string but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['departmentName'] && !(typeof data['departmentName'] === 'string' || data['departmentName'] instanceof String)) {
            throw new Error("Expected the field `departmentName` to be a primitive type in the JSON string but got " + data['departmentName']);
        }
        // ensure the json data is a string
        if (data['instanceId'] && !(typeof data['instanceId'] === 'string' || data['instanceId'] instanceof String)) {
            throw new Error("Expected the field `instanceId` to be a primitive type in the JSON string but got " + data['instanceId']);
        }
        // ensure the json data is a string
        if (data['instanceLocation'] && !(typeof data['instanceLocation'] === 'string' || data['instanceLocation'] instanceof String)) {
            throw new Error("Expected the field `instanceLocation` to be a primitive type in the JSON string but got " + data['instanceLocation']);
        }
        // ensure the json data is a string
        if (data['instanceName'] && !(typeof data['instanceName'] === 'string' || data['instanceName'] instanceof String)) {
            throw new Error("Expected the field `instanceName` to be a primitive type in the JSON string but got " + data['instanceName']);
        }
        // ensure the json data is a string
        if (data['invoiceId'] && !(typeof data['invoiceId'] === 'string' || data['invoiceId'] instanceof String)) {
            throw new Error("Expected the field `invoiceId` to be a primitive type in the JSON string but got " + data['invoiceId']);
        }
        // validate the optional field `meterDetails`
        if (data['meterDetails']) { // data not null
          MeterDetails.validateJSON(data['meterDetails']);
        }
        // ensure the json data is a string
        if (data['meterId'] && !(typeof data['meterId'] === 'string' || data['meterId'] instanceof String)) {
            throw new Error("Expected the field `meterId` to be a primitive type in the JSON string but got " + data['meterId']);
        }
        // ensure the json data is a string
        if (data['product'] && !(typeof data['product'] === 'string' || data['product'] instanceof String)) {
            throw new Error("Expected the field `product` to be a primitive type in the JSON string but got " + data['product']);
        }
        // ensure the json data is a string
        if (data['subscriptionGuid'] && !(typeof data['subscriptionGuid'] === 'string' || data['subscriptionGuid'] instanceof String)) {
            throw new Error("Expected the field `subscriptionGuid` to be a primitive type in the JSON string but got " + data['subscriptionGuid']);
        }
        // ensure the json data is a string
        if (data['subscriptionName'] && !(typeof data['subscriptionName'] === 'string' || data['subscriptionName'] instanceof String)) {
            throw new Error("Expected the field `subscriptionName` to be a primitive type in the JSON string but got " + data['subscriptionName']);
        }

        return true;
    }


}



/**
 * Account name.
 * @member {String} accountName
 */
UsageDetailProperties.prototype['accountName'] = undefined;

/**
 * Additional details of this usage item. By default this is not populated, unless it's specified in $expand.
 * @member {String} additionalProperties
 */
UsageDetailProperties.prototype['additionalProperties'] = undefined;

/**
 * The billable usage quantity.
 * @member {Number} billableQuantity
 */
UsageDetailProperties.prototype['billableQuantity'] = undefined;

/**
 * The id of the billing period resource that the usage belongs to.
 * @member {String} billingPeriodId
 */
UsageDetailProperties.prototype['billingPeriodId'] = undefined;

/**
 * Consumed service name.
 * @member {String} consumedService
 */
UsageDetailProperties.prototype['consumedService'] = undefined;

/**
 * The cost center of this department if it is a department and a costcenter exists
 * @member {String} costCenter
 */
UsageDetailProperties.prototype['costCenter'] = undefined;

/**
 * The ISO currency in which the meter is charged, for example, USD.
 * @member {String} currency
 */
UsageDetailProperties.prototype['currency'] = undefined;

/**
 * Department name.
 * @member {String} departmentName
 */
UsageDetailProperties.prototype['departmentName'] = undefined;

/**
 * The uri of the resource instance that the usage is about.
 * @member {String} instanceId
 */
UsageDetailProperties.prototype['instanceId'] = undefined;

/**
 * The location of the resource instance that the usage is about.
 * @member {String} instanceLocation
 */
UsageDetailProperties.prototype['instanceLocation'] = undefined;

/**
 * The name of the resource instance that the usage is about.
 * @member {String} instanceName
 */
UsageDetailProperties.prototype['instanceName'] = undefined;

/**
 * The id of the invoice resource that the usage belongs to.
 * @member {String} invoiceId
 */
UsageDetailProperties.prototype['invoiceId'] = undefined;

/**
 * The estimated usage is subject to change.
 * @member {Boolean} isEstimated
 */
UsageDetailProperties.prototype['isEstimated'] = undefined;

/**
 * @member {module:model/MeterDetails} meterDetails
 */
UsageDetailProperties.prototype['meterDetails'] = undefined;

/**
 * The meter id.
 * @member {String} meterId
 */
UsageDetailProperties.prototype['meterId'] = undefined;

/**
 * The amount of cost before tax.
 * @member {Number} pretaxCost
 */
UsageDetailProperties.prototype['pretaxCost'] = undefined;

/**
 * Product name.
 * @member {String} product
 */
UsageDetailProperties.prototype['product'] = undefined;

/**
 * Subscription guid.
 * @member {String} subscriptionGuid
 */
UsageDetailProperties.prototype['subscriptionGuid'] = undefined;

/**
 * Subscription name.
 * @member {String} subscriptionName
 */
UsageDetailProperties.prototype['subscriptionName'] = undefined;

/**
 * The end of the date time range covered by the usage detail.
 * @member {Date} usageEnd
 */
UsageDetailProperties.prototype['usageEnd'] = undefined;

/**
 * The quantity of usage.
 * @member {Number} usageQuantity
 */
UsageDetailProperties.prototype['usageQuantity'] = undefined;

/**
 * The start of the date time range covered by the usage detail.
 * @member {Date} usageStart
 */
UsageDetailProperties.prototype['usageStart'] = undefined;






export default UsageDetailProperties;

