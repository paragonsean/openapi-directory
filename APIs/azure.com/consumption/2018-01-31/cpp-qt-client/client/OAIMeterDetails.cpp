/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2018-01-31
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeterDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeterDetails::OAIMeterDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeterDetails::OAIMeterDetails() {
    this->initializeModel();
}

OAIMeterDetails::~OAIMeterDetails() {}

void OAIMeterDetails::initializeModel() {

    m_meter_category_isSet = false;
    m_meter_category_isValid = false;

    m_meter_location_isSet = false;
    m_meter_location_isValid = false;

    m_meter_name_isSet = false;
    m_meter_name_isValid = false;

    m_meter_sub_category_isSet = false;
    m_meter_sub_category_isValid = false;

    m_pretax_standard_rate_isSet = false;
    m_pretax_standard_rate_isValid = false;

    m_total_included_quantity_isSet = false;
    m_total_included_quantity_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIMeterDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeterDetails::fromJsonObject(QJsonObject json) {

    m_meter_category_isValid = ::OpenAPI::fromJsonValue(m_meter_category, json[QString("meterCategory")]);
    m_meter_category_isSet = !json[QString("meterCategory")].isNull() && m_meter_category_isValid;

    m_meter_location_isValid = ::OpenAPI::fromJsonValue(m_meter_location, json[QString("meterLocation")]);
    m_meter_location_isSet = !json[QString("meterLocation")].isNull() && m_meter_location_isValid;

    m_meter_name_isValid = ::OpenAPI::fromJsonValue(m_meter_name, json[QString("meterName")]);
    m_meter_name_isSet = !json[QString("meterName")].isNull() && m_meter_name_isValid;

    m_meter_sub_category_isValid = ::OpenAPI::fromJsonValue(m_meter_sub_category, json[QString("meterSubCategory")]);
    m_meter_sub_category_isSet = !json[QString("meterSubCategory")].isNull() && m_meter_sub_category_isValid;

    m_pretax_standard_rate_isValid = ::OpenAPI::fromJsonValue(m_pretax_standard_rate, json[QString("pretaxStandardRate")]);
    m_pretax_standard_rate_isSet = !json[QString("pretaxStandardRate")].isNull() && m_pretax_standard_rate_isValid;

    m_total_included_quantity_isValid = ::OpenAPI::fromJsonValue(m_total_included_quantity, json[QString("totalIncludedQuantity")]);
    m_total_included_quantity_isSet = !json[QString("totalIncludedQuantity")].isNull() && m_total_included_quantity_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIMeterDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeterDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_meter_category_isSet) {
        obj.insert(QString("meterCategory"), ::OpenAPI::toJsonValue(m_meter_category));
    }
    if (m_meter_location_isSet) {
        obj.insert(QString("meterLocation"), ::OpenAPI::toJsonValue(m_meter_location));
    }
    if (m_meter_name_isSet) {
        obj.insert(QString("meterName"), ::OpenAPI::toJsonValue(m_meter_name));
    }
    if (m_meter_sub_category_isSet) {
        obj.insert(QString("meterSubCategory"), ::OpenAPI::toJsonValue(m_meter_sub_category));
    }
    if (m_pretax_standard_rate_isSet) {
        obj.insert(QString("pretaxStandardRate"), ::OpenAPI::toJsonValue(m_pretax_standard_rate));
    }
    if (m_total_included_quantity_isSet) {
        obj.insert(QString("totalIncludedQuantity"), ::OpenAPI::toJsonValue(m_total_included_quantity));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

QString OAIMeterDetails::getMeterCategory() const {
    return m_meter_category;
}
void OAIMeterDetails::setMeterCategory(const QString &meter_category) {
    m_meter_category = meter_category;
    m_meter_category_isSet = true;
}

bool OAIMeterDetails::is_meter_category_Set() const{
    return m_meter_category_isSet;
}

bool OAIMeterDetails::is_meter_category_Valid() const{
    return m_meter_category_isValid;
}

QString OAIMeterDetails::getMeterLocation() const {
    return m_meter_location;
}
void OAIMeterDetails::setMeterLocation(const QString &meter_location) {
    m_meter_location = meter_location;
    m_meter_location_isSet = true;
}

bool OAIMeterDetails::is_meter_location_Set() const{
    return m_meter_location_isSet;
}

bool OAIMeterDetails::is_meter_location_Valid() const{
    return m_meter_location_isValid;
}

QString OAIMeterDetails::getMeterName() const {
    return m_meter_name;
}
void OAIMeterDetails::setMeterName(const QString &meter_name) {
    m_meter_name = meter_name;
    m_meter_name_isSet = true;
}

bool OAIMeterDetails::is_meter_name_Set() const{
    return m_meter_name_isSet;
}

bool OAIMeterDetails::is_meter_name_Valid() const{
    return m_meter_name_isValid;
}

QString OAIMeterDetails::getMeterSubCategory() const {
    return m_meter_sub_category;
}
void OAIMeterDetails::setMeterSubCategory(const QString &meter_sub_category) {
    m_meter_sub_category = meter_sub_category;
    m_meter_sub_category_isSet = true;
}

bool OAIMeterDetails::is_meter_sub_category_Set() const{
    return m_meter_sub_category_isSet;
}

bool OAIMeterDetails::is_meter_sub_category_Valid() const{
    return m_meter_sub_category_isValid;
}

double OAIMeterDetails::getPretaxStandardRate() const {
    return m_pretax_standard_rate;
}
void OAIMeterDetails::setPretaxStandardRate(const double &pretax_standard_rate) {
    m_pretax_standard_rate = pretax_standard_rate;
    m_pretax_standard_rate_isSet = true;
}

bool OAIMeterDetails::is_pretax_standard_rate_Set() const{
    return m_pretax_standard_rate_isSet;
}

bool OAIMeterDetails::is_pretax_standard_rate_Valid() const{
    return m_pretax_standard_rate_isValid;
}

double OAIMeterDetails::getTotalIncludedQuantity() const {
    return m_total_included_quantity;
}
void OAIMeterDetails::setTotalIncludedQuantity(const double &total_included_quantity) {
    m_total_included_quantity = total_included_quantity;
    m_total_included_quantity_isSet = true;
}

bool OAIMeterDetails::is_total_included_quantity_Set() const{
    return m_total_included_quantity_isSet;
}

bool OAIMeterDetails::is_total_included_quantity_Valid() const{
    return m_total_included_quantity_isValid;
}

QString OAIMeterDetails::getUnit() const {
    return m_unit;
}
void OAIMeterDetails::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIMeterDetails::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIMeterDetails::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIMeterDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_meter_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pretax_standard_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_included_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeterDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
