/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIModernUsageDetailProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIModernUsageDetailProperties::OAIModernUsageDetailProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIModernUsageDetailProperties::OAIModernUsageDetailProperties() {
    this->initializeModel();
}

OAIModernUsageDetailProperties::~OAIModernUsageDetailProperties() {}

void OAIModernUsageDetailProperties::initializeModel() {

    m_additional_info_isSet = false;
    m_additional_info_isValid = false;

    m_billing_account_id_isSet = false;
    m_billing_account_id_isValid = false;

    m_billing_account_name_isSet = false;
    m_billing_account_name_isValid = false;

    m_billing_currency_code_isSet = false;
    m_billing_currency_code_isValid = false;

    m_billing_period_end_date_isSet = false;
    m_billing_period_end_date_isValid = false;

    m_billing_period_start_date_isSet = false;
    m_billing_period_start_date_isValid = false;

    m_billing_profile_id_isSet = false;
    m_billing_profile_id_isValid = false;

    m_billing_profile_name_isSet = false;
    m_billing_profile_name_isValid = false;

    m_charge_type_isSet = false;
    m_charge_type_isValid = false;

    m_consumed_service_isSet = false;
    m_consumed_service_isValid = false;

    m_cost_center_isSet = false;
    m_cost_center_isValid = false;

    m_cost_in_billing_currency_isSet = false;
    m_cost_in_billing_currency_isValid = false;

    m_cost_in_pricing_currency_isSet = false;
    m_cost_in_pricing_currency_isValid = false;

    m_cost_in_usd_isSet = false;
    m_cost_in_usd_isValid = false;

    m_customer_name_isSet = false;
    m_customer_name_isValid = false;

    m_customer_tenant_id_isSet = false;
    m_customer_tenant_id_isValid = false;

    m_date_isSet = false;
    m_date_isValid = false;

    m_exchange_rate_isSet = false;
    m_exchange_rate_isValid = false;

    m_exchange_rate_date_isSet = false;
    m_exchange_rate_date_isValid = false;

    m_exchange_rate_pricing_to_billing_isSet = false;
    m_exchange_rate_pricing_to_billing_isValid = false;

    m_frequency_isSet = false;
    m_frequency_isValid = false;

    m_instance_name_isSet = false;
    m_instance_name_isValid = false;

    m_invoice_id_isSet = false;
    m_invoice_id_isValid = false;

    m_invoice_section_id_isSet = false;
    m_invoice_section_id_isValid = false;

    m_invoice_section_name_isSet = false;
    m_invoice_section_name_isValid = false;

    m_is_azure_credit_eligible_isSet = false;
    m_is_azure_credit_eligible_isValid = false;

    m_market_price_isSet = false;
    m_market_price_isValid = false;

    m_meter_category_isSet = false;
    m_meter_category_isValid = false;

    m_meter_id_isSet = false;
    m_meter_id_isValid = false;

    m_meter_name_isSet = false;
    m_meter_name_isValid = false;

    m_meter_region_isSet = false;
    m_meter_region_isValid = false;

    m_meter_sub_category_isSet = false;
    m_meter_sub_category_isValid = false;

    m_partner_earned_credit_applied_isSet = false;
    m_partner_earned_credit_applied_isValid = false;

    m_partner_earned_credit_rate_isSet = false;
    m_partner_earned_credit_rate_isValid = false;

    m_partner_name_isSet = false;
    m_partner_name_isValid = false;

    m_partner_tenant_id_isSet = false;
    m_partner_tenant_id_isValid = false;

    m_payg_cost_in_billing_currency_isSet = false;
    m_payg_cost_in_billing_currency_isValid = false;

    m_payg_cost_in_usd_isSet = false;
    m_payg_cost_in_usd_isValid = false;

    m_previous_invoice_id_isSet = false;
    m_previous_invoice_id_isValid = false;

    m_pricing_currency_code_isSet = false;
    m_pricing_currency_code_isValid = false;

    m_product_isSet = false;
    m_product_isValid = false;

    m_product_identifier_isSet = false;
    m_product_identifier_isValid = false;

    m_product_order_id_isSet = false;
    m_product_order_id_isValid = false;

    m_product_order_name_isSet = false;
    m_product_order_name_isValid = false;

    m_publisher_id_isSet = false;
    m_publisher_id_isValid = false;

    m_publisher_name_isSet = false;
    m_publisher_name_isValid = false;

    m_publisher_type_isSet = false;
    m_publisher_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_reseller_mpn_id_isSet = false;
    m_reseller_mpn_id_isValid = false;

    m_reseller_name_isSet = false;
    m_reseller_name_isValid = false;

    m_reservation_id_isSet = false;
    m_reservation_id_isValid = false;

    m_reservation_name_isSet = false;
    m_reservation_name_isValid = false;

    m_resource_group_isSet = false;
    m_resource_group_isValid = false;

    m_resource_location_isSet = false;
    m_resource_location_isValid = false;

    m_resource_location_normalized_isSet = false;
    m_resource_location_normalized_isValid = false;

    m_service_family_isSet = false;
    m_service_family_isValid = false;

    m_service_info1_isSet = false;
    m_service_info1_isValid = false;

    m_service_info2_isSet = false;
    m_service_info2_isValid = false;

    m_service_period_end_date_isSet = false;
    m_service_period_end_date_isValid = false;

    m_service_period_start_date_isSet = false;
    m_service_period_start_date_isValid = false;

    m_subscription_guid_isSet = false;
    m_subscription_guid_isValid = false;

    m_subscription_name_isSet = false;
    m_subscription_name_isValid = false;

    m_term_isSet = false;
    m_term_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAIModernUsageDetailProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIModernUsageDetailProperties::fromJsonObject(QJsonObject json) {

    m_additional_info_isValid = ::OpenAPI::fromJsonValue(m_additional_info, json[QString("additionalInfo")]);
    m_additional_info_isSet = !json[QString("additionalInfo")].isNull() && m_additional_info_isValid;

    m_billing_account_id_isValid = ::OpenAPI::fromJsonValue(m_billing_account_id, json[QString("billingAccountId")]);
    m_billing_account_id_isSet = !json[QString("billingAccountId")].isNull() && m_billing_account_id_isValid;

    m_billing_account_name_isValid = ::OpenAPI::fromJsonValue(m_billing_account_name, json[QString("billingAccountName")]);
    m_billing_account_name_isSet = !json[QString("billingAccountName")].isNull() && m_billing_account_name_isValid;

    m_billing_currency_code_isValid = ::OpenAPI::fromJsonValue(m_billing_currency_code, json[QString("billingCurrencyCode")]);
    m_billing_currency_code_isSet = !json[QString("billingCurrencyCode")].isNull() && m_billing_currency_code_isValid;

    m_billing_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_billing_period_end_date, json[QString("billingPeriodEndDate")]);
    m_billing_period_end_date_isSet = !json[QString("billingPeriodEndDate")].isNull() && m_billing_period_end_date_isValid;

    m_billing_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_billing_period_start_date, json[QString("billingPeriodStartDate")]);
    m_billing_period_start_date_isSet = !json[QString("billingPeriodStartDate")].isNull() && m_billing_period_start_date_isValid;

    m_billing_profile_id_isValid = ::OpenAPI::fromJsonValue(m_billing_profile_id, json[QString("billingProfileId")]);
    m_billing_profile_id_isSet = !json[QString("billingProfileId")].isNull() && m_billing_profile_id_isValid;

    m_billing_profile_name_isValid = ::OpenAPI::fromJsonValue(m_billing_profile_name, json[QString("billingProfileName")]);
    m_billing_profile_name_isSet = !json[QString("billingProfileName")].isNull() && m_billing_profile_name_isValid;

    m_charge_type_isValid = ::OpenAPI::fromJsonValue(m_charge_type, json[QString("chargeType")]);
    m_charge_type_isSet = !json[QString("chargeType")].isNull() && m_charge_type_isValid;

    m_consumed_service_isValid = ::OpenAPI::fromJsonValue(m_consumed_service, json[QString("consumedService")]);
    m_consumed_service_isSet = !json[QString("consumedService")].isNull() && m_consumed_service_isValid;

    m_cost_center_isValid = ::OpenAPI::fromJsonValue(m_cost_center, json[QString("costCenter")]);
    m_cost_center_isSet = !json[QString("costCenter")].isNull() && m_cost_center_isValid;

    m_cost_in_billing_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_in_billing_currency, json[QString("costInBillingCurrency")]);
    m_cost_in_billing_currency_isSet = !json[QString("costInBillingCurrency")].isNull() && m_cost_in_billing_currency_isValid;

    m_cost_in_pricing_currency_isValid = ::OpenAPI::fromJsonValue(m_cost_in_pricing_currency, json[QString("costInPricingCurrency")]);
    m_cost_in_pricing_currency_isSet = !json[QString("costInPricingCurrency")].isNull() && m_cost_in_pricing_currency_isValid;

    m_cost_in_usd_isValid = ::OpenAPI::fromJsonValue(m_cost_in_usd, json[QString("costInUSD")]);
    m_cost_in_usd_isSet = !json[QString("costInUSD")].isNull() && m_cost_in_usd_isValid;

    m_customer_name_isValid = ::OpenAPI::fromJsonValue(m_customer_name, json[QString("customerName")]);
    m_customer_name_isSet = !json[QString("customerName")].isNull() && m_customer_name_isValid;

    m_customer_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_customer_tenant_id, json[QString("customerTenantId")]);
    m_customer_tenant_id_isSet = !json[QString("customerTenantId")].isNull() && m_customer_tenant_id_isValid;

    m_date_isValid = ::OpenAPI::fromJsonValue(m_date, json[QString("date")]);
    m_date_isSet = !json[QString("date")].isNull() && m_date_isValid;

    m_exchange_rate_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate, json[QString("exchangeRate")]);
    m_exchange_rate_isSet = !json[QString("exchangeRate")].isNull() && m_exchange_rate_isValid;

    m_exchange_rate_date_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate_date, json[QString("exchangeRateDate")]);
    m_exchange_rate_date_isSet = !json[QString("exchangeRateDate")].isNull() && m_exchange_rate_date_isValid;

    m_exchange_rate_pricing_to_billing_isValid = ::OpenAPI::fromJsonValue(m_exchange_rate_pricing_to_billing, json[QString("exchangeRatePricingToBilling")]);
    m_exchange_rate_pricing_to_billing_isSet = !json[QString("exchangeRatePricingToBilling")].isNull() && m_exchange_rate_pricing_to_billing_isValid;

    m_frequency_isValid = ::OpenAPI::fromJsonValue(m_frequency, json[QString("frequency")]);
    m_frequency_isSet = !json[QString("frequency")].isNull() && m_frequency_isValid;

    m_instance_name_isValid = ::OpenAPI::fromJsonValue(m_instance_name, json[QString("instanceName")]);
    m_instance_name_isSet = !json[QString("instanceName")].isNull() && m_instance_name_isValid;

    m_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_id, json[QString("invoiceId")]);
    m_invoice_id_isSet = !json[QString("invoiceId")].isNull() && m_invoice_id_isValid;

    m_invoice_section_id_isValid = ::OpenAPI::fromJsonValue(m_invoice_section_id, json[QString("invoiceSectionId")]);
    m_invoice_section_id_isSet = !json[QString("invoiceSectionId")].isNull() && m_invoice_section_id_isValid;

    m_invoice_section_name_isValid = ::OpenAPI::fromJsonValue(m_invoice_section_name, json[QString("invoiceSectionName")]);
    m_invoice_section_name_isSet = !json[QString("invoiceSectionName")].isNull() && m_invoice_section_name_isValid;

    m_is_azure_credit_eligible_isValid = ::OpenAPI::fromJsonValue(m_is_azure_credit_eligible, json[QString("isAzureCreditEligible")]);
    m_is_azure_credit_eligible_isSet = !json[QString("isAzureCreditEligible")].isNull() && m_is_azure_credit_eligible_isValid;

    m_market_price_isValid = ::OpenAPI::fromJsonValue(m_market_price, json[QString("marketPrice")]);
    m_market_price_isSet = !json[QString("marketPrice")].isNull() && m_market_price_isValid;

    m_meter_category_isValid = ::OpenAPI::fromJsonValue(m_meter_category, json[QString("meterCategory")]);
    m_meter_category_isSet = !json[QString("meterCategory")].isNull() && m_meter_category_isValid;

    m_meter_id_isValid = ::OpenAPI::fromJsonValue(m_meter_id, json[QString("meterId")]);
    m_meter_id_isSet = !json[QString("meterId")].isNull() && m_meter_id_isValid;

    m_meter_name_isValid = ::OpenAPI::fromJsonValue(m_meter_name, json[QString("meterName")]);
    m_meter_name_isSet = !json[QString("meterName")].isNull() && m_meter_name_isValid;

    m_meter_region_isValid = ::OpenAPI::fromJsonValue(m_meter_region, json[QString("meterRegion")]);
    m_meter_region_isSet = !json[QString("meterRegion")].isNull() && m_meter_region_isValid;

    m_meter_sub_category_isValid = ::OpenAPI::fromJsonValue(m_meter_sub_category, json[QString("meterSubCategory")]);
    m_meter_sub_category_isSet = !json[QString("meterSubCategory")].isNull() && m_meter_sub_category_isValid;

    m_partner_earned_credit_applied_isValid = ::OpenAPI::fromJsonValue(m_partner_earned_credit_applied, json[QString("partnerEarnedCreditApplied")]);
    m_partner_earned_credit_applied_isSet = !json[QString("partnerEarnedCreditApplied")].isNull() && m_partner_earned_credit_applied_isValid;

    m_partner_earned_credit_rate_isValid = ::OpenAPI::fromJsonValue(m_partner_earned_credit_rate, json[QString("partnerEarnedCreditRate")]);
    m_partner_earned_credit_rate_isSet = !json[QString("partnerEarnedCreditRate")].isNull() && m_partner_earned_credit_rate_isValid;

    m_partner_name_isValid = ::OpenAPI::fromJsonValue(m_partner_name, json[QString("partnerName")]);
    m_partner_name_isSet = !json[QString("partnerName")].isNull() && m_partner_name_isValid;

    m_partner_tenant_id_isValid = ::OpenAPI::fromJsonValue(m_partner_tenant_id, json[QString("partnerTenantId")]);
    m_partner_tenant_id_isSet = !json[QString("partnerTenantId")].isNull() && m_partner_tenant_id_isValid;

    m_payg_cost_in_billing_currency_isValid = ::OpenAPI::fromJsonValue(m_payg_cost_in_billing_currency, json[QString("paygCostInBillingCurrency")]);
    m_payg_cost_in_billing_currency_isSet = !json[QString("paygCostInBillingCurrency")].isNull() && m_payg_cost_in_billing_currency_isValid;

    m_payg_cost_in_usd_isValid = ::OpenAPI::fromJsonValue(m_payg_cost_in_usd, json[QString("paygCostInUSD")]);
    m_payg_cost_in_usd_isSet = !json[QString("paygCostInUSD")].isNull() && m_payg_cost_in_usd_isValid;

    m_previous_invoice_id_isValid = ::OpenAPI::fromJsonValue(m_previous_invoice_id, json[QString("previousInvoiceId")]);
    m_previous_invoice_id_isSet = !json[QString("previousInvoiceId")].isNull() && m_previous_invoice_id_isValid;

    m_pricing_currency_code_isValid = ::OpenAPI::fromJsonValue(m_pricing_currency_code, json[QString("pricingCurrencyCode")]);
    m_pricing_currency_code_isSet = !json[QString("pricingCurrencyCode")].isNull() && m_pricing_currency_code_isValid;

    m_product_isValid = ::OpenAPI::fromJsonValue(m_product, json[QString("product")]);
    m_product_isSet = !json[QString("product")].isNull() && m_product_isValid;

    m_product_identifier_isValid = ::OpenAPI::fromJsonValue(m_product_identifier, json[QString("productIdentifier")]);
    m_product_identifier_isSet = !json[QString("productIdentifier")].isNull() && m_product_identifier_isValid;

    m_product_order_id_isValid = ::OpenAPI::fromJsonValue(m_product_order_id, json[QString("productOrderId")]);
    m_product_order_id_isSet = !json[QString("productOrderId")].isNull() && m_product_order_id_isValid;

    m_product_order_name_isValid = ::OpenAPI::fromJsonValue(m_product_order_name, json[QString("productOrderName")]);
    m_product_order_name_isSet = !json[QString("productOrderName")].isNull() && m_product_order_name_isValid;

    m_publisher_id_isValid = ::OpenAPI::fromJsonValue(m_publisher_id, json[QString("publisherId")]);
    m_publisher_id_isSet = !json[QString("publisherId")].isNull() && m_publisher_id_isValid;

    m_publisher_name_isValid = ::OpenAPI::fromJsonValue(m_publisher_name, json[QString("publisherName")]);
    m_publisher_name_isSet = !json[QString("publisherName")].isNull() && m_publisher_name_isValid;

    m_publisher_type_isValid = ::OpenAPI::fromJsonValue(m_publisher_type, json[QString("publisherType")]);
    m_publisher_type_isSet = !json[QString("publisherType")].isNull() && m_publisher_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_reseller_mpn_id_isValid = ::OpenAPI::fromJsonValue(m_reseller_mpn_id, json[QString("resellerMpnId")]);
    m_reseller_mpn_id_isSet = !json[QString("resellerMpnId")].isNull() && m_reseller_mpn_id_isValid;

    m_reseller_name_isValid = ::OpenAPI::fromJsonValue(m_reseller_name, json[QString("resellerName")]);
    m_reseller_name_isSet = !json[QString("resellerName")].isNull() && m_reseller_name_isValid;

    m_reservation_id_isValid = ::OpenAPI::fromJsonValue(m_reservation_id, json[QString("reservationId")]);
    m_reservation_id_isSet = !json[QString("reservationId")].isNull() && m_reservation_id_isValid;

    m_reservation_name_isValid = ::OpenAPI::fromJsonValue(m_reservation_name, json[QString("reservationName")]);
    m_reservation_name_isSet = !json[QString("reservationName")].isNull() && m_reservation_name_isValid;

    m_resource_group_isValid = ::OpenAPI::fromJsonValue(m_resource_group, json[QString("resourceGroup")]);
    m_resource_group_isSet = !json[QString("resourceGroup")].isNull() && m_resource_group_isValid;

    m_resource_location_isValid = ::OpenAPI::fromJsonValue(m_resource_location, json[QString("resourceLocation")]);
    m_resource_location_isSet = !json[QString("resourceLocation")].isNull() && m_resource_location_isValid;

    m_resource_location_normalized_isValid = ::OpenAPI::fromJsonValue(m_resource_location_normalized, json[QString("resourceLocationNormalized")]);
    m_resource_location_normalized_isSet = !json[QString("resourceLocationNormalized")].isNull() && m_resource_location_normalized_isValid;

    m_service_family_isValid = ::OpenAPI::fromJsonValue(m_service_family, json[QString("serviceFamily")]);
    m_service_family_isSet = !json[QString("serviceFamily")].isNull() && m_service_family_isValid;

    m_service_info1_isValid = ::OpenAPI::fromJsonValue(m_service_info1, json[QString("serviceInfo1")]);
    m_service_info1_isSet = !json[QString("serviceInfo1")].isNull() && m_service_info1_isValid;

    m_service_info2_isValid = ::OpenAPI::fromJsonValue(m_service_info2, json[QString("serviceInfo2")]);
    m_service_info2_isSet = !json[QString("serviceInfo2")].isNull() && m_service_info2_isValid;

    m_service_period_end_date_isValid = ::OpenAPI::fromJsonValue(m_service_period_end_date, json[QString("servicePeriodEndDate")]);
    m_service_period_end_date_isSet = !json[QString("servicePeriodEndDate")].isNull() && m_service_period_end_date_isValid;

    m_service_period_start_date_isValid = ::OpenAPI::fromJsonValue(m_service_period_start_date, json[QString("servicePeriodStartDate")]);
    m_service_period_start_date_isSet = !json[QString("servicePeriodStartDate")].isNull() && m_service_period_start_date_isValid;

    m_subscription_guid_isValid = ::OpenAPI::fromJsonValue(m_subscription_guid, json[QString("subscriptionGuid")]);
    m_subscription_guid_isSet = !json[QString("subscriptionGuid")].isNull() && m_subscription_guid_isValid;

    m_subscription_name_isValid = ::OpenAPI::fromJsonValue(m_subscription_name, json[QString("subscriptionName")]);
    m_subscription_name_isSet = !json[QString("subscriptionName")].isNull() && m_subscription_name_isValid;

    m_term_isValid = ::OpenAPI::fromJsonValue(m_term, json[QString("term")]);
    m_term_isSet = !json[QString("term")].isNull() && m_term_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unitOfMeasure")]);
    m_unit_of_measure_isSet = !json[QString("unitOfMeasure")].isNull() && m_unit_of_measure_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unitPrice")]);
    m_unit_price_isSet = !json[QString("unitPrice")].isNull() && m_unit_price_isValid;
}

QString OAIModernUsageDetailProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIModernUsageDetailProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_info_isSet) {
        obj.insert(QString("additionalInfo"), ::OpenAPI::toJsonValue(m_additional_info));
    }
    if (m_billing_account_id_isSet) {
        obj.insert(QString("billingAccountId"), ::OpenAPI::toJsonValue(m_billing_account_id));
    }
    if (m_billing_account_name_isSet) {
        obj.insert(QString("billingAccountName"), ::OpenAPI::toJsonValue(m_billing_account_name));
    }
    if (m_billing_currency_code_isSet) {
        obj.insert(QString("billingCurrencyCode"), ::OpenAPI::toJsonValue(m_billing_currency_code));
    }
    if (m_billing_period_end_date_isSet) {
        obj.insert(QString("billingPeriodEndDate"), ::OpenAPI::toJsonValue(m_billing_period_end_date));
    }
    if (m_billing_period_start_date_isSet) {
        obj.insert(QString("billingPeriodStartDate"), ::OpenAPI::toJsonValue(m_billing_period_start_date));
    }
    if (m_billing_profile_id_isSet) {
        obj.insert(QString("billingProfileId"), ::OpenAPI::toJsonValue(m_billing_profile_id));
    }
    if (m_billing_profile_name_isSet) {
        obj.insert(QString("billingProfileName"), ::OpenAPI::toJsonValue(m_billing_profile_name));
    }
    if (m_charge_type_isSet) {
        obj.insert(QString("chargeType"), ::OpenAPI::toJsonValue(m_charge_type));
    }
    if (m_consumed_service_isSet) {
        obj.insert(QString("consumedService"), ::OpenAPI::toJsonValue(m_consumed_service));
    }
    if (m_cost_center_isSet) {
        obj.insert(QString("costCenter"), ::OpenAPI::toJsonValue(m_cost_center));
    }
    if (m_cost_in_billing_currency_isSet) {
        obj.insert(QString("costInBillingCurrency"), ::OpenAPI::toJsonValue(m_cost_in_billing_currency));
    }
    if (m_cost_in_pricing_currency_isSet) {
        obj.insert(QString("costInPricingCurrency"), ::OpenAPI::toJsonValue(m_cost_in_pricing_currency));
    }
    if (m_cost_in_usd_isSet) {
        obj.insert(QString("costInUSD"), ::OpenAPI::toJsonValue(m_cost_in_usd));
    }
    if (m_customer_name_isSet) {
        obj.insert(QString("customerName"), ::OpenAPI::toJsonValue(m_customer_name));
    }
    if (m_customer_tenant_id_isSet) {
        obj.insert(QString("customerTenantId"), ::OpenAPI::toJsonValue(m_customer_tenant_id));
    }
    if (m_date_isSet) {
        obj.insert(QString("date"), ::OpenAPI::toJsonValue(m_date));
    }
    if (m_exchange_rate_isSet) {
        obj.insert(QString("exchangeRate"), ::OpenAPI::toJsonValue(m_exchange_rate));
    }
    if (m_exchange_rate_date_isSet) {
        obj.insert(QString("exchangeRateDate"), ::OpenAPI::toJsonValue(m_exchange_rate_date));
    }
    if (m_exchange_rate_pricing_to_billing_isSet) {
        obj.insert(QString("exchangeRatePricingToBilling"), ::OpenAPI::toJsonValue(m_exchange_rate_pricing_to_billing));
    }
    if (m_frequency_isSet) {
        obj.insert(QString("frequency"), ::OpenAPI::toJsonValue(m_frequency));
    }
    if (m_instance_name_isSet) {
        obj.insert(QString("instanceName"), ::OpenAPI::toJsonValue(m_instance_name));
    }
    if (m_invoice_id_isSet) {
        obj.insert(QString("invoiceId"), ::OpenAPI::toJsonValue(m_invoice_id));
    }
    if (m_invoice_section_id_isSet) {
        obj.insert(QString("invoiceSectionId"), ::OpenAPI::toJsonValue(m_invoice_section_id));
    }
    if (m_invoice_section_name_isSet) {
        obj.insert(QString("invoiceSectionName"), ::OpenAPI::toJsonValue(m_invoice_section_name));
    }
    if (m_is_azure_credit_eligible_isSet) {
        obj.insert(QString("isAzureCreditEligible"), ::OpenAPI::toJsonValue(m_is_azure_credit_eligible));
    }
    if (m_market_price_isSet) {
        obj.insert(QString("marketPrice"), ::OpenAPI::toJsonValue(m_market_price));
    }
    if (m_meter_category_isSet) {
        obj.insert(QString("meterCategory"), ::OpenAPI::toJsonValue(m_meter_category));
    }
    if (m_meter_id_isSet) {
        obj.insert(QString("meterId"), ::OpenAPI::toJsonValue(m_meter_id));
    }
    if (m_meter_name_isSet) {
        obj.insert(QString("meterName"), ::OpenAPI::toJsonValue(m_meter_name));
    }
    if (m_meter_region_isSet) {
        obj.insert(QString("meterRegion"), ::OpenAPI::toJsonValue(m_meter_region));
    }
    if (m_meter_sub_category_isSet) {
        obj.insert(QString("meterSubCategory"), ::OpenAPI::toJsonValue(m_meter_sub_category));
    }
    if (m_partner_earned_credit_applied_isSet) {
        obj.insert(QString("partnerEarnedCreditApplied"), ::OpenAPI::toJsonValue(m_partner_earned_credit_applied));
    }
    if (m_partner_earned_credit_rate_isSet) {
        obj.insert(QString("partnerEarnedCreditRate"), ::OpenAPI::toJsonValue(m_partner_earned_credit_rate));
    }
    if (m_partner_name_isSet) {
        obj.insert(QString("partnerName"), ::OpenAPI::toJsonValue(m_partner_name));
    }
    if (m_partner_tenant_id_isSet) {
        obj.insert(QString("partnerTenantId"), ::OpenAPI::toJsonValue(m_partner_tenant_id));
    }
    if (m_payg_cost_in_billing_currency_isSet) {
        obj.insert(QString("paygCostInBillingCurrency"), ::OpenAPI::toJsonValue(m_payg_cost_in_billing_currency));
    }
    if (m_payg_cost_in_usd_isSet) {
        obj.insert(QString("paygCostInUSD"), ::OpenAPI::toJsonValue(m_payg_cost_in_usd));
    }
    if (m_previous_invoice_id_isSet) {
        obj.insert(QString("previousInvoiceId"), ::OpenAPI::toJsonValue(m_previous_invoice_id));
    }
    if (m_pricing_currency_code_isSet) {
        obj.insert(QString("pricingCurrencyCode"), ::OpenAPI::toJsonValue(m_pricing_currency_code));
    }
    if (m_product_isSet) {
        obj.insert(QString("product"), ::OpenAPI::toJsonValue(m_product));
    }
    if (m_product_identifier_isSet) {
        obj.insert(QString("productIdentifier"), ::OpenAPI::toJsonValue(m_product_identifier));
    }
    if (m_product_order_id_isSet) {
        obj.insert(QString("productOrderId"), ::OpenAPI::toJsonValue(m_product_order_id));
    }
    if (m_product_order_name_isSet) {
        obj.insert(QString("productOrderName"), ::OpenAPI::toJsonValue(m_product_order_name));
    }
    if (m_publisher_id_isSet) {
        obj.insert(QString("publisherId"), ::OpenAPI::toJsonValue(m_publisher_id));
    }
    if (m_publisher_name_isSet) {
        obj.insert(QString("publisherName"), ::OpenAPI::toJsonValue(m_publisher_name));
    }
    if (m_publisher_type_isSet) {
        obj.insert(QString("publisherType"), ::OpenAPI::toJsonValue(m_publisher_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_reseller_mpn_id_isSet) {
        obj.insert(QString("resellerMpnId"), ::OpenAPI::toJsonValue(m_reseller_mpn_id));
    }
    if (m_reseller_name_isSet) {
        obj.insert(QString("resellerName"), ::OpenAPI::toJsonValue(m_reseller_name));
    }
    if (m_reservation_id_isSet) {
        obj.insert(QString("reservationId"), ::OpenAPI::toJsonValue(m_reservation_id));
    }
    if (m_reservation_name_isSet) {
        obj.insert(QString("reservationName"), ::OpenAPI::toJsonValue(m_reservation_name));
    }
    if (m_resource_group_isSet) {
        obj.insert(QString("resourceGroup"), ::OpenAPI::toJsonValue(m_resource_group));
    }
    if (m_resource_location_isSet) {
        obj.insert(QString("resourceLocation"), ::OpenAPI::toJsonValue(m_resource_location));
    }
    if (m_resource_location_normalized_isSet) {
        obj.insert(QString("resourceLocationNormalized"), ::OpenAPI::toJsonValue(m_resource_location_normalized));
    }
    if (m_service_family_isSet) {
        obj.insert(QString("serviceFamily"), ::OpenAPI::toJsonValue(m_service_family));
    }
    if (m_service_info1_isSet) {
        obj.insert(QString("serviceInfo1"), ::OpenAPI::toJsonValue(m_service_info1));
    }
    if (m_service_info2_isSet) {
        obj.insert(QString("serviceInfo2"), ::OpenAPI::toJsonValue(m_service_info2));
    }
    if (m_service_period_end_date_isSet) {
        obj.insert(QString("servicePeriodEndDate"), ::OpenAPI::toJsonValue(m_service_period_end_date));
    }
    if (m_service_period_start_date_isSet) {
        obj.insert(QString("servicePeriodStartDate"), ::OpenAPI::toJsonValue(m_service_period_start_date));
    }
    if (m_subscription_guid_isSet) {
        obj.insert(QString("subscriptionGuid"), ::OpenAPI::toJsonValue(m_subscription_guid));
    }
    if (m_subscription_name_isSet) {
        obj.insert(QString("subscriptionName"), ::OpenAPI::toJsonValue(m_subscription_name));
    }
    if (m_term_isSet) {
        obj.insert(QString("term"), ::OpenAPI::toJsonValue(m_term));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unitOfMeasure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unitPrice"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

QString OAIModernUsageDetailProperties::getAdditionalInfo() const {
    return m_additional_info;
}
void OAIModernUsageDetailProperties::setAdditionalInfo(const QString &additional_info) {
    m_additional_info = additional_info;
    m_additional_info_isSet = true;
}

bool OAIModernUsageDetailProperties::is_additional_info_Set() const{
    return m_additional_info_isSet;
}

bool OAIModernUsageDetailProperties::is_additional_info_Valid() const{
    return m_additional_info_isValid;
}

QString OAIModernUsageDetailProperties::getBillingAccountId() const {
    return m_billing_account_id;
}
void OAIModernUsageDetailProperties::setBillingAccountId(const QString &billing_account_id) {
    m_billing_account_id = billing_account_id;
    m_billing_account_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_account_id_Set() const{
    return m_billing_account_id_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_account_id_Valid() const{
    return m_billing_account_id_isValid;
}

QString OAIModernUsageDetailProperties::getBillingAccountName() const {
    return m_billing_account_name;
}
void OAIModernUsageDetailProperties::setBillingAccountName(const QString &billing_account_name) {
    m_billing_account_name = billing_account_name;
    m_billing_account_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_account_name_Set() const{
    return m_billing_account_name_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_account_name_Valid() const{
    return m_billing_account_name_isValid;
}

QString OAIModernUsageDetailProperties::getBillingCurrencyCode() const {
    return m_billing_currency_code;
}
void OAIModernUsageDetailProperties::setBillingCurrencyCode(const QString &billing_currency_code) {
    m_billing_currency_code = billing_currency_code;
    m_billing_currency_code_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_currency_code_Set() const{
    return m_billing_currency_code_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_currency_code_Valid() const{
    return m_billing_currency_code_isValid;
}

QDateTime OAIModernUsageDetailProperties::getBillingPeriodEndDate() const {
    return m_billing_period_end_date;
}
void OAIModernUsageDetailProperties::setBillingPeriodEndDate(const QDateTime &billing_period_end_date) {
    m_billing_period_end_date = billing_period_end_date;
    m_billing_period_end_date_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_period_end_date_Set() const{
    return m_billing_period_end_date_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_period_end_date_Valid() const{
    return m_billing_period_end_date_isValid;
}

QDateTime OAIModernUsageDetailProperties::getBillingPeriodStartDate() const {
    return m_billing_period_start_date;
}
void OAIModernUsageDetailProperties::setBillingPeriodStartDate(const QDateTime &billing_period_start_date) {
    m_billing_period_start_date = billing_period_start_date;
    m_billing_period_start_date_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_period_start_date_Set() const{
    return m_billing_period_start_date_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_period_start_date_Valid() const{
    return m_billing_period_start_date_isValid;
}

QString OAIModernUsageDetailProperties::getBillingProfileId() const {
    return m_billing_profile_id;
}
void OAIModernUsageDetailProperties::setBillingProfileId(const QString &billing_profile_id) {
    m_billing_profile_id = billing_profile_id;
    m_billing_profile_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_profile_id_Set() const{
    return m_billing_profile_id_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_profile_id_Valid() const{
    return m_billing_profile_id_isValid;
}

QString OAIModernUsageDetailProperties::getBillingProfileName() const {
    return m_billing_profile_name;
}
void OAIModernUsageDetailProperties::setBillingProfileName(const QString &billing_profile_name) {
    m_billing_profile_name = billing_profile_name;
    m_billing_profile_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_billing_profile_name_Set() const{
    return m_billing_profile_name_isSet;
}

bool OAIModernUsageDetailProperties::is_billing_profile_name_Valid() const{
    return m_billing_profile_name_isValid;
}

QString OAIModernUsageDetailProperties::getChargeType() const {
    return m_charge_type;
}
void OAIModernUsageDetailProperties::setChargeType(const QString &charge_type) {
    m_charge_type = charge_type;
    m_charge_type_isSet = true;
}

bool OAIModernUsageDetailProperties::is_charge_type_Set() const{
    return m_charge_type_isSet;
}

bool OAIModernUsageDetailProperties::is_charge_type_Valid() const{
    return m_charge_type_isValid;
}

QString OAIModernUsageDetailProperties::getConsumedService() const {
    return m_consumed_service;
}
void OAIModernUsageDetailProperties::setConsumedService(const QString &consumed_service) {
    m_consumed_service = consumed_service;
    m_consumed_service_isSet = true;
}

bool OAIModernUsageDetailProperties::is_consumed_service_Set() const{
    return m_consumed_service_isSet;
}

bool OAIModernUsageDetailProperties::is_consumed_service_Valid() const{
    return m_consumed_service_isValid;
}

QString OAIModernUsageDetailProperties::getCostCenter() const {
    return m_cost_center;
}
void OAIModernUsageDetailProperties::setCostCenter(const QString &cost_center) {
    m_cost_center = cost_center;
    m_cost_center_isSet = true;
}

bool OAIModernUsageDetailProperties::is_cost_center_Set() const{
    return m_cost_center_isSet;
}

bool OAIModernUsageDetailProperties::is_cost_center_Valid() const{
    return m_cost_center_isValid;
}

double OAIModernUsageDetailProperties::getCostInBillingCurrency() const {
    return m_cost_in_billing_currency;
}
void OAIModernUsageDetailProperties::setCostInBillingCurrency(const double &cost_in_billing_currency) {
    m_cost_in_billing_currency = cost_in_billing_currency;
    m_cost_in_billing_currency_isSet = true;
}

bool OAIModernUsageDetailProperties::is_cost_in_billing_currency_Set() const{
    return m_cost_in_billing_currency_isSet;
}

bool OAIModernUsageDetailProperties::is_cost_in_billing_currency_Valid() const{
    return m_cost_in_billing_currency_isValid;
}

double OAIModernUsageDetailProperties::getCostInPricingCurrency() const {
    return m_cost_in_pricing_currency;
}
void OAIModernUsageDetailProperties::setCostInPricingCurrency(const double &cost_in_pricing_currency) {
    m_cost_in_pricing_currency = cost_in_pricing_currency;
    m_cost_in_pricing_currency_isSet = true;
}

bool OAIModernUsageDetailProperties::is_cost_in_pricing_currency_Set() const{
    return m_cost_in_pricing_currency_isSet;
}

bool OAIModernUsageDetailProperties::is_cost_in_pricing_currency_Valid() const{
    return m_cost_in_pricing_currency_isValid;
}

double OAIModernUsageDetailProperties::getCostInUsd() const {
    return m_cost_in_usd;
}
void OAIModernUsageDetailProperties::setCostInUsd(const double &cost_in_usd) {
    m_cost_in_usd = cost_in_usd;
    m_cost_in_usd_isSet = true;
}

bool OAIModernUsageDetailProperties::is_cost_in_usd_Set() const{
    return m_cost_in_usd_isSet;
}

bool OAIModernUsageDetailProperties::is_cost_in_usd_Valid() const{
    return m_cost_in_usd_isValid;
}

QString OAIModernUsageDetailProperties::getCustomerName() const {
    return m_customer_name;
}
void OAIModernUsageDetailProperties::setCustomerName(const QString &customer_name) {
    m_customer_name = customer_name;
    m_customer_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_customer_name_Set() const{
    return m_customer_name_isSet;
}

bool OAIModernUsageDetailProperties::is_customer_name_Valid() const{
    return m_customer_name_isValid;
}

QString OAIModernUsageDetailProperties::getCustomerTenantId() const {
    return m_customer_tenant_id;
}
void OAIModernUsageDetailProperties::setCustomerTenantId(const QString &customer_tenant_id) {
    m_customer_tenant_id = customer_tenant_id;
    m_customer_tenant_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_customer_tenant_id_Set() const{
    return m_customer_tenant_id_isSet;
}

bool OAIModernUsageDetailProperties::is_customer_tenant_id_Valid() const{
    return m_customer_tenant_id_isValid;
}

QDateTime OAIModernUsageDetailProperties::getDate() const {
    return m_date;
}
void OAIModernUsageDetailProperties::setDate(const QDateTime &date) {
    m_date = date;
    m_date_isSet = true;
}

bool OAIModernUsageDetailProperties::is_date_Set() const{
    return m_date_isSet;
}

bool OAIModernUsageDetailProperties::is_date_Valid() const{
    return m_date_isValid;
}

QString OAIModernUsageDetailProperties::getExchangeRate() const {
    return m_exchange_rate;
}
void OAIModernUsageDetailProperties::setExchangeRate(const QString &exchange_rate) {
    m_exchange_rate = exchange_rate;
    m_exchange_rate_isSet = true;
}

bool OAIModernUsageDetailProperties::is_exchange_rate_Set() const{
    return m_exchange_rate_isSet;
}

bool OAIModernUsageDetailProperties::is_exchange_rate_Valid() const{
    return m_exchange_rate_isValid;
}

QDateTime OAIModernUsageDetailProperties::getExchangeRateDate() const {
    return m_exchange_rate_date;
}
void OAIModernUsageDetailProperties::setExchangeRateDate(const QDateTime &exchange_rate_date) {
    m_exchange_rate_date = exchange_rate_date;
    m_exchange_rate_date_isSet = true;
}

bool OAIModernUsageDetailProperties::is_exchange_rate_date_Set() const{
    return m_exchange_rate_date_isSet;
}

bool OAIModernUsageDetailProperties::is_exchange_rate_date_Valid() const{
    return m_exchange_rate_date_isValid;
}

double OAIModernUsageDetailProperties::getExchangeRatePricingToBilling() const {
    return m_exchange_rate_pricing_to_billing;
}
void OAIModernUsageDetailProperties::setExchangeRatePricingToBilling(const double &exchange_rate_pricing_to_billing) {
    m_exchange_rate_pricing_to_billing = exchange_rate_pricing_to_billing;
    m_exchange_rate_pricing_to_billing_isSet = true;
}

bool OAIModernUsageDetailProperties::is_exchange_rate_pricing_to_billing_Set() const{
    return m_exchange_rate_pricing_to_billing_isSet;
}

bool OAIModernUsageDetailProperties::is_exchange_rate_pricing_to_billing_Valid() const{
    return m_exchange_rate_pricing_to_billing_isValid;
}

QString OAIModernUsageDetailProperties::getFrequency() const {
    return m_frequency;
}
void OAIModernUsageDetailProperties::setFrequency(const QString &frequency) {
    m_frequency = frequency;
    m_frequency_isSet = true;
}

bool OAIModernUsageDetailProperties::is_frequency_Set() const{
    return m_frequency_isSet;
}

bool OAIModernUsageDetailProperties::is_frequency_Valid() const{
    return m_frequency_isValid;
}

QString OAIModernUsageDetailProperties::getInstanceName() const {
    return m_instance_name;
}
void OAIModernUsageDetailProperties::setInstanceName(const QString &instance_name) {
    m_instance_name = instance_name;
    m_instance_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_instance_name_Set() const{
    return m_instance_name_isSet;
}

bool OAIModernUsageDetailProperties::is_instance_name_Valid() const{
    return m_instance_name_isValid;
}

QString OAIModernUsageDetailProperties::getInvoiceId() const {
    return m_invoice_id;
}
void OAIModernUsageDetailProperties::setInvoiceId(const QString &invoice_id) {
    m_invoice_id = invoice_id;
    m_invoice_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_invoice_id_Set() const{
    return m_invoice_id_isSet;
}

bool OAIModernUsageDetailProperties::is_invoice_id_Valid() const{
    return m_invoice_id_isValid;
}

QString OAIModernUsageDetailProperties::getInvoiceSectionId() const {
    return m_invoice_section_id;
}
void OAIModernUsageDetailProperties::setInvoiceSectionId(const QString &invoice_section_id) {
    m_invoice_section_id = invoice_section_id;
    m_invoice_section_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_invoice_section_id_Set() const{
    return m_invoice_section_id_isSet;
}

bool OAIModernUsageDetailProperties::is_invoice_section_id_Valid() const{
    return m_invoice_section_id_isValid;
}

QString OAIModernUsageDetailProperties::getInvoiceSectionName() const {
    return m_invoice_section_name;
}
void OAIModernUsageDetailProperties::setInvoiceSectionName(const QString &invoice_section_name) {
    m_invoice_section_name = invoice_section_name;
    m_invoice_section_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_invoice_section_name_Set() const{
    return m_invoice_section_name_isSet;
}

bool OAIModernUsageDetailProperties::is_invoice_section_name_Valid() const{
    return m_invoice_section_name_isValid;
}

bool OAIModernUsageDetailProperties::isIsAzureCreditEligible() const {
    return m_is_azure_credit_eligible;
}
void OAIModernUsageDetailProperties::setIsAzureCreditEligible(const bool &is_azure_credit_eligible) {
    m_is_azure_credit_eligible = is_azure_credit_eligible;
    m_is_azure_credit_eligible_isSet = true;
}

bool OAIModernUsageDetailProperties::is_is_azure_credit_eligible_Set() const{
    return m_is_azure_credit_eligible_isSet;
}

bool OAIModernUsageDetailProperties::is_is_azure_credit_eligible_Valid() const{
    return m_is_azure_credit_eligible_isValid;
}

double OAIModernUsageDetailProperties::getMarketPrice() const {
    return m_market_price;
}
void OAIModernUsageDetailProperties::setMarketPrice(const double &market_price) {
    m_market_price = market_price;
    m_market_price_isSet = true;
}

bool OAIModernUsageDetailProperties::is_market_price_Set() const{
    return m_market_price_isSet;
}

bool OAIModernUsageDetailProperties::is_market_price_Valid() const{
    return m_market_price_isValid;
}

QString OAIModernUsageDetailProperties::getMeterCategory() const {
    return m_meter_category;
}
void OAIModernUsageDetailProperties::setMeterCategory(const QString &meter_category) {
    m_meter_category = meter_category;
    m_meter_category_isSet = true;
}

bool OAIModernUsageDetailProperties::is_meter_category_Set() const{
    return m_meter_category_isSet;
}

bool OAIModernUsageDetailProperties::is_meter_category_Valid() const{
    return m_meter_category_isValid;
}

QString OAIModernUsageDetailProperties::getMeterId() const {
    return m_meter_id;
}
void OAIModernUsageDetailProperties::setMeterId(const QString &meter_id) {
    m_meter_id = meter_id;
    m_meter_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_meter_id_Set() const{
    return m_meter_id_isSet;
}

bool OAIModernUsageDetailProperties::is_meter_id_Valid() const{
    return m_meter_id_isValid;
}

QString OAIModernUsageDetailProperties::getMeterName() const {
    return m_meter_name;
}
void OAIModernUsageDetailProperties::setMeterName(const QString &meter_name) {
    m_meter_name = meter_name;
    m_meter_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_meter_name_Set() const{
    return m_meter_name_isSet;
}

bool OAIModernUsageDetailProperties::is_meter_name_Valid() const{
    return m_meter_name_isValid;
}

QString OAIModernUsageDetailProperties::getMeterRegion() const {
    return m_meter_region;
}
void OAIModernUsageDetailProperties::setMeterRegion(const QString &meter_region) {
    m_meter_region = meter_region;
    m_meter_region_isSet = true;
}

bool OAIModernUsageDetailProperties::is_meter_region_Set() const{
    return m_meter_region_isSet;
}

bool OAIModernUsageDetailProperties::is_meter_region_Valid() const{
    return m_meter_region_isValid;
}

QString OAIModernUsageDetailProperties::getMeterSubCategory() const {
    return m_meter_sub_category;
}
void OAIModernUsageDetailProperties::setMeterSubCategory(const QString &meter_sub_category) {
    m_meter_sub_category = meter_sub_category;
    m_meter_sub_category_isSet = true;
}

bool OAIModernUsageDetailProperties::is_meter_sub_category_Set() const{
    return m_meter_sub_category_isSet;
}

bool OAIModernUsageDetailProperties::is_meter_sub_category_Valid() const{
    return m_meter_sub_category_isValid;
}

QString OAIModernUsageDetailProperties::getPartnerEarnedCreditApplied() const {
    return m_partner_earned_credit_applied;
}
void OAIModernUsageDetailProperties::setPartnerEarnedCreditApplied(const QString &partner_earned_credit_applied) {
    m_partner_earned_credit_applied = partner_earned_credit_applied;
    m_partner_earned_credit_applied_isSet = true;
}

bool OAIModernUsageDetailProperties::is_partner_earned_credit_applied_Set() const{
    return m_partner_earned_credit_applied_isSet;
}

bool OAIModernUsageDetailProperties::is_partner_earned_credit_applied_Valid() const{
    return m_partner_earned_credit_applied_isValid;
}

double OAIModernUsageDetailProperties::getPartnerEarnedCreditRate() const {
    return m_partner_earned_credit_rate;
}
void OAIModernUsageDetailProperties::setPartnerEarnedCreditRate(const double &partner_earned_credit_rate) {
    m_partner_earned_credit_rate = partner_earned_credit_rate;
    m_partner_earned_credit_rate_isSet = true;
}

bool OAIModernUsageDetailProperties::is_partner_earned_credit_rate_Set() const{
    return m_partner_earned_credit_rate_isSet;
}

bool OAIModernUsageDetailProperties::is_partner_earned_credit_rate_Valid() const{
    return m_partner_earned_credit_rate_isValid;
}

QString OAIModernUsageDetailProperties::getPartnerName() const {
    return m_partner_name;
}
void OAIModernUsageDetailProperties::setPartnerName(const QString &partner_name) {
    m_partner_name = partner_name;
    m_partner_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_partner_name_Set() const{
    return m_partner_name_isSet;
}

bool OAIModernUsageDetailProperties::is_partner_name_Valid() const{
    return m_partner_name_isValid;
}

QString OAIModernUsageDetailProperties::getPartnerTenantId() const {
    return m_partner_tenant_id;
}
void OAIModernUsageDetailProperties::setPartnerTenantId(const QString &partner_tenant_id) {
    m_partner_tenant_id = partner_tenant_id;
    m_partner_tenant_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_partner_tenant_id_Set() const{
    return m_partner_tenant_id_isSet;
}

bool OAIModernUsageDetailProperties::is_partner_tenant_id_Valid() const{
    return m_partner_tenant_id_isValid;
}

double OAIModernUsageDetailProperties::getPaygCostInBillingCurrency() const {
    return m_payg_cost_in_billing_currency;
}
void OAIModernUsageDetailProperties::setPaygCostInBillingCurrency(const double &payg_cost_in_billing_currency) {
    m_payg_cost_in_billing_currency = payg_cost_in_billing_currency;
    m_payg_cost_in_billing_currency_isSet = true;
}

bool OAIModernUsageDetailProperties::is_payg_cost_in_billing_currency_Set() const{
    return m_payg_cost_in_billing_currency_isSet;
}

bool OAIModernUsageDetailProperties::is_payg_cost_in_billing_currency_Valid() const{
    return m_payg_cost_in_billing_currency_isValid;
}

double OAIModernUsageDetailProperties::getPaygCostInUsd() const {
    return m_payg_cost_in_usd;
}
void OAIModernUsageDetailProperties::setPaygCostInUsd(const double &payg_cost_in_usd) {
    m_payg_cost_in_usd = payg_cost_in_usd;
    m_payg_cost_in_usd_isSet = true;
}

bool OAIModernUsageDetailProperties::is_payg_cost_in_usd_Set() const{
    return m_payg_cost_in_usd_isSet;
}

bool OAIModernUsageDetailProperties::is_payg_cost_in_usd_Valid() const{
    return m_payg_cost_in_usd_isValid;
}

QString OAIModernUsageDetailProperties::getPreviousInvoiceId() const {
    return m_previous_invoice_id;
}
void OAIModernUsageDetailProperties::setPreviousInvoiceId(const QString &previous_invoice_id) {
    m_previous_invoice_id = previous_invoice_id;
    m_previous_invoice_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_previous_invoice_id_Set() const{
    return m_previous_invoice_id_isSet;
}

bool OAIModernUsageDetailProperties::is_previous_invoice_id_Valid() const{
    return m_previous_invoice_id_isValid;
}

QString OAIModernUsageDetailProperties::getPricingCurrencyCode() const {
    return m_pricing_currency_code;
}
void OAIModernUsageDetailProperties::setPricingCurrencyCode(const QString &pricing_currency_code) {
    m_pricing_currency_code = pricing_currency_code;
    m_pricing_currency_code_isSet = true;
}

bool OAIModernUsageDetailProperties::is_pricing_currency_code_Set() const{
    return m_pricing_currency_code_isSet;
}

bool OAIModernUsageDetailProperties::is_pricing_currency_code_Valid() const{
    return m_pricing_currency_code_isValid;
}

QString OAIModernUsageDetailProperties::getProduct() const {
    return m_product;
}
void OAIModernUsageDetailProperties::setProduct(const QString &product) {
    m_product = product;
    m_product_isSet = true;
}

bool OAIModernUsageDetailProperties::is_product_Set() const{
    return m_product_isSet;
}

bool OAIModernUsageDetailProperties::is_product_Valid() const{
    return m_product_isValid;
}

QString OAIModernUsageDetailProperties::getProductIdentifier() const {
    return m_product_identifier;
}
void OAIModernUsageDetailProperties::setProductIdentifier(const QString &product_identifier) {
    m_product_identifier = product_identifier;
    m_product_identifier_isSet = true;
}

bool OAIModernUsageDetailProperties::is_product_identifier_Set() const{
    return m_product_identifier_isSet;
}

bool OAIModernUsageDetailProperties::is_product_identifier_Valid() const{
    return m_product_identifier_isValid;
}

QString OAIModernUsageDetailProperties::getProductOrderId() const {
    return m_product_order_id;
}
void OAIModernUsageDetailProperties::setProductOrderId(const QString &product_order_id) {
    m_product_order_id = product_order_id;
    m_product_order_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_product_order_id_Set() const{
    return m_product_order_id_isSet;
}

bool OAIModernUsageDetailProperties::is_product_order_id_Valid() const{
    return m_product_order_id_isValid;
}

QString OAIModernUsageDetailProperties::getProductOrderName() const {
    return m_product_order_name;
}
void OAIModernUsageDetailProperties::setProductOrderName(const QString &product_order_name) {
    m_product_order_name = product_order_name;
    m_product_order_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_product_order_name_Set() const{
    return m_product_order_name_isSet;
}

bool OAIModernUsageDetailProperties::is_product_order_name_Valid() const{
    return m_product_order_name_isValid;
}

QString OAIModernUsageDetailProperties::getPublisherId() const {
    return m_publisher_id;
}
void OAIModernUsageDetailProperties::setPublisherId(const QString &publisher_id) {
    m_publisher_id = publisher_id;
    m_publisher_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_publisher_id_Set() const{
    return m_publisher_id_isSet;
}

bool OAIModernUsageDetailProperties::is_publisher_id_Valid() const{
    return m_publisher_id_isValid;
}

QString OAIModernUsageDetailProperties::getPublisherName() const {
    return m_publisher_name;
}
void OAIModernUsageDetailProperties::setPublisherName(const QString &publisher_name) {
    m_publisher_name = publisher_name;
    m_publisher_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_publisher_name_Set() const{
    return m_publisher_name_isSet;
}

bool OAIModernUsageDetailProperties::is_publisher_name_Valid() const{
    return m_publisher_name_isValid;
}

QString OAIModernUsageDetailProperties::getPublisherType() const {
    return m_publisher_type;
}
void OAIModernUsageDetailProperties::setPublisherType(const QString &publisher_type) {
    m_publisher_type = publisher_type;
    m_publisher_type_isSet = true;
}

bool OAIModernUsageDetailProperties::is_publisher_type_Set() const{
    return m_publisher_type_isSet;
}

bool OAIModernUsageDetailProperties::is_publisher_type_Valid() const{
    return m_publisher_type_isValid;
}

double OAIModernUsageDetailProperties::getQuantity() const {
    return m_quantity;
}
void OAIModernUsageDetailProperties::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAIModernUsageDetailProperties::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAIModernUsageDetailProperties::is_quantity_Valid() const{
    return m_quantity_isValid;
}

QString OAIModernUsageDetailProperties::getResellerMpnId() const {
    return m_reseller_mpn_id;
}
void OAIModernUsageDetailProperties::setResellerMpnId(const QString &reseller_mpn_id) {
    m_reseller_mpn_id = reseller_mpn_id;
    m_reseller_mpn_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_reseller_mpn_id_Set() const{
    return m_reseller_mpn_id_isSet;
}

bool OAIModernUsageDetailProperties::is_reseller_mpn_id_Valid() const{
    return m_reseller_mpn_id_isValid;
}

QString OAIModernUsageDetailProperties::getResellerName() const {
    return m_reseller_name;
}
void OAIModernUsageDetailProperties::setResellerName(const QString &reseller_name) {
    m_reseller_name = reseller_name;
    m_reseller_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_reseller_name_Set() const{
    return m_reseller_name_isSet;
}

bool OAIModernUsageDetailProperties::is_reseller_name_Valid() const{
    return m_reseller_name_isValid;
}

QString OAIModernUsageDetailProperties::getReservationId() const {
    return m_reservation_id;
}
void OAIModernUsageDetailProperties::setReservationId(const QString &reservation_id) {
    m_reservation_id = reservation_id;
    m_reservation_id_isSet = true;
}

bool OAIModernUsageDetailProperties::is_reservation_id_Set() const{
    return m_reservation_id_isSet;
}

bool OAIModernUsageDetailProperties::is_reservation_id_Valid() const{
    return m_reservation_id_isValid;
}

QString OAIModernUsageDetailProperties::getReservationName() const {
    return m_reservation_name;
}
void OAIModernUsageDetailProperties::setReservationName(const QString &reservation_name) {
    m_reservation_name = reservation_name;
    m_reservation_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_reservation_name_Set() const{
    return m_reservation_name_isSet;
}

bool OAIModernUsageDetailProperties::is_reservation_name_Valid() const{
    return m_reservation_name_isValid;
}

QString OAIModernUsageDetailProperties::getResourceGroup() const {
    return m_resource_group;
}
void OAIModernUsageDetailProperties::setResourceGroup(const QString &resource_group) {
    m_resource_group = resource_group;
    m_resource_group_isSet = true;
}

bool OAIModernUsageDetailProperties::is_resource_group_Set() const{
    return m_resource_group_isSet;
}

bool OAIModernUsageDetailProperties::is_resource_group_Valid() const{
    return m_resource_group_isValid;
}

QString OAIModernUsageDetailProperties::getResourceLocation() const {
    return m_resource_location;
}
void OAIModernUsageDetailProperties::setResourceLocation(const QString &resource_location) {
    m_resource_location = resource_location;
    m_resource_location_isSet = true;
}

bool OAIModernUsageDetailProperties::is_resource_location_Set() const{
    return m_resource_location_isSet;
}

bool OAIModernUsageDetailProperties::is_resource_location_Valid() const{
    return m_resource_location_isValid;
}

QString OAIModernUsageDetailProperties::getResourceLocationNormalized() const {
    return m_resource_location_normalized;
}
void OAIModernUsageDetailProperties::setResourceLocationNormalized(const QString &resource_location_normalized) {
    m_resource_location_normalized = resource_location_normalized;
    m_resource_location_normalized_isSet = true;
}

bool OAIModernUsageDetailProperties::is_resource_location_normalized_Set() const{
    return m_resource_location_normalized_isSet;
}

bool OAIModernUsageDetailProperties::is_resource_location_normalized_Valid() const{
    return m_resource_location_normalized_isValid;
}

QString OAIModernUsageDetailProperties::getServiceFamily() const {
    return m_service_family;
}
void OAIModernUsageDetailProperties::setServiceFamily(const QString &service_family) {
    m_service_family = service_family;
    m_service_family_isSet = true;
}

bool OAIModernUsageDetailProperties::is_service_family_Set() const{
    return m_service_family_isSet;
}

bool OAIModernUsageDetailProperties::is_service_family_Valid() const{
    return m_service_family_isValid;
}

QString OAIModernUsageDetailProperties::getServiceInfo1() const {
    return m_service_info1;
}
void OAIModernUsageDetailProperties::setServiceInfo1(const QString &service_info1) {
    m_service_info1 = service_info1;
    m_service_info1_isSet = true;
}

bool OAIModernUsageDetailProperties::is_service_info1_Set() const{
    return m_service_info1_isSet;
}

bool OAIModernUsageDetailProperties::is_service_info1_Valid() const{
    return m_service_info1_isValid;
}

QString OAIModernUsageDetailProperties::getServiceInfo2() const {
    return m_service_info2;
}
void OAIModernUsageDetailProperties::setServiceInfo2(const QString &service_info2) {
    m_service_info2 = service_info2;
    m_service_info2_isSet = true;
}

bool OAIModernUsageDetailProperties::is_service_info2_Set() const{
    return m_service_info2_isSet;
}

bool OAIModernUsageDetailProperties::is_service_info2_Valid() const{
    return m_service_info2_isValid;
}

QDateTime OAIModernUsageDetailProperties::getServicePeriodEndDate() const {
    return m_service_period_end_date;
}
void OAIModernUsageDetailProperties::setServicePeriodEndDate(const QDateTime &service_period_end_date) {
    m_service_period_end_date = service_period_end_date;
    m_service_period_end_date_isSet = true;
}

bool OAIModernUsageDetailProperties::is_service_period_end_date_Set() const{
    return m_service_period_end_date_isSet;
}

bool OAIModernUsageDetailProperties::is_service_period_end_date_Valid() const{
    return m_service_period_end_date_isValid;
}

QDateTime OAIModernUsageDetailProperties::getServicePeriodStartDate() const {
    return m_service_period_start_date;
}
void OAIModernUsageDetailProperties::setServicePeriodStartDate(const QDateTime &service_period_start_date) {
    m_service_period_start_date = service_period_start_date;
    m_service_period_start_date_isSet = true;
}

bool OAIModernUsageDetailProperties::is_service_period_start_date_Set() const{
    return m_service_period_start_date_isSet;
}

bool OAIModernUsageDetailProperties::is_service_period_start_date_Valid() const{
    return m_service_period_start_date_isValid;
}

QString OAIModernUsageDetailProperties::getSubscriptionGuid() const {
    return m_subscription_guid;
}
void OAIModernUsageDetailProperties::setSubscriptionGuid(const QString &subscription_guid) {
    m_subscription_guid = subscription_guid;
    m_subscription_guid_isSet = true;
}

bool OAIModernUsageDetailProperties::is_subscription_guid_Set() const{
    return m_subscription_guid_isSet;
}

bool OAIModernUsageDetailProperties::is_subscription_guid_Valid() const{
    return m_subscription_guid_isValid;
}

QString OAIModernUsageDetailProperties::getSubscriptionName() const {
    return m_subscription_name;
}
void OAIModernUsageDetailProperties::setSubscriptionName(const QString &subscription_name) {
    m_subscription_name = subscription_name;
    m_subscription_name_isSet = true;
}

bool OAIModernUsageDetailProperties::is_subscription_name_Set() const{
    return m_subscription_name_isSet;
}

bool OAIModernUsageDetailProperties::is_subscription_name_Valid() const{
    return m_subscription_name_isValid;
}

QString OAIModernUsageDetailProperties::getTerm() const {
    return m_term;
}
void OAIModernUsageDetailProperties::setTerm(const QString &term) {
    m_term = term;
    m_term_isSet = true;
}

bool OAIModernUsageDetailProperties::is_term_Set() const{
    return m_term_isSet;
}

bool OAIModernUsageDetailProperties::is_term_Valid() const{
    return m_term_isValid;
}

QString OAIModernUsageDetailProperties::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAIModernUsageDetailProperties::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAIModernUsageDetailProperties::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAIModernUsageDetailProperties::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

double OAIModernUsageDetailProperties::getUnitPrice() const {
    return m_unit_price;
}
void OAIModernUsageDetailProperties::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAIModernUsageDetailProperties::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAIModernUsageDetailProperties::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAIModernUsageDetailProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_info_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_account_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_profile_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_profile_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_charge_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_consumed_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_center_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_in_billing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_in_pricing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cost_in_usd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_exchange_rate_pricing_to_billing_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instance_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_section_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_section_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_azure_credit_eligible_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_market_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_meter_sub_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_earned_credit_applied_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_earned_credit_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_partner_tenant_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payg_cost_in_billing_currency_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payg_cost_in_usd_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous_invoice_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pricing_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_order_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_order_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publisher_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reseller_mpn_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reseller_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reservation_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resource_location_normalized_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_family_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_info1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_info2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_period_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_period_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_guid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_term_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIModernUsageDetailProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
