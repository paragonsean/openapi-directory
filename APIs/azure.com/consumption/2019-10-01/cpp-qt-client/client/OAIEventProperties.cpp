/**
 * ConsumptionManagementClient
 * Consumption management client provides access to consumption resources for Azure Enterprise Subscriptions.
 *
 * The version of the OpenAPI document: 2019-10-01
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEventProperties.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEventProperties::OAIEventProperties(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEventProperties::OAIEventProperties() {
    this->initializeModel();
}

OAIEventProperties::~OAIEventProperties() {}

void OAIEventProperties::initializeModel() {

    m_adjustments_isSet = false;
    m_adjustments_isValid = false;

    m_charges_isSet = false;
    m_charges_isValid = false;

    m_closed_balance_isSet = false;
    m_closed_balance_isValid = false;

    m_credit_expired_isSet = false;
    m_credit_expired_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_event_type_isSet = false;
    m_event_type_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_new_credit_isSet = false;
    m_new_credit_isValid = false;

    m_transaction_date_isSet = false;
    m_transaction_date_isValid = false;
}

void OAIEventProperties::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEventProperties::fromJsonObject(QJsonObject json) {

    m_adjustments_isValid = ::OpenAPI::fromJsonValue(m_adjustments, json[QString("adjustments")]);
    m_adjustments_isSet = !json[QString("adjustments")].isNull() && m_adjustments_isValid;

    m_charges_isValid = ::OpenAPI::fromJsonValue(m_charges, json[QString("charges")]);
    m_charges_isSet = !json[QString("charges")].isNull() && m_charges_isValid;

    m_closed_balance_isValid = ::OpenAPI::fromJsonValue(m_closed_balance, json[QString("closedBalance")]);
    m_closed_balance_isSet = !json[QString("closedBalance")].isNull() && m_closed_balance_isValid;

    m_credit_expired_isValid = ::OpenAPI::fromJsonValue(m_credit_expired, json[QString("creditExpired")]);
    m_credit_expired_isSet = !json[QString("creditExpired")].isNull() && m_credit_expired_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_event_type_isValid = ::OpenAPI::fromJsonValue(m_event_type, json[QString("eventType")]);
    m_event_type_isSet = !json[QString("eventType")].isNull() && m_event_type_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoiceNumber")]);
    m_invoice_number_isSet = !json[QString("invoiceNumber")].isNull() && m_invoice_number_isValid;

    m_new_credit_isValid = ::OpenAPI::fromJsonValue(m_new_credit, json[QString("newCredit")]);
    m_new_credit_isSet = !json[QString("newCredit")].isNull() && m_new_credit_isValid;

    m_transaction_date_isValid = ::OpenAPI::fromJsonValue(m_transaction_date, json[QString("transactionDate")]);
    m_transaction_date_isSet = !json[QString("transactionDate")].isNull() && m_transaction_date_isValid;
}

QString OAIEventProperties::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEventProperties::asJsonObject() const {
    QJsonObject obj;
    if (m_adjustments.isSet()) {
        obj.insert(QString("adjustments"), ::OpenAPI::toJsonValue(m_adjustments));
    }
    if (m_charges.isSet()) {
        obj.insert(QString("charges"), ::OpenAPI::toJsonValue(m_charges));
    }
    if (m_closed_balance.isSet()) {
        obj.insert(QString("closedBalance"), ::OpenAPI::toJsonValue(m_closed_balance));
    }
    if (m_credit_expired.isSet()) {
        obj.insert(QString("creditExpired"), ::OpenAPI::toJsonValue(m_credit_expired));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_event_type_isSet) {
        obj.insert(QString("eventType"), ::OpenAPI::toJsonValue(m_event_type));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoiceNumber"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_new_credit.isSet()) {
        obj.insert(QString("newCredit"), ::OpenAPI::toJsonValue(m_new_credit));
    }
    if (m_transaction_date_isSet) {
        obj.insert(QString("transactionDate"), ::OpenAPI::toJsonValue(m_transaction_date));
    }
    return obj;
}

OAIAmount OAIEventProperties::getAdjustments() const {
    return m_adjustments;
}
void OAIEventProperties::setAdjustments(const OAIAmount &adjustments) {
    m_adjustments = adjustments;
    m_adjustments_isSet = true;
}

bool OAIEventProperties::is_adjustments_Set() const{
    return m_adjustments_isSet;
}

bool OAIEventProperties::is_adjustments_Valid() const{
    return m_adjustments_isValid;
}

OAIAmount OAIEventProperties::getCharges() const {
    return m_charges;
}
void OAIEventProperties::setCharges(const OAIAmount &charges) {
    m_charges = charges;
    m_charges_isSet = true;
}

bool OAIEventProperties::is_charges_Set() const{
    return m_charges_isSet;
}

bool OAIEventProperties::is_charges_Valid() const{
    return m_charges_isValid;
}

OAIAmount OAIEventProperties::getClosedBalance() const {
    return m_closed_balance;
}
void OAIEventProperties::setClosedBalance(const OAIAmount &closed_balance) {
    m_closed_balance = closed_balance;
    m_closed_balance_isSet = true;
}

bool OAIEventProperties::is_closed_balance_Set() const{
    return m_closed_balance_isSet;
}

bool OAIEventProperties::is_closed_balance_Valid() const{
    return m_closed_balance_isValid;
}

OAIAmount OAIEventProperties::getCreditExpired() const {
    return m_credit_expired;
}
void OAIEventProperties::setCreditExpired(const OAIAmount &credit_expired) {
    m_credit_expired = credit_expired;
    m_credit_expired_isSet = true;
}

bool OAIEventProperties::is_credit_expired_Set() const{
    return m_credit_expired_isSet;
}

bool OAIEventProperties::is_credit_expired_Valid() const{
    return m_credit_expired_isValid;
}

QString OAIEventProperties::getDescription() const {
    return m_description;
}
void OAIEventProperties::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEventProperties::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEventProperties::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEventProperties::getEventType() const {
    return m_event_type;
}
void OAIEventProperties::setEventType(const QString &event_type) {
    m_event_type = event_type;
    m_event_type_isSet = true;
}

bool OAIEventProperties::is_event_type_Set() const{
    return m_event_type_isSet;
}

bool OAIEventProperties::is_event_type_Valid() const{
    return m_event_type_isValid;
}

QString OAIEventProperties::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIEventProperties::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIEventProperties::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIEventProperties::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

OAIAmount OAIEventProperties::getNewCredit() const {
    return m_new_credit;
}
void OAIEventProperties::setNewCredit(const OAIAmount &new_credit) {
    m_new_credit = new_credit;
    m_new_credit_isSet = true;
}

bool OAIEventProperties::is_new_credit_Set() const{
    return m_new_credit_isSet;
}

bool OAIEventProperties::is_new_credit_Valid() const{
    return m_new_credit_isValid;
}

QDateTime OAIEventProperties::getTransactionDate() const {
    return m_transaction_date;
}
void OAIEventProperties::setTransactionDate(const QDateTime &transaction_date) {
    m_transaction_date = transaction_date;
    m_transaction_date_isSet = true;
}

bool OAIEventProperties::is_transaction_date_Set() const{
    return m_transaction_date_isSet;
}

bool OAIEventProperties::is_transaction_date_Valid() const{
    return m_transaction_date_isValid;
}

bool OAIEventProperties::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_adjustments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_charges.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_closed_balance.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_credit_expired.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_new_credit.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEventProperties::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
